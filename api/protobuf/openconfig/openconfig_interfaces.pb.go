// openconfig.openconfig_interfaces is generated by proto_generator as a protobuf
// representation of a YANG schema.
//
// Input schema modules:
//  - ../api/yang/public/doc/openconfig-example.yang
//  - ../api/yang/public/third_party/ietf/iana-if-type.yang
//  - ../api/yang/public/third_party/ietf/ietf-interfaces.yang
//  - ../api/yang/public/third_party/ietf/ietf-yang-types.yang
//  - ../api/yang/public/third_party/ietf/ietf-inet-types.yang
//  - ../api/yang/public/release/models/bfd/openconfig-bfd.yang
//  - ../api/yang/public/release/models/vlan/openconfig-vlan.yang
//  - ../api/yang/public/release/models/vlan/openconfig-vlan-types.yang
//  - ../api/yang/public/release/models/wifi/openconfig-access-points.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-mac.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-types.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-phy.yang
//  - ../api/yang/public/release/models/wifi/openconfig-ap-interfaces.yang
//  - ../api/yang/public/release/models/wifi/openconfig-ap-manager.yang
//  - ../api/yang/public/release/models/macsec/openconfig-macsec.yang
//  - ../api/yang/public/release/models/macsec/openconfig-macsec-types.yang
//  - ../api/yang/public/release/models/stp/openconfig-spanning-tree-types.yang
//  - ../api/yang/public/release/models/stp/openconfig-spanning-tree.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-errors.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-peer-group.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-types.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-global.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-neighbor.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common-structure.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-policy.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common-multiprotocol.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-types.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-port.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-fan.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-linecard.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-ext.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-cpu.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-psu.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-transceiver.yang
//  - ../api/yang/public/release/models/multicast/openconfig-pim-types.yang
//  - ../api/yang/public/release/models/multicast/openconfig-igmp-types.yang
//  - ../api/yang/public/release/models/multicast/openconfig-igmp.yang
//  - ../api/yang/public/release/models/multicast/openconfig-pim.yang
//  - ../api/yang/public/release/models/catalog/openconfig-module-catalog.yang
//  - ../api/yang/public/release/models/catalog/openconfig-catalog-types.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-interfaces.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-8021x.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-types.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-aggregate.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-poe.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-tunnel.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ip.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ethernet.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ethernet-ext.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ip-ext.yang
//  - ../api/yang/public/release/models/acl/openconfig-packet-match-types.yang
//  - ../api/yang/public/release/models/acl/openconfig-packet-match.yang
//  - ../api/yang/public/release/models/acl/openconfig-acl.yang
//  - ../api/yang/public/release/models/system/openconfig-license.yang
//  - ../api/yang/public/release/models/system/openconfig-system.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-radius.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa.yang
//  - ../api/yang/public/release/models/system/openconfig-system-management.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-types.yang
//  - ../api/yang/public/release/models/system/openconfig-procmon.yang
//  - ../api/yang/public/release/models/system/openconfig-messages.yang
//  - ../api/yang/public/release/models/system/openconfig-system-terminal.yang
//  - ../api/yang/public/release/models/system/openconfig-system-logging.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-tacacs.yang
//  - ../api/yang/public/release/models/system/openconfig-alarms.yang
//  - ../api/yang/public/release/models/system/openconfig-alarm-types.yang
//  - ../api/yang/public/release/models/policy/openconfig-policy-types.yang
//  - ../api/yang/public/release/models/policy/openconfig-routing-policy.yang
//  - ../api/yang/public/release/models/lacp/openconfig-lacp.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-wavelength-router.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-optical-amplifier.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-protection.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-channel-monitor.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-connectivity.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-optical-attenuator.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-common.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-types.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-terminal-device.yang
//  - ../api/yang/public/release/models/telemetry/openconfig-telemetry-types.yang
//  - ../api/yang/public/release/models/telemetry/openconfig-telemetry.yang
//  - ../api/yang/public/release/models/openflow/openconfig-openflow.yang
//  - ../api/yang/public/release/models/openflow/openconfig-openflow-types.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-tables.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-ext.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-table-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-shared-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-types.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-types.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-elements.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-interfaces.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-srte.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-forwarding-policies.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-interfaces.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-path-groups.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
//  - ../api/yang/public/release/models/relay-agent/openconfig-relay-agent.yang
//  - ../api/yang/public/release/models/lldp/openconfig-lldp.yang
//  - ../api/yang/public/release/models/lldp/openconfig-lldp-types.yang
//  - ../api/yang/public/release/models/openconfig-extensions.yang
//  - ../api/yang/public/release/models/types/openconfig-yang-types.yang
//  - ../api/yang/public/release/models/types/openconfig-inet-types.yang
//  - ../api/yang/public/release/models/types/openconfig-types.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-srte-policy.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-rsvp-sr-ext.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-segment-routing-types.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-segment-routing.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-types.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-igp.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-te.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-rsvp.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-static.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-sr.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-ldp.yang
//  - ../api/yang/public/release/models/probes/openconfig-probes-types.yang
//  - ../api/yang/public/release/models/probes/openconfig-probes.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-lsp.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-lsdb-types.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-policy.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-types.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-routing.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-area.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospf-policy.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-common.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-global.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-area-interface.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-lsdb.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospf-types.yang
//  - ../api/yang/public/release/models/local-routing/openconfig-local-routing.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-l3.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-l2.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-policy.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-types.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-mpls.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-common.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-types.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ipv6.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-pf.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-network-instance.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ipv4.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ethernet.yang

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        (unknown)
// source: openconfig_interfaces.proto

package openconfig

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/openconfig/ygot/proto/yext"
	ywrapper "github.com/openconfig/ygot/proto/ywrapper"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State_Status int32

const (
	Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State_STATUS_UNSET                 Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State_Status = 0
	Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State_STATUS_AUTHENTICATED         Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State_Status = 1
	Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State_STATUS_AUTHENTICATING        Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State_Status = 2
	Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State_STATUS_FAILED_AUTHENTICATION Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State_Status = 3
	Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State_STATUS_SUPPLICANT_TIMEOUT    Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State_Status = 4
)

// Enum value maps for Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State_Status.
var (
	Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State_Status_name = map[int32]string{
		0: "STATUS_UNSET",
		1: "STATUS_AUTHENTICATED",
		2: "STATUS_AUTHENTICATING",
		3: "STATUS_FAILED_AUTHENTICATION",
		4: "STATUS_SUPPLICANT_TIMEOUT",
	}
	Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State_Status_value = map[string]int32{
		"STATUS_UNSET":                 0,
		"STATUS_AUTHENTICATED":         1,
		"STATUS_AUTHENTICATING":        2,
		"STATUS_FAILED_AUTHENTICATION": 3,
		"STATUS_SUPPLICANT_TIMEOUT":    4,
	}
)

func (x Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State_Status) Enum() *Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State_Status {
	p := new(Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State_Status)
	*p = x
	return p
}

func (x Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_interfaces_proto_enumTypes[0].Descriptor()
}

func (Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State_Status) Type() protoreflect.EnumType {
	return &file_openconfig_interfaces_proto_enumTypes[0]
}

func (x Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State_Status.Descriptor instead.
func (Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State_Status) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 2, 0, 0, 0, 0}
}

type Interfaces_Interface_Ethernet_Config_DuplexMode int32

const (
	Interfaces_Interface_Ethernet_Config_DUPLEXMODE_UNSET Interfaces_Interface_Ethernet_Config_DuplexMode = 0
	Interfaces_Interface_Ethernet_Config_DUPLEXMODE_FULL  Interfaces_Interface_Ethernet_Config_DuplexMode = 1
	Interfaces_Interface_Ethernet_Config_DUPLEXMODE_HALF  Interfaces_Interface_Ethernet_Config_DuplexMode = 2
)

// Enum value maps for Interfaces_Interface_Ethernet_Config_DuplexMode.
var (
	Interfaces_Interface_Ethernet_Config_DuplexMode_name = map[int32]string{
		0: "DUPLEXMODE_UNSET",
		1: "DUPLEXMODE_FULL",
		2: "DUPLEXMODE_HALF",
	}
	Interfaces_Interface_Ethernet_Config_DuplexMode_value = map[string]int32{
		"DUPLEXMODE_UNSET": 0,
		"DUPLEXMODE_FULL":  1,
		"DUPLEXMODE_HALF":  2,
	}
)

func (x Interfaces_Interface_Ethernet_Config_DuplexMode) Enum() *Interfaces_Interface_Ethernet_Config_DuplexMode {
	p := new(Interfaces_Interface_Ethernet_Config_DuplexMode)
	*p = x
	return p
}

func (x Interfaces_Interface_Ethernet_Config_DuplexMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Interfaces_Interface_Ethernet_Config_DuplexMode) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_interfaces_proto_enumTypes[1].Descriptor()
}

func (Interfaces_Interface_Ethernet_Config_DuplexMode) Type() protoreflect.EnumType {
	return &file_openconfig_interfaces_proto_enumTypes[1]
}

func (x Interfaces_Interface_Ethernet_Config_DuplexMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Interfaces_Interface_Ethernet_Config_DuplexMode.Descriptor instead.
func (Interfaces_Interface_Ethernet_Config_DuplexMode) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 2, 1, 0}
}

type Interfaces_Interface_Ethernet_Dot1X_Config_HostMode int32

const (
	Interfaces_Interface_Ethernet_Dot1X_Config_HOSTMODE_UNSET        Interfaces_Interface_Ethernet_Dot1X_Config_HostMode = 0
	Interfaces_Interface_Ethernet_Dot1X_Config_HOSTMODE_SINGLE_HOST  Interfaces_Interface_Ethernet_Dot1X_Config_HostMode = 1
	Interfaces_Interface_Ethernet_Dot1X_Config_HOSTMODE_MULTI_HOST   Interfaces_Interface_Ethernet_Dot1X_Config_HostMode = 2
	Interfaces_Interface_Ethernet_Dot1X_Config_HOSTMODE_MULTI_DOMAIN Interfaces_Interface_Ethernet_Dot1X_Config_HostMode = 3
)

// Enum value maps for Interfaces_Interface_Ethernet_Dot1X_Config_HostMode.
var (
	Interfaces_Interface_Ethernet_Dot1X_Config_HostMode_name = map[int32]string{
		0: "HOSTMODE_UNSET",
		1: "HOSTMODE_SINGLE_HOST",
		2: "HOSTMODE_MULTI_HOST",
		3: "HOSTMODE_MULTI_DOMAIN",
	}
	Interfaces_Interface_Ethernet_Dot1X_Config_HostMode_value = map[string]int32{
		"HOSTMODE_UNSET":        0,
		"HOSTMODE_SINGLE_HOST":  1,
		"HOSTMODE_MULTI_HOST":   2,
		"HOSTMODE_MULTI_DOMAIN": 3,
	}
)

func (x Interfaces_Interface_Ethernet_Dot1X_Config_HostMode) Enum() *Interfaces_Interface_Ethernet_Dot1X_Config_HostMode {
	p := new(Interfaces_Interface_Ethernet_Dot1X_Config_HostMode)
	*p = x
	return p
}

func (x Interfaces_Interface_Ethernet_Dot1X_Config_HostMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Interfaces_Interface_Ethernet_Dot1X_Config_HostMode) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_interfaces_proto_enumTypes[2].Descriptor()
}

func (Interfaces_Interface_Ethernet_Dot1X_Config_HostMode) Type() protoreflect.EnumType {
	return &file_openconfig_interfaces_proto_enumTypes[2]
}

func (x Interfaces_Interface_Ethernet_Dot1X_Config_HostMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Interfaces_Interface_Ethernet_Dot1X_Config_HostMode.Descriptor instead.
func (Interfaces_Interface_Ethernet_Dot1X_Config_HostMode) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 2, 2, 0, 0}
}

type Interfaces_Interface_Ethernet_Dot1X_State_HostMode int32

const (
	Interfaces_Interface_Ethernet_Dot1X_State_HOSTMODE_UNSET        Interfaces_Interface_Ethernet_Dot1X_State_HostMode = 0
	Interfaces_Interface_Ethernet_Dot1X_State_HOSTMODE_SINGLE_HOST  Interfaces_Interface_Ethernet_Dot1X_State_HostMode = 1
	Interfaces_Interface_Ethernet_Dot1X_State_HOSTMODE_MULTI_HOST   Interfaces_Interface_Ethernet_Dot1X_State_HostMode = 2
	Interfaces_Interface_Ethernet_Dot1X_State_HOSTMODE_MULTI_DOMAIN Interfaces_Interface_Ethernet_Dot1X_State_HostMode = 3
)

// Enum value maps for Interfaces_Interface_Ethernet_Dot1X_State_HostMode.
var (
	Interfaces_Interface_Ethernet_Dot1X_State_HostMode_name = map[int32]string{
		0: "HOSTMODE_UNSET",
		1: "HOSTMODE_SINGLE_HOST",
		2: "HOSTMODE_MULTI_HOST",
		3: "HOSTMODE_MULTI_DOMAIN",
	}
	Interfaces_Interface_Ethernet_Dot1X_State_HostMode_value = map[string]int32{
		"HOSTMODE_UNSET":        0,
		"HOSTMODE_SINGLE_HOST":  1,
		"HOSTMODE_MULTI_HOST":   2,
		"HOSTMODE_MULTI_DOMAIN": 3,
	}
)

func (x Interfaces_Interface_Ethernet_Dot1X_State_HostMode) Enum() *Interfaces_Interface_Ethernet_Dot1X_State_HostMode {
	p := new(Interfaces_Interface_Ethernet_Dot1X_State_HostMode)
	*p = x
	return p
}

func (x Interfaces_Interface_Ethernet_Dot1X_State_HostMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Interfaces_Interface_Ethernet_Dot1X_State_HostMode) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_interfaces_proto_enumTypes[3].Descriptor()
}

func (Interfaces_Interface_Ethernet_Dot1X_State_HostMode) Type() protoreflect.EnumType {
	return &file_openconfig_interfaces_proto_enumTypes[3]
}

func (x Interfaces_Interface_Ethernet_Dot1X_State_HostMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Interfaces_Interface_Ethernet_Dot1X_State_HostMode.Descriptor instead.
func (Interfaces_Interface_Ethernet_Dot1X_State_HostMode) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 2, 2, 1, 0}
}

type Interfaces_Interface_Ethernet_State_DuplexMode int32

const (
	Interfaces_Interface_Ethernet_State_DUPLEXMODE_UNSET Interfaces_Interface_Ethernet_State_DuplexMode = 0
	Interfaces_Interface_Ethernet_State_DUPLEXMODE_FULL  Interfaces_Interface_Ethernet_State_DuplexMode = 1
	Interfaces_Interface_Ethernet_State_DUPLEXMODE_HALF  Interfaces_Interface_Ethernet_State_DuplexMode = 2
)

// Enum value maps for Interfaces_Interface_Ethernet_State_DuplexMode.
var (
	Interfaces_Interface_Ethernet_State_DuplexMode_name = map[int32]string{
		0: "DUPLEXMODE_UNSET",
		1: "DUPLEXMODE_FULL",
		2: "DUPLEXMODE_HALF",
	}
	Interfaces_Interface_Ethernet_State_DuplexMode_value = map[string]int32{
		"DUPLEXMODE_UNSET": 0,
		"DUPLEXMODE_FULL":  1,
		"DUPLEXMODE_HALF":  2,
	}
)

func (x Interfaces_Interface_Ethernet_State_DuplexMode) Enum() *Interfaces_Interface_Ethernet_State_DuplexMode {
	p := new(Interfaces_Interface_Ethernet_State_DuplexMode)
	*p = x
	return p
}

func (x Interfaces_Interface_Ethernet_State_DuplexMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Interfaces_Interface_Ethernet_State_DuplexMode) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_interfaces_proto_enumTypes[4].Descriptor()
}

func (Interfaces_Interface_Ethernet_State_DuplexMode) Type() protoreflect.EnumType {
	return &file_openconfig_interfaces_proto_enumTypes[4]
}

func (x Interfaces_Interface_Ethernet_State_DuplexMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Interfaces_Interface_Ethernet_State_DuplexMode.Descriptor instead.
func (Interfaces_Interface_Ethernet_State_DuplexMode) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 2, 4, 0}
}

type Interfaces_Interface_Ethernet_State_NegotiatedDuplexMode int32

const (
	Interfaces_Interface_Ethernet_State_NEGOTIATEDDUPLEXMODE_UNSET Interfaces_Interface_Ethernet_State_NegotiatedDuplexMode = 0
	Interfaces_Interface_Ethernet_State_NEGOTIATEDDUPLEXMODE_FULL  Interfaces_Interface_Ethernet_State_NegotiatedDuplexMode = 1
	Interfaces_Interface_Ethernet_State_NEGOTIATEDDUPLEXMODE_HALF  Interfaces_Interface_Ethernet_State_NegotiatedDuplexMode = 2
)

// Enum value maps for Interfaces_Interface_Ethernet_State_NegotiatedDuplexMode.
var (
	Interfaces_Interface_Ethernet_State_NegotiatedDuplexMode_name = map[int32]string{
		0: "NEGOTIATEDDUPLEXMODE_UNSET",
		1: "NEGOTIATEDDUPLEXMODE_FULL",
		2: "NEGOTIATEDDUPLEXMODE_HALF",
	}
	Interfaces_Interface_Ethernet_State_NegotiatedDuplexMode_value = map[string]int32{
		"NEGOTIATEDDUPLEXMODE_UNSET": 0,
		"NEGOTIATEDDUPLEXMODE_FULL":  1,
		"NEGOTIATEDDUPLEXMODE_HALF":  2,
	}
)

func (x Interfaces_Interface_Ethernet_State_NegotiatedDuplexMode) Enum() *Interfaces_Interface_Ethernet_State_NegotiatedDuplexMode {
	p := new(Interfaces_Interface_Ethernet_State_NegotiatedDuplexMode)
	*p = x
	return p
}

func (x Interfaces_Interface_Ethernet_State_NegotiatedDuplexMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Interfaces_Interface_Ethernet_State_NegotiatedDuplexMode) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_interfaces_proto_enumTypes[5].Descriptor()
}

func (Interfaces_Interface_Ethernet_State_NegotiatedDuplexMode) Type() protoreflect.EnumType {
	return &file_openconfig_interfaces_proto_enumTypes[5]
}

func (x Interfaces_Interface_Ethernet_State_NegotiatedDuplexMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Interfaces_Interface_Ethernet_State_NegotiatedDuplexMode.Descriptor instead.
func (Interfaces_Interface_Ethernet_State_NegotiatedDuplexMode) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 2, 4, 1}
}

type Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp_Config_Mode int32

const (
	Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp_Config_MODE_DISABLE     Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp_Config_Mode = 0
	Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp_Config_MODE_REMOTE_ONLY Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp_Config_Mode = 2
	Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp_Config_MODE_ALL         Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp_Config_Mode = 3
)

// Enum value maps for Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp_Config_Mode.
var (
	Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp_Config_Mode_name = map[int32]string{
		0: "MODE_DISABLE",
		2: "MODE_REMOTE_ONLY",
		3: "MODE_ALL",
	}
	Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp_Config_Mode_value = map[string]int32{
		"MODE_DISABLE":     0,
		"MODE_REMOTE_ONLY": 2,
		"MODE_ALL":         3,
	}
)

func (x Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp_Config_Mode) Enum() *Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp_Config_Mode {
	p := new(Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp_Config_Mode)
	*p = x
	return p
}

func (x Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp_Config_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp_Config_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_interfaces_proto_enumTypes[6].Descriptor()
}

func (Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp_Config_Mode) Type() protoreflect.EnumType {
	return &file_openconfig_interfaces_proto_enumTypes[6]
}

func (x Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp_Config_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp_Config_Mode.Descriptor instead.
func (Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp_Config_Mode) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 4, 1, 3, 0, 0}
}

type Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp_State_Mode int32

const (
	Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp_State_MODE_DISABLE     Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp_State_Mode = 0
	Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp_State_MODE_REMOTE_ONLY Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp_State_Mode = 2
	Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp_State_MODE_ALL         Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp_State_Mode = 3
)

// Enum value maps for Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp_State_Mode.
var (
	Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp_State_Mode_name = map[int32]string{
		0: "MODE_DISABLE",
		2: "MODE_REMOTE_ONLY",
		3: "MODE_ALL",
	}
	Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp_State_Mode_value = map[string]int32{
		"MODE_DISABLE":     0,
		"MODE_REMOTE_ONLY": 2,
		"MODE_ALL":         3,
	}
)

func (x Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp_State_Mode) Enum() *Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp_State_Mode {
	p := new(Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp_State_Mode)
	*p = x
	return p
}

func (x Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp_State_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp_State_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_interfaces_proto_enumTypes[7].Descriptor()
}

func (Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp_State_Mode) Type() protoreflect.EnumType {
	return &file_openconfig_interfaces_proto_enumTypes[7]
}

func (x Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp_State_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp_State_Mode.Descriptor instead.
func (Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp_State_Mode) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 4, 1, 3, 1, 0}
}

type Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_State_Status int32

const (
	Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_State_STATUS_UNSET        Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_State_Status = 0
	Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_State_STATUS_PREFERRED    Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_State_Status = 1
	Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_State_STATUS_DEPRECATED   Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_State_Status = 2
	Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_State_STATUS_INVALID      Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_State_Status = 3
	Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_State_STATUS_INACCESSIBLE Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_State_Status = 4
	Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_State_STATUS_UNKNOWN      Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_State_Status = 5
	Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_State_STATUS_TENTATIVE    Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_State_Status = 6
	Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_State_STATUS_DUPLICATE    Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_State_Status = 7
	Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_State_STATUS_OPTIMISTIC   Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_State_Status = 8
)

// Enum value maps for Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_State_Status.
var (
	Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_State_Status_name = map[int32]string{
		0: "STATUS_UNSET",
		1: "STATUS_PREFERRED",
		2: "STATUS_DEPRECATED",
		3: "STATUS_INVALID",
		4: "STATUS_INACCESSIBLE",
		5: "STATUS_UNKNOWN",
		6: "STATUS_TENTATIVE",
		7: "STATUS_DUPLICATE",
		8: "STATUS_OPTIMISTIC",
	}
	Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_State_Status_value = map[string]int32{
		"STATUS_UNSET":        0,
		"STATUS_PREFERRED":    1,
		"STATUS_DEPRECATED":   2,
		"STATUS_INVALID":      3,
		"STATUS_INACCESSIBLE": 4,
		"STATUS_UNKNOWN":      5,
		"STATUS_TENTATIVE":    6,
		"STATUS_DUPLICATE":    7,
		"STATUS_OPTIMISTIC":   8,
	}
)

func (x Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_State_Status) Enum() *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_State_Status {
	p := new(Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_State_Status)
	*p = x
	return p
}

func (x Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_State_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_State_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_interfaces_proto_enumTypes[8].Descriptor()
}

func (Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_State_Status) Type() protoreflect.EnumType {
	return &file_openconfig_interfaces_proto_enumTypes[8]
}

func (x Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_State_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_State_Status.Descriptor instead.
func (Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_State_Status) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 4, 2, 0, 0, 1, 0}
}

type Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor_State_NeighborState int32

const (
	Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor_State_NEIGHBORSTATE_UNSET      Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor_State_NeighborState = 0
	Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor_State_NEIGHBORSTATE_INCOMPLETE Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor_State_NeighborState = 1
	Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor_State_NEIGHBORSTATE_REACHABLE  Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor_State_NeighborState = 2
	Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor_State_NEIGHBORSTATE_STALE      Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor_State_NeighborState = 3
	Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor_State_NEIGHBORSTATE_DELAY      Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor_State_NeighborState = 4
	Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor_State_NEIGHBORSTATE_PROBE      Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor_State_NeighborState = 5
)

// Enum value maps for Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor_State_NeighborState.
var (
	Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor_State_NeighborState_name = map[int32]string{
		0: "NEIGHBORSTATE_UNSET",
		1: "NEIGHBORSTATE_INCOMPLETE",
		2: "NEIGHBORSTATE_REACHABLE",
		3: "NEIGHBORSTATE_STALE",
		4: "NEIGHBORSTATE_DELAY",
		5: "NEIGHBORSTATE_PROBE",
	}
	Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor_State_NeighborState_value = map[string]int32{
		"NEIGHBORSTATE_UNSET":      0,
		"NEIGHBORSTATE_INCOMPLETE": 1,
		"NEIGHBORSTATE_REACHABLE":  2,
		"NEIGHBORSTATE_STALE":      3,
		"NEIGHBORSTATE_DELAY":      4,
		"NEIGHBORSTATE_PROBE":      5,
	}
)

func (x Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor_State_NeighborState) Enum() *Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor_State_NeighborState {
	p := new(Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor_State_NeighborState)
	*p = x
	return p
}

func (x Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor_State_NeighborState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor_State_NeighborState) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_interfaces_proto_enumTypes[9].Descriptor()
}

func (Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor_State_NeighborState) Type() protoreflect.EnumType {
	return &file_openconfig_interfaces_proto_enumTypes[9]
}

func (x Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor_State_NeighborState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor_State_NeighborState.Descriptor instead.
func (Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor_State_NeighborState) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 4, 2, 2, 0, 1, 0}
}

type Interfaces_Interface_State_AdminStatus int32

const (
	Interfaces_Interface_State_ADMINSTATUS_UNSET   Interfaces_Interface_State_AdminStatus = 0
	Interfaces_Interface_State_ADMINSTATUS_UP      Interfaces_Interface_State_AdminStatus = 1
	Interfaces_Interface_State_ADMINSTATUS_DOWN    Interfaces_Interface_State_AdminStatus = 2
	Interfaces_Interface_State_ADMINSTATUS_TESTING Interfaces_Interface_State_AdminStatus = 3
)

// Enum value maps for Interfaces_Interface_State_AdminStatus.
var (
	Interfaces_Interface_State_AdminStatus_name = map[int32]string{
		0: "ADMINSTATUS_UNSET",
		1: "ADMINSTATUS_UP",
		2: "ADMINSTATUS_DOWN",
		3: "ADMINSTATUS_TESTING",
	}
	Interfaces_Interface_State_AdminStatus_value = map[string]int32{
		"ADMINSTATUS_UNSET":   0,
		"ADMINSTATUS_UP":      1,
		"ADMINSTATUS_DOWN":    2,
		"ADMINSTATUS_TESTING": 3,
	}
)

func (x Interfaces_Interface_State_AdminStatus) Enum() *Interfaces_Interface_State_AdminStatus {
	p := new(Interfaces_Interface_State_AdminStatus)
	*p = x
	return p
}

func (x Interfaces_Interface_State_AdminStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Interfaces_Interface_State_AdminStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_interfaces_proto_enumTypes[10].Descriptor()
}

func (Interfaces_Interface_State_AdminStatus) Type() protoreflect.EnumType {
	return &file_openconfig_interfaces_proto_enumTypes[10]
}

func (x Interfaces_Interface_State_AdminStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Interfaces_Interface_State_AdminStatus.Descriptor instead.
func (Interfaces_Interface_State_AdminStatus) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 6, 0}
}

type Interfaces_Interface_State_OperStatus int32

const (
	Interfaces_Interface_State_OPERSTATUS_UNSET            Interfaces_Interface_State_OperStatus = 0
	Interfaces_Interface_State_OPERSTATUS_UP               Interfaces_Interface_State_OperStatus = 2
	Interfaces_Interface_State_OPERSTATUS_DOWN             Interfaces_Interface_State_OperStatus = 3
	Interfaces_Interface_State_OPERSTATUS_TESTING          Interfaces_Interface_State_OperStatus = 4
	Interfaces_Interface_State_OPERSTATUS_UNKNOWN          Interfaces_Interface_State_OperStatus = 5
	Interfaces_Interface_State_OPERSTATUS_DORMANT          Interfaces_Interface_State_OperStatus = 6
	Interfaces_Interface_State_OPERSTATUS_NOT_PRESENT      Interfaces_Interface_State_OperStatus = 7
	Interfaces_Interface_State_OPERSTATUS_LOWER_LAYER_DOWN Interfaces_Interface_State_OperStatus = 8
)

// Enum value maps for Interfaces_Interface_State_OperStatus.
var (
	Interfaces_Interface_State_OperStatus_name = map[int32]string{
		0: "OPERSTATUS_UNSET",
		2: "OPERSTATUS_UP",
		3: "OPERSTATUS_DOWN",
		4: "OPERSTATUS_TESTING",
		5: "OPERSTATUS_UNKNOWN",
		6: "OPERSTATUS_DORMANT",
		7: "OPERSTATUS_NOT_PRESENT",
		8: "OPERSTATUS_LOWER_LAYER_DOWN",
	}
	Interfaces_Interface_State_OperStatus_value = map[string]int32{
		"OPERSTATUS_UNSET":            0,
		"OPERSTATUS_UP":               2,
		"OPERSTATUS_DOWN":             3,
		"OPERSTATUS_TESTING":          4,
		"OPERSTATUS_UNKNOWN":          5,
		"OPERSTATUS_DORMANT":          6,
		"OPERSTATUS_NOT_PRESENT":      7,
		"OPERSTATUS_LOWER_LAYER_DOWN": 8,
	}
)

func (x Interfaces_Interface_State_OperStatus) Enum() *Interfaces_Interface_State_OperStatus {
	p := new(Interfaces_Interface_State_OperStatus)
	*p = x
	return p
}

func (x Interfaces_Interface_State_OperStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Interfaces_Interface_State_OperStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_interfaces_proto_enumTypes[11].Descriptor()
}

func (Interfaces_Interface_State_OperStatus) Type() protoreflect.EnumType {
	return &file_openconfig_interfaces_proto_enumTypes[11]
}

func (x Interfaces_Interface_State_OperStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Interfaces_Interface_State_OperStatus.Descriptor instead.
func (Interfaces_Interface_State_OperStatus) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 6, 1}
}

type Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_Config_Mode int32

const (
	Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_Config_MODE_DISABLE     Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_Config_Mode = 0
	Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_Config_MODE_REMOTE_ONLY Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_Config_Mode = 2
	Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_Config_MODE_ALL         Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_Config_Mode = 3
)

// Enum value maps for Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_Config_Mode.
var (
	Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_Config_Mode_name = map[int32]string{
		0: "MODE_DISABLE",
		2: "MODE_REMOTE_ONLY",
		3: "MODE_ALL",
	}
	Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_Config_Mode_value = map[string]int32{
		"MODE_DISABLE":     0,
		"MODE_REMOTE_ONLY": 2,
		"MODE_ALL":         3,
	}
)

func (x Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_Config_Mode) Enum() *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_Config_Mode {
	p := new(Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_Config_Mode)
	*p = x
	return p
}

func (x Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_Config_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_Config_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_interfaces_proto_enumTypes[12].Descriptor()
}

func (Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_Config_Mode) Type() protoreflect.EnumType {
	return &file_openconfig_interfaces_proto_enumTypes[12]
}

func (x Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_Config_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_Config_Mode.Descriptor instead.
func (Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_Config_Mode) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 1, 3, 0, 0}
}

type Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_State_Mode int32

const (
	Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_State_MODE_DISABLE     Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_State_Mode = 0
	Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_State_MODE_REMOTE_ONLY Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_State_Mode = 2
	Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_State_MODE_ALL         Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_State_Mode = 3
)

// Enum value maps for Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_State_Mode.
var (
	Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_State_Mode_name = map[int32]string{
		0: "MODE_DISABLE",
		2: "MODE_REMOTE_ONLY",
		3: "MODE_ALL",
	}
	Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_State_Mode_value = map[string]int32{
		"MODE_DISABLE":     0,
		"MODE_REMOTE_ONLY": 2,
		"MODE_ALL":         3,
	}
)

func (x Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_State_Mode) Enum() *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_State_Mode {
	p := new(Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_State_Mode)
	*p = x
	return p
}

func (x Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_State_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_State_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_interfaces_proto_enumTypes[13].Descriptor()
}

func (Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_State_Mode) Type() protoreflect.EnumType {
	return &file_openconfig_interfaces_proto_enumTypes[13]
}

func (x Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_State_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_State_Mode.Descriptor instead.
func (Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_State_Mode) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 1, 3, 1, 0}
}

type Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State_Status int32

const (
	Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State_STATUS_UNSET        Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State_Status = 0
	Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State_STATUS_PREFERRED    Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State_Status = 1
	Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State_STATUS_DEPRECATED   Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State_Status = 2
	Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State_STATUS_INVALID      Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State_Status = 3
	Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State_STATUS_INACCESSIBLE Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State_Status = 4
	Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State_STATUS_UNKNOWN      Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State_Status = 5
	Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State_STATUS_TENTATIVE    Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State_Status = 6
	Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State_STATUS_DUPLICATE    Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State_Status = 7
	Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State_STATUS_OPTIMISTIC   Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State_Status = 8
)

// Enum value maps for Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State_Status.
var (
	Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State_Status_name = map[int32]string{
		0: "STATUS_UNSET",
		1: "STATUS_PREFERRED",
		2: "STATUS_DEPRECATED",
		3: "STATUS_INVALID",
		4: "STATUS_INACCESSIBLE",
		5: "STATUS_UNKNOWN",
		6: "STATUS_TENTATIVE",
		7: "STATUS_DUPLICATE",
		8: "STATUS_OPTIMISTIC",
	}
	Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State_Status_value = map[string]int32{
		"STATUS_UNSET":        0,
		"STATUS_PREFERRED":    1,
		"STATUS_DEPRECATED":   2,
		"STATUS_INVALID":      3,
		"STATUS_INACCESSIBLE": 4,
		"STATUS_UNKNOWN":      5,
		"STATUS_TENTATIVE":    6,
		"STATUS_DUPLICATE":    7,
		"STATUS_OPTIMISTIC":   8,
	}
)

func (x Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State_Status) Enum() *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State_Status {
	p := new(Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State_Status)
	*p = x
	return p
}

func (x Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_interfaces_proto_enumTypes[14].Descriptor()
}

func (Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State_Status) Type() protoreflect.EnumType {
	return &file_openconfig_interfaces_proto_enumTypes[14]
}

func (x Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State_Status.Descriptor instead.
func (Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State_Status) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 2, 0, 0, 1, 0}
}

type Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State_NeighborState int32

const (
	Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State_NEIGHBORSTATE_UNSET      Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State_NeighborState = 0
	Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State_NEIGHBORSTATE_INCOMPLETE Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State_NeighborState = 1
	Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State_NEIGHBORSTATE_REACHABLE  Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State_NeighborState = 2
	Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State_NEIGHBORSTATE_STALE      Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State_NeighborState = 3
	Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State_NEIGHBORSTATE_DELAY      Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State_NeighborState = 4
	Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State_NEIGHBORSTATE_PROBE      Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State_NeighborState = 5
)

// Enum value maps for Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State_NeighborState.
var (
	Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State_NeighborState_name = map[int32]string{
		0: "NEIGHBORSTATE_UNSET",
		1: "NEIGHBORSTATE_INCOMPLETE",
		2: "NEIGHBORSTATE_REACHABLE",
		3: "NEIGHBORSTATE_STALE",
		4: "NEIGHBORSTATE_DELAY",
		5: "NEIGHBORSTATE_PROBE",
	}
	Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State_NeighborState_value = map[string]int32{
		"NEIGHBORSTATE_UNSET":      0,
		"NEIGHBORSTATE_INCOMPLETE": 1,
		"NEIGHBORSTATE_REACHABLE":  2,
		"NEIGHBORSTATE_STALE":      3,
		"NEIGHBORSTATE_DELAY":      4,
		"NEIGHBORSTATE_PROBE":      5,
	}
)

func (x Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State_NeighborState) Enum() *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State_NeighborState {
	p := new(Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State_NeighborState)
	*p = x
	return p
}

func (x Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State_NeighborState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State_NeighborState) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_interfaces_proto_enumTypes[15].Descriptor()
}

func (Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State_NeighborState) Type() protoreflect.EnumType {
	return &file_openconfig_interfaces_proto_enumTypes[15]
}

func (x Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State_NeighborState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State_NeighborState.Descriptor instead.
func (Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State_NeighborState) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 2, 3, 0, 1, 0}
}

type Interfaces_Interface_Subinterfaces_Subinterface_State_AdminStatus int32

const (
	Interfaces_Interface_Subinterfaces_Subinterface_State_ADMINSTATUS_UNSET   Interfaces_Interface_Subinterfaces_Subinterface_State_AdminStatus = 0
	Interfaces_Interface_Subinterfaces_Subinterface_State_ADMINSTATUS_UP      Interfaces_Interface_Subinterfaces_Subinterface_State_AdminStatus = 1
	Interfaces_Interface_Subinterfaces_Subinterface_State_ADMINSTATUS_DOWN    Interfaces_Interface_Subinterfaces_Subinterface_State_AdminStatus = 2
	Interfaces_Interface_Subinterfaces_Subinterface_State_ADMINSTATUS_TESTING Interfaces_Interface_Subinterfaces_Subinterface_State_AdminStatus = 3
)

// Enum value maps for Interfaces_Interface_Subinterfaces_Subinterface_State_AdminStatus.
var (
	Interfaces_Interface_Subinterfaces_Subinterface_State_AdminStatus_name = map[int32]string{
		0: "ADMINSTATUS_UNSET",
		1: "ADMINSTATUS_UP",
		2: "ADMINSTATUS_DOWN",
		3: "ADMINSTATUS_TESTING",
	}
	Interfaces_Interface_Subinterfaces_Subinterface_State_AdminStatus_value = map[string]int32{
		"ADMINSTATUS_UNSET":   0,
		"ADMINSTATUS_UP":      1,
		"ADMINSTATUS_DOWN":    2,
		"ADMINSTATUS_TESTING": 3,
	}
)

func (x Interfaces_Interface_Subinterfaces_Subinterface_State_AdminStatus) Enum() *Interfaces_Interface_Subinterfaces_Subinterface_State_AdminStatus {
	p := new(Interfaces_Interface_Subinterfaces_Subinterface_State_AdminStatus)
	*p = x
	return p
}

func (x Interfaces_Interface_Subinterfaces_Subinterface_State_AdminStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Interfaces_Interface_Subinterfaces_Subinterface_State_AdminStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_interfaces_proto_enumTypes[16].Descriptor()
}

func (Interfaces_Interface_Subinterfaces_Subinterface_State_AdminStatus) Type() protoreflect.EnumType {
	return &file_openconfig_interfaces_proto_enumTypes[16]
}

func (x Interfaces_Interface_Subinterfaces_Subinterface_State_AdminStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_State_AdminStatus.Descriptor instead.
func (Interfaces_Interface_Subinterfaces_Subinterface_State_AdminStatus) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 3, 0}
}

type Interfaces_Interface_Subinterfaces_Subinterface_State_OperStatus int32

const (
	Interfaces_Interface_Subinterfaces_Subinterface_State_OPERSTATUS_UNSET            Interfaces_Interface_Subinterfaces_Subinterface_State_OperStatus = 0
	Interfaces_Interface_Subinterfaces_Subinterface_State_OPERSTATUS_UP               Interfaces_Interface_Subinterfaces_Subinterface_State_OperStatus = 2
	Interfaces_Interface_Subinterfaces_Subinterface_State_OPERSTATUS_DOWN             Interfaces_Interface_Subinterfaces_Subinterface_State_OperStatus = 3
	Interfaces_Interface_Subinterfaces_Subinterface_State_OPERSTATUS_TESTING          Interfaces_Interface_Subinterfaces_Subinterface_State_OperStatus = 4
	Interfaces_Interface_Subinterfaces_Subinterface_State_OPERSTATUS_UNKNOWN          Interfaces_Interface_Subinterfaces_Subinterface_State_OperStatus = 5
	Interfaces_Interface_Subinterfaces_Subinterface_State_OPERSTATUS_DORMANT          Interfaces_Interface_Subinterfaces_Subinterface_State_OperStatus = 6
	Interfaces_Interface_Subinterfaces_Subinterface_State_OPERSTATUS_NOT_PRESENT      Interfaces_Interface_Subinterfaces_Subinterface_State_OperStatus = 7
	Interfaces_Interface_Subinterfaces_Subinterface_State_OPERSTATUS_LOWER_LAYER_DOWN Interfaces_Interface_Subinterfaces_Subinterface_State_OperStatus = 8
)

// Enum value maps for Interfaces_Interface_Subinterfaces_Subinterface_State_OperStatus.
var (
	Interfaces_Interface_Subinterfaces_Subinterface_State_OperStatus_name = map[int32]string{
		0: "OPERSTATUS_UNSET",
		2: "OPERSTATUS_UP",
		3: "OPERSTATUS_DOWN",
		4: "OPERSTATUS_TESTING",
		5: "OPERSTATUS_UNKNOWN",
		6: "OPERSTATUS_DORMANT",
		7: "OPERSTATUS_NOT_PRESENT",
		8: "OPERSTATUS_LOWER_LAYER_DOWN",
	}
	Interfaces_Interface_Subinterfaces_Subinterface_State_OperStatus_value = map[string]int32{
		"OPERSTATUS_UNSET":            0,
		"OPERSTATUS_UP":               2,
		"OPERSTATUS_DOWN":             3,
		"OPERSTATUS_TESTING":          4,
		"OPERSTATUS_UNKNOWN":          5,
		"OPERSTATUS_DORMANT":          6,
		"OPERSTATUS_NOT_PRESENT":      7,
		"OPERSTATUS_LOWER_LAYER_DOWN": 8,
	}
)

func (x Interfaces_Interface_Subinterfaces_Subinterface_State_OperStatus) Enum() *Interfaces_Interface_Subinterfaces_Subinterface_State_OperStatus {
	p := new(Interfaces_Interface_Subinterfaces_Subinterface_State_OperStatus)
	*p = x
	return p
}

func (x Interfaces_Interface_Subinterfaces_Subinterface_State_OperStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Interfaces_Interface_Subinterfaces_Subinterface_State_OperStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_interfaces_proto_enumTypes[17].Descriptor()
}

func (Interfaces_Interface_Subinterfaces_Subinterface_State_OperStatus) Type() protoreflect.EnumType {
	return &file_openconfig_interfaces_proto_enumTypes[17]
}

func (x Interfaces_Interface_Subinterfaces_Subinterface_State_OperStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_State_OperStatus.Descriptor instead.
func (Interfaces_Interface_Subinterfaces_Subinterface_State_OperStatus) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 3, 1}
}

type Interfaces_Interface_Tunnel_Ipv4_ProxyArp_Config_Mode int32

const (
	Interfaces_Interface_Tunnel_Ipv4_ProxyArp_Config_MODE_DISABLE     Interfaces_Interface_Tunnel_Ipv4_ProxyArp_Config_Mode = 0
	Interfaces_Interface_Tunnel_Ipv4_ProxyArp_Config_MODE_REMOTE_ONLY Interfaces_Interface_Tunnel_Ipv4_ProxyArp_Config_Mode = 2
	Interfaces_Interface_Tunnel_Ipv4_ProxyArp_Config_MODE_ALL         Interfaces_Interface_Tunnel_Ipv4_ProxyArp_Config_Mode = 3
)

// Enum value maps for Interfaces_Interface_Tunnel_Ipv4_ProxyArp_Config_Mode.
var (
	Interfaces_Interface_Tunnel_Ipv4_ProxyArp_Config_Mode_name = map[int32]string{
		0: "MODE_DISABLE",
		2: "MODE_REMOTE_ONLY",
		3: "MODE_ALL",
	}
	Interfaces_Interface_Tunnel_Ipv4_ProxyArp_Config_Mode_value = map[string]int32{
		"MODE_DISABLE":     0,
		"MODE_REMOTE_ONLY": 2,
		"MODE_ALL":         3,
	}
)

func (x Interfaces_Interface_Tunnel_Ipv4_ProxyArp_Config_Mode) Enum() *Interfaces_Interface_Tunnel_Ipv4_ProxyArp_Config_Mode {
	p := new(Interfaces_Interface_Tunnel_Ipv4_ProxyArp_Config_Mode)
	*p = x
	return p
}

func (x Interfaces_Interface_Tunnel_Ipv4_ProxyArp_Config_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Interfaces_Interface_Tunnel_Ipv4_ProxyArp_Config_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_interfaces_proto_enumTypes[18].Descriptor()
}

func (Interfaces_Interface_Tunnel_Ipv4_ProxyArp_Config_Mode) Type() protoreflect.EnumType {
	return &file_openconfig_interfaces_proto_enumTypes[18]
}

func (x Interfaces_Interface_Tunnel_Ipv4_ProxyArp_Config_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Interfaces_Interface_Tunnel_Ipv4_ProxyArp_Config_Mode.Descriptor instead.
func (Interfaces_Interface_Tunnel_Ipv4_ProxyArp_Config_Mode) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 8, 1, 3, 0, 0}
}

type Interfaces_Interface_Tunnel_Ipv4_ProxyArp_State_Mode int32

const (
	Interfaces_Interface_Tunnel_Ipv4_ProxyArp_State_MODE_DISABLE     Interfaces_Interface_Tunnel_Ipv4_ProxyArp_State_Mode = 0
	Interfaces_Interface_Tunnel_Ipv4_ProxyArp_State_MODE_REMOTE_ONLY Interfaces_Interface_Tunnel_Ipv4_ProxyArp_State_Mode = 2
	Interfaces_Interface_Tunnel_Ipv4_ProxyArp_State_MODE_ALL         Interfaces_Interface_Tunnel_Ipv4_ProxyArp_State_Mode = 3
)

// Enum value maps for Interfaces_Interface_Tunnel_Ipv4_ProxyArp_State_Mode.
var (
	Interfaces_Interface_Tunnel_Ipv4_ProxyArp_State_Mode_name = map[int32]string{
		0: "MODE_DISABLE",
		2: "MODE_REMOTE_ONLY",
		3: "MODE_ALL",
	}
	Interfaces_Interface_Tunnel_Ipv4_ProxyArp_State_Mode_value = map[string]int32{
		"MODE_DISABLE":     0,
		"MODE_REMOTE_ONLY": 2,
		"MODE_ALL":         3,
	}
)

func (x Interfaces_Interface_Tunnel_Ipv4_ProxyArp_State_Mode) Enum() *Interfaces_Interface_Tunnel_Ipv4_ProxyArp_State_Mode {
	p := new(Interfaces_Interface_Tunnel_Ipv4_ProxyArp_State_Mode)
	*p = x
	return p
}

func (x Interfaces_Interface_Tunnel_Ipv4_ProxyArp_State_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Interfaces_Interface_Tunnel_Ipv4_ProxyArp_State_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_interfaces_proto_enumTypes[19].Descriptor()
}

func (Interfaces_Interface_Tunnel_Ipv4_ProxyArp_State_Mode) Type() protoreflect.EnumType {
	return &file_openconfig_interfaces_proto_enumTypes[19]
}

func (x Interfaces_Interface_Tunnel_Ipv4_ProxyArp_State_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Interfaces_Interface_Tunnel_Ipv4_ProxyArp_State_Mode.Descriptor instead.
func (Interfaces_Interface_Tunnel_Ipv4_ProxyArp_State_Mode) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 8, 1, 3, 1, 0}
}

type Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State_Status int32

const (
	Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State_STATUS_UNSET        Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State_Status = 0
	Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State_STATUS_PREFERRED    Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State_Status = 1
	Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State_STATUS_DEPRECATED   Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State_Status = 2
	Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State_STATUS_INVALID      Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State_Status = 3
	Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State_STATUS_INACCESSIBLE Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State_Status = 4
	Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State_STATUS_UNKNOWN      Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State_Status = 5
	Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State_STATUS_TENTATIVE    Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State_Status = 6
	Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State_STATUS_DUPLICATE    Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State_Status = 7
	Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State_STATUS_OPTIMISTIC   Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State_Status = 8
)

// Enum value maps for Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State_Status.
var (
	Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State_Status_name = map[int32]string{
		0: "STATUS_UNSET",
		1: "STATUS_PREFERRED",
		2: "STATUS_DEPRECATED",
		3: "STATUS_INVALID",
		4: "STATUS_INACCESSIBLE",
		5: "STATUS_UNKNOWN",
		6: "STATUS_TENTATIVE",
		7: "STATUS_DUPLICATE",
		8: "STATUS_OPTIMISTIC",
	}
	Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State_Status_value = map[string]int32{
		"STATUS_UNSET":        0,
		"STATUS_PREFERRED":    1,
		"STATUS_DEPRECATED":   2,
		"STATUS_INVALID":      3,
		"STATUS_INACCESSIBLE": 4,
		"STATUS_UNKNOWN":      5,
		"STATUS_TENTATIVE":    6,
		"STATUS_DUPLICATE":    7,
		"STATUS_OPTIMISTIC":   8,
	}
)

func (x Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State_Status) Enum() *Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State_Status {
	p := new(Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State_Status)
	*p = x
	return p
}

func (x Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_interfaces_proto_enumTypes[20].Descriptor()
}

func (Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State_Status) Type() protoreflect.EnumType {
	return &file_openconfig_interfaces_proto_enumTypes[20]
}

func (x Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State_Status.Descriptor instead.
func (Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State_Status) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 8, 2, 0, 0, 1, 0}
}

type Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State_NeighborState int32

const (
	Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State_NEIGHBORSTATE_UNSET      Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State_NeighborState = 0
	Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State_NEIGHBORSTATE_INCOMPLETE Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State_NeighborState = 1
	Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State_NEIGHBORSTATE_REACHABLE  Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State_NeighborState = 2
	Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State_NEIGHBORSTATE_STALE      Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State_NeighborState = 3
	Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State_NEIGHBORSTATE_DELAY      Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State_NeighborState = 4
	Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State_NEIGHBORSTATE_PROBE      Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State_NeighborState = 5
)

// Enum value maps for Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State_NeighborState.
var (
	Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State_NeighborState_name = map[int32]string{
		0: "NEIGHBORSTATE_UNSET",
		1: "NEIGHBORSTATE_INCOMPLETE",
		2: "NEIGHBORSTATE_REACHABLE",
		3: "NEIGHBORSTATE_STALE",
		4: "NEIGHBORSTATE_DELAY",
		5: "NEIGHBORSTATE_PROBE",
	}
	Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State_NeighborState_value = map[string]int32{
		"NEIGHBORSTATE_UNSET":      0,
		"NEIGHBORSTATE_INCOMPLETE": 1,
		"NEIGHBORSTATE_REACHABLE":  2,
		"NEIGHBORSTATE_STALE":      3,
		"NEIGHBORSTATE_DELAY":      4,
		"NEIGHBORSTATE_PROBE":      5,
	}
)

func (x Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State_NeighborState) Enum() *Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State_NeighborState {
	p := new(Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State_NeighborState)
	*p = x
	return p
}

func (x Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State_NeighborState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State_NeighborState) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_interfaces_proto_enumTypes[21].Descriptor()
}

func (Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State_NeighborState) Type() protoreflect.EnumType {
	return &file_openconfig_interfaces_proto_enumTypes[21]
}

func (x Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State_NeighborState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State_NeighborState.Descriptor instead.
func (Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State_NeighborState) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 8, 2, 2, 0, 1, 0}
}

type Interfaces struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interface []*Interfaces_InterfaceKey `protobuf:"bytes,422482938,rep,name=interface,proto3" json:"interface,omitempty"`
}

func (x *Interfaces) Reset() {
	*x = Interfaces{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces) ProtoMessage() {}

func (x *Interfaces) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces.ProtoReflect.Descriptor instead.
func (*Interfaces) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0}
}

func (x *Interfaces) GetInterface() []*Interfaces_InterfaceKey {
	if x != nil {
		return x.Interface
	}
	return nil
}

type Interfaces_Interface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Aggregation   *Interfaces_Interface_Aggregation   `protobuf:"bytes,264856597,opt,name=aggregation,proto3" json:"aggregation,omitempty"`
	Config        *Interfaces_Interface_Config        `protobuf:"bytes,334174827,opt,name=config,proto3" json:"config,omitempty"`
	Ethernet      *Interfaces_Interface_Ethernet      `protobuf:"bytes,79652980,opt,name=ethernet,proto3" json:"ethernet,omitempty"`
	HoldTime      *Interfaces_Interface_HoldTime      `protobuf:"bytes,175931092,opt,name=hold_time,json=holdTime,proto3" json:"hold_time,omitempty"`
	RoutedVlan    *Interfaces_Interface_RoutedVlan    `protobuf:"bytes,65530678,opt,name=routed_vlan,json=routedVlan,proto3" json:"routed_vlan,omitempty"`
	Sonet         *Interfaces_Interface_Sonet         `protobuf:"bytes,283024592,opt,name=sonet,proto3" json:"sonet,omitempty"`
	State         *Interfaces_Interface_State         `protobuf:"bytes,387556140,opt,name=state,proto3" json:"state,omitempty"`
	Subinterfaces *Interfaces_Interface_Subinterfaces `protobuf:"bytes,327798165,opt,name=subinterfaces,proto3" json:"subinterfaces,omitempty"`
	Tunnel        *Interfaces_Interface_Tunnel        `protobuf:"bytes,332360471,opt,name=tunnel,proto3" json:"tunnel,omitempty"`
}

func (x *Interfaces_Interface) Reset() {
	*x = Interfaces_Interface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface) ProtoMessage() {}

func (x *Interfaces_Interface) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Interfaces_Interface) GetAggregation() *Interfaces_Interface_Aggregation {
	if x != nil {
		return x.Aggregation
	}
	return nil
}

func (x *Interfaces_Interface) GetConfig() *Interfaces_Interface_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Interfaces_Interface) GetEthernet() *Interfaces_Interface_Ethernet {
	if x != nil {
		return x.Ethernet
	}
	return nil
}

func (x *Interfaces_Interface) GetHoldTime() *Interfaces_Interface_HoldTime {
	if x != nil {
		return x.HoldTime
	}
	return nil
}

func (x *Interfaces_Interface) GetRoutedVlan() *Interfaces_Interface_RoutedVlan {
	if x != nil {
		return x.RoutedVlan
	}
	return nil
}

func (x *Interfaces_Interface) GetSonet() *Interfaces_Interface_Sonet {
	if x != nil {
		return x.Sonet
	}
	return nil
}

func (x *Interfaces_Interface) GetState() *Interfaces_Interface_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Interfaces_Interface) GetSubinterfaces() *Interfaces_Interface_Subinterfaces {
	if x != nil {
		return x.Subinterfaces
	}
	return nil
}

func (x *Interfaces_Interface) GetTunnel() *Interfaces_Interface_Tunnel {
	if x != nil {
		return x.Tunnel
	}
	return nil
}

type Interfaces_InterfaceKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Interface *Interfaces_Interface `protobuf:"bytes,2,opt,name=interface,proto3" json:"interface,omitempty"`
}

func (x *Interfaces_InterfaceKey) Reset() {
	*x = Interfaces_InterfaceKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_InterfaceKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_InterfaceKey) ProtoMessage() {}

func (x *Interfaces_InterfaceKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_InterfaceKey.ProtoReflect.Descriptor instead.
func (*Interfaces_InterfaceKey) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Interfaces_InterfaceKey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Interfaces_InterfaceKey) GetInterface() *Interfaces_Interface {
	if x != nil {
		return x.Interface
	}
	return nil
}

type Interfaces_Interface_Aggregation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config       *Interfaces_Interface_Aggregation_Config       `protobuf:"bytes,535191610,opt,name=config,proto3" json:"config,omitempty"`
	State        *Interfaces_Interface_Aggregation_State        `protobuf:"bytes,117972823,opt,name=state,proto3" json:"state,omitempty"`
	SwitchedVlan *Interfaces_Interface_Aggregation_SwitchedVlan `protobuf:"bytes,178357519,opt,name=switched_vlan,json=switchedVlan,proto3" json:"switched_vlan,omitempty"`
}

func (x *Interfaces_Interface_Aggregation) Reset() {
	*x = Interfaces_Interface_Aggregation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Aggregation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Aggregation) ProtoMessage() {}

func (x *Interfaces_Interface_Aggregation) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Aggregation.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Aggregation) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *Interfaces_Interface_Aggregation) GetConfig() *Interfaces_Interface_Aggregation_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Interfaces_Interface_Aggregation) GetState() *Interfaces_Interface_Aggregation_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Interfaces_Interface_Aggregation) GetSwitchedVlan() *Interfaces_Interface_Aggregation_SwitchedVlan {
	if x != nil {
		return x.SwitchedVlan
	}
	return nil
}

type Interfaces_Interface_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description  *ywrapper.StringValue        `protobuf:"bytes,418535860,opt,name=description,proto3" json:"description,omitempty"`
	Enabled      *ywrapper.BoolValue          `protobuf:"bytes,37224301,opt,name=enabled,proto3" json:"enabled,omitempty"`
	LoopbackMode *ywrapper.BoolValue          `protobuf:"bytes,253516347,opt,name=loopback_mode,json=loopbackMode,proto3" json:"loopback_mode,omitempty"`
	Mtu          *ywrapper.UintValue          `protobuf:"bytes,376210342,opt,name=mtu,proto3" json:"mtu,omitempty"`
	Name         *ywrapper.StringValue        `protobuf:"bytes,51804187,opt,name=name,proto3" json:"name,omitempty"`
	Tpid         OpenconfigVlanTypesTPIDTYPES `protobuf:"varint,464491713,opt,name=tpid,proto3,enum=openconfig.OpenconfigVlanTypesTPIDTYPES" json:"tpid,omitempty"`
	Type         IETFInterfacesInterfaceType  `protobuf:"varint,144596894,opt,name=type,proto3,enum=openconfig.IETFInterfacesInterfaceType" json:"type,omitempty"`
}

func (x *Interfaces_Interface_Config) Reset() {
	*x = Interfaces_Interface_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Config) ProtoMessage() {}

func (x *Interfaces_Interface_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Config.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *Interfaces_Interface_Config) GetDescription() *ywrapper.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Interfaces_Interface_Config) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *Interfaces_Interface_Config) GetLoopbackMode() *ywrapper.BoolValue {
	if x != nil {
		return x.LoopbackMode
	}
	return nil
}

func (x *Interfaces_Interface_Config) GetMtu() *ywrapper.UintValue {
	if x != nil {
		return x.Mtu
	}
	return nil
}

func (x *Interfaces_Interface_Config) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Interfaces_Interface_Config) GetTpid() OpenconfigVlanTypesTPIDTYPES {
	if x != nil {
		return x.Tpid
	}
	return OpenconfigVlanTypesTPIDTYPES_OPENCONFIGVLANTYPESTPIDTYPES_UNSET
}

func (x *Interfaces_Interface_Config) GetType() IETFInterfacesInterfaceType {
	if x != nil {
		return x.Type
	}
	return IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_UNSET
}

type Interfaces_Interface_Ethernet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthenticatedSessions *Interfaces_Interface_Ethernet_AuthenticatedSessions `protobuf:"bytes,292978790,opt,name=authenticated_sessions,json=authenticatedSessions,proto3" json:"authenticated_sessions,omitempty"`
	Config                *Interfaces_Interface_Ethernet_Config                `protobuf:"bytes,202111737,opt,name=config,proto3" json:"config,omitempty"`
	Dot1X                 *Interfaces_Interface_Ethernet_Dot1X                 `protobuf:"bytes,171594503,opt,name=dot1x,proto3" json:"dot1x,omitempty"`
	Poe                   *Interfaces_Interface_Ethernet_Poe                   `protobuf:"bytes,518854745,opt,name=poe,proto3" json:"poe,omitempty"`
	State                 *Interfaces_Interface_Ethernet_State                 `protobuf:"bytes,412400206,opt,name=state,proto3" json:"state,omitempty"`
	SwitchedVlan          *Interfaces_Interface_Ethernet_SwitchedVlan          `protobuf:"bytes,268814182,opt,name=switched_vlan,json=switchedVlan,proto3" json:"switched_vlan,omitempty"`
}

func (x *Interfaces_Interface_Ethernet) Reset() {
	*x = Interfaces_Interface_Ethernet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Ethernet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Ethernet) ProtoMessage() {}

func (x *Interfaces_Interface_Ethernet) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Ethernet.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Ethernet) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 2}
}

func (x *Interfaces_Interface_Ethernet) GetAuthenticatedSessions() *Interfaces_Interface_Ethernet_AuthenticatedSessions {
	if x != nil {
		return x.AuthenticatedSessions
	}
	return nil
}

func (x *Interfaces_Interface_Ethernet) GetConfig() *Interfaces_Interface_Ethernet_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Interfaces_Interface_Ethernet) GetDot1X() *Interfaces_Interface_Ethernet_Dot1X {
	if x != nil {
		return x.Dot1X
	}
	return nil
}

func (x *Interfaces_Interface_Ethernet) GetPoe() *Interfaces_Interface_Ethernet_Poe {
	if x != nil {
		return x.Poe
	}
	return nil
}

func (x *Interfaces_Interface_Ethernet) GetState() *Interfaces_Interface_Ethernet_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Interfaces_Interface_Ethernet) GetSwitchedVlan() *Interfaces_Interface_Ethernet_SwitchedVlan {
	if x != nil {
		return x.SwitchedVlan
	}
	return nil
}

type Interfaces_Interface_HoldTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Interfaces_Interface_HoldTime_Config `protobuf:"bytes,316512729,opt,name=config,proto3" json:"config,omitempty"`
	State  *Interfaces_Interface_HoldTime_State  `protobuf:"bytes,483010990,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Interfaces_Interface_HoldTime) Reset() {
	*x = Interfaces_Interface_HoldTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_HoldTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_HoldTime) ProtoMessage() {}

func (x *Interfaces_Interface_HoldTime) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_HoldTime.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_HoldTime) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 3}
}

func (x *Interfaces_Interface_HoldTime) GetConfig() *Interfaces_Interface_HoldTime_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Interfaces_Interface_HoldTime) GetState() *Interfaces_Interface_HoldTime_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Interfaces_Interface_RoutedVlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Interfaces_Interface_RoutedVlan_Config `protobuf:"bytes,264125207,opt,name=config,proto3" json:"config,omitempty"`
	Ipv4   *Interfaces_Interface_RoutedVlan_Ipv4   `protobuf:"bytes,499852620,opt,name=ipv4,proto3" json:"ipv4,omitempty"`
	Ipv6   *Interfaces_Interface_RoutedVlan_Ipv6   `protobuf:"bytes,499852622,opt,name=ipv6,proto3" json:"ipv6,omitempty"`
	State  *Interfaces_Interface_RoutedVlan_State  `protobuf:"bytes,22183624,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Interfaces_Interface_RoutedVlan) Reset() {
	*x = Interfaces_Interface_RoutedVlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_RoutedVlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_RoutedVlan) ProtoMessage() {}

func (x *Interfaces_Interface_RoutedVlan) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_RoutedVlan.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_RoutedVlan) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 4}
}

func (x *Interfaces_Interface_RoutedVlan) GetConfig() *Interfaces_Interface_RoutedVlan_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan) GetIpv4() *Interfaces_Interface_RoutedVlan_Ipv4 {
	if x != nil {
		return x.Ipv4
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan) GetIpv6() *Interfaces_Interface_RoutedVlan_Ipv6 {
	if x != nil {
		return x.Ipv6
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan) GetState() *Interfaces_Interface_RoutedVlan_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Interfaces_Interface_Sonet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Interfaces_Interface_Sonet) Reset() {
	*x = Interfaces_Interface_Sonet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Sonet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Sonet) ProtoMessage() {}

func (x *Interfaces_Interface_Sonet) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Sonet.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Sonet) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 5}
}

type Interfaces_Interface_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminStatus     Interfaces_Interface_State_AdminStatus `protobuf:"varint,474494763,opt,name=admin_status,json=adminStatus,proto3,enum=openconfig.Interfaces_Interface_State_AdminStatus" json:"admin_status,omitempty"`
	Counters        *Interfaces_Interface_State_Counters   `protobuf:"bytes,83645964,opt,name=counters,proto3" json:"counters,omitempty"`
	Description     *ywrapper.StringValue                  `protobuf:"bytes,389435287,opt,name=description,proto3" json:"description,omitempty"`
	Enabled         *ywrapper.BoolValue                    `protobuf:"bytes,330927518,opt,name=enabled,proto3" json:"enabled,omitempty"`
	HardwarePort    *ywrapper.StringValue                  `protobuf:"bytes,119177817,opt,name=hardware_port,json=hardwarePort,proto3" json:"hardware_port,omitempty"`
	Ifindex         *ywrapper.UintValue                    `protobuf:"bytes,116108202,opt,name=ifindex,proto3" json:"ifindex,omitempty"`
	LastChange      *ywrapper.UintValue                    `protobuf:"bytes,127348880,opt,name=last_change,json=lastChange,proto3" json:"last_change,omitempty"`
	Logical         *ywrapper.BoolValue                    `protobuf:"bytes,440460216,opt,name=logical,proto3" json:"logical,omitempty"`
	LoopbackMode    *ywrapper.BoolValue                    `protobuf:"bytes,372935512,opt,name=loopback_mode,json=loopbackMode,proto3" json:"loopback_mode,omitempty"`
	Mtu             *ywrapper.UintValue                    `protobuf:"bytes,96390485,opt,name=mtu,proto3" json:"mtu,omitempty"`
	Name            *ywrapper.StringValue                  `protobuf:"bytes,503495278,opt,name=name,proto3" json:"name,omitempty"`
	OperStatus      Interfaces_Interface_State_OperStatus  `protobuf:"varint,470394226,opt,name=oper_status,json=operStatus,proto3,enum=openconfig.Interfaces_Interface_State_OperStatus" json:"oper_status,omitempty"`
	PhysicalChannel []*ywrapper.UintValue                  `protobuf:"bytes,46213654,rep,name=physical_channel,json=physicalChannel,proto3" json:"physical_channel,omitempty"`
	Tpid            OpenconfigVlanTypesTPIDTYPES           `protobuf:"varint,309255448,opt,name=tpid,proto3,enum=openconfig.OpenconfigVlanTypesTPIDTYPES" json:"tpid,omitempty"`
	Transceiver     *ywrapper.StringValue                  `protobuf:"bytes,84602875,opt,name=transceiver,proto3" json:"transceiver,omitempty"`
	Type            IETFInterfacesInterfaceType            `protobuf:"varint,358148579,opt,name=type,proto3,enum=openconfig.IETFInterfacesInterfaceType" json:"type,omitempty"`
}

func (x *Interfaces_Interface_State) Reset() {
	*x = Interfaces_Interface_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_State) ProtoMessage() {}

func (x *Interfaces_Interface_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_State.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_State) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 6}
}

func (x *Interfaces_Interface_State) GetAdminStatus() Interfaces_Interface_State_AdminStatus {
	if x != nil {
		return x.AdminStatus
	}
	return Interfaces_Interface_State_ADMINSTATUS_UNSET
}

func (x *Interfaces_Interface_State) GetCounters() *Interfaces_Interface_State_Counters {
	if x != nil {
		return x.Counters
	}
	return nil
}

func (x *Interfaces_Interface_State) GetDescription() *ywrapper.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Interfaces_Interface_State) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *Interfaces_Interface_State) GetHardwarePort() *ywrapper.StringValue {
	if x != nil {
		return x.HardwarePort
	}
	return nil
}

func (x *Interfaces_Interface_State) GetIfindex() *ywrapper.UintValue {
	if x != nil {
		return x.Ifindex
	}
	return nil
}

func (x *Interfaces_Interface_State) GetLastChange() *ywrapper.UintValue {
	if x != nil {
		return x.LastChange
	}
	return nil
}

func (x *Interfaces_Interface_State) GetLogical() *ywrapper.BoolValue {
	if x != nil {
		return x.Logical
	}
	return nil
}

func (x *Interfaces_Interface_State) GetLoopbackMode() *ywrapper.BoolValue {
	if x != nil {
		return x.LoopbackMode
	}
	return nil
}

func (x *Interfaces_Interface_State) GetMtu() *ywrapper.UintValue {
	if x != nil {
		return x.Mtu
	}
	return nil
}

func (x *Interfaces_Interface_State) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Interfaces_Interface_State) GetOperStatus() Interfaces_Interface_State_OperStatus {
	if x != nil {
		return x.OperStatus
	}
	return Interfaces_Interface_State_OPERSTATUS_UNSET
}

func (x *Interfaces_Interface_State) GetPhysicalChannel() []*ywrapper.UintValue {
	if x != nil {
		return x.PhysicalChannel
	}
	return nil
}

func (x *Interfaces_Interface_State) GetTpid() OpenconfigVlanTypesTPIDTYPES {
	if x != nil {
		return x.Tpid
	}
	return OpenconfigVlanTypesTPIDTYPES_OPENCONFIGVLANTYPESTPIDTYPES_UNSET
}

func (x *Interfaces_Interface_State) GetTransceiver() *ywrapper.StringValue {
	if x != nil {
		return x.Transceiver
	}
	return nil
}

func (x *Interfaces_Interface_State) GetType() IETFInterfacesInterfaceType {
	if x != nil {
		return x.Type
	}
	return IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_UNSET
}

type Interfaces_Interface_Subinterfaces struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subinterface []*Interfaces_Interface_Subinterfaces_SubinterfaceKey `protobuf:"bytes,464802819,rep,name=subinterface,proto3" json:"subinterface,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces) Reset() {
	*x = Interfaces_Interface_Subinterfaces{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces) ProtoMessage() {}

func (x *Interfaces_Interface_Subinterfaces) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7}
}

func (x *Interfaces_Interface_Subinterfaces) GetSubinterface() []*Interfaces_Interface_Subinterfaces_SubinterfaceKey {
	if x != nil {
		return x.Subinterface
	}
	return nil
}

type Interfaces_Interface_Tunnel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Interfaces_Interface_Tunnel_Config `protobuf:"bytes,414195208,opt,name=config,proto3" json:"config,omitempty"`
	Ipv4   *Interfaces_Interface_Tunnel_Ipv4   `protobuf:"bytes,189528495,opt,name=ipv4,proto3" json:"ipv4,omitempty"`
	Ipv6   *Interfaces_Interface_Tunnel_Ipv6   `protobuf:"bytes,189528493,opt,name=ipv6,proto3" json:"ipv6,omitempty"`
	State  *Interfaces_Interface_Tunnel_State  `protobuf:"bytes,67383969,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Interfaces_Interface_Tunnel) Reset() {
	*x = Interfaces_Interface_Tunnel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Tunnel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Tunnel) ProtoMessage() {}

func (x *Interfaces_Interface_Tunnel) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Tunnel.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Tunnel) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 8}
}

func (x *Interfaces_Interface_Tunnel) GetConfig() *Interfaces_Interface_Tunnel_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel) GetIpv4() *Interfaces_Interface_Tunnel_Ipv4 {
	if x != nil {
		return x.Ipv4
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel) GetIpv6() *Interfaces_Interface_Tunnel_Ipv6 {
	if x != nil {
		return x.Ipv6
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel) GetState() *Interfaces_Interface_Tunnel_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Interfaces_Interface_Aggregation_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LagType  OpenconfigIfAggregateAggregationType `protobuf:"varint,172452860,opt,name=lag_type,json=lagType,proto3,enum=openconfig.OpenconfigIfAggregateAggregationType" json:"lag_type,omitempty"`
	MinLinks *ywrapper.UintValue                  `protobuf:"bytes,391773051,opt,name=min_links,json=minLinks,proto3" json:"min_links,omitempty"`
}

func (x *Interfaces_Interface_Aggregation_Config) Reset() {
	*x = Interfaces_Interface_Aggregation_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Aggregation_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Aggregation_Config) ProtoMessage() {}

func (x *Interfaces_Interface_Aggregation_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Aggregation_Config.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Aggregation_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (x *Interfaces_Interface_Aggregation_Config) GetLagType() OpenconfigIfAggregateAggregationType {
	if x != nil {
		return x.LagType
	}
	return OpenconfigIfAggregateAggregationType_OPENCONFIGIFAGGREGATEAGGREGATIONTYPE_UNSET
}

func (x *Interfaces_Interface_Aggregation_Config) GetMinLinks() *ywrapper.UintValue {
	if x != nil {
		return x.MinLinks
	}
	return nil
}

type Interfaces_Interface_Aggregation_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LagSpeed *ywrapper.UintValue                  `protobuf:"bytes,408400324,opt,name=lag_speed,json=lagSpeed,proto3" json:"lag_speed,omitempty"`
	LagType  OpenconfigIfAggregateAggregationType `protobuf:"varint,376910947,opt,name=lag_type,json=lagType,proto3,enum=openconfig.OpenconfigIfAggregateAggregationType" json:"lag_type,omitempty"`
	Member   []*ywrapper.StringValue              `protobuf:"bytes,432243688,rep,name=member,proto3" json:"member,omitempty"`
	MinLinks *ywrapper.UintValue                  `protobuf:"bytes,467195818,opt,name=min_links,json=minLinks,proto3" json:"min_links,omitempty"`
}

func (x *Interfaces_Interface_Aggregation_State) Reset() {
	*x = Interfaces_Interface_Aggregation_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Aggregation_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Aggregation_State) ProtoMessage() {}

func (x *Interfaces_Interface_Aggregation_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Aggregation_State.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Aggregation_State) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 0, 1}
}

func (x *Interfaces_Interface_Aggregation_State) GetLagSpeed() *ywrapper.UintValue {
	if x != nil {
		return x.LagSpeed
	}
	return nil
}

func (x *Interfaces_Interface_Aggregation_State) GetLagType() OpenconfigIfAggregateAggregationType {
	if x != nil {
		return x.LagType
	}
	return OpenconfigIfAggregateAggregationType_OPENCONFIGIFAGGREGATEAGGREGATIONTYPE_UNSET
}

func (x *Interfaces_Interface_Aggregation_State) GetMember() []*ywrapper.StringValue {
	if x != nil {
		return x.Member
	}
	return nil
}

func (x *Interfaces_Interface_Aggregation_State) GetMinLinks() *ywrapper.UintValue {
	if x != nil {
		return x.MinLinks
	}
	return nil
}

type Interfaces_Interface_Aggregation_SwitchedVlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Interfaces_Interface_Aggregation_SwitchedVlan_Config `protobuf:"bytes,191324528,opt,name=config,proto3" json:"config,omitempty"`
	State  *Interfaces_Interface_Aggregation_SwitchedVlan_State  `protobuf:"bytes,408187369,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Interfaces_Interface_Aggregation_SwitchedVlan) Reset() {
	*x = Interfaces_Interface_Aggregation_SwitchedVlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Aggregation_SwitchedVlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Aggregation_SwitchedVlan) ProtoMessage() {}

func (x *Interfaces_Interface_Aggregation_SwitchedVlan) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Aggregation_SwitchedVlan.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Aggregation_SwitchedVlan) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 0, 2}
}

func (x *Interfaces_Interface_Aggregation_SwitchedVlan) GetConfig() *Interfaces_Interface_Aggregation_SwitchedVlan_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Interfaces_Interface_Aggregation_SwitchedVlan) GetState() *Interfaces_Interface_Aggregation_SwitchedVlan_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Interfaces_Interface_Aggregation_SwitchedVlan_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessVlan    *ywrapper.UintValue                                                     `protobuf:"bytes,90805781,opt,name=access_vlan,json=accessVlan,proto3" json:"access_vlan,omitempty"`
	InterfaceMode OpenconfigVlanVlanModeType                                              `protobuf:"varint,281531048,opt,name=interface_mode,json=interfaceMode,proto3,enum=openconfig.OpenconfigVlanVlanModeType" json:"interface_mode,omitempty"`
	NativeVlan    *ywrapper.UintValue                                                     `protobuf:"bytes,44429228,opt,name=native_vlan,json=nativeVlan,proto3" json:"native_vlan,omitempty"`
	TrunkVlans    []*Interfaces_Interface_Aggregation_SwitchedVlan_Config_TrunkVlansUnion `protobuf:"bytes,175319366,rep,name=trunk_vlans,json=trunkVlans,proto3" json:"trunk_vlans,omitempty"`
}

func (x *Interfaces_Interface_Aggregation_SwitchedVlan_Config) Reset() {
	*x = Interfaces_Interface_Aggregation_SwitchedVlan_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Aggregation_SwitchedVlan_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Aggregation_SwitchedVlan_Config) ProtoMessage() {}

func (x *Interfaces_Interface_Aggregation_SwitchedVlan_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Aggregation_SwitchedVlan_Config.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Aggregation_SwitchedVlan_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0}
}

func (x *Interfaces_Interface_Aggregation_SwitchedVlan_Config) GetAccessVlan() *ywrapper.UintValue {
	if x != nil {
		return x.AccessVlan
	}
	return nil
}

func (x *Interfaces_Interface_Aggregation_SwitchedVlan_Config) GetInterfaceMode() OpenconfigVlanVlanModeType {
	if x != nil {
		return x.InterfaceMode
	}
	return OpenconfigVlanVlanModeType_OPENCONFIGVLANVLANMODETYPE_UNSET
}

func (x *Interfaces_Interface_Aggregation_SwitchedVlan_Config) GetNativeVlan() *ywrapper.UintValue {
	if x != nil {
		return x.NativeVlan
	}
	return nil
}

func (x *Interfaces_Interface_Aggregation_SwitchedVlan_Config) GetTrunkVlans() []*Interfaces_Interface_Aggregation_SwitchedVlan_Config_TrunkVlansUnion {
	if x != nil {
		return x.TrunkVlans
	}
	return nil
}

type Interfaces_Interface_Aggregation_SwitchedVlan_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessVlan    *ywrapper.UintValue                                                    `protobuf:"bytes,220068656,opt,name=access_vlan,json=accessVlan,proto3" json:"access_vlan,omitempty"`
	InterfaceMode OpenconfigVlanVlanModeType                                             `protobuf:"varint,338210079,opt,name=interface_mode,json=interfaceMode,proto3,enum=openconfig.OpenconfigVlanVlanModeType" json:"interface_mode,omitempty"`
	NativeVlan    *ywrapper.UintValue                                                    `protobuf:"bytes,286160841,opt,name=native_vlan,json=nativeVlan,proto3" json:"native_vlan,omitempty"`
	TrunkVlans    []*Interfaces_Interface_Aggregation_SwitchedVlan_State_TrunkVlansUnion `protobuf:"bytes,475294727,rep,name=trunk_vlans,json=trunkVlans,proto3" json:"trunk_vlans,omitempty"`
}

func (x *Interfaces_Interface_Aggregation_SwitchedVlan_State) Reset() {
	*x = Interfaces_Interface_Aggregation_SwitchedVlan_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Aggregation_SwitchedVlan_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Aggregation_SwitchedVlan_State) ProtoMessage() {}

func (x *Interfaces_Interface_Aggregation_SwitchedVlan_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Aggregation_SwitchedVlan_State.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Aggregation_SwitchedVlan_State) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 0, 2, 1}
}

func (x *Interfaces_Interface_Aggregation_SwitchedVlan_State) GetAccessVlan() *ywrapper.UintValue {
	if x != nil {
		return x.AccessVlan
	}
	return nil
}

func (x *Interfaces_Interface_Aggregation_SwitchedVlan_State) GetInterfaceMode() OpenconfigVlanVlanModeType {
	if x != nil {
		return x.InterfaceMode
	}
	return OpenconfigVlanVlanModeType_OPENCONFIGVLANVLANMODETYPE_UNSET
}

func (x *Interfaces_Interface_Aggregation_SwitchedVlan_State) GetNativeVlan() *ywrapper.UintValue {
	if x != nil {
		return x.NativeVlan
	}
	return nil
}

func (x *Interfaces_Interface_Aggregation_SwitchedVlan_State) GetTrunkVlans() []*Interfaces_Interface_Aggregation_SwitchedVlan_State_TrunkVlansUnion {
	if x != nil {
		return x.TrunkVlans
	}
	return nil
}

type Interfaces_Interface_Aggregation_SwitchedVlan_Config_TrunkVlansUnion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrunkVlansString string `protobuf:"bytes,312059958,opt,name=trunk_vlans_string,json=trunkVlansString,proto3" json:"trunk_vlans_string,omitempty"`
	TrunkVlansUint64 uint64 `protobuf:"varint,177367799,opt,name=trunk_vlans_uint64,json=trunkVlansUint64,proto3" json:"trunk_vlans_uint64,omitempty"`
}

func (x *Interfaces_Interface_Aggregation_SwitchedVlan_Config_TrunkVlansUnion) Reset() {
	*x = Interfaces_Interface_Aggregation_SwitchedVlan_Config_TrunkVlansUnion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Aggregation_SwitchedVlan_Config_TrunkVlansUnion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Aggregation_SwitchedVlan_Config_TrunkVlansUnion) ProtoMessage() {}

func (x *Interfaces_Interface_Aggregation_SwitchedVlan_Config_TrunkVlansUnion) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Aggregation_SwitchedVlan_Config_TrunkVlansUnion.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Aggregation_SwitchedVlan_Config_TrunkVlansUnion) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0, 0}
}

func (x *Interfaces_Interface_Aggregation_SwitchedVlan_Config_TrunkVlansUnion) GetTrunkVlansString() string {
	if x != nil {
		return x.TrunkVlansString
	}
	return ""
}

func (x *Interfaces_Interface_Aggregation_SwitchedVlan_Config_TrunkVlansUnion) GetTrunkVlansUint64() uint64 {
	if x != nil {
		return x.TrunkVlansUint64
	}
	return 0
}

type Interfaces_Interface_Aggregation_SwitchedVlan_State_TrunkVlansUnion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrunkVlansString string `protobuf:"bytes,425528837,opt,name=trunk_vlans_string,json=trunkVlansString,proto3" json:"trunk_vlans_string,omitempty"`
	TrunkVlansUint64 uint64 `protobuf:"varint,498883976,opt,name=trunk_vlans_uint64,json=trunkVlansUint64,proto3" json:"trunk_vlans_uint64,omitempty"`
}

func (x *Interfaces_Interface_Aggregation_SwitchedVlan_State_TrunkVlansUnion) Reset() {
	*x = Interfaces_Interface_Aggregation_SwitchedVlan_State_TrunkVlansUnion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Aggregation_SwitchedVlan_State_TrunkVlansUnion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Aggregation_SwitchedVlan_State_TrunkVlansUnion) ProtoMessage() {}

func (x *Interfaces_Interface_Aggregation_SwitchedVlan_State_TrunkVlansUnion) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Aggregation_SwitchedVlan_State_TrunkVlansUnion.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Aggregation_SwitchedVlan_State_TrunkVlansUnion) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 0, 2, 1, 0}
}

func (x *Interfaces_Interface_Aggregation_SwitchedVlan_State_TrunkVlansUnion) GetTrunkVlansString() string {
	if x != nil {
		return x.TrunkVlansString
	}
	return ""
}

func (x *Interfaces_Interface_Aggregation_SwitchedVlan_State_TrunkVlansUnion) GetTrunkVlansUint64() uint64 {
	if x != nil {
		return x.TrunkVlansUint64
	}
	return 0
}

type Interfaces_Interface_Ethernet_AuthenticatedSessions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthenticatedSession []*Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSessionKey `protobuf:"bytes,256384953,rep,name=authenticated_session,json=authenticatedSession,proto3" json:"authenticated_session,omitempty"`
}

func (x *Interfaces_Interface_Ethernet_AuthenticatedSessions) Reset() {
	*x = Interfaces_Interface_Ethernet_AuthenticatedSessions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Ethernet_AuthenticatedSessions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Ethernet_AuthenticatedSessions) ProtoMessage() {}

func (x *Interfaces_Interface_Ethernet_AuthenticatedSessions) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Ethernet_AuthenticatedSessions.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Ethernet_AuthenticatedSessions) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 2, 0}
}

func (x *Interfaces_Interface_Ethernet_AuthenticatedSessions) GetAuthenticatedSession() []*Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSessionKey {
	if x != nil {
		return x.AuthenticatedSession
	}
	return nil
}

type Interfaces_Interface_Ethernet_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AggregateId       *ywrapper.StringValue                           `protobuf:"bytes,208679153,opt,name=aggregate_id,json=aggregateId,proto3" json:"aggregate_id,omitempty"`
	AutoNegotiate     *ywrapper.BoolValue                             `protobuf:"bytes,362931914,opt,name=auto_negotiate,json=autoNegotiate,proto3" json:"auto_negotiate,omitempty"`
	DuplexMode        Interfaces_Interface_Ethernet_Config_DuplexMode `protobuf:"varint,281836250,opt,name=duplex_mode,json=duplexMode,proto3,enum=openconfig.Interfaces_Interface_Ethernet_Config_DuplexMode" json:"duplex_mode,omitempty"`
	EnableFlowControl *ywrapper.BoolValue                             `protobuf:"bytes,41554070,opt,name=enable_flow_control,json=enableFlowControl,proto3" json:"enable_flow_control,omitempty"`
	MacAddress        *ywrapper.StringValue                           `protobuf:"bytes,1149482,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	PortSpeed         OpenconfigIfEthernetETHERNETSPEED               `protobuf:"varint,272501003,opt,name=port_speed,json=portSpeed,proto3,enum=openconfig.OpenconfigIfEthernetETHERNETSPEED" json:"port_speed,omitempty"`
}

func (x *Interfaces_Interface_Ethernet_Config) Reset() {
	*x = Interfaces_Interface_Ethernet_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Ethernet_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Ethernet_Config) ProtoMessage() {}

func (x *Interfaces_Interface_Ethernet_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Ethernet_Config.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Ethernet_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 2, 1}
}

func (x *Interfaces_Interface_Ethernet_Config) GetAggregateId() *ywrapper.StringValue {
	if x != nil {
		return x.AggregateId
	}
	return nil
}

func (x *Interfaces_Interface_Ethernet_Config) GetAutoNegotiate() *ywrapper.BoolValue {
	if x != nil {
		return x.AutoNegotiate
	}
	return nil
}

func (x *Interfaces_Interface_Ethernet_Config) GetDuplexMode() Interfaces_Interface_Ethernet_Config_DuplexMode {
	if x != nil {
		return x.DuplexMode
	}
	return Interfaces_Interface_Ethernet_Config_DUPLEXMODE_UNSET
}

func (x *Interfaces_Interface_Ethernet_Config) GetEnableFlowControl() *ywrapper.BoolValue {
	if x != nil {
		return x.EnableFlowControl
	}
	return nil
}

func (x *Interfaces_Interface_Ethernet_Config) GetMacAddress() *ywrapper.StringValue {
	if x != nil {
		return x.MacAddress
	}
	return nil
}

func (x *Interfaces_Interface_Ethernet_Config) GetPortSpeed() OpenconfigIfEthernetETHERNETSPEED {
	if x != nil {
		return x.PortSpeed
	}
	return OpenconfigIfEthernetETHERNETSPEED_OPENCONFIGIFETHERNETETHERNETSPEED_UNSET
}

type Interfaces_Interface_Ethernet_Dot1X struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Interfaces_Interface_Ethernet_Dot1X_Config `protobuf:"bytes,109177880,opt,name=config,proto3" json:"config,omitempty"`
	State  *Interfaces_Interface_Ethernet_Dot1X_State  `protobuf:"bytes,472521905,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Interfaces_Interface_Ethernet_Dot1X) Reset() {
	*x = Interfaces_Interface_Ethernet_Dot1X{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Ethernet_Dot1X) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Ethernet_Dot1X) ProtoMessage() {}

func (x *Interfaces_Interface_Ethernet_Dot1X) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Ethernet_Dot1X.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Ethernet_Dot1X) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 2, 2}
}

func (x *Interfaces_Interface_Ethernet_Dot1X) GetConfig() *Interfaces_Interface_Ethernet_Dot1X_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Interfaces_Interface_Ethernet_Dot1X) GetState() *Interfaces_Interface_Ethernet_Dot1X_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Interfaces_Interface_Ethernet_Poe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Interfaces_Interface_Ethernet_Poe_Config `protobuf:"bytes,220057774,opt,name=config,proto3" json:"config,omitempty"`
	State  *Interfaces_Interface_Ethernet_Poe_State  `protobuf:"bytes,486103003,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Interfaces_Interface_Ethernet_Poe) Reset() {
	*x = Interfaces_Interface_Ethernet_Poe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Ethernet_Poe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Ethernet_Poe) ProtoMessage() {}

func (x *Interfaces_Interface_Ethernet_Poe) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Ethernet_Poe.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Ethernet_Poe) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 2, 3}
}

func (x *Interfaces_Interface_Ethernet_Poe) GetConfig() *Interfaces_Interface_Ethernet_Poe_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Interfaces_Interface_Ethernet_Poe) GetState() *Interfaces_Interface_Ethernet_Poe_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Interfaces_Interface_Ethernet_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AggregateId          *ywrapper.StringValue                                    `protobuf:"bytes,370849140,opt,name=aggregate_id,json=aggregateId,proto3" json:"aggregate_id,omitempty"`
	AutoNegotiate        *ywrapper.BoolValue                                      `protobuf:"bytes,7955227,opt,name=auto_negotiate,json=autoNegotiate,proto3" json:"auto_negotiate,omitempty"`
	Counters             *Interfaces_Interface_Ethernet_State_Counters            `protobuf:"bytes,452454018,opt,name=counters,proto3" json:"counters,omitempty"`
	DuplexMode           Interfaces_Interface_Ethernet_State_DuplexMode           `protobuf:"varint,188928481,opt,name=duplex_mode,json=duplexMode,proto3,enum=openconfig.Interfaces_Interface_Ethernet_State_DuplexMode" json:"duplex_mode,omitempty"`
	EnableFlowControl    *ywrapper.BoolValue                                      `protobuf:"bytes,143494477,opt,name=enable_flow_control,json=enableFlowControl,proto3" json:"enable_flow_control,omitempty"`
	HwMacAddress         *ywrapper.StringValue                                    `protobuf:"bytes,296258675,opt,name=hw_mac_address,json=hwMacAddress,proto3" json:"hw_mac_address,omitempty"`
	MacAddress           *ywrapper.StringValue                                    `protobuf:"bytes,134386457,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	NegotiatedDuplexMode Interfaces_Interface_Ethernet_State_NegotiatedDuplexMode `protobuf:"varint,6853804,opt,name=negotiated_duplex_mode,json=negotiatedDuplexMode,proto3,enum=openconfig.Interfaces_Interface_Ethernet_State_NegotiatedDuplexMode" json:"negotiated_duplex_mode,omitempty"`
	NegotiatedPortSpeed  OpenconfigIfEthernetETHERNETSPEED                        `protobuf:"varint,316416089,opt,name=negotiated_port_speed,json=negotiatedPortSpeed,proto3,enum=openconfig.OpenconfigIfEthernetETHERNETSPEED" json:"negotiated_port_speed,omitempty"`
	PortSpeed            OpenconfigIfEthernetETHERNETSPEED                        `protobuf:"varint,469844638,opt,name=port_speed,json=portSpeed,proto3,enum=openconfig.OpenconfigIfEthernetETHERNETSPEED" json:"port_speed,omitempty"`
}

func (x *Interfaces_Interface_Ethernet_State) Reset() {
	*x = Interfaces_Interface_Ethernet_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Ethernet_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Ethernet_State) ProtoMessage() {}

func (x *Interfaces_Interface_Ethernet_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Ethernet_State.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Ethernet_State) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 2, 4}
}

func (x *Interfaces_Interface_Ethernet_State) GetAggregateId() *ywrapper.StringValue {
	if x != nil {
		return x.AggregateId
	}
	return nil
}

func (x *Interfaces_Interface_Ethernet_State) GetAutoNegotiate() *ywrapper.BoolValue {
	if x != nil {
		return x.AutoNegotiate
	}
	return nil
}

func (x *Interfaces_Interface_Ethernet_State) GetCounters() *Interfaces_Interface_Ethernet_State_Counters {
	if x != nil {
		return x.Counters
	}
	return nil
}

func (x *Interfaces_Interface_Ethernet_State) GetDuplexMode() Interfaces_Interface_Ethernet_State_DuplexMode {
	if x != nil {
		return x.DuplexMode
	}
	return Interfaces_Interface_Ethernet_State_DUPLEXMODE_UNSET
}

func (x *Interfaces_Interface_Ethernet_State) GetEnableFlowControl() *ywrapper.BoolValue {
	if x != nil {
		return x.EnableFlowControl
	}
	return nil
}

func (x *Interfaces_Interface_Ethernet_State) GetHwMacAddress() *ywrapper.StringValue {
	if x != nil {
		return x.HwMacAddress
	}
	return nil
}

func (x *Interfaces_Interface_Ethernet_State) GetMacAddress() *ywrapper.StringValue {
	if x != nil {
		return x.MacAddress
	}
	return nil
}

func (x *Interfaces_Interface_Ethernet_State) GetNegotiatedDuplexMode() Interfaces_Interface_Ethernet_State_NegotiatedDuplexMode {
	if x != nil {
		return x.NegotiatedDuplexMode
	}
	return Interfaces_Interface_Ethernet_State_NEGOTIATEDDUPLEXMODE_UNSET
}

func (x *Interfaces_Interface_Ethernet_State) GetNegotiatedPortSpeed() OpenconfigIfEthernetETHERNETSPEED {
	if x != nil {
		return x.NegotiatedPortSpeed
	}
	return OpenconfigIfEthernetETHERNETSPEED_OPENCONFIGIFETHERNETETHERNETSPEED_UNSET
}

func (x *Interfaces_Interface_Ethernet_State) GetPortSpeed() OpenconfigIfEthernetETHERNETSPEED {
	if x != nil {
		return x.PortSpeed
	}
	return OpenconfigIfEthernetETHERNETSPEED_OPENCONFIGIFETHERNETETHERNETSPEED_UNSET
}

type Interfaces_Interface_Ethernet_SwitchedVlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config       *Interfaces_Interface_Ethernet_SwitchedVlan_Config       `protobuf:"bytes,173442407,opt,name=config,proto3" json:"config,omitempty"`
	Dot1XVlanMap *Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap `protobuf:"bytes,348767792,opt,name=dot1x_vlan_map,json=dot1xVlanMap,proto3" json:"dot1x_vlan_map,omitempty"`
	State        *Interfaces_Interface_Ethernet_SwitchedVlan_State        `protobuf:"bytes,228575832,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Interfaces_Interface_Ethernet_SwitchedVlan) Reset() {
	*x = Interfaces_Interface_Ethernet_SwitchedVlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Ethernet_SwitchedVlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Ethernet_SwitchedVlan) ProtoMessage() {}

func (x *Interfaces_Interface_Ethernet_SwitchedVlan) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Ethernet_SwitchedVlan.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Ethernet_SwitchedVlan) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 2, 5}
}

func (x *Interfaces_Interface_Ethernet_SwitchedVlan) GetConfig() *Interfaces_Interface_Ethernet_SwitchedVlan_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Interfaces_Interface_Ethernet_SwitchedVlan) GetDot1XVlanMap() *Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap {
	if x != nil {
		return x.Dot1XVlanMap
	}
	return nil
}

func (x *Interfaces_Interface_Ethernet_SwitchedVlan) GetState() *Interfaces_Interface_Ethernet_SwitchedVlan_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State `protobuf:"bytes,67664699,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession) Reset() {
	*x = Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession) ProtoMessage() {}

func (x *Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 2, 0, 0}
}

func (x *Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession) GetState() *Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSessionKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mac                  string                                                                    `protobuf:"bytes,1,opt,name=mac,proto3" json:"mac,omitempty"`
	AuthenticatedSession *Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession `protobuf:"bytes,2,opt,name=authenticated_session,json=authenticatedSession,proto3" json:"authenticated_session,omitempty"`
}

func (x *Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSessionKey) Reset() {
	*x = Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSessionKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSessionKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSessionKey) ProtoMessage() {}

func (x *Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSessionKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSessionKey.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSessionKey) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 2, 0, 1}
}

func (x *Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSessionKey) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSessionKey) GetAuthenticatedSession() *Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession {
	if x != nil {
		return x.AuthenticatedSession
	}
	return nil
}

type Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mac       *ywrapper.StringValue                                                                 `protobuf:"bytes,445714479,opt,name=mac,proto3" json:"mac,omitempty"`
	SessionId *ywrapper.StringValue                                                                 `protobuf:"bytes,521606644,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Status    Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State_Status `protobuf:"varint,525135068,opt,name=status,proto3,enum=openconfig.Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State_Status" json:"status,omitempty"`
}

func (x *Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State) Reset() {
	*x = Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State) ProtoMessage() {
}

func (x *Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 2, 0, 0, 0}
}

func (x *Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State) GetMac() *ywrapper.StringValue {
	if x != nil {
		return x.Mac
	}
	return nil
}

func (x *Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State) GetSessionId() *ywrapper.StringValue {
	if x != nil {
		return x.SessionId
	}
	return nil
}

func (x *Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State) GetStatus() Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State_Status {
	if x != nil {
		return x.Status
	}
	return Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State_STATUS_UNSET
}

type Interfaces_Interface_Ethernet_Dot1X_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to AuthFailVlan:
	//	*Interfaces_Interface_Ethernet_Dot1X_Config_AuthFailVlanString
	//	*Interfaces_Interface_Ethernet_Dot1X_Config_AuthFailVlanUint64
	AuthFailVlan           isInterfaces_Interface_Ethernet_Dot1X_Config_AuthFailVlan `protobuf_oneof:"auth_fail_vlan"`
	AuthenticatePort       *ywrapper.BoolValue                                       `protobuf:"bytes,137197860,opt,name=authenticate_port,json=authenticatePort,proto3" json:"authenticate_port,omitempty"`
	HostMode               Interfaces_Interface_Ethernet_Dot1X_Config_HostMode       `protobuf:"varint,527176031,opt,name=host_mode,json=hostMode,proto3,enum=openconfig.Interfaces_Interface_Ethernet_Dot1X_Config_HostMode" json:"host_mode,omitempty"`
	MaxRequests            *ywrapper.UintValue                                       `protobuf:"bytes,377991286,opt,name=max_requests,json=maxRequests,proto3" json:"max_requests,omitempty"`
	ReauthenticateInterval *ywrapper.UintValue                                       `protobuf:"bytes,333743091,opt,name=reauthenticate_interval,json=reauthenticateInterval,proto3" json:"reauthenticate_interval,omitempty"`
	RetransmitInterval     *ywrapper.UintValue                                       `protobuf:"bytes,291231794,opt,name=retransmit_interval,json=retransmitInterval,proto3" json:"retransmit_interval,omitempty"`
	// Types that are assignable to ServerFailVlan:
	//	*Interfaces_Interface_Ethernet_Dot1X_Config_ServerFailVlanString
	//	*Interfaces_Interface_Ethernet_Dot1X_Config_ServerFailVlanUint64
	ServerFailVlan    isInterfaces_Interface_Ethernet_Dot1X_Config_ServerFailVlan `protobuf_oneof:"server_fail_vlan"`
	SupplicantTimeout *ywrapper.UintValue                                         `protobuf:"bytes,185786606,opt,name=supplicant_timeout,json=supplicantTimeout,proto3" json:"supplicant_timeout,omitempty"`
}

func (x *Interfaces_Interface_Ethernet_Dot1X_Config) Reset() {
	*x = Interfaces_Interface_Ethernet_Dot1X_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Ethernet_Dot1X_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Ethernet_Dot1X_Config) ProtoMessage() {}

func (x *Interfaces_Interface_Ethernet_Dot1X_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Ethernet_Dot1X_Config.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Ethernet_Dot1X_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 2, 2, 0}
}

func (m *Interfaces_Interface_Ethernet_Dot1X_Config) GetAuthFailVlan() isInterfaces_Interface_Ethernet_Dot1X_Config_AuthFailVlan {
	if m != nil {
		return m.AuthFailVlan
	}
	return nil
}

func (x *Interfaces_Interface_Ethernet_Dot1X_Config) GetAuthFailVlanString() string {
	if x, ok := x.GetAuthFailVlan().(*Interfaces_Interface_Ethernet_Dot1X_Config_AuthFailVlanString); ok {
		return x.AuthFailVlanString
	}
	return ""
}

func (x *Interfaces_Interface_Ethernet_Dot1X_Config) GetAuthFailVlanUint64() uint64 {
	if x, ok := x.GetAuthFailVlan().(*Interfaces_Interface_Ethernet_Dot1X_Config_AuthFailVlanUint64); ok {
		return x.AuthFailVlanUint64
	}
	return 0
}

func (x *Interfaces_Interface_Ethernet_Dot1X_Config) GetAuthenticatePort() *ywrapper.BoolValue {
	if x != nil {
		return x.AuthenticatePort
	}
	return nil
}

func (x *Interfaces_Interface_Ethernet_Dot1X_Config) GetHostMode() Interfaces_Interface_Ethernet_Dot1X_Config_HostMode {
	if x != nil {
		return x.HostMode
	}
	return Interfaces_Interface_Ethernet_Dot1X_Config_HOSTMODE_UNSET
}

func (x *Interfaces_Interface_Ethernet_Dot1X_Config) GetMaxRequests() *ywrapper.UintValue {
	if x != nil {
		return x.MaxRequests
	}
	return nil
}

func (x *Interfaces_Interface_Ethernet_Dot1X_Config) GetReauthenticateInterval() *ywrapper.UintValue {
	if x != nil {
		return x.ReauthenticateInterval
	}
	return nil
}

func (x *Interfaces_Interface_Ethernet_Dot1X_Config) GetRetransmitInterval() *ywrapper.UintValue {
	if x != nil {
		return x.RetransmitInterval
	}
	return nil
}

func (m *Interfaces_Interface_Ethernet_Dot1X_Config) GetServerFailVlan() isInterfaces_Interface_Ethernet_Dot1X_Config_ServerFailVlan {
	if m != nil {
		return m.ServerFailVlan
	}
	return nil
}

func (x *Interfaces_Interface_Ethernet_Dot1X_Config) GetServerFailVlanString() string {
	if x, ok := x.GetServerFailVlan().(*Interfaces_Interface_Ethernet_Dot1X_Config_ServerFailVlanString); ok {
		return x.ServerFailVlanString
	}
	return ""
}

func (x *Interfaces_Interface_Ethernet_Dot1X_Config) GetServerFailVlanUint64() uint64 {
	if x, ok := x.GetServerFailVlan().(*Interfaces_Interface_Ethernet_Dot1X_Config_ServerFailVlanUint64); ok {
		return x.ServerFailVlanUint64
	}
	return 0
}

func (x *Interfaces_Interface_Ethernet_Dot1X_Config) GetSupplicantTimeout() *ywrapper.UintValue {
	if x != nil {
		return x.SupplicantTimeout
	}
	return nil
}

type isInterfaces_Interface_Ethernet_Dot1X_Config_AuthFailVlan interface {
	isInterfaces_Interface_Ethernet_Dot1X_Config_AuthFailVlan()
}

type Interfaces_Interface_Ethernet_Dot1X_Config_AuthFailVlanString struct {
	AuthFailVlanString string `protobuf:"bytes,357168368,opt,name=auth_fail_vlan_string,json=authFailVlanString,proto3,oneof"`
}

type Interfaces_Interface_Ethernet_Dot1X_Config_AuthFailVlanUint64 struct {
	AuthFailVlanUint64 uint64 `protobuf:"varint,505497705,opt,name=auth_fail_vlan_uint64,json=authFailVlanUint64,proto3,oneof"`
}

func (*Interfaces_Interface_Ethernet_Dot1X_Config_AuthFailVlanString) isInterfaces_Interface_Ethernet_Dot1X_Config_AuthFailVlan() {
}

func (*Interfaces_Interface_Ethernet_Dot1X_Config_AuthFailVlanUint64) isInterfaces_Interface_Ethernet_Dot1X_Config_AuthFailVlan() {
}

type isInterfaces_Interface_Ethernet_Dot1X_Config_ServerFailVlan interface {
	isInterfaces_Interface_Ethernet_Dot1X_Config_ServerFailVlan()
}

type Interfaces_Interface_Ethernet_Dot1X_Config_ServerFailVlanString struct {
	ServerFailVlanString string `protobuf:"bytes,387120309,opt,name=server_fail_vlan_string,json=serverFailVlanString,proto3,oneof"`
}

type Interfaces_Interface_Ethernet_Dot1X_Config_ServerFailVlanUint64 struct {
	ServerFailVlanUint64 uint64 `protobuf:"varint,536627864,opt,name=server_fail_vlan_uint64,json=serverFailVlanUint64,proto3,oneof"`
}

func (*Interfaces_Interface_Ethernet_Dot1X_Config_ServerFailVlanString) isInterfaces_Interface_Ethernet_Dot1X_Config_ServerFailVlan() {
}

func (*Interfaces_Interface_Ethernet_Dot1X_Config_ServerFailVlanUint64) isInterfaces_Interface_Ethernet_Dot1X_Config_ServerFailVlan() {
}

type Interfaces_Interface_Ethernet_Dot1X_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to AuthFailVlan:
	//	*Interfaces_Interface_Ethernet_Dot1X_State_AuthFailVlanString
	//	*Interfaces_Interface_Ethernet_Dot1X_State_AuthFailVlanUint64
	AuthFailVlan           isInterfaces_Interface_Ethernet_Dot1X_State_AuthFailVlan `protobuf_oneof:"auth_fail_vlan"`
	AuthenticatePort       *ywrapper.BoolValue                                      `protobuf:"bytes,148833901,opt,name=authenticate_port,json=authenticatePort,proto3" json:"authenticate_port,omitempty"`
	HostMode               Interfaces_Interface_Ethernet_Dot1X_State_HostMode       `protobuf:"varint,259064874,opt,name=host_mode,json=hostMode,proto3,enum=openconfig.Interfaces_Interface_Ethernet_Dot1X_State_HostMode" json:"host_mode,omitempty"`
	MaxRequests            *ywrapper.UintValue                                      `protobuf:"bytes,315504441,opt,name=max_requests,json=maxRequests,proto3" json:"max_requests,omitempty"`
	ReauthenticateInterval *ywrapper.UintValue                                      `protobuf:"bytes,91009374,opt,name=reauthenticate_interval,json=reauthenticateInterval,proto3" json:"reauthenticate_interval,omitempty"`
	RetransmitInterval     *ywrapper.UintValue                                      `protobuf:"bytes,338966031,opt,name=retransmit_interval,json=retransmitInterval,proto3" json:"retransmit_interval,omitempty"`
	// Types that are assignable to ServerFailVlan:
	//	*Interfaces_Interface_Ethernet_Dot1X_State_ServerFailVlanString
	//	*Interfaces_Interface_Ethernet_Dot1X_State_ServerFailVlanUint64
	ServerFailVlan    isInterfaces_Interface_Ethernet_Dot1X_State_ServerFailVlan `protobuf_oneof:"server_fail_vlan"`
	SupplicantTimeout *ywrapper.UintValue                                        `protobuf:"bytes,440022881,opt,name=supplicant_timeout,json=supplicantTimeout,proto3" json:"supplicant_timeout,omitempty"`
}

func (x *Interfaces_Interface_Ethernet_Dot1X_State) Reset() {
	*x = Interfaces_Interface_Ethernet_Dot1X_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Ethernet_Dot1X_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Ethernet_Dot1X_State) ProtoMessage() {}

func (x *Interfaces_Interface_Ethernet_Dot1X_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Ethernet_Dot1X_State.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Ethernet_Dot1X_State) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 2, 2, 1}
}

func (m *Interfaces_Interface_Ethernet_Dot1X_State) GetAuthFailVlan() isInterfaces_Interface_Ethernet_Dot1X_State_AuthFailVlan {
	if m != nil {
		return m.AuthFailVlan
	}
	return nil
}

func (x *Interfaces_Interface_Ethernet_Dot1X_State) GetAuthFailVlanString() string {
	if x, ok := x.GetAuthFailVlan().(*Interfaces_Interface_Ethernet_Dot1X_State_AuthFailVlanString); ok {
		return x.AuthFailVlanString
	}
	return ""
}

func (x *Interfaces_Interface_Ethernet_Dot1X_State) GetAuthFailVlanUint64() uint64 {
	if x, ok := x.GetAuthFailVlan().(*Interfaces_Interface_Ethernet_Dot1X_State_AuthFailVlanUint64); ok {
		return x.AuthFailVlanUint64
	}
	return 0
}

func (x *Interfaces_Interface_Ethernet_Dot1X_State) GetAuthenticatePort() *ywrapper.BoolValue {
	if x != nil {
		return x.AuthenticatePort
	}
	return nil
}

func (x *Interfaces_Interface_Ethernet_Dot1X_State) GetHostMode() Interfaces_Interface_Ethernet_Dot1X_State_HostMode {
	if x != nil {
		return x.HostMode
	}
	return Interfaces_Interface_Ethernet_Dot1X_State_HOSTMODE_UNSET
}

func (x *Interfaces_Interface_Ethernet_Dot1X_State) GetMaxRequests() *ywrapper.UintValue {
	if x != nil {
		return x.MaxRequests
	}
	return nil
}

func (x *Interfaces_Interface_Ethernet_Dot1X_State) GetReauthenticateInterval() *ywrapper.UintValue {
	if x != nil {
		return x.ReauthenticateInterval
	}
	return nil
}

func (x *Interfaces_Interface_Ethernet_Dot1X_State) GetRetransmitInterval() *ywrapper.UintValue {
	if x != nil {
		return x.RetransmitInterval
	}
	return nil
}

func (m *Interfaces_Interface_Ethernet_Dot1X_State) GetServerFailVlan() isInterfaces_Interface_Ethernet_Dot1X_State_ServerFailVlan {
	if m != nil {
		return m.ServerFailVlan
	}
	return nil
}

func (x *Interfaces_Interface_Ethernet_Dot1X_State) GetServerFailVlanString() string {
	if x, ok := x.GetServerFailVlan().(*Interfaces_Interface_Ethernet_Dot1X_State_ServerFailVlanString); ok {
		return x.ServerFailVlanString
	}
	return ""
}

func (x *Interfaces_Interface_Ethernet_Dot1X_State) GetServerFailVlanUint64() uint64 {
	if x, ok := x.GetServerFailVlan().(*Interfaces_Interface_Ethernet_Dot1X_State_ServerFailVlanUint64); ok {
		return x.ServerFailVlanUint64
	}
	return 0
}

func (x *Interfaces_Interface_Ethernet_Dot1X_State) GetSupplicantTimeout() *ywrapper.UintValue {
	if x != nil {
		return x.SupplicantTimeout
	}
	return nil
}

type isInterfaces_Interface_Ethernet_Dot1X_State_AuthFailVlan interface {
	isInterfaces_Interface_Ethernet_Dot1X_State_AuthFailVlan()
}

type Interfaces_Interface_Ethernet_Dot1X_State_AuthFailVlanString struct {
	AuthFailVlanString string `protobuf:"bytes,158097573,opt,name=auth_fail_vlan_string,json=authFailVlanString,proto3,oneof"`
}

type Interfaces_Interface_Ethernet_Dot1X_State_AuthFailVlanUint64 struct {
	AuthFailVlanUint64 uint64 `protobuf:"varint,273029416,opt,name=auth_fail_vlan_uint64,json=authFailVlanUint64,proto3,oneof"`
}

func (*Interfaces_Interface_Ethernet_Dot1X_State_AuthFailVlanString) isInterfaces_Interface_Ethernet_Dot1X_State_AuthFailVlan() {
}

func (*Interfaces_Interface_Ethernet_Dot1X_State_AuthFailVlanUint64) isInterfaces_Interface_Ethernet_Dot1X_State_AuthFailVlan() {
}

type isInterfaces_Interface_Ethernet_Dot1X_State_ServerFailVlan interface {
	isInterfaces_Interface_Ethernet_Dot1X_State_ServerFailVlan()
}

type Interfaces_Interface_Ethernet_Dot1X_State_ServerFailVlanString struct {
	ServerFailVlanString string `protobuf:"bytes,335273528,opt,name=server_fail_vlan_string,json=serverFailVlanString,proto3,oneof"`
}

type Interfaces_Interface_Ethernet_Dot1X_State_ServerFailVlanUint64 struct {
	ServerFailVlanUint64 uint64 `protobuf:"varint,126184881,opt,name=server_fail_vlan_uint64,json=serverFailVlanUint64,proto3,oneof"`
}

func (*Interfaces_Interface_Ethernet_Dot1X_State_ServerFailVlanString) isInterfaces_Interface_Ethernet_Dot1X_State_ServerFailVlan() {
}

func (*Interfaces_Interface_Ethernet_Dot1X_State_ServerFailVlanUint64) isInterfaces_Interface_Ethernet_Dot1X_State_ServerFailVlan() {
}

type Interfaces_Interface_Ethernet_Poe_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled *ywrapper.BoolValue `protobuf:"bytes,193022796,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *Interfaces_Interface_Ethernet_Poe_Config) Reset() {
	*x = Interfaces_Interface_Ethernet_Poe_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Ethernet_Poe_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Ethernet_Poe_Config) ProtoMessage() {}

func (x *Interfaces_Interface_Ethernet_Poe_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Ethernet_Poe_Config.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Ethernet_Poe_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 2, 3, 0}
}

func (x *Interfaces_Interface_Ethernet_Poe_Config) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

type Interfaces_Interface_Ethernet_Poe_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled    *ywrapper.BoolValue      `protobuf:"bytes,373330845,opt,name=enabled,proto3" json:"enabled,omitempty"`
	PowerClass *ywrapper.UintValue      `protobuf:"bytes,168790886,opt,name=power_class,json=powerClass,proto3" json:"power_class,omitempty"`
	PowerUsed  *ywrapper.Decimal64Value `protobuf:"bytes,529787569,opt,name=power_used,json=powerUsed,proto3" json:"power_used,omitempty"`
}

func (x *Interfaces_Interface_Ethernet_Poe_State) Reset() {
	*x = Interfaces_Interface_Ethernet_Poe_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Ethernet_Poe_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Ethernet_Poe_State) ProtoMessage() {}

func (x *Interfaces_Interface_Ethernet_Poe_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Ethernet_Poe_State.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Ethernet_Poe_State) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 2, 3, 1}
}

func (x *Interfaces_Interface_Ethernet_Poe_State) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *Interfaces_Interface_Ethernet_Poe_State) GetPowerClass() *ywrapper.UintValue {
	if x != nil {
		return x.PowerClass
	}
	return nil
}

func (x *Interfaces_Interface_Ethernet_Poe_State) GetPowerUsed() *ywrapper.Decimal64Value {
	if x != nil {
		return x.PowerUsed
	}
	return nil
}

type Interfaces_Interface_Ethernet_State_Counters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	In_8021QFrames      *ywrapper.UintValue                                          `protobuf:"bytes,529738026,opt,name=in_8021q_frames,json=in8021qFrames,proto3" json:"in_8021q_frames,omitempty"`
	InBlockErrors       *ywrapper.UintValue                                          `protobuf:"bytes,141122900,opt,name=in_block_errors,json=inBlockErrors,proto3" json:"in_block_errors,omitempty"`
	InCrcErrors         *ywrapper.UintValue                                          `protobuf:"bytes,77292495,opt,name=in_crc_errors,json=inCrcErrors,proto3" json:"in_crc_errors,omitempty"`
	InDistribution      *Interfaces_Interface_Ethernet_State_Counters_InDistribution `protobuf:"bytes,342200227,opt,name=in_distribution,json=inDistribution,proto3" json:"in_distribution,omitempty"`
	InFragmentFrames    *ywrapper.UintValue                                          `protobuf:"bytes,377378436,opt,name=in_fragment_frames,json=inFragmentFrames,proto3" json:"in_fragment_frames,omitempty"`
	InJabberFrames      *ywrapper.UintValue                                          `protobuf:"bytes,428398234,opt,name=in_jabber_frames,json=inJabberFrames,proto3" json:"in_jabber_frames,omitempty"`
	InMacControlFrames  *ywrapper.UintValue                                          `protobuf:"bytes,90181121,opt,name=in_mac_control_frames,json=inMacControlFrames,proto3" json:"in_mac_control_frames,omitempty"`
	InMacPauseFrames    *ywrapper.UintValue                                          `protobuf:"bytes,373764182,opt,name=in_mac_pause_frames,json=inMacPauseFrames,proto3" json:"in_mac_pause_frames,omitempty"`
	InOversizeFrames    *ywrapper.UintValue                                          `protobuf:"bytes,12762219,opt,name=in_oversize_frames,json=inOversizeFrames,proto3" json:"in_oversize_frames,omitempty"`
	InUndersizeFrames   *ywrapper.UintValue                                          `protobuf:"bytes,373754277,opt,name=in_undersize_frames,json=inUndersizeFrames,proto3" json:"in_undersize_frames,omitempty"`
	Out_8021QFrames     *ywrapper.UintValue                                          `protobuf:"bytes,61726883,opt,name=out_8021q_frames,json=out8021qFrames,proto3" json:"out_8021q_frames,omitempty"`
	OutMacControlFrames *ywrapper.UintValue                                          `protobuf:"bytes,23867076,opt,name=out_mac_control_frames,json=outMacControlFrames,proto3" json:"out_mac_control_frames,omitempty"`
	OutMacPauseFrames   *ywrapper.UintValue                                          `protobuf:"bytes,37153563,opt,name=out_mac_pause_frames,json=outMacPauseFrames,proto3" json:"out_mac_pause_frames,omitempty"`
}

func (x *Interfaces_Interface_Ethernet_State_Counters) Reset() {
	*x = Interfaces_Interface_Ethernet_State_Counters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Ethernet_State_Counters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Ethernet_State_Counters) ProtoMessage() {}

func (x *Interfaces_Interface_Ethernet_State_Counters) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Ethernet_State_Counters.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Ethernet_State_Counters) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 2, 4, 0}
}

func (x *Interfaces_Interface_Ethernet_State_Counters) GetIn_8021QFrames() *ywrapper.UintValue {
	if x != nil {
		return x.In_8021QFrames
	}
	return nil
}

func (x *Interfaces_Interface_Ethernet_State_Counters) GetInBlockErrors() *ywrapper.UintValue {
	if x != nil {
		return x.InBlockErrors
	}
	return nil
}

func (x *Interfaces_Interface_Ethernet_State_Counters) GetInCrcErrors() *ywrapper.UintValue {
	if x != nil {
		return x.InCrcErrors
	}
	return nil
}

func (x *Interfaces_Interface_Ethernet_State_Counters) GetInDistribution() *Interfaces_Interface_Ethernet_State_Counters_InDistribution {
	if x != nil {
		return x.InDistribution
	}
	return nil
}

func (x *Interfaces_Interface_Ethernet_State_Counters) GetInFragmentFrames() *ywrapper.UintValue {
	if x != nil {
		return x.InFragmentFrames
	}
	return nil
}

func (x *Interfaces_Interface_Ethernet_State_Counters) GetInJabberFrames() *ywrapper.UintValue {
	if x != nil {
		return x.InJabberFrames
	}
	return nil
}

func (x *Interfaces_Interface_Ethernet_State_Counters) GetInMacControlFrames() *ywrapper.UintValue {
	if x != nil {
		return x.InMacControlFrames
	}
	return nil
}

func (x *Interfaces_Interface_Ethernet_State_Counters) GetInMacPauseFrames() *ywrapper.UintValue {
	if x != nil {
		return x.InMacPauseFrames
	}
	return nil
}

func (x *Interfaces_Interface_Ethernet_State_Counters) GetInOversizeFrames() *ywrapper.UintValue {
	if x != nil {
		return x.InOversizeFrames
	}
	return nil
}

func (x *Interfaces_Interface_Ethernet_State_Counters) GetInUndersizeFrames() *ywrapper.UintValue {
	if x != nil {
		return x.InUndersizeFrames
	}
	return nil
}

func (x *Interfaces_Interface_Ethernet_State_Counters) GetOut_8021QFrames() *ywrapper.UintValue {
	if x != nil {
		return x.Out_8021QFrames
	}
	return nil
}

func (x *Interfaces_Interface_Ethernet_State_Counters) GetOutMacControlFrames() *ywrapper.UintValue {
	if x != nil {
		return x.OutMacControlFrames
	}
	return nil
}

func (x *Interfaces_Interface_Ethernet_State_Counters) GetOutMacPauseFrames() *ywrapper.UintValue {
	if x != nil {
		return x.OutMacPauseFrames
	}
	return nil
}

type Interfaces_Interface_Ethernet_State_Counters_InDistribution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InFrames_1024_1518Octets *ywrapper.UintValue `protobuf:"bytes,474797139,opt,name=in_frames_1024_1518_octets,json=inFrames10241518Octets,proto3" json:"in_frames_1024_1518_octets,omitempty"`
	InFrames_128_255Octets   *ywrapper.UintValue `protobuf:"bytes,516846658,opt,name=in_frames_128_255_octets,json=inFrames128255Octets,proto3" json:"in_frames_128_255_octets,omitempty"`
	InFrames_256_511Octets   *ywrapper.UintValue `protobuf:"bytes,239361343,opt,name=in_frames_256_511_octets,json=inFrames256511Octets,proto3" json:"in_frames_256_511_octets,omitempty"`
	InFrames_512_1023Octets  *ywrapper.UintValue `protobuf:"bytes,316974637,opt,name=in_frames_512_1023_octets,json=inFrames5121023Octets,proto3" json:"in_frames_512_1023_octets,omitempty"`
	InFrames_64Octets        *ywrapper.UintValue `protobuf:"bytes,45513822,opt,name=in_frames_64_octets,json=inFrames64Octets,proto3" json:"in_frames_64_octets,omitempty"`
	InFrames_65_127Octets    *ywrapper.UintValue `protobuf:"bytes,219506908,opt,name=in_frames_65_127_octets,json=inFrames65127Octets,proto3" json:"in_frames_65_127_octets,omitempty"`
}

func (x *Interfaces_Interface_Ethernet_State_Counters_InDistribution) Reset() {
	*x = Interfaces_Interface_Ethernet_State_Counters_InDistribution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Ethernet_State_Counters_InDistribution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Ethernet_State_Counters_InDistribution) ProtoMessage() {}

func (x *Interfaces_Interface_Ethernet_State_Counters_InDistribution) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Ethernet_State_Counters_InDistribution.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Ethernet_State_Counters_InDistribution) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 2, 4, 0, 0}
}

func (x *Interfaces_Interface_Ethernet_State_Counters_InDistribution) GetInFrames_1024_1518Octets() *ywrapper.UintValue {
	if x != nil {
		return x.InFrames_1024_1518Octets
	}
	return nil
}

func (x *Interfaces_Interface_Ethernet_State_Counters_InDistribution) GetInFrames_128_255Octets() *ywrapper.UintValue {
	if x != nil {
		return x.InFrames_128_255Octets
	}
	return nil
}

func (x *Interfaces_Interface_Ethernet_State_Counters_InDistribution) GetInFrames_256_511Octets() *ywrapper.UintValue {
	if x != nil {
		return x.InFrames_256_511Octets
	}
	return nil
}

func (x *Interfaces_Interface_Ethernet_State_Counters_InDistribution) GetInFrames_512_1023Octets() *ywrapper.UintValue {
	if x != nil {
		return x.InFrames_512_1023Octets
	}
	return nil
}

func (x *Interfaces_Interface_Ethernet_State_Counters_InDistribution) GetInFrames_64Octets() *ywrapper.UintValue {
	if x != nil {
		return x.InFrames_64Octets
	}
	return nil
}

func (x *Interfaces_Interface_Ethernet_State_Counters_InDistribution) GetInFrames_65_127Octets() *ywrapper.UintValue {
	if x != nil {
		return x.InFrames_65_127Octets
	}
	return nil
}

type Interfaces_Interface_Ethernet_SwitchedVlan_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessVlan    *ywrapper.UintValue                                                  `protobuf:"bytes,297473650,opt,name=access_vlan,json=accessVlan,proto3" json:"access_vlan,omitempty"`
	InterfaceMode OpenconfigVlanVlanModeType                                           `protobuf:"varint,374657465,opt,name=interface_mode,json=interfaceMode,proto3,enum=openconfig.OpenconfigVlanVlanModeType" json:"interface_mode,omitempty"`
	NativeVlan    *ywrapper.UintValue                                                  `protobuf:"bytes,16702907,opt,name=native_vlan,json=nativeVlan,proto3" json:"native_vlan,omitempty"`
	TrunkVlans    []*Interfaces_Interface_Ethernet_SwitchedVlan_Config_TrunkVlansUnion `protobuf:"bytes,528974489,rep,name=trunk_vlans,json=trunkVlans,proto3" json:"trunk_vlans,omitempty"`
}

func (x *Interfaces_Interface_Ethernet_SwitchedVlan_Config) Reset() {
	*x = Interfaces_Interface_Ethernet_SwitchedVlan_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Ethernet_SwitchedVlan_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Ethernet_SwitchedVlan_Config) ProtoMessage() {}

func (x *Interfaces_Interface_Ethernet_SwitchedVlan_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Ethernet_SwitchedVlan_Config.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Ethernet_SwitchedVlan_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 2, 5, 0}
}

func (x *Interfaces_Interface_Ethernet_SwitchedVlan_Config) GetAccessVlan() *ywrapper.UintValue {
	if x != nil {
		return x.AccessVlan
	}
	return nil
}

func (x *Interfaces_Interface_Ethernet_SwitchedVlan_Config) GetInterfaceMode() OpenconfigVlanVlanModeType {
	if x != nil {
		return x.InterfaceMode
	}
	return OpenconfigVlanVlanModeType_OPENCONFIGVLANVLANMODETYPE_UNSET
}

func (x *Interfaces_Interface_Ethernet_SwitchedVlan_Config) GetNativeVlan() *ywrapper.UintValue {
	if x != nil {
		return x.NativeVlan
	}
	return nil
}

func (x *Interfaces_Interface_Ethernet_SwitchedVlan_Config) GetTrunkVlans() []*Interfaces_Interface_Ethernet_SwitchedVlan_Config_TrunkVlansUnion {
	if x != nil {
		return x.TrunkVlans
	}
	return nil
}

type Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VlanName []*Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanNameKey `protobuf:"bytes,357605776,rep,name=vlan_name,json=vlanName,proto3" json:"vlan_name,omitempty"`
}

func (x *Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap) Reset() {
	*x = Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap) ProtoMessage() {}

func (x *Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 2, 5, 1}
}

func (x *Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap) GetVlanName() []*Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanNameKey {
	if x != nil {
		return x.VlanName
	}
	return nil
}

type Interfaces_Interface_Ethernet_SwitchedVlan_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessVlan    *ywrapper.UintValue                                                 `protobuf:"bytes,411441949,opt,name=access_vlan,json=accessVlan,proto3" json:"access_vlan,omitempty"`
	InterfaceMode OpenconfigVlanVlanModeType                                          `protobuf:"varint,281584608,opt,name=interface_mode,json=interfaceMode,proto3,enum=openconfig.OpenconfigVlanVlanModeType" json:"interface_mode,omitempty"`
	NativeVlan    *ywrapper.UintValue                                                 `protobuf:"bytes,11580116,opt,name=native_vlan,json=nativeVlan,proto3" json:"native_vlan,omitempty"`
	TrunkVlans    []*Interfaces_Interface_Ethernet_SwitchedVlan_State_TrunkVlansUnion `protobuf:"bytes,125607278,rep,name=trunk_vlans,json=trunkVlans,proto3" json:"trunk_vlans,omitempty"`
}

func (x *Interfaces_Interface_Ethernet_SwitchedVlan_State) Reset() {
	*x = Interfaces_Interface_Ethernet_SwitchedVlan_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Ethernet_SwitchedVlan_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Ethernet_SwitchedVlan_State) ProtoMessage() {}

func (x *Interfaces_Interface_Ethernet_SwitchedVlan_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Ethernet_SwitchedVlan_State.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Ethernet_SwitchedVlan_State) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 2, 5, 2}
}

func (x *Interfaces_Interface_Ethernet_SwitchedVlan_State) GetAccessVlan() *ywrapper.UintValue {
	if x != nil {
		return x.AccessVlan
	}
	return nil
}

func (x *Interfaces_Interface_Ethernet_SwitchedVlan_State) GetInterfaceMode() OpenconfigVlanVlanModeType {
	if x != nil {
		return x.InterfaceMode
	}
	return OpenconfigVlanVlanModeType_OPENCONFIGVLANVLANMODETYPE_UNSET
}

func (x *Interfaces_Interface_Ethernet_SwitchedVlan_State) GetNativeVlan() *ywrapper.UintValue {
	if x != nil {
		return x.NativeVlan
	}
	return nil
}

func (x *Interfaces_Interface_Ethernet_SwitchedVlan_State) GetTrunkVlans() []*Interfaces_Interface_Ethernet_SwitchedVlan_State_TrunkVlansUnion {
	if x != nil {
		return x.TrunkVlans
	}
	return nil
}

type Interfaces_Interface_Ethernet_SwitchedVlan_Config_TrunkVlansUnion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrunkVlansString string `protobuf:"bytes,325293279,opt,name=trunk_vlans_string,json=trunkVlansString,proto3" json:"trunk_vlans_string,omitempty"`
	TrunkVlansUint64 uint64 `protobuf:"varint,461732658,opt,name=trunk_vlans_uint64,json=trunkVlansUint64,proto3" json:"trunk_vlans_uint64,omitempty"`
}

func (x *Interfaces_Interface_Ethernet_SwitchedVlan_Config_TrunkVlansUnion) Reset() {
	*x = Interfaces_Interface_Ethernet_SwitchedVlan_Config_TrunkVlansUnion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Ethernet_SwitchedVlan_Config_TrunkVlansUnion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Ethernet_SwitchedVlan_Config_TrunkVlansUnion) ProtoMessage() {}

func (x *Interfaces_Interface_Ethernet_SwitchedVlan_Config_TrunkVlansUnion) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Ethernet_SwitchedVlan_Config_TrunkVlansUnion.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Ethernet_SwitchedVlan_Config_TrunkVlansUnion) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 2, 5, 0, 0}
}

func (x *Interfaces_Interface_Ethernet_SwitchedVlan_Config_TrunkVlansUnion) GetTrunkVlansString() string {
	if x != nil {
		return x.TrunkVlansString
	}
	return ""
}

func (x *Interfaces_Interface_Ethernet_SwitchedVlan_Config_TrunkVlansUnion) GetTrunkVlansUint64() uint64 {
	if x != nil {
		return x.TrunkVlansUint64
	}
	return 0
}

type Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName_Config `protobuf:"bytes,157462949,opt,name=config,proto3" json:"config,omitempty"`
	State  *Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName_State  `protobuf:"bytes,108052250,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName) Reset() {
	*x = Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName) ProtoMessage() {}

func (x *Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 2, 5, 1, 0}
}

func (x *Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName) GetConfig() *Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName) GetState() *Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanNameKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VlanNameKey string                                                            `protobuf:"bytes,1,opt,name=vlan_name_key,json=vlanNameKey,proto3" json:"vlan_name_key,omitempty"`
	VlanName    *Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName `protobuf:"bytes,2,opt,name=vlan_name,json=vlanName,proto3" json:"vlan_name,omitempty"`
}

func (x *Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanNameKey) Reset() {
	*x = Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanNameKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanNameKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanNameKey) ProtoMessage() {}

func (x *Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanNameKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanNameKey.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanNameKey) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 2, 5, 1, 1}
}

func (x *Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanNameKey) GetVlanNameKey() string {
	if x != nil {
		return x.VlanNameKey
	}
	return ""
}

func (x *Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanNameKey) GetVlanName() *Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName {
	if x != nil {
		return x.VlanName
	}
	return nil
}

type Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       *ywrapper.UintValue   `protobuf:"bytes,15348223,opt,name=id,proto3" json:"id,omitempty"`
	VlanName *ywrapper.StringValue `protobuf:"bytes,303525985,opt,name=vlan_name,json=vlanName,proto3" json:"vlan_name,omitempty"`
}

func (x *Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName_Config) Reset() {
	*x = Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName_Config) ProtoMessage() {}

func (x *Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName_Config.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 2, 5, 1, 0, 0}
}

func (x *Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName_Config) GetId() *ywrapper.UintValue {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName_Config) GetVlanName() *ywrapper.StringValue {
	if x != nil {
		return x.VlanName
	}
	return nil
}

type Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       *ywrapper.UintValue   `protobuf:"bytes,244547242,opt,name=id,proto3" json:"id,omitempty"`
	VlanName *ywrapper.StringValue `protobuf:"bytes,449206986,opt,name=vlan_name,json=vlanName,proto3" json:"vlan_name,omitempty"`
}

func (x *Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName_State) Reset() {
	*x = Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName_State) ProtoMessage() {}

func (x *Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName_State.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName_State) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 2, 5, 1, 0, 1}
}

func (x *Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName_State) GetId() *ywrapper.UintValue {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName_State) GetVlanName() *ywrapper.StringValue {
	if x != nil {
		return x.VlanName
	}
	return nil
}

type Interfaces_Interface_Ethernet_SwitchedVlan_State_TrunkVlansUnion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrunkVlansString string `protobuf:"bytes,241096862,opt,name=trunk_vlans_string,json=trunkVlansString,proto3" json:"trunk_vlans_string,omitempty"`
	TrunkVlansUint64 uint64 `protobuf:"varint,463874495,opt,name=trunk_vlans_uint64,json=trunkVlansUint64,proto3" json:"trunk_vlans_uint64,omitempty"`
}

func (x *Interfaces_Interface_Ethernet_SwitchedVlan_State_TrunkVlansUnion) Reset() {
	*x = Interfaces_Interface_Ethernet_SwitchedVlan_State_TrunkVlansUnion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Ethernet_SwitchedVlan_State_TrunkVlansUnion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Ethernet_SwitchedVlan_State_TrunkVlansUnion) ProtoMessage() {}

func (x *Interfaces_Interface_Ethernet_SwitchedVlan_State_TrunkVlansUnion) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Ethernet_SwitchedVlan_State_TrunkVlansUnion.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Ethernet_SwitchedVlan_State_TrunkVlansUnion) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 2, 5, 2, 0}
}

func (x *Interfaces_Interface_Ethernet_SwitchedVlan_State_TrunkVlansUnion) GetTrunkVlansString() string {
	if x != nil {
		return x.TrunkVlansString
	}
	return ""
}

func (x *Interfaces_Interface_Ethernet_SwitchedVlan_State_TrunkVlansUnion) GetTrunkVlansUint64() uint64 {
	if x != nil {
		return x.TrunkVlansUint64
	}
	return 0
}

type Interfaces_Interface_HoldTime_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Down *ywrapper.UintValue `protobuf:"bytes,171181656,opt,name=down,proto3" json:"down,omitempty"`
	Up   *ywrapper.UintValue `protobuf:"bytes,62026235,opt,name=up,proto3" json:"up,omitempty"`
}

func (x *Interfaces_Interface_HoldTime_Config) Reset() {
	*x = Interfaces_Interface_HoldTime_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_HoldTime_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_HoldTime_Config) ProtoMessage() {}

func (x *Interfaces_Interface_HoldTime_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_HoldTime_Config.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_HoldTime_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 3, 0}
}

func (x *Interfaces_Interface_HoldTime_Config) GetDown() *ywrapper.UintValue {
	if x != nil {
		return x.Down
	}
	return nil
}

func (x *Interfaces_Interface_HoldTime_Config) GetUp() *ywrapper.UintValue {
	if x != nil {
		return x.Up
	}
	return nil
}

type Interfaces_Interface_HoldTime_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Down *ywrapper.UintValue `protobuf:"bytes,167887721,opt,name=down,proto3" json:"down,omitempty"`
	Up   *ywrapper.UintValue `protobuf:"bytes,223847598,opt,name=up,proto3" json:"up,omitempty"`
}

func (x *Interfaces_Interface_HoldTime_State) Reset() {
	*x = Interfaces_Interface_HoldTime_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_HoldTime_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_HoldTime_State) ProtoMessage() {}

func (x *Interfaces_Interface_HoldTime_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_HoldTime_State.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_HoldTime_State) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 3, 1}
}

func (x *Interfaces_Interface_HoldTime_State) GetDown() *ywrapper.UintValue {
	if x != nil {
		return x.Down
	}
	return nil
}

func (x *Interfaces_Interface_HoldTime_State) GetUp() *ywrapper.UintValue {
	if x != nil {
		return x.Up
	}
	return nil
}

type Interfaces_Interface_RoutedVlan_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Vlan:
	//	*Interfaces_Interface_RoutedVlan_Config_VlanString
	//	*Interfaces_Interface_RoutedVlan_Config_VlanUint64
	Vlan isInterfaces_Interface_RoutedVlan_Config_Vlan `protobuf_oneof:"vlan"`
}

func (x *Interfaces_Interface_RoutedVlan_Config) Reset() {
	*x = Interfaces_Interface_RoutedVlan_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_RoutedVlan_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_RoutedVlan_Config) ProtoMessage() {}

func (x *Interfaces_Interface_RoutedVlan_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_RoutedVlan_Config.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_RoutedVlan_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 4, 0}
}

func (m *Interfaces_Interface_RoutedVlan_Config) GetVlan() isInterfaces_Interface_RoutedVlan_Config_Vlan {
	if m != nil {
		return m.Vlan
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Config) GetVlanString() string {
	if x, ok := x.GetVlan().(*Interfaces_Interface_RoutedVlan_Config_VlanString); ok {
		return x.VlanString
	}
	return ""
}

func (x *Interfaces_Interface_RoutedVlan_Config) GetVlanUint64() uint64 {
	if x, ok := x.GetVlan().(*Interfaces_Interface_RoutedVlan_Config_VlanUint64); ok {
		return x.VlanUint64
	}
	return 0
}

type isInterfaces_Interface_RoutedVlan_Config_Vlan interface {
	isInterfaces_Interface_RoutedVlan_Config_Vlan()
}

type Interfaces_Interface_RoutedVlan_Config_VlanString struct {
	VlanString string `protobuf:"bytes,459932191,opt,name=vlan_string,json=vlanString,proto3,oneof"`
}

type Interfaces_Interface_RoutedVlan_Config_VlanUint64 struct {
	VlanUint64 uint64 `protobuf:"varint,59552370,opt,name=vlan_uint64,json=vlanUint64,proto3,oneof"`
}

func (*Interfaces_Interface_RoutedVlan_Config_VlanString) isInterfaces_Interface_RoutedVlan_Config_Vlan() {
}

func (*Interfaces_Interface_RoutedVlan_Config_VlanUint64) isInterfaces_Interface_RoutedVlan_Config_Vlan() {
}

type Interfaces_Interface_RoutedVlan_Ipv4 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addresses  *Interfaces_Interface_RoutedVlan_Ipv4_Addresses  `protobuf:"bytes,447923213,opt,name=addresses,proto3" json:"addresses,omitempty"`
	Config     *Interfaces_Interface_RoutedVlan_Ipv4_Config     `protobuf:"bytes,496069313,opt,name=config,proto3" json:"config,omitempty"`
	Neighbors  *Interfaces_Interface_RoutedVlan_Ipv4_Neighbors  `protobuf:"bytes,140428548,opt,name=neighbors,proto3" json:"neighbors,omitempty"`
	ProxyArp   *Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp   `protobuf:"bytes,30863325,opt,name=proxy_arp,json=proxyArp,proto3" json:"proxy_arp,omitempty"`
	State      *Interfaces_Interface_RoutedVlan_Ipv4_State      `protobuf:"bytes,163728950,opt,name=state,proto3" json:"state,omitempty"`
	Unnumbered *Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered `protobuf:"bytes,494263654,opt,name=unnumbered,proto3" json:"unnumbered,omitempty"`
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4) Reset() {
	*x = Interfaces_Interface_RoutedVlan_Ipv4{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_RoutedVlan_Ipv4) ProtoMessage() {}

func (x *Interfaces_Interface_RoutedVlan_Ipv4) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_RoutedVlan_Ipv4.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_RoutedVlan_Ipv4) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 4, 1}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4) GetAddresses() *Interfaces_Interface_RoutedVlan_Ipv4_Addresses {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4) GetConfig() *Interfaces_Interface_RoutedVlan_Ipv4_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4) GetNeighbors() *Interfaces_Interface_RoutedVlan_Ipv4_Neighbors {
	if x != nil {
		return x.Neighbors
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4) GetProxyArp() *Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp {
	if x != nil {
		return x.ProxyArp
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4) GetState() *Interfaces_Interface_RoutedVlan_Ipv4_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4) GetUnnumbered() *Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered {
	if x != nil {
		return x.Unnumbered
	}
	return nil
}

type Interfaces_Interface_RoutedVlan_Ipv6 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addresses           *Interfaces_Interface_RoutedVlan_Ipv6_Addresses           `protobuf:"bytes,535795323,opt,name=addresses,proto3" json:"addresses,omitempty"`
	Config              *Interfaces_Interface_RoutedVlan_Ipv6_Config              `protobuf:"bytes,113822719,opt,name=config,proto3" json:"config,omitempty"`
	Neighbors           *Interfaces_Interface_RoutedVlan_Ipv6_Neighbors           `protobuf:"bytes,387963626,opt,name=neighbors,proto3" json:"neighbors,omitempty"`
	RouterAdvertisement *Interfaces_Interface_RoutedVlan_Ipv6_RouterAdvertisement `protobuf:"bytes,75504594,opt,name=router_advertisement,json=routerAdvertisement,proto3" json:"router_advertisement,omitempty"`
	State               *Interfaces_Interface_RoutedVlan_Ipv6_State               `protobuf:"bytes,215970096,opt,name=state,proto3" json:"state,omitempty"`
	Unnumbered          *Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered          `protobuf:"bytes,530580104,opt,name=unnumbered,proto3" json:"unnumbered,omitempty"`
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6) Reset() {
	*x = Interfaces_Interface_RoutedVlan_Ipv6{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_RoutedVlan_Ipv6) ProtoMessage() {}

func (x *Interfaces_Interface_RoutedVlan_Ipv6) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_RoutedVlan_Ipv6.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_RoutedVlan_Ipv6) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 4, 2}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6) GetAddresses() *Interfaces_Interface_RoutedVlan_Ipv6_Addresses {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6) GetConfig() *Interfaces_Interface_RoutedVlan_Ipv6_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6) GetNeighbors() *Interfaces_Interface_RoutedVlan_Ipv6_Neighbors {
	if x != nil {
		return x.Neighbors
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6) GetRouterAdvertisement() *Interfaces_Interface_RoutedVlan_Ipv6_RouterAdvertisement {
	if x != nil {
		return x.RouterAdvertisement
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6) GetState() *Interfaces_Interface_RoutedVlan_Ipv6_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6) GetUnnumbered() *Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered {
	if x != nil {
		return x.Unnumbered
	}
	return nil
}

type Interfaces_Interface_RoutedVlan_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Vlan:
	//	*Interfaces_Interface_RoutedVlan_State_VlanString
	//	*Interfaces_Interface_RoutedVlan_State_VlanUint64
	Vlan isInterfaces_Interface_RoutedVlan_State_Vlan `protobuf_oneof:"vlan"`
}

func (x *Interfaces_Interface_RoutedVlan_State) Reset() {
	*x = Interfaces_Interface_RoutedVlan_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_RoutedVlan_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_RoutedVlan_State) ProtoMessage() {}

func (x *Interfaces_Interface_RoutedVlan_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_RoutedVlan_State.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_RoutedVlan_State) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 4, 3}
}

func (m *Interfaces_Interface_RoutedVlan_State) GetVlan() isInterfaces_Interface_RoutedVlan_State_Vlan {
	if m != nil {
		return m.Vlan
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_State) GetVlanString() string {
	if x, ok := x.GetVlan().(*Interfaces_Interface_RoutedVlan_State_VlanString); ok {
		return x.VlanString
	}
	return ""
}

func (x *Interfaces_Interface_RoutedVlan_State) GetVlanUint64() uint64 {
	if x, ok := x.GetVlan().(*Interfaces_Interface_RoutedVlan_State_VlanUint64); ok {
		return x.VlanUint64
	}
	return 0
}

type isInterfaces_Interface_RoutedVlan_State_Vlan interface {
	isInterfaces_Interface_RoutedVlan_State_Vlan()
}

type Interfaces_Interface_RoutedVlan_State_VlanString struct {
	VlanString string `protobuf:"bytes,145686476,opt,name=vlan_string,json=vlanString,proto3,oneof"`
}

type Interfaces_Interface_RoutedVlan_State_VlanUint64 struct {
	VlanUint64 uint64 `protobuf:"varint,145640661,opt,name=vlan_uint64,json=vlanUint64,proto3,oneof"`
}

func (*Interfaces_Interface_RoutedVlan_State_VlanString) isInterfaces_Interface_RoutedVlan_State_Vlan() {
}

func (*Interfaces_Interface_RoutedVlan_State_VlanUint64) isInterfaces_Interface_RoutedVlan_State_Vlan() {
}

type Interfaces_Interface_RoutedVlan_Ipv4_Addresses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address []*Interfaces_Interface_RoutedVlan_Ipv4_Addresses_AddressKey `protobuf:"bytes,491252712,rep,name=address,proto3" json:"address,omitempty"`
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses) Reset() {
	*x = Interfaces_Interface_RoutedVlan_Ipv4_Addresses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_RoutedVlan_Ipv4_Addresses) ProtoMessage() {}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_RoutedVlan_Ipv4_Addresses.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_RoutedVlan_Ipv4_Addresses) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 4, 1, 0}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses) GetAddress() []*Interfaces_Interface_RoutedVlan_Ipv4_Addresses_AddressKey {
	if x != nil {
		return x.Address
	}
	return nil
}

type Interfaces_Interface_RoutedVlan_Ipv4_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DhcpClient *ywrapper.BoolValue `protobuf:"bytes,66717571,opt,name=dhcp_client,json=dhcpClient,proto3" json:"dhcp_client,omitempty"`
	Enabled    *ywrapper.BoolValue `protobuf:"bytes,421586295,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Mtu        *ywrapper.UintValue `protobuf:"bytes,241730120,opt,name=mtu,proto3" json:"mtu,omitempty"`
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Config) Reset() {
	*x = Interfaces_Interface_RoutedVlan_Ipv4_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_RoutedVlan_Ipv4_Config) ProtoMessage() {}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_RoutedVlan_Ipv4_Config.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_RoutedVlan_Ipv4_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 4, 1, 1}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Config) GetDhcpClient() *ywrapper.BoolValue {
	if x != nil {
		return x.DhcpClient
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Config) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Config) GetMtu() *ywrapper.UintValue {
	if x != nil {
		return x.Mtu
	}
	return nil
}

type Interfaces_Interface_RoutedVlan_Ipv4_Neighbors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Neighbor []*Interfaces_Interface_RoutedVlan_Ipv4_Neighbors_NeighborKey `protobuf:"bytes,49515461,rep,name=neighbor,proto3" json:"neighbor,omitempty"`
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Neighbors) Reset() {
	*x = Interfaces_Interface_RoutedVlan_Ipv4_Neighbors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Neighbors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_RoutedVlan_Ipv4_Neighbors) ProtoMessage() {}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Neighbors) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_RoutedVlan_Ipv4_Neighbors.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_RoutedVlan_Ipv4_Neighbors) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 4, 1, 2}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Neighbors) GetNeighbor() []*Interfaces_Interface_RoutedVlan_Ipv4_Neighbors_NeighborKey {
	if x != nil {
		return x.Neighbor
	}
	return nil
}

type Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp_Config `protobuf:"bytes,264589842,opt,name=config,proto3" json:"config,omitempty"`
	State  *Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp_State  `protobuf:"bytes,247917455,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp) Reset() {
	*x = Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp) ProtoMessage() {}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 4, 1, 3}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp) GetConfig() *Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp) GetState() *Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Interfaces_Interface_RoutedVlan_Ipv4_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Counters   *Interfaces_Interface_RoutedVlan_Ipv4_State_Counters `protobuf:"bytes,108922474,opt,name=counters,proto3" json:"counters,omitempty"`
	DhcpClient *ywrapper.BoolValue                                  `protobuf:"bytes,65314440,opt,name=dhcp_client,json=dhcpClient,proto3" json:"dhcp_client,omitempty"`
	Enabled    *ywrapper.BoolValue                                  `protobuf:"bytes,464366500,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Mtu        *ywrapper.UintValue                                  `protobuf:"bytes,384211899,opt,name=mtu,proto3" json:"mtu,omitempty"`
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_State) Reset() {
	*x = Interfaces_Interface_RoutedVlan_Ipv4_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_RoutedVlan_Ipv4_State) ProtoMessage() {}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_RoutedVlan_Ipv4_State.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_RoutedVlan_Ipv4_State) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 4, 1, 4}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_State) GetCounters() *Interfaces_Interface_RoutedVlan_Ipv4_State_Counters {
	if x != nil {
		return x.Counters
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_State) GetDhcpClient() *ywrapper.BoolValue {
	if x != nil {
		return x.DhcpClient
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_State) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_State) GetMtu() *ywrapper.UintValue {
	if x != nil {
		return x.Mtu
	}
	return nil
}

type Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config       *Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered_Config       `protobuf:"bytes,220469095,opt,name=config,proto3" json:"config,omitempty"`
	InterfaceRef *Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef `protobuf:"bytes,433795586,opt,name=interface_ref,json=interfaceRef,proto3" json:"interface_ref,omitempty"`
	State        *Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered_State        `protobuf:"bytes,316616792,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered) Reset() {
	*x = Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered) ProtoMessage() {}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 4, 1, 5}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered) GetConfig() *Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered) GetInterfaceRef() *Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef {
	if x != nil {
		return x.InterfaceRef
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered) GetState() *Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Config `protobuf:"bytes,303987021,opt,name=config,proto3" json:"config,omitempty"`
	State  *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_State  `protobuf:"bytes,256989058,opt,name=state,proto3" json:"state,omitempty"`
	Vrrp   *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp   `protobuf:"bytes,208065897,opt,name=vrrp,proto3" json:"vrrp,omitempty"`
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address) Reset() {
	*x = Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address) ProtoMessage() {}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 4, 1, 0, 0}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address) GetConfig() *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address) GetState() *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address) GetVrrp() *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp {
	if x != nil {
		return x.Vrrp
	}
	return nil
}

type Interfaces_Interface_RoutedVlan_Ipv4_Addresses_AddressKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip      string                                                  `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Address *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_AddressKey) Reset() {
	*x = Interfaces_Interface_RoutedVlan_Ipv4_Addresses_AddressKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_AddressKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_RoutedVlan_Ipv4_Addresses_AddressKey) ProtoMessage() {}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_AddressKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_RoutedVlan_Ipv4_Addresses_AddressKey.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_RoutedVlan_Ipv4_Addresses_AddressKey) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 4, 1, 0, 1}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_AddressKey) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_AddressKey) GetAddress() *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address {
	if x != nil {
		return x.Address
	}
	return nil
}

type Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip           *ywrapper.StringValue `protobuf:"bytes,496979971,opt,name=ip,proto3" json:"ip,omitempty"`
	PrefixLength *ywrapper.UintValue   `protobuf:"bytes,319746417,opt,name=prefix_length,json=prefixLength,proto3" json:"prefix_length,omitempty"`
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Config) Reset() {
	*x = Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Config) ProtoMessage() {}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Config.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 4, 1, 0, 0, 0}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Config) GetIp() *ywrapper.StringValue {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Config) GetPrefixLength() *ywrapper.UintValue {
	if x != nil {
		return x.PrefixLength
	}
	return nil
}

type Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip           *ywrapper.StringValue         `protobuf:"bytes,8965910,opt,name=ip,proto3" json:"ip,omitempty"`
	Origin       OpenconfigIfIpIpAddressOrigin `protobuf:"varint,474065239,opt,name=origin,proto3,enum=openconfig.OpenconfigIfIpIpAddressOrigin" json:"origin,omitempty"`
	PrefixLength *ywrapper.UintValue           `protobuf:"bytes,124939542,opt,name=prefix_length,json=prefixLength,proto3" json:"prefix_length,omitempty"`
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_State) Reset() {
	*x = Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_State) ProtoMessage() {}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_State.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_State) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 4, 1, 0, 0, 1}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_State) GetIp() *ywrapper.StringValue {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_State) GetOrigin() OpenconfigIfIpIpAddressOrigin {
	if x != nil {
		return x.Origin
	}
	return OpenconfigIfIpIpAddressOrigin_OPENCONFIGIFIPIPADDRESSORIGIN_UNSET
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_State) GetPrefixLength() *ywrapper.UintValue {
	if x != nil {
		return x.PrefixLength
	}
	return nil
}

type Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VrrpGroup []*Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroupKey `protobuf:"bytes,517951704,rep,name=vrrp_group,json=vrrpGroup,proto3" json:"vrrp_group,omitempty"`
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp) Reset() {
	*x = Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp) ProtoMessage() {}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 4, 1, 0, 0, 2}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp) GetVrrpGroup() []*Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroupKey {
	if x != nil {
		return x.VrrpGroup
	}
	return nil
}

type Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config            *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_Config            `protobuf:"bytes,35170909,opt,name=config,proto3" json:"config,omitempty"`
	InterfaceTracking *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking `protobuf:"bytes,27491390,opt,name=interface_tracking,json=interfaceTracking,proto3" json:"interface_tracking,omitempty"`
	State             *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_State             `protobuf:"bytes,108618322,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup) Reset() {
	*x = Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup) ProtoMessage() {}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 4, 1, 0, 0, 2, 0}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup) GetConfig() *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup) GetInterfaceTracking() *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking {
	if x != nil {
		return x.InterfaceTracking
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup) GetState() *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroupKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VirtualRouterId uint64                                                                 `protobuf:"varint,1,opt,name=virtual_router_id,json=virtualRouterId,proto3" json:"virtual_router_id,omitempty"`
	VrrpGroup       *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup `protobuf:"bytes,2,opt,name=vrrp_group,json=vrrpGroup,proto3" json:"vrrp_group,omitempty"`
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroupKey) Reset() {
	*x = Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroupKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroupKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroupKey) ProtoMessage() {}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroupKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroupKey.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroupKey) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 4, 1, 0, 0, 2, 1}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroupKey) GetVirtualRouterId() uint64 {
	if x != nil {
		return x.VirtualRouterId
	}
	return 0
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroupKey) GetVrrpGroup() *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup {
	if x != nil {
		return x.VrrpGroup
	}
	return nil
}

type Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AcceptMode            *ywrapper.BoolValue     `protobuf:"bytes,14046336,opt,name=accept_mode,json=acceptMode,proto3" json:"accept_mode,omitempty"`
	AdvertisementInterval *ywrapper.UintValue     `protobuf:"bytes,355068623,opt,name=advertisement_interval,json=advertisementInterval,proto3" json:"advertisement_interval,omitempty"`
	Preempt               *ywrapper.BoolValue     `protobuf:"bytes,56784621,opt,name=preempt,proto3" json:"preempt,omitempty"`
	PreemptDelay          *ywrapper.UintValue     `protobuf:"bytes,404202907,opt,name=preempt_delay,json=preemptDelay,proto3" json:"preempt_delay,omitempty"`
	Priority              *ywrapper.UintValue     `protobuf:"bytes,475345840,opt,name=priority,proto3" json:"priority,omitempty"`
	VirtualAddress        []*ywrapper.StringValue `protobuf:"bytes,495492198,rep,name=virtual_address,json=virtualAddress,proto3" json:"virtual_address,omitempty"`
	VirtualRouterId       *ywrapper.UintValue     `protobuf:"bytes,367247685,opt,name=virtual_router_id,json=virtualRouterId,proto3" json:"virtual_router_id,omitempty"`
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_Config) Reset() {
	*x = Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_Config) ProtoMessage() {}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_Config.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 4, 1, 0, 0, 2, 0, 0}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_Config) GetAcceptMode() *ywrapper.BoolValue {
	if x != nil {
		return x.AcceptMode
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_Config) GetAdvertisementInterval() *ywrapper.UintValue {
	if x != nil {
		return x.AdvertisementInterval
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_Config) GetPreempt() *ywrapper.BoolValue {
	if x != nil {
		return x.Preempt
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_Config) GetPreemptDelay() *ywrapper.UintValue {
	if x != nil {
		return x.PreemptDelay
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_Config) GetPriority() *ywrapper.UintValue {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_Config) GetVirtualAddress() []*ywrapper.StringValue {
	if x != nil {
		return x.VirtualAddress
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_Config) GetVirtualRouterId() *ywrapper.UintValue {
	if x != nil {
		return x.VirtualRouterId
	}
	return nil
}

type Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_Config `protobuf:"bytes,244838799,opt,name=config,proto3" json:"config,omitempty"`
	State  *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_State  `protobuf:"bytes,429163904,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking) Reset() {
	*x = Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking) ProtoMessage() {
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 4, 1, 0, 0, 2, 0, 1}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking) GetConfig() *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking) GetState() *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AcceptMode            *ywrapper.BoolValue     `protobuf:"bytes,366738607,opt,name=accept_mode,json=acceptMode,proto3" json:"accept_mode,omitempty"`
	AdvertisementInterval *ywrapper.UintValue     `protobuf:"bytes,236995170,opt,name=advertisement_interval,json=advertisementInterval,proto3" json:"advertisement_interval,omitempty"`
	CurrentPriority       *ywrapper.UintValue     `protobuf:"bytes,415387713,opt,name=current_priority,json=currentPriority,proto3" json:"current_priority,omitempty"`
	Preempt               *ywrapper.BoolValue     `protobuf:"bytes,73746714,opt,name=preempt,proto3" json:"preempt,omitempty"`
	PreemptDelay          *ywrapper.UintValue     `protobuf:"bytes,169842676,opt,name=preempt_delay,json=preemptDelay,proto3" json:"preempt_delay,omitempty"`
	Priority              *ywrapper.UintValue     `protobuf:"bytes,48887537,opt,name=priority,proto3" json:"priority,omitempty"`
	VirtualAddress        []*ywrapper.StringValue `protobuf:"bytes,248823693,rep,name=virtual_address,json=virtualAddress,proto3" json:"virtual_address,omitempty"`
	VirtualRouterId       *ywrapper.UintValue     `protobuf:"bytes,99298198,opt,name=virtual_router_id,json=virtualRouterId,proto3" json:"virtual_router_id,omitempty"`
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_State) Reset() {
	*x = Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_State) ProtoMessage() {}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_State.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_State) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 4, 1, 0, 0, 2, 0, 2}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_State) GetAcceptMode() *ywrapper.BoolValue {
	if x != nil {
		return x.AcceptMode
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_State) GetAdvertisementInterval() *ywrapper.UintValue {
	if x != nil {
		return x.AdvertisementInterval
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_State) GetCurrentPriority() *ywrapper.UintValue {
	if x != nil {
		return x.CurrentPriority
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_State) GetPreempt() *ywrapper.BoolValue {
	if x != nil {
		return x.Preempt
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_State) GetPreemptDelay() *ywrapper.UintValue {
	if x != nil {
		return x.PreemptDelay
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_State) GetPriority() *ywrapper.UintValue {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_State) GetVirtualAddress() []*ywrapper.StringValue {
	if x != nil {
		return x.VirtualAddress
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_State) GetVirtualRouterId() *ywrapper.UintValue {
	if x != nil {
		return x.VirtualRouterId
	}
	return nil
}

type Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PriorityDecrement *ywrapper.UintValue     `protobuf:"bytes,269461494,opt,name=priority_decrement,json=priorityDecrement,proto3" json:"priority_decrement,omitempty"`
	TrackInterface    []*ywrapper.StringValue `protobuf:"bytes,109384073,rep,name=track_interface,json=trackInterface,proto3" json:"track_interface,omitempty"`
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_Config) Reset() {
	*x = Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_Config) ProtoMessage() {
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_Config.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 4, 1, 0, 0, 2, 0, 1, 0}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_Config) GetPriorityDecrement() *ywrapper.UintValue {
	if x != nil {
		return x.PriorityDecrement
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_Config) GetTrackInterface() []*ywrapper.StringValue {
	if x != nil {
		return x.TrackInterface
	}
	return nil
}

type Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PriorityDecrement *ywrapper.UintValue     `protobuf:"bytes,177964047,opt,name=priority_decrement,json=priorityDecrement,proto3" json:"priority_decrement,omitempty"`
	TrackInterface    []*ywrapper.StringValue `protobuf:"bytes,143814046,rep,name=track_interface,json=trackInterface,proto3" json:"track_interface,omitempty"`
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_State) Reset() {
	*x = Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_State) ProtoMessage() {
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_State.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_State) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 4, 1, 0, 0, 2, 0, 1, 1}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_State) GetPriorityDecrement() *ywrapper.UintValue {
	if x != nil {
		return x.PriorityDecrement
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_State) GetTrackInterface() []*ywrapper.StringValue {
	if x != nil {
		return x.TrackInterface
	}
	return nil
}

type Interfaces_Interface_RoutedVlan_Ipv4_Neighbors_Neighbor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Interfaces_Interface_RoutedVlan_Ipv4_Neighbors_Neighbor_Config `protobuf:"bytes,347615626,opt,name=config,proto3" json:"config,omitempty"`
	State  *Interfaces_Interface_RoutedVlan_Ipv4_Neighbors_Neighbor_State  `protobuf:"bytes,480467495,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Neighbors_Neighbor) Reset() {
	*x = Interfaces_Interface_RoutedVlan_Ipv4_Neighbors_Neighbor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Neighbors_Neighbor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_RoutedVlan_Ipv4_Neighbors_Neighbor) ProtoMessage() {}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Neighbors_Neighbor) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_RoutedVlan_Ipv4_Neighbors_Neighbor.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_RoutedVlan_Ipv4_Neighbors_Neighbor) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 4, 1, 2, 0}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Neighbors_Neighbor) GetConfig() *Interfaces_Interface_RoutedVlan_Ipv4_Neighbors_Neighbor_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Neighbors_Neighbor) GetState() *Interfaces_Interface_RoutedVlan_Ipv4_Neighbors_Neighbor_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Interfaces_Interface_RoutedVlan_Ipv4_Neighbors_NeighborKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip       string                                                   `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Neighbor *Interfaces_Interface_RoutedVlan_Ipv4_Neighbors_Neighbor `protobuf:"bytes,2,opt,name=neighbor,proto3" json:"neighbor,omitempty"`
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Neighbors_NeighborKey) Reset() {
	*x = Interfaces_Interface_RoutedVlan_Ipv4_Neighbors_NeighborKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Neighbors_NeighborKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_RoutedVlan_Ipv4_Neighbors_NeighborKey) ProtoMessage() {}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Neighbors_NeighborKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_RoutedVlan_Ipv4_Neighbors_NeighborKey.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_RoutedVlan_Ipv4_Neighbors_NeighborKey) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 4, 1, 2, 1}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Neighbors_NeighborKey) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Neighbors_NeighborKey) GetNeighbor() *Interfaces_Interface_RoutedVlan_Ipv4_Neighbors_Neighbor {
	if x != nil {
		return x.Neighbor
	}
	return nil
}

type Interfaces_Interface_RoutedVlan_Ipv4_Neighbors_Neighbor_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip               *ywrapper.StringValue `protobuf:"bytes,52844014,opt,name=ip,proto3" json:"ip,omitempty"`
	LinkLayerAddress *ywrapper.StringValue `protobuf:"bytes,122384166,opt,name=link_layer_address,json=linkLayerAddress,proto3" json:"link_layer_address,omitempty"`
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Neighbors_Neighbor_Config) Reset() {
	*x = Interfaces_Interface_RoutedVlan_Ipv4_Neighbors_Neighbor_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Neighbors_Neighbor_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_RoutedVlan_Ipv4_Neighbors_Neighbor_Config) ProtoMessage() {}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Neighbors_Neighbor_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_RoutedVlan_Ipv4_Neighbors_Neighbor_Config.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_RoutedVlan_Ipv4_Neighbors_Neighbor_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 4, 1, 2, 0, 0}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Neighbors_Neighbor_Config) GetIp() *ywrapper.StringValue {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Neighbors_Neighbor_Config) GetLinkLayerAddress() *ywrapper.StringValue {
	if x != nil {
		return x.LinkLayerAddress
	}
	return nil
}

type Interfaces_Interface_RoutedVlan_Ipv4_Neighbors_Neighbor_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip               *ywrapper.StringValue        `protobuf:"bytes,61547333,opt,name=ip,proto3" json:"ip,omitempty"`
	LinkLayerAddress *ywrapper.StringValue        `protobuf:"bytes,116012497,opt,name=link_layer_address,json=linkLayerAddress,proto3" json:"link_layer_address,omitempty"`
	Origin           OpenconfigIfIpNeighborOrigin `protobuf:"varint,457574488,opt,name=origin,proto3,enum=openconfig.OpenconfigIfIpNeighborOrigin" json:"origin,omitempty"`
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Neighbors_Neighbor_State) Reset() {
	*x = Interfaces_Interface_RoutedVlan_Ipv4_Neighbors_Neighbor_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Neighbors_Neighbor_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_RoutedVlan_Ipv4_Neighbors_Neighbor_State) ProtoMessage() {}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Neighbors_Neighbor_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_RoutedVlan_Ipv4_Neighbors_Neighbor_State.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_RoutedVlan_Ipv4_Neighbors_Neighbor_State) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 4, 1, 2, 0, 1}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Neighbors_Neighbor_State) GetIp() *ywrapper.StringValue {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Neighbors_Neighbor_State) GetLinkLayerAddress() *ywrapper.StringValue {
	if x != nil {
		return x.LinkLayerAddress
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Neighbors_Neighbor_State) GetOrigin() OpenconfigIfIpNeighborOrigin {
	if x != nil {
		return x.Origin
	}
	return OpenconfigIfIpNeighborOrigin_OPENCONFIGIFIPNEIGHBORORIGIN_UNSET
}

type Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp_Config_Mode `protobuf:"varint,373366860,opt,name=mode,proto3,enum=openconfig.Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp_Config_Mode" json:"mode,omitempty"`
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp_Config) Reset() {
	*x = Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp_Config) ProtoMessage() {}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp_Config.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 4, 1, 3, 0}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp_Config) GetMode() Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp_Config_Mode {
	if x != nil {
		return x.Mode
	}
	return Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp_Config_MODE_DISABLE
}

type Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp_State_Mode `protobuf:"varint,233604847,opt,name=mode,proto3,enum=openconfig.Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp_State_Mode" json:"mode,omitempty"`
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp_State) Reset() {
	*x = Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp_State) ProtoMessage() {}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp_State.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp_State) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 4, 1, 3, 1}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp_State) GetMode() Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp_State_Mode {
	if x != nil {
		return x.Mode
	}
	return Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp_State_MODE_DISABLE
}

type Interfaces_Interface_RoutedVlan_Ipv4_State_Counters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InDiscardedPkts    *ywrapper.UintValue `protobuf:"bytes,458022187,opt,name=in_discarded_pkts,json=inDiscardedPkts,proto3" json:"in_discarded_pkts,omitempty"`
	InErrorPkts        *ywrapper.UintValue `protobuf:"bytes,83701670,opt,name=in_error_pkts,json=inErrorPkts,proto3" json:"in_error_pkts,omitempty"`
	InForwardedOctets  *ywrapper.UintValue `protobuf:"bytes,8098512,opt,name=in_forwarded_octets,json=inForwardedOctets,proto3" json:"in_forwarded_octets,omitempty"`
	InForwardedPkts    *ywrapper.UintValue `protobuf:"bytes,516706228,opt,name=in_forwarded_pkts,json=inForwardedPkts,proto3" json:"in_forwarded_pkts,omitempty"`
	InOctets           *ywrapper.UintValue `protobuf:"bytes,114257965,opt,name=in_octets,json=inOctets,proto3" json:"in_octets,omitempty"`
	InPkts             *ywrapper.UintValue `protobuf:"bytes,436478457,opt,name=in_pkts,json=inPkts,proto3" json:"in_pkts,omitempty"`
	OutDiscardedPkts   *ywrapper.UintValue `protobuf:"bytes,240977330,opt,name=out_discarded_pkts,json=outDiscardedPkts,proto3" json:"out_discarded_pkts,omitempty"`
	OutErrorPkts       *ywrapper.UintValue `protobuf:"bytes,221729199,opt,name=out_error_pkts,json=outErrorPkts,proto3" json:"out_error_pkts,omitempty"`
	OutForwardedOctets *ywrapper.UintValue `protobuf:"bytes,60697281,opt,name=out_forwarded_octets,json=outForwardedOctets,proto3" json:"out_forwarded_octets,omitempty"`
	OutForwardedPkts   *ywrapper.UintValue `protobuf:"bytes,313944229,opt,name=out_forwarded_pkts,json=outForwardedPkts,proto3" json:"out_forwarded_pkts,omitempty"`
	OutOctets          *ywrapper.UintValue `protobuf:"bytes,429728576,opt,name=out_octets,json=outOctets,proto3" json:"out_octets,omitempty"`
	OutPkts            *ywrapper.UintValue `protobuf:"bytes,66045220,opt,name=out_pkts,json=outPkts,proto3" json:"out_pkts,omitempty"`
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_State_Counters) Reset() {
	*x = Interfaces_Interface_RoutedVlan_Ipv4_State_Counters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_State_Counters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_RoutedVlan_Ipv4_State_Counters) ProtoMessage() {}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_State_Counters) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_RoutedVlan_Ipv4_State_Counters.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_RoutedVlan_Ipv4_State_Counters) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 4, 1, 4, 0}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_State_Counters) GetInDiscardedPkts() *ywrapper.UintValue {
	if x != nil {
		return x.InDiscardedPkts
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_State_Counters) GetInErrorPkts() *ywrapper.UintValue {
	if x != nil {
		return x.InErrorPkts
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_State_Counters) GetInForwardedOctets() *ywrapper.UintValue {
	if x != nil {
		return x.InForwardedOctets
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_State_Counters) GetInForwardedPkts() *ywrapper.UintValue {
	if x != nil {
		return x.InForwardedPkts
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_State_Counters) GetInOctets() *ywrapper.UintValue {
	if x != nil {
		return x.InOctets
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_State_Counters) GetInPkts() *ywrapper.UintValue {
	if x != nil {
		return x.InPkts
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_State_Counters) GetOutDiscardedPkts() *ywrapper.UintValue {
	if x != nil {
		return x.OutDiscardedPkts
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_State_Counters) GetOutErrorPkts() *ywrapper.UintValue {
	if x != nil {
		return x.OutErrorPkts
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_State_Counters) GetOutForwardedOctets() *ywrapper.UintValue {
	if x != nil {
		return x.OutForwardedOctets
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_State_Counters) GetOutForwardedPkts() *ywrapper.UintValue {
	if x != nil {
		return x.OutForwardedPkts
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_State_Counters) GetOutOctets() *ywrapper.UintValue {
	if x != nil {
		return x.OutOctets
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_State_Counters) GetOutPkts() *ywrapper.UintValue {
	if x != nil {
		return x.OutPkts
	}
	return nil
}

type Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled *ywrapper.BoolValue `protobuf:"bytes,414259321,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered_Config) Reset() {
	*x = Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered_Config) ProtoMessage() {}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered_Config.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 4, 1, 5, 0}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered_Config) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

type Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_Config `protobuf:"bytes,324541603,opt,name=config,proto3" json:"config,omitempty"`
	State  *Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_State  `protobuf:"bytes,533490820,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef) Reset() {
	*x = Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef) ProtoMessage() {}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 4, 1, 5, 1}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef) GetConfig() *Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef) GetState() *Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled *ywrapper.BoolValue `protobuf:"bytes,490883210,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered_State) Reset() {
	*x = Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered_State) ProtoMessage() {}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered_State.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered_State) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 4, 1, 5, 2}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered_State) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

type Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interface    *ywrapper.StringValue `protobuf:"bytes,88393539,opt,name=interface,proto3" json:"interface,omitempty"`
	Subinterface *ywrapper.UintValue   `protobuf:"bytes,527598737,opt,name=subinterface,proto3" json:"subinterface,omitempty"`
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_Config) Reset() {
	*x = Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_Config) ProtoMessage() {}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_Config.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 4, 1, 5, 1, 0}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_Config) GetInterface() *ywrapper.StringValue {
	if x != nil {
		return x.Interface
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_Config) GetSubinterface() *ywrapper.UintValue {
	if x != nil {
		return x.Subinterface
	}
	return nil
}

type Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interface    *ywrapper.StringValue `protobuf:"bytes,164680540,opt,name=interface,proto3" json:"interface,omitempty"`
	Subinterface *ywrapper.UintValue   `protobuf:"bytes,190156972,opt,name=subinterface,proto3" json:"subinterface,omitempty"`
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_State) Reset() {
	*x = Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_State) ProtoMessage() {}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_State.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_State) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 4, 1, 5, 1, 1}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_State) GetInterface() *ywrapper.StringValue {
	if x != nil {
		return x.Interface
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_State) GetSubinterface() *ywrapper.UintValue {
	if x != nil {
		return x.Subinterface
	}
	return nil
}

type Interfaces_Interface_RoutedVlan_Ipv6_Addresses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address []*Interfaces_Interface_RoutedVlan_Ipv6_Addresses_AddressKey `protobuf:"bytes,512779414,rep,name=address,proto3" json:"address,omitempty"`
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses) Reset() {
	*x = Interfaces_Interface_RoutedVlan_Ipv6_Addresses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_RoutedVlan_Ipv6_Addresses) ProtoMessage() {}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_RoutedVlan_Ipv6_Addresses.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_RoutedVlan_Ipv6_Addresses) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 4, 2, 0}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses) GetAddress() []*Interfaces_Interface_RoutedVlan_Ipv6_Addresses_AddressKey {
	if x != nil {
		return x.Address
	}
	return nil
}

type Interfaces_Interface_RoutedVlan_Ipv6_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DhcpClient             *ywrapper.BoolValue `protobuf:"bytes,167177313,opt,name=dhcp_client,json=dhcpClient,proto3" json:"dhcp_client,omitempty"`
	DupAddrDetectTransmits *ywrapper.UintValue `protobuf:"bytes,124019213,opt,name=dup_addr_detect_transmits,json=dupAddrDetectTransmits,proto3" json:"dup_addr_detect_transmits,omitempty"`
	Enabled                *ywrapper.BoolValue `protobuf:"bytes,235203553,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Mtu                    *ywrapper.UintValue `protobuf:"bytes,498820810,opt,name=mtu,proto3" json:"mtu,omitempty"`
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Config) Reset() {
	*x = Interfaces_Interface_RoutedVlan_Ipv6_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_RoutedVlan_Ipv6_Config) ProtoMessage() {}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_RoutedVlan_Ipv6_Config.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_RoutedVlan_Ipv6_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 4, 2, 1}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Config) GetDhcpClient() *ywrapper.BoolValue {
	if x != nil {
		return x.DhcpClient
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Config) GetDupAddrDetectTransmits() *ywrapper.UintValue {
	if x != nil {
		return x.DupAddrDetectTransmits
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Config) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Config) GetMtu() *ywrapper.UintValue {
	if x != nil {
		return x.Mtu
	}
	return nil
}

type Interfaces_Interface_RoutedVlan_Ipv6_Neighbors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Neighbor []*Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_NeighborKey `protobuf:"bytes,275473167,rep,name=neighbor,proto3" json:"neighbor,omitempty"`
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Neighbors) Reset() {
	*x = Interfaces_Interface_RoutedVlan_Ipv6_Neighbors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Neighbors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_RoutedVlan_Ipv6_Neighbors) ProtoMessage() {}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Neighbors) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_RoutedVlan_Ipv6_Neighbors.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_RoutedVlan_Ipv6_Neighbors) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 4, 2, 2}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Neighbors) GetNeighbor() []*Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_NeighborKey {
	if x != nil {
		return x.Neighbor
	}
	return nil
}

type Interfaces_Interface_RoutedVlan_Ipv6_RouterAdvertisement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Interfaces_Interface_RoutedVlan_Ipv6_RouterAdvertisement_Config `protobuf:"bytes,464480659,opt,name=config,proto3" json:"config,omitempty"`
	State  *Interfaces_Interface_RoutedVlan_Ipv6_RouterAdvertisement_State  `protobuf:"bytes,223813748,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_RouterAdvertisement) Reset() {
	*x = Interfaces_Interface_RoutedVlan_Ipv6_RouterAdvertisement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_RouterAdvertisement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_RoutedVlan_Ipv6_RouterAdvertisement) ProtoMessage() {}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_RouterAdvertisement) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_RoutedVlan_Ipv6_RouterAdvertisement.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_RoutedVlan_Ipv6_RouterAdvertisement) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 4, 2, 3}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_RouterAdvertisement) GetConfig() *Interfaces_Interface_RoutedVlan_Ipv6_RouterAdvertisement_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_RouterAdvertisement) GetState() *Interfaces_Interface_RoutedVlan_Ipv6_RouterAdvertisement_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Interfaces_Interface_RoutedVlan_Ipv6_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Counters               *Interfaces_Interface_RoutedVlan_Ipv6_State_Counters `protobuf:"bytes,453666504,opt,name=counters,proto3" json:"counters,omitempty"`
	DhcpClient             *ywrapper.BoolValue                                  `protobuf:"bytes,527810522,opt,name=dhcp_client,json=dhcpClient,proto3" json:"dhcp_client,omitempty"`
	DupAddrDetectTransmits *ywrapper.UintValue                                  `protobuf:"bytes,508781638,opt,name=dup_addr_detect_transmits,json=dupAddrDetectTransmits,proto3" json:"dup_addr_detect_transmits,omitempty"`
	Enabled                *ywrapper.BoolValue                                  `protobuf:"bytes,23998898,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Mtu                    *ywrapper.UintValue                                  `protobuf:"bytes,511394217,opt,name=mtu,proto3" json:"mtu,omitempty"`
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_State) Reset() {
	*x = Interfaces_Interface_RoutedVlan_Ipv6_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_RoutedVlan_Ipv6_State) ProtoMessage() {}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_RoutedVlan_Ipv6_State.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_RoutedVlan_Ipv6_State) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 4, 2, 4}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_State) GetCounters() *Interfaces_Interface_RoutedVlan_Ipv6_State_Counters {
	if x != nil {
		return x.Counters
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_State) GetDhcpClient() *ywrapper.BoolValue {
	if x != nil {
		return x.DhcpClient
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_State) GetDupAddrDetectTransmits() *ywrapper.UintValue {
	if x != nil {
		return x.DupAddrDetectTransmits
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_State) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_State) GetMtu() *ywrapper.UintValue {
	if x != nil {
		return x.Mtu
	}
	return nil
}

type Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config       *Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered_Config       `protobuf:"bytes,241703533,opt,name=config,proto3" json:"config,omitempty"`
	InterfaceRef *Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef `protobuf:"bytes,468223976,opt,name=interface_ref,json=interfaceRef,proto3" json:"interface_ref,omitempty"`
	State        *Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered_State        `protobuf:"bytes,119619618,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered) Reset() {
	*x = Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered) ProtoMessage() {}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 4, 2, 5}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered) GetConfig() *Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered) GetInterfaceRef() *Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef {
	if x != nil {
		return x.InterfaceRef
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered) GetState() *Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Config `protobuf:"bytes,154837239,opt,name=config,proto3" json:"config,omitempty"`
	State  *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_State  `protobuf:"bytes,436119080,opt,name=state,proto3" json:"state,omitempty"`
	Vrrp   *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp   `protobuf:"bytes,109431075,opt,name=vrrp,proto3" json:"vrrp,omitempty"`
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address) Reset() {
	*x = Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address) ProtoMessage() {}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 4, 2, 0, 0}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address) GetConfig() *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address) GetState() *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address) GetVrrp() *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp {
	if x != nil {
		return x.Vrrp
	}
	return nil
}

type Interfaces_Interface_RoutedVlan_Ipv6_Addresses_AddressKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip      string                                                  `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Address *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_AddressKey) Reset() {
	*x = Interfaces_Interface_RoutedVlan_Ipv6_Addresses_AddressKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_AddressKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_RoutedVlan_Ipv6_Addresses_AddressKey) ProtoMessage() {}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_AddressKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_RoutedVlan_Ipv6_Addresses_AddressKey.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_RoutedVlan_Ipv6_Addresses_AddressKey) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 4, 2, 0, 1}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_AddressKey) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_AddressKey) GetAddress() *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address {
	if x != nil {
		return x.Address
	}
	return nil
}

type Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip           *ywrapper.StringValue `protobuf:"bytes,436214485,opt,name=ip,proto3" json:"ip,omitempty"`
	PrefixLength *ywrapper.UintValue   `protobuf:"bytes,420005967,opt,name=prefix_length,json=prefixLength,proto3" json:"prefix_length,omitempty"`
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Config) Reset() {
	*x = Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Config) ProtoMessage() {}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Config.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 4, 2, 0, 0, 0}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Config) GetIp() *ywrapper.StringValue {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Config) GetPrefixLength() *ywrapper.UintValue {
	if x != nil {
		return x.PrefixLength
	}
	return nil
}

type Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip           *ywrapper.StringValue                                               `protobuf:"bytes,73814628,opt,name=ip,proto3" json:"ip,omitempty"`
	Origin       OpenconfigIfIpIpAddressOrigin                                       `protobuf:"varint,70383429,opt,name=origin,proto3,enum=openconfig.OpenconfigIfIpIpAddressOrigin" json:"origin,omitempty"`
	PrefixLength *ywrapper.UintValue                                                 `protobuf:"bytes,400747792,opt,name=prefix_length,json=prefixLength,proto3" json:"prefix_length,omitempty"`
	Status       Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_State_Status `protobuf:"varint,436927845,opt,name=status,proto3,enum=openconfig.Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_State_Status" json:"status,omitempty"`
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_State) Reset() {
	*x = Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_State) ProtoMessage() {}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_State.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_State) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 4, 2, 0, 0, 1}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_State) GetIp() *ywrapper.StringValue {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_State) GetOrigin() OpenconfigIfIpIpAddressOrigin {
	if x != nil {
		return x.Origin
	}
	return OpenconfigIfIpIpAddressOrigin_OPENCONFIGIFIPIPADDRESSORIGIN_UNSET
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_State) GetPrefixLength() *ywrapper.UintValue {
	if x != nil {
		return x.PrefixLength
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_State) GetStatus() Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_State_Status {
	if x != nil {
		return x.Status
	}
	return Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_State_STATUS_UNSET
}

type Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VrrpGroup []*Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroupKey `protobuf:"bytes,131881570,rep,name=vrrp_group,json=vrrpGroup,proto3" json:"vrrp_group,omitempty"`
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp) Reset() {
	*x = Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp) ProtoMessage() {}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 4, 2, 0, 0, 2}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp) GetVrrpGroup() []*Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroupKey {
	if x != nil {
		return x.VrrpGroup
	}
	return nil
}

type Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config            *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_Config            `protobuf:"bytes,120433155,opt,name=config,proto3" json:"config,omitempty"`
	InterfaceTracking *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking `protobuf:"bytes,329957492,opt,name=interface_tracking,json=interfaceTracking,proto3" json:"interface_tracking,omitempty"`
	State             *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_State             `protobuf:"bytes,154643812,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup) Reset() {
	*x = Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup) ProtoMessage() {}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 4, 2, 0, 0, 2, 0}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup) GetConfig() *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup) GetInterfaceTracking() *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking {
	if x != nil {
		return x.InterfaceTracking
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup) GetState() *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroupKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VirtualRouterId uint64                                                                 `protobuf:"varint,1,opt,name=virtual_router_id,json=virtualRouterId,proto3" json:"virtual_router_id,omitempty"`
	VrrpGroup       *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup `protobuf:"bytes,2,opt,name=vrrp_group,json=vrrpGroup,proto3" json:"vrrp_group,omitempty"`
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroupKey) Reset() {
	*x = Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroupKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroupKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroupKey) ProtoMessage() {}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroupKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroupKey.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroupKey) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 4, 2, 0, 0, 2, 1}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroupKey) GetVirtualRouterId() uint64 {
	if x != nil {
		return x.VirtualRouterId
	}
	return 0
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroupKey) GetVrrpGroup() *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup {
	if x != nil {
		return x.VrrpGroup
	}
	return nil
}

type Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AcceptMode            *ywrapper.BoolValue     `protobuf:"bytes,473970174,opt,name=accept_mode,json=acceptMode,proto3" json:"accept_mode,omitempty"`
	AdvertisementInterval *ywrapper.UintValue     `protobuf:"bytes,35447257,opt,name=advertisement_interval,json=advertisementInterval,proto3" json:"advertisement_interval,omitempty"`
	Preempt               *ywrapper.BoolValue     `protobuf:"bytes,111055611,opt,name=preempt,proto3" json:"preempt,omitempty"`
	PreemptDelay          *ywrapper.UintValue     `protobuf:"bytes,458956129,opt,name=preempt_delay,json=preemptDelay,proto3" json:"preempt_delay,omitempty"`
	Priority              *ywrapper.UintValue     `protobuf:"bytes,332652754,opt,name=priority,proto3" json:"priority,omitempty"`
	VirtualAddress        []*ywrapper.StringValue `protobuf:"bytes,28701956,rep,name=virtual_address,json=virtualAddress,proto3" json:"virtual_address,omitempty"`
	VirtualLinkLocal      *ywrapper.StringValue   `protobuf:"bytes,224033014,opt,name=virtual_link_local,json=virtualLinkLocal,proto3" json:"virtual_link_local,omitempty"`
	VirtualRouterId       *ywrapper.UintValue     `protobuf:"bytes,357961755,opt,name=virtual_router_id,json=virtualRouterId,proto3" json:"virtual_router_id,omitempty"`
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_Config) Reset() {
	*x = Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_Config) ProtoMessage() {}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_Config.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 4, 2, 0, 0, 2, 0, 0}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_Config) GetAcceptMode() *ywrapper.BoolValue {
	if x != nil {
		return x.AcceptMode
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_Config) GetAdvertisementInterval() *ywrapper.UintValue {
	if x != nil {
		return x.AdvertisementInterval
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_Config) GetPreempt() *ywrapper.BoolValue {
	if x != nil {
		return x.Preempt
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_Config) GetPreemptDelay() *ywrapper.UintValue {
	if x != nil {
		return x.PreemptDelay
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_Config) GetPriority() *ywrapper.UintValue {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_Config) GetVirtualAddress() []*ywrapper.StringValue {
	if x != nil {
		return x.VirtualAddress
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_Config) GetVirtualLinkLocal() *ywrapper.StringValue {
	if x != nil {
		return x.VirtualLinkLocal
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_Config) GetVirtualRouterId() *ywrapper.UintValue {
	if x != nil {
		return x.VirtualRouterId
	}
	return nil
}

type Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_Config `protobuf:"bytes,409682681,opt,name=config,proto3" json:"config,omitempty"`
	State  *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_State  `protobuf:"bytes,90526286,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking) Reset() {
	*x = Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking) ProtoMessage() {
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 4, 2, 0, 0, 2, 0, 1}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking) GetConfig() *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking) GetState() *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AcceptMode            *ywrapper.BoolValue     `protobuf:"bytes,67113329,opt,name=accept_mode,json=acceptMode,proto3" json:"accept_mode,omitempty"`
	AdvertisementInterval *ywrapper.UintValue     `protobuf:"bytes,194614832,opt,name=advertisement_interval,json=advertisementInterval,proto3" json:"advertisement_interval,omitempty"`
	CurrentPriority       *ywrapper.UintValue     `protobuf:"bytes,512020007,opt,name=current_priority,json=currentPriority,proto3" json:"current_priority,omitempty"`
	Preempt               *ywrapper.BoolValue     `protobuf:"bytes,203845988,opt,name=preempt,proto3" json:"preempt,omitempty"`
	PreemptDelay          *ywrapper.UintValue     `protobuf:"bytes,14641398,opt,name=preempt_delay,json=preemptDelay,proto3" json:"preempt_delay,omitempty"`
	Priority              *ywrapper.UintValue     `protobuf:"bytes,404040271,opt,name=priority,proto3" json:"priority,omitempty"`
	VirtualAddress        []*ywrapper.StringValue `protobuf:"bytes,169688879,rep,name=virtual_address,json=virtualAddress,proto3" json:"virtual_address,omitempty"`
	VirtualLinkLocal      *ywrapper.StringValue   `protobuf:"bytes,523101291,opt,name=virtual_link_local,json=virtualLinkLocal,proto3" json:"virtual_link_local,omitempty"`
	VirtualRouterId       *ywrapper.UintValue     `protobuf:"bytes,154669592,opt,name=virtual_router_id,json=virtualRouterId,proto3" json:"virtual_router_id,omitempty"`
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_State) Reset() {
	*x = Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_State) ProtoMessage() {}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_State.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_State) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 4, 2, 0, 0, 2, 0, 2}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_State) GetAcceptMode() *ywrapper.BoolValue {
	if x != nil {
		return x.AcceptMode
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_State) GetAdvertisementInterval() *ywrapper.UintValue {
	if x != nil {
		return x.AdvertisementInterval
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_State) GetCurrentPriority() *ywrapper.UintValue {
	if x != nil {
		return x.CurrentPriority
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_State) GetPreempt() *ywrapper.BoolValue {
	if x != nil {
		return x.Preempt
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_State) GetPreemptDelay() *ywrapper.UintValue {
	if x != nil {
		return x.PreemptDelay
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_State) GetPriority() *ywrapper.UintValue {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_State) GetVirtualAddress() []*ywrapper.StringValue {
	if x != nil {
		return x.VirtualAddress
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_State) GetVirtualLinkLocal() *ywrapper.StringValue {
	if x != nil {
		return x.VirtualLinkLocal
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_State) GetVirtualRouterId() *ywrapper.UintValue {
	if x != nil {
		return x.VirtualRouterId
	}
	return nil
}

type Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PriorityDecrement *ywrapper.UintValue     `protobuf:"bytes,24311112,opt,name=priority_decrement,json=priorityDecrement,proto3" json:"priority_decrement,omitempty"`
	TrackInterface    []*ywrapper.StringValue `protobuf:"bytes,462890491,rep,name=track_interface,json=trackInterface,proto3" json:"track_interface,omitempty"`
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_Config) Reset() {
	*x = Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_Config) ProtoMessage() {
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_Config.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 4, 2, 0, 0, 2, 0, 1, 0}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_Config) GetPriorityDecrement() *ywrapper.UintValue {
	if x != nil {
		return x.PriorityDecrement
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_Config) GetTrackInterface() []*ywrapper.StringValue {
	if x != nil {
		return x.TrackInterface
	}
	return nil
}

type Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PriorityDecrement *ywrapper.UintValue     `protobuf:"bytes,390983829,opt,name=priority_decrement,json=priorityDecrement,proto3" json:"priority_decrement,omitempty"`
	TrackInterface    []*ywrapper.StringValue `protobuf:"bytes,70133340,rep,name=track_interface,json=trackInterface,proto3" json:"track_interface,omitempty"`
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_State) Reset() {
	*x = Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_State) ProtoMessage() {
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_State.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_State) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 4, 2, 0, 0, 2, 0, 1, 1}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_State) GetPriorityDecrement() *ywrapper.UintValue {
	if x != nil {
		return x.PriorityDecrement
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_State) GetTrackInterface() []*ywrapper.StringValue {
	if x != nil {
		return x.TrackInterface
	}
	return nil
}

type Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor_Config `protobuf:"bytes,438045552,opt,name=config,proto3" json:"config,omitempty"`
	State  *Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor_State  `protobuf:"bytes,350183401,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor) Reset() {
	*x = Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor) ProtoMessage() {}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 4, 2, 2, 0}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor) GetConfig() *Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor) GetState() *Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_NeighborKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip       string                                                   `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Neighbor *Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor `protobuf:"bytes,2,opt,name=neighbor,proto3" json:"neighbor,omitempty"`
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_NeighborKey) Reset() {
	*x = Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_NeighborKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_NeighborKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_NeighborKey) ProtoMessage() {}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_NeighborKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_NeighborKey.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_NeighborKey) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 4, 2, 2, 1}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_NeighborKey) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_NeighborKey) GetNeighbor() *Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor {
	if x != nil {
		return x.Neighbor
	}
	return nil
}

type Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip               *ywrapper.StringValue `protobuf:"bytes,441089468,opt,name=ip,proto3" json:"ip,omitempty"`
	LinkLayerAddress *ywrapper.StringValue `protobuf:"bytes,357623180,opt,name=link_layer_address,json=linkLayerAddress,proto3" json:"link_layer_address,omitempty"`
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor_Config) Reset() {
	*x = Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor_Config) ProtoMessage() {}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor_Config.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 4, 2, 2, 0, 0}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor_Config) GetIp() *ywrapper.StringValue {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor_Config) GetLinkLayerAddress() *ywrapper.StringValue {
	if x != nil {
		return x.LinkLayerAddress
	}
	return nil
}

type Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip               *ywrapper.StringValue                                                       `protobuf:"bytes,370431535,opt,name=ip,proto3" json:"ip,omitempty"`
	IsRouter         *ywrapper.BoolValue                                                         `protobuf:"bytes,444254730,opt,name=is_router,json=isRouter,proto3" json:"is_router,omitempty"`
	LinkLayerAddress *ywrapper.StringValue                                                       `protobuf:"bytes,31392315,opt,name=link_layer_address,json=linkLayerAddress,proto3" json:"link_layer_address,omitempty"`
	NeighborState    Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor_State_NeighborState `protobuf:"varint,125627606,opt,name=neighbor_state,json=neighborState,proto3,enum=openconfig.Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor_State_NeighborState" json:"neighbor_state,omitempty"`
	Origin           OpenconfigIfIpNeighborOrigin                                                `protobuf:"varint,95623922,opt,name=origin,proto3,enum=openconfig.OpenconfigIfIpNeighborOrigin" json:"origin,omitempty"`
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor_State) Reset() {
	*x = Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor_State) ProtoMessage() {}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor_State.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor_State) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 4, 2, 2, 0, 1}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor_State) GetIp() *ywrapper.StringValue {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor_State) GetIsRouter() *ywrapper.BoolValue {
	if x != nil {
		return x.IsRouter
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor_State) GetLinkLayerAddress() *ywrapper.StringValue {
	if x != nil {
		return x.LinkLayerAddress
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor_State) GetNeighborState() Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor_State_NeighborState {
	if x != nil {
		return x.NeighborState
	}
	return Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor_State_NEIGHBORSTATE_UNSET
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor_State) GetOrigin() OpenconfigIfIpNeighborOrigin {
	if x != nil {
		return x.Origin
	}
	return OpenconfigIfIpNeighborOrigin_OPENCONFIGIFIPNEIGHBORORIGIN_UNSET
}

type Interfaces_Interface_RoutedVlan_Ipv6_RouterAdvertisement_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interval *ywrapper.UintValue `protobuf:"bytes,98870893,opt,name=interval,proto3" json:"interval,omitempty"`
	Lifetime *ywrapper.UintValue `protobuf:"bytes,87992571,opt,name=lifetime,proto3" json:"lifetime,omitempty"`
	Suppress *ywrapper.BoolValue `protobuf:"bytes,5991079,opt,name=suppress,proto3" json:"suppress,omitempty"`
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_RouterAdvertisement_Config) Reset() {
	*x = Interfaces_Interface_RoutedVlan_Ipv6_RouterAdvertisement_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_RouterAdvertisement_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_RoutedVlan_Ipv6_RouterAdvertisement_Config) ProtoMessage() {}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_RouterAdvertisement_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_RoutedVlan_Ipv6_RouterAdvertisement_Config.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_RoutedVlan_Ipv6_RouterAdvertisement_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 4, 2, 3, 0}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_RouterAdvertisement_Config) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_RouterAdvertisement_Config) GetLifetime() *ywrapper.UintValue {
	if x != nil {
		return x.Lifetime
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_RouterAdvertisement_Config) GetSuppress() *ywrapper.BoolValue {
	if x != nil {
		return x.Suppress
	}
	return nil
}

type Interfaces_Interface_RoutedVlan_Ipv6_RouterAdvertisement_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interval *ywrapper.UintValue `protobuf:"bytes,292992044,opt,name=interval,proto3" json:"interval,omitempty"`
	Lifetime *ywrapper.UintValue `protobuf:"bytes,19814934,opt,name=lifetime,proto3" json:"lifetime,omitempty"`
	Suppress *ywrapper.BoolValue `protobuf:"bytes,192530270,opt,name=suppress,proto3" json:"suppress,omitempty"`
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_RouterAdvertisement_State) Reset() {
	*x = Interfaces_Interface_RoutedVlan_Ipv6_RouterAdvertisement_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_RouterAdvertisement_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_RoutedVlan_Ipv6_RouterAdvertisement_State) ProtoMessage() {}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_RouterAdvertisement_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_RoutedVlan_Ipv6_RouterAdvertisement_State.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_RoutedVlan_Ipv6_RouterAdvertisement_State) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 4, 2, 3, 1}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_RouterAdvertisement_State) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_RouterAdvertisement_State) GetLifetime() *ywrapper.UintValue {
	if x != nil {
		return x.Lifetime
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_RouterAdvertisement_State) GetSuppress() *ywrapper.BoolValue {
	if x != nil {
		return x.Suppress
	}
	return nil
}

type Interfaces_Interface_RoutedVlan_Ipv6_State_Counters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InDiscardedPkts    *ywrapper.UintValue `protobuf:"bytes,239614269,opt,name=in_discarded_pkts,json=inDiscardedPkts,proto3" json:"in_discarded_pkts,omitempty"`
	InErrorPkts        *ywrapper.UintValue `protobuf:"bytes,187753516,opt,name=in_error_pkts,json=inErrorPkts,proto3" json:"in_error_pkts,omitempty"`
	InForwardedOctets  *ywrapper.UintValue `protobuf:"bytes,355825230,opt,name=in_forwarded_octets,json=inForwardedOctets,proto3" json:"in_forwarded_octets,omitempty"`
	InForwardedPkts    *ywrapper.UintValue `protobuf:"bytes,71610230,opt,name=in_forwarded_pkts,json=inForwardedPkts,proto3" json:"in_forwarded_pkts,omitempty"`
	InOctets           *ywrapper.UintValue `protobuf:"bytes,221620847,opt,name=in_octets,json=inOctets,proto3" json:"in_octets,omitempty"`
	InPkts             *ywrapper.UintValue `protobuf:"bytes,54277935,opt,name=in_pkts,json=inPkts,proto3" json:"in_pkts,omitempty"`
	OutDiscardedPkts   *ywrapper.UintValue `protobuf:"bytes,499638688,opt,name=out_discarded_pkts,json=outDiscardedPkts,proto3" json:"out_discarded_pkts,omitempty"`
	OutErrorPkts       *ywrapper.UintValue `protobuf:"bytes,524876409,opt,name=out_error_pkts,json=outErrorPkts,proto3" json:"out_error_pkts,omitempty"`
	OutForwardedOctets *ywrapper.UintValue `protobuf:"bytes,229097699,opt,name=out_forwarded_octets,json=outForwardedOctets,proto3" json:"out_forwarded_octets,omitempty"`
	OutForwardedPkts   *ywrapper.UintValue `protobuf:"bytes,237143003,opt,name=out_forwarded_pkts,json=outForwardedPkts,proto3" json:"out_forwarded_pkts,omitempty"`
	OutOctets          *ywrapper.UintValue `protobuf:"bytes,19140950,opt,name=out_octets,json=outOctets,proto3" json:"out_octets,omitempty"`
	OutPkts            *ywrapper.UintValue `protobuf:"bytes,334393886,opt,name=out_pkts,json=outPkts,proto3" json:"out_pkts,omitempty"`
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_State_Counters) Reset() {
	*x = Interfaces_Interface_RoutedVlan_Ipv6_State_Counters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_State_Counters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_RoutedVlan_Ipv6_State_Counters) ProtoMessage() {}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_State_Counters) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_RoutedVlan_Ipv6_State_Counters.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_RoutedVlan_Ipv6_State_Counters) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 4, 2, 4, 0}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_State_Counters) GetInDiscardedPkts() *ywrapper.UintValue {
	if x != nil {
		return x.InDiscardedPkts
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_State_Counters) GetInErrorPkts() *ywrapper.UintValue {
	if x != nil {
		return x.InErrorPkts
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_State_Counters) GetInForwardedOctets() *ywrapper.UintValue {
	if x != nil {
		return x.InForwardedOctets
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_State_Counters) GetInForwardedPkts() *ywrapper.UintValue {
	if x != nil {
		return x.InForwardedPkts
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_State_Counters) GetInOctets() *ywrapper.UintValue {
	if x != nil {
		return x.InOctets
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_State_Counters) GetInPkts() *ywrapper.UintValue {
	if x != nil {
		return x.InPkts
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_State_Counters) GetOutDiscardedPkts() *ywrapper.UintValue {
	if x != nil {
		return x.OutDiscardedPkts
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_State_Counters) GetOutErrorPkts() *ywrapper.UintValue {
	if x != nil {
		return x.OutErrorPkts
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_State_Counters) GetOutForwardedOctets() *ywrapper.UintValue {
	if x != nil {
		return x.OutForwardedOctets
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_State_Counters) GetOutForwardedPkts() *ywrapper.UintValue {
	if x != nil {
		return x.OutForwardedPkts
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_State_Counters) GetOutOctets() *ywrapper.UintValue {
	if x != nil {
		return x.OutOctets
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_State_Counters) GetOutPkts() *ywrapper.UintValue {
	if x != nil {
		return x.OutPkts
	}
	return nil
}

type Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled *ywrapper.BoolValue `protobuf:"bytes,172326403,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered_Config) Reset() {
	*x = Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered_Config) ProtoMessage() {}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered_Config.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 4, 2, 5, 0}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered_Config) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

type Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_Config `protobuf:"bytes,497511757,opt,name=config,proto3" json:"config,omitempty"`
	State  *Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_State  `protobuf:"bytes,470619010,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef) Reset() {
	*x = Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef) ProtoMessage() {}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 4, 2, 5, 1}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef) GetConfig() *Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef) GetState() *Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled *ywrapper.BoolValue `protobuf:"bytes,126517488,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered_State) Reset() {
	*x = Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered_State) ProtoMessage() {}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered_State.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered_State) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 4, 2, 5, 2}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered_State) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

type Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interface    *ywrapper.StringValue `protobuf:"bytes,21523641,opt,name=interface,proto3" json:"interface,omitempty"`
	Subinterface *ywrapper.UintValue   `protobuf:"bytes,448921723,opt,name=subinterface,proto3" json:"subinterface,omitempty"`
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_Config) Reset() {
	*x = Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_Config) ProtoMessage() {}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_Config.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 4, 2, 5, 1, 0}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_Config) GetInterface() *ywrapper.StringValue {
	if x != nil {
		return x.Interface
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_Config) GetSubinterface() *ywrapper.UintValue {
	if x != nil {
		return x.Subinterface
	}
	return nil
}

type Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interface    *ywrapper.StringValue `protobuf:"bytes,178162734,opt,name=interface,proto3" json:"interface,omitempty"`
	Subinterface *ywrapper.UintValue   `protobuf:"bytes,466678090,opt,name=subinterface,proto3" json:"subinterface,omitempty"`
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_State) Reset() {
	*x = Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_State) ProtoMessage() {}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_State.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_State) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 4, 2, 5, 1, 1}
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_State) GetInterface() *ywrapper.StringValue {
	if x != nil {
		return x.Interface
	}
	return nil
}

func (x *Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_State) GetSubinterface() *ywrapper.UintValue {
	if x != nil {
		return x.Subinterface
	}
	return nil
}

type Interfaces_Interface_State_Counters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CarrierTransitions *ywrapper.UintValue `protobuf:"bytes,270803130,opt,name=carrier_transitions,json=carrierTransitions,proto3" json:"carrier_transitions,omitempty"`
	InBroadcastPkts    *ywrapper.UintValue `protobuf:"bytes,280201989,opt,name=in_broadcast_pkts,json=inBroadcastPkts,proto3" json:"in_broadcast_pkts,omitempty"`
	InDiscards         *ywrapper.UintValue `protobuf:"bytes,11979514,opt,name=in_discards,json=inDiscards,proto3" json:"in_discards,omitempty"`
	InErrors           *ywrapper.UintValue `protobuf:"bytes,456697578,opt,name=in_errors,json=inErrors,proto3" json:"in_errors,omitempty"`
	InFcsErrors        *ywrapper.UintValue `protobuf:"bytes,501559027,opt,name=in_fcs_errors,json=inFcsErrors,proto3" json:"in_fcs_errors,omitempty"`
	InMulticastPkts    *ywrapper.UintValue `protobuf:"bytes,113269128,opt,name=in_multicast_pkts,json=inMulticastPkts,proto3" json:"in_multicast_pkts,omitempty"`
	InOctets           *ywrapper.UintValue `protobuf:"bytes,333138891,opt,name=in_octets,json=inOctets,proto3" json:"in_octets,omitempty"`
	InPkts             *ywrapper.UintValue `protobuf:"bytes,412843491,opt,name=in_pkts,json=inPkts,proto3" json:"in_pkts,omitempty"`
	InUnicastPkts      *ywrapper.UintValue `protobuf:"bytes,272792307,opt,name=in_unicast_pkts,json=inUnicastPkts,proto3" json:"in_unicast_pkts,omitempty"`
	InUnknownProtos    *ywrapper.UintValue `protobuf:"bytes,241475497,opt,name=in_unknown_protos,json=inUnknownProtos,proto3" json:"in_unknown_protos,omitempty"`
	LastClear          *ywrapper.UintValue `protobuf:"bytes,186014919,opt,name=last_clear,json=lastClear,proto3" json:"last_clear,omitempty"`
	OutBroadcastPkts   *ywrapper.UintValue `protobuf:"bytes,338589668,opt,name=out_broadcast_pkts,json=outBroadcastPkts,proto3" json:"out_broadcast_pkts,omitempty"`
	OutDiscards        *ywrapper.UintValue `protobuf:"bytes,254055111,opt,name=out_discards,json=outDiscards,proto3" json:"out_discards,omitempty"`
	OutErrors          *ywrapper.UintValue `protobuf:"bytes,471103047,opt,name=out_errors,json=outErrors,proto3" json:"out_errors,omitempty"`
	OutMulticastPkts   *ywrapper.UintValue `protobuf:"bytes,457840757,opt,name=out_multicast_pkts,json=outMulticastPkts,proto3" json:"out_multicast_pkts,omitempty"`
	OutOctets          *ywrapper.UintValue `protobuf:"bytes,201005514,opt,name=out_octets,json=outOctets,proto3" json:"out_octets,omitempty"`
	OutPkts            *ywrapper.UintValue `protobuf:"bytes,437582090,opt,name=out_pkts,json=outPkts,proto3" json:"out_pkts,omitempty"`
	OutUnicastPkts     *ywrapper.UintValue `protobuf:"bytes,36542246,opt,name=out_unicast_pkts,json=outUnicastPkts,proto3" json:"out_unicast_pkts,omitempty"`
}

func (x *Interfaces_Interface_State_Counters) Reset() {
	*x = Interfaces_Interface_State_Counters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_State_Counters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_State_Counters) ProtoMessage() {}

func (x *Interfaces_Interface_State_Counters) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_State_Counters.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_State_Counters) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 6, 0}
}

func (x *Interfaces_Interface_State_Counters) GetCarrierTransitions() *ywrapper.UintValue {
	if x != nil {
		return x.CarrierTransitions
	}
	return nil
}

func (x *Interfaces_Interface_State_Counters) GetInBroadcastPkts() *ywrapper.UintValue {
	if x != nil {
		return x.InBroadcastPkts
	}
	return nil
}

func (x *Interfaces_Interface_State_Counters) GetInDiscards() *ywrapper.UintValue {
	if x != nil {
		return x.InDiscards
	}
	return nil
}

func (x *Interfaces_Interface_State_Counters) GetInErrors() *ywrapper.UintValue {
	if x != nil {
		return x.InErrors
	}
	return nil
}

func (x *Interfaces_Interface_State_Counters) GetInFcsErrors() *ywrapper.UintValue {
	if x != nil {
		return x.InFcsErrors
	}
	return nil
}

func (x *Interfaces_Interface_State_Counters) GetInMulticastPkts() *ywrapper.UintValue {
	if x != nil {
		return x.InMulticastPkts
	}
	return nil
}

func (x *Interfaces_Interface_State_Counters) GetInOctets() *ywrapper.UintValue {
	if x != nil {
		return x.InOctets
	}
	return nil
}

func (x *Interfaces_Interface_State_Counters) GetInPkts() *ywrapper.UintValue {
	if x != nil {
		return x.InPkts
	}
	return nil
}

func (x *Interfaces_Interface_State_Counters) GetInUnicastPkts() *ywrapper.UintValue {
	if x != nil {
		return x.InUnicastPkts
	}
	return nil
}

func (x *Interfaces_Interface_State_Counters) GetInUnknownProtos() *ywrapper.UintValue {
	if x != nil {
		return x.InUnknownProtos
	}
	return nil
}

func (x *Interfaces_Interface_State_Counters) GetLastClear() *ywrapper.UintValue {
	if x != nil {
		return x.LastClear
	}
	return nil
}

func (x *Interfaces_Interface_State_Counters) GetOutBroadcastPkts() *ywrapper.UintValue {
	if x != nil {
		return x.OutBroadcastPkts
	}
	return nil
}

func (x *Interfaces_Interface_State_Counters) GetOutDiscards() *ywrapper.UintValue {
	if x != nil {
		return x.OutDiscards
	}
	return nil
}

func (x *Interfaces_Interface_State_Counters) GetOutErrors() *ywrapper.UintValue {
	if x != nil {
		return x.OutErrors
	}
	return nil
}

func (x *Interfaces_Interface_State_Counters) GetOutMulticastPkts() *ywrapper.UintValue {
	if x != nil {
		return x.OutMulticastPkts
	}
	return nil
}

func (x *Interfaces_Interface_State_Counters) GetOutOctets() *ywrapper.UintValue {
	if x != nil {
		return x.OutOctets
	}
	return nil
}

func (x *Interfaces_Interface_State_Counters) GetOutPkts() *ywrapper.UintValue {
	if x != nil {
		return x.OutPkts
	}
	return nil
}

func (x *Interfaces_Interface_State_Counters) GetOutUnicastPkts() *ywrapper.UintValue {
	if x != nil {
		return x.OutUnicastPkts
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Interfaces_Interface_Subinterfaces_Subinterface_Config `protobuf:"bytes,175001476,opt,name=config,proto3" json:"config,omitempty"`
	Ipv4   *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4   `protobuf:"bytes,222971947,opt,name=ipv4,proto3" json:"ipv4,omitempty"`
	Ipv6   *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6   `protobuf:"bytes,222971945,opt,name=ipv6,proto3" json:"ipv6,omitempty"`
	State  *Interfaces_Interface_Subinterfaces_Subinterface_State  `protobuf:"bytes,501974173,opt,name=state,proto3" json:"state,omitempty"`
	Vlan   *Interfaces_Interface_Subinterfaces_Subinterface_Vlan   `protobuf:"bytes,164705069,opt,name=vlan,proto3" json:"vlan,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface) ProtoMessage() {}

func (x *Interfaces_Interface_Subinterfaces_Subinterface) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface) GetConfig() *Interfaces_Interface_Subinterfaces_Subinterface_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface) GetIpv4() *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4 {
	if x != nil {
		return x.Ipv4
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface) GetIpv6() *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6 {
	if x != nil {
		return x.Ipv6
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface) GetState() *Interfaces_Interface_Subinterfaces_Subinterface_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface) GetVlan() *Interfaces_Interface_Subinterfaces_Subinterface_Vlan {
	if x != nil {
		return x.Vlan
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_SubinterfaceKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index        uint64                                           `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Subinterface *Interfaces_Interface_Subinterfaces_Subinterface `protobuf:"bytes,2,opt,name=subinterface,proto3" json:"subinterface,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_SubinterfaceKey) Reset() {
	*x = Interfaces_Interface_Subinterfaces_SubinterfaceKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_SubinterfaceKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_SubinterfaceKey) ProtoMessage() {}

func (x *Interfaces_Interface_Subinterfaces_SubinterfaceKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_SubinterfaceKey.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_SubinterfaceKey) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 1}
}

func (x *Interfaces_Interface_Subinterfaces_SubinterfaceKey) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Interfaces_Interface_Subinterfaces_SubinterfaceKey) GetSubinterface() *Interfaces_Interface_Subinterfaces_Subinterface {
	if x != nil {
		return x.Subinterface
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description *ywrapper.StringValue `protobuf:"bytes,280671199,opt,name=description,proto3" json:"description,omitempty"`
	Enabled     *ywrapper.BoolValue   `protobuf:"bytes,297236390,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Index       *ywrapper.UintValue   `protobuf:"bytes,279269781,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Config) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Config) ProtoMessage() {}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Config.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 0}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Config) GetDescription() *ywrapper.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Config) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Config) GetIndex() *ywrapper.UintValue {
	if x != nil {
		return x.Index
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Ipv4 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addresses  *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses  `protobuf:"bytes,236886950,opt,name=addresses,proto3" json:"addresses,omitempty"`
	Config     *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Config     `protobuf:"bytes,80814716,opt,name=config,proto3" json:"config,omitempty"`
	Neighbors  *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors  `protobuf:"bytes,438581427,opt,name=neighbors,proto3" json:"neighbors,omitempty"`
	ProxyArp   *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp   `protobuf:"bytes,197757350,opt,name=proxy_arp,json=proxyArp,proto3" json:"proxy_arp,omitempty"`
	State      *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State      `protobuf:"bytes,277277813,opt,name=state,proto3" json:"state,omitempty"`
	Unnumbered *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered `protobuf:"bytes,488271015,opt,name=unnumbered,proto3" json:"unnumbered,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Ipv4{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4) ProtoMessage() {}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Ipv4.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 1}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4) GetAddresses() *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4) GetConfig() *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4) GetNeighbors() *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors {
	if x != nil {
		return x.Neighbors
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4) GetProxyArp() *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp {
	if x != nil {
		return x.ProxyArp
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4) GetState() *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4) GetUnnumbered() *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered {
	if x != nil {
		return x.Unnumbered
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Ipv6 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addresses           *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses           `protobuf:"bytes,280754632,opt,name=addresses,proto3" json:"addresses,omitempty"`
	Autoconf            *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Autoconf            `protobuf:"bytes,444953847,opt,name=autoconf,proto3" json:"autoconf,omitempty"`
	Config              *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Config              `protobuf:"bytes,299280414,opt,name=config,proto3" json:"config,omitempty"`
	Neighbors           *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors           `protobuf:"bytes,320516021,opt,name=neighbors,proto3" json:"neighbors,omitempty"`
	RouterAdvertisement *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement `protobuf:"bytes,219367423,opt,name=router_advertisement,json=routerAdvertisement,proto3" json:"router_advertisement,omitempty"`
	State               *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State               `protobuf:"bytes,403050123,opt,name=state,proto3" json:"state,omitempty"`
	Unnumbered          *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered          `protobuf:"bytes,8515701,opt,name=unnumbered,proto3" json:"unnumbered,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Ipv6{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6) ProtoMessage() {}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Ipv6.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 2}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6) GetAddresses() *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6) GetAutoconf() *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Autoconf {
	if x != nil {
		return x.Autoconf
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6) GetConfig() *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6) GetNeighbors() *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors {
	if x != nil {
		return x.Neighbors
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6) GetRouterAdvertisement() *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement {
	if x != nil {
		return x.RouterAdvertisement
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6) GetState() *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6) GetUnnumbered() *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered {
	if x != nil {
		return x.Unnumbered
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminStatus Interfaces_Interface_Subinterfaces_Subinterface_State_AdminStatus `protobuf:"varint,250658952,opt,name=admin_status,json=adminStatus,proto3,enum=openconfig.Interfaces_Interface_Subinterfaces_Subinterface_State_AdminStatus" json:"admin_status,omitempty"`
	Counters    *Interfaces_Interface_Subinterfaces_Subinterface_State_Counters   `protobuf:"bytes,483442783,opt,name=counters,proto3" json:"counters,omitempty"`
	Description *ywrapper.StringValue                                             `protobuf:"bytes,49943526,opt,name=description,proto3" json:"description,omitempty"`
	Enabled     *ywrapper.BoolValue                                               `protobuf:"bytes,468513843,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Ifindex     *ywrapper.UintValue                                               `protobuf:"bytes,511987815,opt,name=ifindex,proto3" json:"ifindex,omitempty"`
	Index       *ywrapper.UintValue                                               `protobuf:"bytes,80745756,opt,name=index,proto3" json:"index,omitempty"`
	LastChange  *ywrapper.UintValue                                               `protobuf:"bytes,29904521,opt,name=last_change,json=lastChange,proto3" json:"last_change,omitempty"`
	Logical     *ywrapper.BoolValue                                               `protobuf:"bytes,294124401,opt,name=logical,proto3" json:"logical,omitempty"`
	Name        *ywrapper.StringValue                                             `protobuf:"bytes,279346681,opt,name=name,proto3" json:"name,omitempty"`
	OperStatus  Interfaces_Interface_Subinterfaces_Subinterface_State_OperStatus  `protobuf:"varint,401969247,opt,name=oper_status,json=operStatus,proto3,enum=openconfig.Interfaces_Interface_Subinterfaces_Subinterface_State_OperStatus" json:"oper_status,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_State) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_State) ProtoMessage() {}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_State.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_State) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 3}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_State) GetAdminStatus() Interfaces_Interface_Subinterfaces_Subinterface_State_AdminStatus {
	if x != nil {
		return x.AdminStatus
	}
	return Interfaces_Interface_Subinterfaces_Subinterface_State_ADMINSTATUS_UNSET
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_State) GetCounters() *Interfaces_Interface_Subinterfaces_Subinterface_State_Counters {
	if x != nil {
		return x.Counters
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_State) GetDescription() *ywrapper.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_State) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_State) GetIfindex() *ywrapper.UintValue {
	if x != nil {
		return x.Ifindex
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_State) GetIndex() *ywrapper.UintValue {
	if x != nil {
		return x.Index
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_State) GetLastChange() *ywrapper.UintValue {
	if x != nil {
		return x.LastChange
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_State) GetLogical() *ywrapper.BoolValue {
	if x != nil {
		return x.Logical
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_State) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_State) GetOperStatus() Interfaces_Interface_Subinterfaces_Subinterface_State_OperStatus {
	if x != nil {
		return x.OperStatus
	}
	return Interfaces_Interface_Subinterfaces_Subinterface_State_OPERSTATUS_UNSET
}

type Interfaces_Interface_Subinterfaces_Subinterface_Vlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config         *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Config         `protobuf:"bytes,75372354,opt,name=config,proto3" json:"config,omitempty"`
	EgressMapping  *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping  `protobuf:"bytes,230644992,opt,name=egress_mapping,json=egressMapping,proto3" json:"egress_mapping,omitempty"`
	IngressMapping *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping `protobuf:"bytes,179212592,opt,name=ingress_mapping,json=ingressMapping,proto3" json:"ingress_mapping,omitempty"`
	Match          *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match          `protobuf:"bytes,89345155,opt,name=match,proto3" json:"match,omitempty"`
	State          *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_State          `protobuf:"bytes,467892223,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Vlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan) ProtoMessage() {}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Vlan.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 4}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan) GetConfig() *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan) GetEgressMapping() *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping {
	if x != nil {
		return x.EgressMapping
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan) GetIngressMapping() *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping {
	if x != nil {
		return x.IngressMapping
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan) GetMatch() *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan) GetState() *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address []*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_AddressKey `protobuf:"bytes,92268151,rep,name=address,proto3" json:"address,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses) ProtoMessage() {}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 1, 0}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses) GetAddress() []*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_AddressKey {
	if x != nil {
		return x.Address
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DhcpClient *ywrapper.BoolValue `protobuf:"bytes,161639310,opt,name=dhcp_client,json=dhcpClient,proto3" json:"dhcp_client,omitempty"`
	Enabled    *ywrapper.BoolValue `protobuf:"bytes,2746286,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Mtu        *ywrapper.UintValue `protobuf:"bytes,20062117,opt,name=mtu,proto3" json:"mtu,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Config) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Config) ProtoMessage() {}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Config.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 1, 1}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Config) GetDhcpClient() *ywrapper.BoolValue {
	if x != nil {
		return x.DhcpClient
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Config) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Config) GetMtu() *ywrapper.UintValue {
	if x != nil {
		return x.Mtu
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Neighbor []*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_NeighborKey `protobuf:"bytes,188476968,rep,name=neighbor,proto3" json:"neighbor,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors) ProtoMessage() {}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 1, 2}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors) GetNeighbor() []*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_NeighborKey {
	if x != nil {
		return x.Neighbor
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_Config `protobuf:"bytes,213186855,opt,name=config,proto3" json:"config,omitempty"`
	State  *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_State  `protobuf:"bytes,66866712,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp) ProtoMessage() {}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 1, 3}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp) GetConfig() *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp) GetState() *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Counters   *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State_Counters `protobuf:"bytes,437070007,opt,name=counters,proto3" json:"counters,omitempty"`
	DhcpClient *ywrapper.BoolValue                                                  `protobuf:"bytes,87183775,opt,name=dhcp_client,json=dhcpClient,proto3" json:"dhcp_client,omitempty"`
	Enabled    *ywrapper.BoolValue                                                  `protobuf:"bytes,30245403,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Mtu        *ywrapper.UintValue                                                  `protobuf:"bytes,267790892,opt,name=mtu,proto3" json:"mtu,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State) ProtoMessage() {}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 1, 4}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State) GetCounters() *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State_Counters {
	if x != nil {
		return x.Counters
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State) GetDhcpClient() *ywrapper.BoolValue {
	if x != nil {
		return x.DhcpClient
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State) GetMtu() *ywrapper.UintValue {
	if x != nil {
		return x.Mtu
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config       *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered_Config       `protobuf:"bytes,100056760,opt,name=config,proto3" json:"config,omitempty"`
	InterfaceRef *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered_InterfaceRef `protobuf:"bytes,235981495,opt,name=interface_ref,json=interfaceRef,proto3" json:"interface_ref,omitempty"`
	State        *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered_State        `protobuf:"bytes,462664401,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered) ProtoMessage() {}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 1, 5}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered) GetConfig() *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered) GetInterfaceRef() *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered_InterfaceRef {
	if x != nil {
		return x.InterfaceRef
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered) GetState() *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Config `protobuf:"bytes,231137640,opt,name=config,proto3" json:"config,omitempty"`
	State  *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_State  `protobuf:"bytes,122371713,opt,name=state,proto3" json:"state,omitempty"`
	Vrrp   *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp   `protobuf:"bytes,102898532,opt,name=vrrp,proto3" json:"vrrp,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address) ProtoMessage() {}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 1, 0, 0}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address) GetConfig() *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address) GetState() *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address) GetVrrp() *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp {
	if x != nil {
		return x.Vrrp
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_AddressKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip      string                                                                  `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Address *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_AddressKey) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_AddressKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_AddressKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_AddressKey) ProtoMessage() {}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_AddressKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_AddressKey.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_AddressKey) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 1, 0, 1}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_AddressKey) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_AddressKey) GetAddress() *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address {
	if x != nil {
		return x.Address
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip           *ywrapper.StringValue `protobuf:"bytes,217986852,opt,name=ip,proto3" json:"ip,omitempty"`
	PrefixLength *ywrapper.UintValue   `protobuf:"bytes,250130256,opt,name=prefix_length,json=prefixLength,proto3" json:"prefix_length,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Config) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Config) ProtoMessage() {
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Config.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 1, 0, 0, 0}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Config) GetIp() *ywrapper.StringValue {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Config) GetPrefixLength() *ywrapper.UintValue {
	if x != nil {
		return x.PrefixLength
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip           *ywrapper.StringValue         `protobuf:"bytes,84579543,opt,name=ip,proto3" json:"ip,omitempty"`
	Origin       OpenconfigIfIpIpAddressOrigin `protobuf:"varint,86633258,opt,name=origin,proto3,enum=openconfig.OpenconfigIfIpIpAddressOrigin" json:"origin,omitempty"`
	PrefixLength *ywrapper.UintValue           `protobuf:"bytes,434028861,opt,name=prefix_length,json=prefixLength,proto3" json:"prefix_length,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_State) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_State) ProtoMessage() {}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_State.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_State) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 1, 0, 0, 1}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_State) GetIp() *ywrapper.StringValue {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_State) GetOrigin() OpenconfigIfIpIpAddressOrigin {
	if x != nil {
		return x.Origin
	}
	return OpenconfigIfIpIpAddressOrigin_OPENCONFIGIFIPIPADDRESSORIGIN_UNSET
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_State) GetPrefixLength() *ywrapper.UintValue {
	if x != nil {
		return x.PrefixLength
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VrrpGroup []*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroupKey `protobuf:"bytes,304427675,rep,name=vrrp_group,json=vrrpGroup,proto3" json:"vrrp_group,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp) ProtoMessage() {}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 1, 0, 0, 2}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp) GetVrrpGroup() []*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroupKey {
	if x != nil {
		return x.VrrpGroup
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config            *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_Config            `protobuf:"bytes,38627148,opt,name=config,proto3" json:"config,omitempty"`
	InterfaceTracking *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking `protobuf:"bytes,65916063,opt,name=interface_tracking,json=interfaceTracking,proto3" json:"interface_tracking,omitempty"`
	State             *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_State             `protobuf:"bytes,239711173,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup) ProtoMessage() {
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 1, 0, 0, 2, 0}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup) GetConfig() *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup) GetInterfaceTracking() *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking {
	if x != nil {
		return x.InterfaceTracking
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup) GetState() *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroupKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VirtualRouterId uint64                                                                                 `protobuf:"varint,1,opt,name=virtual_router_id,json=virtualRouterId,proto3" json:"virtual_router_id,omitempty"`
	VrrpGroup       *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup `protobuf:"bytes,2,opt,name=vrrp_group,json=vrrpGroup,proto3" json:"vrrp_group,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroupKey) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroupKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroupKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroupKey) ProtoMessage() {
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroupKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroupKey.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroupKey) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 1, 0, 0, 2, 1}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroupKey) GetVirtualRouterId() uint64 {
	if x != nil {
		return x.VirtualRouterId
	}
	return 0
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroupKey) GetVrrpGroup() *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup {
	if x != nil {
		return x.VrrpGroup
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AcceptMode            *ywrapper.BoolValue     `protobuf:"bytes,241791545,opt,name=accept_mode,json=acceptMode,proto3" json:"accept_mode,omitempty"`
	AdvertisementInterval *ywrapper.UintValue     `protobuf:"bytes,62480072,opt,name=advertisement_interval,json=advertisementInterval,proto3" json:"advertisement_interval,omitempty"`
	Preempt               *ywrapper.BoolValue     `protobuf:"bytes,34241868,opt,name=preempt,proto3" json:"preempt,omitempty"`
	PreemptDelay          *ywrapper.UintValue     `protobuf:"bytes,165057134,opt,name=preempt_delay,json=preemptDelay,proto3" json:"preempt_delay,omitempty"`
	Priority              *ywrapper.UintValue     `protobuf:"bytes,462156599,opt,name=priority,proto3" json:"priority,omitempty"`
	VirtualAddress        []*ywrapper.StringValue `protobuf:"bytes,386503383,rep,name=virtual_address,json=virtualAddress,proto3" json:"virtual_address,omitempty"`
	VirtualRouterId       *ywrapper.UintValue     `protobuf:"bytes,495254096,opt,name=virtual_router_id,json=virtualRouterId,proto3" json:"virtual_router_id,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_Config) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_Config) ProtoMessage() {
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_Config.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 1, 0, 0, 2, 0, 0}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_Config) GetAcceptMode() *ywrapper.BoolValue {
	if x != nil {
		return x.AcceptMode
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_Config) GetAdvertisementInterval() *ywrapper.UintValue {
	if x != nil {
		return x.AdvertisementInterval
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_Config) GetPreempt() *ywrapper.BoolValue {
	if x != nil {
		return x.Preempt
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_Config) GetPreemptDelay() *ywrapper.UintValue {
	if x != nil {
		return x.PreemptDelay
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_Config) GetPriority() *ywrapper.UintValue {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_Config) GetVirtualAddress() []*ywrapper.StringValue {
	if x != nil {
		return x.VirtualAddress
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_Config) GetVirtualRouterId() *ywrapper.UintValue {
	if x != nil {
		return x.VirtualRouterId
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_Config `protobuf:"bytes,106412896,opt,name=config,proto3" json:"config,omitempty"`
	State  *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_State  `protobuf:"bytes,461769945,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking) ProtoMessage() {
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 1, 0, 0, 2, 0, 1}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking) GetConfig() *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking) GetState() *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AcceptMode            *ywrapper.BoolValue     `protobuf:"bytes,496343048,opt,name=accept_mode,json=acceptMode,proto3" json:"accept_mode,omitempty"`
	AdvertisementInterval *ywrapper.UintValue     `protobuf:"bytes,223205671,opt,name=advertisement_interval,json=advertisementInterval,proto3" json:"advertisement_interval,omitempty"`
	CurrentPriority       *ywrapper.UintValue     `protobuf:"bytes,410673536,opt,name=current_priority,json=currentPriority,proto3" json:"current_priority,omitempty"`
	Preempt               *ywrapper.BoolValue     `protobuf:"bytes,55863061,opt,name=preempt,proto3" json:"preempt,omitempty"`
	PreemptDelay          *ywrapper.UintValue     `protobuf:"bytes,254881587,opt,name=preempt_delay,json=preemptDelay,proto3" json:"preempt_delay,omitempty"`
	Priority              *ywrapper.UintValue     `protobuf:"bytes,166744344,opt,name=priority,proto3" json:"priority,omitempty"`
	VirtualAddress        []*ywrapper.StringValue `protobuf:"bytes,509735374,rep,name=virtual_address,json=virtualAddress,proto3" json:"virtual_address,omitempty"`
	VirtualRouterId       *ywrapper.UintValue     `protobuf:"bytes,440263069,opt,name=virtual_router_id,json=virtualRouterId,proto3" json:"virtual_router_id,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_State) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_State) ProtoMessage() {
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_State.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_State) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 1, 0, 0, 2, 0, 2}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_State) GetAcceptMode() *ywrapper.BoolValue {
	if x != nil {
		return x.AcceptMode
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_State) GetAdvertisementInterval() *ywrapper.UintValue {
	if x != nil {
		return x.AdvertisementInterval
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_State) GetCurrentPriority() *ywrapper.UintValue {
	if x != nil {
		return x.CurrentPriority
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_State) GetPreempt() *ywrapper.BoolValue {
	if x != nil {
		return x.Preempt
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_State) GetPreemptDelay() *ywrapper.UintValue {
	if x != nil {
		return x.PreemptDelay
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_State) GetPriority() *ywrapper.UintValue {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_State) GetVirtualAddress() []*ywrapper.StringValue {
	if x != nil {
		return x.VirtualAddress
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_State) GetVirtualRouterId() *ywrapper.UintValue {
	if x != nil {
		return x.VirtualRouterId
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PriorityDecrement *ywrapper.UintValue     `protobuf:"bytes,412949359,opt,name=priority_decrement,json=priorityDecrement,proto3" json:"priority_decrement,omitempty"`
	TrackInterface    []*ywrapper.StringValue `protobuf:"bytes,225882622,rep,name=track_interface,json=trackInterface,proto3" json:"track_interface,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_Config) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_Config) ProtoMessage() {
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_Config.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 1, 0, 0, 2, 0, 1, 0}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_Config) GetPriorityDecrement() *ywrapper.UintValue {
	if x != nil {
		return x.PriorityDecrement
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_Config) GetTrackInterface() []*ywrapper.StringValue {
	if x != nil {
		return x.TrackInterface
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PriorityDecrement *ywrapper.UintValue     `protobuf:"bytes,212987688,opt,name=priority_decrement,json=priorityDecrement,proto3" json:"priority_decrement,omitempty"`
	TrackInterface    []*ywrapper.StringValue `protobuf:"bytes,122745307,rep,name=track_interface,json=trackInterface,proto3" json:"track_interface,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_State) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_State) ProtoMessage() {
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_State.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_State) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 1, 0, 0, 2, 0, 1, 1}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_State) GetPriorityDecrement() *ywrapper.UintValue {
	if x != nil {
		return x.PriorityDecrement
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_State) GetTrackInterface() []*ywrapper.StringValue {
	if x != nil {
		return x.TrackInterface
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor_Config `protobuf:"bytes,125658381,opt,name=config,proto3" json:"config,omitempty"`
	State  *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor_State  `protobuf:"bytes,73145410,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor) ProtoMessage() {}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 1, 2, 0}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor) GetConfig() *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor) GetState() *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_NeighborKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip       string                                                                   `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Neighbor *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor `protobuf:"bytes,2,opt,name=neighbor,proto3" json:"neighbor,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_NeighborKey) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_NeighborKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_NeighborKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_NeighborKey) ProtoMessage() {}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_NeighborKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_NeighborKey.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_NeighborKey) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 1, 2, 1}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_NeighborKey) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_NeighborKey) GetNeighbor() *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor {
	if x != nil {
		return x.Neighbor
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip               *ywrapper.StringValue `protobuf:"bytes,231107395,opt,name=ip,proto3" json:"ip,omitempty"`
	LinkLayerAddress *ywrapper.StringValue `protobuf:"bytes,11872487,opt,name=link_layer_address,json=linkLayerAddress,proto3" json:"link_layer_address,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor_Config) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor_Config) ProtoMessage() {
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor_Config.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 1, 2, 0, 0}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor_Config) GetIp() *ywrapper.StringValue {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor_Config) GetLinkLayerAddress() *ywrapper.StringValue {
	if x != nil {
		return x.LinkLayerAddress
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip               *ywrapper.StringValue        `protobuf:"bytes,381807190,opt,name=ip,proto3" json:"ip,omitempty"`
	LinkLayerAddress *ywrapper.StringValue        `protobuf:"bytes,407605950,opt,name=link_layer_address,json=linkLayerAddress,proto3" json:"link_layer_address,omitempty"`
	Origin           OpenconfigIfIpNeighborOrigin `protobuf:"varint,454675095,opt,name=origin,proto3,enum=openconfig.OpenconfigIfIpNeighborOrigin" json:"origin,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor_State) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor_State) ProtoMessage() {
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor_State.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor_State) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 1, 2, 0, 1}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor_State) GetIp() *ywrapper.StringValue {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor_State) GetLinkLayerAddress() *ywrapper.StringValue {
	if x != nil {
		return x.LinkLayerAddress
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor_State) GetOrigin() OpenconfigIfIpNeighborOrigin {
	if x != nil {
		return x.Origin
	}
	return OpenconfigIfIpNeighborOrigin_OPENCONFIGIFIPNEIGHBORORIGIN_UNSET
}

type Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_Config_Mode `protobuf:"varint,56040263,opt,name=mode,proto3,enum=openconfig.Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_Config_Mode" json:"mode,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_Config) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_Config) ProtoMessage() {}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_Config.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 1, 3, 0}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_Config) GetMode() Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_Config_Mode {
	if x != nil {
		return x.Mode
	}
	return Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_Config_MODE_DISABLE
}

type Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_State_Mode `protobuf:"varint,152376198,opt,name=mode,proto3,enum=openconfig.Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_State_Mode" json:"mode,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_State) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_State) ProtoMessage() {}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_State.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_State) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 1, 3, 1}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_State) GetMode() Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_State_Mode {
	if x != nil {
		return x.Mode
	}
	return Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_State_MODE_DISABLE
}

type Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State_Counters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InDiscardedPkts    *ywrapper.UintValue `protobuf:"bytes,23305318,opt,name=in_discarded_pkts,json=inDiscardedPkts,proto3" json:"in_discarded_pkts,omitempty"`
	InErrorPkts        *ywrapper.UintValue `protobuf:"bytes,125054547,opt,name=in_error_pkts,json=inErrorPkts,proto3" json:"in_error_pkts,omitempty"`
	InForwardedOctets  *ywrapper.UintValue `protobuf:"bytes,210644557,opt,name=in_forwarded_octets,json=inForwardedOctets,proto3" json:"in_forwarded_octets,omitempty"`
	InForwardedPkts    *ywrapper.UintValue `protobuf:"bytes,257970457,opt,name=in_forwarded_pkts,json=inForwardedPkts,proto3" json:"in_forwarded_pkts,omitempty"`
	InOctets           *ywrapper.UintValue `protobuf:"bytes,6166740,opt,name=in_octets,json=inOctets,proto3" json:"in_octets,omitempty"`
	InPkts             *ywrapper.UintValue `protobuf:"bytes,55520496,opt,name=in_pkts,json=inPkts,proto3" json:"in_pkts,omitempty"`
	OutDiscardedPkts   *ywrapper.UintValue `protobuf:"bytes,196519817,opt,name=out_discarded_pkts,json=outDiscardedPkts,proto3" json:"out_discarded_pkts,omitempty"`
	OutErrorPkts       *ywrapper.UintValue `protobuf:"bytes,212089176,opt,name=out_error_pkts,json=outErrorPkts,proto3" json:"out_error_pkts,omitempty"`
	OutForwardedOctets *ywrapper.UintValue `protobuf:"bytes,299444306,opt,name=out_forwarded_octets,json=outForwardedOctets,proto3" json:"out_forwarded_octets,omitempty"`
	OutForwardedPkts   *ywrapper.UintValue `protobuf:"bytes,175600114,opt,name=out_forwarded_pkts,json=outForwardedPkts,proto3" json:"out_forwarded_pkts,omitempty"`
	OutOctets          *ywrapper.UintValue `protobuf:"bytes,75882059,opt,name=out_octets,json=outOctets,proto3" json:"out_octets,omitempty"`
	OutPkts            *ywrapper.UintValue `protobuf:"bytes,197536867,opt,name=out_pkts,json=outPkts,proto3" json:"out_pkts,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State_Counters) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State_Counters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State_Counters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State_Counters) ProtoMessage() {}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State_Counters) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State_Counters.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State_Counters) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 1, 4, 0}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State_Counters) GetInDiscardedPkts() *ywrapper.UintValue {
	if x != nil {
		return x.InDiscardedPkts
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State_Counters) GetInErrorPkts() *ywrapper.UintValue {
	if x != nil {
		return x.InErrorPkts
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State_Counters) GetInForwardedOctets() *ywrapper.UintValue {
	if x != nil {
		return x.InForwardedOctets
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State_Counters) GetInForwardedPkts() *ywrapper.UintValue {
	if x != nil {
		return x.InForwardedPkts
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State_Counters) GetInOctets() *ywrapper.UintValue {
	if x != nil {
		return x.InOctets
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State_Counters) GetInPkts() *ywrapper.UintValue {
	if x != nil {
		return x.InPkts
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State_Counters) GetOutDiscardedPkts() *ywrapper.UintValue {
	if x != nil {
		return x.OutDiscardedPkts
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State_Counters) GetOutErrorPkts() *ywrapper.UintValue {
	if x != nil {
		return x.OutErrorPkts
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State_Counters) GetOutForwardedOctets() *ywrapper.UintValue {
	if x != nil {
		return x.OutForwardedOctets
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State_Counters) GetOutForwardedPkts() *ywrapper.UintValue {
	if x != nil {
		return x.OutForwardedPkts
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State_Counters) GetOutOctets() *ywrapper.UintValue {
	if x != nil {
		return x.OutOctets
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State_Counters) GetOutPkts() *ywrapper.UintValue {
	if x != nil {
		return x.OutPkts
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled *ywrapper.BoolValue `protobuf:"bytes,527961066,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered_Config) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered_Config) ProtoMessage() {}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered_Config.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 1, 5, 0}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered_Config) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered_InterfaceRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered_InterfaceRef_Config `protobuf:"bytes,435283240,opt,name=config,proto3" json:"config,omitempty"`
	State  *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered_InterfaceRef_State  `protobuf:"bytes,271260737,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered_InterfaceRef) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered_InterfaceRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered_InterfaceRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered_InterfaceRef) ProtoMessage() {}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered_InterfaceRef) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered_InterfaceRef.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered_InterfaceRef) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 1, 5, 1}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered_InterfaceRef) GetConfig() *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered_InterfaceRef_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered_InterfaceRef) GetState() *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered_InterfaceRef_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled *ywrapper.BoolValue `protobuf:"bytes,165972743,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered_State) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered_State) ProtoMessage() {}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered_State.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered_State) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 1, 5, 2}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered_State) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered_InterfaceRef_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interface    *ywrapper.StringValue `protobuf:"bytes,462989376,opt,name=interface,proto3" json:"interface,omitempty"`
	Subinterface *ywrapper.UintValue   `protobuf:"bytes,347895728,opt,name=subinterface,proto3" json:"subinterface,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered_InterfaceRef_Config) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered_InterfaceRef_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered_InterfaceRef_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered_InterfaceRef_Config) ProtoMessage() {
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered_InterfaceRef_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered_InterfaceRef_Config.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered_InterfaceRef_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 1, 5, 1, 0}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered_InterfaceRef_Config) GetInterface() *ywrapper.StringValue {
	if x != nil {
		return x.Interface
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered_InterfaceRef_Config) GetSubinterface() *ywrapper.UintValue {
	if x != nil {
		return x.Subinterface
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered_InterfaceRef_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interface    *ywrapper.StringValue `protobuf:"bytes,185203677,opt,name=interface,proto3" json:"interface,omitempty"`
	Subinterface *ywrapper.UintValue   `protobuf:"bytes,516886255,opt,name=subinterface,proto3" json:"subinterface,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered_InterfaceRef_State) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered_InterfaceRef_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered_InterfaceRef_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered_InterfaceRef_State) ProtoMessage() {
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered_InterfaceRef_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered_InterfaceRef_State.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered_InterfaceRef_State) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 1, 5, 1, 1}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered_InterfaceRef_State) GetInterface() *ywrapper.StringValue {
	if x != nil {
		return x.Interface
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered_InterfaceRef_State) GetSubinterface() *ywrapper.UintValue {
	if x != nil {
		return x.Subinterface
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address []*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_AddressKey `protobuf:"bytes,332836913,rep,name=address,proto3" json:"address,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses) ProtoMessage() {}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 2, 0}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses) GetAddress() []*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_AddressKey {
	if x != nil {
		return x.Address
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Autoconf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Autoconf_Config `protobuf:"bytes,435132648,opt,name=config,proto3" json:"config,omitempty"`
	State  *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Autoconf_State  `protobuf:"bytes,112220417,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Autoconf) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Autoconf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Autoconf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Autoconf) ProtoMessage() {}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Autoconf) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Autoconf.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Autoconf) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 2, 1}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Autoconf) GetConfig() *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Autoconf_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Autoconf) GetState() *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Autoconf_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DhcpClient             *ywrapper.BoolValue `protobuf:"bytes,67735920,opt,name=dhcp_client,json=dhcpClient,proto3" json:"dhcp_client,omitempty"`
	DupAddrDetectTransmits *ywrapper.UintValue `protobuf:"bytes,205454088,opt,name=dup_addr_detect_transmits,json=dupAddrDetectTransmits,proto3" json:"dup_addr_detect_transmits,omitempty"`
	Enabled                *ywrapper.BoolValue `protobuf:"bytes,253027964,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Mtu                    *ywrapper.UintValue `protobuf:"bytes,255734467,opt,name=mtu,proto3" json:"mtu,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Config) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Config) ProtoMessage() {}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Config.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 2, 2}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Config) GetDhcpClient() *ywrapper.BoolValue {
	if x != nil {
		return x.DhcpClient
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Config) GetDupAddrDetectTransmits() *ywrapper.UintValue {
	if x != nil {
		return x.DupAddrDetectTransmits
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Config) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Config) GetMtu() *ywrapper.UintValue {
	if x != nil {
		return x.Mtu
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Neighbor []*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_NeighborKey `protobuf:"bytes,66223230,rep,name=neighbor,proto3" json:"neighbor,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors) ProtoMessage() {}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 2, 3}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors) GetNeighbor() []*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_NeighborKey {
	if x != nil {
		return x.Neighbor
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement_Config `protobuf:"bytes,257292352,opt,name=config,proto3" json:"config,omitempty"`
	State  *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement_State  `protobuf:"bytes,426406201,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement) ProtoMessage() {}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 2, 4}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement) GetConfig() *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement) GetState() *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Counters               *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State_Counters `protobuf:"bytes,211415865,opt,name=counters,proto3" json:"counters,omitempty"`
	DhcpClient             *ywrapper.BoolValue                                                  `protobuf:"bytes,372073589,opt,name=dhcp_client,json=dhcpClient,proto3" json:"dhcp_client,omitempty"`
	DupAddrDetectTransmits *ywrapper.UintValue                                                  `protobuf:"bytes,32542497,opt,name=dup_addr_detect_transmits,json=dupAddrDetectTransmits,proto3" json:"dup_addr_detect_transmits,omitempty"`
	Enabled                *ywrapper.BoolValue                                                  `protobuf:"bytes,405501581,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Mtu                    *ywrapper.UintValue                                                  `protobuf:"bytes,236350406,opt,name=mtu,proto3" json:"mtu,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State) ProtoMessage() {}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 2, 5}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State) GetCounters() *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State_Counters {
	if x != nil {
		return x.Counters
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State) GetDhcpClient() *ywrapper.BoolValue {
	if x != nil {
		return x.DhcpClient
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State) GetDupAddrDetectTransmits() *ywrapper.UintValue {
	if x != nil {
		return x.DupAddrDetectTransmits
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State) GetMtu() *ywrapper.UintValue {
	if x != nil {
		return x.Mtu
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config       *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered_Config       `protobuf:"bytes,519336986,opt,name=config,proto3" json:"config,omitempty"`
	InterfaceRef *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered_InterfaceRef `protobuf:"bytes,451937841,opt,name=interface_ref,json=interfaceRef,proto3" json:"interface_ref,omitempty"`
	State        *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered_State        `protobuf:"bytes,429792695,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered) ProtoMessage() {}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 2, 6}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered) GetConfig() *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered) GetInterfaceRef() *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered_InterfaceRef {
	if x != nil {
		return x.InterfaceRef
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered) GetState() *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Config `protobuf:"bytes,445927126,opt,name=config,proto3" json:"config,omitempty"`
	State  *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State  `protobuf:"bytes,238939779,opt,name=state,proto3" json:"state,omitempty"`
	Vrrp   *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp   `protobuf:"bytes,151132554,opt,name=vrrp,proto3" json:"vrrp,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address) ProtoMessage() {}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 2, 0, 0}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address) GetConfig() *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address) GetState() *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address) GetVrrp() *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp {
	if x != nil {
		return x.Vrrp
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_AddressKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip      string                                                                  `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Address *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_AddressKey) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_AddressKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_AddressKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_AddressKey) ProtoMessage() {}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_AddressKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_AddressKey.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_AddressKey) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 2, 0, 1}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_AddressKey) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_AddressKey) GetAddress() *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address {
	if x != nil {
		return x.Address
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip           *ywrapper.StringValue `protobuf:"bytes,228781322,opt,name=ip,proto3" json:"ip,omitempty"`
	PrefixLength *ywrapper.UintValue   `protobuf:"bytes,23797826,opt,name=prefix_length,json=prefixLength,proto3" json:"prefix_length,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Config) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Config) ProtoMessage() {
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Config.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 2, 0, 0, 0}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Config) GetIp() *ywrapper.StringValue {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Config) GetPrefixLength() *ywrapper.UintValue {
	if x != nil {
		return x.PrefixLength
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip           *ywrapper.StringValue                                                               `protobuf:"bytes,340131297,opt,name=ip,proto3" json:"ip,omitempty"`
	Origin       OpenconfigIfIpIpAddressOrigin                                                       `protobuf:"varint,265403532,opt,name=origin,proto3,enum=openconfig.OpenconfigIfIpIpAddressOrigin" json:"origin,omitempty"`
	PrefixLength *ywrapper.UintValue                                                                 `protobuf:"bytes,261449171,opt,name=prefix_length,json=prefixLength,proto3" json:"prefix_length,omitempty"`
	Status       Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State_Status `protobuf:"varint,330441988,opt,name=status,proto3,enum=openconfig.Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State_Status" json:"status,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State) ProtoMessage() {}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 2, 0, 0, 1}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State) GetIp() *ywrapper.StringValue {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State) GetOrigin() OpenconfigIfIpIpAddressOrigin {
	if x != nil {
		return x.Origin
	}
	return OpenconfigIfIpIpAddressOrigin_OPENCONFIGIFIPIPADDRESSORIGIN_UNSET
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State) GetPrefixLength() *ywrapper.UintValue {
	if x != nil {
		return x.PrefixLength
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State) GetStatus() Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State_Status {
	if x != nil {
		return x.Status
	}
	return Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State_STATUS_UNSET
}

type Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VrrpGroup []*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroupKey `protobuf:"bytes,164916337,rep,name=vrrp_group,json=vrrpGroup,proto3" json:"vrrp_group,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp) ProtoMessage() {}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 2, 0, 0, 2}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp) GetVrrpGroup() []*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroupKey {
	if x != nil {
		return x.VrrpGroup
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config            *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_Config            `protobuf:"bytes,182744214,opt,name=config,proto3" json:"config,omitempty"`
	InterfaceTracking *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking `protobuf:"bytes,373418769,opt,name=interface_tracking,json=interfaceTracking,proto3" json:"interface_tracking,omitempty"`
	State             *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_State             `protobuf:"bytes,133044035,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup) ProtoMessage() {
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 2, 0, 0, 2, 0}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup) GetConfig() *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup) GetInterfaceTracking() *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking {
	if x != nil {
		return x.InterfaceTracking
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup) GetState() *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroupKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VirtualRouterId uint64                                                                                 `protobuf:"varint,1,opt,name=virtual_router_id,json=virtualRouterId,proto3" json:"virtual_router_id,omitempty"`
	VrrpGroup       *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup `protobuf:"bytes,2,opt,name=vrrp_group,json=vrrpGroup,proto3" json:"vrrp_group,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroupKey) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroupKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroupKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroupKey) ProtoMessage() {
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroupKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroupKey.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroupKey) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 2, 0, 0, 2, 1}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroupKey) GetVirtualRouterId() uint64 {
	if x != nil {
		return x.VirtualRouterId
	}
	return 0
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroupKey) GetVrrpGroup() *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup {
	if x != nil {
		return x.VrrpGroup
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AcceptMode            *ywrapper.BoolValue     `protobuf:"bytes,474973235,opt,name=accept_mode,json=acceptMode,proto3" json:"accept_mode,omitempty"`
	AdvertisementInterval *ywrapper.UintValue     `protobuf:"bytes,206648014,opt,name=advertisement_interval,json=advertisementInterval,proto3" json:"advertisement_interval,omitempty"`
	Preempt               *ywrapper.BoolValue     `protobuf:"bytes,473677782,opt,name=preempt,proto3" json:"preempt,omitempty"`
	PreemptDelay          *ywrapper.UintValue     `protobuf:"bytes,322094336,opt,name=preempt_delay,json=preemptDelay,proto3" json:"preempt_delay,omitempty"`
	Priority              *ywrapper.UintValue     `protobuf:"bytes,441053125,opt,name=priority,proto3" json:"priority,omitempty"`
	VirtualAddress        []*ywrapper.StringValue `protobuf:"bytes,50990313,rep,name=virtual_address,json=virtualAddress,proto3" json:"virtual_address,omitempty"`
	VirtualLinkLocal      *ywrapper.StringValue   `protobuf:"bytes,432847301,opt,name=virtual_link_local,json=virtualLinkLocal,proto3" json:"virtual_link_local,omitempty"`
	VirtualRouterId       *ywrapper.UintValue     `protobuf:"bytes,503768026,opt,name=virtual_router_id,json=virtualRouterId,proto3" json:"virtual_router_id,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_Config) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_Config) ProtoMessage() {
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_Config.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 2, 0, 0, 2, 0, 0}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_Config) GetAcceptMode() *ywrapper.BoolValue {
	if x != nil {
		return x.AcceptMode
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_Config) GetAdvertisementInterval() *ywrapper.UintValue {
	if x != nil {
		return x.AdvertisementInterval
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_Config) GetPreempt() *ywrapper.BoolValue {
	if x != nil {
		return x.Preempt
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_Config) GetPreemptDelay() *ywrapper.UintValue {
	if x != nil {
		return x.PreemptDelay
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_Config) GetPriority() *ywrapper.UintValue {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_Config) GetVirtualAddress() []*ywrapper.StringValue {
	if x != nil {
		return x.VirtualAddress
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_Config) GetVirtualLinkLocal() *ywrapper.StringValue {
	if x != nil {
		return x.VirtualLinkLocal
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_Config) GetVirtualRouterId() *ywrapper.UintValue {
	if x != nil {
		return x.VirtualRouterId
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_Config `protobuf:"bytes,483902134,opt,name=config,proto3" json:"config,omitempty"`
	State  *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_State  `protobuf:"bytes,460177123,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking) ProtoMessage() {
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 2, 0, 0, 2, 0, 1}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking) GetConfig() *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking) GetState() *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AcceptMode            *ywrapper.BoolValue     `protobuf:"bytes,477882174,opt,name=accept_mode,json=acceptMode,proto3" json:"accept_mode,omitempty"`
	AdvertisementInterval *ywrapper.UintValue     `protobuf:"bytes,286190105,opt,name=advertisement_interval,json=advertisementInterval,proto3" json:"advertisement_interval,omitempty"`
	CurrentPriority       *ywrapper.UintValue     `protobuf:"bytes,522580458,opt,name=current_priority,json=currentPriority,proto3" json:"current_priority,omitempty"`
	Preempt               *ywrapper.BoolValue     `protobuf:"bytes,312175291,opt,name=preempt,proto3" json:"preempt,omitempty"`
	PreemptDelay          *ywrapper.UintValue     `protobuf:"bytes,523704225,opt,name=preempt_delay,json=preemptDelay,proto3" json:"preempt_delay,omitempty"`
	Priority              *ywrapper.UintValue     `protobuf:"bytes,409525394,opt,name=priority,proto3" json:"priority,omitempty"`
	VirtualAddress        []*ywrapper.StringValue `protobuf:"bytes,182402372,rep,name=virtual_address,json=virtualAddress,proto3" json:"virtual_address,omitempty"`
	VirtualLinkLocal      *ywrapper.StringValue   `protobuf:"bytes,296089526,opt,name=virtual_link_local,json=virtualLinkLocal,proto3" json:"virtual_link_local,omitempty"`
	VirtualRouterId       *ywrapper.UintValue     `protobuf:"bytes,345063643,opt,name=virtual_router_id,json=virtualRouterId,proto3" json:"virtual_router_id,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_State) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_State) ProtoMessage() {
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_State.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_State) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 2, 0, 0, 2, 0, 2}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_State) GetAcceptMode() *ywrapper.BoolValue {
	if x != nil {
		return x.AcceptMode
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_State) GetAdvertisementInterval() *ywrapper.UintValue {
	if x != nil {
		return x.AdvertisementInterval
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_State) GetCurrentPriority() *ywrapper.UintValue {
	if x != nil {
		return x.CurrentPriority
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_State) GetPreempt() *ywrapper.BoolValue {
	if x != nil {
		return x.Preempt
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_State) GetPreemptDelay() *ywrapper.UintValue {
	if x != nil {
		return x.PreemptDelay
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_State) GetPriority() *ywrapper.UintValue {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_State) GetVirtualAddress() []*ywrapper.StringValue {
	if x != nil {
		return x.VirtualAddress
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_State) GetVirtualLinkLocal() *ywrapper.StringValue {
	if x != nil {
		return x.VirtualLinkLocal
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_State) GetVirtualRouterId() *ywrapper.UintValue {
	if x != nil {
		return x.VirtualRouterId
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PriorityDecrement *ywrapper.UintValue     `protobuf:"bytes,246785741,opt,name=priority_decrement,json=priorityDecrement,proto3" json:"priority_decrement,omitempty"`
	TrackInterface    []*ywrapper.StringValue `protobuf:"bytes,245530804,rep,name=track_interface,json=trackInterface,proto3" json:"track_interface,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_Config) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_Config) ProtoMessage() {
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_Config.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 2, 0, 0, 2, 0, 1, 0}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_Config) GetPriorityDecrement() *ywrapper.UintValue {
	if x != nil {
		return x.PriorityDecrement
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_Config) GetTrackInterface() []*ywrapper.StringValue {
	if x != nil {
		return x.TrackInterface
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PriorityDecrement *ywrapper.UintValue     `protobuf:"bytes,392096730,opt,name=priority_decrement,json=priorityDecrement,proto3" json:"priority_decrement,omitempty"`
	TrackInterface    []*ywrapper.StringValue `protobuf:"bytes,13624445,rep,name=track_interface,json=trackInterface,proto3" json:"track_interface,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_State) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_State) ProtoMessage() {
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_State.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_State) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 2, 0, 0, 2, 0, 1, 1}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_State) GetPriorityDecrement() *ywrapper.UintValue {
	if x != nil {
		return x.PriorityDecrement
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_State) GetTrackInterface() []*ywrapper.StringValue {
	if x != nil {
		return x.TrackInterface
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Autoconf_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateGlobalAddresses      *ywrapper.BoolValue `protobuf:"bytes,283958362,opt,name=create_global_addresses,json=createGlobalAddresses,proto3" json:"create_global_addresses,omitempty"`
	CreateTemporaryAddresses   *ywrapper.BoolValue `protobuf:"bytes,480709434,opt,name=create_temporary_addresses,json=createTemporaryAddresses,proto3" json:"create_temporary_addresses,omitempty"`
	TemporaryPreferredLifetime *ywrapper.UintValue `protobuf:"bytes,460729756,opt,name=temporary_preferred_lifetime,json=temporaryPreferredLifetime,proto3" json:"temporary_preferred_lifetime,omitempty"`
	TemporaryValidLifetime     *ywrapper.UintValue `protobuf:"bytes,420503847,opt,name=temporary_valid_lifetime,json=temporaryValidLifetime,proto3" json:"temporary_valid_lifetime,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Autoconf_Config) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Autoconf_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Autoconf_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Autoconf_Config) ProtoMessage() {}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Autoconf_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Autoconf_Config.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Autoconf_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 2, 1, 0}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Autoconf_Config) GetCreateGlobalAddresses() *ywrapper.BoolValue {
	if x != nil {
		return x.CreateGlobalAddresses
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Autoconf_Config) GetCreateTemporaryAddresses() *ywrapper.BoolValue {
	if x != nil {
		return x.CreateTemporaryAddresses
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Autoconf_Config) GetTemporaryPreferredLifetime() *ywrapper.UintValue {
	if x != nil {
		return x.TemporaryPreferredLifetime
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Autoconf_Config) GetTemporaryValidLifetime() *ywrapper.UintValue {
	if x != nil {
		return x.TemporaryValidLifetime
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Autoconf_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateGlobalAddresses      *ywrapper.BoolValue `protobuf:"bytes,20274687,opt,name=create_global_addresses,json=createGlobalAddresses,proto3" json:"create_global_addresses,omitempty"`
	CreateTemporaryAddresses   *ywrapper.BoolValue `protobuf:"bytes,105164893,opt,name=create_temporary_addresses,json=createTemporaryAddresses,proto3" json:"create_temporary_addresses,omitempty"`
	TemporaryPreferredLifetime *ywrapper.UintValue `protobuf:"bytes,254855747,opt,name=temporary_preferred_lifetime,json=temporaryPreferredLifetime,proto3" json:"temporary_preferred_lifetime,omitempty"`
	TemporaryValidLifetime     *ywrapper.UintValue `protobuf:"bytes,358129400,opt,name=temporary_valid_lifetime,json=temporaryValidLifetime,proto3" json:"temporary_valid_lifetime,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Autoconf_State) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Autoconf_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Autoconf_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Autoconf_State) ProtoMessage() {}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Autoconf_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Autoconf_State.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Autoconf_State) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 2, 1, 1}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Autoconf_State) GetCreateGlobalAddresses() *ywrapper.BoolValue {
	if x != nil {
		return x.CreateGlobalAddresses
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Autoconf_State) GetCreateTemporaryAddresses() *ywrapper.BoolValue {
	if x != nil {
		return x.CreateTemporaryAddresses
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Autoconf_State) GetTemporaryPreferredLifetime() *ywrapper.UintValue {
	if x != nil {
		return x.TemporaryPreferredLifetime
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Autoconf_State) GetTemporaryValidLifetime() *ywrapper.UintValue {
	if x != nil {
		return x.TemporaryValidLifetime
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_Config `protobuf:"bytes,121848399,opt,name=config,proto3" json:"config,omitempty"`
	State  *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State  `protobuf:"bytes,141753408,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor) ProtoMessage() {}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 2, 3, 0}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor) GetConfig() *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor) GetState() *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_NeighborKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip       string                                                                   `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Neighbor *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor `protobuf:"bytes,2,opt,name=neighbor,proto3" json:"neighbor,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_NeighborKey) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_NeighborKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_NeighborKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_NeighborKey) ProtoMessage() {}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_NeighborKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_NeighborKey.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_NeighborKey) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 2, 3, 1}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_NeighborKey) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_NeighborKey) GetNeighbor() *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor {
	if x != nil {
		return x.Neighbor
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip               *ywrapper.StringValue `protobuf:"bytes,71248829,opt,name=ip,proto3" json:"ip,omitempty"`
	LinkLayerAddress *ywrapper.StringValue `protobuf:"bytes,233623417,opt,name=link_layer_address,json=linkLayerAddress,proto3" json:"link_layer_address,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_Config) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_Config) ProtoMessage() {
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_Config.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 2, 3, 0, 0}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_Config) GetIp() *ywrapper.StringValue {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_Config) GetLinkLayerAddress() *ywrapper.StringValue {
	if x != nil {
		return x.LinkLayerAddress
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip               *ywrapper.StringValue                                                                       `protobuf:"bytes,319112268,opt,name=ip,proto3" json:"ip,omitempty"`
	IsRouter         *ywrapper.BoolValue                                                                         `protobuf:"bytes,444173615,opt,name=is_router,json=isRouter,proto3" json:"is_router,omitempty"`
	LinkLayerAddress *ywrapper.StringValue                                                                       `protobuf:"bytes,484169372,opt,name=link_layer_address,json=linkLayerAddress,proto3" json:"link_layer_address,omitempty"`
	NeighborState    Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State_NeighborState `protobuf:"varint,89361925,opt,name=neighbor_state,json=neighborState,proto3,enum=openconfig.Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State_NeighborState" json:"neighbor_state,omitempty"`
	Origin           OpenconfigIfIpNeighborOrigin                                                                `protobuf:"varint,158224829,opt,name=origin,proto3,enum=openconfig.OpenconfigIfIpNeighborOrigin" json:"origin,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State) ProtoMessage() {
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 2, 3, 0, 1}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State) GetIp() *ywrapper.StringValue {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State) GetIsRouter() *ywrapper.BoolValue {
	if x != nil {
		return x.IsRouter
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State) GetLinkLayerAddress() *ywrapper.StringValue {
	if x != nil {
		return x.LinkLayerAddress
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State) GetNeighborState() Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State_NeighborState {
	if x != nil {
		return x.NeighborState
	}
	return Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State_NEIGHBORSTATE_UNSET
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State) GetOrigin() OpenconfigIfIpNeighborOrigin {
	if x != nil {
		return x.Origin
	}
	return OpenconfigIfIpNeighborOrigin_OPENCONFIGIFIPNEIGHBORORIGIN_UNSET
}

type Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interval *ywrapper.UintValue `protobuf:"bytes,238405632,opt,name=interval,proto3" json:"interval,omitempty"`
	Lifetime *ywrapper.UintValue `protobuf:"bytes,524948482,opt,name=lifetime,proto3" json:"lifetime,omitempty"`
	Suppress *ywrapper.BoolValue `protobuf:"bytes,336253082,opt,name=suppress,proto3" json:"suppress,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement_Config) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement_Config) ProtoMessage() {
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement_Config.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 2, 4, 0}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement_Config) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement_Config) GetLifetime() *ywrapper.UintValue {
	if x != nil {
		return x.Lifetime
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement_Config) GetSuppress() *ywrapper.BoolValue {
	if x != nil {
		return x.Suppress
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interval *ywrapper.UintValue `protobuf:"bytes,305345919,opt,name=interval,proto3" json:"interval,omitempty"`
	Lifetime *ywrapper.UintValue `protobuf:"bytes,151541253,opt,name=lifetime,proto3" json:"lifetime,omitempty"`
	Suppress *ywrapper.BoolValue `protobuf:"bytes,189607749,opt,name=suppress,proto3" json:"suppress,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement_State) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement_State) ProtoMessage() {
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement_State.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement_State) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 2, 4, 1}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement_State) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement_State) GetLifetime() *ywrapper.UintValue {
	if x != nil {
		return x.Lifetime
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement_State) GetSuppress() *ywrapper.BoolValue {
	if x != nil {
		return x.Suppress
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State_Counters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InDiscardedPkts    *ywrapper.UintValue `protobuf:"bytes,434884732,opt,name=in_discarded_pkts,json=inDiscardedPkts,proto3" json:"in_discarded_pkts,omitempty"`
	InErrorPkts        *ywrapper.UintValue `protobuf:"bytes,172406437,opt,name=in_error_pkts,json=inErrorPkts,proto3" json:"in_error_pkts,omitempty"`
	InForwardedOctets  *ywrapper.UintValue `protobuf:"bytes,379953975,opt,name=in_forwarded_octets,json=inForwardedOctets,proto3" json:"in_forwarded_octets,omitempty"`
	InForwardedPkts    *ywrapper.UintValue `protobuf:"bytes,182415255,opt,name=in_forwarded_pkts,json=inForwardedPkts,proto3" json:"in_forwarded_pkts,omitempty"`
	InOctets           *ywrapper.UintValue `protobuf:"bytes,109755954,opt,name=in_octets,json=inOctets,proto3" json:"in_octets,omitempty"`
	InPkts             *ywrapper.UintValue `protobuf:"bytes,276237266,opt,name=in_pkts,json=inPkts,proto3" json:"in_pkts,omitempty"`
	OutDiscardedPkts   *ywrapper.UintValue `protobuf:"bytes,255300923,opt,name=out_discarded_pkts,json=outDiscardedPkts,proto3" json:"out_discarded_pkts,omitempty"`
	OutErrorPkts       *ywrapper.UintValue `protobuf:"bytes,183019222,opt,name=out_error_pkts,json=outErrorPkts,proto3" json:"out_error_pkts,omitempty"`
	OutForwardedOctets *ywrapper.UintValue `protobuf:"bytes,38309568,opt,name=out_forwarded_octets,json=outForwardedOctets,proto3" json:"out_forwarded_octets,omitempty"`
	OutForwardedPkts   *ywrapper.UintValue `protobuf:"bytes,54486180,opt,name=out_forwarded_pkts,json=outForwardedPkts,proto3" json:"out_forwarded_pkts,omitempty"`
	OutOctets          *ywrapper.UintValue `protobuf:"bytes,116847869,opt,name=out_octets,json=outOctets,proto3" json:"out_octets,omitempty"`
	OutPkts            *ywrapper.UintValue `protobuf:"bytes,56040841,opt,name=out_pkts,json=outPkts,proto3" json:"out_pkts,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State_Counters) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State_Counters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State_Counters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State_Counters) ProtoMessage() {}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State_Counters) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State_Counters.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State_Counters) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 2, 5, 0}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State_Counters) GetInDiscardedPkts() *ywrapper.UintValue {
	if x != nil {
		return x.InDiscardedPkts
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State_Counters) GetInErrorPkts() *ywrapper.UintValue {
	if x != nil {
		return x.InErrorPkts
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State_Counters) GetInForwardedOctets() *ywrapper.UintValue {
	if x != nil {
		return x.InForwardedOctets
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State_Counters) GetInForwardedPkts() *ywrapper.UintValue {
	if x != nil {
		return x.InForwardedPkts
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State_Counters) GetInOctets() *ywrapper.UintValue {
	if x != nil {
		return x.InOctets
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State_Counters) GetInPkts() *ywrapper.UintValue {
	if x != nil {
		return x.InPkts
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State_Counters) GetOutDiscardedPkts() *ywrapper.UintValue {
	if x != nil {
		return x.OutDiscardedPkts
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State_Counters) GetOutErrorPkts() *ywrapper.UintValue {
	if x != nil {
		return x.OutErrorPkts
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State_Counters) GetOutForwardedOctets() *ywrapper.UintValue {
	if x != nil {
		return x.OutForwardedOctets
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State_Counters) GetOutForwardedPkts() *ywrapper.UintValue {
	if x != nil {
		return x.OutForwardedPkts
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State_Counters) GetOutOctets() *ywrapper.UintValue {
	if x != nil {
		return x.OutOctets
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State_Counters) GetOutPkts() *ywrapper.UintValue {
	if x != nil {
		return x.OutPkts
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled *ywrapper.BoolValue `protobuf:"bytes,80018040,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered_Config) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered_Config) ProtoMessage() {}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered_Config.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 2, 6, 0}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered_Config) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered_InterfaceRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered_InterfaceRef_Config `protobuf:"bytes,424911062,opt,name=config,proto3" json:"config,omitempty"`
	State  *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered_InterfaceRef_State  `protobuf:"bytes,366777475,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered_InterfaceRef) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered_InterfaceRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered_InterfaceRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered_InterfaceRef) ProtoMessage() {}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered_InterfaceRef) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered_InterfaceRef.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered_InterfaceRef) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 2, 6, 1}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered_InterfaceRef) GetConfig() *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered_InterfaceRef_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered_InterfaceRef) GetState() *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered_InterfaceRef_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled *ywrapper.BoolValue `protobuf:"bytes,489402313,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered_State) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered_State) ProtoMessage() {}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered_State.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered_State) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 2, 6, 2}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered_State) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered_InterfaceRef_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interface    *ywrapper.StringValue `protobuf:"bytes,337892034,opt,name=interface,proto3" json:"interface,omitempty"`
	Subinterface *ywrapper.UintValue   `protobuf:"bytes,81083550,opt,name=subinterface,proto3" json:"subinterface,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered_InterfaceRef_Config) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered_InterfaceRef_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered_InterfaceRef_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered_InterfaceRef_Config) ProtoMessage() {
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered_InterfaceRef_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered_InterfaceRef_Config.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered_InterfaceRef_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 2, 6, 1, 0}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered_InterfaceRef_Config) GetInterface() *ywrapper.StringValue {
	if x != nil {
		return x.Interface
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered_InterfaceRef_Config) GetSubinterface() *ywrapper.UintValue {
	if x != nil {
		return x.Subinterface
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered_InterfaceRef_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interface    *ywrapper.StringValue `protobuf:"bytes,55837731,opt,name=interface,proto3" json:"interface,omitempty"`
	Subinterface *ywrapper.UintValue   `protobuf:"bytes,61119729,opt,name=subinterface,proto3" json:"subinterface,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered_InterfaceRef_State) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered_InterfaceRef_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered_InterfaceRef_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered_InterfaceRef_State) ProtoMessage() {
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered_InterfaceRef_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered_InterfaceRef_State.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered_InterfaceRef_State) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 2, 6, 1, 1}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered_InterfaceRef_State) GetInterface() *ywrapper.StringValue {
	if x != nil {
		return x.Interface
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered_InterfaceRef_State) GetSubinterface() *ywrapper.UintValue {
	if x != nil {
		return x.Subinterface
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_State_Counters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CarrierTransitions *ywrapper.UintValue `protobuf:"bytes,141120277,opt,name=carrier_transitions,json=carrierTransitions,proto3" json:"carrier_transitions,omitempty"`
	InBroadcastPkts    *ywrapper.UintValue `protobuf:"bytes,120244022,opt,name=in_broadcast_pkts,json=inBroadcastPkts,proto3" json:"in_broadcast_pkts,omitempty"`
	InDiscards         *ywrapper.UintValue `protobuf:"bytes,307490461,opt,name=in_discards,json=inDiscards,proto3" json:"in_discards,omitempty"`
	InErrors           *ywrapper.UintValue `protobuf:"bytes,319720873,opt,name=in_errors,json=inErrors,proto3" json:"in_errors,omitempty"`
	InFcsErrors        *ywrapper.UintValue `protobuf:"bytes,169858424,opt,name=in_fcs_errors,json=inFcsErrors,proto3" json:"in_fcs_errors,omitempty"`
	InMulticastPkts    *ywrapper.UintValue `protobuf:"bytes,320618859,opt,name=in_multicast_pkts,json=inMulticastPkts,proto3" json:"in_multicast_pkts,omitempty"`
	InOctets           *ywrapper.UintValue `protobuf:"bytes,530205868,opt,name=in_octets,json=inOctets,proto3" json:"in_octets,omitempty"`
	InPkts             *ywrapper.UintValue `protobuf:"bytes,441153352,opt,name=in_pkts,json=inPkts,proto3" json:"in_pkts,omitempty"`
	InUnicastPkts      *ywrapper.UintValue `protobuf:"bytes,177838880,opt,name=in_unicast_pkts,json=inUnicastPkts,proto3" json:"in_unicast_pkts,omitempty"`
	InUnknownProtos    *ywrapper.UintValue `protobuf:"bytes,146059814,opt,name=in_unknown_protos,json=inUnknownProtos,proto3" json:"in_unknown_protos,omitempty"`
	LastClear          *ywrapper.UintValue `protobuf:"bytes,518046966,opt,name=last_clear,json=lastClear,proto3" json:"last_clear,omitempty"`
	OutBroadcastPkts   *ywrapper.UintValue `protobuf:"bytes,501221245,opt,name=out_broadcast_pkts,json=outBroadcastPkts,proto3" json:"out_broadcast_pkts,omitempty"`
	OutDiscards        *ywrapper.UintValue `protobuf:"bytes,159539762,opt,name=out_discards,json=outDiscards,proto3" json:"out_discards,omitempty"`
	OutErrors          *ywrapper.UintValue `protobuf:"bytes,466636898,opt,name=out_errors,json=outErrors,proto3" json:"out_errors,omitempty"`
	OutMulticastPkts   *ywrapper.UintValue `protobuf:"bytes,326155776,opt,name=out_multicast_pkts,json=outMulticastPkts,proto3" json:"out_multicast_pkts,omitempty"`
	OutOctets          *ywrapper.UintValue `protobuf:"bytes,50579235,opt,name=out_octets,json=outOctets,proto3" json:"out_octets,omitempty"`
	OutPkts            *ywrapper.UintValue `protobuf:"bytes,29497115,opt,name=out_pkts,json=outPkts,proto3" json:"out_pkts,omitempty"`
	OutUnicastPkts     *ywrapper.UintValue `protobuf:"bytes,297910971,opt,name=out_unicast_pkts,json=outUnicastPkts,proto3" json:"out_unicast_pkts,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_State_Counters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) ProtoMessage() {}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_State_Counters.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 3, 0}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) GetCarrierTransitions() *ywrapper.UintValue {
	if x != nil {
		return x.CarrierTransitions
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) GetInBroadcastPkts() *ywrapper.UintValue {
	if x != nil {
		return x.InBroadcastPkts
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) GetInDiscards() *ywrapper.UintValue {
	if x != nil {
		return x.InDiscards
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) GetInErrors() *ywrapper.UintValue {
	if x != nil {
		return x.InErrors
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) GetInFcsErrors() *ywrapper.UintValue {
	if x != nil {
		return x.InFcsErrors
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) GetInMulticastPkts() *ywrapper.UintValue {
	if x != nil {
		return x.InMulticastPkts
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) GetInOctets() *ywrapper.UintValue {
	if x != nil {
		return x.InOctets
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) GetInPkts() *ywrapper.UintValue {
	if x != nil {
		return x.InPkts
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) GetInUnicastPkts() *ywrapper.UintValue {
	if x != nil {
		return x.InUnicastPkts
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) GetInUnknownProtos() *ywrapper.UintValue {
	if x != nil {
		return x.InUnknownProtos
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) GetLastClear() *ywrapper.UintValue {
	if x != nil {
		return x.LastClear
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) GetOutBroadcastPkts() *ywrapper.UintValue {
	if x != nil {
		return x.OutBroadcastPkts
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) GetOutDiscards() *ywrapper.UintValue {
	if x != nil {
		return x.OutDiscards
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) GetOutErrors() *ywrapper.UintValue {
	if x != nil {
		return x.OutErrors
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) GetOutMulticastPkts() *ywrapper.UintValue {
	if x != nil {
		return x.OutMulticastPkts
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) GetOutOctets() *ywrapper.UintValue {
	if x != nil {
		return x.OutOctets
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) GetOutPkts() *ywrapper.UintValue {
	if x != nil {
		return x.OutPkts
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) GetOutUnicastPkts() *ywrapper.UintValue {
	if x != nil {
		return x.OutUnicastPkts
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to VlanId:
	//	*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Config_VlanIdString
	//	*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Config_VlanIdUint64
	VlanId isInterfaces_Interface_Subinterfaces_Subinterface_Vlan_Config_VlanId `protobuf_oneof:"vlan_id"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Config) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Config) ProtoMessage() {}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Config.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 4, 0}
}

func (m *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Config) GetVlanId() isInterfaces_Interface_Subinterfaces_Subinterface_Vlan_Config_VlanId {
	if m != nil {
		return m.VlanId
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Config) GetVlanIdString() string {
	if x, ok := x.GetVlanId().(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Config_VlanIdString); ok {
		return x.VlanIdString
	}
	return ""
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Config) GetVlanIdUint64() uint64 {
	if x, ok := x.GetVlanId().(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Config_VlanIdUint64); ok {
		return x.VlanIdUint64
	}
	return 0
}

type isInterfaces_Interface_Subinterfaces_Subinterface_Vlan_Config_VlanId interface {
	isInterfaces_Interface_Subinterfaces_Subinterface_Vlan_Config_VlanId()
}

type Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Config_VlanIdString struct {
	VlanIdString string `protobuf:"bytes,70496816,opt,name=vlan_id_string,json=vlanIdString,proto3,oneof"`
}

type Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Config_VlanIdUint64 struct {
	VlanIdUint64 uint64 `protobuf:"varint,218877865,opt,name=vlan_id_uint64,json=vlanIdUint64,proto3,oneof"`
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Config_VlanIdString) isInterfaces_Interface_Subinterfaces_Subinterface_Vlan_Config_VlanId() {
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Config_VlanIdUint64) isInterfaces_Interface_Subinterfaces_Subinterface_Vlan_Config_VlanId() {
}

type Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping_Config `protobuf:"bytes,101653109,opt,name=config,proto3" json:"config,omitempty"`
	State  *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping_State  `protobuf:"bytes,312425834,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping) ProtoMessage() {}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 4, 1}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping) GetConfig() *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping) GetState() *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping_Config `protobuf:"bytes,325326277,opt,name=config,proto3" json:"config,omitempty"`
	State  *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping_State  `protobuf:"bytes,161143482,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping) ProtoMessage() {}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 4, 2}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping) GetConfig() *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping) GetState() *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DoubleTagged                *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged                `protobuf:"bytes,403737974,opt,name=double_tagged,json=doubleTagged,proto3" json:"double_tagged,omitempty"`
	DoubleTaggedInnerList       *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList       `protobuf:"bytes,522240822,opt,name=double_tagged_inner_list,json=doubleTaggedInnerList,proto3" json:"double_tagged_inner_list,omitempty"`
	DoubleTaggedInnerOuterRange *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange `protobuf:"bytes,233858807,opt,name=double_tagged_inner_outer_range,json=doubleTaggedInnerOuterRange,proto3" json:"double_tagged_inner_outer_range,omitempty"`
	DoubleTaggedInnerRange      *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange      `protobuf:"bytes,356922801,opt,name=double_tagged_inner_range,json=doubleTaggedInnerRange,proto3" json:"double_tagged_inner_range,omitempty"`
	DoubleTaggedOuterList       *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList       `protobuf:"bytes,17738489,opt,name=double_tagged_outer_list,json=doubleTaggedOuterList,proto3" json:"double_tagged_outer_list,omitempty"`
	DoubleTaggedOuterRange      *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange      `protobuf:"bytes,470735512,opt,name=double_tagged_outer_range,json=doubleTaggedOuterRange,proto3" json:"double_tagged_outer_range,omitempty"`
	SingleTagged                *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged                `protobuf:"bytes,498022799,opt,name=single_tagged,json=singleTagged,proto3" json:"single_tagged,omitempty"`
	SingleTaggedList            *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList            `protobuf:"bytes,465169032,opt,name=single_tagged_list,json=singleTaggedList,proto3" json:"single_tagged_list,omitempty"`
	SingleTaggedRange           *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange           `protobuf:"bytes,121279207,opt,name=single_tagged_range,json=singleTaggedRange,proto3" json:"single_tagged_range,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match) ProtoMessage() {}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 4, 3}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match) GetDoubleTagged() *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged {
	if x != nil {
		return x.DoubleTagged
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match) GetDoubleTaggedInnerList() *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList {
	if x != nil {
		return x.DoubleTaggedInnerList
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match) GetDoubleTaggedInnerOuterRange() *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange {
	if x != nil {
		return x.DoubleTaggedInnerOuterRange
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match) GetDoubleTaggedInnerRange() *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange {
	if x != nil {
		return x.DoubleTaggedInnerRange
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match) GetDoubleTaggedOuterList() *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList {
	if x != nil {
		return x.DoubleTaggedOuterList
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match) GetDoubleTaggedOuterRange() *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange {
	if x != nil {
		return x.DoubleTaggedOuterRange
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match) GetSingleTagged() *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged {
	if x != nil {
		return x.SingleTagged
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match) GetSingleTaggedList() *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList {
	if x != nil {
		return x.SingleTaggedList
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match) GetSingleTaggedRange() *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange {
	if x != nil {
		return x.SingleTaggedRange
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Vlan_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to VlanId:
	//	*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_State_VlanIdString
	//	*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_State_VlanIdUint64
	VlanId isInterfaces_Interface_Subinterfaces_Subinterface_Vlan_State_VlanId `protobuf_oneof:"vlan_id"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_State) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Vlan_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_State) ProtoMessage() {}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Vlan_State.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_State) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 4, 4}
}

func (m *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_State) GetVlanId() isInterfaces_Interface_Subinterfaces_Subinterface_Vlan_State_VlanId {
	if m != nil {
		return m.VlanId
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_State) GetVlanIdString() string {
	if x, ok := x.GetVlanId().(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_State_VlanIdString); ok {
		return x.VlanIdString
	}
	return ""
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_State) GetVlanIdUint64() uint64 {
	if x, ok := x.GetVlanId().(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_State_VlanIdUint64); ok {
		return x.VlanIdUint64
	}
	return 0
}

type isInterfaces_Interface_Subinterfaces_Subinterface_Vlan_State_VlanId interface {
	isInterfaces_Interface_Subinterfaces_Subinterface_Vlan_State_VlanId()
}

type Interfaces_Interface_Subinterfaces_Subinterface_Vlan_State_VlanIdString struct {
	VlanIdString string `protobuf:"bytes,385961403,opt,name=vlan_id_string,json=vlanIdString,proto3,oneof"`
}

type Interfaces_Interface_Subinterfaces_Subinterface_Vlan_State_VlanIdUint64 struct {
	VlanIdUint64 uint64 `protobuf:"varint,420888510,opt,name=vlan_id_uint64,json=vlanIdUint64,proto3,oneof"`
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_State_VlanIdString) isInterfaces_Interface_Subinterfaces_Subinterface_Vlan_State_VlanId() {
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_State_VlanIdUint64) isInterfaces_Interface_Subinterfaces_Subinterface_Vlan_State_VlanId() {
}

type Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tpid            OpenconfigVlanTypesTPIDTYPES  `protobuf:"varint,5974643,opt,name=tpid,proto3,enum=openconfig.OpenconfigVlanTypesTPIDTYPES" json:"tpid,omitempty"`
	VlanId          *ywrapper.UintValue           `protobuf:"bytes,115904943,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
	VlanStackAction OpenconfigVlanVlanStackAction `protobuf:"varint,73085815,opt,name=vlan_stack_action,json=vlanStackAction,proto3,enum=openconfig.OpenconfigVlanVlanStackAction" json:"vlan_stack_action,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping_Config) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping_Config) ProtoMessage() {}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping_Config.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 4, 1, 0}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping_Config) GetTpid() OpenconfigVlanTypesTPIDTYPES {
	if x != nil {
		return x.Tpid
	}
	return OpenconfigVlanTypesTPIDTYPES_OPENCONFIGVLANTYPESTPIDTYPES_UNSET
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping_Config) GetVlanId() *ywrapper.UintValue {
	if x != nil {
		return x.VlanId
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping_Config) GetVlanStackAction() OpenconfigVlanVlanStackAction {
	if x != nil {
		return x.VlanStackAction
	}
	return OpenconfigVlanVlanStackAction_OPENCONFIGVLANVLANSTACKACTION_UNSET
}

type Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tpid            OpenconfigVlanTypesTPIDTYPES  `protobuf:"varint,57528614,opt,name=tpid,proto3,enum=openconfig.OpenconfigVlanTypesTPIDTYPES" json:"tpid,omitempty"`
	VlanId          *ywrapper.UintValue           `protobuf:"bytes,44609736,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
	VlanStackAction OpenconfigVlanVlanStackAction `protobuf:"varint,514423068,opt,name=vlan_stack_action,json=vlanStackAction,proto3,enum=openconfig.OpenconfigVlanVlanStackAction" json:"vlan_stack_action,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping_State) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping_State) ProtoMessage() {}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping_State.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping_State) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 4, 1, 1}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping_State) GetTpid() OpenconfigVlanTypesTPIDTYPES {
	if x != nil {
		return x.Tpid
	}
	return OpenconfigVlanTypesTPIDTYPES_OPENCONFIGVLANTYPESTPIDTYPES_UNSET
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping_State) GetVlanId() *ywrapper.UintValue {
	if x != nil {
		return x.VlanId
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping_State) GetVlanStackAction() OpenconfigVlanVlanStackAction {
	if x != nil {
		return x.VlanStackAction
	}
	return OpenconfigVlanVlanStackAction_OPENCONFIGVLANVLANSTACKACTION_UNSET
}

type Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tpid            OpenconfigVlanTypesTPIDTYPES  `protobuf:"varint,396796195,opt,name=tpid,proto3,enum=openconfig.OpenconfigVlanTypesTPIDTYPES" json:"tpid,omitempty"`
	VlanId          *ywrapper.UintValue           `protobuf:"bytes,28136351,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
	VlanStackAction OpenconfigVlanVlanStackAction `protobuf:"varint,294702087,opt,name=vlan_stack_action,json=vlanStackAction,proto3,enum=openconfig.OpenconfigVlanVlanStackAction" json:"vlan_stack_action,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping_Config) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping_Config) ProtoMessage() {}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping_Config.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 4, 2, 0}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping_Config) GetTpid() OpenconfigVlanTypesTPIDTYPES {
	if x != nil {
		return x.Tpid
	}
	return OpenconfigVlanTypesTPIDTYPES_OPENCONFIGVLANTYPESTPIDTYPES_UNSET
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping_Config) GetVlanId() *ywrapper.UintValue {
	if x != nil {
		return x.VlanId
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping_Config) GetVlanStackAction() OpenconfigVlanVlanStackAction {
	if x != nil {
		return x.VlanStackAction
	}
	return OpenconfigVlanVlanStackAction_OPENCONFIGVLANVLANSTACKACTION_UNSET
}

type Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tpid            OpenconfigVlanTypesTPIDTYPES  `protobuf:"varint,52073878,opt,name=tpid,proto3,enum=openconfig.OpenconfigVlanTypesTPIDTYPES" json:"tpid,omitempty"`
	VlanId          *ywrapper.UintValue           `protobuf:"bytes,438644152,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
	VlanStackAction OpenconfigVlanVlanStackAction `protobuf:"varint,204019884,opt,name=vlan_stack_action,json=vlanStackAction,proto3,enum=openconfig.OpenconfigVlanVlanStackAction" json:"vlan_stack_action,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping_State) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping_State) ProtoMessage() {}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping_State.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping_State) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 4, 2, 1}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping_State) GetTpid() OpenconfigVlanTypesTPIDTYPES {
	if x != nil {
		return x.Tpid
	}
	return OpenconfigVlanTypesTPIDTYPES_OPENCONFIGVLANTYPESTPIDTYPES_UNSET
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping_State) GetVlanId() *ywrapper.UintValue {
	if x != nil {
		return x.VlanId
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping_State) GetVlanStackAction() OpenconfigVlanVlanStackAction {
	if x != nil {
		return x.VlanStackAction
	}
	return OpenconfigVlanVlanStackAction_OPENCONFIGVLANVLANSTACKACTION_UNSET
}

type Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged_Config `protobuf:"bytes,192793303,opt,name=config,proto3" json:"config,omitempty"`
	State  *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged_State  `protobuf:"bytes,304973448,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged) ProtoMessage() {}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 4, 3, 0}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged) GetConfig() *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged) GetState() *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList_Config `protobuf:"bytes,102368023,opt,name=config,proto3" json:"config,omitempty"`
	State  *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList_State  `protobuf:"bytes,201627336,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList) ProtoMessage() {
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 4, 3, 1}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList) GetConfig() *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList) GetState() *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_Config `protobuf:"bytes,214097640,opt,name=config,proto3" json:"config,omitempty"`
	State  *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_State  `protobuf:"bytes,322157313,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange) ProtoMessage() {
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 4, 3, 2}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange) GetConfig() *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange) GetState() *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange_Config `protobuf:"bytes,174469974,opt,name=config,proto3" json:"config,omitempty"`
	State  *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange_State  `protobuf:"bytes,17123331,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange) ProtoMessage() {
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 4, 3, 3}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange) GetConfig() *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange) GetState() *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList_Config `protobuf:"bytes,453981006,opt,name=config,proto3" json:"config,omitempty"`
	State  *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList_State  `protobuf:"bytes,516094715,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList) ProtoMessage() {
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 4, 3, 4}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList) GetConfig() *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList) GetState() *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange_Config `protobuf:"bytes,161315741,opt,name=config,proto3" json:"config,omitempty"`
	State  *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange_State  `protobuf:"bytes,140569490,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange) ProtoMessage() {
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 4, 3, 5}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange) GetConfig() *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange) GetState() *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged_Config `protobuf:"bytes,355818224,opt,name=config,proto3" json:"config,omitempty"`
	State  *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged_State  `protobuf:"bytes,139493993,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged) ProtoMessage() {}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 4, 3, 6}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged) GetConfig() *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged) GetState() *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList_Config `protobuf:"bytes,321819245,opt,name=config,proto3" json:"config,omitempty"`
	State  *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList_State  `protobuf:"bytes,53209122,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList) ProtoMessage() {}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 4, 3, 7}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList) GetConfig() *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList) GetState() *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange_Config `protobuf:"bytes,68998008,opt,name=config,proto3" json:"config,omitempty"`
	State  *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange_State  `protobuf:"bytes,356243089,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange) ProtoMessage() {}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 4, 3, 8}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange) GetConfig() *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange) GetState() *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InnerVlanId *ywrapper.UintValue `protobuf:"bytes,487156134,opt,name=inner_vlan_id,json=innerVlanId,proto3" json:"inner_vlan_id,omitempty"`
	OuterVlanId *ywrapper.UintValue `protobuf:"bytes,239275239,opt,name=outer_vlan_id,json=outerVlanId,proto3" json:"outer_vlan_id,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged_Config) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged_Config) ProtoMessage() {
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged_Config.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 4, 3, 0, 0}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged_Config) GetInnerVlanId() *ywrapper.UintValue {
	if x != nil {
		return x.InnerVlanId
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged_Config) GetOuterVlanId() *ywrapper.UintValue {
	if x != nil {
		return x.OuterVlanId
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InnerVlanId *ywrapper.UintValue `protobuf:"bytes,535752469,opt,name=inner_vlan_id,json=innerVlanId,proto3" json:"inner_vlan_id,omitempty"`
	OuterVlanId *ywrapper.UintValue `protobuf:"bytes,5950000,opt,name=outer_vlan_id,json=outerVlanId,proto3" json:"outer_vlan_id,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged_State) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged_State) ProtoMessage() {
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged_State.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged_State) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 4, 3, 0, 1}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged_State) GetInnerVlanId() *ywrapper.UintValue {
	if x != nil {
		return x.InnerVlanId
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged_State) GetOuterVlanId() *ywrapper.UintValue {
	if x != nil {
		return x.OuterVlanId
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InnerVlanIds []*ywrapper.UintValue `protobuf:"bytes,241185761,rep,name=inner_vlan_ids,json=innerVlanIds,proto3" json:"inner_vlan_ids,omitempty"`
	OuterVlanId  *ywrapper.UintValue   `protobuf:"bytes,178462631,opt,name=outer_vlan_id,json=outerVlanId,proto3" json:"outer_vlan_id,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList_Config) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList_Config) ProtoMessage() {
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList_Config.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 4, 3, 1, 0}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList_Config) GetInnerVlanIds() []*ywrapper.UintValue {
	if x != nil {
		return x.InnerVlanIds
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList_Config) GetOuterVlanId() *ywrapper.UintValue {
	if x != nil {
		return x.OuterVlanId
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InnerVlanIds []*ywrapper.UintValue `protobuf:"bytes,454513980,rep,name=inner_vlan_ids,json=innerVlanIds,proto3" json:"inner_vlan_ids,omitempty"`
	OuterVlanId  *ywrapper.UintValue   `protobuf:"bytes,34918384,opt,name=outer_vlan_id,json=outerVlanId,proto3" json:"outer_vlan_id,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList_State) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[202]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList_State) ProtoMessage() {
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[202]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList_State.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList_State) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 4, 3, 1, 1}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList_State) GetInnerVlanIds() []*ywrapper.UintValue {
	if x != nil {
		return x.InnerVlanIds
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList_State) GetOuterVlanId() *ywrapper.UintValue {
	if x != nil {
		return x.OuterVlanId
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InnerHighVlanId *ywrapper.UintValue `protobuf:"bytes,199617942,opt,name=inner_high_vlan_id,json=innerHighVlanId,proto3" json:"inner_high_vlan_id,omitempty"`
	InnerLowVlanId  *ywrapper.UintValue `protobuf:"bytes,338513248,opt,name=inner_low_vlan_id,json=innerLowVlanId,proto3" json:"inner_low_vlan_id,omitempty"`
	OuterHighVlanId *ywrapper.UintValue `protobuf:"bytes,421546437,opt,name=outer_high_vlan_id,json=outerHighVlanId,proto3" json:"outer_high_vlan_id,omitempty"`
	OuterLowVlanId  *ywrapper.UintValue `protobuf:"bytes,423694417,opt,name=outer_low_vlan_id,json=outerLowVlanId,proto3" json:"outer_low_vlan_id,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_Config) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_Config) ProtoMessage() {
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_Config.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 4, 3, 2, 0}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_Config) GetInnerHighVlanId() *ywrapper.UintValue {
	if x != nil {
		return x.InnerHighVlanId
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_Config) GetInnerLowVlanId() *ywrapper.UintValue {
	if x != nil {
		return x.InnerLowVlanId
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_Config) GetOuterHighVlanId() *ywrapper.UintValue {
	if x != nil {
		return x.OuterHighVlanId
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_Config) GetOuterLowVlanId() *ywrapper.UintValue {
	if x != nil {
		return x.OuterLowVlanId
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InnerHighVlanId *ywrapper.UintValue `protobuf:"bytes,186056565,opt,name=inner_high_vlan_id,json=innerHighVlanId,proto3" json:"inner_high_vlan_id,omitempty"`
	InnerLowVlanId  *ywrapper.UintValue `protobuf:"bytes,51170497,opt,name=inner_low_vlan_id,json=innerLowVlanId,proto3" json:"inner_low_vlan_id,omitempty"`
	OuterHighVlanId *ywrapper.UintValue `protobuf:"bytes,169146974,opt,name=outer_high_vlan_id,json=outerHighVlanId,proto3" json:"outer_high_vlan_id,omitempty"`
	OuterLowVlanId  *ywrapper.UintValue `protobuf:"bytes,32543080,opt,name=outer_low_vlan_id,json=outerLowVlanId,proto3" json:"outer_low_vlan_id,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_State) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_State) ProtoMessage() {
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_State.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_State) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 4, 3, 2, 1}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_State) GetInnerHighVlanId() *ywrapper.UintValue {
	if x != nil {
		return x.InnerHighVlanId
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_State) GetInnerLowVlanId() *ywrapper.UintValue {
	if x != nil {
		return x.InnerLowVlanId
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_State) GetOuterHighVlanId() *ywrapper.UintValue {
	if x != nil {
		return x.OuterHighVlanId
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_State) GetOuterLowVlanId() *ywrapper.UintValue {
	if x != nil {
		return x.OuterLowVlanId
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InnerHighVlanId *ywrapper.UintValue   `protobuf:"bytes,517943948,opt,name=inner_high_vlan_id,json=innerHighVlanId,proto3" json:"inner_high_vlan_id,omitempty"`
	InnerLowVlanId  *ywrapper.UintValue   `protobuf:"bytes,415647886,opt,name=inner_low_vlan_id,json=innerLowVlanId,proto3" json:"inner_low_vlan_id,omitempty"`
	OuterVlanId     []*ywrapper.UintValue `protobuf:"bytes,518550994,rep,name=outer_vlan_id,json=outerVlanId,proto3" json:"outer_vlan_id,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange_Config) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange_Config) ProtoMessage() {
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange_Config.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 4, 3, 3, 0}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange_Config) GetInnerHighVlanId() *ywrapper.UintValue {
	if x != nil {
		return x.InnerHighVlanId
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange_Config) GetInnerLowVlanId() *ywrapper.UintValue {
	if x != nil {
		return x.InnerLowVlanId
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange_Config) GetOuterVlanId() []*ywrapper.UintValue {
	if x != nil {
		return x.OuterVlanId
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InnerHighVlanId *ywrapper.UintValue   `protobuf:"bytes,334333047,opt,name=inner_high_vlan_id,json=innerHighVlanId,proto3" json:"inner_high_vlan_id,omitempty"`
	InnerLowVlanId  *ywrapper.UintValue   `protobuf:"bytes,203259027,opt,name=inner_low_vlan_id,json=innerLowVlanId,proto3" json:"inner_low_vlan_id,omitempty"`
	OuterVlanId     []*ywrapper.UintValue `protobuf:"bytes,165879003,rep,name=outer_vlan_id,json=outerVlanId,proto3" json:"outer_vlan_id,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange_State) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange_State) ProtoMessage() {
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange_State.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange_State) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 4, 3, 3, 1}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange_State) GetInnerHighVlanId() *ywrapper.UintValue {
	if x != nil {
		return x.InnerHighVlanId
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange_State) GetInnerLowVlanId() *ywrapper.UintValue {
	if x != nil {
		return x.InnerLowVlanId
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange_State) GetOuterVlanId() []*ywrapper.UintValue {
	if x != nil {
		return x.OuterVlanId
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InnerVlanId  *ywrapper.UintValue   `protobuf:"bytes,254260451,opt,name=inner_vlan_id,json=innerVlanId,proto3" json:"inner_vlan_id,omitempty"`
	OuterVlanIds []*ywrapper.UintValue `protobuf:"bytes,334803485,rep,name=outer_vlan_ids,json=outerVlanIds,proto3" json:"outer_vlan_ids,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList_Config) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[207]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList_Config) ProtoMessage() {
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[207]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList_Config.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 4, 3, 4, 0}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList_Config) GetInnerVlanId() *ywrapper.UintValue {
	if x != nil {
		return x.InnerVlanId
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList_Config) GetOuterVlanIds() []*ywrapper.UintValue {
	if x != nil {
		return x.OuterVlanIds
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InnerVlanId  *ywrapper.UintValue   `protobuf:"bytes,114659434,opt,name=inner_vlan_id,json=innerVlanId,proto3" json:"inner_vlan_id,omitempty"`
	OuterVlanIds []*ywrapper.UintValue `protobuf:"bytes,68891946,rep,name=outer_vlan_ids,json=outerVlanIds,proto3" json:"outer_vlan_ids,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList_State) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList_State) ProtoMessage() {
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList_State.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList_State) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 4, 3, 4, 1}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList_State) GetInnerVlanId() *ywrapper.UintValue {
	if x != nil {
		return x.InnerVlanId
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList_State) GetOuterVlanIds() []*ywrapper.UintValue {
	if x != nil {
		return x.OuterVlanIds
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InnerVlanId     *ywrapper.UintValue `protobuf:"bytes,232967292,opt,name=inner_vlan_id,json=innerVlanId,proto3" json:"inner_vlan_id,omitempty"`
	OuterHighVlanId *ywrapper.UintValue `protobuf:"bytes,169135066,opt,name=outer_high_vlan_id,json=outerHighVlanId,proto3" json:"outer_high_vlan_id,omitempty"`
	OuterLowVlanId  *ywrapper.UintValue `protobuf:"bytes,535310924,opt,name=outer_low_vlan_id,json=outerLowVlanId,proto3" json:"outer_low_vlan_id,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange_Config) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[209]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange_Config) ProtoMessage() {
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[209]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange_Config.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 4, 3, 5, 0}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange_Config) GetInnerVlanId() *ywrapper.UintValue {
	if x != nil {
		return x.InnerVlanId
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange_Config) GetOuterHighVlanId() *ywrapper.UintValue {
	if x != nil {
		return x.OuterHighVlanId
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange_Config) GetOuterLowVlanId() *ywrapper.UintValue {
	if x != nil {
		return x.OuterLowVlanId
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InnerVlanId     *ywrapper.UintValue `protobuf:"bytes,151016967,opt,name=inner_vlan_id,json=innerVlanId,proto3" json:"inner_vlan_id,omitempty"`
	OuterHighVlanId *ywrapper.UintValue `protobuf:"bytes,345144627,opt,name=outer_high_vlan_id,json=outerHighVlanId,proto3" json:"outer_high_vlan_id,omitempty"`
	OuterLowVlanId  *ywrapper.UintValue `protobuf:"bytes,479311655,opt,name=outer_low_vlan_id,json=outerLowVlanId,proto3" json:"outer_low_vlan_id,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange_State) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[210]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange_State) ProtoMessage() {
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[210]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange_State.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange_State) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 4, 3, 5, 1}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange_State) GetInnerVlanId() *ywrapper.UintValue {
	if x != nil {
		return x.InnerVlanId
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange_State) GetOuterHighVlanId() *ywrapper.UintValue {
	if x != nil {
		return x.OuterHighVlanId
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange_State) GetOuterLowVlanId() *ywrapper.UintValue {
	if x != nil {
		return x.OuterLowVlanId
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VlanId *ywrapper.UintValue `protobuf:"bytes,305668962,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged_Config) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[211]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged_Config) ProtoMessage() {
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[211]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged_Config.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 4, 3, 6, 0}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged_Config) GetVlanId() *ywrapper.UintValue {
	if x != nil {
		return x.VlanId
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VlanId *ywrapper.UintValue `protobuf:"bytes,417049891,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged_State) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[212]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged_State) ProtoMessage() {
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[212]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged_State.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged_State) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 4, 3, 6, 1}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged_State) GetVlanId() *ywrapper.UintValue {
	if x != nil {
		return x.VlanId
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VlanIds []*ywrapper.UintValue `protobuf:"bytes,80041414,rep,name=vlan_ids,json=vlanIds,proto3" json:"vlan_ids,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList_Config) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[213]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList_Config) ProtoMessage() {
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[213]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList_Config.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 4, 3, 7, 0}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList_Config) GetVlanIds() []*ywrapper.UintValue {
	if x != nil {
		return x.VlanIds
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VlanIds []*ywrapper.UintValue `protobuf:"bytes,36604387,rep,name=vlan_ids,json=vlanIds,proto3" json:"vlan_ids,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList_State) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[214]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList_State) ProtoMessage() {
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[214]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList_State.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList_State) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 4, 3, 7, 1}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList_State) GetVlanIds() []*ywrapper.UintValue {
	if x != nil {
		return x.VlanIds
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HighVlanId *ywrapper.UintValue `protobuf:"bytes,77488575,opt,name=high_vlan_id,json=highVlanId,proto3" json:"high_vlan_id,omitempty"`
	LowVlanId  *ywrapper.UintValue `protobuf:"bytes,158022331,opt,name=low_vlan_id,json=lowVlanId,proto3" json:"low_vlan_id,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange_Config) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[215]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange_Config) ProtoMessage() {
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[215]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange_Config.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 4, 3, 8, 0}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange_Config) GetHighVlanId() *ywrapper.UintValue {
	if x != nil {
		return x.HighVlanId
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange_Config) GetLowVlanId() *ywrapper.UintValue {
	if x != nil {
		return x.LowVlanId
	}
	return nil
}

type Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HighVlanId *ywrapper.UintValue `protobuf:"bytes,483885100,opt,name=high_vlan_id,json=highVlanId,proto3" json:"high_vlan_id,omitempty"`
	LowVlanId  *ywrapper.UintValue `protobuf:"bytes,148946478,opt,name=low_vlan_id,json=lowVlanId,proto3" json:"low_vlan_id,omitempty"`
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange_State) Reset() {
	*x = Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[216]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange_State) ProtoMessage() {
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[216]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange_State.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange_State) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 7, 0, 4, 3, 8, 1}
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange_State) GetHighVlanId() *ywrapper.UintValue {
	if x != nil {
		return x.HighVlanId
	}
	return nil
}

func (x *Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange_State) GetLowVlanId() *ywrapper.UintValue {
	if x != nil {
		return x.LowVlanId
	}
	return nil
}

type Interfaces_Interface_Tunnel_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dst    *ywrapper.StringValue `protobuf:"bytes,407447492,opt,name=dst,proto3" json:"dst,omitempty"`
	GreKey *ywrapper.UintValue   `protobuf:"bytes,385795587,opt,name=gre_key,json=greKey,proto3" json:"gre_key,omitempty"`
	Src    *ywrapper.StringValue `protobuf:"bytes,388948675,opt,name=src,proto3" json:"src,omitempty"`
	Ttl    *ywrapper.UintValue   `protobuf:"bytes,522330921,opt,name=ttl,proto3" json:"ttl,omitempty"`
}

func (x *Interfaces_Interface_Tunnel_Config) Reset() {
	*x = Interfaces_Interface_Tunnel_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[217]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Tunnel_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Tunnel_Config) ProtoMessage() {}

func (x *Interfaces_Interface_Tunnel_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[217]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Tunnel_Config.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Tunnel_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 8, 0}
}

func (x *Interfaces_Interface_Tunnel_Config) GetDst() *ywrapper.StringValue {
	if x != nil {
		return x.Dst
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Config) GetGreKey() *ywrapper.UintValue {
	if x != nil {
		return x.GreKey
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Config) GetSrc() *ywrapper.StringValue {
	if x != nil {
		return x.Src
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Config) GetTtl() *ywrapper.UintValue {
	if x != nil {
		return x.Ttl
	}
	return nil
}

type Interfaces_Interface_Tunnel_Ipv4 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addresses  *Interfaces_Interface_Tunnel_Ipv4_Addresses  `protobuf:"bytes,80964882,opt,name=addresses,proto3" json:"addresses,omitempty"`
	Config     *Interfaces_Interface_Tunnel_Ipv4_Config     `protobuf:"bytes,80004624,opt,name=config,proto3" json:"config,omitempty"`
	Neighbors  *Interfaces_Interface_Tunnel_Ipv4_Neighbors  `protobuf:"bytes,251994831,opt,name=neighbors,proto3" json:"neighbors,omitempty"`
	ProxyArp   *Interfaces_Interface_Tunnel_Ipv4_ProxyArp   `protobuf:"bytes,477005938,opt,name=proxy_arp,json=proxyArp,proto3" json:"proxy_arp,omitempty"`
	State      *Interfaces_Interface_Tunnel_Ipv4_State      `protobuf:"bytes,43817737,opt,name=state,proto3" json:"state,omitempty"`
	Unnumbered *Interfaces_Interface_Tunnel_Ipv4_Unnumbered `protobuf:"bytes,505344555,opt,name=unnumbered,proto3" json:"unnumbered,omitempty"`
}

func (x *Interfaces_Interface_Tunnel_Ipv4) Reset() {
	*x = Interfaces_Interface_Tunnel_Ipv4{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[218]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Tunnel_Ipv4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Tunnel_Ipv4) ProtoMessage() {}

func (x *Interfaces_Interface_Tunnel_Ipv4) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[218]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Tunnel_Ipv4.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Tunnel_Ipv4) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 8, 1}
}

func (x *Interfaces_Interface_Tunnel_Ipv4) GetAddresses() *Interfaces_Interface_Tunnel_Ipv4_Addresses {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv4) GetConfig() *Interfaces_Interface_Tunnel_Ipv4_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv4) GetNeighbors() *Interfaces_Interface_Tunnel_Ipv4_Neighbors {
	if x != nil {
		return x.Neighbors
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv4) GetProxyArp() *Interfaces_Interface_Tunnel_Ipv4_ProxyArp {
	if x != nil {
		return x.ProxyArp
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv4) GetState() *Interfaces_Interface_Tunnel_Ipv4_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv4) GetUnnumbered() *Interfaces_Interface_Tunnel_Ipv4_Unnumbered {
	if x != nil {
		return x.Unnumbered
	}
	return nil
}

type Interfaces_Interface_Tunnel_Ipv6 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addresses           *Interfaces_Interface_Tunnel_Ipv6_Addresses           `protobuf:"bytes,156839092,opt,name=addresses,proto3" json:"addresses,omitempty"`
	Config              *Interfaces_Interface_Tunnel_Ipv6_Config              `protobuf:"bytes,531936962,opt,name=config,proto3" json:"config,omitempty"`
	Neighbors           *Interfaces_Interface_Tunnel_Ipv6_Neighbors           `protobuf:"bytes,67723121,opt,name=neighbors,proto3" json:"neighbors,omitempty"`
	RouterAdvertisement *Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement `protobuf:"bytes,514536595,opt,name=router_advertisement,json=routerAdvertisement,proto3" json:"router_advertisement,omitempty"`
	State               *Interfaces_Interface_Tunnel_Ipv6_State               `protobuf:"bytes,173279871,opt,name=state,proto3" json:"state,omitempty"`
	Unnumbered          *Interfaces_Interface_Tunnel_Ipv6_Unnumbered          `protobuf:"bytes,463849433,opt,name=unnumbered,proto3" json:"unnumbered,omitempty"`
}

func (x *Interfaces_Interface_Tunnel_Ipv6) Reset() {
	*x = Interfaces_Interface_Tunnel_Ipv6{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[219]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Tunnel_Ipv6) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Tunnel_Ipv6) ProtoMessage() {}

func (x *Interfaces_Interface_Tunnel_Ipv6) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[219]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Tunnel_Ipv6.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Tunnel_Ipv6) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 8, 2}
}

func (x *Interfaces_Interface_Tunnel_Ipv6) GetAddresses() *Interfaces_Interface_Tunnel_Ipv6_Addresses {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv6) GetConfig() *Interfaces_Interface_Tunnel_Ipv6_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv6) GetNeighbors() *Interfaces_Interface_Tunnel_Ipv6_Neighbors {
	if x != nil {
		return x.Neighbors
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv6) GetRouterAdvertisement() *Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement {
	if x != nil {
		return x.RouterAdvertisement
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv6) GetState() *Interfaces_Interface_Tunnel_Ipv6_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv6) GetUnnumbered() *Interfaces_Interface_Tunnel_Ipv6_Unnumbered {
	if x != nil {
		return x.Unnumbered
	}
	return nil
}

type Interfaces_Interface_Tunnel_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dst    *ywrapper.StringValue `protobuf:"bytes,72756141,opt,name=dst,proto3" json:"dst,omitempty"`
	GreKey *ywrapper.UintValue   `protobuf:"bytes,329589742,opt,name=gre_key,json=greKey,proto3" json:"gre_key,omitempty"`
	Src    *ywrapper.StringValue `protobuf:"bytes,222224598,opt,name=src,proto3" json:"src,omitempty"`
	Ttl    *ywrapper.UintValue   `protobuf:"bytes,86870672,opt,name=ttl,proto3" json:"ttl,omitempty"`
}

func (x *Interfaces_Interface_Tunnel_State) Reset() {
	*x = Interfaces_Interface_Tunnel_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[220]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Tunnel_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Tunnel_State) ProtoMessage() {}

func (x *Interfaces_Interface_Tunnel_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[220]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Tunnel_State.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Tunnel_State) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 8, 3}
}

func (x *Interfaces_Interface_Tunnel_State) GetDst() *ywrapper.StringValue {
	if x != nil {
		return x.Dst
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_State) GetGreKey() *ywrapper.UintValue {
	if x != nil {
		return x.GreKey
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_State) GetSrc() *ywrapper.StringValue {
	if x != nil {
		return x.Src
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_State) GetTtl() *ywrapper.UintValue {
	if x != nil {
		return x.Ttl
	}
	return nil
}

type Interfaces_Interface_Tunnel_Ipv4_Addresses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address []*Interfaces_Interface_Tunnel_Ipv4_Addresses_AddressKey `protobuf:"bytes,289545603,rep,name=address,proto3" json:"address,omitempty"`
}

func (x *Interfaces_Interface_Tunnel_Ipv4_Addresses) Reset() {
	*x = Interfaces_Interface_Tunnel_Ipv4_Addresses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[221]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Tunnel_Ipv4_Addresses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Tunnel_Ipv4_Addresses) ProtoMessage() {}

func (x *Interfaces_Interface_Tunnel_Ipv4_Addresses) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[221]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Tunnel_Ipv4_Addresses.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Tunnel_Ipv4_Addresses) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 8, 1, 0}
}

func (x *Interfaces_Interface_Tunnel_Ipv4_Addresses) GetAddress() []*Interfaces_Interface_Tunnel_Ipv4_Addresses_AddressKey {
	if x != nil {
		return x.Address
	}
	return nil
}

type Interfaces_Interface_Tunnel_Ipv4_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DhcpClient *ywrapper.BoolValue `protobuf:"bytes,441113402,opt,name=dhcp_client,json=dhcpClient,proto3" json:"dhcp_client,omitempty"`
	Enabled    *ywrapper.BoolValue `protobuf:"bytes,30833298,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Mtu        *ywrapper.UintValue `protobuf:"bytes,13447817,opt,name=mtu,proto3" json:"mtu,omitempty"`
}

func (x *Interfaces_Interface_Tunnel_Ipv4_Config) Reset() {
	*x = Interfaces_Interface_Tunnel_Ipv4_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[222]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Tunnel_Ipv4_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Tunnel_Ipv4_Config) ProtoMessage() {}

func (x *Interfaces_Interface_Tunnel_Ipv4_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[222]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Tunnel_Ipv4_Config.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Tunnel_Ipv4_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 8, 1, 1}
}

func (x *Interfaces_Interface_Tunnel_Ipv4_Config) GetDhcpClient() *ywrapper.BoolValue {
	if x != nil {
		return x.DhcpClient
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv4_Config) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv4_Config) GetMtu() *ywrapper.UintValue {
	if x != nil {
		return x.Mtu
	}
	return nil
}

type Interfaces_Interface_Tunnel_Ipv4_Neighbors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Neighbor []*Interfaces_Interface_Tunnel_Ipv4_Neighbors_NeighborKey `protobuf:"bytes,520300916,rep,name=neighbor,proto3" json:"neighbor,omitempty"`
}

func (x *Interfaces_Interface_Tunnel_Ipv4_Neighbors) Reset() {
	*x = Interfaces_Interface_Tunnel_Ipv4_Neighbors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[223]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Tunnel_Ipv4_Neighbors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Tunnel_Ipv4_Neighbors) ProtoMessage() {}

func (x *Interfaces_Interface_Tunnel_Ipv4_Neighbors) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[223]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Tunnel_Ipv4_Neighbors.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Tunnel_Ipv4_Neighbors) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 8, 1, 2}
}

func (x *Interfaces_Interface_Tunnel_Ipv4_Neighbors) GetNeighbor() []*Interfaces_Interface_Tunnel_Ipv4_Neighbors_NeighborKey {
	if x != nil {
		return x.Neighbor
	}
	return nil
}

type Interfaces_Interface_Tunnel_Ipv4_ProxyArp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Interfaces_Interface_Tunnel_Ipv4_ProxyArp_Config `protobuf:"bytes,496204083,opt,name=config,proto3" json:"config,omitempty"`
	State  *Interfaces_Interface_Tunnel_Ipv4_ProxyArp_State  `protobuf:"bytes,196529300,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Interfaces_Interface_Tunnel_Ipv4_ProxyArp) Reset() {
	*x = Interfaces_Interface_Tunnel_Ipv4_ProxyArp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[224]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Tunnel_Ipv4_ProxyArp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Tunnel_Ipv4_ProxyArp) ProtoMessage() {}

func (x *Interfaces_Interface_Tunnel_Ipv4_ProxyArp) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[224]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Tunnel_Ipv4_ProxyArp.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Tunnel_Ipv4_ProxyArp) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 8, 1, 3}
}

func (x *Interfaces_Interface_Tunnel_Ipv4_ProxyArp) GetConfig() *Interfaces_Interface_Tunnel_Ipv4_ProxyArp_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv4_ProxyArp) GetState() *Interfaces_Interface_Tunnel_Ipv4_ProxyArp_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Interfaces_Interface_Tunnel_Ipv4_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Counters   *Interfaces_Interface_Tunnel_Ipv4_State_Counters `protobuf:"bytes,137330435,opt,name=counters,proto3" json:"counters,omitempty"`
	DhcpClient *ywrapper.BoolValue                              `protobuf:"bytes,312635115,opt,name=dhcp_client,json=dhcpClient,proto3" json:"dhcp_client,omitempty"`
	Enabled    *ywrapper.BoolValue                              `protobuf:"bytes,425130959,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Mtu        *ywrapper.UintValue                              `protobuf:"bytes,143194352,opt,name=mtu,proto3" json:"mtu,omitempty"`
}

func (x *Interfaces_Interface_Tunnel_Ipv4_State) Reset() {
	*x = Interfaces_Interface_Tunnel_Ipv4_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[225]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Tunnel_Ipv4_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Tunnel_Ipv4_State) ProtoMessage() {}

func (x *Interfaces_Interface_Tunnel_Ipv4_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[225]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Tunnel_Ipv4_State.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Tunnel_Ipv4_State) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 8, 1, 4}
}

func (x *Interfaces_Interface_Tunnel_Ipv4_State) GetCounters() *Interfaces_Interface_Tunnel_Ipv4_State_Counters {
	if x != nil {
		return x.Counters
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv4_State) GetDhcpClient() *ywrapper.BoolValue {
	if x != nil {
		return x.DhcpClient
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv4_State) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv4_State) GetMtu() *ywrapper.UintValue {
	if x != nil {
		return x.Mtu
	}
	return nil
}

type Interfaces_Interface_Tunnel_Ipv4_Unnumbered struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config       *Interfaces_Interface_Tunnel_Ipv4_Unnumbered_Config       `protobuf:"bytes,74174588,opt,name=config,proto3" json:"config,omitempty"`
	InterfaceRef *Interfaces_Interface_Tunnel_Ipv4_Unnumbered_InterfaceRef `protobuf:"bytes,300398755,opt,name=interface_ref,json=interfaceRef,proto3" json:"interface_ref,omitempty"`
	State        *Interfaces_Interface_Tunnel_Ipv4_Unnumbered_State        `protobuf:"bytes,291915381,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Interfaces_Interface_Tunnel_Ipv4_Unnumbered) Reset() {
	*x = Interfaces_Interface_Tunnel_Ipv4_Unnumbered{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[226]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Tunnel_Ipv4_Unnumbered) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Tunnel_Ipv4_Unnumbered) ProtoMessage() {}

func (x *Interfaces_Interface_Tunnel_Ipv4_Unnumbered) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[226]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Tunnel_Ipv4_Unnumbered.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Tunnel_Ipv4_Unnumbered) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 8, 1, 5}
}

func (x *Interfaces_Interface_Tunnel_Ipv4_Unnumbered) GetConfig() *Interfaces_Interface_Tunnel_Ipv4_Unnumbered_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv4_Unnumbered) GetInterfaceRef() *Interfaces_Interface_Tunnel_Ipv4_Unnumbered_InterfaceRef {
	if x != nil {
		return x.InterfaceRef
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv4_Unnumbered) GetState() *Interfaces_Interface_Tunnel_Ipv4_Unnumbered_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Interfaces_Interface_Tunnel_Ipv4_Addresses_Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Interfaces_Interface_Tunnel_Ipv4_Addresses_Address_Config `protobuf:"bytes,140304388,opt,name=config,proto3" json:"config,omitempty"`
	State  *Interfaces_Interface_Tunnel_Ipv4_Addresses_Address_State  `protobuf:"bytes,163512861,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Interfaces_Interface_Tunnel_Ipv4_Addresses_Address) Reset() {
	*x = Interfaces_Interface_Tunnel_Ipv4_Addresses_Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[227]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Tunnel_Ipv4_Addresses_Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Tunnel_Ipv4_Addresses_Address) ProtoMessage() {}

func (x *Interfaces_Interface_Tunnel_Ipv4_Addresses_Address) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[227]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Tunnel_Ipv4_Addresses_Address.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Tunnel_Ipv4_Addresses_Address) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 8, 1, 0, 0}
}

func (x *Interfaces_Interface_Tunnel_Ipv4_Addresses_Address) GetConfig() *Interfaces_Interface_Tunnel_Ipv4_Addresses_Address_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv4_Addresses_Address) GetState() *Interfaces_Interface_Tunnel_Ipv4_Addresses_Address_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Interfaces_Interface_Tunnel_Ipv4_Addresses_AddressKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip      string                                              `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Address *Interfaces_Interface_Tunnel_Ipv4_Addresses_Address `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *Interfaces_Interface_Tunnel_Ipv4_Addresses_AddressKey) Reset() {
	*x = Interfaces_Interface_Tunnel_Ipv4_Addresses_AddressKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[228]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Tunnel_Ipv4_Addresses_AddressKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Tunnel_Ipv4_Addresses_AddressKey) ProtoMessage() {}

func (x *Interfaces_Interface_Tunnel_Ipv4_Addresses_AddressKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[228]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Tunnel_Ipv4_Addresses_AddressKey.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Tunnel_Ipv4_Addresses_AddressKey) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 8, 1, 0, 1}
}

func (x *Interfaces_Interface_Tunnel_Ipv4_Addresses_AddressKey) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Interfaces_Interface_Tunnel_Ipv4_Addresses_AddressKey) GetAddress() *Interfaces_Interface_Tunnel_Ipv4_Addresses_Address {
	if x != nil {
		return x.Address
	}
	return nil
}

type Interfaces_Interface_Tunnel_Ipv4_Addresses_Address_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip           *ywrapper.StringValue `protobuf:"bytes,11086944,opt,name=ip,proto3" json:"ip,omitempty"`
	PrefixLength *ywrapper.UintValue   `protobuf:"bytes,248286132,opt,name=prefix_length,json=prefixLength,proto3" json:"prefix_length,omitempty"`
}

func (x *Interfaces_Interface_Tunnel_Ipv4_Addresses_Address_Config) Reset() {
	*x = Interfaces_Interface_Tunnel_Ipv4_Addresses_Address_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[229]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Tunnel_Ipv4_Addresses_Address_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Tunnel_Ipv4_Addresses_Address_Config) ProtoMessage() {}

func (x *Interfaces_Interface_Tunnel_Ipv4_Addresses_Address_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[229]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Tunnel_Ipv4_Addresses_Address_Config.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Tunnel_Ipv4_Addresses_Address_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 8, 1, 0, 0, 0}
}

func (x *Interfaces_Interface_Tunnel_Ipv4_Addresses_Address_Config) GetIp() *ywrapper.StringValue {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv4_Addresses_Address_Config) GetPrefixLength() *ywrapper.UintValue {
	if x != nil {
		return x.PrefixLength
	}
	return nil
}

type Interfaces_Interface_Tunnel_Ipv4_Addresses_Address_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip           *ywrapper.StringValue         `protobuf:"bytes,338796179,opt,name=ip,proto3" json:"ip,omitempty"`
	Origin       OpenconfigIfIpIpAddressOrigin `protobuf:"varint,507326622,opt,name=origin,proto3,enum=openconfig.OpenconfigIfIpIpAddressOrigin" json:"origin,omitempty"`
	PrefixLength *ywrapper.UintValue           `protobuf:"bytes,159000321,opt,name=prefix_length,json=prefixLength,proto3" json:"prefix_length,omitempty"`
}

func (x *Interfaces_Interface_Tunnel_Ipv4_Addresses_Address_State) Reset() {
	*x = Interfaces_Interface_Tunnel_Ipv4_Addresses_Address_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[230]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Tunnel_Ipv4_Addresses_Address_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Tunnel_Ipv4_Addresses_Address_State) ProtoMessage() {}

func (x *Interfaces_Interface_Tunnel_Ipv4_Addresses_Address_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[230]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Tunnel_Ipv4_Addresses_Address_State.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Tunnel_Ipv4_Addresses_Address_State) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 8, 1, 0, 0, 1}
}

func (x *Interfaces_Interface_Tunnel_Ipv4_Addresses_Address_State) GetIp() *ywrapper.StringValue {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv4_Addresses_Address_State) GetOrigin() OpenconfigIfIpIpAddressOrigin {
	if x != nil {
		return x.Origin
	}
	return OpenconfigIfIpIpAddressOrigin_OPENCONFIGIFIPIPADDRESSORIGIN_UNSET
}

func (x *Interfaces_Interface_Tunnel_Ipv4_Addresses_Address_State) GetPrefixLength() *ywrapper.UintValue {
	if x != nil {
		return x.PrefixLength
	}
	return nil
}

type Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor_Config `protobuf:"bytes,450246137,opt,name=config,proto3" json:"config,omitempty"`
	State  *Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor_State  `protobuf:"bytes,414348110,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor) Reset() {
	*x = Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[231]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor) ProtoMessage() {}

func (x *Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[231]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 8, 1, 2, 0}
}

func (x *Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor) GetConfig() *Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor) GetState() *Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Interfaces_Interface_Tunnel_Ipv4_Neighbors_NeighborKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip       string                                               `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Neighbor *Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor `protobuf:"bytes,2,opt,name=neighbor,proto3" json:"neighbor,omitempty"`
}

func (x *Interfaces_Interface_Tunnel_Ipv4_Neighbors_NeighborKey) Reset() {
	*x = Interfaces_Interface_Tunnel_Ipv4_Neighbors_NeighborKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[232]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Tunnel_Ipv4_Neighbors_NeighborKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Tunnel_Ipv4_Neighbors_NeighborKey) ProtoMessage() {}

func (x *Interfaces_Interface_Tunnel_Ipv4_Neighbors_NeighborKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[232]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Tunnel_Ipv4_Neighbors_NeighborKey.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Tunnel_Ipv4_Neighbors_NeighborKey) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 8, 1, 2, 1}
}

func (x *Interfaces_Interface_Tunnel_Ipv4_Neighbors_NeighborKey) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Interfaces_Interface_Tunnel_Ipv4_Neighbors_NeighborKey) GetNeighbor() *Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor {
	if x != nil {
		return x.Neighbor
	}
	return nil
}

type Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip               *ywrapper.StringValue `protobuf:"bytes,517237823,opt,name=ip,proto3" json:"ip,omitempty"`
	LinkLayerAddress *ywrapper.StringValue `protobuf:"bytes,488712971,opt,name=link_layer_address,json=linkLayerAddress,proto3" json:"link_layer_address,omitempty"`
}

func (x *Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor_Config) Reset() {
	*x = Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[233]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor_Config) ProtoMessage() {}

func (x *Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[233]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor_Config.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 8, 1, 2, 0, 0}
}

func (x *Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor_Config) GetIp() *ywrapper.StringValue {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor_Config) GetLinkLayerAddress() *ywrapper.StringValue {
	if x != nil {
		return x.LinkLayerAddress
	}
	return nil
}

type Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip               *ywrapper.StringValue        `protobuf:"bytes,406689234,opt,name=ip,proto3" json:"ip,omitempty"`
	LinkLayerAddress *ywrapper.StringValue        `protobuf:"bytes,188234786,opt,name=link_layer_address,json=linkLayerAddress,proto3" json:"link_layer_address,omitempty"`
	Origin           OpenconfigIfIpNeighborOrigin `protobuf:"varint,510829643,opt,name=origin,proto3,enum=openconfig.OpenconfigIfIpNeighborOrigin" json:"origin,omitempty"`
}

func (x *Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor_State) Reset() {
	*x = Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[234]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor_State) ProtoMessage() {}

func (x *Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[234]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor_State.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor_State) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 8, 1, 2, 0, 1}
}

func (x *Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor_State) GetIp() *ywrapper.StringValue {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor_State) GetLinkLayerAddress() *ywrapper.StringValue {
	if x != nil {
		return x.LinkLayerAddress
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor_State) GetOrigin() OpenconfigIfIpNeighborOrigin {
	if x != nil {
		return x.Origin
	}
	return OpenconfigIfIpNeighborOrigin_OPENCONFIGIFIPNEIGHBORORIGIN_UNSET
}

type Interfaces_Interface_Tunnel_Ipv4_ProxyArp_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode Interfaces_Interface_Tunnel_Ipv4_ProxyArp_Config_Mode `protobuf:"varint,107738243,opt,name=mode,proto3,enum=openconfig.Interfaces_Interface_Tunnel_Ipv4_ProxyArp_Config_Mode" json:"mode,omitempty"`
}

func (x *Interfaces_Interface_Tunnel_Ipv4_ProxyArp_Config) Reset() {
	*x = Interfaces_Interface_Tunnel_Ipv4_ProxyArp_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[235]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Tunnel_Ipv4_ProxyArp_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Tunnel_Ipv4_ProxyArp_Config) ProtoMessage() {}

func (x *Interfaces_Interface_Tunnel_Ipv4_ProxyArp_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[235]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Tunnel_Ipv4_ProxyArp_Config.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Tunnel_Ipv4_ProxyArp_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 8, 1, 3, 0}
}

func (x *Interfaces_Interface_Tunnel_Ipv4_ProxyArp_Config) GetMode() Interfaces_Interface_Tunnel_Ipv4_ProxyArp_Config_Mode {
	if x != nil {
		return x.Mode
	}
	return Interfaces_Interface_Tunnel_Ipv4_ProxyArp_Config_MODE_DISABLE
}

type Interfaces_Interface_Tunnel_Ipv4_ProxyArp_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode Interfaces_Interface_Tunnel_Ipv4_ProxyArp_State_Mode `protobuf:"varint,94182882,opt,name=mode,proto3,enum=openconfig.Interfaces_Interface_Tunnel_Ipv4_ProxyArp_State_Mode" json:"mode,omitempty"`
}

func (x *Interfaces_Interface_Tunnel_Ipv4_ProxyArp_State) Reset() {
	*x = Interfaces_Interface_Tunnel_Ipv4_ProxyArp_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[236]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Tunnel_Ipv4_ProxyArp_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Tunnel_Ipv4_ProxyArp_State) ProtoMessage() {}

func (x *Interfaces_Interface_Tunnel_Ipv4_ProxyArp_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[236]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Tunnel_Ipv4_ProxyArp_State.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Tunnel_Ipv4_ProxyArp_State) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 8, 1, 3, 1}
}

func (x *Interfaces_Interface_Tunnel_Ipv4_ProxyArp_State) GetMode() Interfaces_Interface_Tunnel_Ipv4_ProxyArp_State_Mode {
	if x != nil {
		return x.Mode
	}
	return Interfaces_Interface_Tunnel_Ipv4_ProxyArp_State_MODE_DISABLE
}

type Interfaces_Interface_Tunnel_Ipv4_State_Counters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InDiscardedPkts    *ywrapper.UintValue `protobuf:"bytes,300461322,opt,name=in_discarded_pkts,json=inDiscardedPkts,proto3" json:"in_discarded_pkts,omitempty"`
	InErrorPkts        *ywrapper.UintValue `protobuf:"bytes,242979367,opt,name=in_error_pkts,json=inErrorPkts,proto3" json:"in_error_pkts,omitempty"`
	InForwardedOctets  *ywrapper.UintValue `protobuf:"bytes,220812281,opt,name=in_forwarded_octets,json=inForwardedOctets,proto3" json:"in_forwarded_octets,omitempty"`
	InForwardedPkts    *ywrapper.UintValue `protobuf:"bytes,343572029,opt,name=in_forwarded_pkts,json=inForwardedPkts,proto3" json:"in_forwarded_pkts,omitempty"`
	InOctets           *ywrapper.UintValue `protobuf:"bytes,263627224,opt,name=in_octets,json=inOctets,proto3" json:"in_octets,omitempty"`
	InPkts             *ywrapper.UintValue `protobuf:"bytes,339051452,opt,name=in_pkts,json=inPkts,proto3" json:"in_pkts,omitempty"`
	OutDiscardedPkts   *ywrapper.UintValue `protobuf:"bytes,52713637,opt,name=out_discarded_pkts,json=outDiscardedPkts,proto3" json:"out_discarded_pkts,omitempty"`
	OutErrorPkts       *ywrapper.UintValue `protobuf:"bytes,122674164,opt,name=out_error_pkts,json=outErrorPkts,proto3" json:"out_error_pkts,omitempty"`
	OutForwardedOctets *ywrapper.UintValue `protobuf:"bytes,360388598,opt,name=out_forwarded_octets,json=outForwardedOctets,proto3" json:"out_forwarded_octets,omitempty"`
	OutForwardedPkts   *ywrapper.UintValue `protobuf:"bytes,103193278,opt,name=out_forwarded_pkts,json=outForwardedPkts,proto3" json:"out_forwarded_pkts,omitempty"`
	OutOctets          *ywrapper.UintValue `protobuf:"bytes,165766263,opt,name=out_octets,json=outOctets,proto3" json:"out_octets,omitempty"`
	OutPkts            *ywrapper.UintValue `protobuf:"bytes,61189847,opt,name=out_pkts,json=outPkts,proto3" json:"out_pkts,omitempty"`
}

func (x *Interfaces_Interface_Tunnel_Ipv4_State_Counters) Reset() {
	*x = Interfaces_Interface_Tunnel_Ipv4_State_Counters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[237]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Tunnel_Ipv4_State_Counters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Tunnel_Ipv4_State_Counters) ProtoMessage() {}

func (x *Interfaces_Interface_Tunnel_Ipv4_State_Counters) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[237]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Tunnel_Ipv4_State_Counters.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Tunnel_Ipv4_State_Counters) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 8, 1, 4, 0}
}

func (x *Interfaces_Interface_Tunnel_Ipv4_State_Counters) GetInDiscardedPkts() *ywrapper.UintValue {
	if x != nil {
		return x.InDiscardedPkts
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv4_State_Counters) GetInErrorPkts() *ywrapper.UintValue {
	if x != nil {
		return x.InErrorPkts
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv4_State_Counters) GetInForwardedOctets() *ywrapper.UintValue {
	if x != nil {
		return x.InForwardedOctets
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv4_State_Counters) GetInForwardedPkts() *ywrapper.UintValue {
	if x != nil {
		return x.InForwardedPkts
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv4_State_Counters) GetInOctets() *ywrapper.UintValue {
	if x != nil {
		return x.InOctets
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv4_State_Counters) GetInPkts() *ywrapper.UintValue {
	if x != nil {
		return x.InPkts
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv4_State_Counters) GetOutDiscardedPkts() *ywrapper.UintValue {
	if x != nil {
		return x.OutDiscardedPkts
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv4_State_Counters) GetOutErrorPkts() *ywrapper.UintValue {
	if x != nil {
		return x.OutErrorPkts
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv4_State_Counters) GetOutForwardedOctets() *ywrapper.UintValue {
	if x != nil {
		return x.OutForwardedOctets
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv4_State_Counters) GetOutForwardedPkts() *ywrapper.UintValue {
	if x != nil {
		return x.OutForwardedPkts
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv4_State_Counters) GetOutOctets() *ywrapper.UintValue {
	if x != nil {
		return x.OutOctets
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv4_State_Counters) GetOutPkts() *ywrapper.UintValue {
	if x != nil {
		return x.OutPkts
	}
	return nil
}

type Interfaces_Interface_Tunnel_Ipv4_Unnumbered_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled *ywrapper.BoolValue `protobuf:"bytes,128734638,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *Interfaces_Interface_Tunnel_Ipv4_Unnumbered_Config) Reset() {
	*x = Interfaces_Interface_Tunnel_Ipv4_Unnumbered_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[238]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Tunnel_Ipv4_Unnumbered_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Tunnel_Ipv4_Unnumbered_Config) ProtoMessage() {}

func (x *Interfaces_Interface_Tunnel_Ipv4_Unnumbered_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[238]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Tunnel_Ipv4_Unnumbered_Config.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Tunnel_Ipv4_Unnumbered_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 8, 1, 5, 0}
}

func (x *Interfaces_Interface_Tunnel_Ipv4_Unnumbered_Config) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

type Interfaces_Interface_Tunnel_Ipv4_Unnumbered_InterfaceRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Interfaces_Interface_Tunnel_Ipv4_Unnumbered_InterfaceRef_Config `protobuf:"bytes,348482212,opt,name=config,proto3" json:"config,omitempty"`
	State  *Interfaces_Interface_Tunnel_Ipv4_Unnumbered_InterfaceRef_State  `protobuf:"bytes,496566333,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Interfaces_Interface_Tunnel_Ipv4_Unnumbered_InterfaceRef) Reset() {
	*x = Interfaces_Interface_Tunnel_Ipv4_Unnumbered_InterfaceRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[239]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Tunnel_Ipv4_Unnumbered_InterfaceRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Tunnel_Ipv4_Unnumbered_InterfaceRef) ProtoMessage() {}

func (x *Interfaces_Interface_Tunnel_Ipv4_Unnumbered_InterfaceRef) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[239]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Tunnel_Ipv4_Unnumbered_InterfaceRef.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Tunnel_Ipv4_Unnumbered_InterfaceRef) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 8, 1, 5, 1}
}

func (x *Interfaces_Interface_Tunnel_Ipv4_Unnumbered_InterfaceRef) GetConfig() *Interfaces_Interface_Tunnel_Ipv4_Unnumbered_InterfaceRef_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv4_Unnumbered_InterfaceRef) GetState() *Interfaces_Interface_Tunnel_Ipv4_Unnumbered_InterfaceRef_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Interfaces_Interface_Tunnel_Ipv4_Unnumbered_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled *ywrapper.BoolValue `protobuf:"bytes,452860955,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *Interfaces_Interface_Tunnel_Ipv4_Unnumbered_State) Reset() {
	*x = Interfaces_Interface_Tunnel_Ipv4_Unnumbered_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[240]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Tunnel_Ipv4_Unnumbered_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Tunnel_Ipv4_Unnumbered_State) ProtoMessage() {}

func (x *Interfaces_Interface_Tunnel_Ipv4_Unnumbered_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[240]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Tunnel_Ipv4_Unnumbered_State.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Tunnel_Ipv4_Unnumbered_State) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 8, 1, 5, 2}
}

func (x *Interfaces_Interface_Tunnel_Ipv4_Unnumbered_State) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

type Interfaces_Interface_Tunnel_Ipv4_Unnumbered_InterfaceRef_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interface    *ywrapper.StringValue `protobuf:"bytes,286971388,opt,name=interface,proto3" json:"interface,omitempty"`
	Subinterface *ywrapper.UintValue   `protobuf:"bytes,129944524,opt,name=subinterface,proto3" json:"subinterface,omitempty"`
}

func (x *Interfaces_Interface_Tunnel_Ipv4_Unnumbered_InterfaceRef_Config) Reset() {
	*x = Interfaces_Interface_Tunnel_Ipv4_Unnumbered_InterfaceRef_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[241]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Tunnel_Ipv4_Unnumbered_InterfaceRef_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Tunnel_Ipv4_Unnumbered_InterfaceRef_Config) ProtoMessage() {}

func (x *Interfaces_Interface_Tunnel_Ipv4_Unnumbered_InterfaceRef_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[241]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Tunnel_Ipv4_Unnumbered_InterfaceRef_Config.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Tunnel_Ipv4_Unnumbered_InterfaceRef_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 8, 1, 5, 1, 0}
}

func (x *Interfaces_Interface_Tunnel_Ipv4_Unnumbered_InterfaceRef_Config) GetInterface() *ywrapper.StringValue {
	if x != nil {
		return x.Interface
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv4_Unnumbered_InterfaceRef_Config) GetSubinterface() *ywrapper.UintValue {
	if x != nil {
		return x.Subinterface
	}
	return nil
}

type Interfaces_Interface_Tunnel_Ipv4_Unnumbered_InterfaceRef_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interface    *ywrapper.StringValue `protobuf:"bytes,140693161,opt,name=interface,proto3" json:"interface,omitempty"`
	Subinterface *ywrapper.UintValue   `protobuf:"bytes,198563851,opt,name=subinterface,proto3" json:"subinterface,omitempty"`
}

func (x *Interfaces_Interface_Tunnel_Ipv4_Unnumbered_InterfaceRef_State) Reset() {
	*x = Interfaces_Interface_Tunnel_Ipv4_Unnumbered_InterfaceRef_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[242]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Tunnel_Ipv4_Unnumbered_InterfaceRef_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Tunnel_Ipv4_Unnumbered_InterfaceRef_State) ProtoMessage() {}

func (x *Interfaces_Interface_Tunnel_Ipv4_Unnumbered_InterfaceRef_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[242]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Tunnel_Ipv4_Unnumbered_InterfaceRef_State.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Tunnel_Ipv4_Unnumbered_InterfaceRef_State) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 8, 1, 5, 1, 1}
}

func (x *Interfaces_Interface_Tunnel_Ipv4_Unnumbered_InterfaceRef_State) GetInterface() *ywrapper.StringValue {
	if x != nil {
		return x.Interface
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv4_Unnumbered_InterfaceRef_State) GetSubinterface() *ywrapper.UintValue {
	if x != nil {
		return x.Subinterface
	}
	return nil
}

type Interfaces_Interface_Tunnel_Ipv6_Addresses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address []*Interfaces_Interface_Tunnel_Ipv6_Addresses_AddressKey `protobuf:"bytes,95967533,rep,name=address,proto3" json:"address,omitempty"`
}

func (x *Interfaces_Interface_Tunnel_Ipv6_Addresses) Reset() {
	*x = Interfaces_Interface_Tunnel_Ipv6_Addresses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[243]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Tunnel_Ipv6_Addresses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Tunnel_Ipv6_Addresses) ProtoMessage() {}

func (x *Interfaces_Interface_Tunnel_Ipv6_Addresses) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[243]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Tunnel_Ipv6_Addresses.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Tunnel_Ipv6_Addresses) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 8, 2, 0}
}

func (x *Interfaces_Interface_Tunnel_Ipv6_Addresses) GetAddress() []*Interfaces_Interface_Tunnel_Ipv6_Addresses_AddressKey {
	if x != nil {
		return x.Address
	}
	return nil
}

type Interfaces_Interface_Tunnel_Ipv6_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DhcpClient             *ywrapper.BoolValue `protobuf:"bytes,77986268,opt,name=dhcp_client,json=dhcpClient,proto3" json:"dhcp_client,omitempty"`
	DupAddrDetectTransmits *ywrapper.UintValue `protobuf:"bytes,106510020,opt,name=dup_addr_detect_transmits,json=dupAddrDetectTransmits,proto3" json:"dup_addr_detect_transmits,omitempty"`
	Enabled                *ywrapper.BoolValue `protobuf:"bytes,77339664,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Mtu                    *ywrapper.UintValue `protobuf:"bytes,305437575,opt,name=mtu,proto3" json:"mtu,omitempty"`
}

func (x *Interfaces_Interface_Tunnel_Ipv6_Config) Reset() {
	*x = Interfaces_Interface_Tunnel_Ipv6_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[244]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Tunnel_Ipv6_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Tunnel_Ipv6_Config) ProtoMessage() {}

func (x *Interfaces_Interface_Tunnel_Ipv6_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[244]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Tunnel_Ipv6_Config.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Tunnel_Ipv6_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 8, 2, 1}
}

func (x *Interfaces_Interface_Tunnel_Ipv6_Config) GetDhcpClient() *ywrapper.BoolValue {
	if x != nil {
		return x.DhcpClient
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv6_Config) GetDupAddrDetectTransmits() *ywrapper.UintValue {
	if x != nil {
		return x.DupAddrDetectTransmits
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv6_Config) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv6_Config) GetMtu() *ywrapper.UintValue {
	if x != nil {
		return x.Mtu
	}
	return nil
}

type Interfaces_Interface_Tunnel_Ipv6_Neighbors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Neighbor []*Interfaces_Interface_Tunnel_Ipv6_Neighbors_NeighborKey `protobuf:"bytes,139864234,rep,name=neighbor,proto3" json:"neighbor,omitempty"`
}

func (x *Interfaces_Interface_Tunnel_Ipv6_Neighbors) Reset() {
	*x = Interfaces_Interface_Tunnel_Ipv6_Neighbors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[245]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Tunnel_Ipv6_Neighbors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Tunnel_Ipv6_Neighbors) ProtoMessage() {}

func (x *Interfaces_Interface_Tunnel_Ipv6_Neighbors) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[245]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Tunnel_Ipv6_Neighbors.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Tunnel_Ipv6_Neighbors) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 8, 2, 2}
}

func (x *Interfaces_Interface_Tunnel_Ipv6_Neighbors) GetNeighbor() []*Interfaces_Interface_Tunnel_Ipv6_Neighbors_NeighborKey {
	if x != nil {
		return x.Neighbor
	}
	return nil
}

type Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement_Config `protobuf:"bytes,516191028,opt,name=config,proto3" json:"config,omitempty"`
	State  *Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement_State  `protobuf:"bytes,204507213,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement) Reset() {
	*x = Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[246]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement) ProtoMessage() {}

func (x *Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[246]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 8, 2, 3}
}

func (x *Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement) GetConfig() *Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement) GetState() *Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Interfaces_Interface_Tunnel_Ipv6_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Counters               *Interfaces_Interface_Tunnel_Ipv6_State_Counters `protobuf:"bytes,360319093,opt,name=counters,proto3" json:"counters,omitempty"`
	DhcpClient             *ywrapper.BoolValue                              `protobuf:"bytes,284549857,opt,name=dhcp_client,json=dhcpClient,proto3" json:"dhcp_client,omitempty"`
	DupAddrDetectTransmits *ywrapper.UintValue                              `protobuf:"bytes,273511565,opt,name=dup_addr_detect_transmits,json=dupAddrDetectTransmits,proto3" json:"dup_addr_detect_transmits,omitempty"`
	Enabled                *ywrapper.BoolValue                              `protobuf:"bytes,497646177,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Mtu                    *ywrapper.UintValue                              `protobuf:"bytes,475794762,opt,name=mtu,proto3" json:"mtu,omitempty"`
}

func (x *Interfaces_Interface_Tunnel_Ipv6_State) Reset() {
	*x = Interfaces_Interface_Tunnel_Ipv6_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[247]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Tunnel_Ipv6_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Tunnel_Ipv6_State) ProtoMessage() {}

func (x *Interfaces_Interface_Tunnel_Ipv6_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[247]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Tunnel_Ipv6_State.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Tunnel_Ipv6_State) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 8, 2, 4}
}

func (x *Interfaces_Interface_Tunnel_Ipv6_State) GetCounters() *Interfaces_Interface_Tunnel_Ipv6_State_Counters {
	if x != nil {
		return x.Counters
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv6_State) GetDhcpClient() *ywrapper.BoolValue {
	if x != nil {
		return x.DhcpClient
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv6_State) GetDupAddrDetectTransmits() *ywrapper.UintValue {
	if x != nil {
		return x.DupAddrDetectTransmits
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv6_State) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv6_State) GetMtu() *ywrapper.UintValue {
	if x != nil {
		return x.Mtu
	}
	return nil
}

type Interfaces_Interface_Tunnel_Ipv6_Unnumbered struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config       *Interfaces_Interface_Tunnel_Ipv6_Unnumbered_Config       `protobuf:"bytes,449045294,opt,name=config,proto3" json:"config,omitempty"`
	InterfaceRef *Interfaces_Interface_Tunnel_Ipv6_Unnumbered_InterfaceRef `protobuf:"bytes,179768557,opt,name=interface_ref,json=interfaceRef,proto3" json:"interface_ref,omitempty"`
	State        *Interfaces_Interface_Tunnel_Ipv6_Unnumbered_State        `protobuf:"bytes,57707355,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Interfaces_Interface_Tunnel_Ipv6_Unnumbered) Reset() {
	*x = Interfaces_Interface_Tunnel_Ipv6_Unnumbered{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[248]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Tunnel_Ipv6_Unnumbered) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Tunnel_Ipv6_Unnumbered) ProtoMessage() {}

func (x *Interfaces_Interface_Tunnel_Ipv6_Unnumbered) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[248]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Tunnel_Ipv6_Unnumbered.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Tunnel_Ipv6_Unnumbered) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 8, 2, 5}
}

func (x *Interfaces_Interface_Tunnel_Ipv6_Unnumbered) GetConfig() *Interfaces_Interface_Tunnel_Ipv6_Unnumbered_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv6_Unnumbered) GetInterfaceRef() *Interfaces_Interface_Tunnel_Ipv6_Unnumbered_InterfaceRef {
	if x != nil {
		return x.InterfaceRef
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv6_Unnumbered) GetState() *Interfaces_Interface_Tunnel_Ipv6_Unnumbered_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Interfaces_Interface_Tunnel_Ipv6_Addresses_Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_Config `protobuf:"bytes,264788290,opt,name=config,proto3" json:"config,omitempty"`
	State  *Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State  `protobuf:"bytes,56716799,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Interfaces_Interface_Tunnel_Ipv6_Addresses_Address) Reset() {
	*x = Interfaces_Interface_Tunnel_Ipv6_Addresses_Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[249]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Tunnel_Ipv6_Addresses_Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Tunnel_Ipv6_Addresses_Address) ProtoMessage() {}

func (x *Interfaces_Interface_Tunnel_Ipv6_Addresses_Address) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[249]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Tunnel_Ipv6_Addresses_Address.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Tunnel_Ipv6_Addresses_Address) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 8, 2, 0, 0}
}

func (x *Interfaces_Interface_Tunnel_Ipv6_Addresses_Address) GetConfig() *Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv6_Addresses_Address) GetState() *Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Interfaces_Interface_Tunnel_Ipv6_Addresses_AddressKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip      string                                              `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Address *Interfaces_Interface_Tunnel_Ipv6_Addresses_Address `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *Interfaces_Interface_Tunnel_Ipv6_Addresses_AddressKey) Reset() {
	*x = Interfaces_Interface_Tunnel_Ipv6_Addresses_AddressKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[250]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Tunnel_Ipv6_Addresses_AddressKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Tunnel_Ipv6_Addresses_AddressKey) ProtoMessage() {}

func (x *Interfaces_Interface_Tunnel_Ipv6_Addresses_AddressKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[250]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Tunnel_Ipv6_Addresses_AddressKey.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Tunnel_Ipv6_Addresses_AddressKey) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 8, 2, 0, 1}
}

func (x *Interfaces_Interface_Tunnel_Ipv6_Addresses_AddressKey) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Interfaces_Interface_Tunnel_Ipv6_Addresses_AddressKey) GetAddress() *Interfaces_Interface_Tunnel_Ipv6_Addresses_Address {
	if x != nil {
		return x.Address
	}
	return nil
}

type Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip           *ywrapper.StringValue `protobuf:"bytes,203344214,opt,name=ip,proto3" json:"ip,omitempty"`
	PrefixLength *ywrapper.UintValue   `protobuf:"bytes,305652182,opt,name=prefix_length,json=prefixLength,proto3" json:"prefix_length,omitempty"`
}

func (x *Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_Config) Reset() {
	*x = Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[251]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_Config) ProtoMessage() {}

func (x *Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[251]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_Config.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 8, 2, 0, 0, 0}
}

func (x *Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_Config) GetIp() *ywrapper.StringValue {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_Config) GetPrefixLength() *ywrapper.UintValue {
	if x != nil {
		return x.PrefixLength
	}
	return nil
}

type Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip           *ywrapper.StringValue                                           `protobuf:"bytes,421752429,opt,name=ip,proto3" json:"ip,omitempty"`
	Origin       OpenconfigIfIpIpAddressOrigin                                   `protobuf:"varint,149132656,opt,name=origin,proto3,enum=openconfig.OpenconfigIfIpIpAddressOrigin" json:"origin,omitempty"`
	PrefixLength *ywrapper.UintValue                                             `protobuf:"bytes,21466823,opt,name=prefix_length,json=prefixLength,proto3" json:"prefix_length,omitempty"`
	Status       Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State_Status `protobuf:"varint,500655608,opt,name=status,proto3,enum=openconfig.Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State_Status" json:"status,omitempty"`
}

func (x *Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State) Reset() {
	*x = Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[252]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State) ProtoMessage() {}

func (x *Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[252]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 8, 2, 0, 0, 1}
}

func (x *Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State) GetIp() *ywrapper.StringValue {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State) GetOrigin() OpenconfigIfIpIpAddressOrigin {
	if x != nil {
		return x.Origin
	}
	return OpenconfigIfIpIpAddressOrigin_OPENCONFIGIFIPIPADDRESSORIGIN_UNSET
}

func (x *Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State) GetPrefixLength() *ywrapper.UintValue {
	if x != nil {
		return x.PrefixLength
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State) GetStatus() Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State_Status {
	if x != nil {
		return x.Status
	}
	return Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State_STATUS_UNSET
}

type Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_Config `protobuf:"bytes,42504827,opt,name=config,proto3" json:"config,omitempty"`
	State  *Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State  `protobuf:"bytes,336344316,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor) Reset() {
	*x = Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[253]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor) ProtoMessage() {}

func (x *Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[253]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 8, 2, 2, 0}
}

func (x *Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor) GetConfig() *Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor) GetState() *Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Interfaces_Interface_Tunnel_Ipv6_Neighbors_NeighborKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip       string                                               `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Neighbor *Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor `protobuf:"bytes,2,opt,name=neighbor,proto3" json:"neighbor,omitempty"`
}

func (x *Interfaces_Interface_Tunnel_Ipv6_Neighbors_NeighborKey) Reset() {
	*x = Interfaces_Interface_Tunnel_Ipv6_Neighbors_NeighborKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[254]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Tunnel_Ipv6_Neighbors_NeighborKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Tunnel_Ipv6_Neighbors_NeighborKey) ProtoMessage() {}

func (x *Interfaces_Interface_Tunnel_Ipv6_Neighbors_NeighborKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[254]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Tunnel_Ipv6_Neighbors_NeighborKey.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Tunnel_Ipv6_Neighbors_NeighborKey) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 8, 2, 2, 1}
}

func (x *Interfaces_Interface_Tunnel_Ipv6_Neighbors_NeighborKey) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Interfaces_Interface_Tunnel_Ipv6_Neighbors_NeighborKey) GetNeighbor() *Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor {
	if x != nil {
		return x.Neighbor
	}
	return nil
}

type Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip               *ywrapper.StringValue `protobuf:"bytes,130179369,opt,name=ip,proto3" json:"ip,omitempty"`
	LinkLayerAddress *ywrapper.StringValue `protobuf:"bytes,46317229,opt,name=link_layer_address,json=linkLayerAddress,proto3" json:"link_layer_address,omitempty"`
}

func (x *Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_Config) Reset() {
	*x = Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[255]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_Config) ProtoMessage() {}

func (x *Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[255]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_Config.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 8, 2, 2, 0, 0}
}

func (x *Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_Config) GetIp() *ywrapper.StringValue {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_Config) GetLinkLayerAddress() *ywrapper.StringValue {
	if x != nil {
		return x.LinkLayerAddress
	}
	return nil
}

type Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip               *ywrapper.StringValue                                                   `protobuf:"bytes,466249672,opt,name=ip,proto3" json:"ip,omitempty"`
	IsRouter         *ywrapper.BoolValue                                                     `protobuf:"bytes,226678379,opt,name=is_router,json=isRouter,proto3" json:"is_router,omitempty"`
	LinkLayerAddress *ywrapper.StringValue                                                   `protobuf:"bytes,521388336,opt,name=link_layer_address,json=linkLayerAddress,proto3" json:"link_layer_address,omitempty"`
	NeighborState    Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State_NeighborState `protobuf:"varint,328920689,opt,name=neighbor_state,json=neighborState,proto3,enum=openconfig.Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State_NeighborState" json:"neighbor_state,omitempty"`
	Origin           OpenconfigIfIpNeighborOrigin                                            `protobuf:"varint,150762145,opt,name=origin,proto3,enum=openconfig.OpenconfigIfIpNeighborOrigin" json:"origin,omitempty"`
}

func (x *Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State) Reset() {
	*x = Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[256]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State) ProtoMessage() {}

func (x *Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[256]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 8, 2, 2, 0, 1}
}

func (x *Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State) GetIp() *ywrapper.StringValue {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State) GetIsRouter() *ywrapper.BoolValue {
	if x != nil {
		return x.IsRouter
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State) GetLinkLayerAddress() *ywrapper.StringValue {
	if x != nil {
		return x.LinkLayerAddress
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State) GetNeighborState() Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State_NeighborState {
	if x != nil {
		return x.NeighborState
	}
	return Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State_NEIGHBORSTATE_UNSET
}

func (x *Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State) GetOrigin() OpenconfigIfIpNeighborOrigin {
	if x != nil {
		return x.Origin
	}
	return OpenconfigIfIpNeighborOrigin_OPENCONFIGIFIPNEIGHBORORIGIN_UNSET
}

type Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interval *ywrapper.UintValue `protobuf:"bytes,64667244,opt,name=interval,proto3" json:"interval,omitempty"`
	Lifetime *ywrapper.UintValue `protobuf:"bytes,123611734,opt,name=lifetime,proto3" json:"lifetime,omitempty"`
	Suppress *ywrapper.BoolValue `protobuf:"bytes,240442014,opt,name=suppress,proto3" json:"suppress,omitempty"`
}

func (x *Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement_Config) Reset() {
	*x = Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[257]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement_Config) ProtoMessage() {}

func (x *Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[257]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement_Config.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 8, 2, 3, 0}
}

func (x *Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement_Config) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement_Config) GetLifetime() *ywrapper.UintValue {
	if x != nil {
		return x.Lifetime
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement_Config) GetSuppress() *ywrapper.BoolValue {
	if x != nil {
		return x.Suppress
	}
	return nil
}

type Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interval *ywrapper.UintValue `protobuf:"bytes,509623371,opt,name=interval,proto3" json:"interval,omitempty"`
	Lifetime *ywrapper.UintValue `protobuf:"bytes,99548409,opt,name=lifetime,proto3" json:"lifetime,omitempty"`
	Suppress *ywrapper.BoolValue `protobuf:"bytes,265129657,opt,name=suppress,proto3" json:"suppress,omitempty"`
}

func (x *Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement_State) Reset() {
	*x = Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[258]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement_State) ProtoMessage() {}

func (x *Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[258]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement_State.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement_State) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 8, 2, 3, 1}
}

func (x *Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement_State) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement_State) GetLifetime() *ywrapper.UintValue {
	if x != nil {
		return x.Lifetime
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement_State) GetSuppress() *ywrapper.BoolValue {
	if x != nil {
		return x.Suppress
	}
	return nil
}

type Interfaces_Interface_Tunnel_Ipv6_State_Counters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InDiscardedPkts    *ywrapper.UintValue `protobuf:"bytes,392420528,opt,name=in_discarded_pkts,json=inDiscardedPkts,proto3" json:"in_discarded_pkts,omitempty"`
	InErrorPkts        *ywrapper.UintValue `protobuf:"bytes,368011177,opt,name=in_error_pkts,json=inErrorPkts,proto3" json:"in_error_pkts,omitempty"`
	InForwardedOctets  *ywrapper.UintValue `protobuf:"bytes,145100051,opt,name=in_forwarded_octets,json=inForwardedOctets,proto3" json:"in_forwarded_octets,omitempty"`
	InForwardedPkts    *ywrapper.UintValue `protobuf:"bytes,424519435,opt,name=in_forwarded_pkts,json=inForwardedPkts,proto3" json:"in_forwarded_pkts,omitempty"`
	InOctets           *ywrapper.UintValue `protobuf:"bytes,100034214,opt,name=in_octets,json=inOctets,proto3" json:"in_octets,omitempty"`
	InPkts             *ywrapper.UintValue `protobuf:"bytes,78574894,opt,name=in_pkts,json=inPkts,proto3" json:"in_pkts,omitempty"`
	OutDiscardedPkts   *ywrapper.UintValue `protobuf:"bytes,396349943,opt,name=out_discarded_pkts,json=outDiscardedPkts,proto3" json:"out_discarded_pkts,omitempty"`
	OutErrorPkts       *ywrapper.UintValue `protobuf:"bytes,346378226,opt,name=out_error_pkts,json=outErrorPkts,proto3" json:"out_error_pkts,omitempty"`
	OutForwardedOctets *ywrapper.UintValue `protobuf:"bytes,297849524,opt,name=out_forwarded_octets,json=outForwardedOctets,proto3" json:"out_forwarded_octets,omitempty"`
	OutForwardedPkts   *ywrapper.UintValue `protobuf:"bytes,94641360,opt,name=out_forwarded_pkts,json=outForwardedPkts,proto3" json:"out_forwarded_pkts,omitempty"`
	OutOctets          *ywrapper.UintValue `protobuf:"bytes,102979849,opt,name=out_octets,json=outOctets,proto3" json:"out_octets,omitempty"`
	OutPkts            *ywrapper.UintValue `protobuf:"bytes,122442893,opt,name=out_pkts,json=outPkts,proto3" json:"out_pkts,omitempty"`
}

func (x *Interfaces_Interface_Tunnel_Ipv6_State_Counters) Reset() {
	*x = Interfaces_Interface_Tunnel_Ipv6_State_Counters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[259]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Tunnel_Ipv6_State_Counters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Tunnel_Ipv6_State_Counters) ProtoMessage() {}

func (x *Interfaces_Interface_Tunnel_Ipv6_State_Counters) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[259]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Tunnel_Ipv6_State_Counters.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Tunnel_Ipv6_State_Counters) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 8, 2, 4, 0}
}

func (x *Interfaces_Interface_Tunnel_Ipv6_State_Counters) GetInDiscardedPkts() *ywrapper.UintValue {
	if x != nil {
		return x.InDiscardedPkts
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv6_State_Counters) GetInErrorPkts() *ywrapper.UintValue {
	if x != nil {
		return x.InErrorPkts
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv6_State_Counters) GetInForwardedOctets() *ywrapper.UintValue {
	if x != nil {
		return x.InForwardedOctets
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv6_State_Counters) GetInForwardedPkts() *ywrapper.UintValue {
	if x != nil {
		return x.InForwardedPkts
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv6_State_Counters) GetInOctets() *ywrapper.UintValue {
	if x != nil {
		return x.InOctets
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv6_State_Counters) GetInPkts() *ywrapper.UintValue {
	if x != nil {
		return x.InPkts
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv6_State_Counters) GetOutDiscardedPkts() *ywrapper.UintValue {
	if x != nil {
		return x.OutDiscardedPkts
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv6_State_Counters) GetOutErrorPkts() *ywrapper.UintValue {
	if x != nil {
		return x.OutErrorPkts
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv6_State_Counters) GetOutForwardedOctets() *ywrapper.UintValue {
	if x != nil {
		return x.OutForwardedOctets
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv6_State_Counters) GetOutForwardedPkts() *ywrapper.UintValue {
	if x != nil {
		return x.OutForwardedPkts
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv6_State_Counters) GetOutOctets() *ywrapper.UintValue {
	if x != nil {
		return x.OutOctets
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv6_State_Counters) GetOutPkts() *ywrapper.UintValue {
	if x != nil {
		return x.OutPkts
	}
	return nil
}

type Interfaces_Interface_Tunnel_Ipv6_Unnumbered_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled *ywrapper.BoolValue `protobuf:"bytes,289877452,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *Interfaces_Interface_Tunnel_Ipv6_Unnumbered_Config) Reset() {
	*x = Interfaces_Interface_Tunnel_Ipv6_Unnumbered_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[260]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Tunnel_Ipv6_Unnumbered_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Tunnel_Ipv6_Unnumbered_Config) ProtoMessage() {}

func (x *Interfaces_Interface_Tunnel_Ipv6_Unnumbered_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[260]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Tunnel_Ipv6_Unnumbered_Config.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Tunnel_Ipv6_Unnumbered_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 8, 2, 5, 0}
}

func (x *Interfaces_Interface_Tunnel_Ipv6_Unnumbered_Config) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

type Interfaces_Interface_Tunnel_Ipv6_Unnumbered_InterfaceRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Interfaces_Interface_Tunnel_Ipv6_Unnumbered_InterfaceRef_Config `protobuf:"bytes,34036866,opt,name=config,proto3" json:"config,omitempty"`
	State  *Interfaces_Interface_Tunnel_Ipv6_Unnumbered_InterfaceRef_State  `protobuf:"bytes,248904511,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Interfaces_Interface_Tunnel_Ipv6_Unnumbered_InterfaceRef) Reset() {
	*x = Interfaces_Interface_Tunnel_Ipv6_Unnumbered_InterfaceRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[261]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Tunnel_Ipv6_Unnumbered_InterfaceRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Tunnel_Ipv6_Unnumbered_InterfaceRef) ProtoMessage() {}

func (x *Interfaces_Interface_Tunnel_Ipv6_Unnumbered_InterfaceRef) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[261]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Tunnel_Ipv6_Unnumbered_InterfaceRef.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Tunnel_Ipv6_Unnumbered_InterfaceRef) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 8, 2, 5, 1}
}

func (x *Interfaces_Interface_Tunnel_Ipv6_Unnumbered_InterfaceRef) GetConfig() *Interfaces_Interface_Tunnel_Ipv6_Unnumbered_InterfaceRef_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv6_Unnumbered_InterfaceRef) GetState() *Interfaces_Interface_Tunnel_Ipv6_Unnumbered_InterfaceRef_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Interfaces_Interface_Tunnel_Ipv6_Unnumbered_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled *ywrapper.BoolValue `protobuf:"bytes,188397341,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *Interfaces_Interface_Tunnel_Ipv6_Unnumbered_State) Reset() {
	*x = Interfaces_Interface_Tunnel_Ipv6_Unnumbered_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[262]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Tunnel_Ipv6_Unnumbered_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Tunnel_Ipv6_Unnumbered_State) ProtoMessage() {}

func (x *Interfaces_Interface_Tunnel_Ipv6_Unnumbered_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[262]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Tunnel_Ipv6_Unnumbered_State.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Tunnel_Ipv6_Unnumbered_State) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 8, 2, 5, 2}
}

func (x *Interfaces_Interface_Tunnel_Ipv6_Unnumbered_State) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

type Interfaces_Interface_Tunnel_Ipv6_Unnumbered_InterfaceRef_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interface    *ywrapper.StringValue `protobuf:"bytes,515743022,opt,name=interface,proto3" json:"interface,omitempty"`
	Subinterface *ywrapper.UintValue   `protobuf:"bytes,533589066,opt,name=subinterface,proto3" json:"subinterface,omitempty"`
}

func (x *Interfaces_Interface_Tunnel_Ipv6_Unnumbered_InterfaceRef_Config) Reset() {
	*x = Interfaces_Interface_Tunnel_Ipv6_Unnumbered_InterfaceRef_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[263]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Tunnel_Ipv6_Unnumbered_InterfaceRef_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Tunnel_Ipv6_Unnumbered_InterfaceRef_Config) ProtoMessage() {}

func (x *Interfaces_Interface_Tunnel_Ipv6_Unnumbered_InterfaceRef_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[263]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Tunnel_Ipv6_Unnumbered_InterfaceRef_Config.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Tunnel_Ipv6_Unnumbered_InterfaceRef_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 8, 2, 5, 1, 0}
}

func (x *Interfaces_Interface_Tunnel_Ipv6_Unnumbered_InterfaceRef_Config) GetInterface() *ywrapper.StringValue {
	if x != nil {
		return x.Interface
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv6_Unnumbered_InterfaceRef_Config) GetSubinterface() *ywrapper.UintValue {
	if x != nil {
		return x.Subinterface
	}
	return nil
}

type Interfaces_Interface_Tunnel_Ipv6_Unnumbered_InterfaceRef_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interface    *ywrapper.StringValue `protobuf:"bytes,16057439,opt,name=interface,proto3" json:"interface,omitempty"`
	Subinterface *ywrapper.UintValue   `protobuf:"bytes,418099821,opt,name=subinterface,proto3" json:"subinterface,omitempty"`
}

func (x *Interfaces_Interface_Tunnel_Ipv6_Unnumbered_InterfaceRef_State) Reset() {
	*x = Interfaces_Interface_Tunnel_Ipv6_Unnumbered_InterfaceRef_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_interfaces_proto_msgTypes[264]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interfaces_Interface_Tunnel_Ipv6_Unnumbered_InterfaceRef_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interfaces_Interface_Tunnel_Ipv6_Unnumbered_InterfaceRef_State) ProtoMessage() {}

func (x *Interfaces_Interface_Tunnel_Ipv6_Unnumbered_InterfaceRef_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_interfaces_proto_msgTypes[264]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interfaces_Interface_Tunnel_Ipv6_Unnumbered_InterfaceRef_State.ProtoReflect.Descriptor instead.
func (*Interfaces_Interface_Tunnel_Ipv6_Unnumbered_InterfaceRef_State) Descriptor() ([]byte, []int) {
	return file_openconfig_interfaces_proto_rawDescGZIP(), []int{0, 0, 8, 2, 5, 1, 1}
}

func (x *Interfaces_Interface_Tunnel_Ipv6_Unnumbered_InterfaceRef_State) GetInterface() *ywrapper.StringValue {
	if x != nil {
		return x.Interface
	}
	return nil
}

func (x *Interfaces_Interface_Tunnel_Ipv6_Unnumbered_InterfaceRef_State) GetSubinterface() *ywrapper.UintValue {
	if x != nil {
		return x.Subinterface
	}
	return nil
}

var File_openconfig_interfaces_proto protoreflect.FileDescriptor

var file_openconfig_interfaces_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x0e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x79, 0x65, 0x78, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb7, 0x92,
	0x08, 0x0a, 0x0a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x5f, 0x0a,
	0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0xfa, 0xa7, 0xba, 0xc9, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x42, 0x18, 0x82, 0x41, 0x15, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x1a, 0xc2,
	0x90, 0x08, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x77, 0x0a,
	0x0b, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x95, 0xc8, 0xa5,
	0x7e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x24, 0x82, 0x41, 0x21, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x64, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0xeb, 0xb4, 0xac, 0x9f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x1f, 0x82, 0x41, 0x1c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6b, 0x0a, 0x08,
	0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x18, 0xf4, 0xd0, 0xfd, 0x25, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x42, 0x21, 0x82, 0x41,
	0x1e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x52,
	0x08, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x12, 0x6d, 0x0a, 0x09, 0x68, 0x6f, 0x6c,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xd4, 0xfd, 0xf1, 0x53, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x48, 0x6f, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x22, 0x82, 0x41, 0x1f, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x08,
	0x68, 0x6f, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x75, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x64, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0xb6, 0xd6, 0x9f, 0x1f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x42, 0x24, 0x82,
	0x41, 0x21, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76,
	0x6c, 0x61, 0x6e, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x12,
	0x60, 0x0a, 0x05, 0x73, 0x6f, 0x6e, 0x65, 0x74, 0x18, 0xd0, 0xb9, 0xfa, 0x86, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x6f, 0x6e, 0x65, 0x74, 0x42, 0x1e, 0x82, 0x41, 0x1b, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x6f, 0x6e, 0x65, 0x74, 0x52, 0x05, 0x73, 0x6f, 0x6e, 0x65,
	0x74, 0x12, 0x60, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xac, 0xc6, 0xe6, 0xb8, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x1e, 0x82, 0x41,
	0x1b, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x95, 0x9b, 0xa7, 0x9c, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x42,
	0x26, 0x82, 0x41, 0x23, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x64, 0x0a, 0x06, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x18, 0x97, 0xd6, 0xbd, 0x9e, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x42, 0x1f, 0x82, 0x41, 0x1c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x06, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x1a, 0xe1, 0x16, 0x0a,
	0x0b, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7c, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xba, 0xc0, 0x99, 0xff, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x2b, 0x82, 0x41, 0x28, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x77, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0xd7, 0xbe, 0xa0, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x2a, 0x82, 0x41, 0x27, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x95, 0x01, 0x0a, 0x0d, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64,
	0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x8f, 0x8a, 0x86, 0x55, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x42, 0x32, 0x82, 0x41, 0x2f, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x52, 0x0c, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x1a, 0xfc, 0x01, 0x0a, 0x06,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x84, 0x01, 0x0a, 0x08, 0x6c, 0x61, 0x67, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0xfc, 0xd7, 0x9d, 0x52, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x49, 0x66, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x34,
	0x82, 0x41, 0x31, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6c, 0x61, 0x67, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6c, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x6b, 0x0a,
	0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0xfb, 0xf6, 0xe7, 0xba, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x69, 0x6e, 0x2d, 0x6c, 0x69, 0x6e, 0x6b, 0x73,
	0x52, 0x08, 0x6d, 0x69, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x1a, 0xcc, 0x03, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x6a, 0x0a, 0x09, 0x6c, 0x61, 0x67, 0x5f, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x18, 0xc4, 0xe3, 0xde, 0xc2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x34, 0x82, 0x41, 0x31, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x61, 0x67,
	0x2d, 0x73, 0x70, 0x65, 0x65, 0x64, 0x52, 0x08, 0x6c, 0x61, 0x67, 0x53, 0x70, 0x65, 0x65, 0x64,
	0x12, 0x84, 0x01, 0x0a, 0x08, 0x6c, 0x61, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0xe3, 0xe8,
	0xdc, 0xb3, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49,
	0x66, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x33, 0x82, 0x41, 0x30, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x61, 0x67, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x07,
	0x6c, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x64, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0xe8, 0x87, 0x8e, 0xce, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x31, 0x82, 0x41, 0x2e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x6a, 0x0a,
	0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0xaa, 0xaf, 0xe3, 0xde, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x34, 0x82, 0x41, 0x31, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x69, 0x6e, 0x2d, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x52,
	0x08, 0x6d, 0x69, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x1a, 0xf4, 0x0d, 0x0a, 0x0c, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x12, 0x96, 0x01, 0x0a, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xf0, 0xc2, 0x9d, 0x5b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x2d,
	0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x93, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xe9, 0xe3,
	0xd1, 0xc2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x56, 0x6c,
	0x61, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x38, 0x82, 0x41, 0x35, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xda, 0x05, 0x0a, 0x06, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x7e, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x76,
	0x6c, 0x61, 0x6e, 0x18, 0x95, 0xac, 0xa6, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64,
	0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x56, 0x6c, 0x61, 0x6e, 0x12, 0x9b, 0x01, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0xa8, 0xa5, 0x9f, 0x86, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x6c, 0x61, 0x6e, 0x56, 0x6c, 0x61,
	0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x48, 0x82, 0x41, 0x45, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x6d,
	0x6f, 0x64, 0x65, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x7e, 0x0a, 0x0b, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x76, 0x6c, 0x61,
	0x6e, 0x18, 0xac, 0xdf, 0x97, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x45, 0x82, 0x41, 0x42, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x2d, 0x76,
	0x6c, 0x61, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6e, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x52, 0x0a, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x56, 0x6c,
	0x61, 0x6e, 0x12, 0xbb, 0x01, 0x0a, 0x0b, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x5f, 0x76, 0x6c, 0x61,
	0x6e, 0x73, 0x18, 0xc6, 0xd2, 0xcc, 0x53, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x72,
	0x75, 0x6e, 0x6b, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x45, 0x82,
	0x41, 0x42, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61,
	0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x2d, 0x76,
	0x6c, 0x61, 0x6e, 0x73, 0x52, 0x0a, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x56, 0x6c, 0x61, 0x6e, 0x73,
	0x1a, 0x74, 0x0a, 0x0f, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x55, 0x6e,
	0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x12, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x5f, 0x76, 0x6c, 0x61,
	0x6e, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0xb6, 0xd0, 0xe6, 0x94, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2f, 0x0a, 0x12, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x5f, 0x76,
	0x6c, 0x61, 0x6e, 0x73, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xf7, 0xd5, 0xc9, 0x54,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x56, 0x6c, 0x61, 0x6e, 0x73,
	0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x1a, 0xd7, 0x05, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x7d, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x18,
	0xb0, 0xf6, 0xf7, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x44, 0x82,
	0x41, 0x41, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61,
	0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x76,
	0x6c, 0x61, 0x6e, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x56, 0x6c, 0x61, 0x6e, 0x12,
	0x9a, 0x01, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x9f, 0xda, 0xa2, 0xa1, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x56, 0x6c, 0x61, 0x6e, 0x56, 0x6c, 0x61, 0x6e, 0x4d, 0x6f, 0x64, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x47, 0x82, 0x41, 0x44, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x52, 0x0d, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x7e, 0x0a, 0x0b,
	0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0xc9, 0xef, 0xb9, 0x88,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x2d, 0x76, 0x6c, 0x61, 0x6e,
	0x52, 0x0a, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x56, 0x6c, 0x61, 0x6e, 0x12, 0xba, 0x01, 0x0a,
	0x0b, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x73, 0x18, 0x87, 0xd8, 0xd1,
	0xe2, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x56, 0x6c, 0x61,
	0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x56, 0x6c, 0x61,
	0x6e, 0x73, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x0a, 0x74,
	0x72, 0x75, 0x6e, 0x6b, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x1a, 0x75, 0x0a, 0x0f, 0x54, 0x72, 0x75,
	0x6e, 0x6b, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x12,
	0x74, 0x72, 0x75, 0x6e, 0x6b, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x85, 0x9c, 0xf4, 0xca, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x72,
	0x75, 0x6e, 0x6b, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x30,
	0x0a, 0x12, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x73, 0x5f, 0x75, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x18, 0x88, 0xbb, 0xf1, 0xed, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10,
	0x74, 0x72, 0x75, 0x6e, 0x6b, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x1a, 0xab, 0x05, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x68, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xb4, 0xb3, 0xc9, 0xc7, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2b, 0x82, 0x41, 0x28,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0xed, 0xfe, 0xdf, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x27,
	0x82, 0x41, 0x24, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x6a, 0x0a, 0x0d, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0xbb, 0xb4, 0xf1, 0x78, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x2d, 0x82, 0x41, 0x2a, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x52, 0x0c,
	0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x4e, 0x0a, 0x03,
	0x6d, 0x74, 0x75, 0x18, 0xa6, 0x87, 0xb2, 0xb3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x23, 0x82, 0x41, 0x20, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x6d, 0x74, 0x75, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x12, 0x52, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x9b, 0xf0, 0xd9, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x24, 0x82, 0x41, 0x21, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x66, 0x0a, 0x04, 0x74, 0x70, 0x69, 0x64, 0x18, 0xc1, 0xa9, 0xbe, 0xdd, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x6c, 0x61, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x54, 0x50, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x24, 0x82, 0x41,
	0x21, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x74, 0x70,
	0x69, 0x64, 0x52, 0x04, 0x74, 0x70, 0x69, 0x64, 0x12, 0x64, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x9e, 0xbf, 0xf9, 0x44, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x45, 0x54, 0x46, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x24, 0x82, 0x41, 0x21, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x9c,
	0x72, 0x0a, 0x08, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x12, 0xb4, 0x01, 0x0a, 0x16,
	0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xe6, 0x80, 0xda, 0x8b, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x42, 0x38, 0x82, 0x41, 0x35, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x15, 0x61, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x75, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xf9, 0xf5, 0xaf,
	0x60, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x28, 0x82, 0x41, 0x25, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x71, 0x0a, 0x05, 0x64, 0x6f, 0x74,
	0x31, 0x78, 0x18, 0x87, 0xa6, 0xe9, 0x51, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74,
	0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x44, 0x6f, 0x74, 0x31, 0x58, 0x42, 0x27, 0x82, 0x41,
	0x24, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f,
	0x64, 0x6f, 0x74, 0x31, 0x78, 0x52, 0x05, 0x64, 0x6f, 0x74, 0x31, 0x78, 0x12, 0x6a, 0x0a, 0x03,
	0x70, 0x6f, 0x65, 0x18, 0xd9, 0xb0, 0xb4, 0xf7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x50, 0x6f, 0x65, 0x42, 0x25, 0x82, 0x41,
	0x22, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f,
	0x70, 0x6f, 0x65, 0x52, 0x03, 0x70, 0x6f, 0x65, 0x12, 0x72, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0xce, 0xf4, 0xd2, 0xc4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74,
	0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x27, 0x82, 0x41,
	0x24, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x90, 0x01, 0x0a,
	0x0d, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0xe6,
	0x8e, 0x97, 0x80, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e,
	0x42, 0x2f, 0x82, 0x41, 0x2c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x2f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61,
	0x6e, 0x52, 0x0c, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x1a,
	0xe0, 0x0b, 0x0a, 0x15, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xdf, 0x01, 0x0a, 0x15, 0x61, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0xb9, 0xbf, 0xa0, 0x7a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45,
	0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x42, 0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0xd6, 0x07, 0x0a, 0x14,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0xc9, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xbb,
	0xf6, 0xa1, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x54, 0x82, 0x41, 0x51, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x1a, 0xf1, 0x05, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x03, 0x6d,
	0x61, 0x63, 0x18, 0xaf, 0xa0, 0xc4, 0xd4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x58, 0x82, 0x41, 0x55, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x61, 0x63, 0x52, 0x03, 0x6d,
	0x61, 0x63, 0x12, 0x99, 0x01, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0xf4, 0xab, 0xdc, 0xf8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x5f, 0x82, 0x41, 0x5c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2d, 0x69, 0x64, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0xda,
	0x01, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0xdc, 0xd9, 0xb3, 0xfa, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x5b, 0x82, 0x41, 0x58, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xe6, 0x01, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x2a, 0x0a, 0x14, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x45, 0x44,
	0x10, 0x01, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43,
	0x41, 0x54, 0x45, 0x44, 0x12, 0x2c, 0x0a, 0x15, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41,
	0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x1a,
	0x11, 0x82, 0x41, 0x0e, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4e, 0x47, 0x12, 0x3a, 0x0a, 0x1c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x03, 0x1a, 0x18, 0x82, 0x41, 0x15, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f,
	0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x12, 0x34,
	0x0a, 0x19, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4c, 0x49, 0x43,
	0x41, 0x4e, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x04, 0x1a, 0x15, 0x82,
	0x41, 0x12, 0x53, 0x55, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x4e, 0x54, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x4f, 0x55, 0x54, 0x1a, 0x8b, 0x02, 0x0a, 0x17, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79,
	0x12, 0x64, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x52, 0x82,
	0x41, 0x4f, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x2f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x61,
	0x63, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12, 0x89, 0x01, 0x0a, 0x15, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x61, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x1a, 0xed, 0x06, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x72, 0x0a,
	0x0c, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0xf1, 0xe1,
	0xc0, 0x63, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x35, 0x82,
	0x41, 0x32, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x2d, 0x69, 0x64, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x49,
	0x64, 0x12, 0x77, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69,
	0x61, 0x74, 0x65, 0x18, 0xca, 0xcd, 0x87, 0xad, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x37, 0x82, 0x41, 0x34, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x75, 0x74,
	0x6f, 0x2d, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x61, 0x75, 0x74,
	0x6f, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x65, 0x12, 0x96, 0x01, 0x0a, 0x0b, 0x64,
	0x75, 0x70, 0x6c, 0x65, 0x78, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0xda, 0xf5, 0xb1, 0x86, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x4d, 0x6f, 0x64,
	0x65, 0x42, 0x34, 0x82, 0x41, 0x31, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64, 0x75, 0x70, 0x6c,
	0x65, 0x78, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x64, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x96, 0xa1, 0xe8, 0x13,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3c, 0x82, 0x41, 0x39, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x66, 0x6c, 0x6f, 0x77, 0x2d,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46,
	0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x6e, 0x0a, 0x0b, 0x6d, 0x61,
	0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xaa, 0x94, 0x46, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x34, 0x82, 0x41, 0x31, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x6d, 0x61, 0x63, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0a,
	0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x85, 0x01, 0x0a, 0x0a, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x8b, 0x92, 0xf8, 0x81, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x66, 0x45, 0x74, 0x68,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x53, 0x50, 0x45,
	0x45, 0x44, 0x42, 0x33, 0x82, 0x41, 0x30, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x6f, 0x72,
	0x74, 0x2d, 0x73, 0x70, 0x65, 0x65, 0x64, 0x52, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x22, 0x5e, 0x0a, 0x0a, 0x44, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x14, 0x0a, 0x10, 0x44, 0x55, 0x50, 0x4c, 0x45, 0x58, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x0f, 0x44, 0x55, 0x50, 0x4c, 0x45, 0x58,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04,
	0x46, 0x55, 0x4c, 0x4c, 0x12, 0x1c, 0x0a, 0x0f, 0x44, 0x55, 0x50, 0x4c, 0x45, 0x58, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x48, 0x41, 0x4c, 0x46, 0x10, 0x02, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x48, 0x41,
	0x4c, 0x46, 0x1a, 0x9e, 0x16, 0x0a, 0x05, 0x44, 0x6f, 0x74, 0x31, 0x58, 0x12, 0x81, 0x01, 0x0a,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x98, 0xd8, 0x87, 0x34, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x44, 0x6f, 0x74, 0x31,
	0x58, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x2e, 0x82, 0x41, 0x2b, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x64, 0x6f, 0x74, 0x31,
	0x78, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x7e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xb1, 0xb9, 0xa8, 0xe1, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x44,
	0x6f, 0x74, 0x31, 0x58, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x2d, 0x82, 0x41, 0x2a, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x64, 0x6f,
	0x74, 0x31, 0x78, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x1a, 0x8c, 0x0a, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x37, 0x0a, 0x15, 0x61,
	0x75, 0x74, 0x68, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0xf0, 0xe9, 0xa7, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x12, 0x61, 0x75, 0x74, 0x68, 0x46, 0x61, 0x69, 0x6c, 0x56, 0x6c, 0x61, 0x6e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x37, 0x0a, 0x15, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x66, 0x61, 0x69,
	0x6c, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xe9, 0x90,
	0x85, 0xf1, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x12, 0x61, 0x75, 0x74, 0x68, 0x46,
	0x61, 0x69, 0x6c, 0x56, 0x6c, 0x61, 0x6e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x85, 0x01,
	0x0a, 0x11, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0xa4, 0xf2, 0xb5, 0x41, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x78, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2d, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x10, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x9a, 0x01, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0xdf, 0xa2, 0xb0, 0xfb, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x44, 0x6f, 0x74, 0x31, 0x58, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x38,
	0x82, 0x41, 0x35, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x78, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x68,
	0x6f, 0x73, 0x74, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x77, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x18, 0xf6, 0xe0, 0x9e, 0xb4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x3b, 0x82, 0x41, 0x38, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x78, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x0b,
	0x6d, 0x61, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x98, 0x01, 0x0a, 0x17,
	0x72, 0x65, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0xf3, 0x87, 0x92, 0x9f, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x78, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x72, 0x65, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x16,
	0x72, 0x65, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x8c, 0x01, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0xb2,
	0xb0, 0xef, 0x8a, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x42, 0x82,
	0x41, 0x3f, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x2f, 0x64, 0x6f, 0x74, 0x31, 0x78, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x72, 0x65,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x52, 0x12, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x3b, 0x0a, 0x17, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x66, 0x61, 0x69, 0x6c, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0xb5, 0xf9, 0xcb, 0xb8, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x14, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x56, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x3b, 0x0a, 0x17, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x66, 0x61, 0x69,
	0x6c, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x98, 0x95,
	0xf1, 0xff, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x14, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x46, 0x61, 0x69, 0x6c, 0x56, 0x6c, 0x61, 0x6e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12,
	0x88, 0x01, 0x0a, 0x12, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0xee, 0xc1, 0xcb, 0x58, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65,
	0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x78, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x2d,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x52, 0x11, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x9c, 0x01, 0x0a, 0x08, 0x48,
	0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x48, 0x4f, 0x53, 0x54, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x14, 0x48,
	0x4f, 0x53, 0x54, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x48,
	0x4f, 0x53, 0x54, 0x10, 0x01, 0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45,
	0x5f, 0x48, 0x4f, 0x53, 0x54, 0x12, 0x26, 0x0a, 0x13, 0x48, 0x4f, 0x53, 0x54, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x10, 0x02, 0x1a, 0x0d,
	0x82, 0x41, 0x0a, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x12, 0x2a, 0x0a,
	0x15, 0x48, 0x4f, 0x53, 0x54, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f,
	0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x10, 0x03, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x4d, 0x55, 0x4c,
	0x54, 0x49, 0x5f, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x42, 0x10, 0x0a, 0x0e, 0x61, 0x75, 0x74,
	0x68, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x42, 0x12, 0x0a, 0x10, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x1a,
	0x81, 0x0a, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x15, 0x61, 0x75, 0x74,
	0x68, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0xa5, 0xc1, 0xb1, 0x4b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x12, 0x61,
	0x75, 0x74, 0x68, 0x46, 0x61, 0x69, 0x6c, 0x56, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0x37, 0x0a, 0x15, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x76,
	0x6c, 0x61, 0x6e, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xa8, 0xb2, 0x98, 0x82, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x12, 0x61, 0x75, 0x74, 0x68, 0x46, 0x61, 0x69, 0x6c,
	0x56, 0x6c, 0x61, 0x6e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x84, 0x01, 0x0a, 0x11, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0xed, 0x8c, 0xfc, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3f,
	0x82, 0x41, 0x3c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x78, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x10, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x97, 0x01, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0xaa, 0x88, 0xc4, 0x7b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x2e, 0x44, 0x6f, 0x74, 0x31, 0x58, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x48, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x37, 0x82, 0x41, 0x34, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x64, 0x6f, 0x74, 0x31,
	0x78, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x2d, 0x6d, 0x6f, 0x64,
	0x65, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x76, 0x0a, 0x0c, 0x6d,
	0x61, 0x78, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0xb9, 0xee, 0xb8, 0x96,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3a, 0x82, 0x41, 0x37, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x64, 0x6f,
	0x74, 0x31, 0x78, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x12, 0x96, 0x01, 0x0a, 0x17, 0x72, 0x65, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0xde, 0xe2, 0xb2, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x45, 0x82,
	0x41, 0x42, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x2f, 0x64, 0x6f, 0x74, 0x31, 0x78, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x65, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2d, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x52, 0x16, 0x72, 0x65, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x8b, 0x01, 0x0a,
	0x13, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x8f, 0xec, 0xd0, 0xa1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x78, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x2d, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x12, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d,
	0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x3b, 0x0a, 0x17, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0xb8, 0xbc, 0xef, 0x9f, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x14, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x56, 0x6c, 0x61,
	0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x3a, 0x0a, 0x17, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x75, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x18, 0xb1, 0xdb, 0x95, 0x3c, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x14, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x56, 0x6c, 0x61, 0x6e, 0x55, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x12, 0x88, 0x01, 0x0a, 0x12, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0xe1, 0xee, 0xe8, 0xd1, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x64, 0x6f, 0x74,
	0x31, 0x78, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x6e, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x52, 0x11, 0x73, 0x75, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x9c,
	0x01, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x48,
	0x4f, 0x53, 0x54, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12,
	0x28, 0x0a, 0x14, 0x48, 0x4f, 0x53, 0x54, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x49, 0x4e, 0x47,
	0x4c, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x10, 0x01, 0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x53, 0x49,
	0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x12, 0x26, 0x0a, 0x13, 0x48, 0x4f, 0x53,
	0x54, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x48, 0x4f, 0x53, 0x54,
	0x10, 0x02, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x48, 0x4f, 0x53,
	0x54, 0x12, 0x2a, 0x0a, 0x15, 0x48, 0x4f, 0x53, 0x54, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x55,
	0x4c, 0x54, 0x49, 0x5f, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x10, 0x03, 0x1a, 0x0f, 0x82, 0x41,
	0x0c, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x42, 0x10, 0x0a,
	0x0e, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x42,
	0x12, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x76,
	0x6c, 0x61, 0x6e, 0x1a, 0xcb, 0x05, 0x0a, 0x03, 0x50, 0x6f, 0x65, 0x12, 0x7d, 0x0a, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xae, 0xa1, 0xf7, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x50, 0x6f, 0x65, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x42, 0x2c, 0x82, 0x41, 0x29, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65,
	0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x70, 0x6f, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x7a, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0xdb, 0xaf, 0xe5, 0xe7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x50, 0x6f, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x2b, 0x82, 0x41, 0x28, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x70, 0x6f, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x70, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x66, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xcc, 0x96, 0x85, 0x5c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x34, 0x82, 0x41, 0x31, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x70, 0x6f, 0x65,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x1a, 0xd6, 0x02, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x66, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x9d, 0xa7,
	0x82, 0xb2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x33, 0x82, 0x41,
	0x30, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f,
	0x70, 0x6f, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x70, 0x0a, 0x0b, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0xe6, 0x96, 0xbe, 0x50, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x37, 0x82, 0x41, 0x34, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x70, 0x6f, 0x65, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x52, 0x0a, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x73, 0x0a, 0x0a,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0xb1, 0xd5, 0xcf, 0xfc, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x36,
	0x82, 0x41, 0x33, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x2f, 0x70, 0x6f, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x2d, 0x75, 0x73, 0x65, 0x64, 0x52, 0x09, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x55, 0x73, 0x65,
	0x64, 0x1a, 0xbb, 0x23, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x72, 0x0a, 0x0c, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0xf4, 0xea, 0xea, 0xb0,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x34, 0x82, 0x41,
	0x31, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x2d,
	0x69, 0x64, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12,
	0x75, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74,
	0x65, 0x18, 0x9b, 0xc6, 0xe5, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x36, 0x82, 0x41, 0x33, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x2d, 0x6e, 0x65,
	0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x4e, 0x65, 0x67,
	0x6f, 0x74, 0x69, 0x61, 0x74, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x82, 0xcd, 0xdf, 0xd7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x42, 0x30, 0x82, 0x41, 0x2d, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x93, 0x01, 0x0a, 0x0b, 0x64, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0xe1, 0xa3, 0x8b, 0x5a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45,
	0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x75,
	0x70, 0x6c, 0x65, 0x78, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x33, 0x82, 0x41, 0x30, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x64, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x64,
	0x75, 0x70, 0x6c, 0x65, 0x78, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x13, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x18, 0xcd, 0x9a, 0xb6, 0x44, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x3b, 0x82, 0x41, 0x38, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2d,
	0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x11, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12,
	0x77, 0x0a, 0x0e, 0x68, 0x77, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0xf3, 0x98, 0xa2, 0x8d, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x68, 0x77, 0x2d, 0x6d,
	0x61, 0x63, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0c, 0x68, 0x77, 0x4d, 0x61,
	0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x6e, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x99, 0xa6, 0x8a, 0x40, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x33, 0x82, 0x41, 0x30, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x6d, 0x61, 0x63, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0a, 0x6d, 0x61,
	0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0xbd, 0x01, 0x0a, 0x16, 0x6e, 0x65, 0x67,
	0x6f, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0xac, 0xa9, 0xa2, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x44, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45,
	0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4e, 0x65,
	0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x44, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x4d, 0x6f,
	0x64, 0x65, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x65, 0x67, 0x6f,
	0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x64, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x2d, 0x6d, 0x6f,
	0x64, 0x65, 0x52, 0x14, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x44, 0x75,
	0x70, 0x6c, 0x65, 0x78, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0xa4, 0x01, 0x0a, 0x15, 0x6e, 0x65, 0x67,
	0x6f, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x18, 0xd9, 0xc0, 0xf0, 0x96, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x49, 0x66, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x45, 0x54,
	0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x53, 0x50, 0x45, 0x45, 0x44, 0x42, 0x3d, 0x82, 0x41, 0x3a,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x2d,
	0x70, 0x6f, 0x72, 0x74, 0x2d, 0x73, 0x70, 0x65, 0x65, 0x64, 0x52, 0x13, 0x6e, 0x65, 0x67, 0x6f,
	0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12,
	0x84, 0x01, 0x0a, 0x0a, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x9e,
	0x85, 0x85, 0xe0, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x49, 0x66, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e,
	0x45, 0x54, 0x53, 0x50, 0x45, 0x45, 0x44, 0x42, 0x32, 0x82, 0x41, 0x2f, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x73, 0x70, 0x65, 0x65, 0x64, 0x52, 0x09, 0x70, 0x6f, 0x72,
	0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x1a, 0xdd, 0x16, 0x0a, 0x08, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x81, 0x01, 0x0a, 0x0f, 0x69, 0x6e, 0x5f, 0x38, 0x30, 0x32, 0x31, 0x71,
	0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0xaa, 0xd2, 0xcc, 0xfc, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x38, 0x30, 0x32, 0x31,
	0x71, 0x2d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x6e, 0x38, 0x30, 0x32, 0x31,
	0x71, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x80, 0x01, 0x0a, 0x0f, 0x69, 0x6e, 0x5f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0xd4, 0xba, 0xa5, 0x43,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x0d, 0x69, 0x6e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x7a, 0x0a, 0x0d, 0x69, 0x6e,
	0x5f, 0x63, 0x72, 0x63, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0xcf, 0xc7, 0xed, 0x24,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x63,
	0x72, 0x63, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x0b, 0x69, 0x6e, 0x43, 0x72, 0x63,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0xb6, 0x01, 0x0a, 0x0f, 0x69, 0x6e, 0x5f, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xa3, 0x9f, 0x96, 0xa3, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x49,
	0x6e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x40, 0x82,
	0x41, 0x3d, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f,
	0x69, 0x6e, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0e, 0x69, 0x6e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x8a, 0x01, 0x0a, 0x12, 0x69, 0x6e, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x84, 0xad, 0xf9, 0xb3, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x43, 0x82, 0x41, 0x40, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x66, 0x72, 0x61, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x2d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x10, 0x69, 0x6e, 0x46, 0x72,
	0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x84, 0x01, 0x0a,
	0x10, 0x69, 0x6e, 0x5f, 0x6a, 0x61, 0x62, 0x62, 0x65, 0x72, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x9a, 0xad, 0xa3, 0xcc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x6a, 0x61, 0x62, 0x62, 0x65, 0x72, 0x2d, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x73, 0x52, 0x0e, 0x69, 0x6e, 0x4a, 0x61, 0x62, 0x62, 0x65, 0x72, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x73, 0x12, 0x91, 0x01, 0x0a, 0x15, 0x69, 0x6e, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x81, 0x9c,
	0x80, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x46, 0x82, 0x41, 0x43,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e,
	0x2d, 0x6d, 0x61, 0x63, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2d, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x73, 0x52, 0x12, 0x69, 0x6e, 0x4d, 0x61, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x8c, 0x01, 0x0a, 0x13, 0x69, 0x6e, 0x5f, 0x6d,
	0x61, 0x63, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0xd6, 0xe0, 0x9c, 0xb2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x44,
	0x82, 0x41, 0x41, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x2f, 0x69, 0x6e, 0x2d, 0x6d, 0x61, 0x63, 0x2d, 0x70, 0x61, 0x75, 0x73, 0x65, 0x2d, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x73, 0x52, 0x10, 0x69, 0x6e, 0x4d, 0x61, 0x63, 0x50, 0x61, 0x75, 0x73, 0x65,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x89, 0x01, 0x0a, 0x12, 0x69, 0x6e, 0x5f, 0x6f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0xeb, 0xf8,
	0x8a, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x43, 0x82, 0x41, 0x40,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e,
	0x2d, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x7a, 0x65, 0x2d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73,
	0x52, 0x10, 0x69, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x7a, 0x65, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x73, 0x12, 0x8d, 0x01, 0x0a, 0x13, 0x69, 0x6e, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x73,
	0x69, 0x7a, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0xa5, 0x93, 0x9c, 0xb2, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x75,
	0x6e, 0x64, 0x65, 0x72, 0x73, 0x69, 0x7a, 0x65, 0x2d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x52,
	0x11, 0x69, 0x6e, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x69, 0x7a, 0x65, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x73, 0x12, 0x83, 0x01, 0x0a, 0x10, 0x6f, 0x75, 0x74, 0x5f, 0x38, 0x30, 0x32, 0x31, 0x71,
	0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0xa3, 0xc1, 0xb7, 0x1d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x38, 0x30, 0x32, 0x31,
	0x71, 0x2d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x0e, 0x6f, 0x75, 0x74, 0x38, 0x30, 0x32,
	0x31, 0x71, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x94, 0x01, 0x0a, 0x16, 0x6f, 0x75, 0x74,
	0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0xc4, 0xdd, 0xb0, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x47, 0x82, 0x41, 0x44, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x6d, 0x61, 0x63, 0x2d, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x2d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x13, 0x6f, 0x75, 0x74, 0x4d,
	0x61, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x8e, 0x01, 0x0a, 0x14, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x70, 0x61, 0x75, 0x73,
	0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x9b, 0xd6, 0xdb, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x6d, 0x61, 0x63,
	0x2d, 0x70, 0x61, 0x75, 0x73, 0x65, 0x2d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x11, 0x6f,
	0x75, 0x74, 0x4d, 0x61, 0x63, 0x50, 0x61, 0x75, 0x73, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73,
	0x1a, 0x93, 0x08, 0x0a, 0x0e, 0x49, 0x6e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0xb0, 0x01, 0x0a, 0x1a, 0x69, 0x6e, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x73, 0x5f, 0x31, 0x30, 0x32, 0x34, 0x5f, 0x31, 0x35, 0x31, 0x38, 0x5f, 0x6f, 0x63, 0x74, 0x65,
	0x74, 0x73, 0x18, 0xd3, 0xa8, 0xb3, 0xe2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x5b, 0x82, 0x41, 0x58, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x69, 0x6e, 0x2d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x2d, 0x31, 0x30,
	0x32, 0x34, 0x2d, 0x31, 0x35, 0x31, 0x38, 0x2d, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x52, 0x16,
	0x69, 0x6e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x31, 0x30, 0x32, 0x34, 0x31, 0x35, 0x31, 0x38,
	0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12, 0xaa, 0x01, 0x0a, 0x18, 0x69, 0x6e, 0x5f, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x73, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x32, 0x35, 0x35, 0x5f, 0x6f, 0x63, 0x74,
	0x65, 0x74, 0x73, 0x18, 0xc2, 0xe8, 0xb9, 0xf6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x59, 0x82, 0x41, 0x56, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x69, 0x6e, 0x2d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x2d, 0x31,
	0x32, 0x38, 0x2d, 0x32, 0x35, 0x35, 0x2d, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x52, 0x14, 0x69,
	0x6e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x31, 0x32, 0x38, 0x32, 0x35, 0x35, 0x4f, 0x63, 0x74,
	0x65, 0x74, 0x73, 0x12, 0xa9, 0x01, 0x0a, 0x18, 0x69, 0x6e, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x73, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x35, 0x31, 0x31, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73,
	0x18, 0xbf, 0xba, 0x91, 0x72, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x59,
	0x82, 0x41, 0x56, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x2f, 0x69, 0x6e, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x69, 0x6e, 0x2d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x2d, 0x32, 0x35, 0x36, 0x2d, 0x35,
	0x31, 0x31, 0x2d, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x52, 0x14, 0x69, 0x6e, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x73, 0x32, 0x35, 0x36, 0x35, 0x31, 0x31, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12,
	0xad, 0x01, 0x0a, 0x19, 0x69, 0x6e, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x35, 0x31,
	0x32, 0x5f, 0x31, 0x30, 0x32, 0x33, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0xad, 0xcc,
	0x92, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5a, 0x82, 0x41,
	0x57, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69,
	0x6e, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x69,
	0x6e, 0x2d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x2d, 0x35, 0x31, 0x32, 0x2d, 0x31, 0x30, 0x32,
	0x33, 0x2d, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x52, 0x15, 0x69, 0x6e, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x73, 0x35, 0x31, 0x32, 0x31, 0x30, 0x32, 0x33, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12,
	0x9b, 0x01, 0x0a, 0x13, 0x69, 0x6e, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x36, 0x34,
	0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0xde, 0xf8, 0xd9, 0x15, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x54, 0x82, 0x41, 0x51, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x69, 0x6e, 0x2d, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x73, 0x2d, 0x36, 0x34, 0x2d, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x52, 0x10, 0x69, 0x6e, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x73, 0x36, 0x34, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12, 0xa6, 0x01,
	0x0a, 0x17, 0x69, 0x6e, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x36, 0x35, 0x5f, 0x31,
	0x32, 0x37, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0xdc, 0xd1, 0xd5, 0x68, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x58, 0x82, 0x41, 0x55, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x69, 0x6e, 0x2d, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x73, 0x2d, 0x36, 0x35, 0x2d, 0x31, 0x32, 0x37, 0x2d, 0x6f, 0x63, 0x74, 0x65, 0x74,
	0x73, 0x52, 0x13, 0x69, 0x6e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x36, 0x35, 0x31, 0x32, 0x37,
	0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x22, 0x5e, 0x0a, 0x0a, 0x44, 0x75, 0x70, 0x6c, 0x65, 0x78,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x55, 0x50, 0x4c, 0x45, 0x58, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x0f, 0x44, 0x55,
	0x50, 0x4c, 0x45, 0x58, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x01, 0x1a,
	0x07, 0x82, 0x41, 0x04, 0x46, 0x55, 0x4c, 0x4c, 0x12, 0x1c, 0x0a, 0x0f, 0x44, 0x55, 0x50, 0x4c,
	0x45, 0x58, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x48, 0x41, 0x4c, 0x46, 0x10, 0x02, 0x1a, 0x07, 0x82,
	0x41, 0x04, 0x48, 0x41, 0x4c, 0x46, 0x22, 0x86, 0x01, 0x0a, 0x14, 0x4e, 0x65, 0x67, 0x6f, 0x74,
	0x69, 0x61, 0x74, 0x65, 0x64, 0x44, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x1e, 0x0a, 0x1a, 0x4e, 0x45, 0x47, 0x4f, 0x54, 0x49, 0x41, 0x54, 0x45, 0x44, 0x44, 0x55, 0x50,
	0x4c, 0x45, 0x58, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12,
	0x26, 0x0a, 0x19, 0x4e, 0x45, 0x47, 0x4f, 0x54, 0x49, 0x41, 0x54, 0x45, 0x44, 0x44, 0x55, 0x50,
	0x4c, 0x45, 0x58, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x01, 0x1a, 0x07,
	0x82, 0x41, 0x04, 0x46, 0x55, 0x4c, 0x4c, 0x12, 0x26, 0x0a, 0x19, 0x4e, 0x45, 0x47, 0x4f, 0x54,
	0x49, 0x41, 0x54, 0x45, 0x44, 0x44, 0x55, 0x50, 0x4c, 0x45, 0x58, 0x4d, 0x4f, 0x44, 0x45, 0x5f,
	0x48, 0x41, 0x4c, 0x46, 0x10, 0x02, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x48, 0x41, 0x4c, 0x46, 0x1a,
	0xfb, 0x19, 0x0a, 0x0c, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e,
	0x12, 0x90, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xe7, 0x8a, 0xda, 0x52,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x2d,
	0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0xad, 0x01, 0x0a, 0x0e, 0x64, 0x6f, 0x74, 0x31, 0x78, 0x5f, 0x76, 0x6c,
	0x61, 0x6e, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0xb0, 0x8c, 0xa7, 0xa6, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x43, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x44, 0x6f, 0x74, 0x31, 0x58, 0x56, 0x6c,
	0x61, 0x6e, 0x4d, 0x61, 0x70, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65,
	0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x78, 0x2d, 0x76, 0x6c, 0x61,
	0x6e, 0x2d, 0x6d, 0x61, 0x70, 0x52, 0x0c, 0x64, 0x6f, 0x74, 0x31, 0x78, 0x56, 0x6c, 0x61, 0x6e,
	0x4d, 0x61, 0x70, 0x12, 0x8c, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xd8, 0x94,
	0xff, 0x6c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65,
	0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64,
	0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x1a, 0xce, 0x05, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x7c, 0x0a,
	0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0xf2, 0xac, 0xec,
	0x8d, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x42, 0x82, 0x41, 0x3f,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x52,
	0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x56, 0x6c, 0x61, 0x6e, 0x12, 0x98, 0x01, 0x0a, 0x0e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0xb9,
	0xa3, 0xd3, 0xb2, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x56, 0x6c, 0x61, 0x6e, 0x56, 0x6c, 0x61, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x2f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61,
	0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x7b, 0x0a, 0x0b, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0xbb, 0xbb, 0xfb, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x2d,
	0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6e, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x52, 0x0a, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x56,
	0x6c, 0x61, 0x6e, 0x12, 0xb6, 0x01, 0x0a, 0x0b, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x5f, 0x76, 0x6c,
	0x61, 0x6e, 0x73, 0x18, 0x99, 0x85, 0x9e, 0xfc, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65,
	0x64, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x72, 0x75,
	0x6e, 0x6b, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x42, 0x82, 0x41,
	0x3f, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f,
	0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x73,
	0x52, 0x0a, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x1a, 0x75, 0x0a, 0x0f,
	0x54, 0x72, 0x75, 0x6e, 0x6b, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x12,
	0x30, 0x0a, 0x12, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x73, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0xdf, 0xa9, 0x8e, 0x9b, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0x30, 0x0a, 0x12, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x73,
	0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xb2, 0xf6, 0x95, 0xdc, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x10, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x55, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x1a, 0xfe, 0x0a, 0x0a, 0x0c, 0x44, 0x6f, 0x74, 0x31, 0x58, 0x56, 0x6c, 0x61,
	0x6e, 0x4d, 0x61, 0x70, 0x12, 0xba, 0x01, 0x0a, 0x09, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x90, 0xc3, 0xc2, 0xaa, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45,
	0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64,
	0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x44, 0x6f, 0x74, 0x31, 0x58, 0x56, 0x6c, 0x61, 0x6e, 0x4d, 0x61,
	0x70, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x4b, 0x65, 0x79, 0x42, 0x48, 0x82,
	0x41, 0x45, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x2f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x64,
	0x6f, 0x74, 0x31, 0x78, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x6d, 0x61, 0x70, 0x2f, 0x76, 0x6c,
	0x61, 0x6e, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x76, 0x6c, 0x61, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x1a, 0xbd, 0x07, 0x0a, 0x08, 0x56, 0x6c, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0xbf,
	0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xa5, 0xe3, 0x8a, 0x4b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x53, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x44, 0x6f, 0x74, 0x31, 0x58,
	0x56, 0x6c, 0x61, 0x6e, 0x4d, 0x61, 0x70, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x78, 0x2d, 0x76,
	0x6c, 0x61, 0x6e, 0x2d, 0x6d, 0x61, 0x70, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x6e, 0x61, 0x6d,
	0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0xbb, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x9a, 0xfe, 0xc2, 0x33, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x44, 0x6f, 0x74, 0x31,
	0x58, 0x56, 0x6c, 0x61, 0x6e, 0x4d, 0x61, 0x70, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x78, 0x2d, 0x76,
	0x6c, 0x61, 0x6e, 0x2d, 0x6d, 0x61, 0x70, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x6e, 0x61, 0x6d,
	0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x98,
	0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x7a, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0xff, 0xe3, 0xa8, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x52, 0x82,
	0x41, 0x4f, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x2f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x64,
	0x6f, 0x74, 0x31, 0x78, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x6d, 0x61, 0x70, 0x2f, 0x76, 0x6c,
	0x61, 0x6e, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69,
	0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x91, 0x01, 0x0a, 0x09, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0xe1, 0xe0, 0xdd, 0x90, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x59, 0x82, 0x41, 0x56, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65,
	0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64,
	0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x78, 0x2d, 0x76, 0x6c, 0x61, 0x6e,
	0x2d, 0x6d, 0x61, 0x70, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x52,
	0x08, 0x76, 0x6c, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x95, 0x02, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x79, 0x0a, 0x02, 0x69, 0x64, 0x18, 0xaa, 0xfd, 0xcd, 0x74, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x51, 0x82, 0x41, 0x4e, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x78, 0x2d, 0x76,
	0x6c, 0x61, 0x6e, 0x2d, 0x6d, 0x61, 0x70, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x6e, 0x61, 0x6d,
	0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x90,
	0x01, 0x0a, 0x09, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xca, 0xb5, 0x99,
	0xd6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x58, 0x82,
	0x41, 0x55, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x2f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x64,
	0x6f, 0x74, 0x31, 0x78, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x6d, 0x61, 0x70, 0x2f, 0x76, 0x6c,
	0x61, 0x6e, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x6c,
	0x61, 0x6e, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x76, 0x6c, 0x61, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x1a, 0xf0, 0x01, 0x0a, 0x0b, 0x56, 0x6c, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x4b, 0x65,
	0x79, 0x12, 0x76, 0x0a, 0x0d, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x52, 0x82, 0x41, 0x4f, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x78, 0x2d,
	0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x6d, 0x61, 0x70, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x6e, 0x61,
	0x6d, 0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x0b, 0x76, 0x6c,
	0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x69, 0x0a, 0x09, 0x76, 0x6c, 0x61,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45,
	0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64,
	0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x44, 0x6f, 0x74, 0x31, 0x58, 0x56, 0x6c, 0x61, 0x6e, 0x4d, 0x61,
	0x70, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x76, 0x6c, 0x61, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x1a, 0xc6, 0x05, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x7b,
	0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x9d, 0xb6,
	0x98, 0xc4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x41, 0x82, 0x41,
	0x3e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f,
	0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x52,
	0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x56, 0x6c, 0x61, 0x6e, 0x12, 0x97, 0x01, 0x0a, 0x0e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0xe0,
	0xc7, 0xa2, 0x86, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x56, 0x6c, 0x61, 0x6e, 0x56, 0x6c, 0x61, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x2f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61,
	0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x7a, 0x0a, 0x0b, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x76, 0x6c, 0x61, 0x6e, 0x18, 0xd4, 0xe5, 0xc2, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x2d, 0x76,
	0x6c, 0x61, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x52, 0x0a, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x56, 0x6c, 0x61,
	0x6e, 0x12, 0xb3, 0x01, 0x0a, 0x0b, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x5f, 0x76, 0x6c, 0x61, 0x6e,
	0x73, 0x18, 0xee, 0xba, 0xf2, 0x3b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x56, 0x6c,
	0x61, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x56, 0x6c,
	0x61, 0x6e, 0x73, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x74, 0x72, 0x75, 0x6e, 0x6b, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x0a, 0x74, 0x72, 0x75,
	0x6e, 0x6b, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x1a, 0x74, 0x0a, 0x0f, 0x54, 0x72, 0x75, 0x6e, 0x6b,
	0x56, 0x6c, 0x61, 0x6e, 0x73, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x12, 0x74, 0x72,
	0x75, 0x6e, 0x6b, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x9e, 0xb1, 0xfb, 0x72, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x72, 0x75, 0x6e, 0x6b,
	0x56, 0x6c, 0x61, 0x6e, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x12, 0x74,
	0x72, 0x75, 0x6e, 0x6b, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x73, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x18, 0xbf, 0xd3, 0x98, 0xdd, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x74, 0x72, 0x75,
	0x6e, 0x6b, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x1a, 0xef, 0x04,
	0x0a, 0x08, 0x48, 0x6f, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x77, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0xd9, 0xb3, 0xf6, 0x96, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x48, 0x6f, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x29, 0x82, 0x41, 0x26, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x68, 0x6f, 0x6c, 0x64, 0x2d,
	0x74, 0x69, 0x6d, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x73, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xae, 0xd3, 0xa8,
	0xe6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x48, 0x6f, 0x6c, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x28, 0x82, 0x41, 0x25, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xba, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x5a, 0x0a, 0x04, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0xd8, 0x8c, 0xd0, 0x51,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2e, 0x82, 0x41, 0x2b, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x04, 0x64, 0x6f, 0x77, 0x6e, 0x12,
	0x54, 0x0a, 0x02, 0x75, 0x70, 0x18, 0xfb, 0xe3, 0xc9, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x2c, 0x82, 0x41, 0x29, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x68, 0x6f,
	0x6c, 0x64, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x75,
	0x70, 0x52, 0x02, 0x75, 0x70, 0x1a, 0xb7, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x59, 0x0a, 0x04, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0xe9, 0x86, 0x87, 0x50, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2d, 0x82, 0x41, 0x2a, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x64, 0x6f, 0x77, 0x6e, 0x52, 0x04, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x53, 0x0a, 0x02, 0x75, 0x70,
	0x18, 0xae, 0xc9, 0xde, 0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2b,
	0x82, 0x41, 0x28, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x74, 0x69,
	0x6d, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x75, 0x70, 0x52, 0x02, 0x75, 0x70, 0x1a,
	0x88, 0xee, 0x01, 0x0a, 0x0a, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x12,
	0x7a, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x97, 0xf6, 0xf8, 0x7d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x2b, 0x82, 0x41, 0x28, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x73, 0x0a, 0x04, 0x69,
	0x70, 0x76, 0x34, 0x18, 0xcc, 0xca, 0xac, 0xee, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x42,
	0x29, 0x82, 0x41, 0x26, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64,
	0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x52, 0x04, 0x69, 0x70, 0x76, 0x34,
	0x12, 0x73, 0x0a, 0x04, 0x69, 0x70, 0x76, 0x36, 0x18, 0xce, 0xca, 0xac, 0xee, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x2e,
	0x49, 0x70, 0x76, 0x36, 0x42, 0x29, 0x82, 0x41, 0x26, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x52,
	0x04, 0x69, 0x70, 0x76, 0x36, 0x12, 0x76, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xc8,
	0xfd, 0xc9, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x64,
	0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x2a, 0x82, 0x41, 0x27, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x5d, 0x0a,
	0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x25, 0x0a, 0x0b, 0x76, 0x6c, 0x61, 0x6e, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x9f, 0x84, 0xa8, 0xdb, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0a, 0x76, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x24,
	0x0a, 0x0b, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xf2, 0xe4,
	0xb2, 0x1c, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0a, 0x76, 0x6c, 0x61, 0x6e, 0x55, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x42, 0x06, 0x0a, 0x04, 0x76, 0x6c, 0x61, 0x6e, 0x1a, 0x80, 0x6c, 0x0a,
	0x04, 0x49, 0x70, 0x76, 0x34, 0x12, 0x91, 0x01, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x18, 0x8d, 0x88, 0xcb, 0xd5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x42, 0x33, 0x82, 0x41, 0x30, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f,
	0x69, 0x70, 0x76, 0x34, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x09,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x85, 0x01, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0xc1, 0xd5, 0xc5, 0xec, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x49, 0x70, 0x76, 0x34,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x30, 0x82, 0x41, 0x2d, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70,
	0x76, 0x34, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x90, 0x01, 0x0a, 0x09, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x18,
	0x84, 0x8a, 0xfb, 0x42, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x64, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x42, 0x33, 0x82, 0x41, 0x30, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x52, 0x09, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x12, 0x8e, 0x01, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x61,
	0x72, 0x70, 0x18, 0xdd, 0xdf, 0xdb, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x41, 0x72, 0x70, 0x42, 0x33, 0x82, 0x41, 0x30, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76,
	0x34, 0x2f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2d, 0x61, 0x72, 0x70, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x41, 0x72, 0x70, 0x12, 0x80, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0xb6, 0x9c, 0x89, 0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x64, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x2f, 0x82, 0x41, 0x2c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x95, 0x01, 0x0a, 0x0a, 0x75, 0x6e, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x18, 0xe6, 0xba, 0xd7, 0xeb, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x49,
	0x70, 0x76, 0x34, 0x2e, 0x55, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x42, 0x34,
	0x82, 0x41, 0x31, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d,
	0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x65, 0x64, 0x52, 0x0a, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64,
	0x1a, 0x99, 0x32, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0xa0,
	0x01, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xe8, 0xd7, 0x9f, 0xea, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x56, 0x6c, 0x61,
	0x6e, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x42, 0x3b, 0x82, 0x41, 0x38,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61,
	0x6e, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x1a, 0xab, 0x2f, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0xa9, 0x01,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xcd, 0xf2, 0xf9, 0x90, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x49, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x2e,
	0x49, 0x70, 0x76, 0x34, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x42, 0x82,
	0x41, 0x3f, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76,
	0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xa4, 0x01, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x82, 0xaf, 0xc5, 0x7a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76,
	0x34, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0xa0, 0x01, 0x0a, 0x04, 0x76, 0x72, 0x72, 0x70, 0x18, 0xe9, 0xaa, 0x9b, 0x63, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x47, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x2e,
	0x49, 0x70, 0x76, 0x34, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x42, 0x40, 0x82, 0x41, 0x3d,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61,
	0x6e, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x52, 0x04, 0x76,
	0x72, 0x72, 0x70, 0x1a, 0x8b, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x70,
	0x0a, 0x02, 0x69, 0x70, 0x18, 0x83, 0xa0, 0xfd, 0xec, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x34,
	0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x70, 0x52, 0x02, 0x69, 0x70,
	0x12, 0x8e, 0x01, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x18, 0xf1, 0xe2, 0xbb, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x50, 0x82, 0x41, 0x4d, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x1a, 0x98, 0x03, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x6e, 0x0a, 0x02, 0x69,
	0x70, 0x18, 0x96, 0x9e, 0xa3, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x70, 0x52, 0x02, 0x69, 0x70, 0x12, 0x8f, 0x01, 0x0a, 0x06,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0xd7, 0xd2, 0x86, 0xe2, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x66, 0x49, 0x70, 0x49, 0x70, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x42, 0x48, 0x82, 0x41, 0x45,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61,
	0x6e, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x8c, 0x01,
	0x0a, 0x0d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x96, 0xda, 0xc9, 0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4f, 0x82,
	0x41, 0x4c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76,
	0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x0c,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x1a, 0x80, 0x26, 0x0a,
	0x04, 0x56, 0x72, 0x72, 0x70, 0x12, 0xc4, 0x01, 0x0a, 0x0a, 0x76, 0x72, 0x72, 0x70, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0xd8, 0xa1, 0xfd, 0xf6, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x54,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x49, 0x70, 0x76, 0x34,
	0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4b, 0x65, 0x79, 0x42, 0x4b, 0x82, 0x41, 0x48, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x09, 0x76, 0x72, 0x72, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0xa1, 0x22, 0x0a,
	0x09, 0x56, 0x72, 0x72, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0xc7, 0x01, 0x0a, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xdd, 0xd4, 0xe2, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x49, 0x70, 0x76, 0x34,
	0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x52, 0x82, 0x41, 0x4f, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69,
	0x70, 0x76, 0x34, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0xf5, 0x01, 0x0a, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0xbe, 0xf8, 0x8d, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x63, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x56, 0x6c, 0x61,
	0x6e, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x2e, 0x56, 0x72,
	0x72, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x5e, 0x82, 0x41, 0x5b, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f,
	0x69, 0x70, 0x76, 0x34, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f, 0x76, 0x72, 0x72, 0x70,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2d, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0xc3, 0x01, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xd2, 0xc4, 0xe5, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x57, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x49, 0x70, 0x76,
	0x34, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x51, 0x82, 0x41, 0x4e, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69,
	0x70, 0x76, 0x34, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x1a, 0xf6, 0x08, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x97, 0x01,
	0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x80, 0xa9,
	0xd9, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5e, 0x82, 0x41, 0x5b,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61,
	0x6e, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f, 0x76, 0x72,
	0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x61, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0xb9, 0x01, 0x0a, 0x16, 0x61, 0x64, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0xcf, 0xd5, 0xa7, 0xa9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x69, 0x82, 0x41, 0x66, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x76,
	0x72, 0x72, 0x70, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x15, 0x61, 0x64,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x12, 0x8c, 0x01, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x18,
	0xed, 0xed, 0x89, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5a, 0x82,
	0x41, 0x57, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76,
	0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f,
	0x76, 0x72, 0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x07, 0x70, 0x72, 0x65, 0x65, 0x6d,
	0x70, 0x74, 0x12, 0x9e, 0x01, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x64,
	0x65, 0x6c, 0x61, 0x79, 0x18, 0x9b, 0xcb, 0xde, 0xc0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x60, 0x82, 0x41, 0x5d, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x2d,
	0x64, 0x65, 0x6c, 0x61, 0x79, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x44, 0x65,
	0x6c, 0x61, 0x79, 0x12, 0x90, 0x01, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0xb0, 0xe7, 0xd4, 0xe2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x5b, 0x82, 0x41, 0x58, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64,
	0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x72,
	0x70, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0xa6, 0x01, 0x0a, 0x0f, 0x76, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xe6, 0xb8, 0xa2, 0xec, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x62, 0x82, 0x41, 0x5f,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61,
	0x6e, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f, 0x76, 0x72,
	0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x0e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0xa9, 0x01, 0x0a, 0x11, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0xc5, 0x82, 0x8f, 0xaf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x64, 0x82, 0x41, 0x61, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x69, 0x64, 0x52, 0x0f, 0x76, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x1a, 0xfc, 0x09, 0x0a, 0x11,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x12, 0xec, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x8f, 0xe3, 0xdf,
	0x74, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x56, 0x6c,
	0x61, 0x6e, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x2e, 0x56,
	0x72, 0x72, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x65, 0x82, 0x41, 0x62, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x76,
	0x72, 0x72, 0x70, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0xe9, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x80, 0x8b, 0xd2, 0xcc, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x69, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x56, 0x6c, 0x61,
	0x6e, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x2e, 0x56, 0x72,
	0x72, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42,
	0x64, 0x82, 0x41, 0x61, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64,
	0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x72,
	0x70, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x86, 0x03, 0x0a,
	0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xc0, 0x01, 0x0a, 0x12, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0xf6,
	0xcf, 0xbe, 0x80, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x78, 0x82,
	0x41, 0x75, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76,
	0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f,
	0x76, 0x72, 0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2d, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x2d, 0x64, 0x65,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x44, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0xb8, 0x01, 0x0a, 0x0f, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x89,
	0xa3, 0x94, 0x34, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x75,
	0x82, 0x41, 0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d,
	0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x72, 0x70,
	0x2f, 0x76, 0x72, 0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x2d, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x1a, 0x82, 0x03, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0xbe, 0x01, 0x0a, 0x12, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x65, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x8f, 0x88, 0xee, 0x54, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x77, 0x82, 0x41, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x2d, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x44, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0xb7, 0x01, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x18, 0x9e, 0xdb, 0xc9, 0x44, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x74, 0x82, 0x41, 0x71, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x1a, 0x93, 0x0a, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x97, 0x01, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0xaf, 0xf9, 0xef, 0xae, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x5d, 0x82, 0x41, 0x5a, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x2d, 0x6d, 0x6f,
	0x64, 0x65, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0xb7,
	0x01, 0x0a, 0x16, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0xe2, 0x84, 0x81, 0x71, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x68, 0x82, 0x41, 0x65, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70,
	0x76, 0x34, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x64, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x52, 0x15, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0xa6, 0x01, 0x0a, 0x10, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0xc1, 0xa0,
	0x89, 0xc6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x62, 0x82, 0x41,
	0x5f, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c,
	0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f, 0x76,
	0x72, 0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x52, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x8b, 0x01, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x18, 0x9a, 0x92,
	0x95, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x59, 0x82, 0x41, 0x56,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61,
	0x6e, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f, 0x76, 0x72,
	0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70,
	0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x07, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x12,
	0x9c, 0x01, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x61,
	0x79, 0x18, 0xf4, 0xaf, 0xfe, 0x50, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x5f, 0x82, 0x41, 0x5c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64,
	0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x72,
	0x70, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x2d, 0x64, 0x65, 0x6c, 0x61, 0x79,
	0x52, 0x0c, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x8e,
	0x01, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0xf1, 0xed, 0xa7, 0x17,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5a, 0x82, 0x41, 0x57, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f,
	0x69, 0x70, 0x76, 0x34, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f, 0x76, 0x72, 0x72, 0x70,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12,
	0xa4, 0x01, 0x0a, 0x0f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x8d, 0xff, 0xd2, 0x76, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x61, 0x82, 0x41, 0x5e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x2d, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0xa7, 0x01, 0x0a, 0x11, 0x76, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x96, 0xd7, 0xac,
	0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x63, 0x82, 0x41, 0x60, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e,
	0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f, 0x76, 0x72, 0x72,
	0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x69, 0x64, 0x52,
	0x0f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x1a, 0x8c, 0x02, 0x0a, 0x0c, 0x56, 0x72, 0x72, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65,
	0x79, 0x12, 0x89, 0x01, 0x0a, 0x11, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x5d, 0x82,
	0x41, 0x5a, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76,
	0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f,
	0x76, 0x72, 0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x76, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x69, 0x64, 0x52, 0x0f, 0x76, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x70, 0x0a,
	0x0a, 0x76, 0x72, 0x72, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x51, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x49,
	0x70, 0x76, 0x34, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x09, 0x76, 0x72, 0x72, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x1a,
	0xba, 0x01, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x4e,
	0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e,
	0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x69, 0x70, 0x52, 0x02, 0x69, 0x70, 0x12, 0x5c,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x42, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x49, 0x70, 0x76,
	0x34, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0xcc, 0x02, 0x0a,
	0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x75, 0x0a, 0x0b, 0x64, 0x68, 0x63, 0x70, 0x5f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x83, 0x8f, 0xe8, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x3c, 0x82, 0x41, 0x39, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x2d, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x52, 0x0a, 0x64, 0x68, 0x63, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x6b,
	0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xf7, 0xca, 0x83, 0xc9, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x38, 0x82, 0x41, 0x35, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69,
	0x70, 0x76, 0x34, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x5e, 0x0a, 0x03, 0x6d,
	0x74, 0x75, 0x18, 0xc8, 0x84, 0xa2, 0x73, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x34, 0x82, 0x41, 0x31, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x6d, 0x74, 0x75, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x1a, 0xa3, 0x0b, 0x0a, 0x09,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x12, 0xa3, 0x01, 0x0a, 0x08, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x18, 0xc5, 0x97, 0xce, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x46, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x49, 0x70, 0x76,
	0x34, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x42, 0x3c, 0x82, 0x41, 0x39, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70,
	0x76, 0x34, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x52, 0x08, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x1a,
	0xad, 0x08, 0x0a, 0x08, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x12, 0xab, 0x01, 0x0a,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x8a, 0xe3, 0xe0, 0xa5, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x4a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x49,
	0x70, 0x76, 0x34, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x43, 0x82,
	0x41, 0x40, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76,
	0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xa7, 0x01, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0xa7, 0xb4, 0x8d, 0xe5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x49, 0x70, 0x76, 0x34,
	0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f,
	0x69, 0x70, 0x76, 0x34, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x1a, 0x9b, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x70, 0x0a, 0x02, 0x69, 0x70, 0x18, 0xee, 0xab, 0x99, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x34,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x70, 0x52, 0x02, 0x69,
	0x70, 0x12, 0x9e, 0x01, 0x0a, 0x12, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xa6, 0xde, 0xad, 0x3a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x56, 0x82, 0x41, 0x53, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69,
	0x70, 0x76, 0x34, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6c, 0x69,
	0x6e, 0x6b, 0x2d, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x10, 0x6c, 0x69, 0x6e, 0x6b, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x1a, 0xaa, 0x03, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x6f, 0x0a, 0x02,
	0x69, 0x70, 0x18, 0xc5, 0xc6, 0xac, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x70, 0x52, 0x02, 0x69, 0x70, 0x12, 0x9d, 0x01,
	0x0a, 0x12, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0xd1, 0xeb, 0xa8, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x55, 0x82, 0x41, 0x52, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x10, 0x6c, 0x69, 0x6e,
	0x6b, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x8f, 0x01,
	0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0xd8, 0x90, 0x98, 0xda, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x66, 0x49, 0x70, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x42, 0x49, 0x82, 0x41,
	0x46, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c,
	0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x1a,
	0xbf, 0x01, 0x0a, 0x0b, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x12,
	0x4f, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3f, 0x82, 0x41, 0x3c,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61,
	0x6e, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x69, 0x70, 0x52, 0x02, 0x69, 0x70,
	0x12, 0x5f, 0x0a, 0x08, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x43, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x2e,
	0x49, 0x70, 0x76, 0x34, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x52, 0x08, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x1a, 0xd2, 0x06, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x72, 0x70, 0x12, 0x97,
	0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x92, 0xa4, 0x95, 0x7e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x2e,
	0x49, 0x70, 0x76, 0x34, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x72, 0x70, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x42, 0x3a, 0x82, 0x41, 0x37, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x2d, 0x61, 0x72, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x93, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x8f, 0xd7, 0x9b, 0x76, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x41, 0x72, 0x70, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x39, 0x82, 0x41,
	0x36, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c,
	0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2d, 0x61, 0x72,
	0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x8b,
	0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x9e, 0x01, 0x0a, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0xcc, 0xc0, 0x84, 0xb2, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x41, 0x72, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x2d, 0x61, 0x72, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x6d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x60, 0x0a, 0x04, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x1c, 0x0a, 0x0c, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x00, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45,
	0x12, 0x24, 0x0a, 0x10, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f,
	0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x02, 0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x52, 0x45, 0x4d, 0x4f, 0x54,
	0x45, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x12, 0x14, 0x0a, 0x08, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x41,
	0x4c, 0x4c, 0x10, 0x03, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x41, 0x4c, 0x4c, 0x1a, 0x87, 0x02, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x9b, 0x01, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0xef, 0x8d, 0xb2, 0x6f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x44, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x64, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x41, 0x72, 0x70, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x3e,
	0x82, 0x41, 0x3b, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d,
	0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2d,
	0x61, 0x72, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x52, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x22, 0x60, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x0c,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x1a, 0x0a,
	0x82, 0x41, 0x07, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x12, 0x24, 0x0a, 0x10, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x02,
	0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x4f, 0x4e, 0x4c, 0x59,
	0x12, 0x14, 0x0a, 0x08, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x03, 0x1a, 0x06,
	0x82, 0x41, 0x03, 0x41, 0x4c, 0x4c, 0x1a, 0xdc, 0x10, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x98, 0x01, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0xea, 0x8c,
	0xf8, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x56,
	0x6c, 0x61, 0x6e, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x42, 0x38, 0x82, 0x41, 0x35, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70,
	0x76, 0x34, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x74, 0x0a, 0x0b, 0x64,
	0x68, 0x63, 0x70, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x88, 0xbd, 0x92, 0x1f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3b, 0x82, 0x41, 0x38, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69,
	0x70, 0x76, 0x34, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x2d, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x64, 0x68, 0x63, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x12, 0x6a, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xa4, 0xd7, 0xb6,
	0xdd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x37, 0x82, 0x41, 0x34,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61,
	0x6e, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x5e, 0x0a,
	0x03, 0x6d, 0x74, 0x75, 0x18, 0xbb, 0xb7, 0x9a, 0xb7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x33, 0x82, 0x41, 0x30, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x74, 0x75, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x1a, 0xf5, 0x0c,
	0x0a, 0x08, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x8f, 0x01, 0x0a, 0x11, 0x69,
	0x6e, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x6b, 0x74, 0x73,
	0x18, 0xab, 0xba, 0xb3, 0xda, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x4a, 0x82, 0x41, 0x47, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64,
	0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x64, 0x69, 0x73,
	0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x0f, 0x69, 0x6e, 0x44,
	0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x82, 0x01, 0x0a,
	0x0d, 0x69, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0xa6,
	0xdf, 0xf4, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x46, 0x82, 0x41,
	0x43, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c,
	0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d,
	0x70, 0x6b, 0x74, 0x73, 0x52, 0x0b, 0x69, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x6b, 0x74,
	0x73, 0x12, 0x94, 0x01, 0x0a, 0x13, 0x69, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x65, 0x64, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0xd0, 0xa5, 0xee, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4c, 0x82, 0x41, 0x49, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70,
	0x76, 0x34, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x2d, 0x6f,
	0x63, 0x74, 0x65, 0x74, 0x73, 0x52, 0x11, 0x69, 0x6e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x65, 0x64, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12, 0x8f, 0x01, 0x0a, 0x11, 0x69, 0x6e, 0x5f,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0xb4,
	0x9f, 0xb1, 0xf6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4a, 0x82,
	0x41, 0x47, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76,
	0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x65, 0x64, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x0f, 0x69, 0x6e, 0x46, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x77, 0x0a, 0x09, 0x69, 0x6e,
	0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0xad, 0xe0, 0xbd, 0x36, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x34,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f,
	0x69, 0x6e, 0x2d, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x52, 0x08, 0x69, 0x6e, 0x4f, 0x63, 0x74,
	0x65, 0x74, 0x73, 0x12, 0x72, 0x0a, 0x07, 0x69, 0x6e, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0xf9,
	0xc3, 0x90, 0xd0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x40, 0x82,
	0x41, 0x3d, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76,
	0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52,
	0x06, 0x69, 0x6e, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x91, 0x01, 0x0a, 0x12, 0x6f, 0x75, 0x74, 0x5f,
	0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0xb2,
	0x8b, 0xf4, 0x72, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4b, 0x82, 0x41,
	0x48, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c,
	0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x64, 0x69, 0x73, 0x63, 0x61,
	0x72, 0x64, 0x65, 0x64, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x44, 0x69,
	0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x85, 0x01, 0x0a, 0x0e,
	0x6f, 0x75, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0xaf,
	0xa3, 0xdd, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x47, 0x82, 0x41,
	0x44, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c,
	0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50,
	0x6b, 0x74, 0x73, 0x12, 0x97, 0x01, 0x0a, 0x14, 0x6f, 0x75, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0xc1, 0xd5, 0xf8,
	0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4d, 0x82, 0x41, 0x4a, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e,
	0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x65, 0x64, 0x2d, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x52, 0x12, 0x6f, 0x75, 0x74, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12, 0x92, 0x01,
	0x0a, 0x12, 0x6f, 0x75, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f,
	0x70, 0x6b, 0x74, 0x73, 0x18, 0xa5, 0xd1, 0xd9, 0x95, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x4b, 0x82, 0x41, 0x48, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x6f, 0x75,
	0x74, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x2d, 0x70, 0x6b, 0x74, 0x73,
	0x52, 0x10, 0x6f, 0x75, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x50, 0x6b,
	0x74, 0x73, 0x12, 0x7b, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73,
	0x18, 0xc0, 0xc6, 0xf4, 0xcc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x43, 0x82, 0x41, 0x40, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64,
	0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x6f, 0x63,
	0x74, 0x65, 0x74, 0x73, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12,
	0x74, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0xa4, 0x8a, 0xbf, 0x1f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f,
	0x69, 0x70, 0x76, 0x34, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x07, 0x6f, 0x75,
	0x74, 0x50, 0x6b, 0x74, 0x73, 0x1a, 0xd7, 0x0d, 0x0a, 0x0a, 0x55, 0x6e, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x65, 0x64, 0x12, 0x9a, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0xe7, 0xae, 0x90, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x64, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x55, 0x6e, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x65, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x3b, 0x82, 0x41,
	0x38, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c,
	0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0xb5, 0x01, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x72, 0x65, 0x66, 0x18, 0x82, 0xe4, 0xec, 0xce, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e,
	0x55, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70,
	0x76, 0x34, 0x2f, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x66, 0x52, 0x0c, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x12, 0x97, 0x01, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0xd8, 0xe0, 0xfc, 0x96, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e,
	0x55, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x3a, 0x82, 0x41, 0x37, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x75, 0x6e, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x1a, 0x80, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x76,
	0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xf9, 0xb0, 0xc4, 0xc5, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x43, 0x82, 0x41, 0x40, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69,
	0x70, 0x76, 0x34, 0x2f, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x1a, 0xd6, 0x07, 0x0a, 0x0c, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x12, 0xb6, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0xa3, 0xb9, 0xe0, 0x9a, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x55,
	0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x49, 0x82,
	0x41, 0x46, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76,
	0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x65, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65,
	0x66, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0xb2, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x84, 0xd9, 0xb1, 0xfe, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x56, 0x6c, 0x61,
	0x6e, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x55, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65,
	0x64, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x48, 0x82, 0x41, 0x45, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f,
	0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x66, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xac, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x8b, 0x01, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0xc3,
	0x8e, 0x93, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x53,
	0x82, 0x41, 0x50, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d,
	0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x65, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x72,
	0x65, 0x66, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x93,
	0x01, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18,
	0x91, 0x89, 0xca, 0xfb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x56,
	0x82, 0x41, 0x53, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d,
	0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x65, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x72,
	0x65, 0x66, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x1a, 0xa8, 0x02, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x8a,
	0x01, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0xdc, 0xa6, 0xc3,
	0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x52, 0x82, 0x41,
	0x4f, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c,
	0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x65, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x66,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x91, 0x01, 0x0a, 0x0c,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0xac, 0xa1, 0xd6,
	0x5a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x55, 0x82, 0x41, 0x52, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e,
	0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x66, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x1a,
	0x7e, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x75, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x8a, 0x91, 0x89, 0xea, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x75, 0x6e,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x1a,
	0xdc, 0x7c, 0x0a, 0x04, 0x49, 0x70, 0x76, 0x36, 0x12, 0x91, 0x01, 0x0a, 0x09, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0xfb, 0xac, 0xbe, 0xff, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x49, 0x70,
	0x76, 0x36, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x42, 0x33, 0x82, 0x41,
	0x30, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c,
	0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x84, 0x01, 0x0a,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xff, 0x97, 0xa3, 0x36, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x49, 0x70,
	0x76, 0x36, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x30, 0x82, 0x41, 0x2d, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f,
	0x69, 0x70, 0x76, 0x36, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x91, 0x01, 0x0a, 0x09, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x18, 0xea, 0xb5, 0xff, 0xb8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x42, 0x33, 0x82, 0x41, 0x30, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70,
	0x76, 0x36, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x52, 0x09, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x12, 0xba, 0x01, 0x0a, 0x14, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x5f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0xd2, 0xb7, 0x80, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42,
	0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64,
	0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x2d, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x13, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x80, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xb0,
	0xe2, 0xfd, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x64,
	0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42,
	0x2f, 0x82, 0x41, 0x2c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64,
	0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x95, 0x01, 0x0a, 0x0a, 0x75, 0x6e, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x18, 0x88, 0x85, 0x80, 0xfd, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x49, 0x70,
	0x76, 0x36, 0x2e, 0x55, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x42, 0x34, 0x82,
	0x41, 0x31, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76,
	0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x65, 0x64, 0x52, 0x0a, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x1a,
	0xf0, 0x38, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0xa0, 0x01,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x96, 0xc9, 0xc1, 0xf4, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e,
	0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x42, 0x3b, 0x82, 0x41, 0x38, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e,
	0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x1a, 0x82, 0x36, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0xa8, 0x01, 0x0a,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xf7, 0xc1, 0xea, 0x49, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x49, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x49, 0x70,
	0x76, 0x36, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x42, 0x82, 0x41, 0x3f,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61,
	0x6e, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xa5, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0xa8, 0xcc, 0xfa, 0xcf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x36,
	0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0xa0, 0x01, 0x0a, 0x04, 0x76, 0x72, 0x72, 0x70, 0x18, 0xa3, 0x92, 0x97, 0x34, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x47, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x49,
	0x70, 0x76, 0x36, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e,
	0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x52, 0x04, 0x76, 0x72,
	0x72, 0x70, 0x1a, 0x8b, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x70, 0x0a,
	0x02, 0x69, 0x70, 0x18, 0xd5, 0xb5, 0x80, 0xd0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x70, 0x52, 0x02, 0x69, 0x70, 0x12,
	0x8e, 0x01, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0xcf, 0x90, 0xa3, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x50, 0x82, 0x41, 0x4d, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x1a, 0x8f, 0x07, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x6e, 0x0a, 0x02, 0x69, 0x70,
	0x18, 0xe4, 0xa4, 0x99, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x69, 0x70, 0x52, 0x02, 0x69, 0x70, 0x12, 0x8e, 0x01, 0x0a, 0x06, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0xc5, 0xee, 0xc7, 0x21, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x66, 0x49, 0x70, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x42, 0x48, 0x82, 0x41, 0x45, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f,
	0x69, 0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x8d, 0x01, 0x0a, 0x0d,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x90, 0xda,
	0x8b, 0xbf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4f, 0x82, 0x41,
	0x4c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c,
	0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x0c, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0xb5, 0x01, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0xe5, 0xfa, 0xab, 0xd0, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x4f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x49, 0x70,
	0x76, 0x36, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x42, 0x48, 0x82, 0x41, 0x45, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0xbc, 0x02, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10,
	0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00,
	0x12, 0x22, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x45,
	0x52, 0x52, 0x45, 0x44, 0x10, 0x01, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x50, 0x52, 0x45, 0x46, 0x45,
	0x52, 0x52, 0x45, 0x44, 0x12, 0x24, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44,
	0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x10, 0x02, 0x1a, 0x0d, 0x82, 0x41, 0x0a,
	0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x12, 0x1e, 0x0a, 0x0e, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x03, 0x1a, 0x0a,
	0x82, 0x41, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x13, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x49, 0x42, 0x4c,
	0x45, 0x10, 0x04, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x49, 0x4e, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x49, 0x42, 0x4c, 0x45, 0x12, 0x1e, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x05, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x12, 0x22, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54,
	0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x06, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x54,
	0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x56, 0x45, 0x12, 0x22, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x10, 0x07, 0x1a, 0x0c,
	0x82, 0x41, 0x09, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x12, 0x24, 0x0a, 0x11,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4d, 0x49, 0x53, 0x54, 0x49,
	0x43, 0x10, 0x08, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x4f, 0x50, 0x54, 0x49, 0x4d, 0x49, 0x53, 0x54,
	0x49, 0x43, 0x1a, 0xe0, 0x28, 0x0a, 0x04, 0x56, 0x72, 0x72, 0x70, 0x12, 0xc3, 0x01, 0x0a, 0x0a,
	0x76, 0x72, 0x72, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0xe2, 0xb4, 0xf1, 0x3e, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e,
	0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x2e, 0x56, 0x72, 0x72,
	0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x42, 0x4b, 0x82, 0x41, 0x48, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f,
	0x69, 0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f, 0x76, 0x72, 0x72, 0x70,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x09, 0x76, 0x72, 0x72, 0x70, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x1a, 0x82, 0x25, 0x0a, 0x09, 0x56, 0x72, 0x72, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0xc7, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x83, 0xd4, 0xb6, 0x39, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e,
	0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x2e, 0x56, 0x72, 0x72,
	0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x52, 0x82,
	0x41, 0x4f, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76,
	0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f,
	0x76, 0x72, 0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xf6, 0x01, 0x0a, 0x12, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x18, 0xf4, 0x80, 0xab, 0x9d, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x63, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x56,
	0x72, 0x72, 0x70, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x42,
	0x5e, 0x82, 0x41, 0x5b, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64,
	0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x72,
	0x70, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x52,
	0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x12, 0xc3, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xe4, 0xda, 0xde,
	0x49, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x56, 0x6c,
	0x61, 0x6e, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x2e, 0x56,
	0x72, 0x72, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x51,
	0x82, 0x41, 0x4e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d,
	0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x72, 0x70,
	0x2f, 0x76, 0x72, 0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xa5, 0x0a, 0x0a, 0x06, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x98, 0x01, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0xfe, 0xeb, 0x80, 0xe2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x5e, 0x82, 0x41, 0x5b, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f,
	0x76, 0x72, 0x72, 0x70, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x2d, 0x6d, 0x6f,
	0x64, 0x65, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0xb8,
	0x01, 0x0a, 0x16, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0xd9, 0xc3, 0xf3, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x69, 0x82, 0x41, 0x66, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70,
	0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x64, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x52, 0x15, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x8c, 0x01, 0x0a, 0x07, 0x70, 0x72,
	0x65, 0x65, 0x6d, 0x70, 0x74, 0x18, 0xfb, 0xa5, 0xfa, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x5a, 0x82, 0x41, 0x57, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x52,
	0x07, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x12, 0x9e, 0x01, 0x0a, 0x0d, 0x70, 0x72, 0x65,
	0x65, 0x6d, 0x70, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0xe1, 0xba, 0xec, 0xda, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x60, 0x82, 0x41, 0x5d, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f,
	0x69, 0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f, 0x76, 0x72, 0x72, 0x70,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72,
	0x65, 0x65, 0x6d, 0x70, 0x74, 0x2d, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x52, 0x0c, 0x70, 0x72, 0x65,
	0x65, 0x6d, 0x70, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x90, 0x01, 0x0a, 0x08, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0xd2, 0xc1, 0xcf, 0x9e, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5b, 0x82, 0x41, 0x58, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x36,
	0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0xa5, 0x01, 0x0a,
	0x0f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x84, 0xea, 0xd7, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x62, 0x82, 0x41, 0x5f, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72,
	0x72, 0x70, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x2d, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x0e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0xad, 0x01, 0x0a, 0x12, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0xf6, 0xf1, 0xe9, 0x6a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x65, 0x82, 0x41, 0x62,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61,
	0x6e, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f, 0x76, 0x72,
	0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x2d, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x52, 0x10, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x12, 0xa9, 0x01, 0x0a, 0x11, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x9b, 0xa0, 0xd8, 0xaa, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x64, 0x82, 0x41, 0x61, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f,
	0x69, 0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f, 0x76, 0x72, 0x72, 0x70,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x76, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x69, 0x64, 0x52,
	0x0f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x1a, 0xfd, 0x09, 0x0a, 0x11, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0xed, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0xf9, 0x85, 0xad, 0xc3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6a, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e,
	0x56, 0x72, 0x72, 0x70, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x65, 0x82, 0x41, 0x62, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70,
	0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xe8, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0xce, 0xa4, 0x95, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x69, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x72,
	0x72, 0x70, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x64, 0x82, 0x41, 0x61, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x1a, 0x86, 0x03, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xbf, 0x01, 0x0a,
	0x12, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0xc8, 0xea, 0xcb, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x78, 0x82, 0x41, 0x75, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x76,
	0x72, 0x72, 0x70, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x2d, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x44, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0xb9,
	0x01, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x18, 0xfb, 0xcb, 0xdc, 0xdc, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x75, 0x82, 0x41, 0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x1a, 0x83, 0x03, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0xbf, 0x01, 0x0a, 0x12, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x95, 0xe1, 0xb7, 0xba,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x77, 0x82, 0x41, 0x74, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e,
	0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f, 0x76, 0x72, 0x72,
	0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2d, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x2d, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x11, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x44, 0x65, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0xb7, 0x01, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0xdc, 0xcc, 0xb8, 0x21, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x74, 0x82, 0x41, 0x71, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e,
	0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f, 0x76, 0x72, 0x72,
	0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2d, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x52, 0x0e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x1a, 0xc3, 0x0b, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x96, 0x01, 0x0a, 0x0b, 0x61,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0xf1, 0xa2, 0x80, 0x20, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5d, 0x82, 0x41, 0x5a, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69,
	0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0xb7, 0x01, 0x0a, 0x16, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0xb0,
	0xac, 0xe6, 0x5c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x68, 0x82, 0x41,
	0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c,
	0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f, 0x76,
	0x72, 0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x15, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0xa6, 0x01,
	0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0xa7, 0x9c, 0x93, 0xf4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x62, 0x82, 0x41, 0x5f, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x76,
	0x72, 0x72, 0x70, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2d, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x8b, 0x01, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x65, 0x6d,
	0x70, 0x74, 0x18, 0xe4, 0xe2, 0x99, 0x61, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x59, 0x82, 0x41, 0x56, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72,
	0x72, 0x70, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x07, 0x70, 0x72, 0x65,
	0x65, 0x6d, 0x70, 0x74, 0x12, 0x9c, 0x01, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74,
	0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0xf6, 0xd1, 0xfd, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x5f, 0x82, 0x41, 0x5c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x2d,
	0x64, 0x65, 0x6c, 0x61, 0x79, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x44, 0x65,
	0x6c, 0x61, 0x79, 0x12, 0x8f, 0x01, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0xcf, 0xd4, 0xd4, 0xc0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x5a, 0x82, 0x41, 0x57, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64,
	0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x72,
	0x70, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0xa4, 0x01, 0x0a, 0x0f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xaf, 0xfe, 0xf4, 0x50, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x61, 0x82, 0x41, 0x5e, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f,
	0x69, 0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f, 0x76, 0x72, 0x72, 0x70,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0e, 0x76, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0xad, 0x01, 0x0a,
	0x12, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x18, 0xeb, 0xc8, 0xb7, 0xf9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x64, 0x82, 0x41, 0x61, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x2d,
	0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x10, 0x76, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0xa7, 0x01, 0x0a,
	0x11, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x98, 0xa4, 0xe0, 0x49, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x63, 0x82, 0x41, 0x60, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72,
	0x72, 0x70, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x2d, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x2d, 0x69, 0x64, 0x52, 0x0f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x1a, 0x8c, 0x02, 0x0a, 0x0c, 0x56, 0x72, 0x72, 0x70, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x89, 0x01, 0x0a, 0x11, 0x76, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x5d, 0x82, 0x41, 0x5a, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d,
	0x69, 0x64, 0x52, 0x0f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x70, 0x0a, 0x0a, 0x76, 0x72, 0x72, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x64,
	0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x72, 0x72, 0x70,
	0x2e, 0x56, 0x72, 0x72, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x09, 0x76, 0x72, 0x72, 0x70,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0xba, 0x01, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x4b, 0x65, 0x79, 0x12, 0x4e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x69, 0x70,
	0x52, 0x02, 0x69, 0x70, 0x12, 0x5c, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x56, 0x6c,
	0x61, 0x6e, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x1a, 0xec, 0x03, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x75, 0x0a,
	0x0b, 0x64, 0x68, 0x63, 0x70, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0xe1, 0xd8, 0xdb,
	0x4f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3c, 0x82, 0x41, 0x39, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e,
	0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64, 0x68, 0x63,
	0x70, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x64, 0x68, 0x63, 0x70, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x12, 0x9d, 0x01, 0x0a, 0x19, 0x64, 0x75, 0x70, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69,
	0x74, 0x73, 0x18, 0x8d, 0xc4, 0x91, 0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x4a, 0x82, 0x41, 0x47, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x64, 0x75, 0x70, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x2d, 0x64, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x2d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x16, 0x64, 0x75,
	0x70, 0x41, 0x64, 0x64, 0x72, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x6d, 0x69, 0x74, 0x73, 0x12, 0x6a, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0xe1, 0xd7, 0x93, 0x70, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x38, 0x82,
	0x41, 0x35, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76,
	0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x5f, 0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18, 0xca, 0xcd, 0xed, 0xed, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x34, 0x82, 0x41, 0x31, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76,
	0x36, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x74, 0x75, 0x52, 0x03, 0x6d, 0x74,
	0x75, 0x1a, 0xee, 0x0f, 0x0a, 0x09, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x12,
	0xa4, 0x01, 0x0a, 0x08, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x18, 0x8f, 0xc6, 0xad,
	0x83, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x56,
	0x6c, 0x61, 0x6e, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x42, 0x3c,
	0x82, 0x41, 0x39, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d,
	0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x52, 0x08, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x1a, 0xf7, 0x0c, 0x0a, 0x08, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x12, 0xab, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xf0,
	0x96, 0xf0, 0xd0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x64, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x42, 0x43, 0x82, 0x41, 0x40, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0xa7, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xe9, 0xbf, 0xfd, 0xa6,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x56, 0x6c,
	0x61, 0x6e, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x9d, 0x02, 0x0a, 0x06,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x71, 0x0a, 0x02, 0x69, 0x70, 0x18, 0xbc, 0xfb, 0xa9,
	0xd2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x46, 0x82,
	0x41, 0x43, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76,
	0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x69, 0x70, 0x52, 0x02, 0x69, 0x70, 0x12, 0x9f, 0x01, 0x0a, 0x12, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x8c, 0xcb, 0xc3, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x56, 0x82, 0x41, 0x53, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x10, 0x6c, 0x69, 0x6e, 0x6b, 0x4c,
	0x61, 0x79, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0xf2, 0x07, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x70, 0x0a, 0x02, 0x69, 0x70, 0x18, 0xaf, 0xac, 0xd1, 0xb0,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x45, 0x82, 0x41,
	0x42, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c,
	0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x69, 0x70, 0x52, 0x02, 0x69, 0x70, 0x12, 0x82, 0x01, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x18, 0x8a, 0x94, 0xeb, 0xd3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x4c, 0x82, 0x41, 0x49, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x73, 0x2d, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x52, 0x08, 0x69, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x9d, 0x01, 0x0a,
	0x12, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0xbb, 0x84, 0xfc, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x55, 0x82, 0x41, 0x52, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x10, 0x6c, 0x69, 0x6e, 0x6b,
	0x4c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0xd4, 0x01, 0x0a,
	0x0e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0xd6, 0xd9, 0xf3, 0x3b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x57, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x64, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x51, 0x82, 0x41, 0x4e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2d, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x8e, 0x01, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0xf2,
	0xb5, 0xcc, 0x2d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49,
	0x66, 0x49, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x42, 0x49, 0x82, 0x41, 0x46, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x06, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x22, 0xe9, 0x01, 0x0a, 0x0d, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42,
	0x4f, 0x52, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12,
	0x2b, 0x0a, 0x18, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x01, 0x1a, 0x0d, 0x82,
	0x41, 0x0a, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x12, 0x29, 0x0a, 0x17,
	0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45,
	0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x52, 0x45,
	0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x12, 0x21, 0x0a, 0x13, 0x4e, 0x45, 0x49, 0x47, 0x48,
	0x42, 0x4f, 0x52, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x4c, 0x45, 0x10, 0x03,
	0x1a, 0x08, 0x82, 0x41, 0x05, 0x53, 0x54, 0x41, 0x4c, 0x45, 0x12, 0x21, 0x0a, 0x13, 0x4e, 0x45,
	0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x41,
	0x59, 0x10, 0x04, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x12, 0x21, 0x0a,
	0x13, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50,
	0x52, 0x4f, 0x42, 0x45, 0x10, 0x05, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x50, 0x52, 0x4f, 0x42, 0x45,
	0x1a, 0xbf, 0x01, 0x0a, 0x0b, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4b, 0x65, 0x79,
	0x12, 0x4f, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3f, 0x82, 0x41,
	0x3c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c,
	0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x69, 0x70, 0x52, 0x02, 0x69,
	0x70, 0x12, 0x5f, 0x0a, 0x08, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e,
	0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x52, 0x08, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x1a, 0xa3, 0x09, 0x0a, 0x13, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x41, 0x64, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0xae, 0x01, 0x0a, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x93, 0xd3, 0xbd, 0xdd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x4b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x49, 0x70, 0x76,
	0x36, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x45, 0x82, 0x41,
	0x42, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c,
	0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x61,
	0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xa9, 0x01, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xf4, 0xc0, 0xdc, 0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x49, 0x70, 0x76, 0x36,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e,
	0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x61, 0x64, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x97, 0x03, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x82, 0x01, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0xed, 0xcc, 0x92, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4e, 0x82,
	0x41, 0x4b, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76,
	0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d,
	0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x82, 0x01, 0x0a, 0x08, 0x6c, 0x69, 0x66, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0xfb, 0xd1, 0xfa, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x2d, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x52, 0x08, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x82, 0x01, 0x0a,
	0x08, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x18, 0xa7, 0xd5, 0xed, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70,
	0x76, 0x36, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73,
	0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x52, 0x08, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x1a, 0x94, 0x03, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0xac, 0xe8, 0xda, 0x8b, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4d, 0x82, 0x41, 0x4a, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70,
	0x76, 0x36, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x81, 0x01, 0x0a, 0x08, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x96, 0xb4,
	0xb9, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4d, 0x82, 0x41, 0x4a,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61,
	0x6e, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x61, 0x64,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x08, 0x6c, 0x69, 0x66, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x08, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x18, 0xde, 0x8e, 0xe7, 0x5b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x4d, 0x82, 0x41, 0x4a, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64,
	0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x2d, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x52, 0x08,
	0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x1a, 0xfc, 0x11, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x99, 0x01, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18,
	0xc8, 0xcd, 0xa9, 0xd8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x42, 0x38, 0x82, 0x41, 0x35, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e,
	0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x75,
	0x0a, 0x0b, 0x64, 0x68, 0x63, 0x70, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0xda, 0xff,
	0xd6, 0xfb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3b, 0x82, 0x41,
	0x38, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c,
	0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x68,
	0x63, 0x70, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x64, 0x68, 0x63, 0x70, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x9d, 0x01, 0x0a, 0x19, 0x64, 0x75, 0x70, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d,
	0x69, 0x74, 0x73, 0x18, 0xc6, 0xc8, 0xcd, 0xf2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x49, 0x82, 0x41, 0x46, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x64, 0x75, 0x70, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x2d, 0x64, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x2d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x16, 0x64,
	0x75, 0x70, 0x41, 0x64, 0x64, 0x72, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x69, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0xb2, 0xe3, 0xb8, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x37,
	0x82, 0x41, 0x34, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d,
	0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x5e, 0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18, 0xa9, 0x83, 0xed, 0xf3, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x33, 0x82, 0x41, 0x30, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76,
	0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x74, 0x75, 0x52, 0x03, 0x6d, 0x74, 0x75,
	0x1a, 0xf4, 0x0c, 0x0a, 0x08, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x8e, 0x01,
	0x0a, 0x11, 0x69, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x70,
	0x6b, 0x74, 0x73, 0x18, 0xbd, 0xf2, 0xa0, 0x72, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x4a, 0x82, 0x41, 0x47, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x64,
	0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x0f, 0x69,
	0x6e, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x82,
	0x01, 0x0a, 0x0d, 0x69, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x70, 0x6b, 0x74, 0x73,
	0x18, 0xac, 0xc8, 0xc3, 0x59, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x46,
	0x82, 0x41, 0x43, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d,
	0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x0b, 0x69, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50,
	0x6b, 0x74, 0x73, 0x12, 0x95, 0x01, 0x0a, 0x13, 0x69, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x65, 0x64, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0xce, 0xec, 0xd5, 0xa9,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4c, 0x82, 0x41, 0x49, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e,
	0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65,
	0x64, 0x2d, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x52, 0x11, 0x69, 0x6e, 0x46, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x65, 0x64, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12, 0x8e, 0x01, 0x0a, 0x11,
	0x69, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x6b, 0x74,
	0x73, 0x18, 0xf6, 0xde, 0x92, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x4a, 0x82, 0x41, 0x47, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64,
	0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x66, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x0f, 0x69, 0x6e, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x77, 0x0a, 0x09,
	0x69, 0x6e, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0xef, 0xd4, 0xd6, 0x69, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70,
	0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x52, 0x08, 0x69, 0x6e, 0x4f,
	0x63, 0x74, 0x65, 0x74, 0x73, 0x12, 0x71, 0x0a, 0x07, 0x69, 0x6e, 0x5f, 0x70, 0x6b, 0x74, 0x73,
	0x18, 0xaf, 0xee, 0xf0, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x40,
	0x82, 0x41, 0x3d, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d,
	0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x70, 0x6b, 0x74, 0x73,
	0x52, 0x06, 0x69, 0x6e, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x92, 0x01, 0x0a, 0x12, 0x6f, 0x75, 0x74,
	0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18,
	0xa0, 0xc3, 0x9f, 0xee, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4b,
	0x82, 0x41, 0x48, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d,
	0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x64, 0x69, 0x73,
	0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x10, 0x6f, 0x75, 0x74,
	0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x86, 0x01,
	0x0a, 0x0e, 0x6f, 0x75, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x70, 0x6b, 0x74, 0x73,
	0x18, 0xf9, 0xf4, 0xa3, 0xfa, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x47, 0x82, 0x41, 0x44, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64,
	0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x97, 0x01, 0x0a, 0x14, 0x6f, 0x75, 0x74, 0x5f, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18,
	0xe3, 0x81, 0x9f, 0x6d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4d, 0x82,
	0x41, 0x4a, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76,
	0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x65, 0x64, 0x2d, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x52, 0x12, 0x6f, 0x75,
	0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73,
	0x12, 0x91, 0x01, 0x0a, 0x12, 0x6f, 0x75, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x65, 0x64, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0xdb, 0x87, 0x8a, 0x71, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4b, 0x82, 0x41, 0x48, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x36,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f,
	0x6f, 0x75, 0x74, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x2d, 0x70, 0x6b,
	0x74, 0x73, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64,
	0x50, 0x6b, 0x74, 0x73, 0x12, 0x7a, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x63, 0x74, 0x65,
	0x74, 0x73, 0x18, 0xd6, 0xa2, 0x90, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x43, 0x82, 0x41, 0x40, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x6f,
	0x63, 0x74, 0x65, 0x74, 0x73, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73,
	0x12, 0x75, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x9e, 0xe4, 0xb9,
	0x9f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x41, 0x82, 0x41, 0x3e,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61,
	0x6e, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x07,
	0x6f, 0x75, 0x74, 0x50, 0x6b, 0x74, 0x73, 0x1a, 0xd4, 0x0d, 0x0a, 0x0a, 0x55, 0x6e, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x12, 0x9a, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0xed, 0xb4, 0xa0, 0x73, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x55, 0x6e, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x3b,
	0x82, 0x41, 0x38, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d,
	0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0xb5, 0x01, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0xe8, 0x8f, 0xa2, 0xdf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x48, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x49, 0x70, 0x76,
	0x36, 0x2e, 0x55, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f,
	0x69, 0x70, 0x76, 0x36, 0x2f, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x66, 0x52, 0x0c, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x12, 0x96, 0x01, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xa2, 0x80, 0x85, 0x39, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x49, 0x70, 0x76, 0x36,
	0x2e, 0x55, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x3a, 0x82, 0x41, 0x37, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x75, 0x6e, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x1a, 0x7f, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x75,
	0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x83, 0xfc, 0x95, 0x52, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x43, 0x82, 0x41, 0x40, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70,
	0x76, 0x36, 0x2f, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x1a, 0xd7, 0x07, 0x0a, 0x0c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x12, 0xb6, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0xcd, 0xda, 0x9d, 0xed, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x55, 0x6e,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x52, 0x65, 0x66, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x49, 0x82, 0x41,
	0x46, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c,
	0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x65, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x66,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0xb2, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x82, 0xa7, 0xb4, 0xe0, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e,
	0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x55, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x48, 0x82, 0x41, 0x45, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x75,
	0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x66, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x1a, 0xac, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x8b, 0x01, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0xb9, 0xd9,
	0xa1, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x53, 0x82,
	0x41, 0x50, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76,
	0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x65, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65,
	0x66, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x93, 0x01,
	0x0a, 0x0c, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0xfb,
	0x80, 0x88, 0xd6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x56, 0x82,
	0x41, 0x53, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76,
	0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x65, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65,
	0x66, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x1a, 0xa9, 0x02, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x8a, 0x01,
	0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0xae, 0x98, 0xfa, 0x54,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x52, 0x82, 0x41, 0x4f,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61,
	0x6e, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65,
	0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x66, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52,
	0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x92, 0x01, 0x0a, 0x0c, 0x73,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0xca, 0xe2, 0xc3, 0xde,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x55, 0x82, 0x41, 0x52, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e,
	0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x66, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x1a,
	0x7d, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x74, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0xf0, 0x81, 0xaa, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x75, 0x6e, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x1a, 0x5b,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x76, 0x6c, 0x61, 0x6e, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0xcc, 0xff, 0xbb, 0x45, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0a, 0x76, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x24, 0x0a,
	0x0b, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xd5, 0x99, 0xb9,
	0x45, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0a, 0x76, 0x6c, 0x61, 0x6e, 0x55, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x42, 0x06, 0x0a, 0x04, 0x76, 0x6c, 0x61, 0x6e, 0x1a, 0x07, 0x0a, 0x05, 0x53,
	0x6f, 0x6e, 0x65, 0x74, 0x1a, 0x82, 0x21, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x86,
	0x01, 0x0a, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0xab, 0xee, 0xa0, 0xe2, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x2b, 0x82,
	0x41, 0x28, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x77, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x8c, 0xac, 0xf1, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x42, 0x27, 0x82,
	0x41, 0x24, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x67, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x97, 0x9f, 0xd9, 0xb9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x2a, 0x82, 0x41, 0x27, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x9e, 0x9b, 0xe6, 0x9d, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x26, 0x82, 0x41, 0x23, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x6b, 0x0a, 0x0d, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0xd9, 0x84, 0xea, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2c, 0x82, 0x41, 0x29, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x2d, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x0c, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x58, 0x0a, 0x07, 0x69, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0xaa, 0xd7, 0xae,
	0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x26, 0x82, 0x41, 0x23, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x66, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x52, 0x07, 0x69, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x63, 0x0a, 0x0b, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x90, 0xe1, 0xdc, 0x3c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2a, 0x82, 0x41, 0x27, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x61, 0x73, 0x74, 0x2d, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x59, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x18, 0xb8, 0xc7, 0x83, 0xd2,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x26, 0x82, 0x41, 0x23, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63,
	0x61, 0x6c, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x6a, 0x0a, 0x0d, 0x6c,
	0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0xd8, 0x96, 0xea,
	0xb1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2c, 0x82, 0x41, 0x29,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x6f, 0x6f, 0x70,
	0x62, 0x61, 0x63, 0x6b, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x6c, 0x6f, 0x6f, 0x70, 0x62,
	0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x4c, 0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18, 0xd5,
	0x9a, 0xfb, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x22, 0x82, 0x41,
	0x1f, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x74, 0x75,
	0x52, 0x03, 0x6d, 0x74, 0x75, 0x12, 0x52, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xee, 0xf4,
	0x8a, 0xf0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x23,
	0x82, 0x41, 0x20, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e,
	0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x0b, 0x6f, 0x70,
	0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0xf2, 0xca, 0xa6, 0xe0, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x2a, 0x82, 0x41, 0x27, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x2d, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x72,
	0x0a, 0x10, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x18, 0x96, 0xd4, 0x84, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x2f, 0x82, 0x41, 0x2c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x52, 0x0f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x12, 0x65, 0x0a, 0x04, 0x74, 0x70, 0x69, 0x64, 0x18, 0x98, 0xba, 0xbb, 0x93, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x6c, 0x61, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x54, 0x50, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x23,
	0x82, 0x41, 0x20, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74,
	0x70, 0x69, 0x64, 0x52, 0x04, 0x74, 0x70, 0x69, 0x64, 0x12, 0x66, 0x0a, 0x0b, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x18, 0xfb, 0xdf, 0xab, 0x28, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2a, 0x82, 0x41, 0x27, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x12, 0x64, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0xe3, 0xd3, 0xe3, 0xaa, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x49, 0x45, 0x54, 0x46, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x23, 0x82, 0x41,
	0x20, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0xbe, 0x10, 0x0a, 0x08, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x85, 0x01, 0x0a, 0x13, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xba, 0xc1, 0x90,
	0x81, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3b, 0x82, 0x41, 0x38,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x2d, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x12, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65,
	0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x7e, 0x0a, 0x11,
	0x69, 0x6e, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6b, 0x74,
	0x73, 0x18, 0x85, 0x96, 0xce, 0x85, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x62, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x0f, 0x69, 0x6e, 0x42,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x6c, 0x0a, 0x0b,
	0x69, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0xfa, 0x95, 0xdb, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x33, 0x82, 0x41, 0x30, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x73, 0x52, 0x0a,
	0x69, 0x6e, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x73, 0x12, 0x67, 0x0a, 0x09, 0x69, 0x6e,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0xea, 0xcd, 0xe2, 0xd9, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x31, 0x82, 0x41, 0x2e, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f,
	0x69, 0x6e, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x08, 0x69, 0x6e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x12, 0x72, 0x0a, 0x0d, 0x69, 0x6e, 0x5f, 0x66, 0x63, 0x73, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x18, 0xf3, 0xdd, 0x94, 0xef, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d,
	0x66, 0x63, 0x73, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x0b, 0x69, 0x6e, 0x46, 0x63,
	0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x7d, 0x0a, 0x11, 0x69, 0x6e, 0x5f, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x88, 0xb3, 0x81,
	0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x0f, 0x69, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x67, 0x0a, 0x09, 0x69, 0x6e, 0x5f, 0x6f, 0x63, 0x74,
	0x65, 0x74, 0x73, 0x18, 0xcb, 0x97, 0xed, 0x9e, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x31, 0x82, 0x41, 0x2e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x6f,
	0x63, 0x74, 0x65, 0x74, 0x73, 0x52, 0x08, 0x69, 0x6e, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12,
	0x61, 0x0a, 0x07, 0x69, 0x6e, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0xe3, 0xfb, 0xed, 0xc4, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2f, 0x82, 0x41, 0x2c, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x06, 0x69, 0x6e, 0x50, 0x6b,
	0x74, 0x73, 0x12, 0x78, 0x0a, 0x0f, 0x69, 0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0xf3, 0xf5, 0x89, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x37, 0x82, 0x41, 0x34, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e,
	0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x0d, 0x69,
	0x6e, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x7d, 0x0a, 0x11,
	0x69, 0x6e, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x18, 0xa9, 0xbf, 0x92, 0x73, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x39, 0x82, 0x41, 0x36, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x52, 0x0f, 0x69, 0x6e, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x12, 0x69, 0x0a, 0x0a, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x18, 0xc7, 0xb9, 0xd9, 0x58, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x32, 0x82, 0x41, 0x2f, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x2f, 0x6c, 0x61, 0x73, 0x74, 0x2d, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x09, 0x6c, 0x61, 0x73,
	0x74, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x12, 0x81, 0x01, 0x0a, 0x12, 0x6f, 0x75, 0x74, 0x5f, 0x62,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0xe4, 0xef,
	0xb9, 0xa1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3a, 0x82, 0x41,
	0x37, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x42, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x6f, 0x0a, 0x0c, 0x6f, 0x75,
	0x74, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0xc7, 0xa5, 0x92, 0x79, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x34, 0x82, 0x41, 0x31, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x73, 0x52, 0x0b,
	0x6f, 0x75, 0x74, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x73, 0x12, 0x6a, 0x0a, 0x0a, 0x6f,
	0x75, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0xc7, 0xec, 0xd1, 0xe0, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x32, 0x82, 0x41, 0x2f, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x09, 0x6f, 0x75,
	0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x81, 0x01, 0x0a, 0x12, 0x6f, 0x75, 0x74, 0x5f,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0xf5,
	0xb0, 0xa8, 0xda, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3a, 0x82,
	0x41, 0x37, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x69, 0x0a, 0x0a, 0x6f,
	0x75, 0x74, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0xca, 0xb3, 0xec, 0x5f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x32, 0x82, 0x41, 0x2f, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x52, 0x09, 0x6f, 0x75, 0x74,
	0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12, 0x64, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6b,
	0x74, 0x73, 0x18, 0x8a, 0xf2, 0xd3, 0xd0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x30, 0x82, 0x41, 0x2d, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x70,
	0x6b, 0x74, 0x73, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x7a, 0x0a, 0x10,
	0x6f, 0x75, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73,
	0x18, 0xa6, 0xae, 0xb6, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x38,
	0x82, 0x41, 0x35, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x0e, 0x6f, 0x75, 0x74, 0x55, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x50, 0x6b, 0x74, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x0b, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x44, 0x4d, 0x49,
	0x4e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12,
	0x19, 0x0a, 0x0e, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55,
	0x50, 0x10, 0x01, 0x1a, 0x05, 0x82, 0x41, 0x02, 0x55, 0x50, 0x12, 0x1d, 0x0a, 0x10, 0x41, 0x44,
	0x4d, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x02,
	0x1a, 0x07, 0x82, 0x41, 0x04, 0x44, 0x4f, 0x57, 0x4e, 0x12, 0x23, 0x0a, 0x13, 0x41, 0x44, 0x4d,
	0x49, 0x4e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x47,
	0x10, 0x03, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x54, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x22, 0xa8,
	0x02, 0x0a, 0x0a, 0x4f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a,
	0x10, 0x4f, 0x50, 0x45, 0x52, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x45,
	0x54, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x0d, 0x4f, 0x50, 0x45, 0x52, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x50, 0x10, 0x02, 0x1a, 0x05, 0x82, 0x41, 0x02, 0x55, 0x50, 0x12, 0x1c, 0x0a,
	0x0f, 0x4f, 0x50, 0x45, 0x52, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x4f, 0x57, 0x4e,
	0x10, 0x03, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x44, 0x4f, 0x57, 0x4e, 0x12, 0x22, 0x0a, 0x12, 0x4f,
	0x50, 0x45, 0x52, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x49, 0x4e,
	0x47, 0x10, 0x04, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x54, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x12,
	0x22, 0x0a, 0x12, 0x4f, 0x50, 0x45, 0x52, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x05, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x12, 0x22, 0x0a, 0x12, 0x4f, 0x50, 0x45, 0x52, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x44, 0x4f, 0x52, 0x4d, 0x41, 0x4e, 0x54, 0x10, 0x06, 0x1a, 0x0a, 0x82, 0x41, 0x07,
	0x44, 0x4f, 0x52, 0x4d, 0x41, 0x4e, 0x54, 0x12, 0x2a, 0x0a, 0x16, 0x4f, 0x50, 0x45, 0x52, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e,
	0x54, 0x10, 0x07, 0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x53,
	0x45, 0x4e, 0x54, 0x12, 0x34, 0x0a, 0x1b, 0x4f, 0x50, 0x45, 0x52, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x4c, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x44, 0x4f,
	0x57, 0x4e, 0x10, 0x08, 0x1a, 0x13, 0x82, 0x41, 0x10, 0x4c, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x4c,
	0x41, 0x59, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x1a, 0xfb, 0xcb, 0x03, 0x0a, 0x0d, 0x53,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x9b, 0x01, 0x0a,
	0x0c, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x83, 0xa8,
	0xd1, 0xdd, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x42, 0x33, 0x82, 0x41, 0x30, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x0c, 0x73, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x1a, 0x84, 0xc9, 0x03, 0x0a, 0x0c,
	0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x99, 0x01, 0x0a,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x84, 0x9f, 0xb9, 0x53, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x42, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x42, 0x3a, 0x82, 0x41, 0x37, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x91, 0x01, 0x0a, 0x04, 0x69, 0x70, 0x76,
	0x34, 0x18, 0xab, 0x90, 0xa9, 0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x42, 0x38, 0x82, 0x41,
	0x35, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x52, 0x04, 0x69, 0x70, 0x76, 0x34, 0x12, 0x91, 0x01, 0x0a,
	0x04, 0x69, 0x70, 0x76, 0x36, 0x18, 0xa9, 0x90, 0xa9, 0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36,
	0x42, 0x38, 0x82, 0x41, 0x35, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x52, 0x04, 0x69, 0x70, 0x76, 0x36,
	0x12, 0x96, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x9d, 0x89, 0xae, 0xef, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x91, 0x01, 0x0a, 0x04, 0x76, 0x6c,
	0x61, 0x6e, 0x18, 0xad, 0xe6, 0xc4, 0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x42, 0x38, 0x82,
	0x41, 0x35, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x52, 0x04, 0x76, 0x6c, 0x61, 0x6e, 0x1a, 0xf6, 0x02,
	0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x83, 0x01, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xdf, 0xe7, 0xea, 0x85, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x75,
	0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xa6, 0xef, 0xdd, 0x8d, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x6f, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x95,
	0xa3, 0x95, 0x85, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x40, 0x82,
	0x41, 0x3d, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x1a, 0x82, 0x7a, 0x0a, 0x04, 0x49, 0x70, 0x76, 0x34, 0x12,
	0xaf, 0x01, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0xa6, 0xb7,
	0xfa, 0x70, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x12, 0xa3, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xfc, 0xc4, 0xc4,
	0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x3f,
	0x82, 0x41, 0x3c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xb0, 0x01, 0x0a, 0x09, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x18, 0xb3, 0xf1, 0x90, 0xd1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x4a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76,
	0x34, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x42, 0x42, 0x82, 0x41, 0x3f,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x52,
	0x09, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x12, 0xad, 0x01, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x5f, 0x61, 0x72, 0x70, 0x18, 0xa6, 0x93, 0xa6, 0x5e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x49, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49,
	0x70, 0x76, 0x34, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x72, 0x70, 0x42, 0x42, 0x82, 0x41,
	0x3f, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2d, 0x61, 0x72, 0x70,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x72, 0x70, 0x12, 0xa0, 0x01, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0xf5, 0xd8, 0x9b, 0x84, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0xb4, 0x01,
	0x0a, 0x0a, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x18, 0xa7, 0xd9, 0xe9,
	0xe8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x55, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x65, 0x64, 0x42, 0x43, 0x82, 0x41, 0x40, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x75, 0x6e,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x52, 0x0a, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x65, 0x64, 0x1a, 0xfa, 0x37, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x12, 0xbe, 0x01, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xf7,
	0xcc, 0xff, 0x2b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x42, 0x4a,
	0x82, 0x41, 0x47, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x1a, 0xcf, 0x34, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0xc7, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xe8, 0xc2, 0x9b, 0x6e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x51,
	0x82, 0x41, 0x4e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xc3, 0x01, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x81, 0xfd, 0xac, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x50, 0x82, 0x41, 0x4d, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34,
	0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0xbf, 0x01, 0x0a, 0x04, 0x76, 0x72, 0x72, 0x70, 0x18, 0xe4, 0xb6, 0x88, 0x31, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x57, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49,
	0x70, 0x76, 0x34, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x69, 0x70, 0x76, 0x34, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x52, 0x04, 0x76, 0x72, 0x72,
	0x70, 0x1a, 0xa7, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x7e, 0x0a, 0x02,
	0x69, 0x70, 0x18, 0xa4, 0xee, 0xf8, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x54, 0x82, 0x41, 0x51, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x70, 0x52, 0x02, 0x69, 0x70, 0x12, 0x9c, 0x01, 0x0a,
	0x0d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0xd0,
	0xde, 0xa2, 0x77, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5f, 0x82, 0x41,
	0x5c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x0c, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x1a, 0xc5, 0x03, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x7d, 0x0a, 0x02, 0x69, 0x70, 0x18, 0xd7, 0xa9, 0xaa, 0x28,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x53, 0x82, 0x41, 0x50,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x70,
	0x52, 0x02, 0x69, 0x70, 0x12, 0x9d, 0x01, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18,
	0xaa, 0xd6, 0xa7, 0x29, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x49, 0x66, 0x49, 0x70, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x42, 0x57, 0x82, 0x41, 0x54, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x06, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x12, 0x9c, 0x01, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0xbd, 0x82, 0xfb, 0xce, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5e, 0x82, 0x41, 0x5b, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x1a, 0xff, 0x29, 0x0a, 0x04, 0x56, 0x72, 0x72, 0x70, 0x12, 0xe3, 0x01, 0x0a,
	0x0a, 0x76, 0x72, 0x72, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x9b, 0xe5, 0x94, 0x91,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x64, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x2e, 0x56,
	0x72, 0x72, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x42, 0x5a, 0x82, 0x41, 0x57,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f, 0x76, 0x72, 0x72,
	0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x09, 0x76, 0x72, 0x72, 0x70, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x1a, 0xe1, 0x25, 0x0a, 0x09, 0x56, 0x72, 0x72, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0xe6, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xcc, 0xce, 0xb5, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x68, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x2e, 0x56, 0x72,
	0x72, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x61,
	0x82, 0x41, 0x5e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f,
	0x76, 0x72, 0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x94, 0x02, 0x0a, 0x12, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x18, 0x9f, 0x99, 0xb7, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x72,
	0x72, 0x70, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x6d,
	0x82, 0x41, 0x6a, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f,
	0x76, 0x72, 0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2d, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x11, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x12, 0xe2, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xc5, 0xe7, 0xa6, 0x72, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x2e, 0x56, 0x72, 0x72,
	0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x60, 0x82, 0x41,
	0x5d, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f, 0x76, 0x72,
	0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xdd, 0x09, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0xa6, 0x01, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0xb9, 0xe4, 0xa5, 0x73, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6d,
	0x82, 0x41, 0x6a, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f,
	0x76, 0x72, 0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x61,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0xc7, 0x01, 0x0a, 0x16, 0x61, 0x64,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0xc8, 0xbd, 0xe5, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x78, 0x82, 0x41, 0x75, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x76,
	0x72, 0x72, 0x70, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x15, 0x61, 0x64,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x12, 0x9b, 0x01, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x18,
	0xcc, 0xfa, 0xa9, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x69, 0x82,
	0x41, 0x66, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f, 0x76,
	0x72, 0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x07, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70,
	0x74, 0x12, 0xac, 0x01, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x64, 0x65,
	0x6c, 0x61, 0x79, 0x18, 0xee, 0xa4, 0xda, 0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x6f, 0x82, 0x41, 0x6c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72,
	0x72, 0x70, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x2d, 0x64, 0x65, 0x6c,
	0x61, 0x79, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79,
	0x12, 0x9f, 0x01, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0xb7, 0xe6,
	0xaf, 0xdc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6a, 0x82, 0x41,
	0x67, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f, 0x76, 0x72,
	0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x12, 0xb5, 0x01, 0x0a, 0x0f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xd7, 0xa5, 0xa6, 0xb8, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x71, 0x82, 0x41, 0x6e, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76,
	0x34, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x76, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0e, 0x76, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0xb8, 0x01, 0x0a, 0x11, 0x76,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0xd0, 0xf4, 0x93, 0xec, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x73, 0x82, 0x41, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x72, 0x70,
	0x2f, 0x76, 0x72, 0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x2d, 0x69, 0x64, 0x52, 0x0f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x1a, 0xfe, 0x0a, 0x0a, 0x11, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x8b, 0x02, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xe0, 0xf6, 0xde, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x7a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76,
	0x34, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x74, 0x82, 0x41, 0x71,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f, 0x76, 0x72, 0x72,
	0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2d, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x88, 0x02, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0xd9, 0x99, 0x98, 0xdc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x79, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x73, 0x82, 0x41, 0x70, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70,
	0x76, 0x34, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x1a, 0xa8, 0x03, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0xd1, 0x01, 0x0a, 0x12, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x65, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0xef, 0xb6, 0xf4, 0xc4, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x88, 0x01, 0x82, 0x41, 0x84, 0x01, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76,
	0x34, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x2d, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x11, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x44, 0x65, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0xc9, 0x01, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0xfe, 0xe3, 0xda, 0x6b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x85, 0x01, 0x82, 0x41, 0x81, 0x01, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69,
	0x70, 0x76, 0x34, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52,
	0x0e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x1a,
	0xa4, 0x03, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xcf, 0x01, 0x0a, 0x12, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0xa8, 0xde, 0xc7, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x87,
	0x01, 0x82, 0x41, 0x83, 0x01, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x72,
	0x70, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x2d, 0x64,
	0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x44, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0xc8, 0x01, 0x0a, 0x0f,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18,
	0xdb, 0xe3, 0xc3, 0x3a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x84, 0x01, 0x82, 0x41, 0x80, 0x01, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72,
	0x72, 0x70, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x2d, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x1a, 0x8d, 0x0b, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0xa6, 0x01, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x88, 0xb0, 0xd6, 0xec, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x6c, 0x82, 0x41, 0x69, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x72, 0x70,
	0x2f, 0x76, 0x72, 0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x61,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0xc6, 0x01, 0x0a, 0x16, 0x61, 0x64,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0xa7, 0xb2, 0xb7, 0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x77, 0x82, 0x41, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x76,
	0x72, 0x72, 0x70, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x15, 0x61, 0x64, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0xb5, 0x01, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x80, 0xc3, 0xe9, 0xc3, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x71, 0x82, 0x41, 0x6e, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34,
	0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x2d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x9a, 0x01, 0x0a, 0x07, 0x70,
	0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x18, 0x95, 0xce, 0xd1, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x68, 0x82, 0x41, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x07,
	0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x12, 0xab, 0x01, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x65,
	0x6d, 0x70, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0xb3, 0xde, 0xc4, 0x79, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6e, 0x82, 0x41, 0x6b, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76,
	0x34, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70,
	0x74, 0x2d, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74,
	0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x9d, 0x01, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x98, 0xa2, 0xc1, 0x4f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x69, 0x82, 0x41, 0x66, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x72,
	0x70, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0xb4, 0x01, 0x0a, 0x0f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xce, 0xe3, 0x87, 0xf3, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x70, 0x82, 0x41, 0x6d, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x69, 0x70, 0x76, 0x34, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f, 0x76, 0x72, 0x72, 0x70,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0e, 0x76, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0xb7, 0x01, 0x0a,
	0x11, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x9d, 0xc3, 0xf7, 0xd1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x72, 0x82, 0x41, 0x6f, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72,
	0x72, 0x70, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x2d, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x2d, 0x69, 0x64, 0x52, 0x0f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x1a, 0xac, 0x02, 0x0a, 0x0c, 0x56, 0x72, 0x72, 0x70, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x98, 0x01, 0x0a, 0x11, 0x76, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x6c, 0x82, 0x41, 0x69, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f,
	0x76, 0x72, 0x72, 0x70, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f,
	0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x69,
	0x64, 0x52, 0x0f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x80, 0x01, 0x0a, 0x0a, 0x76, 0x72, 0x72, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x72, 0x72, 0x70,
	0x2e, 0x56, 0x72, 0x72, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x09, 0x76, 0x72, 0x72, 0x70,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0xd9, 0x01, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x4b, 0x65, 0x79, 0x12, 0x5d, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x4d, 0x82, 0x41, 0x4a, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x69, 0x70, 0x52,
	0x02, 0x69, 0x70, 0x12, 0x6c, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x1a, 0xf9, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x84, 0x01, 0x0a,
	0x0b, 0x64, 0x68, 0x63, 0x70, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x8e, 0xd7, 0x89,
	0x4d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4b, 0x82, 0x41, 0x48, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x69, 0x70, 0x76, 0x34, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64, 0x68, 0x63, 0x70,
	0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x64, 0x68, 0x63, 0x70, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x12, 0x79, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xae,
	0xcf, 0xa7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x47, 0x82, 0x41,
	0x44, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x6d,
	0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18, 0xa5, 0xbf, 0xc8, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x43, 0x82, 0x41, 0x40, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x74, 0x75, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x1a, 0xea, 0x0c,
	0x0a, 0x09, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x12, 0xc2, 0x01, 0x0a, 0x08,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x18, 0xa8, 0xdc, 0xef, 0x59, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x56, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49,
	0x70, 0x76, 0x34, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x42, 0x4b, 0x82, 0x41, 0x48, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69,
	0x70, 0x76, 0x34, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x52, 0x08, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x1a, 0xb6, 0x09, 0x0a, 0x08, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x12, 0xc9, 0x01,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x8d, 0xca, 0xf5, 0x3b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x5a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49,
	0x70, 0x76, 0x34, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x52, 0x82,
	0x41, 0x4f, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xc5, 0x01, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0xc2, 0xb8, 0xf0, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x51, 0x82, 0x41, 0x4e, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76,
	0x34, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x1a, 0xb9, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x7f, 0x0a, 0x02,
	0x69, 0x70, 0x18, 0xc3, 0xd6, 0x99, 0x6e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x55, 0x82, 0x41, 0x52, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x70, 0x52, 0x02, 0x69, 0x70, 0x12, 0xad, 0x01,
	0x0a, 0x12, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0xe7, 0xd1, 0xd4, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x65, 0x82, 0x41, 0x62, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x10, 0x6c, 0x69, 0x6e,
	0x6b, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0xd9, 0x03,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x7f, 0x0a, 0x02, 0x69, 0x70, 0x18, 0xd6, 0xd4,
	0x87, 0xb6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x54,
	0x82, 0x41, 0x51, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x69, 0x70, 0x52, 0x02, 0x69, 0x70, 0x12, 0xad, 0x01, 0x0a, 0x12, 0x6c, 0x69, 0x6e,
	0x6b, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0xbe, 0xa5, 0xae, 0xc2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x64, 0x82, 0x41, 0x61, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2d, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x10, 0x6c, 0x69, 0x6e, 0x6b, 0x4c, 0x61, 0x79, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x9e, 0x01, 0x0a, 0x06, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x18, 0x97, 0x95, 0xe7, 0xd8, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x66, 0x49, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x42, 0x58, 0x82, 0x41, 0x55, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76,
	0x34, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x1a, 0xde, 0x01, 0x0a, 0x0b, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x5e, 0x0a, 0x02, 0x69, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x69, 0x70, 0x52, 0x02, 0x69, 0x70, 0x12, 0x6f, 0x0a, 0x08, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x52, 0x08, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x1a, 0xcd, 0x07, 0x0a, 0x08, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x41, 0x72, 0x70, 0x12, 0xb6, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0xa7, 0xf2, 0xd3, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x41, 0x72, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x49, 0x82,
	0x41, 0x46, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2d, 0x61, 0x72,
	0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0xb2, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x98, 0x9c, 0xf1, 0x1f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x72, 0x70, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x48, 0x82, 0x41, 0x45, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x2d, 0x61, 0x72, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xa9, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0xbc, 0x01, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0xc7, 0xb6, 0xdc, 0x1a, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x55, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x49, 0x70, 0x76, 0x34, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x72, 0x70, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69,
	0x70, 0x76, 0x34, 0x2f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2d, 0x61, 0x72, 0x70, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22,
	0x60, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x0c, 0x4d, 0x4f, 0x44, 0x45, 0x5f,
	0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x44, 0x49,
	0x53, 0x41, 0x42, 0x4c, 0x45, 0x12, 0x24, 0x0a, 0x10, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45,
	0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x02, 0x1a, 0x0e, 0x82, 0x41, 0x0b,
	0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x12, 0x14, 0x0a, 0x08, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x03, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x41, 0x4c,
	0x4c, 0x1a, 0xa6, 0x02, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xba, 0x01, 0x0a, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x86, 0xa7, 0xd4, 0x48, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x54, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x72, 0x70, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x42, 0x4d, 0x82, 0x41, 0x4a, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x2d, 0x61, 0x72, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x60, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x1c, 0x0a, 0x0c, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x00, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x12, 0x24,
	0x0a, 0x10, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x4f, 0x4e,
	0x4c, 0x59, 0x10, 0x02, 0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f,
	0x4f, 0x4e, 0x4c, 0x59, 0x12, 0x14, 0x0a, 0x08, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x4c, 0x4c,
	0x10, 0x03, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x41, 0x4c, 0x4c, 0x1a, 0xdc, 0x12, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0xb8, 0x01, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x18, 0xb7, 0xd1, 0xb4, 0xd0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x42, 0x47, 0x82, 0x41,
	0x44, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x83, 0x01, 0x0a, 0x0b, 0x64, 0x68, 0x63, 0x70, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18,
	0x9f, 0xa3, 0xc9, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4a, 0x82,
	0x41, 0x47, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x68,
	0x63, 0x70, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x64, 0x68, 0x63, 0x70, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x78, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x9b, 0x84, 0xb6, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x46,
	0x82, 0x41, 0x43, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x6c, 0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18, 0xac, 0xd4, 0xd8, 0x7f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x74, 0x75, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x1a, 0xa9, 0x0e,
	0x0a, 0x08, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x9d, 0x01, 0x0a, 0x11, 0x69,
	0x6e, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x6b, 0x74, 0x73,
	0x18, 0xe6, 0xb8, 0x8e, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x59,
	0x82, 0x41, 0x56, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x64, 0x69, 0x73, 0x63, 0x61,
	0x72, 0x64, 0x65, 0x64, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x0f, 0x69, 0x6e, 0x44, 0x69, 0x73,
	0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x91, 0x01, 0x0a, 0x0d, 0x69,
	0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0xd3, 0xdc, 0xd0,
	0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x55, 0x82, 0x41, 0x52, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x69, 0x70, 0x76, 0x34, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x70, 0x6b, 0x74,
	0x73, 0x52, 0x0b, 0x69, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x6b, 0x74, 0x73, 0x12, 0xa3,
	0x01, 0x0a, 0x13, 0x69, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f,
	0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0xcd, 0xdc, 0xb8, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x5b, 0x82, 0x41, 0x58, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e,
	0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x2d, 0x6f, 0x63, 0x74, 0x65, 0x74,
	0x73, 0x52, 0x11, 0x69, 0x6e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x4f, 0x63,
	0x74, 0x65, 0x74, 0x73, 0x12, 0x9d, 0x01, 0x0a, 0x11, 0x69, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x99, 0xa2, 0x81, 0x7b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x59, 0x82, 0x41, 0x56, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70,
	0x76, 0x34, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x2d, 0x70,
	0x6b, 0x74, 0x73, 0x52, 0x0f, 0x69, 0x6e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64,
	0x50, 0x6b, 0x74, 0x73, 0x12, 0x86, 0x01, 0x0a, 0x09, 0x69, 0x6e, 0x5f, 0x6f, 0x63, 0x74, 0x65,
	0x74, 0x73, 0x18, 0xd4, 0xb1, 0xf8, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x51, 0x82, 0x41, 0x4e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x6f, 0x63, 0x74,
	0x65, 0x74, 0x73, 0x52, 0x08, 0x69, 0x6e, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12, 0x80, 0x01,
	0x0a, 0x07, 0x69, 0x6e, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0xf0, 0xd9, 0xbc, 0x1a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76,
	0x34, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x2f, 0x69, 0x6e, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x06, 0x69, 0x6e, 0x50, 0x6b, 0x74, 0x73,
	0x12, 0xa0, 0x01, 0x0a, 0x12, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64,
	0x65, 0x64, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x89, 0xcf, 0xda, 0x5d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5a, 0x82, 0x41, 0x57, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x6f,
	0x75, 0x74, 0x2d, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x2d, 0x70, 0x6b, 0x74,
	0x73, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x50,
	0x6b, 0x74, 0x73, 0x12, 0x94, 0x01, 0x0a, 0x0e, 0x6f, 0x75, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0xd8, 0xf2, 0x90, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x56, 0x82, 0x41, 0x53, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x6f, 0x75,
	0x74, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x0c, 0x6f, 0x75,
	0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x6b, 0x74, 0x73, 0x12, 0xa7, 0x01, 0x0a, 0x14, 0x6f,
	0x75, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x6f, 0x63, 0x74,
	0x65, 0x74, 0x73, 0x18, 0xd2, 0xd0, 0xe4, 0x8e, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x5c, 0x82, 0x41, 0x59, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x2d, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73,
	0x52, 0x12, 0x6f, 0x75, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x4f, 0x63,
	0x74, 0x65, 0x74, 0x73, 0x12, 0xa0, 0x01, 0x0a, 0x12, 0x6f, 0x75, 0x74, 0x5f, 0x66, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0xf2, 0xe3, 0xdd, 0x53,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5a, 0x82, 0x41, 0x57, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69,
	0x70, 0x76, 0x34, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64,
	0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x65, 0x64, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x89, 0x01, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x5f,
	0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0xcb, 0xbc, 0x97, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x52, 0x82, 0x41, 0x4f, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x6f, 0x75,
	0x74, 0x2d, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x4f, 0x63, 0x74,
	0x65, 0x74, 0x73, 0x12, 0x83, 0x01, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73,
	0x18, 0xe3, 0xd8, 0x98, 0x5e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x50,
	0x82, 0x41, 0x4d, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6b, 0x74, 0x73,
	0x52, 0x07, 0x6f, 0x75, 0x74, 0x50, 0x6b, 0x74, 0x73, 0x1a, 0xcf, 0x0f, 0x0a, 0x0a, 0x55, 0x6e,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x12, 0xb9, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0xb8, 0xfd, 0xda, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x55,
	0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x4a, 0x82, 0x41, 0x47, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x75, 0x6e, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0xd3, 0x01, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0xb7, 0x95, 0xc3, 0x70, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x58, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76,
	0x34, 0x2e, 0x55, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x42, 0x51, 0x82, 0x41, 0x4e, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69,
	0x70, 0x76, 0x34, 0x2f, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x66, 0x52, 0x0c, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x12, 0xb6, 0x01, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0xd1, 0xe5, 0xce, 0xdc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34,
	0x2e, 0x55, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x49, 0x82, 0x41, 0x46, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x75, 0x6e, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x1a, 0x90, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x85,
	0x01, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xea, 0x97, 0xe0, 0xfb, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x52, 0x82, 0x41, 0x4f, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69,
	0x70, 0x76, 0x34, 0x2f, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x1a, 0xd2, 0x08, 0x0a, 0x0c, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x12, 0xd5, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0xa8, 0xca, 0xc7, 0xcf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5f, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x55,
	0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x58, 0x82,
	0x41, 0x55, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x65, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x66,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0xd1, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xc1, 0xb8, 0xac, 0x81, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x5e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x55, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x57, 0x82, 0x41, 0x54, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x75, 0x6e,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2d, 0x72, 0x65, 0x66, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x1a, 0xcb, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x9b,
	0x01, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0xc0, 0xd0, 0xe2,
	0xdc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x62, 0x82,
	0x41, 0x5f, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x65, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x66,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0xa2, 0x01, 0x0a,
	0x0c, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0xb0, 0xef,
	0xf1, 0xa5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x65, 0x82, 0x41,
	0x62, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65,
	0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x66, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x1a, 0xc7, 0x02, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x99, 0x01, 0x0a, 0x09,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0xdd, 0xf7, 0xa7, 0x58, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x61, 0x82, 0x41, 0x5e, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69,
	0x70, 0x76, 0x34, 0x2f, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x66, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0xa1, 0x01, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0xef, 0x9d, 0xbc, 0xf6, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x64, 0x82, 0x41, 0x61, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76,
	0x34, 0x2f, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x66, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x0c, 0x73,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x1a, 0x8d, 0x01, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x87, 0x96, 0x92, 0x4f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x51, 0x82, 0x41, 0x4e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x65, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x1a, 0x9e, 0x9c, 0x01, 0x0a,
	0x04, 0x49, 0x70, 0x76, 0x36, 0x12, 0xb0, 0x01, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x18, 0xc8, 0xf3, 0xef, 0x85, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69,
	0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x09, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0xac, 0x01, 0x0a, 0x08, 0x61, 0x75, 0x74,
	0x6f, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0xf7, 0xe9, 0x95, 0xd4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x49, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76,
	0x36, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x63, 0x6f, 0x6e, 0x66, 0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x69, 0x70, 0x76, 0x36, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x63, 0x6f, 0x6e, 0x66, 0x52, 0x08, 0x61,
	0x75, 0x74, 0x6f, 0x63, 0x6f, 0x6e, 0x66, 0x12, 0xa4, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x9e, 0xd0, 0xda, 0x8e, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xb0,
	0x01, 0x0a, 0x09, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x18, 0xb5, 0xdf, 0xea,
	0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x52, 0x09, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x12, 0xd9, 0x01, 0x0a, 0x14, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0xff, 0x8f, 0xcd, 0x68, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x41, 0x64, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x4d, 0x82, 0x41, 0x4a, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69,
	0x70, 0x76, 0x36, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x61, 0x64, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x13, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0xa0, 0x01,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x8b, 0x9d, 0x98, 0xc0, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x46, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49,
	0x70, 0x76, 0x36, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69,
	0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0xb3, 0x01, 0x0a, 0x0a, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x18,
	0xf5, 0xe0, 0x87, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x55, 0x6e, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x65, 0x64, 0x42, 0x43, 0x82, 0x41, 0x40, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f,
	0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x52, 0x0a, 0x75, 0x6e, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x1a, 0x97, 0x3f, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x12, 0xbf, 0x01, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0xb1, 0xe0, 0xda, 0x9e, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4b, 0x65,
	0x79, 0x42, 0x4a, 0x82, 0x41, 0x47, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0xeb, 0x3b, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0xc8, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xd6, 0x9d,
	0xd1, 0xd4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x51, 0x82, 0x41, 0x4e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xc3, 0x01,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x83, 0xdd, 0xf7, 0x71, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x58, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70,
	0x76, 0x36, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x50, 0x82, 0x41, 0x4d, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x69, 0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0xbf, 0x01, 0x0a, 0x04, 0x76, 0x72, 0x72, 0x70, 0x18, 0x8a, 0xb3, 0x88,
	0x48, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x42, 0x4f,
	0x82, 0x41, 0x4c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x52,
	0x04, 0x76, 0x72, 0x72, 0x70, 0x1a, 0xa7, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x7e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x8a, 0xda, 0x8b, 0x6d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x54, 0x82, 0x41, 0x51, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36,
	0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x70, 0x52, 0x02, 0x69, 0x70,
	0x12, 0x9c, 0x01, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x18, 0xc2, 0xc0, 0xac, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x5f, 0x82, 0x41, 0x5c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x1a,
	0xdb, 0x07, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x7e, 0x0a, 0x02, 0x69, 0x70, 0x18,
	0xe1, 0xfb, 0x97, 0xa2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x53, 0x82, 0x41, 0x50, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x69, 0x70, 0x52, 0x02, 0x69, 0x70, 0x12, 0x9d, 0x01, 0x0a, 0x06, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x18, 0x8c, 0xf9, 0xc6, 0x7e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x66, 0x49, 0x70, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x42, 0x57, 0x82, 0x41, 0x54, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70,
	0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x9b, 0x01, 0x0a, 0x0d, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0xd3, 0xcb, 0xd5, 0x7c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5e, 0x82, 0x41, 0x5b, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69,
	0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x2d, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0xd4, 0x01, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x84, 0xca, 0xc8, 0x9d, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5f, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x57, 0x82,
	0x41, 0x54, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xbc,
	0x02, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x10, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x45, 0x52, 0x52, 0x45, 0x44, 0x10,
	0x01, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x50, 0x52, 0x45, 0x46, 0x45, 0x52, 0x52, 0x45, 0x44, 0x12,
	0x24, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43,
	0x41, 0x54, 0x45, 0x44, 0x10, 0x02, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x44, 0x45, 0x50, 0x52, 0x45,
	0x43, 0x41, 0x54, 0x45, 0x44, 0x12, 0x1e, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x03, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x49, 0x4e, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x04, 0x1a, 0x0f,
	0x82, 0x41, 0x0c, 0x49, 0x4e, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x49, 0x42, 0x4c, 0x45, 0x12,
	0x1e, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x05, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x12,
	0x22, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x45, 0x4e, 0x54, 0x41, 0x54,
	0x49, 0x56, 0x45, 0x10, 0x06, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x54, 0x45, 0x4e, 0x54, 0x41, 0x54,
	0x49, 0x56, 0x45, 0x12, 0x22, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x55,
	0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x10, 0x07, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x44, 0x55,
	0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x12, 0x24, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4d, 0x49, 0x53, 0x54, 0x49, 0x43, 0x10, 0x08, 0x1a, 0x0d,
	0x82, 0x41, 0x0a, 0x4f, 0x50, 0x54, 0x49, 0x4d, 0x49, 0x53, 0x54, 0x49, 0x43, 0x1a, 0x84, 0x2d,
	0x0a, 0x04, 0x56, 0x72, 0x72, 0x70, 0x12, 0xe2, 0x01, 0x0a, 0x0a, 0x76, 0x72, 0x72, 0x70, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0xf1, 0xd8, 0xd1, 0x4e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x64,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36,
	0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4b, 0x65, 0x79, 0x42, 0x5a, 0x82, 0x41, 0x57, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x09, 0x76, 0x72, 0x72, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0xe7, 0x28, 0x0a, 0x09,
	0x56, 0x72, 0x72, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0xe6, 0x01, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x96, 0xe9, 0x91, 0x57, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x68, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x61, 0x82, 0x41, 0x5e, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76,
	0x36, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x95, 0x02, 0x0a, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x91, 0xd6, 0x87, 0xb2, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x2e, 0x56, 0x72, 0x72,
	0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x6d, 0x82, 0x41, 0x6a, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70,
	0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0xe2, 0x01, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0xc3, 0xae, 0xb8, 0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x67, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x60, 0x82, 0x41, 0x5d, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36,
	0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a,
	0x9f, 0x0b, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xa7, 0x01, 0x0a, 0x0b, 0x61,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0xb3, 0x88, 0xbe, 0xe2, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6d, 0x82, 0x41, 0x6a, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69,
	0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0xc7, 0x01, 0x0a, 0x16, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0xce, 0xe5, 0xc4, 0x62, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x78, 0x82,
	0x41, 0x75, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f, 0x76,
	0x72, 0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x15, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x9c,
	0x01, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x18, 0xd6, 0xff, 0xee, 0xe1, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x69, 0x82, 0x41, 0x66, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69,
	0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x65,
	0x65, 0x6d, 0x70, 0x74, 0x52, 0x07, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x12, 0xad, 0x01,
	0x0a, 0x0d, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18,
	0x80, 0x8a, 0xcb, 0x99, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6f,
	0x82, 0x41, 0x6c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f,
	0x76, 0x72, 0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x2d, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x52,
	0x0c, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x9f, 0x01,
	0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0xc5, 0xdf, 0xa7, 0xd2, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6a, 0x82, 0x41, 0x67, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69,
	0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12,
	0xb4, 0x01, 0x0a, 0x0f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0xe9, 0x99, 0xa8, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x71, 0x82, 0x41, 0x6e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f,
	0x76, 0x72, 0x72, 0x70, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x2d, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0xbd, 0x01, 0x0a, 0x12, 0x76, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0xc5, 0xf3,
	0xb2, 0xce, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x74,
	0x82, 0x41, 0x71, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f,
	0x76, 0x72, 0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x2d, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x52, 0x10, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x69, 0x6e,
	0x6b, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0xb8, 0x01, 0x0a, 0x11, 0x76, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0xda, 0xc7, 0x9b,
	0xf0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x73, 0x82, 0x41, 0x70,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f, 0x76, 0x72, 0x72,
	0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x76,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x69, 0x64,
	0x52, 0x0f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x1a, 0xff, 0x0a, 0x0a, 0x11, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x8c, 0x02, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0xb6, 0x85, 0xdf, 0xe6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7a, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x2e, 0x56, 0x72, 0x72, 0x70, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x74, 0x82, 0x41, 0x71, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70,
	0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x88, 0x02, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0xe3, 0xfd, 0xb6, 0xdb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x79, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x56,
	0x72, 0x72, 0x70, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x73, 0x82, 0x41, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x1a, 0xa7, 0x03, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xd0, 0x01, 0x0a,
	0x12, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0xcd, 0xcd, 0xd6, 0x75, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x88, 0x01, 0x82, 0x41, 0x84, 0x01, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f,
	0x76, 0x72, 0x72, 0x70, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x2d, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x44, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0xc9, 0x01, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x18, 0xb4, 0x81, 0x8a, 0x75, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x85, 0x01, 0x82, 0x41, 0x81, 0x01, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x0e, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x1a, 0xa5, 0x03, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xd0, 0x01, 0x0a, 0x12, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0xda, 0xd7, 0xfb,
	0xba, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x87, 0x01, 0x82, 0x41,
	0x83, 0x01, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f, 0x76,
	0x72, 0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2d, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x2d, 0x64, 0x65, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x44,
	0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0xc8, 0x01, 0x0a, 0x0f, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0xfd, 0xc8, 0xbf,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x84, 0x01, 0x82,
	0x41, 0x80, 0x01, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f,
	0x76, 0x72, 0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2d, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x1a, 0xcf, 0x0c, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xa6, 0x01,
	0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0xbe, 0xce,
	0xef, 0xe3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6c, 0x82, 0x41,
	0x69, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f, 0x76, 0x72,
	0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0xc7, 0x01, 0x0a, 0x16, 0x61, 0x64, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x99, 0xd4, 0xbb, 0x88, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x77, 0x82, 0x41, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x72,
	0x70, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x15, 0x61, 0x64, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0xb5, 0x01, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0xea, 0xe3, 0x97, 0xf9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x71, 0x82, 0x41, 0x6e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2d, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x9b, 0x01, 0x0a, 0x07, 0x70, 0x72, 0x65,
	0x65, 0x6d, 0x70, 0x74, 0x18, 0xbb, 0xd5, 0xed, 0x94, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x68, 0x82, 0x41, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f,
	0x76, 0x72, 0x72, 0x70, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x07, 0x70,
	0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x12, 0xac, 0x01, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x65, 0x6d,
	0x70, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0xa1, 0xaf, 0xdc, 0xf9, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6e, 0x82, 0x41, 0x6b, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76,
	0x36, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70,
	0x74, 0x2d, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74,
	0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x9e, 0x01, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x92, 0xb9, 0xa3, 0xc3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x69, 0x82, 0x41, 0x66, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72,
	0x72, 0x70, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0xb3, 0x01, 0x0a, 0x0f, 0x76, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xc4, 0xfa, 0xfc, 0x56, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x70, 0x82, 0x41, 0x6d, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x69, 0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f, 0x76, 0x72, 0x72, 0x70,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0e, 0x76, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0xbc, 0x01, 0x0a,
	0x12, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x18, 0xb6, 0xef, 0x97, 0x8d, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x73, 0x82, 0x41, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x2f, 0x76, 0x72, 0x72, 0x70, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x2d, 0x6c,
	0x69, 0x6e, 0x6b, 0x2d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x10, 0x76, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0xb7, 0x01, 0x0a, 0x11,
	0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0xdb, 0x81, 0xc5, 0xa4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x72, 0x82, 0x41, 0x6f, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x72,
	0x70, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x2d, 0x69, 0x64, 0x52, 0x0f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x1a, 0xac, 0x02, 0x0a, 0x0c, 0x56, 0x72, 0x72, 0x70, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x98, 0x01, 0x0a, 0x11, 0x76, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x6c, 0x82, 0x41, 0x69, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x76,
	0x72, 0x72, 0x70, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x76,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x69, 0x64,
	0x52, 0x0f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x80, 0x01, 0x0a, 0x0a, 0x76, 0x72, 0x72, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x2e,
	0x56, 0x72, 0x72, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x09, 0x76, 0x72, 0x72, 0x70, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x1a, 0xd9, 0x01, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x4b, 0x65, 0x79, 0x12, 0x5d, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x4d, 0x82, 0x41, 0x4a, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x69, 0x70, 0x52, 0x02,
	0x69, 0x70, 0x12, 0x6c, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x1a, 0xdb, 0x0e, 0x0a, 0x08, 0x41, 0x75, 0x74, 0x6f, 0x63, 0x6f, 0x6e, 0x66, 0x12, 0xb6, 0x01,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xe8, 0xb1, 0xbe, 0xcf, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x50, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x49, 0x70, 0x76, 0x36, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x63, 0x6f, 0x6e, 0x66, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x42, 0x48, 0x82, 0x41, 0x45, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61,
	0x75, 0x74, 0x6f, 0x63, 0x6f, 0x6e, 0x66, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xb1, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x81, 0xb2, 0xc1, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x41, 0x75, 0x74, 0x6f,
	0x63, 0x6f, 0x6e, 0x66, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x47, 0x82, 0x41, 0x44, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x69, 0x70, 0x76, 0x36, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x63, 0x6f, 0x6e, 0x66, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xf3, 0x05, 0x0a, 0x06, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xb1, 0x01, 0x0a, 0x17, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x18, 0xda, 0xb8, 0xb3, 0x87, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x60, 0x82, 0x41, 0x5d, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x63,
	0x6f, 0x6e, 0x66, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x2d, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x52, 0x15, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0xba, 0x01, 0x0a, 0x1a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0xba, 0x96, 0x9c, 0xe5, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x63, 0x82, 0x41, 0x60, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76,
	0x36, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x63, 0x6f, 0x6e, 0x66, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2d, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61,
	0x72, 0x79, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x18, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0xc0, 0x01, 0x0a, 0x1c, 0x74, 0x65, 0x6d, 0x70, 0x6f,
	0x72, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x6c,
	0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x9c, 0xdb, 0xd8, 0xdb, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x65, 0x82, 0x41, 0x62, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36,
	0x2f, 0x61, 0x75, 0x74, 0x6f, 0x63, 0x6f, 0x6e, 0x66, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x2d, 0x70, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x65, 0x64, 0x2d, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x1a, 0x74,
	0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65,
	0x64, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0xb4, 0x01, 0x0a, 0x18, 0x74, 0x65,
	0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6c, 0x69,
	0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xa7, 0xc2, 0xc1, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x61, 0x82, 0x41, 0x5e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f,
	0x61, 0x75, 0x74, 0x6f, 0x63, 0x6f, 0x6e, 0x66, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d,
	0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x16, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72,
	0x61, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x1a, 0xeb, 0x05, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xaf, 0x01, 0x0a, 0x17, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0xff, 0xbb, 0xd5, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x5f, 0x82, 0x41, 0x5c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61,
	0x75, 0x74, 0x6f, 0x63, 0x6f, 0x6e, 0x66, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x2d, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2d, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x15, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0xb8, 0x01, 0x0a,
	0x1a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72,
	0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0xdd, 0xe0, 0x92, 0x32,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x62, 0x82, 0x41, 0x5f, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69,
	0x70, 0x76, 0x36, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x63, 0x6f, 0x6e, 0x66, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2d, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72,
	0x61, 0x72, 0x79, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x18, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0xbe, 0x01, 0x0a, 0x1c, 0x74, 0x65, 0x6d, 0x70,
	0x6f, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f,
	0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xc3, 0x94, 0xc3, 0x79, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x64, 0x82, 0x41, 0x61, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36,
	0x2f, 0x61, 0x75, 0x74, 0x6f, 0x63, 0x6f, 0x6e, 0x66, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x2d, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x65, 0x64, 0x2d, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x1a, 0x74, 0x65,
	0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64,
	0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0xb3, 0x01, 0x0a, 0x18, 0x74, 0x65, 0x6d,
	0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x66,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xf8, 0xbd, 0xe2, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x60, 0x82, 0x41, 0x5d, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61,
	0x75, 0x74, 0x6f, 0x63, 0x6f, 0x6e, 0x66, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x65,
	0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d, 0x6c, 0x69,
	0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x16, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72,
	0x79, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x1a, 0xa8,
	0x04, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x84, 0x01, 0x0a, 0x0b, 0x64, 0x68,
	0x63, 0x70, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0xf0, 0xa2, 0xa6, 0x20, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4b, 0x82, 0x41, 0x48, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76,
	0x36, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x2d, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x64, 0x68, 0x63, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x12, 0xac, 0x01, 0x0a, 0x19, 0x64, 0x75, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x64, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x88,
	0xf6, 0xfb, 0x61, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x59, 0x82, 0x41,
	0x56, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64, 0x75,
	0x70, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x2d, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x2d, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x16, 0x64, 0x75, 0x70, 0x41, 0x64, 0x64, 0x72,
	0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x73, 0x12,
	0x79, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xfc, 0xcc, 0xd3, 0x78, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x47, 0x82, 0x41, 0x44, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70,
	0x76, 0x36, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x6d, 0x0a, 0x03, 0x6d, 0x74,
	0x75, 0x18, 0xc3, 0xe5, 0xf8, 0x79, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x43, 0x82, 0x41, 0x40, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x6d, 0x74, 0x75, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x1a, 0xdf, 0x11, 0x0a, 0x09, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x12, 0xc2, 0x01, 0x0a, 0x08, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x18, 0xfe, 0xf8, 0xc9, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x56, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x4b, 0x65, 0x79, 0x42, 0x4b, 0x82, 0x41, 0x48, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x52, 0x08, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x1a, 0xab, 0x0e, 0x0a,
	0x08, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x12, 0xc9, 0x01, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0xcf, 0x84, 0x8d, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5a, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x52, 0x82, 0x41, 0x4f, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69,
	0x70, 0x76, 0x36, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xc5, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0xc0, 0xf8, 0xcb, 0x43, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x51, 0x82, 0x41, 0x4e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xb9, 0x02,
	0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x7f, 0x0a, 0x02, 0x69, 0x70, 0x18, 0xbd,
	0xd7, 0xfc, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x55,
	0x82, 0x41, 0x52, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x69, 0x70, 0x52, 0x02, 0x69, 0x70, 0x12, 0xad, 0x01, 0x0a, 0x12, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0xf9, 0x9e, 0xb3, 0x6f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x65, 0x82, 0x41, 0x62, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2d,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x10, 0x6c, 0x69, 0x6e, 0x6b, 0x4c, 0x61, 0x79,
	0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0xce, 0x08, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x7f, 0x0a, 0x02, 0x69, 0x70, 0x18, 0xcc, 0x88, 0x95, 0x98, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x54, 0x82, 0x41, 0x51, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x69, 0x70, 0x76, 0x36, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x70,
	0x52, 0x02, 0x69, 0x70, 0x12, 0x91, 0x01, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x18, 0xaf, 0x9a, 0xe6, 0xd3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x5b, 0x82, 0x41, 0x58, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x73, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x08,
	0x69, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0xad, 0x01, 0x0a, 0x12, 0x6c, 0x69, 0x6e,
	0x6b, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x9c, 0xad, 0xef, 0xe6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x64, 0x82, 0x41, 0x61, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2d, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x10, 0x6c, 0x69, 0x6e, 0x6b, 0x4c, 0x61, 0x79, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0xf3, 0x01, 0x0a, 0x0e, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x85, 0x9c, 0xce, 0x2a,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x60, 0x82,
	0x41, 0x5d, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x0d, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x9d,
	0x01, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0xbd, 0xa3, 0xb9, 0x4b, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x66, 0x49, 0x70, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x42, 0x58, 0x82, 0x41,
	0x55, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x22, 0xe9,
	0x01, 0x0a, 0x0d, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x17, 0x0a, 0x13, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x18, 0x4e, 0x45, 0x49,
	0x47, 0x48, 0x42, 0x4f, 0x52, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x4d,
	0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x01, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x49, 0x4e, 0x43, 0x4f,
	0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x12, 0x29, 0x0a, 0x17, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42,
	0x4f, 0x52, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0x02, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c,
	0x45, 0x12, 0x21, 0x0a, 0x13, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x4c, 0x45, 0x10, 0x03, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x53,
	0x54, 0x41, 0x4c, 0x45, 0x12, 0x21, 0x0a, 0x13, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x10, 0x04, 0x1a, 0x08, 0x82,
	0x41, 0x05, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x12, 0x21, 0x0a, 0x13, 0x4e, 0x45, 0x49, 0x47, 0x48,
	0x42, 0x4f, 0x52, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x42, 0x45, 0x10, 0x05,
	0x1a, 0x08, 0x82, 0x41, 0x05, 0x50, 0x52, 0x4f, 0x42, 0x45, 0x1a, 0xde, 0x01, 0x0a, 0x0b, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x5e, 0x0a, 0x02, 0x69, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2f, 0x69, 0x70, 0x52, 0x02, 0x69, 0x70, 0x12, 0x6f, 0x0a, 0x08, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x52, 0x08, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x1a, 0xbd, 0x0a, 0x0a, 0x13,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0xcc, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xc0,
	0xf0, 0xd7, 0x7a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x42, 0x54, 0x82, 0x41, 0x51, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0xc9, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xb9, 0xe2, 0xa9,
	0xcb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x41,
	0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x53, 0x82, 0x41, 0x50, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x2d, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xc6,
	0x03, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x91, 0x01, 0x0a, 0x08, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x80, 0x90, 0xd7, 0x71, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x5d, 0x82, 0x41, 0x5a, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x92, 0x01,
	0x0a, 0x08, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x82, 0xa8, 0xa8, 0xfa, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5d, 0x82, 0x41, 0x5a, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69,
	0x70, 0x76, 0x36, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x61, 0x64, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x08, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x92, 0x01, 0x0a, 0x08, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x9a, 0xa1, 0xab, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5d,
	0x82, 0x41, 0x5a, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d,
	0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x52, 0x08, 0x73,
	0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x1a, 0xc1, 0x03, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x91, 0x01, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0xff,
	0xea, 0xcc, 0x91, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5c, 0x82,
	0x41, 0x59, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x61,
	0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x90, 0x01, 0x0a, 0x08, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x85, 0xac, 0xa1, 0x48, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x5c, 0x82, 0x41, 0x59, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x2d, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x08,
	0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x90, 0x01, 0x0a, 0x08, 0x73, 0x75, 0x70,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x18, 0xc5, 0xde, 0xb4, 0x5a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x5c, 0x82, 0x41, 0x59, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x2d, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x08, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x8d, 0x14, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xb7, 0x01, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x18, 0xb9, 0xe6, 0xe7, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x42, 0x47, 0x82, 0x41,
	0x44, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x84, 0x01, 0x0a, 0x0b, 0x64, 0x68, 0x63, 0x70, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18,
	0xf5, 0xc8, 0xb5, 0xb1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4a,
	0x82, 0x41, 0x47, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64,
	0x68, 0x63, 0x70, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x64, 0x68, 0x63, 0x70,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0xab, 0x01, 0x0a, 0x19, 0x64, 0x75, 0x70, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x6d, 0x69, 0x74, 0x73, 0x18, 0xa1, 0x9e, 0xc2, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x58, 0x82, 0x41, 0x55, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x64, 0x75, 0x70, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x2d, 0x64, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x2d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x16, 0x64, 0x75,
	0x70, 0x41, 0x64, 0x64, 0x72, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x6d, 0x69, 0x74, 0x73, 0x12, 0x79, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x8d, 0xed, 0xad, 0xc1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x46,
	0x82, 0x41, 0x43, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x6c, 0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18, 0xc6, 0xd7, 0xd9, 0x70, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x74, 0x75, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x1a, 0xab, 0x0e,
	0x0a, 0x08, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x9e, 0x01, 0x0a, 0x11, 0x69,
	0x6e, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x6b, 0x74, 0x73,
	0x18, 0xfc, 0xa0, 0xaf, 0xcf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x59, 0x82, 0x41, 0x56, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x64, 0x69, 0x73, 0x63,
	0x61, 0x72, 0x64, 0x65, 0x64, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x0f, 0x69, 0x6e, 0x44, 0x69,
	0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x91, 0x01, 0x0a, 0x0d,
	0x69, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0xa5, 0xed,
	0x9a, 0x52, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x55, 0x82, 0x41, 0x52,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x70, 0x6b,
	0x74, 0x73, 0x52, 0x0b, 0x69, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x6b, 0x74, 0x73, 0x12,
	0xa4, 0x01, 0x0a, 0x13, 0x69, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64,
	0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0xb7, 0xc6, 0x96, 0xb5, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5b, 0x82, 0x41, 0x58, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f,
	0x69, 0x6e, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x2d, 0x6f, 0x63, 0x74,
	0x65, 0x74, 0x73, 0x52, 0x11, 0x69, 0x6e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64,
	0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12, 0x9d, 0x01, 0x0a, 0x11, 0x69, 0x6e, 0x5f, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x97, 0xdf, 0xfd,
	0x56, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x59, 0x82, 0x41, 0x56, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x69, 0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64,
	0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x0f, 0x69, 0x6e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x65, 0x64, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x86, 0x01, 0x0a, 0x09, 0x69, 0x6e, 0x5f, 0x6f, 0x63,
	0x74, 0x65, 0x74, 0x73, 0x18, 0xb2, 0xfc, 0xaa, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x51, 0x82, 0x41, 0x4e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x6f,
	0x63, 0x74, 0x65, 0x74, 0x73, 0x52, 0x08, 0x69, 0x6e, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12,
	0x81, 0x01, 0x0a, 0x07, 0x69, 0x6e, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0xd2, 0x97, 0xdc, 0x83,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x69, 0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x06, 0x69, 0x6e, 0x50,
	0x6b, 0x74, 0x73, 0x12, 0xa0, 0x01, 0x0a, 0x12, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x63,
	0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0xbb, 0xaa, 0xde, 0x79, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5a, 0x82, 0x41, 0x57, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70,
	0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x2d,
	0x70, 0x6b, 0x74, 0x73, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64,
	0x65, 0x64, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x94, 0x01, 0x0a, 0x0e, 0x6f, 0x75, 0x74, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0xd6, 0xcd, 0xa2, 0x57, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x56, 0x82, 0x41, 0x53, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76,
	0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52,
	0x0c, 0x6f, 0x75, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x6b, 0x74, 0x73, 0x12, 0xa6, 0x01,
	0x0a, 0x14, 0x6f, 0x75, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f,
	0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0xc0, 0x9d, 0xa2, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x5c, 0x82, 0x41, 0x59, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x6f, 0x75,
	0x74, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x2d, 0x6f, 0x63, 0x74, 0x65,
	0x74, 0x73, 0x52, 0x12, 0x6f, 0x75, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64,
	0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12, 0xa0, 0x01, 0x0a, 0x12, 0x6f, 0x75, 0x74, 0x5f, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0xa4, 0xc9,
	0xfd, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5a, 0x82, 0x41, 0x57,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x65, 0x64, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x46, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x65, 0x64, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x89, 0x01, 0x0a, 0x0a, 0x6f, 0x75,
	0x74, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0xfd, 0xe9, 0xdb, 0x37, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x52, 0x82, 0x41, 0x4f, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f,
	0x6f, 0x75, 0x74, 0x2d, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x4f,
	0x63, 0x74, 0x65, 0x74, 0x73, 0x12, 0x83, 0x01, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6b,
	0x74, 0x73, 0x18, 0x89, 0xbb, 0xdc, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x50, 0x82, 0x41, 0x4d, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6b,
	0x74, 0x73, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x50, 0x6b, 0x74, 0x73, 0x1a, 0xcf, 0x0f, 0x0a, 0x0a,
	0x55, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x12, 0xba, 0x01, 0x0a, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x9a, 0xe8, 0xd1, 0xf7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x52, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76,
	0x36, 0x2e, 0x55, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x4a, 0x82, 0x41, 0x47, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x75, 0x6e,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xd4, 0x01, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0xb1, 0x8c, 0xc0, 0xd7, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x55, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x42, 0x51, 0x82,
	0x41, 0x4e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x65, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x66,
	0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x12, 0xb6,
	0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xb7, 0xbb, 0xf8, 0xcc, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x51, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x49, 0x70, 0x76, 0x36, 0x2e, 0x55, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x49, 0x82, 0x41, 0x46, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f,
	0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x8f, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x84, 0x01, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xf8,
	0xf4, 0x93, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x52, 0x82, 0x41,
	0x4f, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65,
	0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x1a, 0xd0, 0x08, 0x0a, 0x0c, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x12, 0xd5, 0x01, 0x0a, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xd6, 0xc1, 0xce, 0xca, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x5f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76,
	0x36, 0x2e, 0x55, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x58, 0x82, 0x41, 0x55, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x75, 0x6e, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x65, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d,
	0x72, 0x65, 0x66, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0xd1, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x83, 0xa9, 0xf2,
	0xae, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x55, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x65, 0x64, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x57, 0x82, 0x41, 0x54, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36,
	0x2f, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x66, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xca, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x9b, 0x01, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18,
	0xc2, 0xa5, 0x8f, 0xa1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x62, 0x82, 0x41, 0x5f, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x75, 0x6e, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x65, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d,
	0x72, 0x65, 0x66, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12,
	0xa1, 0x01, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x18, 0x9e, 0xf9, 0xd4, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x65,
	0x82, 0x41, 0x62, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x65, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65,
	0x66, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x1a, 0xc6, 0x02, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x99, 0x01,
	0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0xa3, 0x88, 0xd0, 0x1a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x61, 0x82, 0x41, 0x5e,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x66, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x09,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0xa0, 0x01, 0x0a, 0x0c, 0x73, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0xf1, 0xb9, 0x92, 0x1d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x64, 0x82, 0x41, 0x61, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70,
	0x76, 0x36, 0x2f, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x66, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x0c,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x1a, 0x8e, 0x01, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0xc9, 0xdf, 0xae, 0xe9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x51, 0x82, 0x41, 0x4e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x75, 0x6e, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x1a, 0xd9, 0x22,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xbb, 0x01, 0x0a, 0x0c, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x88, 0x81, 0xc3, 0x77, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x4d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0xae, 0x01, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x18, 0xdf, 0x80, 0xc3, 0xe6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x08, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x81, 0x01, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xe6, 0xa7, 0xe8, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x74, 0x0a, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xb3, 0xe8, 0xb3, 0xdf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x74, 0x0a, 0x07, 0x69, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0xe7, 0xa0, 0x91, 0xf4,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x07, 0x69,
	0x66, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x6d, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x9c, 0xaa, 0xc0, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3f, 0x82,
	0x41, 0x3c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x7e, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x89, 0x9d, 0xa1, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x61,
	0x73, 0x74, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x74, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x18, 0xf1, 0xf6, 0x9f, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x41, 0x82, 0x41, 0x3e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63,
	0x61, 0x6c, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x6d, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0xf9, 0xfb, 0x99, 0x85, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0xb8, 0x01, 0x0a, 0x0b, 0x6f,
	0x70, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0xdf, 0xa0, 0xd6, 0xbf, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x4c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70,
	0x65, 0x72, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0xb0, 0x14, 0x0a, 0x08, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x9f, 0x01, 0x0a, 0x13, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x95, 0xa6, 0xa5, 0x43, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x56, 0x82, 0x41, 0x53, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x61, 0x72,
	0x72, 0x69, 0x65, 0x72, 0x2d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x12, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x98, 0x01, 0x0a, 0x11, 0x69, 0x6e, 0x5f, 0x62, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0xb6, 0x8e, 0xab, 0x39, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x54, 0x82, 0x41, 0x51, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d,
	0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x0f,
	0x69, 0x6e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6b, 0x74, 0x73, 0x12,
	0x88, 0x01, 0x0a, 0x0b, 0x69, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18,
	0x9d, 0xdd, 0xcf, 0x92, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4e,
	0x82, 0x41, 0x4b, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x73, 0x52, 0x0a,
	0x69, 0x6e, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x73, 0x12, 0x82, 0x01, 0x0a, 0x09, 0x69,
	0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0xa9, 0x9b, 0xba, 0x98, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4c, 0x82, 0x41, 0x49, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x08, 0x69, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12,
	0x8c, 0x01, 0x0a, 0x0d, 0x69, 0x6e, 0x5f, 0x66, 0x63, 0x73, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x18, 0xf8, 0xaa, 0xff, 0x50, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x50, 0x82, 0x41, 0x4d, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x66, 0x63, 0x73, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x52, 0x0b, 0x69, 0x6e, 0x46, 0x63, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x99,
	0x01, 0x0a, 0x11, 0x69, 0x6e, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f,
	0x70, 0x6b, 0x74, 0x73, 0x18, 0xeb, 0x82, 0xf1, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x54, 0x82, 0x41, 0x51, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x0f, 0x69, 0x6e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x82, 0x01, 0x0a, 0x09, 0x69,
	0x6e, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0xac, 0x99, 0xe9, 0xfc, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4c, 0x82, 0x41, 0x49, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x6f,
	0x63, 0x74, 0x65, 0x74, 0x73, 0x52, 0x08, 0x69, 0x6e, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12,
	0x7c, 0x0a, 0x07, 0x69, 0x6e, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0xc8, 0xee, 0xad, 0xd2, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4a, 0x82, 0x41, 0x47, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e,
	0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x06, 0x69, 0x6e, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x92, 0x01,
	0x0a, 0x0f, 0x69, 0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6b, 0x74,
	0x73, 0x18, 0xa0, 0xb6, 0xe6, 0x54, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x52, 0x82, 0x41, 0x4f, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2d, 0x70,
	0x6b, 0x74, 0x73, 0x52, 0x0d, 0x69, 0x6e, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6b,
	0x74, 0x73, 0x12, 0x98, 0x01, 0x0a, 0x11, 0x69, 0x6e, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x18, 0xa6, 0xe4, 0xd2, 0x45, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x54, 0x82, 0x41, 0x51, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x52, 0x0f, 0x69, 0x6e,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x12, 0x85, 0x01,
	0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x18, 0xf6, 0x89, 0x83,
	0xf7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4d, 0x82, 0x41, 0x4a,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f,
	0x6c, 0x61, 0x73, 0x74, 0x2d, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74,
	0x43, 0x6c, 0x65, 0x61, 0x72, 0x12, 0x9c, 0x01, 0x0a, 0x12, 0x6f, 0x75, 0x74, 0x5f, 0x62, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0xfd, 0x8e, 0x80,
	0xef, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x55, 0x82, 0x41, 0x52,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f,
	0x6f, 0x75, 0x74, 0x2d, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x2d, 0x70, 0x6b,
	0x74, 0x73, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x50, 0x6b, 0x74, 0x73, 0x12, 0x8a, 0x01, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x69, 0x73,
	0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0xb2, 0xc4, 0x89, 0x4c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x64, 0x69, 0x73, 0x63,
	0x61, 0x72, 0x64, 0x73, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64,
	0x73, 0x12, 0x85, 0x01, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x18, 0xe2, 0xa0, 0xc1, 0xde, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x4d, 0x82, 0x41, 0x4a, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x09,
	0x6f, 0x75, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x9c, 0x01, 0x0a, 0x12, 0x6f, 0x75,
	0x74, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73,
	0x18, 0x80, 0xfc, 0xc2, 0x9b, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x55, 0x82, 0x41, 0x52, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x84, 0x01, 0x0a, 0x0a, 0x6f, 0x75, 0x74,
	0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0xa3, 0x8e, 0x8f, 0x18, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4d, 0x82, 0x41, 0x4a, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x6f, 0x63,
	0x74, 0x65, 0x74, 0x73, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12,
	0x7e, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x9b, 0xae, 0x88, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4b, 0x82, 0x41, 0x48, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x6f, 0x75,
	0x74, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x50, 0x6b, 0x74, 0x73, 0x12,
	0x96, 0x01, 0x0a, 0x10, 0x6f, 0x75, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f,
	0x70, 0x6b, 0x74, 0x73, 0x18, 0xbb, 0x85, 0x87, 0x8e, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x53, 0x82, 0x41, 0x50, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x0e, 0x6f, 0x75, 0x74, 0x55, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x50, 0x6b, 0x74, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x0b, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x44, 0x4d, 0x49,
	0x4e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12,
	0x19, 0x0a, 0x0e, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55,
	0x50, 0x10, 0x01, 0x1a, 0x05, 0x82, 0x41, 0x02, 0x55, 0x50, 0x12, 0x1d, 0x0a, 0x10, 0x41, 0x44,
	0x4d, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x02,
	0x1a, 0x07, 0x82, 0x41, 0x04, 0x44, 0x4f, 0x57, 0x4e, 0x12, 0x23, 0x0a, 0x13, 0x41, 0x44, 0x4d,
	0x49, 0x4e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x47,
	0x10, 0x03, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x54, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x22, 0xa8,
	0x02, 0x0a, 0x0a, 0x4f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a,
	0x10, 0x4f, 0x50, 0x45, 0x52, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x45,
	0x54, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x0d, 0x4f, 0x50, 0x45, 0x52, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x50, 0x10, 0x02, 0x1a, 0x05, 0x82, 0x41, 0x02, 0x55, 0x50, 0x12, 0x1c, 0x0a,
	0x0f, 0x4f, 0x50, 0x45, 0x52, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x4f, 0x57, 0x4e,
	0x10, 0x03, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x44, 0x4f, 0x57, 0x4e, 0x12, 0x22, 0x0a, 0x12, 0x4f,
	0x50, 0x45, 0x52, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x49, 0x4e,
	0x47, 0x10, 0x04, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x54, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x12,
	0x22, 0x0a, 0x12, 0x4f, 0x50, 0x45, 0x52, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x05, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x12, 0x22, 0x0a, 0x12, 0x4f, 0x50, 0x45, 0x52, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x44, 0x4f, 0x52, 0x4d, 0x41, 0x4e, 0x54, 0x10, 0x06, 0x1a, 0x0a, 0x82, 0x41, 0x07,
	0x44, 0x4f, 0x52, 0x4d, 0x41, 0x4e, 0x54, 0x12, 0x2a, 0x0a, 0x16, 0x4f, 0x50, 0x45, 0x52, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e,
	0x54, 0x10, 0x07, 0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x53,
	0x45, 0x4e, 0x54, 0x12, 0x34, 0x0a, 0x1b, 0x4f, 0x50, 0x45, 0x52, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x4c, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x44, 0x4f,
	0x57, 0x4e, 0x10, 0x08, 0x1a, 0x13, 0x82, 0x41, 0x10, 0x4c, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x4c,
	0x41, 0x59, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x1a, 0x85, 0x87, 0x01, 0x0a, 0x04, 0x56,
	0x6c, 0x61, 0x6e, 0x12, 0xa3, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xc2,
	0xae, 0xf8, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xc1, 0x01, 0x0a, 0x0e, 0x65, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x80, 0xba, 0xfd,
	0x6d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x42, 0x47, 0x82, 0x41, 0x44, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f,
	0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x0d,
	0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0xc5, 0x01,
	0x0a, 0x0f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x18, 0xb0, 0xa2, 0xba, 0x55, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x49, 0x6e, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x42, 0x48, 0x82, 0x41, 0x45,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x6d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x0e, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x9f, 0x01, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18,
	0x83, 0x99, 0xcd, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0xa0, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0xff, 0xef, 0x8d, 0xdf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x69, 0x0a, 0x06, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x29, 0x0a, 0x0e, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0xb0, 0xe4, 0xce, 0x21, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0c, 0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x29, 0x0a, 0x0e, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x18, 0xa9, 0x9f, 0xaf, 0x68, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0c, 0x76, 0x6c,
	0x61, 0x6e, 0x49, 0x64, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x09, 0x0a, 0x07, 0x76, 0x6c,
	0x61, 0x6e, 0x5f, 0x69, 0x64, 0x1a, 0xe1, 0x0a, 0x0a, 0x0d, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0xc0, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0xf5, 0xb4, 0xbc, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x45, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x65, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x2d, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xbd, 0x01, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0xea, 0xfa, 0xfc, 0x94, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x54,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x56, 0x6c, 0x61, 0x6e,
	0x2e, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x4d, 0x82, 0x41, 0x4a, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x65,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xe6, 0x03, 0x0a, 0x06, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x94, 0x01, 0x0a, 0x04, 0x74, 0x70, 0x69, 0x64, 0x18, 0xf3,
	0xd4, 0xec, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56,
	0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x54, 0x50, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x42, 0x53, 0x82, 0x41, 0x50, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x65, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x2d, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x74, 0x70, 0x69, 0x64, 0x52, 0x04, 0x74, 0x70, 0x69, 0x64, 0x12, 0x87, 0x01, 0x0a,
	0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0xaf, 0xa3, 0xa2, 0x37, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x56, 0x82, 0x41, 0x53, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e,
	0x2f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x64, 0x52, 0x06,
	0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0xba, 0x01, 0x0a, 0x11, 0x76, 0x6c, 0x61, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xf7, 0xe6, 0xec,
	0x22, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x6c, 0x61,
	0x6e, 0x56, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x60, 0x82, 0x41, 0x5d, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x65, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x2d, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2d, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0f, 0x76, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0xe3, 0x03, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x93, 0x01,
	0x0a, 0x04, 0x74, 0x70, 0x69, 0x64, 0x18, 0xa6, 0xa2, 0xb7, 0x1b, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x54, 0x50, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x52, 0x82, 0x41, 0x4f, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76,
	0x6c, 0x61, 0x6e, 0x2f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x6d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x70, 0x69, 0x64, 0x52, 0x04, 0x74,
	0x70, 0x69, 0x64, 0x12, 0x86, 0x01, 0x0a, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0xc8, 0xe1, 0xa2, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x55, 0x82,
	0x41, 0x52, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x6d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x6c, 0x61,
	0x6e, 0x2d, 0x69, 0x64, 0x52, 0x06, 0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0xba, 0x01, 0x0a,
	0x11, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x9c, 0xf2, 0xa5, 0xf5, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x56, 0x6c, 0x61, 0x6e, 0x56, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x5f, 0x82, 0x41, 0x5c, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x6c, 0x61,
	0x6e, 0x2f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x76, 0x6c, 0x61, 0x6e, 0x53, 0x74,
	0x61, 0x63, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xee, 0x0a, 0x0a, 0x0e, 0x49, 0x6e,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0xc3, 0x01, 0x0a,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xc5, 0xab, 0x90, 0x9b, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x56, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x56,
	0x6c, 0x61, 0x6e, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76,
	0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x6d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0xbe, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xba, 0xb5, 0xeb,
	0x4c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x4e, 0x82, 0x41,
	0x4b, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x6d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x1a, 0xeb, 0x03, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x96,
	0x01, 0x0a, 0x04, 0x74, 0x70, 0x69, 0x64, 0x18, 0xa3, 0xc2, 0x9a, 0xbd, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x54, 0x50, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x54, 0x82, 0x41, 0x51,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x6d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x74, 0x70, 0x69,
	0x64, 0x52, 0x04, 0x74, 0x70, 0x69, 0x64, 0x12, 0x88, 0x01, 0x0a, 0x07, 0x76, 0x6c, 0x61, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x9f, 0xa7, 0xb5, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x57, 0x82, 0x41, 0x54, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x6e, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x2d, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x64, 0x52, 0x06, 0x76, 0x6c, 0x61, 0x6e,
	0x49, 0x64, 0x12, 0xbc, 0x01, 0x0a, 0x11, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x87, 0x98, 0xc3, 0x8c, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x6c, 0x61, 0x6e, 0x56, 0x6c,
	0x61, 0x6e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x82,
	0x41, 0x5e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2d,
	0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x76,
	0x6c, 0x61, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0f, 0x76, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0xe6, 0x03, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x94, 0x01, 0x0a, 0x04,
	0x74, 0x70, 0x69, 0x64, 0x18, 0x96, 0xab, 0xea, 0x18, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x54, 0x50,
	0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x53, 0x82, 0x41, 0x50, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x6c, 0x61,
	0x6e, 0x2f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x70, 0x69, 0x64, 0x52, 0x04, 0x74, 0x70,
	0x69, 0x64, 0x12, 0x88, 0x01, 0x0a, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0xb8,
	0xdb, 0x94, 0xd1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x56, 0x82,
	0x41, 0x53, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2d,
	0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x6c,
	0x61, 0x6e, 0x2d, 0x69, 0x64, 0x52, 0x06, 0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0xba, 0x01,
	0x0a, 0x11, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0xac, 0xb1, 0xa4, 0x61, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x56, 0x6c, 0x61, 0x6e, 0x56, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x60, 0x82, 0x41, 0x5d, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x6c, 0x61,
	0x6e, 0x2f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x76, 0x6c, 0x61, 0x6e, 0x53,
	0x74, 0x61, 0x63, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xd9, 0x68, 0x0a, 0x05, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x12, 0xca, 0x01, 0x0a, 0x0d, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f,
	0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x18, 0xf6, 0x9a, 0xc2, 0xc0, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x53, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x56, 0x6c,
	0x61, 0x6e, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x54,
	0x61, 0x67, 0x67, 0x65, 0x64, 0x42, 0x4c, 0x82, 0x41, 0x49, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x2d, 0x74, 0x61, 0x67,
	0x67, 0x65, 0x64, 0x52, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x54, 0x61, 0x67, 0x67, 0x65,
	0x64, 0x12, 0xf2, 0x01, 0x0a, 0x18, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x61, 0x67,
	0x67, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0xb6,
	0x86, 0x83, 0xf9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x54, 0x61, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x6e,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x57, 0x82, 0x41, 0x54, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e,
	0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x2d, 0x74, 0x61,
	0x67, 0x67, 0x65, 0x64, 0x2d, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x52,
	0x15, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x54, 0x61, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x6e,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x8b, 0x02, 0x0a, 0x1f, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x5f, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0xf7, 0xcd, 0xc1, 0x6f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x62, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x54, 0x61, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x4f, 0x75, 0x74,
	0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x5e, 0x82, 0x41, 0x5b, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x6c, 0x61,
	0x6e, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x2d, 0x74,
	0x61, 0x67, 0x67, 0x65, 0x64, 0x2d, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x2d, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x2d, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x1b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x54,
	0x61, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0xf6, 0x01, 0x0a, 0x19, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f,
	0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0xb1, 0xeb, 0x98, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x54, 0x61, 0x67, 0x67, 0x65,
	0x64, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x58, 0x82, 0x41, 0x55,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x2d, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x2d, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x2d,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x16, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x54, 0x61, 0x67,
	0x67, 0x65, 0x64, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0xf1, 0x01,
	0x0a, 0x18, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x5f,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0xf9, 0xd5, 0xba, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x5c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x54, 0x61, 0x67, 0x67, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x57, 0x82, 0x41, 0x54, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x2f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x2d, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x2d,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x15, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x54, 0x61, 0x67, 0x67, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0xf6, 0x01, 0x0a, 0x19, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x61, 0x67,
	0x67, 0x65, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x98, 0xb5, 0xbb, 0xe0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x54, 0x61, 0x67, 0x67, 0x65, 0x64, 0x4f, 0x75,
	0x74, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x58, 0x82, 0x41, 0x55, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x6c,
	0x61, 0x6e, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x2d,
	0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x2d, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x16, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x54, 0x61, 0x67, 0x67, 0x65, 0x64,
	0x4f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0xca, 0x01, 0x0a, 0x0d, 0x73,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x18, 0x8f, 0xf3, 0xbc,
	0xed, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x61, 0x67, 0x67, 0x65, 0x64, 0x42, 0x4c, 0x82, 0x41, 0x49,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x73, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x2d, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x52, 0x0c, 0x73, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x54, 0x61, 0x67, 0x67, 0x65, 0x64, 0x12, 0xdc, 0x01, 0x0a, 0x12, 0x73, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x88,
	0xd5, 0xe7, 0xdd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x61, 0x67, 0x67, 0x65, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x51, 0x82, 0x41, 0x4e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x2f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x2d, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x2d,
	0x6c, 0x69, 0x73, 0x74, 0x52, 0x10, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x61, 0x67, 0x67,
	0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0xdf, 0x01, 0x0a, 0x13, 0x73, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x5f, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0xe7,
	0xa5, 0xea, 0x39, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x61, 0x67, 0x67, 0x65, 0x64, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x42, 0x52, 0x82, 0x41, 0x4f, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x2f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x2d, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x2d,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x11, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x61, 0x67,
	0x67, 0x65, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0xba, 0x08, 0x0a, 0x0c, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x54, 0x61, 0x67, 0x67, 0x65, 0x64, 0x12, 0xca, 0x01, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0xd7, 0x95, 0xf7, 0x5b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5a, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x2e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x54, 0x61, 0x67, 0x67,
	0x65, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x53, 0x82, 0x41, 0x50, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76,
	0x6c, 0x61, 0x6e, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x2d, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xc7, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x88, 0x8d, 0xb6, 0x91, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x54, 0x61, 0x67, 0x67, 0x65, 0x64, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x52, 0x82, 0x41, 0x4f, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x2d, 0x74, 0x61, 0x67,
	0x67, 0x65, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x1a, 0xc9, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x9e, 0x01, 0x0a, 0x0d,
	0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0xa6, 0xd3,
	0xa5, 0xe8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x61, 0x82, 0x41,
	0x5e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x2d, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x64, 0x52,
	0x0b, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x9d, 0x01, 0x0a,
	0x0d, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0xe7,
	0x99, 0x8c, 0x72, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x61, 0x82, 0x41,
	0x5e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x2d, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x64, 0x52,
	0x0b, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x1a, 0xc6, 0x02, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x9d, 0x01, 0x0a, 0x0d, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x95, 0xde, 0xbb, 0xff, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x60, 0x82, 0x41, 0x5d, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x6c, 0x61,
	0x6e, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x2d, 0x74,
	0x61, 0x67, 0x67, 0x65, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x6e, 0x65,
	0x72, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x64, 0x52, 0x0b, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x56, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x9c, 0x01, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0xb0, 0x94, 0xeb, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x60, 0x82, 0x41, 0x5d, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e,
	0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x2d, 0x74, 0x61,
	0x67, 0x67, 0x65, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x64, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x56,
	0x6c, 0x61, 0x6e, 0x49, 0x64, 0x1a, 0x9b, 0x09, 0x0a, 0x15, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x54, 0x61, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0xde, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x97, 0x86, 0xe8, 0x30, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x63, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x54, 0x61, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x5e, 0x82, 0x41, 0x5b, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x6c,
	0x61, 0x6e, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x2d,
	0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x2d, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x2d, 0x6c, 0x69, 0x73,
	0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0xda, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xc8, 0xad, 0x92, 0x60, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x62, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x54, 0x61, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x5d, 0x82, 0x41, 0x5a, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x6c, 0x61,
	0x6e, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x2d, 0x74,
	0x61, 0x67, 0x67, 0x65, 0x64, 0x2d, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x2d, 0x6c, 0x69, 0x73, 0x74,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xe1, 0x02,
	0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xab, 0x01, 0x0a, 0x0e, 0x69, 0x6e, 0x6e,
	0x65, 0x72, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0xe1, 0xe7, 0x80, 0x73,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6d, 0x82, 0x41, 0x6a, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76,
	0x6c, 0x61, 0x6e, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x2d, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x2d, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x2d, 0x6c, 0x69,
	0x73, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x2d,
	0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x64, 0x73, 0x52, 0x0c, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x56,
	0x6c, 0x61, 0x6e, 0x49, 0x64, 0x73, 0x12, 0xa8, 0x01, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0xa7, 0xbf, 0x8c, 0x55, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6c, 0x82, 0x41, 0x69, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e,
	0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x2d, 0x74, 0x61,
	0x67, 0x67, 0x65, 0x64, 0x2d, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x76, 0x6c, 0x61,
	0x6e, 0x2d, 0x69, 0x64, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e, 0x49,
	0x64, 0x1a, 0xdf, 0x02, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xab, 0x01, 0x0a, 0x0e,
	0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0xbc,
	0xaa, 0xdd, 0xd8, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6c, 0x82,
	0x41, 0x69, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x2d, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x2d, 0x69, 0x6e, 0x6e, 0x65,
	0x72, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x6e,
	0x65, 0x72, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x64, 0x73, 0x52, 0x0c, 0x69, 0x6e, 0x6e,
	0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x73, 0x12, 0xa7, 0x01, 0x0a, 0x0d, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0xf0, 0x9f, 0xd3, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6b, 0x82, 0x41, 0x68, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76,
	0x6c, 0x61, 0x6e, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x2d, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x2d, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x2d, 0x6c, 0x69,
	0x73, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x76,
	0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x64, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x56, 0x6c, 0x61,
	0x6e, 0x49, 0x64, 0x1a, 0xfe, 0x0f, 0x0a, 0x1b, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x54, 0x61,
	0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0xeb, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xe8,
	0xbd, 0x8b, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x69, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e,
	0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x54, 0x61, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x6e, 0x65,
	0x72, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x65, 0x82, 0x41, 0x62, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x2f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x2d, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64,
	0x2d, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x2d, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0xe8, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x81, 0xf6, 0xce, 0x99,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x68, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x54, 0x61, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x4f,
	0x75, 0x74, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42,
	0x64, 0x82, 0x41, 0x61, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2f,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x2d, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x2d, 0x69, 0x6e,
	0x6e, 0x65, 0x72, 0x2d, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x85, 0x06, 0x0a,
	0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xbd, 0x01, 0x0a, 0x12, 0x69, 0x6e, 0x6e, 0x65,
	0x72, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x96,
	0xdb, 0x97, 0x5f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x78, 0x82, 0x41,
	0x75, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x2d, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x2d, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x2d, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x2d, 0x68, 0x69, 0x67, 0x68, 0x2d, 0x76,
	0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x64, 0x52, 0x0f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x48, 0x69, 0x67,
	0x68, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0xbb, 0x01, 0x0a, 0x11, 0x69, 0x6e, 0x6e, 0x65,
	0x72, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0xe0, 0x9a,
	0xb5, 0xa1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x77, 0x82, 0x41,
	0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x2d, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x2d, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x2d, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x2d, 0x6c, 0x6f, 0x77, 0x2d, 0x76, 0x6c,
	0x61, 0x6e, 0x2d, 0x69, 0x64, 0x52, 0x0e, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x4c, 0x6f, 0x77, 0x56,
	0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0xbe, 0x01, 0x0a, 0x12, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f,
	0x68, 0x69, 0x67, 0x68, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0xc5, 0x93, 0x81,
	0xc9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x78, 0x82, 0x41, 0x75,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x2d, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x2d, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x2d,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x68, 0x69, 0x67, 0x68, 0x2d, 0x76, 0x6c,
	0x61, 0x6e, 0x2d, 0x69, 0x64, 0x52, 0x0f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x48, 0x69, 0x67, 0x68,
	0x56, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0xbb, 0x01, 0x0a, 0x11, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0xd1, 0xa0, 0x84,
	0xca, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x77, 0x82, 0x41, 0x74,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x2d, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x2d, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x2d,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x6c, 0x6f, 0x77, 0x2d, 0x76, 0x6c, 0x61,
	0x6e, 0x2d, 0x69, 0x64, 0x52, 0x0e, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x77, 0x56, 0x6c,
	0x61, 0x6e, 0x49, 0x64, 0x1a, 0xfd, 0x05, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xbc,
	0x01, 0x0a, 0x12, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x76, 0x6c,
	0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0xf5, 0xfe, 0xdb, 0x58, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x77, 0x82, 0x41, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x2f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x2d, 0x74, 0x61, 0x67, 0x67, 0x65,
	0x64, 0x2d, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x2d, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x2d,
	0x68, 0x69, 0x67, 0x68, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x64, 0x52, 0x0f, 0x69, 0x6e,
	0x6e, 0x65, 0x72, 0x48, 0x69, 0x67, 0x68, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0xb9, 0x01,
	0x0a, 0x11, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x76, 0x6c, 0x61, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0xc1, 0x99, 0xb3, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x76, 0x82, 0x41, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x2f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x2d, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x2d,
	0x69, 0x6e, 0x6e, 0x65, 0x72, 0x2d, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x2d, 0x6c, 0x6f,
	0x77, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x64, 0x52, 0x0e, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x4c, 0x6f, 0x77, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0xbc, 0x01, 0x0a, 0x12, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0xde, 0xf4, 0xd3, 0x50, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x77,
	0x82, 0x41, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x2d, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x2d, 0x69, 0x6e, 0x6e,
	0x65, 0x72, 0x2d, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x68, 0x69, 0x67, 0x68, 0x2d,
	0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x64, 0x52, 0x0f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x48, 0x69,
	0x67, 0x68, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0xb9, 0x01, 0x0a, 0x11, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0xe8,
	0xa2, 0xc2, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x76, 0x82, 0x41,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x2d, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x2d, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x2d, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x6c, 0x6f, 0x77, 0x2d, 0x76, 0x6c, 0x61,
	0x6e, 0x2d, 0x69, 0x64, 0x52, 0x0e, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x77, 0x56, 0x6c,
	0x61, 0x6e, 0x49, 0x64, 0x1a, 0xaa, 0x0c, 0x0a, 0x16, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x54,
	0x61, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0xe0, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xd6, 0xe6, 0x98, 0x53, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x64, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x54, 0x61, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x5f, 0x82, 0x41, 0x5c, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76,
	0x6c, 0x61, 0x6e, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x2d, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x2d, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x2d, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0xdc, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x83, 0x90, 0x95,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x63, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x54, 0x61, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x5e, 0x82, 0x41, 0x5b, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x2d, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x2d, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x2d, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x1a, 0xa8, 0x04, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xb8, 0x01, 0x0a,
	0x12, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x76, 0x6c, 0x61, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x8c, 0xe5, 0xfc, 0xf6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x72, 0x82, 0x41, 0x6f, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x2f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x2d, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64,
	0x2d, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x2d, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x2d, 0x68, 0x69, 0x67, 0x68, 0x2d, 0x76,
	0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x64, 0x52, 0x0f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x48, 0x69, 0x67,
	0x68, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0xb5, 0x01, 0x0a, 0x11, 0x69, 0x6e, 0x6e, 0x65,
	0x72, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x8e, 0x91,
	0x99, 0xc6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x71, 0x82, 0x41,
	0x6e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x2d, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x2d, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x2d, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x6e,
	0x6e, 0x65, 0x72, 0x2d, 0x6c, 0x6f, 0x77, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x64, 0x52,
	0x0e, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x4c, 0x6f, 0x77, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12,
	0xaa, 0x01, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0xd2, 0xeb, 0xa1, 0xf7, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x6d, 0x82, 0x41, 0x6a, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x2f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x2d, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x2d, 0x69,
	0x6e, 0x6e, 0x65, 0x72, 0x2d, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x64, 0x52,
	0x0b, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x1a, 0xa2, 0x04, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xb7, 0x01, 0x0a, 0x12, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0xf7, 0x88,
	0xb6, 0x9f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x71, 0x82, 0x41,
	0x6e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x2d, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x2d, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x2d, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x6e,
	0x65, 0x72, 0x2d, 0x68, 0x69, 0x67, 0x68, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x64, 0x52,
	0x0f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x48, 0x69, 0x67, 0x68, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x64,
	0x12, 0xb3, 0x01, 0x0a, 0x11, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x76,
	0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x93, 0xf9, 0xf5, 0x60, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x70, 0x82, 0x41, 0x6d, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x2f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x2d, 0x74, 0x61, 0x67, 0x67,
	0x65, 0x64, 0x2d, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x2d, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x2d, 0x6c, 0x6f, 0x77, 0x2d, 0x76,
	0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x64, 0x52, 0x0e, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x4c, 0x6f, 0x77,
	0x56, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0xa8, 0x01, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0xdb, 0xb9, 0x8c, 0x4f, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6c, 0x82, 0x41, 0x69, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e,
	0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x2d, 0x74, 0x61,
	0x67, 0x67, 0x65, 0x64, 0x2d, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x2d, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x76, 0x6c, 0x61,
	0x6e, 0x2d, 0x69, 0x64, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e, 0x49,
	0x64, 0x1a, 0x9d, 0x09, 0x0a, 0x15, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x54, 0x61, 0x67, 0x67,
	0x65, 0x64, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0xdf, 0x01, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xce, 0xe6, 0xbc, 0xd8, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x63, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x56, 0x6c,
	0x61, 0x6e, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x54,
	0x61, 0x67, 0x67, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x5e, 0x82, 0x41, 0x5b, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x2d, 0x74, 0x61, 0x67,
	0x67, 0x65, 0x64, 0x2d, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xdb, 0x01,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xfb, 0xf5, 0x8b, 0xf6, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x62, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x56,
	0x6c, 0x61, 0x6e, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x54, 0x61, 0x67, 0x67, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x5d, 0x82, 0x41, 0x5a, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x2d, 0x74, 0x61, 0x67,
	0x67, 0x65, 0x64, 0x2d, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xe2, 0x02, 0x0a, 0x06,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xa8, 0x01, 0x0a, 0x0d, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0xe3, 0xe9, 0x9e, 0x79, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6c, 0x82, 0x41, 0x69, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e,
	0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x2d, 0x74, 0x61,
	0x67, 0x67, 0x65, 0x64, 0x2d, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x2d, 0x76, 0x6c, 0x61,
	0x6e, 0x2d, 0x69, 0x64, 0x52, 0x0b, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e, 0x49,
	0x64, 0x12, 0xac, 0x01, 0x0a, 0x0e, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x6c, 0x61, 0x6e,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x9d, 0xe4, 0xd2, 0x9f, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x6d, 0x82, 0x41, 0x6a, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x2f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x2d, 0x74, 0x61, 0x67, 0x67, 0x65,
	0x64, 0x2d, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69,
	0x64, 0x73, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x73,
	0x1a, 0xde, 0x02, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xa7, 0x01, 0x0a, 0x0d, 0x69,
	0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0xea, 0xa0, 0xd6,
	0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6b, 0x82, 0x41, 0x68, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x2d, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x2d, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x6c,
	0x69, 0x73, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x2d,
	0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x64, 0x52, 0x0b, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x56, 0x6c,
	0x61, 0x6e, 0x49, 0x64, 0x12, 0xaa, 0x01, 0x0a, 0x0e, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x76,
	0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0xaa, 0xea, 0xec, 0x20, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6c, 0x82, 0x41, 0x69, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x2d, 0x74, 0x61, 0x67,
	0x67, 0x65, 0x64, 0x2d, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2d,
	0x69, 0x64, 0x73, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x64,
	0x73, 0x1a, 0xa9, 0x0c, 0x0a, 0x16, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x54, 0x61, 0x67, 0x67,
	0x65, 0x64, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0xe0, 0x01, 0x0a,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x9d, 0xf7, 0xf5, 0x4c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x64, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x56, 0x6c,
	0x61, 0x6e, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x54,
	0x61, 0x67, 0x67, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x5f, 0x82, 0x41, 0x5c, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e,
	0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x2d, 0x74, 0x61,
	0x67, 0x67, 0x65, 0x64, 0x2d, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0xdc, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x92, 0xd7, 0x83, 0x43, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x63, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x54, 0x61, 0x67, 0x67, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x5e, 0x82, 0x41, 0x5b, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x6c, 0x61,
	0x6e, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x2d, 0x74,
	0x61, 0x67, 0x67, 0x65, 0x64, 0x2d, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xa6,
	0x04, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xa9, 0x01, 0x0a, 0x0d, 0x69, 0x6e,
	0x6e, 0x65, 0x72, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0xfc, 0x98, 0x8b, 0x6f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6d, 0x82, 0x41, 0x6a, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76,
	0x6c, 0x61, 0x6e, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x2d, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x2d, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x64, 0x52, 0x0b, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x56,
	0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0xb7, 0x01, 0x0a, 0x12, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f,
	0x68, 0x69, 0x67, 0x68, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0xda, 0x97, 0xd3,
	0x50, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x72, 0x82, 0x41, 0x6f, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x2d, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x2d, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x2d, 0x68, 0x69, 0x67, 0x68, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x64, 0x52, 0x0f,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x48, 0x69, 0x67, 0x68, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12,
	0xb5, 0x01, 0x0a, 0x11, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x76, 0x6c,
	0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0xcc, 0xe4, 0xa0, 0xff, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x71, 0x82, 0x41, 0x6e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x2f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x2d, 0x74, 0x61, 0x67, 0x67,
	0x65, 0x64, 0x2d, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x6c, 0x6f, 0x77, 0x2d,
	0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x64, 0x52, 0x0e, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4c, 0x6f,
	0x77, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x1a, 0xa3, 0x04, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0xa8, 0x01, 0x0a, 0x0d, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x76, 0x6c, 0x61, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x87, 0xac, 0x81, 0x48, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x6c, 0x82, 0x41, 0x69, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x2f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x2d, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x2d,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x64, 0x52,
	0x0b, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0xb7, 0x01, 0x0a,
	0x12, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x76, 0x6c, 0x61, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0xb3, 0xfa, 0xc9, 0xa4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x71, 0x82, 0x41, 0x6e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x2f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x2d, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64,
	0x2d, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x68, 0x69, 0x67, 0x68, 0x2d, 0x76, 0x6c,
	0x61, 0x6e, 0x2d, 0x69, 0x64, 0x52, 0x0f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x48, 0x69, 0x67, 0x68,
	0x56, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0xb4, 0x01, 0x0a, 0x11, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0xa7, 0xee, 0xc6,
	0xe4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x70, 0x82, 0x41, 0x6d,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x2d, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x2d, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x2d, 0x6c, 0x6f, 0x77, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x64, 0x52, 0x0e, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x77, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x1a, 0xd9, 0x05,
	0x0a, 0x0c, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x61, 0x67, 0x67, 0x65, 0x64, 0x12, 0xcb,
	0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xf0, 0xb5, 0xd5, 0xa9, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x53, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x54, 0x61, 0x67, 0x67, 0x65, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x53, 0x82, 0x41, 0x50, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2f,
	0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x2d, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xc6, 0x01, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xe9, 0x84, 0xc2, 0x42, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x59, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x56, 0x6c, 0x61,
	0x6e, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x61,
	0x67, 0x67, 0x65, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x52, 0x82, 0x41, 0x4f, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x73, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x2d, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x98, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x8d, 0x01, 0x0a, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0xe2, 0xc6, 0xe0,
	0x91, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5b, 0x82, 0x41, 0x58,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x73, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x2d, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x64, 0x52, 0x06, 0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64,
	0x1a, 0x96, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x8c, 0x01, 0x0a, 0x07, 0x76,
	0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0xa3, 0xda, 0xee, 0xc6, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5a, 0x82, 0x41, 0x57, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x2d, 0x74, 0x61, 0x67,
	0x67, 0x65, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69,
	0x64, 0x52, 0x06, 0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x1a, 0xfd, 0x05, 0x0a, 0x10, 0x53, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x54, 0x61, 0x67, 0x67, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0xd4,
	0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xed, 0xa4, 0xba, 0x99, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x5e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x53, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x54, 0x61, 0x67, 0x67, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x58, 0x82, 0x41, 0x55, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x2f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x2d, 0x74, 0x61, 0x67, 0x67, 0x65,
	0x64, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xcf, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0xa2, 0xd0, 0xaf, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x61, 0x67, 0x67, 0x65, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x57, 0x82, 0x41, 0x54, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x6c, 0x61,
	0x6e, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x2d, 0x74,
	0x61, 0x67, 0x67, 0x65, 0x64, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x9f, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x94, 0x01, 0x0a, 0x08, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0xc6, 0xab, 0x95, 0x26, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x61, 0x82,
	0x41, 0x5e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x73, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x2d, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x2d, 0x6c, 0x69, 0x73, 0x74,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x64, 0x73,
	0x52, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x73, 0x1a, 0x9d, 0x01, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x93, 0x01, 0x0a, 0x08, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0xe3, 0x93, 0xba, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x60,
	0x82, 0x41, 0x5d, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x73,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x2d, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x2d, 0x6c, 0x69, 0x73,
	0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x64, 0x73,
	0x52, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x73, 0x1a, 0xda, 0x08, 0x0a, 0x11, 0x53, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x54, 0x61, 0x67, 0x67, 0x65, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0xd5, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xf8, 0xa6, 0xf3, 0x20, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x5f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x53, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x54, 0x61, 0x67, 0x67, 0x65, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x42, 0x59, 0x82, 0x41, 0x56, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x2f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x2d, 0x74, 0x61, 0x67, 0x67,
	0x65, 0x64, 0x2d, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xd2, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x91, 0xad, 0xef, 0xa9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5e, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x61, 0x67, 0x67, 0x65, 0x64,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x58, 0x82, 0x41, 0x55,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x73, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x2d, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x2d, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xcb, 0x02, 0x0a,
	0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xa0, 0x01, 0x0a, 0x0c, 0x68, 0x69, 0x67, 0x68,
	0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0xbf, 0xc3, 0xf9, 0x24, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x66, 0x82, 0x41, 0x63, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e,
	0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x2d, 0x74, 0x61,
	0x67, 0x67, 0x65, 0x64, 0x2d, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x68, 0x69, 0x67, 0x68, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x64, 0x52, 0x0a,
	0x68, 0x69, 0x67, 0x68, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x9d, 0x01, 0x0a, 0x0b, 0x6c,
	0x6f, 0x77, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0xbb, 0xf5, 0xac, 0x4b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x65, 0x82, 0x41, 0x62, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x6c,
	0x61, 0x6e, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x2d,
	0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x2d, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x6c, 0x6f, 0x77, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x64, 0x52,
	0x09, 0x6c, 0x6f, 0x77, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x1a, 0xc9, 0x02, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0xa0, 0x01, 0x0a, 0x0c, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x76, 0x6c,
	0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0xac, 0x80, 0xde, 0xe6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x65, 0x82, 0x41, 0x62, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73,
	0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x2f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x2d, 0x74, 0x61, 0x67, 0x67,
	0x65, 0x64, 0x2d, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x68,
	0x69, 0x67, 0x68, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x64, 0x52, 0x0a, 0x68, 0x69, 0x67,
	0x68, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x9c, 0x01, 0x0a, 0x0b, 0x6c, 0x6f, 0x77, 0x5f,
	0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0xae, 0xfc, 0x82, 0x47, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x64, 0x82, 0x41, 0x61, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x2d, 0x74, 0x61, 0x67,
	0x67, 0x65, 0x64, 0x2d, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x6c, 0x6f, 0x77, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x64, 0x52, 0x09, 0x6c, 0x6f, 0x77,
	0x56, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x1a, 0x6a, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x2a, 0x0a, 0x0e, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0xbb, 0x9b, 0x85, 0xb8, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x76,
	0x6c, 0x61, 0x6e, 0x49, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x0e, 0x76,
	0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xbe, 0xff,
	0xd8, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0c, 0x76, 0x6c, 0x61, 0x6e, 0x49,
	0x64, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x09, 0x0a, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f,
	0x69, 0x64, 0x1a, 0xc3, 0x01, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x4f, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x5f, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x1a, 0x98, 0x9a, 0x01, 0x0a, 0x06, 0x54, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x72, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x88,
	0xbc, 0xc0, 0xc5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x26, 0x82, 0x41, 0x23, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x69, 0x0a, 0x04, 0x69, 0x70, 0x76, 0x34,
	0x18, 0xaf, 0xf3, 0xaf, 0x5a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x42, 0x24, 0x82, 0x41, 0x21, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x52, 0x04, 0x69,
	0x70, 0x76, 0x34, 0x12, 0x69, 0x0a, 0x04, 0x69, 0x70, 0x76, 0x36, 0x18, 0xad, 0xf3, 0xaf, 0x5a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x70,
	0x76, 0x36, 0x42, 0x24, 0x82, 0x41, 0x21, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x52, 0x04, 0x69, 0x70, 0x76, 0x36, 0x12, 0x6d,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xa1, 0xe5, 0x90, 0x20, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42,
	0x25, 0x82, 0x41, 0x22, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xf3, 0x02,
	0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x57, 0x0a, 0x03, 0x64, 0x73, 0x74, 0x18,
	0xc4, 0xcf, 0xa4, 0xc2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x2a, 0x82, 0x41, 0x27, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64, 0x73, 0x74, 0x52, 0x03, 0x64, 0x73,
	0x74, 0x12, 0x60, 0x0a, 0x07, 0x67, 0x72, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x83, 0x8c, 0xfb,
	0xb7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2e, 0x82, 0x41, 0x2b,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x67, 0x72, 0x65, 0x2d, 0x6b, 0x65, 0x79, 0x52, 0x06, 0x67, 0x72, 0x65,
	0x4b, 0x65, 0x79, 0x12, 0x57, 0x0a, 0x03, 0x73, 0x72, 0x63, 0x18, 0xc3, 0xc5, 0xbb, 0xb9, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2a, 0x82, 0x41, 0x27,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x73, 0x72, 0x63, 0x52, 0x03, 0x73, 0x72, 0x63, 0x12, 0x55, 0x0a, 0x03,
	0x74, 0x74, 0x6c, 0x18, 0xa9, 0xc6, 0x88, 0xf9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x2a, 0x82, 0x41, 0x27, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x74, 0x74, 0x6c, 0x52, 0x03,
	0x74, 0x74, 0x6c, 0x1a, 0xd3, 0x41, 0x0a, 0x04, 0x49, 0x70, 0x76, 0x34, 0x12, 0x87, 0x01, 0x0a,
	0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x92, 0xda, 0xcd, 0x26, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x70, 0x76,
	0x34, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x42, 0x2e, 0x82, 0x41, 0x2b,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76,
	0x34, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x09, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x7b, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x90, 0x8c, 0x93, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x2b,
	0x82, 0x41, 0x28, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f,
	0x69, 0x70, 0x76, 0x34, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x87, 0x01, 0x0a, 0x09, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x18, 0xcf, 0xc5, 0x94, 0x78, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x42, 0x2e, 0x82, 0x41, 0x2b, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x52, 0x09, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x12, 0x86, 0x01,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x61, 0x72, 0x70, 0x18, 0xf2, 0x90, 0xba, 0xe3,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x49,
	0x70, 0x76, 0x34, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x72, 0x70, 0x42, 0x2e, 0x82, 0x41,
	0x2b, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70,
	0x76, 0x34, 0x2f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2d, 0x61, 0x72, 0x70, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x41, 0x72, 0x70, 0x12, 0x77, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x89, 0xb6, 0xf2, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x2a, 0x82, 0x41,
	0x27, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70,
	0x76, 0x34, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x8c, 0x01, 0x0a, 0x0a, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x18, 0xab,
	0xe4, 0xfb, 0xf0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x55, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65,
	0x64, 0x42, 0x2f, 0x82, 0x41, 0x2c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x65, 0x64, 0x52, 0x0a, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x1a, 0xb4,
	0x0a, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x97, 0x01, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x83, 0xbb, 0x88, 0x8a, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x70, 0x76, 0x34,
	0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x4b, 0x65, 0x79, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0xd8, 0x07, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x9f, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x84, 0xc0,
	0xf3, 0x42, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e,
	0x49, 0x70, 0x76, 0x34, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x3d, 0x82,
	0x41, 0x3a, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69,
	0x70, 0x76, 0x34, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x9b, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x9d,
	0x84, 0xfc, 0x4d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x3c, 0x82,
	0x41, 0x39, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69,
	0x70, 0x76, 0x34, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x1a, 0xff, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6a, 0x0a,
	0x02, 0x69, 0x70, 0x18, 0xe0, 0xd8, 0xa4, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x69, 0x70, 0x52, 0x02, 0x69, 0x70, 0x12, 0x88, 0x01, 0x0a, 0x0d, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0xb4, 0x97, 0xb2, 0x76,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4b, 0x82, 0x41, 0x48, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x1a, 0x8a, 0x03, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x6a,
	0x0a, 0x02, 0x69, 0x70, 0x18, 0x93, 0xbd, 0xc6, 0xa1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x69, 0x70, 0x52, 0x02, 0x69, 0x70, 0x12, 0x8a, 0x01, 0x0a, 0x06, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x9e, 0xe1, 0xf4, 0xf1, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x66, 0x49, 0x70, 0x49, 0x70, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x42, 0x43, 0x82, 0x41, 0x40, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x34,
	0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x52,
	0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x87, 0x01, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x81, 0xce, 0xe8, 0x4b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4a, 0x82, 0x41, 0x47, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x1a, 0xb1, 0x01, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79,
	0x12, 0x49, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x39, 0x82, 0x41,
	0x36, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70,
	0x76, 0x34, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x2f, 0x69, 0x70, 0x52, 0x02, 0x69, 0x70, 0x12, 0x58, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0xbd, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x71, 0x0a, 0x0b, 0x64, 0x68, 0x63, 0x70, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18,
	0xba, 0xb6, 0xab, 0xd2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x37,
	0x82, 0x41, 0x34, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f,
	0x69, 0x70, 0x76, 0x34, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64, 0x68, 0x63, 0x70,
	0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x64, 0x68, 0x63, 0x70, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x12, 0x65, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x92,
	0xf5, 0xd9, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x33, 0x82, 0x41,
	0x30, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70,
	0x76, 0x34, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x59, 0x0a, 0x03, 0x6d, 0x74,
	0x75, 0x18, 0x89, 0xe5, 0xb4, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x2f, 0x82, 0x41, 0x2c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x74, 0x75,
	0x52, 0x03, 0x6d, 0x74, 0x75, 0x1a, 0xea, 0x0a, 0x0a, 0x09, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x12, 0x9b, 0x01, 0x0a, 0x08, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x18, 0xf4, 0xd2, 0x8c, 0xf8, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x42, 0x37,
	0x82, 0x41, 0x34, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f,
	0x69, 0x70, 0x76, 0x34, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x52, 0x08, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x1a, 0x85, 0x08, 0x0a, 0x08, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x12, 0xa2,
	0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xf9, 0xeb, 0xd8, 0xd6, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x70, 0x76,
	0x34, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x3e, 0x82, 0x41, 0x3b,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76,
	0x34, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x9e, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xce, 0xe6,
	0xc9, 0xc5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x3d,
	0x82, 0x41, 0x3a, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f,
	0x69, 0x70, 0x76, 0x34, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x1a, 0x93, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x6c, 0x0a, 0x02, 0x69, 0x70, 0x18, 0xbf, 0xd8, 0xd1, 0xf6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x70, 0x52, 0x02, 0x69, 0x70, 0x12, 0x9a, 0x01,
	0x0a, 0x12, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x8b, 0xd6, 0x84, 0xe9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x51, 0x82, 0x41, 0x4e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x10, 0x6c, 0x69, 0x6e, 0x6b, 0x4c, 0x61,
	0x79, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x9c, 0x03, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x6b, 0x0a, 0x02, 0x69, 0x70, 0x18, 0xd2, 0xab, 0xf6, 0xc1, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x40, 0x82, 0x41, 0x3d,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76,
	0x34, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x70, 0x52, 0x02, 0x69,
	0x70, 0x12, 0x98, 0x01, 0x0a, 0x12, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xa2, 0xf8, 0xe0, 0x59, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x50, 0x82, 0x41, 0x4d, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x10, 0x6c, 0x69, 0x6e, 0x6b,
	0x4c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x8a, 0x01, 0x0a,
	0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0xcb, 0xc8, 0xca, 0xf3, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x66, 0x49, 0x70, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x42, 0x44, 0x82, 0x41, 0x41,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76,
	0x34, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x1a, 0xb6, 0x01, 0x0a, 0x0b, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x4a, 0x0a, 0x02, 0x69, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3a, 0x82, 0x41, 0x37, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x69,
	0x70, 0x52, 0x02, 0x69, 0x70, 0x12, 0x5b, 0x0a, 0x08, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x52, 0x08, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x1a, 0xae, 0x06, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x72, 0x70, 0x12,
	0x8f, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xb3, 0xf2, 0xcd, 0xec, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x70,
	0x76, 0x34, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x72, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2d, 0x61,
	0x72, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x8a, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x94, 0x99, 0xdb, 0x5d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x70,
	0x76, 0x34, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x72, 0x70, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x34, 0x82, 0x41, 0x31, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2d, 0x61, 0x72,
	0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x81,
	0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x94, 0x01, 0x0a, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x83, 0xe9, 0xaf, 0x33, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x41,
	0x72, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x3a,
	0x82, 0x41, 0x37, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f,
	0x69, 0x70, 0x76, 0x34, 0x2f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2d, 0x61, 0x72, 0x70, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x22, 0x60, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x0c, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x44,
	0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x12, 0x24, 0x0a, 0x10, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x52,
	0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x02, 0x1a, 0x0e, 0x82, 0x41,
	0x0b, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x12, 0x14, 0x0a, 0x08,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x03, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x41,
	0x4c, 0x4c, 0x1a, 0xfe, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x92, 0x01, 0x0a,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0xe2, 0xbb, 0xf4, 0x2c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x41, 0x72, 0x70, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65,
	0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2d, 0x61, 0x72, 0x70,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x22, 0x60, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x0c, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x1a, 0x0a, 0x82, 0x41, 0x07,
	0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x12, 0x24, 0x0a, 0x10, 0x4d, 0x4f, 0x44, 0x45, 0x5f,
	0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x02, 0x1a, 0x0e, 0x82,
	0x41, 0x0b, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x12, 0x14, 0x0a,
	0x08, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x03, 0x1a, 0x06, 0x82, 0x41, 0x03,
	0x41, 0x4c, 0x4c, 0x1a, 0x86, 0x10, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x8f, 0x01,
	0x0a, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x83, 0xfe, 0xbd, 0x41, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x70, 0x76,
	0x34, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x42, 0x33, 0x82, 0x41, 0x30, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x70, 0x0a, 0x0b, 0x64, 0x68, 0x63, 0x70, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0xeb,
	0xdd, 0x89, 0x95, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x36, 0x82,
	0x41, 0x33, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69,
	0x70, 0x76, 0x34, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x2d, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x64, 0x68, 0x63, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x12, 0x65, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xcf, 0xf7, 0xdb,
	0xca, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x32, 0x82, 0x41, 0x2f,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76,
	0x34, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x58, 0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18,
	0xf0, 0xf1, 0xa3, 0x44, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2e, 0x82,
	0x41, 0x2b, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69,
	0x70, 0x76, 0x34, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x74, 0x75, 0x52, 0x03, 0x6d,
	0x74, 0x75, 0x1a, 0xb7, 0x0c, 0x0a, 0x08, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x8a, 0x01, 0x0a, 0x11, 0x69, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64,
	0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x8a, 0xda, 0xa2, 0x8f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x64, 0x69, 0x73,
	0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x0f, 0x69, 0x6e, 0x44,
	0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x7d, 0x0a, 0x0d,
	0x69, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0xa7, 0xa4,
	0xee, 0x73, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x41, 0x82, 0x41, 0x3e,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76,
	0x34, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x2f, 0x69, 0x6e, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x0b,
	0x69, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x8f, 0x01, 0x0a, 0x13,
	0x69, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x6f, 0x63, 0x74,
	0x65, 0x74, 0x73, 0x18, 0xf9, 0xa7, 0xa5, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x47, 0x82, 0x41, 0x44, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x65, 0x64, 0x2d, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x52, 0x11, 0x69, 0x6e, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12, 0x8a, 0x01,
	0x0a, 0x11, 0x69, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x70,
	0x6b, 0x74, 0x73, 0x18, 0xbd, 0xfc, 0xe9, 0xa3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x65, 0x64, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x0f, 0x69, 0x6e, 0x46, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x72, 0x0a, 0x09, 0x69, 0x6e,
	0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0xd8, 0xc3, 0xda, 0x7d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3d, 0x82, 0x41, 0x3a, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x6f, 0x63,
	0x74, 0x65, 0x74, 0x73, 0x52, 0x08, 0x69, 0x6e, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12, 0x6d,
	0x0a, 0x07, 0x69, 0x6e, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0xbc, 0x87, 0xd6, 0xa1, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3b, 0x82, 0x41, 0x38, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e,
	0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x06, 0x69, 0x6e, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x8c, 0x01,
	0x0a, 0x12, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f,
	0x70, 0x6b, 0x74, 0x73, 0x18, 0xa5, 0xb1, 0x91, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x64, 0x69, 0x73, 0x63,
	0x61, 0x72, 0x64, 0x65, 0x64, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x44,
	0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x80, 0x01, 0x0a,
	0x0e, 0x6f, 0x75, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18,
	0xf4, 0xb7, 0xbf, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x42, 0x82,
	0x41, 0x3f, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69,
	0x70, 0x76, 0x34, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x70, 0x6b, 0x74,
	0x73, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x6b, 0x74, 0x73, 0x12,
	0x93, 0x01, 0x0a, 0x14, 0x6f, 0x75, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65,
	0x64, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0xf6, 0xaf, 0xec, 0xab, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x48, 0x82, 0x41, 0x45, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74,
	0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x2d, 0x6f, 0x63, 0x74, 0x65, 0x74,
	0x73, 0x52, 0x12, 0x6f, 0x75, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x4f,
	0x63, 0x74, 0x65, 0x74, 0x73, 0x12, 0x8c, 0x01, 0x0a, 0x12, 0x6f, 0x75, 0x74, 0x5f, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0xbe, 0xb5, 0x9a,
	0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x46, 0x82, 0x41, 0x43, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x34,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f,
	0x6f, 0x75, 0x74, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x2d, 0x70, 0x6b,
	0x74, 0x73, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64,
	0x50, 0x6b, 0x74, 0x73, 0x12, 0x75, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x63, 0x74, 0x65,
	0x74, 0x73, 0x18, 0xf7, 0xc8, 0x85, 0x4f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73,
	0x52, 0x09, 0x6f, 0x75, 0x74, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12, 0x6f, 0x0a, 0x08, 0x6f,
	0x75, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0xd7, 0xdd, 0x96, 0x1d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3c, 0x82, 0x41, 0x39, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x70,
	0x6b, 0x74, 0x73, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x50, 0x6b, 0x74, 0x73, 0x1a, 0x8a, 0x0d, 0x0a,
	0x0a, 0x55, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x12, 0x91, 0x01, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xfc, 0xa0, 0xaf, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x55, 0x6e,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x36, 0x82, 0x41, 0x33, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0xac, 0x01, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65,
	0x66, 0x18, 0xa3, 0xf1, 0x9e, 0x8f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x55, 0x6e, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65,
	0x66, 0x42, 0x3d, 0x82, 0x41, 0x3a, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x65, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x66,
	0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x12, 0x8e,
	0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xf5, 0x8c, 0x99, 0x8b, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x70, 0x76, 0x34,
	0x2e, 0x55, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x65, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a,
	0x7a, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x70, 0x0a, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0xae, 0xab, 0xb1, 0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x1a, 0xb0, 0x07, 0x0a, 0x0c,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x12, 0xad, 0x01, 0x0a,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xa4, 0xd5, 0x95, 0xa6, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x4b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e,
	0x55, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x44,
	0x82, 0x41, 0x41, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f,
	0x69, 0x70, 0x76, 0x34, 0x2f, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x66, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xa9, 0x01, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xbd, 0x80, 0xe4, 0xec, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x4a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x55,
	0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x43, 0x82, 0x41,
	0x40, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70,
	0x76, 0x34, 0x2f, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x66, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xa2, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x87, 0x01, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x18, 0xfc, 0xab, 0xeb, 0x88, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x65, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65,
	0x66, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x8d, 0x01,
	0x0a, 0x0c, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0xcc,
	0x97, 0xfb, 0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x51, 0x82, 0x41,
	0x4e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70,
	0x76, 0x34, 0x2f, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x66, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52,
	0x0c, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x1a, 0x9e, 0x02,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0xa9, 0x9d, 0x8b, 0x43, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4d, 0x82, 0x41, 0x4a, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x75, 0x6e, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2d, 0x72, 0x65, 0x66, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12,
	0x8c, 0x01, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x18, 0x8b, 0xb0, 0xd7, 0x5e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x50,
	0x82, 0x41, 0x4d, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f,
	0x69, 0x70, 0x76, 0x34, 0x2f, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x66, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x52, 0x0c, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x1a, 0x79,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x70, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x9b, 0xb8, 0xf8, 0xd7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x3d, 0x82, 0x41, 0x3a, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x65, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x1a, 0x9a, 0x4f, 0x0a, 0x04, 0x49, 0x70,
	0x76, 0x36, 0x12, 0x87, 0x01, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x18, 0xb4, 0xd9, 0xe4, 0x4a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x42, 0x2e, 0x82, 0x41, 0x2b, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x7c, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xc2, 0xed, 0xd2, 0xfd, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x2b, 0x82, 0x41, 0x28, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x87, 0x01, 0x0a, 0x09, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x18, 0xf1, 0xbe, 0xa5, 0x20, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x42, 0x2e, 0x82, 0x41, 0x2b, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x52, 0x09, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x12, 0xb2, 0x01, 0x0a, 0x14, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f,
	0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x93, 0xe9,
	0xac, 0xf5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x41, 0x64, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x13, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x41, 0x64, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x77, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0xff, 0x94, 0xd0, 0x52, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42,
	0x2a, 0x82, 0x41, 0x27, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x8c, 0x01, 0x0a, 0x0a, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65,
	0x64, 0x18, 0xd9, 0x8f, 0x97, 0xdd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x55, 0x6e, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x65, 0x64, 0x42, 0x2f, 0x82, 0x41, 0x2c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x75, 0x6e, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x65, 0x64, 0x52, 0x0a, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65,
	0x64, 0x1a, 0xa1, 0x0e, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12,
	0x96, 0x01, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xad, 0xb2, 0xe1, 0x2d,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x70,
	0x76, 0x36, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0xc6, 0x0b, 0x0a, 0x07, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x9f, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0xc2, 0xb2, 0xa1, 0x7e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x3d, 0x82, 0x41, 0x3a, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x9b, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0xff, 0xdb, 0x85, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42,
	0x3c, 0x82, 0x41, 0x39, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x1a, 0x80, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x6a, 0x0a, 0x02, 0x69, 0x70, 0x18, 0xd6, 0x92, 0xfb, 0x60, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x70, 0x52, 0x02, 0x69, 0x70, 0x12, 0x89, 0x01, 0x0a, 0x0d,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0xd6, 0xc3,
	0xdf, 0x91, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4b, 0x82, 0x41,
	0x48, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70,
	0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x2d, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x1a, 0xf7, 0x06, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x6a, 0x0a, 0x02, 0x69, 0x70, 0x18, 0xed, 0xdc, 0x8d, 0xc9, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x70, 0x52, 0x02, 0x69, 0x70, 0x12, 0x89, 0x01,
	0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0xf0, 0xaa, 0x8e, 0x47, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x66, 0x49, 0x70, 0x49, 0x70, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x42, 0x43, 0x82, 0x41,
	0x40, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70,
	0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x87, 0x01, 0x0a, 0x0d, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0xc7, 0x9d, 0x9e, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4a, 0x82, 0x41, 0x47, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0xac, 0x01, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0xf8,
	0xcb, 0xdd, 0xee, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x43, 0x82, 0x41, 0x40, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0xbc, 0x02, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a,
	0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12,
	0x22, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x45, 0x52,
	0x52, 0x45, 0x44, 0x10, 0x01, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x50, 0x52, 0x45, 0x46, 0x45, 0x52,
	0x52, 0x45, 0x44, 0x12, 0x24, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45,
	0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x10, 0x02, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x44,
	0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x12, 0x1e, 0x0a, 0x0e, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x03, 0x1a, 0x0a, 0x82,
	0x41, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x13, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x49, 0x42, 0x4c, 0x45,
	0x10, 0x04, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x49, 0x4e, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x49,
	0x42, 0x4c, 0x45, 0x12, 0x1e, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x05, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x12, 0x22, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x45,
	0x4e, 0x54, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x06, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x54, 0x45,
	0x4e, 0x54, 0x41, 0x54, 0x49, 0x56, 0x45, 0x12, 0x22, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x10, 0x07, 0x1a, 0x0c, 0x82,
	0x41, 0x09, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x12, 0x24, 0x0a, 0x11, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4d, 0x49, 0x53, 0x54, 0x49, 0x43,
	0x10, 0x08, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x4f, 0x50, 0x54, 0x49, 0x4d, 0x49, 0x53, 0x54, 0x49,
	0x43, 0x1a, 0xb1, 0x01, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79,
	0x12, 0x49, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x39, 0x82, 0x41,
	0x36, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70,
	0x76, 0x36, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x2f, 0x69, 0x70, 0x52, 0x02, 0x69, 0x70, 0x12, 0x58, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0xd8, 0x03, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x70, 0x0a, 0x0b, 0x64, 0x68, 0x63, 0x70, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18,
	0xdc, 0xf3, 0x97, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x37, 0x82,
	0x41, 0x34, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69,
	0x70, 0x76, 0x36, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x2d,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x64, 0x68, 0x63, 0x70, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x12, 0x98, 0x01, 0x0a, 0x19, 0x64, 0x75, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f,
	0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x73,
	0x18, 0xc4, 0xed, 0xe4, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x45,
	0x82, 0x41, 0x42, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f,
	0x69, 0x70, 0x76, 0x36, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64, 0x75, 0x70, 0x2d,
	0x61, 0x64, 0x64, 0x72, 0x2d, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x2d, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x16, 0x64, 0x75, 0x70, 0x41, 0x64, 0x64, 0x72, 0x44, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x65, 0x0a,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x90, 0xb8, 0xf0, 0x24, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x33, 0x82, 0x41, 0x30, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x5a, 0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18, 0x87, 0xb7, 0xd2, 0x91,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2f, 0x82, 0x41, 0x2c, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x74, 0x75, 0x52, 0x03, 0x6d, 0x74, 0x75,
	0x1a, 0x9f, 0x0f, 0x0a, 0x09, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x12, 0x9a,
	0x01, 0x0a, 0x08, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x18, 0xaa, 0xd1, 0xd8, 0x42,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x70,
	0x76, 0x36, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x42, 0x37, 0x82, 0x41, 0x34, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x52, 0x08, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x1a, 0xbb, 0x0c, 0x0a, 0x08,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x12, 0xa1, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0xfb, 0xa4, 0xa2, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x9e, 0x01, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xfc, 0xe9, 0xb0, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x45, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x3d, 0x82, 0x41, 0x3a, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x91, 0x02,
	0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6b, 0x0a, 0x02, 0x69, 0x70, 0x18, 0xa9,
	0xc2, 0x89, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x41,
	0x82, 0x41, 0x3e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f,
	0x69, 0x70, 0x76, 0x36, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69,
	0x70, 0x52, 0x02, 0x69, 0x70, 0x12, 0x99, 0x01, 0x0a, 0x12, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xad, 0xfd, 0x8a,
	0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x51, 0x82, 0x41,
	0x4e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70,
	0x76, 0x36, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6c, 0x69, 0x6e,
	0x6b, 0x2d, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x10, 0x6c, 0x69, 0x6e, 0x6b, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x1a, 0xd5, 0x07, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x6b, 0x0a, 0x02, 0x69,
	0x70, 0x18, 0xc8, 0xcf, 0xa9, 0xde, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x69, 0x70, 0x52, 0x02, 0x69, 0x70, 0x12, 0x7c, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x18, 0xeb, 0xac, 0x8b, 0x6c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x47, 0x82, 0x41, 0x44, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x69, 0x73, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x08, 0x69, 0x73,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x99, 0x01, 0x0a, 0x12, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xb0, 0x82,
	0xcf, 0xf8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x50,
	0x82, 0x41, 0x4d, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f,
	0x69, 0x70, 0x76, 0x36, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x69,
	0x6e, 0x6b, 0x2d, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x10, 0x6c, 0x69, 0x6e, 0x6b, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0xcc, 0x01, 0x0a, 0x0e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xf1, 0xdc, 0xeb, 0x9c, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x53, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x4c, 0x82, 0x41, 0x49, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2d, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x0d, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x89, 0x01, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0xa1, 0xe5, 0xf1,
	0x47, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x66, 0x49,
	0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x42,
	0x44, 0x82, 0x41, 0x41, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x22, 0xe9, 0x01,
	0x0a, 0x0d, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x17, 0x0a, 0x13, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x18, 0x4e, 0x45, 0x49, 0x47,
	0x48, 0x42, 0x4f, 0x52, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x50,
	0x4c, 0x45, 0x54, 0x45, 0x10, 0x01, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x49, 0x4e, 0x43, 0x4f, 0x4d,
	0x50, 0x4c, 0x45, 0x54, 0x45, 0x12, 0x29, 0x0a, 0x17, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f,
	0x52, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x02, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45,
	0x12, 0x21, 0x0a, 0x13, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x4c, 0x45, 0x10, 0x03, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x53, 0x54,
	0x41, 0x4c, 0x45, 0x12, 0x21, 0x0a, 0x13, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x10, 0x04, 0x1a, 0x08, 0x82, 0x41,
	0x05, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x12, 0x21, 0x0a, 0x13, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42,
	0x4f, 0x52, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x42, 0x45, 0x10, 0x05, 0x1a,
	0x08, 0x82, 0x41, 0x05, 0x50, 0x52, 0x4f, 0x42, 0x45, 0x1a, 0xb6, 0x01, 0x0a, 0x0b, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x4a, 0x0a, 0x02, 0x69, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3a, 0x82, 0x41, 0x37, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x69,
	0x70, 0x52, 0x02, 0x69, 0x70, 0x12, 0x5b, 0x0a, 0x08, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x52, 0x08, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x1a, 0xed, 0x08, 0x0a, 0x13, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x41, 0x64, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0xa5, 0x01, 0x0a, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xb4, 0xe6, 0x91, 0xf6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x47, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0xa0, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xcd, 0x90, 0xc2,
	0x61, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x49,
	0x70, 0x76, 0x36, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x3f, 0x82,
	0x41, 0x3c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69,
	0x70, 0x76, 0x36, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x61, 0x64, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x85, 0x03, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x7d, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0xec, 0xfc, 0xea,
	0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x49, 0x82, 0x41, 0x46, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0x7d, 0x0a, 0x08, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xd6, 0xd4, 0xf8, 0x3a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x49, 0x82, 0x41, 0x46, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6c, 0x69, 0x66, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x52, 0x08, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x7d,
	0x0a, 0x08, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x18, 0x9e, 0xb5, 0xd3, 0x72, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x49, 0x82, 0x41, 0x46, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x75, 0x70, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x08, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x82, 0x03,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x7d, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0xcb, 0xf8, 0x80, 0xf3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x48, 0x82, 0x41, 0x45, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d,
	0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x7c, 0x0a, 0x08, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0xf9, 0xf9, 0xbb, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x48, 0x82, 0x41, 0x45, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x61, 0x64,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x08, 0x6c, 0x69, 0x66, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x7c, 0x0a, 0x08, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x18, 0xb9, 0x9d, 0xb6, 0x7e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x48,
	0x82, 0x41, 0x45, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f,
	0x69, 0x70, 0x76, 0x36, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x61, 0x64, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x52, 0x08, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x1a, 0xa5, 0x11, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x90, 0x01, 0x0a,
	0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0xf5, 0x90, 0xe8, 0xab, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x70, 0x76,
	0x36, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x42, 0x33, 0x82, 0x41, 0x30, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x70, 0x0a, 0x0b, 0x64, 0x68, 0x63, 0x70, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0xe1,
	0xc5, 0xd7, 0x87, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x36, 0x82,
	0x41, 0x33, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69,
	0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x2d, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x64, 0x68, 0x63, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x12, 0x98, 0x01, 0x0a, 0x19, 0x64, 0x75, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x64,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x73, 0x18,
	0x8d, 0xe9, 0xb5, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x44,
	0x82, 0x41, 0x41, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f,
	0x69, 0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x75, 0x70, 0x2d, 0x61,
	0x64, 0x64, 0x72, 0x2d, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x2d, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x6d, 0x69, 0x74, 0x73, 0x52, 0x16, 0x64, 0x75, 0x70, 0x41, 0x64, 0x64, 0x72, 0x44, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x65, 0x0a, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xe1, 0xf4, 0xa5, 0xed, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x32, 0x82, 0x41, 0x2f, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x59, 0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18, 0xca, 0x9a, 0xf0, 0xe2, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2e, 0x82, 0x41, 0x2b, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x74, 0x75, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x1a, 0xb9,
	0x0c, 0x0a, 0x08, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x8a, 0x01, 0x0a, 0x11,
	0x69, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x6b, 0x74,
	0x73, 0x18, 0xb0, 0xb9, 0x8f, 0xbb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64,
	0x65, 0x64, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x0f, 0x69, 0x6e, 0x44, 0x69, 0x73, 0x63, 0x61,
	0x72, 0x64, 0x65, 0x64, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x7e, 0x0a, 0x0d, 0x69, 0x6e, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0xa9, 0xcf, 0xbd, 0xaf, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e,
	0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x0b, 0x69, 0x6e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x8f, 0x01, 0x0a, 0x13, 0x69, 0x6e, 0x5f,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73,
	0x18, 0x93, 0x9a, 0x98, 0x45, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x47,
	0x82, 0x41, 0x44, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f,
	0x69, 0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64,
	0x2d, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x52, 0x11, 0x69, 0x6e, 0x46, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x65, 0x64, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12, 0x8a, 0x01, 0x0a, 0x11, 0x69,
	0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x6b, 0x74, 0x73,
	0x18, 0x8b, 0xce, 0xb6, 0xca, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x45, 0x82, 0x41, 0x42, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65,
	0x64, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x0f, 0x69, 0x6e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x65, 0x64, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x72, 0x0a, 0x09, 0x69, 0x6e, 0x5f, 0x6f, 0x63,
	0x74, 0x65, 0x74, 0x73, 0x18, 0xa6, 0xcd, 0xd9, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x3d, 0x82, 0x41, 0x3a, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x6f, 0x63, 0x74, 0x65, 0x74,
	0x73, 0x52, 0x08, 0x69, 0x6e, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12, 0x6c, 0x0a, 0x07, 0x69,
	0x6e, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0xae, 0xea, 0xbb, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x3b, 0x82, 0x41, 0x38, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x70, 0x6b, 0x74,
	0x73, 0x52, 0x06, 0x69, 0x6e, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x8d, 0x01, 0x0a, 0x12, 0x6f, 0x75,
	0x74, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x6b, 0x74, 0x73,
	0x18, 0xf7, 0xa3, 0xff, 0xbc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x46, 0x82, 0x41, 0x43, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64,
	0x65, 0x64, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x44, 0x69, 0x73, 0x63,
	0x61, 0x72, 0x64, 0x65, 0x64, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x81, 0x01, 0x0a, 0x0e, 0x6f, 0x75,
	0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0xf2, 0x9f, 0x95,
	0xa5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x42, 0x82, 0x41, 0x3f,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76,
	0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52,
	0x0c, 0x6f, 0x75, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x93, 0x01,
	0x0a, 0x14, 0x6f, 0x75, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f,
	0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0xb4, 0xa5, 0x83, 0x8e, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x48, 0x82, 0x41, 0x45, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x2d, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x52,
	0x12, 0x6f, 0x75, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x4f, 0x63, 0x74,
	0x65, 0x74, 0x73, 0x12, 0x8c, 0x01, 0x0a, 0x12, 0x6f, 0x75, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0xd0, 0xb9, 0x90, 0x2d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x6f, 0x75,
	0x74, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x2d, 0x70, 0x6b, 0x74, 0x73,
	0x52, 0x10, 0x6f, 0x75, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x50, 0x6b,
	0x74, 0x73, 0x12, 0x75, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73,
	0x18, 0x89, 0xb2, 0x8d, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3e,
	0x82, 0x41, 0x3b, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f,
	0x69, 0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x52, 0x09,
	0x6f, 0x75, 0x74, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12, 0x6f, 0x0a, 0x08, 0x6f, 0x75, 0x74,
	0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x8d, 0xa9, 0xb1, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x3c, 0x82, 0x41, 0x39, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6b, 0x74,
	0x73, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x50, 0x6b, 0x74, 0x73, 0x1a, 0x89, 0x0d, 0x0a, 0x0a, 0x55,
	0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x12, 0x92, 0x01, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0xae, 0xc6, 0x8f, 0xd6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x55, 0x6e, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x36,
	0x82, 0x41, 0x33, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f,
	0x69, 0x70, 0x76, 0x36, 0x2f, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xab,
	0x01, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66,
	0x18, 0xed, 0x99, 0xdc, 0x55, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x55, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x65, 0x64, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x42,
	0x3d, 0x82, 0x41, 0x3a, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x66, 0x52, 0x0c,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x12, 0x8d, 0x01, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xdb, 0x96, 0xc2, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x55, 0x6e,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x35,
	0x82, 0x41, 0x32, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f,
	0x69, 0x70, 0x76, 0x36, 0x2f, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x7b, 0x0a, 0x06,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x71, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0xcc, 0xdb, 0x9c, 0x8a, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65,
	0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x1a, 0xb0, 0x07, 0x0a, 0x0c, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x12, 0xac, 0x01, 0x0a, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x82, 0xb9, 0x9d, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x55, 0x6e, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x52, 0x65, 0x66, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x44, 0x82, 0x41, 0x41,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76,
	0x36, 0x2f, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x66, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xa8, 0x01, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0xbf, 0xf6, 0xd7, 0x76, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x55, 0x6e, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52,
	0x65, 0x66, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x43, 0x82, 0x41, 0x40, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x75,
	0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x66, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x1a, 0xa3, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x87, 0x01, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0xae, 0xba,
	0xf6, 0xf5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4e,
	0x82, 0x41, 0x4b, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f,
	0x69, 0x70, 0x76, 0x36, 0x2f, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x66, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x09,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x8e, 0x01, 0x0a, 0x0c, 0x73, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0xca, 0xd8, 0xb7, 0xfe, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x51, 0x82, 0x41, 0x4e, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f,
	0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x66, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x0c, 0x73, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x1a, 0x9f, 0x02, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x18, 0xdf, 0x88, 0xd4, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x4d, 0x82, 0x41, 0x4a, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x65, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65,
	0x66, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x8d, 0x01, 0x0a,
	0x0c, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0xed, 0xe4,
	0xae, 0xc7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x50, 0x82, 0x41,
	0x4d, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x70,
	0x76, 0x36, 0x2f, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x66, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x0c,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x1a, 0x78, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x6f, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x9d, 0xee, 0xea, 0x59, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3d,
	0x82, 0x41, 0x3a, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f,
	0x69, 0x70, 0x76, 0x36, 0x2f, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x1a, 0xeb, 0x02, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x55, 0x0a, 0x03, 0x64, 0x73, 0x74, 0x18, 0xad, 0xd7, 0xd8, 0x22, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x29, 0x82, 0x41, 0x26, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64,
	0x73, 0x74, 0x52, 0x03, 0x64, 0x73, 0x74, 0x12, 0x5f, 0x0a, 0x07, 0x67, 0x72, 0x65, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0xee, 0xc7, 0x94, 0x9d, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x2d, 0x82, 0x41, 0x2a, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x67, 0x72, 0x65, 0x2d, 0x6b, 0x65, 0x79,
	0x52, 0x06, 0x67, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x55, 0x0a, 0x03, 0x73, 0x72, 0x63, 0x18,
	0xd6, 0xc1, 0xfb, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x29, 0x82, 0x41, 0x26, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x72, 0x63, 0x52, 0x03, 0x73, 0x72, 0x63, 0x12,
	0x53, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x90, 0x95, 0xb6, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x29, 0x82, 0x41, 0x26, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x74, 0x6c, 0x52,
	0x03, 0x74, 0x74, 0x6c, 0x1a, 0x81, 0x01, 0x0a, 0x0c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1d, 0x82, 0x41, 0x1a, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6e, 0x61,
	0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x09, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x2e,
	0x6e, 0x6f, 0x63, 0x73, 0x79, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_openconfig_interfaces_proto_rawDescOnce sync.Once
	file_openconfig_interfaces_proto_rawDescData = file_openconfig_interfaces_proto_rawDesc
)

func file_openconfig_interfaces_proto_rawDescGZIP() []byte {
	file_openconfig_interfaces_proto_rawDescOnce.Do(func() {
		file_openconfig_interfaces_proto_rawDescData = protoimpl.X.CompressGZIP(file_openconfig_interfaces_proto_rawDescData)
	})
	return file_openconfig_interfaces_proto_rawDescData
}

var file_openconfig_interfaces_proto_enumTypes = make([]protoimpl.EnumInfo, 22)
var file_openconfig_interfaces_proto_msgTypes = make([]protoimpl.MessageInfo, 265)
var file_openconfig_interfaces_proto_goTypes = []interface{}{
	(Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State_Status)(0),       // 0: openconfig.Interfaces.Interface.Ethernet.AuthenticatedSessions.AuthenticatedSession.State.Status
	(Interfaces_Interface_Ethernet_Config_DuplexMode)(0),                                             // 1: openconfig.Interfaces.Interface.Ethernet.Config.DuplexMode
	(Interfaces_Interface_Ethernet_Dot1X_Config_HostMode)(0),                                         // 2: openconfig.Interfaces.Interface.Ethernet.Dot1X.Config.HostMode
	(Interfaces_Interface_Ethernet_Dot1X_State_HostMode)(0),                                          // 3: openconfig.Interfaces.Interface.Ethernet.Dot1X.State.HostMode
	(Interfaces_Interface_Ethernet_State_DuplexMode)(0),                                              // 4: openconfig.Interfaces.Interface.Ethernet.State.DuplexMode
	(Interfaces_Interface_Ethernet_State_NegotiatedDuplexMode)(0),                                    // 5: openconfig.Interfaces.Interface.Ethernet.State.NegotiatedDuplexMode
	(Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp_Config_Mode)(0),                                   // 6: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.ProxyArp.Config.Mode
	(Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp_State_Mode)(0),                                    // 7: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.ProxyArp.State.Mode
	(Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_State_Status)(0),                         // 8: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Addresses.Address.State.Status
	(Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor_State_NeighborState)(0),                 // 9: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Neighbors.Neighbor.State.NeighborState
	(Interfaces_Interface_State_AdminStatus)(0),                                                      // 10: openconfig.Interfaces.Interface.State.AdminStatus
	(Interfaces_Interface_State_OperStatus)(0),                                                       // 11: openconfig.Interfaces.Interface.State.OperStatus
	(Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_Config_Mode)(0),                   // 12: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.ProxyArp.Config.Mode
	(Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_State_Mode)(0),                    // 13: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.ProxyArp.State.Mode
	(Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State_Status)(0),         // 14: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address.State.Status
	(Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State_NeighborState)(0), // 15: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Neighbors.Neighbor.State.NeighborState
	(Interfaces_Interface_Subinterfaces_Subinterface_State_AdminStatus)(0),                           // 16: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.State.AdminStatus
	(Interfaces_Interface_Subinterfaces_Subinterface_State_OperStatus)(0),                            // 17: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.State.OperStatus
	(Interfaces_Interface_Tunnel_Ipv4_ProxyArp_Config_Mode)(0),                                       // 18: openconfig.Interfaces.Interface.Tunnel.Ipv4.ProxyArp.Config.Mode
	(Interfaces_Interface_Tunnel_Ipv4_ProxyArp_State_Mode)(0),                                        // 19: openconfig.Interfaces.Interface.Tunnel.Ipv4.ProxyArp.State.Mode
	(Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State_Status)(0),                             // 20: openconfig.Interfaces.Interface.Tunnel.Ipv6.Addresses.Address.State.Status
	(Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State_NeighborState)(0),                     // 21: openconfig.Interfaces.Interface.Tunnel.Ipv6.Neighbors.Neighbor.State.NeighborState
	(*Interfaces)(nil),                                                                                                     // 22: openconfig.Interfaces
	(*Interfaces_Interface)(nil),                                                                                           // 23: openconfig.Interfaces.Interface
	(*Interfaces_InterfaceKey)(nil),                                                                                        // 24: openconfig.Interfaces.InterfaceKey
	(*Interfaces_Interface_Aggregation)(nil),                                                                               // 25: openconfig.Interfaces.Interface.Aggregation
	(*Interfaces_Interface_Config)(nil),                                                                                    // 26: openconfig.Interfaces.Interface.Config
	(*Interfaces_Interface_Ethernet)(nil),                                                                                  // 27: openconfig.Interfaces.Interface.Ethernet
	(*Interfaces_Interface_HoldTime)(nil),                                                                                  // 28: openconfig.Interfaces.Interface.HoldTime
	(*Interfaces_Interface_RoutedVlan)(nil),                                                                                // 29: openconfig.Interfaces.Interface.RoutedVlan
	(*Interfaces_Interface_Sonet)(nil),                                                                                     // 30: openconfig.Interfaces.Interface.Sonet
	(*Interfaces_Interface_State)(nil),                                                                                     // 31: openconfig.Interfaces.Interface.State
	(*Interfaces_Interface_Subinterfaces)(nil),                                                                             // 32: openconfig.Interfaces.Interface.Subinterfaces
	(*Interfaces_Interface_Tunnel)(nil),                                                                                    // 33: openconfig.Interfaces.Interface.Tunnel
	(*Interfaces_Interface_Aggregation_Config)(nil),                                                                        // 34: openconfig.Interfaces.Interface.Aggregation.Config
	(*Interfaces_Interface_Aggregation_State)(nil),                                                                         // 35: openconfig.Interfaces.Interface.Aggregation.State
	(*Interfaces_Interface_Aggregation_SwitchedVlan)(nil),                                                                  // 36: openconfig.Interfaces.Interface.Aggregation.SwitchedVlan
	(*Interfaces_Interface_Aggregation_SwitchedVlan_Config)(nil),                                                           // 37: openconfig.Interfaces.Interface.Aggregation.SwitchedVlan.Config
	(*Interfaces_Interface_Aggregation_SwitchedVlan_State)(nil),                                                            // 38: openconfig.Interfaces.Interface.Aggregation.SwitchedVlan.State
	(*Interfaces_Interface_Aggregation_SwitchedVlan_Config_TrunkVlansUnion)(nil),                                           // 39: openconfig.Interfaces.Interface.Aggregation.SwitchedVlan.Config.TrunkVlansUnion
	(*Interfaces_Interface_Aggregation_SwitchedVlan_State_TrunkVlansUnion)(nil),                                            // 40: openconfig.Interfaces.Interface.Aggregation.SwitchedVlan.State.TrunkVlansUnion
	(*Interfaces_Interface_Ethernet_AuthenticatedSessions)(nil),                                                            // 41: openconfig.Interfaces.Interface.Ethernet.AuthenticatedSessions
	(*Interfaces_Interface_Ethernet_Config)(nil),                                                                           // 42: openconfig.Interfaces.Interface.Ethernet.Config
	(*Interfaces_Interface_Ethernet_Dot1X)(nil),                                                                            // 43: openconfig.Interfaces.Interface.Ethernet.Dot1X
	(*Interfaces_Interface_Ethernet_Poe)(nil),                                                                              // 44: openconfig.Interfaces.Interface.Ethernet.Poe
	(*Interfaces_Interface_Ethernet_State)(nil),                                                                            // 45: openconfig.Interfaces.Interface.Ethernet.State
	(*Interfaces_Interface_Ethernet_SwitchedVlan)(nil),                                                                     // 46: openconfig.Interfaces.Interface.Ethernet.SwitchedVlan
	(*Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession)(nil),                                       // 47: openconfig.Interfaces.Interface.Ethernet.AuthenticatedSessions.AuthenticatedSession
	(*Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSessionKey)(nil),                                    // 48: openconfig.Interfaces.Interface.Ethernet.AuthenticatedSessions.AuthenticatedSessionKey
	(*Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State)(nil),                                 // 49: openconfig.Interfaces.Interface.Ethernet.AuthenticatedSessions.AuthenticatedSession.State
	(*Interfaces_Interface_Ethernet_Dot1X_Config)(nil),                                                                     // 50: openconfig.Interfaces.Interface.Ethernet.Dot1X.Config
	(*Interfaces_Interface_Ethernet_Dot1X_State)(nil),                                                                      // 51: openconfig.Interfaces.Interface.Ethernet.Dot1X.State
	(*Interfaces_Interface_Ethernet_Poe_Config)(nil),                                                                       // 52: openconfig.Interfaces.Interface.Ethernet.Poe.Config
	(*Interfaces_Interface_Ethernet_Poe_State)(nil),                                                                        // 53: openconfig.Interfaces.Interface.Ethernet.Poe.State
	(*Interfaces_Interface_Ethernet_State_Counters)(nil),                                                                   // 54: openconfig.Interfaces.Interface.Ethernet.State.Counters
	(*Interfaces_Interface_Ethernet_State_Counters_InDistribution)(nil),                                                    // 55: openconfig.Interfaces.Interface.Ethernet.State.Counters.InDistribution
	(*Interfaces_Interface_Ethernet_SwitchedVlan_Config)(nil),                                                              // 56: openconfig.Interfaces.Interface.Ethernet.SwitchedVlan.Config
	(*Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap)(nil),                                                        // 57: openconfig.Interfaces.Interface.Ethernet.SwitchedVlan.Dot1XVlanMap
	(*Interfaces_Interface_Ethernet_SwitchedVlan_State)(nil),                                                               // 58: openconfig.Interfaces.Interface.Ethernet.SwitchedVlan.State
	(*Interfaces_Interface_Ethernet_SwitchedVlan_Config_TrunkVlansUnion)(nil),                                              // 59: openconfig.Interfaces.Interface.Ethernet.SwitchedVlan.Config.TrunkVlansUnion
	(*Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName)(nil),                                               // 60: openconfig.Interfaces.Interface.Ethernet.SwitchedVlan.Dot1XVlanMap.VlanName
	(*Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanNameKey)(nil),                                            // 61: openconfig.Interfaces.Interface.Ethernet.SwitchedVlan.Dot1XVlanMap.VlanNameKey
	(*Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName_Config)(nil),                                        // 62: openconfig.Interfaces.Interface.Ethernet.SwitchedVlan.Dot1XVlanMap.VlanName.Config
	(*Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName_State)(nil),                                         // 63: openconfig.Interfaces.Interface.Ethernet.SwitchedVlan.Dot1XVlanMap.VlanName.State
	(*Interfaces_Interface_Ethernet_SwitchedVlan_State_TrunkVlansUnion)(nil),                                               // 64: openconfig.Interfaces.Interface.Ethernet.SwitchedVlan.State.TrunkVlansUnion
	(*Interfaces_Interface_HoldTime_Config)(nil),                                                                           // 65: openconfig.Interfaces.Interface.HoldTime.Config
	(*Interfaces_Interface_HoldTime_State)(nil),                                                                            // 66: openconfig.Interfaces.Interface.HoldTime.State
	(*Interfaces_Interface_RoutedVlan_Config)(nil),                                                                         // 67: openconfig.Interfaces.Interface.RoutedVlan.Config
	(*Interfaces_Interface_RoutedVlan_Ipv4)(nil),                                                                           // 68: openconfig.Interfaces.Interface.RoutedVlan.Ipv4
	(*Interfaces_Interface_RoutedVlan_Ipv6)(nil),                                                                           // 69: openconfig.Interfaces.Interface.RoutedVlan.Ipv6
	(*Interfaces_Interface_RoutedVlan_State)(nil),                                                                          // 70: openconfig.Interfaces.Interface.RoutedVlan.State
	(*Interfaces_Interface_RoutedVlan_Ipv4_Addresses)(nil),                                                                 // 71: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Addresses
	(*Interfaces_Interface_RoutedVlan_Ipv4_Config)(nil),                                                                    // 72: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Config
	(*Interfaces_Interface_RoutedVlan_Ipv4_Neighbors)(nil),                                                                 // 73: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Neighbors
	(*Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp)(nil),                                                                  // 74: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.ProxyArp
	(*Interfaces_Interface_RoutedVlan_Ipv4_State)(nil),                                                                     // 75: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.State
	(*Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered)(nil),                                                                // 76: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Unnumbered
	(*Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address)(nil),                                                         // 77: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Addresses.Address
	(*Interfaces_Interface_RoutedVlan_Ipv4_Addresses_AddressKey)(nil),                                                      // 78: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Addresses.AddressKey
	(*Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Config)(nil),                                                  // 79: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Addresses.Address.Config
	(*Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_State)(nil),                                                   // 80: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Addresses.Address.State
	(*Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp)(nil),                                                    // 81: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Addresses.Address.Vrrp
	(*Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup)(nil),                                          // 82: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Addresses.Address.Vrrp.VrrpGroup
	(*Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroupKey)(nil),                                       // 83: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Addresses.Address.Vrrp.VrrpGroupKey
	(*Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_Config)(nil),                                   // 84: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Addresses.Address.Vrrp.VrrpGroup.Config
	(*Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking)(nil),                        // 85: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Addresses.Address.Vrrp.VrrpGroup.InterfaceTracking
	(*Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_State)(nil),                                    // 86: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Addresses.Address.Vrrp.VrrpGroup.State
	(*Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_Config)(nil),                 // 87: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Addresses.Address.Vrrp.VrrpGroup.InterfaceTracking.Config
	(*Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_State)(nil),                  // 88: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Addresses.Address.Vrrp.VrrpGroup.InterfaceTracking.State
	(*Interfaces_Interface_RoutedVlan_Ipv4_Neighbors_Neighbor)(nil),                                                        // 89: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Neighbors.Neighbor
	(*Interfaces_Interface_RoutedVlan_Ipv4_Neighbors_NeighborKey)(nil),                                                     // 90: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Neighbors.NeighborKey
	(*Interfaces_Interface_RoutedVlan_Ipv4_Neighbors_Neighbor_Config)(nil),                                                 // 91: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Neighbors.Neighbor.Config
	(*Interfaces_Interface_RoutedVlan_Ipv4_Neighbors_Neighbor_State)(nil),                                                  // 92: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Neighbors.Neighbor.State
	(*Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp_Config)(nil),                                                           // 93: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.ProxyArp.Config
	(*Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp_State)(nil),                                                            // 94: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.ProxyArp.State
	(*Interfaces_Interface_RoutedVlan_Ipv4_State_Counters)(nil),                                                            // 95: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.State.Counters
	(*Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered_Config)(nil),                                                         // 96: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Unnumbered.Config
	(*Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef)(nil),                                                   // 97: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Unnumbered.InterfaceRef
	(*Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered_State)(nil),                                                          // 98: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Unnumbered.State
	(*Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_Config)(nil),                                            // 99: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Unnumbered.InterfaceRef.Config
	(*Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_State)(nil),                                             // 100: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Unnumbered.InterfaceRef.State
	(*Interfaces_Interface_RoutedVlan_Ipv6_Addresses)(nil),                                                                 // 101: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Addresses
	(*Interfaces_Interface_RoutedVlan_Ipv6_Config)(nil),                                                                    // 102: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Config
	(*Interfaces_Interface_RoutedVlan_Ipv6_Neighbors)(nil),                                                                 // 103: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Neighbors
	(*Interfaces_Interface_RoutedVlan_Ipv6_RouterAdvertisement)(nil),                                                       // 104: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.RouterAdvertisement
	(*Interfaces_Interface_RoutedVlan_Ipv6_State)(nil),                                                                     // 105: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.State
	(*Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered)(nil),                                                                // 106: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Unnumbered
	(*Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address)(nil),                                                         // 107: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Addresses.Address
	(*Interfaces_Interface_RoutedVlan_Ipv6_Addresses_AddressKey)(nil),                                                      // 108: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Addresses.AddressKey
	(*Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Config)(nil),                                                  // 109: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Addresses.Address.Config
	(*Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_State)(nil),                                                   // 110: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Addresses.Address.State
	(*Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp)(nil),                                                    // 111: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Addresses.Address.Vrrp
	(*Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup)(nil),                                          // 112: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Addresses.Address.Vrrp.VrrpGroup
	(*Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroupKey)(nil),                                       // 113: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Addresses.Address.Vrrp.VrrpGroupKey
	(*Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_Config)(nil),                                   // 114: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Addresses.Address.Vrrp.VrrpGroup.Config
	(*Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking)(nil),                        // 115: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Addresses.Address.Vrrp.VrrpGroup.InterfaceTracking
	(*Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_State)(nil),                                    // 116: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Addresses.Address.Vrrp.VrrpGroup.State
	(*Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_Config)(nil),                 // 117: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Addresses.Address.Vrrp.VrrpGroup.InterfaceTracking.Config
	(*Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_State)(nil),                  // 118: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Addresses.Address.Vrrp.VrrpGroup.InterfaceTracking.State
	(*Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor)(nil),                                                        // 119: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Neighbors.Neighbor
	(*Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_NeighborKey)(nil),                                                     // 120: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Neighbors.NeighborKey
	(*Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor_Config)(nil),                                                 // 121: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Neighbors.Neighbor.Config
	(*Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor_State)(nil),                                                  // 122: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Neighbors.Neighbor.State
	(*Interfaces_Interface_RoutedVlan_Ipv6_RouterAdvertisement_Config)(nil),                                                // 123: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.RouterAdvertisement.Config
	(*Interfaces_Interface_RoutedVlan_Ipv6_RouterAdvertisement_State)(nil),                                                 // 124: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.RouterAdvertisement.State
	(*Interfaces_Interface_RoutedVlan_Ipv6_State_Counters)(nil),                                                            // 125: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.State.Counters
	(*Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered_Config)(nil),                                                         // 126: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Unnumbered.Config
	(*Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef)(nil),                                                   // 127: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Unnumbered.InterfaceRef
	(*Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered_State)(nil),                                                          // 128: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Unnumbered.State
	(*Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_Config)(nil),                                            // 129: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Unnumbered.InterfaceRef.Config
	(*Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_State)(nil),                                             // 130: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Unnumbered.InterfaceRef.State
	(*Interfaces_Interface_State_Counters)(nil),                                                                            // 131: openconfig.Interfaces.Interface.State.Counters
	(*Interfaces_Interface_Subinterfaces_Subinterface)(nil),                                                                // 132: openconfig.Interfaces.Interface.Subinterfaces.Subinterface
	(*Interfaces_Interface_Subinterfaces_SubinterfaceKey)(nil),                                                             // 133: openconfig.Interfaces.Interface.Subinterfaces.SubinterfaceKey
	(*Interfaces_Interface_Subinterfaces_Subinterface_Config)(nil),                                                         // 134: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Config
	(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4)(nil),                                                           // 135: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4
	(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6)(nil),                                                           // 136: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6
	(*Interfaces_Interface_Subinterfaces_Subinterface_State)(nil),                                                          // 137: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.State
	(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan)(nil),                                                           // 138: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan
	(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses)(nil),                                                 // 139: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses
	(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Config)(nil),                                                    // 140: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Config
	(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors)(nil),                                                 // 141: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Neighbors
	(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp)(nil),                                                  // 142: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.ProxyArp
	(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State)(nil),                                                     // 143: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.State
	(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered)(nil),                                                // 144: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Unnumbered
	(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address)(nil),                                         // 145: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.Address
	(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_AddressKey)(nil),                                      // 146: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.AddressKey
	(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Config)(nil),                                  // 147: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.Address.Config
	(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_State)(nil),                                   // 148: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.Address.State
	(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp)(nil),                                    // 149: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.Address.Vrrp
	(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup)(nil),                          // 150: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.Address.Vrrp.VrrpGroup
	(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroupKey)(nil),                       // 151: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.Address.Vrrp.VrrpGroupKey
	(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_Config)(nil),                   // 152: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.Address.Vrrp.VrrpGroup.Config
	(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking)(nil),        // 153: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.Address.Vrrp.VrrpGroup.InterfaceTracking
	(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_State)(nil),                    // 154: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.Address.Vrrp.VrrpGroup.State
	(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_Config)(nil), // 155: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.Address.Vrrp.VrrpGroup.InterfaceTracking.Config
	(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_State)(nil),  // 156: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.Address.Vrrp.VrrpGroup.InterfaceTracking.State
	(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor)(nil),                                        // 157: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Neighbors.Neighbor
	(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_NeighborKey)(nil),                                     // 158: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Neighbors.NeighborKey
	(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor_Config)(nil),                                 // 159: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Neighbors.Neighbor.Config
	(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor_State)(nil),                                  // 160: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Neighbors.Neighbor.State
	(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_Config)(nil),                                           // 161: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.ProxyArp.Config
	(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_State)(nil),                                            // 162: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.ProxyArp.State
	(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State_Counters)(nil),                                            // 163: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.State.Counters
	(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered_Config)(nil),                                         // 164: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Unnumbered.Config
	(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered_InterfaceRef)(nil),                                   // 165: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Unnumbered.InterfaceRef
	(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered_State)(nil),                                          // 166: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Unnumbered.State
	(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered_InterfaceRef_Config)(nil),                            // 167: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Unnumbered.InterfaceRef.Config
	(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered_InterfaceRef_State)(nil),                             // 168: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Unnumbered.InterfaceRef.State
	(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses)(nil),                                                 // 169: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses
	(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Autoconf)(nil),                                                  // 170: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Autoconf
	(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Config)(nil),                                                    // 171: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Config
	(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors)(nil),                                                 // 172: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Neighbors
	(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement)(nil),                                       // 173: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.RouterAdvertisement
	(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State)(nil),                                                     // 174: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.State
	(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered)(nil),                                                // 175: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Unnumbered
	(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address)(nil),                                         // 176: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address
	(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_AddressKey)(nil),                                      // 177: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.AddressKey
	(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Config)(nil),                                  // 178: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address.Config
	(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State)(nil),                                   // 179: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address.State
	(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp)(nil),                                    // 180: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address.Vrrp
	(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup)(nil),                          // 181: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address.Vrrp.VrrpGroup
	(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroupKey)(nil),                       // 182: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address.Vrrp.VrrpGroupKey
	(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_Config)(nil),                   // 183: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address.Vrrp.VrrpGroup.Config
	(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking)(nil),        // 184: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address.Vrrp.VrrpGroup.InterfaceTracking
	(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_State)(nil),                    // 185: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address.Vrrp.VrrpGroup.State
	(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_Config)(nil), // 186: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address.Vrrp.VrrpGroup.InterfaceTracking.Config
	(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_State)(nil),  // 187: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address.Vrrp.VrrpGroup.InterfaceTracking.State
	(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Autoconf_Config)(nil),                                           // 188: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Autoconf.Config
	(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Autoconf_State)(nil),                                            // 189: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Autoconf.State
	(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor)(nil),                                        // 190: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Neighbors.Neighbor
	(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_NeighborKey)(nil),                                     // 191: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Neighbors.NeighborKey
	(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_Config)(nil),                                 // 192: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Neighbors.Neighbor.Config
	(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State)(nil),                                  // 193: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Neighbors.Neighbor.State
	(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement_Config)(nil),                                // 194: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.RouterAdvertisement.Config
	(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement_State)(nil),                                 // 195: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.RouterAdvertisement.State
	(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State_Counters)(nil),                                            // 196: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.State.Counters
	(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered_Config)(nil),                                         // 197: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Unnumbered.Config
	(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered_InterfaceRef)(nil),                                   // 198: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Unnumbered.InterfaceRef
	(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered_State)(nil),                                          // 199: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Unnumbered.State
	(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered_InterfaceRef_Config)(nil),                            // 200: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Unnumbered.InterfaceRef.Config
	(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered_InterfaceRef_State)(nil),                             // 201: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Unnumbered.InterfaceRef.State
	(*Interfaces_Interface_Subinterfaces_Subinterface_State_Counters)(nil),                                                 // 202: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.State.Counters
	(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Config)(nil),                                                    // 203: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Config
	(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping)(nil),                                             // 204: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.EgressMapping
	(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping)(nil),                                            // 205: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.IngressMapping
	(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match)(nil),                                                     // 206: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match
	(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_State)(nil),                                                     // 207: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.State
	(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping_Config)(nil),                                      // 208: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.EgressMapping.Config
	(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping_State)(nil),                                       // 209: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.EgressMapping.State
	(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping_Config)(nil),                                     // 210: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.IngressMapping.Config
	(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping_State)(nil),                                      // 211: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.IngressMapping.State
	(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged)(nil),                                        // 212: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTagged
	(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList)(nil),                               // 213: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTaggedInnerList
	(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange)(nil),                         // 214: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTaggedInnerOuterRange
	(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange)(nil),                              // 215: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTaggedInnerRange
	(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList)(nil),                               // 216: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTaggedOuterList
	(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange)(nil),                              // 217: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTaggedOuterRange
	(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged)(nil),                                        // 218: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.SingleTagged
	(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList)(nil),                                    // 219: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.SingleTaggedList
	(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange)(nil),                                   // 220: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.SingleTaggedRange
	(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged_Config)(nil),                                 // 221: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTagged.Config
	(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged_State)(nil),                                  // 222: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTagged.State
	(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList_Config)(nil),                        // 223: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTaggedInnerList.Config
	(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList_State)(nil),                         // 224: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTaggedInnerList.State
	(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_Config)(nil),                  // 225: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTaggedInnerOuterRange.Config
	(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_State)(nil),                   // 226: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTaggedInnerOuterRange.State
	(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange_Config)(nil),                       // 227: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTaggedInnerRange.Config
	(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange_State)(nil),                        // 228: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTaggedInnerRange.State
	(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList_Config)(nil),                        // 229: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTaggedOuterList.Config
	(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList_State)(nil),                         // 230: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTaggedOuterList.State
	(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange_Config)(nil),                       // 231: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTaggedOuterRange.Config
	(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange_State)(nil),                        // 232: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTaggedOuterRange.State
	(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged_Config)(nil),                                 // 233: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.SingleTagged.Config
	(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged_State)(nil),                                  // 234: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.SingleTagged.State
	(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList_Config)(nil),                             // 235: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.SingleTaggedList.Config
	(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList_State)(nil),                              // 236: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.SingleTaggedList.State
	(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange_Config)(nil),                            // 237: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.SingleTaggedRange.Config
	(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange_State)(nil),                             // 238: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.SingleTaggedRange.State
	(*Interfaces_Interface_Tunnel_Config)(nil),                                                                             // 239: openconfig.Interfaces.Interface.Tunnel.Config
	(*Interfaces_Interface_Tunnel_Ipv4)(nil),                                                                               // 240: openconfig.Interfaces.Interface.Tunnel.Ipv4
	(*Interfaces_Interface_Tunnel_Ipv6)(nil),                                                                               // 241: openconfig.Interfaces.Interface.Tunnel.Ipv6
	(*Interfaces_Interface_Tunnel_State)(nil),                                                                              // 242: openconfig.Interfaces.Interface.Tunnel.State
	(*Interfaces_Interface_Tunnel_Ipv4_Addresses)(nil),                                                                     // 243: openconfig.Interfaces.Interface.Tunnel.Ipv4.Addresses
	(*Interfaces_Interface_Tunnel_Ipv4_Config)(nil),                                                                        // 244: openconfig.Interfaces.Interface.Tunnel.Ipv4.Config
	(*Interfaces_Interface_Tunnel_Ipv4_Neighbors)(nil),                                                                     // 245: openconfig.Interfaces.Interface.Tunnel.Ipv4.Neighbors
	(*Interfaces_Interface_Tunnel_Ipv4_ProxyArp)(nil),                                                                      // 246: openconfig.Interfaces.Interface.Tunnel.Ipv4.ProxyArp
	(*Interfaces_Interface_Tunnel_Ipv4_State)(nil),                                                                         // 247: openconfig.Interfaces.Interface.Tunnel.Ipv4.State
	(*Interfaces_Interface_Tunnel_Ipv4_Unnumbered)(nil),                                                                    // 248: openconfig.Interfaces.Interface.Tunnel.Ipv4.Unnumbered
	(*Interfaces_Interface_Tunnel_Ipv4_Addresses_Address)(nil),                                                             // 249: openconfig.Interfaces.Interface.Tunnel.Ipv4.Addresses.Address
	(*Interfaces_Interface_Tunnel_Ipv4_Addresses_AddressKey)(nil),                                                          // 250: openconfig.Interfaces.Interface.Tunnel.Ipv4.Addresses.AddressKey
	(*Interfaces_Interface_Tunnel_Ipv4_Addresses_Address_Config)(nil),                                                      // 251: openconfig.Interfaces.Interface.Tunnel.Ipv4.Addresses.Address.Config
	(*Interfaces_Interface_Tunnel_Ipv4_Addresses_Address_State)(nil),                                                       // 252: openconfig.Interfaces.Interface.Tunnel.Ipv4.Addresses.Address.State
	(*Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor)(nil),                                                            // 253: openconfig.Interfaces.Interface.Tunnel.Ipv4.Neighbors.Neighbor
	(*Interfaces_Interface_Tunnel_Ipv4_Neighbors_NeighborKey)(nil),                                                         // 254: openconfig.Interfaces.Interface.Tunnel.Ipv4.Neighbors.NeighborKey
	(*Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor_Config)(nil),                                                     // 255: openconfig.Interfaces.Interface.Tunnel.Ipv4.Neighbors.Neighbor.Config
	(*Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor_State)(nil),                                                      // 256: openconfig.Interfaces.Interface.Tunnel.Ipv4.Neighbors.Neighbor.State
	(*Interfaces_Interface_Tunnel_Ipv4_ProxyArp_Config)(nil),                                                               // 257: openconfig.Interfaces.Interface.Tunnel.Ipv4.ProxyArp.Config
	(*Interfaces_Interface_Tunnel_Ipv4_ProxyArp_State)(nil),                                                                // 258: openconfig.Interfaces.Interface.Tunnel.Ipv4.ProxyArp.State
	(*Interfaces_Interface_Tunnel_Ipv4_State_Counters)(nil),                                                                // 259: openconfig.Interfaces.Interface.Tunnel.Ipv4.State.Counters
	(*Interfaces_Interface_Tunnel_Ipv4_Unnumbered_Config)(nil),                                                             // 260: openconfig.Interfaces.Interface.Tunnel.Ipv4.Unnumbered.Config
	(*Interfaces_Interface_Tunnel_Ipv4_Unnumbered_InterfaceRef)(nil),                                                       // 261: openconfig.Interfaces.Interface.Tunnel.Ipv4.Unnumbered.InterfaceRef
	(*Interfaces_Interface_Tunnel_Ipv4_Unnumbered_State)(nil),                                                              // 262: openconfig.Interfaces.Interface.Tunnel.Ipv4.Unnumbered.State
	(*Interfaces_Interface_Tunnel_Ipv4_Unnumbered_InterfaceRef_Config)(nil),                                                // 263: openconfig.Interfaces.Interface.Tunnel.Ipv4.Unnumbered.InterfaceRef.Config
	(*Interfaces_Interface_Tunnel_Ipv4_Unnumbered_InterfaceRef_State)(nil),                                                 // 264: openconfig.Interfaces.Interface.Tunnel.Ipv4.Unnumbered.InterfaceRef.State
	(*Interfaces_Interface_Tunnel_Ipv6_Addresses)(nil),                                                                     // 265: openconfig.Interfaces.Interface.Tunnel.Ipv6.Addresses
	(*Interfaces_Interface_Tunnel_Ipv6_Config)(nil),                                                                        // 266: openconfig.Interfaces.Interface.Tunnel.Ipv6.Config
	(*Interfaces_Interface_Tunnel_Ipv6_Neighbors)(nil),                                                                     // 267: openconfig.Interfaces.Interface.Tunnel.Ipv6.Neighbors
	(*Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement)(nil),                                                           // 268: openconfig.Interfaces.Interface.Tunnel.Ipv6.RouterAdvertisement
	(*Interfaces_Interface_Tunnel_Ipv6_State)(nil),                                                                         // 269: openconfig.Interfaces.Interface.Tunnel.Ipv6.State
	(*Interfaces_Interface_Tunnel_Ipv6_Unnumbered)(nil),                                                                    // 270: openconfig.Interfaces.Interface.Tunnel.Ipv6.Unnumbered
	(*Interfaces_Interface_Tunnel_Ipv6_Addresses_Address)(nil),                                                             // 271: openconfig.Interfaces.Interface.Tunnel.Ipv6.Addresses.Address
	(*Interfaces_Interface_Tunnel_Ipv6_Addresses_AddressKey)(nil),                                                          // 272: openconfig.Interfaces.Interface.Tunnel.Ipv6.Addresses.AddressKey
	(*Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_Config)(nil),                                                      // 273: openconfig.Interfaces.Interface.Tunnel.Ipv6.Addresses.Address.Config
	(*Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State)(nil),                                                       // 274: openconfig.Interfaces.Interface.Tunnel.Ipv6.Addresses.Address.State
	(*Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor)(nil),                                                            // 275: openconfig.Interfaces.Interface.Tunnel.Ipv6.Neighbors.Neighbor
	(*Interfaces_Interface_Tunnel_Ipv6_Neighbors_NeighborKey)(nil),                                                         // 276: openconfig.Interfaces.Interface.Tunnel.Ipv6.Neighbors.NeighborKey
	(*Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_Config)(nil),                                                     // 277: openconfig.Interfaces.Interface.Tunnel.Ipv6.Neighbors.Neighbor.Config
	(*Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State)(nil),                                                      // 278: openconfig.Interfaces.Interface.Tunnel.Ipv6.Neighbors.Neighbor.State
	(*Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement_Config)(nil),                                                    // 279: openconfig.Interfaces.Interface.Tunnel.Ipv6.RouterAdvertisement.Config
	(*Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement_State)(nil),                                                     // 280: openconfig.Interfaces.Interface.Tunnel.Ipv6.RouterAdvertisement.State
	(*Interfaces_Interface_Tunnel_Ipv6_State_Counters)(nil),                                                                // 281: openconfig.Interfaces.Interface.Tunnel.Ipv6.State.Counters
	(*Interfaces_Interface_Tunnel_Ipv6_Unnumbered_Config)(nil),                                                             // 282: openconfig.Interfaces.Interface.Tunnel.Ipv6.Unnumbered.Config
	(*Interfaces_Interface_Tunnel_Ipv6_Unnumbered_InterfaceRef)(nil),                                                       // 283: openconfig.Interfaces.Interface.Tunnel.Ipv6.Unnumbered.InterfaceRef
	(*Interfaces_Interface_Tunnel_Ipv6_Unnumbered_State)(nil),                                                              // 284: openconfig.Interfaces.Interface.Tunnel.Ipv6.Unnumbered.State
	(*Interfaces_Interface_Tunnel_Ipv6_Unnumbered_InterfaceRef_Config)(nil),                                                // 285: openconfig.Interfaces.Interface.Tunnel.Ipv6.Unnumbered.InterfaceRef.Config
	(*Interfaces_Interface_Tunnel_Ipv6_Unnumbered_InterfaceRef_State)(nil),                                                 // 286: openconfig.Interfaces.Interface.Tunnel.Ipv6.Unnumbered.InterfaceRef.State
	(*ywrapper.StringValue)(nil),                                                                                           // 287: ywrapper.StringValue
	(*ywrapper.BoolValue)(nil),                                                                                             // 288: ywrapper.BoolValue
	(*ywrapper.UintValue)(nil),                                                                                             // 289: ywrapper.UintValue
	(OpenconfigVlanTypesTPIDTYPES)(0),                                                                                      // 290: openconfig.OpenconfigVlanTypesTPIDTYPES
	(IETFInterfacesInterfaceType)(0),                                                                                       // 291: openconfig.IETFInterfacesInterfaceType
	(OpenconfigIfAggregateAggregationType)(0),                                                                              // 292: openconfig.OpenconfigIfAggregateAggregationType
	(OpenconfigVlanVlanModeType)(0),                                                                                        // 293: openconfig.OpenconfigVlanVlanModeType
	(OpenconfigIfEthernetETHERNETSPEED)(0),                                                                                 // 294: openconfig.OpenconfigIfEthernetETHERNETSPEED
	(*ywrapper.Decimal64Value)(nil),                                                                                        // 295: ywrapper.Decimal64Value
	(OpenconfigIfIpIpAddressOrigin)(0),                                                                                     // 296: openconfig.OpenconfigIfIpIpAddressOrigin
	(OpenconfigIfIpNeighborOrigin)(0),                                                                                      // 297: openconfig.OpenconfigIfIpNeighborOrigin
	(OpenconfigVlanVlanStackAction)(0),                                                                                     // 298: openconfig.OpenconfigVlanVlanStackAction
}
var file_openconfig_interfaces_proto_depIdxs = []int32{
	24,  // 0: openconfig.Interfaces.interface:type_name -> openconfig.Interfaces.InterfaceKey
	25,  // 1: openconfig.Interfaces.Interface.aggregation:type_name -> openconfig.Interfaces.Interface.Aggregation
	26,  // 2: openconfig.Interfaces.Interface.config:type_name -> openconfig.Interfaces.Interface.Config
	27,  // 3: openconfig.Interfaces.Interface.ethernet:type_name -> openconfig.Interfaces.Interface.Ethernet
	28,  // 4: openconfig.Interfaces.Interface.hold_time:type_name -> openconfig.Interfaces.Interface.HoldTime
	29,  // 5: openconfig.Interfaces.Interface.routed_vlan:type_name -> openconfig.Interfaces.Interface.RoutedVlan
	30,  // 6: openconfig.Interfaces.Interface.sonet:type_name -> openconfig.Interfaces.Interface.Sonet
	31,  // 7: openconfig.Interfaces.Interface.state:type_name -> openconfig.Interfaces.Interface.State
	32,  // 8: openconfig.Interfaces.Interface.subinterfaces:type_name -> openconfig.Interfaces.Interface.Subinterfaces
	33,  // 9: openconfig.Interfaces.Interface.tunnel:type_name -> openconfig.Interfaces.Interface.Tunnel
	23,  // 10: openconfig.Interfaces.InterfaceKey.interface:type_name -> openconfig.Interfaces.Interface
	34,  // 11: openconfig.Interfaces.Interface.Aggregation.config:type_name -> openconfig.Interfaces.Interface.Aggregation.Config
	35,  // 12: openconfig.Interfaces.Interface.Aggregation.state:type_name -> openconfig.Interfaces.Interface.Aggregation.State
	36,  // 13: openconfig.Interfaces.Interface.Aggregation.switched_vlan:type_name -> openconfig.Interfaces.Interface.Aggregation.SwitchedVlan
	287, // 14: openconfig.Interfaces.Interface.Config.description:type_name -> ywrapper.StringValue
	288, // 15: openconfig.Interfaces.Interface.Config.enabled:type_name -> ywrapper.BoolValue
	288, // 16: openconfig.Interfaces.Interface.Config.loopback_mode:type_name -> ywrapper.BoolValue
	289, // 17: openconfig.Interfaces.Interface.Config.mtu:type_name -> ywrapper.UintValue
	287, // 18: openconfig.Interfaces.Interface.Config.name:type_name -> ywrapper.StringValue
	290, // 19: openconfig.Interfaces.Interface.Config.tpid:type_name -> openconfig.OpenconfigVlanTypesTPIDTYPES
	291, // 20: openconfig.Interfaces.Interface.Config.type:type_name -> openconfig.IETFInterfacesInterfaceType
	41,  // 21: openconfig.Interfaces.Interface.Ethernet.authenticated_sessions:type_name -> openconfig.Interfaces.Interface.Ethernet.AuthenticatedSessions
	42,  // 22: openconfig.Interfaces.Interface.Ethernet.config:type_name -> openconfig.Interfaces.Interface.Ethernet.Config
	43,  // 23: openconfig.Interfaces.Interface.Ethernet.dot1x:type_name -> openconfig.Interfaces.Interface.Ethernet.Dot1X
	44,  // 24: openconfig.Interfaces.Interface.Ethernet.poe:type_name -> openconfig.Interfaces.Interface.Ethernet.Poe
	45,  // 25: openconfig.Interfaces.Interface.Ethernet.state:type_name -> openconfig.Interfaces.Interface.Ethernet.State
	46,  // 26: openconfig.Interfaces.Interface.Ethernet.switched_vlan:type_name -> openconfig.Interfaces.Interface.Ethernet.SwitchedVlan
	65,  // 27: openconfig.Interfaces.Interface.HoldTime.config:type_name -> openconfig.Interfaces.Interface.HoldTime.Config
	66,  // 28: openconfig.Interfaces.Interface.HoldTime.state:type_name -> openconfig.Interfaces.Interface.HoldTime.State
	67,  // 29: openconfig.Interfaces.Interface.RoutedVlan.config:type_name -> openconfig.Interfaces.Interface.RoutedVlan.Config
	68,  // 30: openconfig.Interfaces.Interface.RoutedVlan.ipv4:type_name -> openconfig.Interfaces.Interface.RoutedVlan.Ipv4
	69,  // 31: openconfig.Interfaces.Interface.RoutedVlan.ipv6:type_name -> openconfig.Interfaces.Interface.RoutedVlan.Ipv6
	70,  // 32: openconfig.Interfaces.Interface.RoutedVlan.state:type_name -> openconfig.Interfaces.Interface.RoutedVlan.State
	10,  // 33: openconfig.Interfaces.Interface.State.admin_status:type_name -> openconfig.Interfaces.Interface.State.AdminStatus
	131, // 34: openconfig.Interfaces.Interface.State.counters:type_name -> openconfig.Interfaces.Interface.State.Counters
	287, // 35: openconfig.Interfaces.Interface.State.description:type_name -> ywrapper.StringValue
	288, // 36: openconfig.Interfaces.Interface.State.enabled:type_name -> ywrapper.BoolValue
	287, // 37: openconfig.Interfaces.Interface.State.hardware_port:type_name -> ywrapper.StringValue
	289, // 38: openconfig.Interfaces.Interface.State.ifindex:type_name -> ywrapper.UintValue
	289, // 39: openconfig.Interfaces.Interface.State.last_change:type_name -> ywrapper.UintValue
	288, // 40: openconfig.Interfaces.Interface.State.logical:type_name -> ywrapper.BoolValue
	288, // 41: openconfig.Interfaces.Interface.State.loopback_mode:type_name -> ywrapper.BoolValue
	289, // 42: openconfig.Interfaces.Interface.State.mtu:type_name -> ywrapper.UintValue
	287, // 43: openconfig.Interfaces.Interface.State.name:type_name -> ywrapper.StringValue
	11,  // 44: openconfig.Interfaces.Interface.State.oper_status:type_name -> openconfig.Interfaces.Interface.State.OperStatus
	289, // 45: openconfig.Interfaces.Interface.State.physical_channel:type_name -> ywrapper.UintValue
	290, // 46: openconfig.Interfaces.Interface.State.tpid:type_name -> openconfig.OpenconfigVlanTypesTPIDTYPES
	287, // 47: openconfig.Interfaces.Interface.State.transceiver:type_name -> ywrapper.StringValue
	291, // 48: openconfig.Interfaces.Interface.State.type:type_name -> openconfig.IETFInterfacesInterfaceType
	133, // 49: openconfig.Interfaces.Interface.Subinterfaces.subinterface:type_name -> openconfig.Interfaces.Interface.Subinterfaces.SubinterfaceKey
	239, // 50: openconfig.Interfaces.Interface.Tunnel.config:type_name -> openconfig.Interfaces.Interface.Tunnel.Config
	240, // 51: openconfig.Interfaces.Interface.Tunnel.ipv4:type_name -> openconfig.Interfaces.Interface.Tunnel.Ipv4
	241, // 52: openconfig.Interfaces.Interface.Tunnel.ipv6:type_name -> openconfig.Interfaces.Interface.Tunnel.Ipv6
	242, // 53: openconfig.Interfaces.Interface.Tunnel.state:type_name -> openconfig.Interfaces.Interface.Tunnel.State
	292, // 54: openconfig.Interfaces.Interface.Aggregation.Config.lag_type:type_name -> openconfig.OpenconfigIfAggregateAggregationType
	289, // 55: openconfig.Interfaces.Interface.Aggregation.Config.min_links:type_name -> ywrapper.UintValue
	289, // 56: openconfig.Interfaces.Interface.Aggregation.State.lag_speed:type_name -> ywrapper.UintValue
	292, // 57: openconfig.Interfaces.Interface.Aggregation.State.lag_type:type_name -> openconfig.OpenconfigIfAggregateAggregationType
	287, // 58: openconfig.Interfaces.Interface.Aggregation.State.member:type_name -> ywrapper.StringValue
	289, // 59: openconfig.Interfaces.Interface.Aggregation.State.min_links:type_name -> ywrapper.UintValue
	37,  // 60: openconfig.Interfaces.Interface.Aggregation.SwitchedVlan.config:type_name -> openconfig.Interfaces.Interface.Aggregation.SwitchedVlan.Config
	38,  // 61: openconfig.Interfaces.Interface.Aggregation.SwitchedVlan.state:type_name -> openconfig.Interfaces.Interface.Aggregation.SwitchedVlan.State
	289, // 62: openconfig.Interfaces.Interface.Aggregation.SwitchedVlan.Config.access_vlan:type_name -> ywrapper.UintValue
	293, // 63: openconfig.Interfaces.Interface.Aggregation.SwitchedVlan.Config.interface_mode:type_name -> openconfig.OpenconfigVlanVlanModeType
	289, // 64: openconfig.Interfaces.Interface.Aggregation.SwitchedVlan.Config.native_vlan:type_name -> ywrapper.UintValue
	39,  // 65: openconfig.Interfaces.Interface.Aggregation.SwitchedVlan.Config.trunk_vlans:type_name -> openconfig.Interfaces.Interface.Aggregation.SwitchedVlan.Config.TrunkVlansUnion
	289, // 66: openconfig.Interfaces.Interface.Aggregation.SwitchedVlan.State.access_vlan:type_name -> ywrapper.UintValue
	293, // 67: openconfig.Interfaces.Interface.Aggregation.SwitchedVlan.State.interface_mode:type_name -> openconfig.OpenconfigVlanVlanModeType
	289, // 68: openconfig.Interfaces.Interface.Aggregation.SwitchedVlan.State.native_vlan:type_name -> ywrapper.UintValue
	40,  // 69: openconfig.Interfaces.Interface.Aggregation.SwitchedVlan.State.trunk_vlans:type_name -> openconfig.Interfaces.Interface.Aggregation.SwitchedVlan.State.TrunkVlansUnion
	48,  // 70: openconfig.Interfaces.Interface.Ethernet.AuthenticatedSessions.authenticated_session:type_name -> openconfig.Interfaces.Interface.Ethernet.AuthenticatedSessions.AuthenticatedSessionKey
	287, // 71: openconfig.Interfaces.Interface.Ethernet.Config.aggregate_id:type_name -> ywrapper.StringValue
	288, // 72: openconfig.Interfaces.Interface.Ethernet.Config.auto_negotiate:type_name -> ywrapper.BoolValue
	1,   // 73: openconfig.Interfaces.Interface.Ethernet.Config.duplex_mode:type_name -> openconfig.Interfaces.Interface.Ethernet.Config.DuplexMode
	288, // 74: openconfig.Interfaces.Interface.Ethernet.Config.enable_flow_control:type_name -> ywrapper.BoolValue
	287, // 75: openconfig.Interfaces.Interface.Ethernet.Config.mac_address:type_name -> ywrapper.StringValue
	294, // 76: openconfig.Interfaces.Interface.Ethernet.Config.port_speed:type_name -> openconfig.OpenconfigIfEthernetETHERNETSPEED
	50,  // 77: openconfig.Interfaces.Interface.Ethernet.Dot1X.config:type_name -> openconfig.Interfaces.Interface.Ethernet.Dot1X.Config
	51,  // 78: openconfig.Interfaces.Interface.Ethernet.Dot1X.state:type_name -> openconfig.Interfaces.Interface.Ethernet.Dot1X.State
	52,  // 79: openconfig.Interfaces.Interface.Ethernet.Poe.config:type_name -> openconfig.Interfaces.Interface.Ethernet.Poe.Config
	53,  // 80: openconfig.Interfaces.Interface.Ethernet.Poe.state:type_name -> openconfig.Interfaces.Interface.Ethernet.Poe.State
	287, // 81: openconfig.Interfaces.Interface.Ethernet.State.aggregate_id:type_name -> ywrapper.StringValue
	288, // 82: openconfig.Interfaces.Interface.Ethernet.State.auto_negotiate:type_name -> ywrapper.BoolValue
	54,  // 83: openconfig.Interfaces.Interface.Ethernet.State.counters:type_name -> openconfig.Interfaces.Interface.Ethernet.State.Counters
	4,   // 84: openconfig.Interfaces.Interface.Ethernet.State.duplex_mode:type_name -> openconfig.Interfaces.Interface.Ethernet.State.DuplexMode
	288, // 85: openconfig.Interfaces.Interface.Ethernet.State.enable_flow_control:type_name -> ywrapper.BoolValue
	287, // 86: openconfig.Interfaces.Interface.Ethernet.State.hw_mac_address:type_name -> ywrapper.StringValue
	287, // 87: openconfig.Interfaces.Interface.Ethernet.State.mac_address:type_name -> ywrapper.StringValue
	5,   // 88: openconfig.Interfaces.Interface.Ethernet.State.negotiated_duplex_mode:type_name -> openconfig.Interfaces.Interface.Ethernet.State.NegotiatedDuplexMode
	294, // 89: openconfig.Interfaces.Interface.Ethernet.State.negotiated_port_speed:type_name -> openconfig.OpenconfigIfEthernetETHERNETSPEED
	294, // 90: openconfig.Interfaces.Interface.Ethernet.State.port_speed:type_name -> openconfig.OpenconfigIfEthernetETHERNETSPEED
	56,  // 91: openconfig.Interfaces.Interface.Ethernet.SwitchedVlan.config:type_name -> openconfig.Interfaces.Interface.Ethernet.SwitchedVlan.Config
	57,  // 92: openconfig.Interfaces.Interface.Ethernet.SwitchedVlan.dot1x_vlan_map:type_name -> openconfig.Interfaces.Interface.Ethernet.SwitchedVlan.Dot1XVlanMap
	58,  // 93: openconfig.Interfaces.Interface.Ethernet.SwitchedVlan.state:type_name -> openconfig.Interfaces.Interface.Ethernet.SwitchedVlan.State
	49,  // 94: openconfig.Interfaces.Interface.Ethernet.AuthenticatedSessions.AuthenticatedSession.state:type_name -> openconfig.Interfaces.Interface.Ethernet.AuthenticatedSessions.AuthenticatedSession.State
	47,  // 95: openconfig.Interfaces.Interface.Ethernet.AuthenticatedSessions.AuthenticatedSessionKey.authenticated_session:type_name -> openconfig.Interfaces.Interface.Ethernet.AuthenticatedSessions.AuthenticatedSession
	287, // 96: openconfig.Interfaces.Interface.Ethernet.AuthenticatedSessions.AuthenticatedSession.State.mac:type_name -> ywrapper.StringValue
	287, // 97: openconfig.Interfaces.Interface.Ethernet.AuthenticatedSessions.AuthenticatedSession.State.session_id:type_name -> ywrapper.StringValue
	0,   // 98: openconfig.Interfaces.Interface.Ethernet.AuthenticatedSessions.AuthenticatedSession.State.status:type_name -> openconfig.Interfaces.Interface.Ethernet.AuthenticatedSessions.AuthenticatedSession.State.Status
	288, // 99: openconfig.Interfaces.Interface.Ethernet.Dot1X.Config.authenticate_port:type_name -> ywrapper.BoolValue
	2,   // 100: openconfig.Interfaces.Interface.Ethernet.Dot1X.Config.host_mode:type_name -> openconfig.Interfaces.Interface.Ethernet.Dot1X.Config.HostMode
	289, // 101: openconfig.Interfaces.Interface.Ethernet.Dot1X.Config.max_requests:type_name -> ywrapper.UintValue
	289, // 102: openconfig.Interfaces.Interface.Ethernet.Dot1X.Config.reauthenticate_interval:type_name -> ywrapper.UintValue
	289, // 103: openconfig.Interfaces.Interface.Ethernet.Dot1X.Config.retransmit_interval:type_name -> ywrapper.UintValue
	289, // 104: openconfig.Interfaces.Interface.Ethernet.Dot1X.Config.supplicant_timeout:type_name -> ywrapper.UintValue
	288, // 105: openconfig.Interfaces.Interface.Ethernet.Dot1X.State.authenticate_port:type_name -> ywrapper.BoolValue
	3,   // 106: openconfig.Interfaces.Interface.Ethernet.Dot1X.State.host_mode:type_name -> openconfig.Interfaces.Interface.Ethernet.Dot1X.State.HostMode
	289, // 107: openconfig.Interfaces.Interface.Ethernet.Dot1X.State.max_requests:type_name -> ywrapper.UintValue
	289, // 108: openconfig.Interfaces.Interface.Ethernet.Dot1X.State.reauthenticate_interval:type_name -> ywrapper.UintValue
	289, // 109: openconfig.Interfaces.Interface.Ethernet.Dot1X.State.retransmit_interval:type_name -> ywrapper.UintValue
	289, // 110: openconfig.Interfaces.Interface.Ethernet.Dot1X.State.supplicant_timeout:type_name -> ywrapper.UintValue
	288, // 111: openconfig.Interfaces.Interface.Ethernet.Poe.Config.enabled:type_name -> ywrapper.BoolValue
	288, // 112: openconfig.Interfaces.Interface.Ethernet.Poe.State.enabled:type_name -> ywrapper.BoolValue
	289, // 113: openconfig.Interfaces.Interface.Ethernet.Poe.State.power_class:type_name -> ywrapper.UintValue
	295, // 114: openconfig.Interfaces.Interface.Ethernet.Poe.State.power_used:type_name -> ywrapper.Decimal64Value
	289, // 115: openconfig.Interfaces.Interface.Ethernet.State.Counters.in_8021q_frames:type_name -> ywrapper.UintValue
	289, // 116: openconfig.Interfaces.Interface.Ethernet.State.Counters.in_block_errors:type_name -> ywrapper.UintValue
	289, // 117: openconfig.Interfaces.Interface.Ethernet.State.Counters.in_crc_errors:type_name -> ywrapper.UintValue
	55,  // 118: openconfig.Interfaces.Interface.Ethernet.State.Counters.in_distribution:type_name -> openconfig.Interfaces.Interface.Ethernet.State.Counters.InDistribution
	289, // 119: openconfig.Interfaces.Interface.Ethernet.State.Counters.in_fragment_frames:type_name -> ywrapper.UintValue
	289, // 120: openconfig.Interfaces.Interface.Ethernet.State.Counters.in_jabber_frames:type_name -> ywrapper.UintValue
	289, // 121: openconfig.Interfaces.Interface.Ethernet.State.Counters.in_mac_control_frames:type_name -> ywrapper.UintValue
	289, // 122: openconfig.Interfaces.Interface.Ethernet.State.Counters.in_mac_pause_frames:type_name -> ywrapper.UintValue
	289, // 123: openconfig.Interfaces.Interface.Ethernet.State.Counters.in_oversize_frames:type_name -> ywrapper.UintValue
	289, // 124: openconfig.Interfaces.Interface.Ethernet.State.Counters.in_undersize_frames:type_name -> ywrapper.UintValue
	289, // 125: openconfig.Interfaces.Interface.Ethernet.State.Counters.out_8021q_frames:type_name -> ywrapper.UintValue
	289, // 126: openconfig.Interfaces.Interface.Ethernet.State.Counters.out_mac_control_frames:type_name -> ywrapper.UintValue
	289, // 127: openconfig.Interfaces.Interface.Ethernet.State.Counters.out_mac_pause_frames:type_name -> ywrapper.UintValue
	289, // 128: openconfig.Interfaces.Interface.Ethernet.State.Counters.InDistribution.in_frames_1024_1518_octets:type_name -> ywrapper.UintValue
	289, // 129: openconfig.Interfaces.Interface.Ethernet.State.Counters.InDistribution.in_frames_128_255_octets:type_name -> ywrapper.UintValue
	289, // 130: openconfig.Interfaces.Interface.Ethernet.State.Counters.InDistribution.in_frames_256_511_octets:type_name -> ywrapper.UintValue
	289, // 131: openconfig.Interfaces.Interface.Ethernet.State.Counters.InDistribution.in_frames_512_1023_octets:type_name -> ywrapper.UintValue
	289, // 132: openconfig.Interfaces.Interface.Ethernet.State.Counters.InDistribution.in_frames_64_octets:type_name -> ywrapper.UintValue
	289, // 133: openconfig.Interfaces.Interface.Ethernet.State.Counters.InDistribution.in_frames_65_127_octets:type_name -> ywrapper.UintValue
	289, // 134: openconfig.Interfaces.Interface.Ethernet.SwitchedVlan.Config.access_vlan:type_name -> ywrapper.UintValue
	293, // 135: openconfig.Interfaces.Interface.Ethernet.SwitchedVlan.Config.interface_mode:type_name -> openconfig.OpenconfigVlanVlanModeType
	289, // 136: openconfig.Interfaces.Interface.Ethernet.SwitchedVlan.Config.native_vlan:type_name -> ywrapper.UintValue
	59,  // 137: openconfig.Interfaces.Interface.Ethernet.SwitchedVlan.Config.trunk_vlans:type_name -> openconfig.Interfaces.Interface.Ethernet.SwitchedVlan.Config.TrunkVlansUnion
	61,  // 138: openconfig.Interfaces.Interface.Ethernet.SwitchedVlan.Dot1XVlanMap.vlan_name:type_name -> openconfig.Interfaces.Interface.Ethernet.SwitchedVlan.Dot1XVlanMap.VlanNameKey
	289, // 139: openconfig.Interfaces.Interface.Ethernet.SwitchedVlan.State.access_vlan:type_name -> ywrapper.UintValue
	293, // 140: openconfig.Interfaces.Interface.Ethernet.SwitchedVlan.State.interface_mode:type_name -> openconfig.OpenconfigVlanVlanModeType
	289, // 141: openconfig.Interfaces.Interface.Ethernet.SwitchedVlan.State.native_vlan:type_name -> ywrapper.UintValue
	64,  // 142: openconfig.Interfaces.Interface.Ethernet.SwitchedVlan.State.trunk_vlans:type_name -> openconfig.Interfaces.Interface.Ethernet.SwitchedVlan.State.TrunkVlansUnion
	62,  // 143: openconfig.Interfaces.Interface.Ethernet.SwitchedVlan.Dot1XVlanMap.VlanName.config:type_name -> openconfig.Interfaces.Interface.Ethernet.SwitchedVlan.Dot1XVlanMap.VlanName.Config
	63,  // 144: openconfig.Interfaces.Interface.Ethernet.SwitchedVlan.Dot1XVlanMap.VlanName.state:type_name -> openconfig.Interfaces.Interface.Ethernet.SwitchedVlan.Dot1XVlanMap.VlanName.State
	60,  // 145: openconfig.Interfaces.Interface.Ethernet.SwitchedVlan.Dot1XVlanMap.VlanNameKey.vlan_name:type_name -> openconfig.Interfaces.Interface.Ethernet.SwitchedVlan.Dot1XVlanMap.VlanName
	289, // 146: openconfig.Interfaces.Interface.Ethernet.SwitchedVlan.Dot1XVlanMap.VlanName.Config.id:type_name -> ywrapper.UintValue
	287, // 147: openconfig.Interfaces.Interface.Ethernet.SwitchedVlan.Dot1XVlanMap.VlanName.Config.vlan_name:type_name -> ywrapper.StringValue
	289, // 148: openconfig.Interfaces.Interface.Ethernet.SwitchedVlan.Dot1XVlanMap.VlanName.State.id:type_name -> ywrapper.UintValue
	287, // 149: openconfig.Interfaces.Interface.Ethernet.SwitchedVlan.Dot1XVlanMap.VlanName.State.vlan_name:type_name -> ywrapper.StringValue
	289, // 150: openconfig.Interfaces.Interface.HoldTime.Config.down:type_name -> ywrapper.UintValue
	289, // 151: openconfig.Interfaces.Interface.HoldTime.Config.up:type_name -> ywrapper.UintValue
	289, // 152: openconfig.Interfaces.Interface.HoldTime.State.down:type_name -> ywrapper.UintValue
	289, // 153: openconfig.Interfaces.Interface.HoldTime.State.up:type_name -> ywrapper.UintValue
	71,  // 154: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.addresses:type_name -> openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Addresses
	72,  // 155: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.config:type_name -> openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Config
	73,  // 156: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.neighbors:type_name -> openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Neighbors
	74,  // 157: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.proxy_arp:type_name -> openconfig.Interfaces.Interface.RoutedVlan.Ipv4.ProxyArp
	75,  // 158: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.state:type_name -> openconfig.Interfaces.Interface.RoutedVlan.Ipv4.State
	76,  // 159: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.unnumbered:type_name -> openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Unnumbered
	101, // 160: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.addresses:type_name -> openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Addresses
	102, // 161: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.config:type_name -> openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Config
	103, // 162: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.neighbors:type_name -> openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Neighbors
	104, // 163: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.router_advertisement:type_name -> openconfig.Interfaces.Interface.RoutedVlan.Ipv6.RouterAdvertisement
	105, // 164: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.state:type_name -> openconfig.Interfaces.Interface.RoutedVlan.Ipv6.State
	106, // 165: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.unnumbered:type_name -> openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Unnumbered
	78,  // 166: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Addresses.address:type_name -> openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Addresses.AddressKey
	288, // 167: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Config.dhcp_client:type_name -> ywrapper.BoolValue
	288, // 168: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Config.enabled:type_name -> ywrapper.BoolValue
	289, // 169: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Config.mtu:type_name -> ywrapper.UintValue
	90,  // 170: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Neighbors.neighbor:type_name -> openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Neighbors.NeighborKey
	93,  // 171: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.ProxyArp.config:type_name -> openconfig.Interfaces.Interface.RoutedVlan.Ipv4.ProxyArp.Config
	94,  // 172: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.ProxyArp.state:type_name -> openconfig.Interfaces.Interface.RoutedVlan.Ipv4.ProxyArp.State
	95,  // 173: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.State.counters:type_name -> openconfig.Interfaces.Interface.RoutedVlan.Ipv4.State.Counters
	288, // 174: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.State.dhcp_client:type_name -> ywrapper.BoolValue
	288, // 175: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.State.enabled:type_name -> ywrapper.BoolValue
	289, // 176: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.State.mtu:type_name -> ywrapper.UintValue
	96,  // 177: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Unnumbered.config:type_name -> openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Unnumbered.Config
	97,  // 178: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Unnumbered.interface_ref:type_name -> openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Unnumbered.InterfaceRef
	98,  // 179: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Unnumbered.state:type_name -> openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Unnumbered.State
	79,  // 180: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Addresses.Address.config:type_name -> openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Addresses.Address.Config
	80,  // 181: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Addresses.Address.state:type_name -> openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Addresses.Address.State
	81,  // 182: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Addresses.Address.vrrp:type_name -> openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Addresses.Address.Vrrp
	77,  // 183: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Addresses.AddressKey.address:type_name -> openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Addresses.Address
	287, // 184: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Addresses.Address.Config.ip:type_name -> ywrapper.StringValue
	289, // 185: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Addresses.Address.Config.prefix_length:type_name -> ywrapper.UintValue
	287, // 186: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Addresses.Address.State.ip:type_name -> ywrapper.StringValue
	296, // 187: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Addresses.Address.State.origin:type_name -> openconfig.OpenconfigIfIpIpAddressOrigin
	289, // 188: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Addresses.Address.State.prefix_length:type_name -> ywrapper.UintValue
	83,  // 189: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Addresses.Address.Vrrp.vrrp_group:type_name -> openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Addresses.Address.Vrrp.VrrpGroupKey
	84,  // 190: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Addresses.Address.Vrrp.VrrpGroup.config:type_name -> openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Addresses.Address.Vrrp.VrrpGroup.Config
	85,  // 191: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Addresses.Address.Vrrp.VrrpGroup.interface_tracking:type_name -> openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Addresses.Address.Vrrp.VrrpGroup.InterfaceTracking
	86,  // 192: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Addresses.Address.Vrrp.VrrpGroup.state:type_name -> openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Addresses.Address.Vrrp.VrrpGroup.State
	82,  // 193: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Addresses.Address.Vrrp.VrrpGroupKey.vrrp_group:type_name -> openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Addresses.Address.Vrrp.VrrpGroup
	288, // 194: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Addresses.Address.Vrrp.VrrpGroup.Config.accept_mode:type_name -> ywrapper.BoolValue
	289, // 195: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Addresses.Address.Vrrp.VrrpGroup.Config.advertisement_interval:type_name -> ywrapper.UintValue
	288, // 196: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Addresses.Address.Vrrp.VrrpGroup.Config.preempt:type_name -> ywrapper.BoolValue
	289, // 197: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Addresses.Address.Vrrp.VrrpGroup.Config.preempt_delay:type_name -> ywrapper.UintValue
	289, // 198: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Addresses.Address.Vrrp.VrrpGroup.Config.priority:type_name -> ywrapper.UintValue
	287, // 199: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Addresses.Address.Vrrp.VrrpGroup.Config.virtual_address:type_name -> ywrapper.StringValue
	289, // 200: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Addresses.Address.Vrrp.VrrpGroup.Config.virtual_router_id:type_name -> ywrapper.UintValue
	87,  // 201: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Addresses.Address.Vrrp.VrrpGroup.InterfaceTracking.config:type_name -> openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Addresses.Address.Vrrp.VrrpGroup.InterfaceTracking.Config
	88,  // 202: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Addresses.Address.Vrrp.VrrpGroup.InterfaceTracking.state:type_name -> openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Addresses.Address.Vrrp.VrrpGroup.InterfaceTracking.State
	288, // 203: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Addresses.Address.Vrrp.VrrpGroup.State.accept_mode:type_name -> ywrapper.BoolValue
	289, // 204: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Addresses.Address.Vrrp.VrrpGroup.State.advertisement_interval:type_name -> ywrapper.UintValue
	289, // 205: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Addresses.Address.Vrrp.VrrpGroup.State.current_priority:type_name -> ywrapper.UintValue
	288, // 206: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Addresses.Address.Vrrp.VrrpGroup.State.preempt:type_name -> ywrapper.BoolValue
	289, // 207: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Addresses.Address.Vrrp.VrrpGroup.State.preempt_delay:type_name -> ywrapper.UintValue
	289, // 208: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Addresses.Address.Vrrp.VrrpGroup.State.priority:type_name -> ywrapper.UintValue
	287, // 209: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Addresses.Address.Vrrp.VrrpGroup.State.virtual_address:type_name -> ywrapper.StringValue
	289, // 210: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Addresses.Address.Vrrp.VrrpGroup.State.virtual_router_id:type_name -> ywrapper.UintValue
	289, // 211: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Addresses.Address.Vrrp.VrrpGroup.InterfaceTracking.Config.priority_decrement:type_name -> ywrapper.UintValue
	287, // 212: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Addresses.Address.Vrrp.VrrpGroup.InterfaceTracking.Config.track_interface:type_name -> ywrapper.StringValue
	289, // 213: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Addresses.Address.Vrrp.VrrpGroup.InterfaceTracking.State.priority_decrement:type_name -> ywrapper.UintValue
	287, // 214: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Addresses.Address.Vrrp.VrrpGroup.InterfaceTracking.State.track_interface:type_name -> ywrapper.StringValue
	91,  // 215: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Neighbors.Neighbor.config:type_name -> openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Neighbors.Neighbor.Config
	92,  // 216: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Neighbors.Neighbor.state:type_name -> openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Neighbors.Neighbor.State
	89,  // 217: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Neighbors.NeighborKey.neighbor:type_name -> openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Neighbors.Neighbor
	287, // 218: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Neighbors.Neighbor.Config.ip:type_name -> ywrapper.StringValue
	287, // 219: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Neighbors.Neighbor.Config.link_layer_address:type_name -> ywrapper.StringValue
	287, // 220: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Neighbors.Neighbor.State.ip:type_name -> ywrapper.StringValue
	287, // 221: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Neighbors.Neighbor.State.link_layer_address:type_name -> ywrapper.StringValue
	297, // 222: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Neighbors.Neighbor.State.origin:type_name -> openconfig.OpenconfigIfIpNeighborOrigin
	6,   // 223: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.ProxyArp.Config.mode:type_name -> openconfig.Interfaces.Interface.RoutedVlan.Ipv4.ProxyArp.Config.Mode
	7,   // 224: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.ProxyArp.State.mode:type_name -> openconfig.Interfaces.Interface.RoutedVlan.Ipv4.ProxyArp.State.Mode
	289, // 225: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.State.Counters.in_discarded_pkts:type_name -> ywrapper.UintValue
	289, // 226: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.State.Counters.in_error_pkts:type_name -> ywrapper.UintValue
	289, // 227: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.State.Counters.in_forwarded_octets:type_name -> ywrapper.UintValue
	289, // 228: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.State.Counters.in_forwarded_pkts:type_name -> ywrapper.UintValue
	289, // 229: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.State.Counters.in_octets:type_name -> ywrapper.UintValue
	289, // 230: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.State.Counters.in_pkts:type_name -> ywrapper.UintValue
	289, // 231: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.State.Counters.out_discarded_pkts:type_name -> ywrapper.UintValue
	289, // 232: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.State.Counters.out_error_pkts:type_name -> ywrapper.UintValue
	289, // 233: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.State.Counters.out_forwarded_octets:type_name -> ywrapper.UintValue
	289, // 234: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.State.Counters.out_forwarded_pkts:type_name -> ywrapper.UintValue
	289, // 235: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.State.Counters.out_octets:type_name -> ywrapper.UintValue
	289, // 236: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.State.Counters.out_pkts:type_name -> ywrapper.UintValue
	288, // 237: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Unnumbered.Config.enabled:type_name -> ywrapper.BoolValue
	99,  // 238: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Unnumbered.InterfaceRef.config:type_name -> openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Unnumbered.InterfaceRef.Config
	100, // 239: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Unnumbered.InterfaceRef.state:type_name -> openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Unnumbered.InterfaceRef.State
	288, // 240: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Unnumbered.State.enabled:type_name -> ywrapper.BoolValue
	287, // 241: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Unnumbered.InterfaceRef.Config.interface:type_name -> ywrapper.StringValue
	289, // 242: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Unnumbered.InterfaceRef.Config.subinterface:type_name -> ywrapper.UintValue
	287, // 243: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Unnumbered.InterfaceRef.State.interface:type_name -> ywrapper.StringValue
	289, // 244: openconfig.Interfaces.Interface.RoutedVlan.Ipv4.Unnumbered.InterfaceRef.State.subinterface:type_name -> ywrapper.UintValue
	108, // 245: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Addresses.address:type_name -> openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Addresses.AddressKey
	288, // 246: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Config.dhcp_client:type_name -> ywrapper.BoolValue
	289, // 247: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Config.dup_addr_detect_transmits:type_name -> ywrapper.UintValue
	288, // 248: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Config.enabled:type_name -> ywrapper.BoolValue
	289, // 249: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Config.mtu:type_name -> ywrapper.UintValue
	120, // 250: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Neighbors.neighbor:type_name -> openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Neighbors.NeighborKey
	123, // 251: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.RouterAdvertisement.config:type_name -> openconfig.Interfaces.Interface.RoutedVlan.Ipv6.RouterAdvertisement.Config
	124, // 252: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.RouterAdvertisement.state:type_name -> openconfig.Interfaces.Interface.RoutedVlan.Ipv6.RouterAdvertisement.State
	125, // 253: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.State.counters:type_name -> openconfig.Interfaces.Interface.RoutedVlan.Ipv6.State.Counters
	288, // 254: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.State.dhcp_client:type_name -> ywrapper.BoolValue
	289, // 255: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.State.dup_addr_detect_transmits:type_name -> ywrapper.UintValue
	288, // 256: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.State.enabled:type_name -> ywrapper.BoolValue
	289, // 257: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.State.mtu:type_name -> ywrapper.UintValue
	126, // 258: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Unnumbered.config:type_name -> openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Unnumbered.Config
	127, // 259: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Unnumbered.interface_ref:type_name -> openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Unnumbered.InterfaceRef
	128, // 260: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Unnumbered.state:type_name -> openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Unnumbered.State
	109, // 261: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Addresses.Address.config:type_name -> openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Addresses.Address.Config
	110, // 262: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Addresses.Address.state:type_name -> openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Addresses.Address.State
	111, // 263: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Addresses.Address.vrrp:type_name -> openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Addresses.Address.Vrrp
	107, // 264: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Addresses.AddressKey.address:type_name -> openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Addresses.Address
	287, // 265: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Addresses.Address.Config.ip:type_name -> ywrapper.StringValue
	289, // 266: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Addresses.Address.Config.prefix_length:type_name -> ywrapper.UintValue
	287, // 267: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Addresses.Address.State.ip:type_name -> ywrapper.StringValue
	296, // 268: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Addresses.Address.State.origin:type_name -> openconfig.OpenconfigIfIpIpAddressOrigin
	289, // 269: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Addresses.Address.State.prefix_length:type_name -> ywrapper.UintValue
	8,   // 270: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Addresses.Address.State.status:type_name -> openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Addresses.Address.State.Status
	113, // 271: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Addresses.Address.Vrrp.vrrp_group:type_name -> openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Addresses.Address.Vrrp.VrrpGroupKey
	114, // 272: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Addresses.Address.Vrrp.VrrpGroup.config:type_name -> openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Addresses.Address.Vrrp.VrrpGroup.Config
	115, // 273: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Addresses.Address.Vrrp.VrrpGroup.interface_tracking:type_name -> openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Addresses.Address.Vrrp.VrrpGroup.InterfaceTracking
	116, // 274: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Addresses.Address.Vrrp.VrrpGroup.state:type_name -> openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Addresses.Address.Vrrp.VrrpGroup.State
	112, // 275: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Addresses.Address.Vrrp.VrrpGroupKey.vrrp_group:type_name -> openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Addresses.Address.Vrrp.VrrpGroup
	288, // 276: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Addresses.Address.Vrrp.VrrpGroup.Config.accept_mode:type_name -> ywrapper.BoolValue
	289, // 277: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Addresses.Address.Vrrp.VrrpGroup.Config.advertisement_interval:type_name -> ywrapper.UintValue
	288, // 278: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Addresses.Address.Vrrp.VrrpGroup.Config.preempt:type_name -> ywrapper.BoolValue
	289, // 279: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Addresses.Address.Vrrp.VrrpGroup.Config.preempt_delay:type_name -> ywrapper.UintValue
	289, // 280: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Addresses.Address.Vrrp.VrrpGroup.Config.priority:type_name -> ywrapper.UintValue
	287, // 281: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Addresses.Address.Vrrp.VrrpGroup.Config.virtual_address:type_name -> ywrapper.StringValue
	287, // 282: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Addresses.Address.Vrrp.VrrpGroup.Config.virtual_link_local:type_name -> ywrapper.StringValue
	289, // 283: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Addresses.Address.Vrrp.VrrpGroup.Config.virtual_router_id:type_name -> ywrapper.UintValue
	117, // 284: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Addresses.Address.Vrrp.VrrpGroup.InterfaceTracking.config:type_name -> openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Addresses.Address.Vrrp.VrrpGroup.InterfaceTracking.Config
	118, // 285: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Addresses.Address.Vrrp.VrrpGroup.InterfaceTracking.state:type_name -> openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Addresses.Address.Vrrp.VrrpGroup.InterfaceTracking.State
	288, // 286: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Addresses.Address.Vrrp.VrrpGroup.State.accept_mode:type_name -> ywrapper.BoolValue
	289, // 287: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Addresses.Address.Vrrp.VrrpGroup.State.advertisement_interval:type_name -> ywrapper.UintValue
	289, // 288: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Addresses.Address.Vrrp.VrrpGroup.State.current_priority:type_name -> ywrapper.UintValue
	288, // 289: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Addresses.Address.Vrrp.VrrpGroup.State.preempt:type_name -> ywrapper.BoolValue
	289, // 290: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Addresses.Address.Vrrp.VrrpGroup.State.preempt_delay:type_name -> ywrapper.UintValue
	289, // 291: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Addresses.Address.Vrrp.VrrpGroup.State.priority:type_name -> ywrapper.UintValue
	287, // 292: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Addresses.Address.Vrrp.VrrpGroup.State.virtual_address:type_name -> ywrapper.StringValue
	287, // 293: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Addresses.Address.Vrrp.VrrpGroup.State.virtual_link_local:type_name -> ywrapper.StringValue
	289, // 294: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Addresses.Address.Vrrp.VrrpGroup.State.virtual_router_id:type_name -> ywrapper.UintValue
	289, // 295: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Addresses.Address.Vrrp.VrrpGroup.InterfaceTracking.Config.priority_decrement:type_name -> ywrapper.UintValue
	287, // 296: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Addresses.Address.Vrrp.VrrpGroup.InterfaceTracking.Config.track_interface:type_name -> ywrapper.StringValue
	289, // 297: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Addresses.Address.Vrrp.VrrpGroup.InterfaceTracking.State.priority_decrement:type_name -> ywrapper.UintValue
	287, // 298: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Addresses.Address.Vrrp.VrrpGroup.InterfaceTracking.State.track_interface:type_name -> ywrapper.StringValue
	121, // 299: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Neighbors.Neighbor.config:type_name -> openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Neighbors.Neighbor.Config
	122, // 300: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Neighbors.Neighbor.state:type_name -> openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Neighbors.Neighbor.State
	119, // 301: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Neighbors.NeighborKey.neighbor:type_name -> openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Neighbors.Neighbor
	287, // 302: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Neighbors.Neighbor.Config.ip:type_name -> ywrapper.StringValue
	287, // 303: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Neighbors.Neighbor.Config.link_layer_address:type_name -> ywrapper.StringValue
	287, // 304: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Neighbors.Neighbor.State.ip:type_name -> ywrapper.StringValue
	288, // 305: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Neighbors.Neighbor.State.is_router:type_name -> ywrapper.BoolValue
	287, // 306: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Neighbors.Neighbor.State.link_layer_address:type_name -> ywrapper.StringValue
	9,   // 307: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Neighbors.Neighbor.State.neighbor_state:type_name -> openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Neighbors.Neighbor.State.NeighborState
	297, // 308: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Neighbors.Neighbor.State.origin:type_name -> openconfig.OpenconfigIfIpNeighborOrigin
	289, // 309: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.RouterAdvertisement.Config.interval:type_name -> ywrapper.UintValue
	289, // 310: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.RouterAdvertisement.Config.lifetime:type_name -> ywrapper.UintValue
	288, // 311: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.RouterAdvertisement.Config.suppress:type_name -> ywrapper.BoolValue
	289, // 312: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.RouterAdvertisement.State.interval:type_name -> ywrapper.UintValue
	289, // 313: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.RouterAdvertisement.State.lifetime:type_name -> ywrapper.UintValue
	288, // 314: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.RouterAdvertisement.State.suppress:type_name -> ywrapper.BoolValue
	289, // 315: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.State.Counters.in_discarded_pkts:type_name -> ywrapper.UintValue
	289, // 316: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.State.Counters.in_error_pkts:type_name -> ywrapper.UintValue
	289, // 317: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.State.Counters.in_forwarded_octets:type_name -> ywrapper.UintValue
	289, // 318: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.State.Counters.in_forwarded_pkts:type_name -> ywrapper.UintValue
	289, // 319: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.State.Counters.in_octets:type_name -> ywrapper.UintValue
	289, // 320: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.State.Counters.in_pkts:type_name -> ywrapper.UintValue
	289, // 321: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.State.Counters.out_discarded_pkts:type_name -> ywrapper.UintValue
	289, // 322: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.State.Counters.out_error_pkts:type_name -> ywrapper.UintValue
	289, // 323: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.State.Counters.out_forwarded_octets:type_name -> ywrapper.UintValue
	289, // 324: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.State.Counters.out_forwarded_pkts:type_name -> ywrapper.UintValue
	289, // 325: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.State.Counters.out_octets:type_name -> ywrapper.UintValue
	289, // 326: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.State.Counters.out_pkts:type_name -> ywrapper.UintValue
	288, // 327: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Unnumbered.Config.enabled:type_name -> ywrapper.BoolValue
	129, // 328: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Unnumbered.InterfaceRef.config:type_name -> openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Unnumbered.InterfaceRef.Config
	130, // 329: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Unnumbered.InterfaceRef.state:type_name -> openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Unnumbered.InterfaceRef.State
	288, // 330: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Unnumbered.State.enabled:type_name -> ywrapper.BoolValue
	287, // 331: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Unnumbered.InterfaceRef.Config.interface:type_name -> ywrapper.StringValue
	289, // 332: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Unnumbered.InterfaceRef.Config.subinterface:type_name -> ywrapper.UintValue
	287, // 333: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Unnumbered.InterfaceRef.State.interface:type_name -> ywrapper.StringValue
	289, // 334: openconfig.Interfaces.Interface.RoutedVlan.Ipv6.Unnumbered.InterfaceRef.State.subinterface:type_name -> ywrapper.UintValue
	289, // 335: openconfig.Interfaces.Interface.State.Counters.carrier_transitions:type_name -> ywrapper.UintValue
	289, // 336: openconfig.Interfaces.Interface.State.Counters.in_broadcast_pkts:type_name -> ywrapper.UintValue
	289, // 337: openconfig.Interfaces.Interface.State.Counters.in_discards:type_name -> ywrapper.UintValue
	289, // 338: openconfig.Interfaces.Interface.State.Counters.in_errors:type_name -> ywrapper.UintValue
	289, // 339: openconfig.Interfaces.Interface.State.Counters.in_fcs_errors:type_name -> ywrapper.UintValue
	289, // 340: openconfig.Interfaces.Interface.State.Counters.in_multicast_pkts:type_name -> ywrapper.UintValue
	289, // 341: openconfig.Interfaces.Interface.State.Counters.in_octets:type_name -> ywrapper.UintValue
	289, // 342: openconfig.Interfaces.Interface.State.Counters.in_pkts:type_name -> ywrapper.UintValue
	289, // 343: openconfig.Interfaces.Interface.State.Counters.in_unicast_pkts:type_name -> ywrapper.UintValue
	289, // 344: openconfig.Interfaces.Interface.State.Counters.in_unknown_protos:type_name -> ywrapper.UintValue
	289, // 345: openconfig.Interfaces.Interface.State.Counters.last_clear:type_name -> ywrapper.UintValue
	289, // 346: openconfig.Interfaces.Interface.State.Counters.out_broadcast_pkts:type_name -> ywrapper.UintValue
	289, // 347: openconfig.Interfaces.Interface.State.Counters.out_discards:type_name -> ywrapper.UintValue
	289, // 348: openconfig.Interfaces.Interface.State.Counters.out_errors:type_name -> ywrapper.UintValue
	289, // 349: openconfig.Interfaces.Interface.State.Counters.out_multicast_pkts:type_name -> ywrapper.UintValue
	289, // 350: openconfig.Interfaces.Interface.State.Counters.out_octets:type_name -> ywrapper.UintValue
	289, // 351: openconfig.Interfaces.Interface.State.Counters.out_pkts:type_name -> ywrapper.UintValue
	289, // 352: openconfig.Interfaces.Interface.State.Counters.out_unicast_pkts:type_name -> ywrapper.UintValue
	134, // 353: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.config:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Config
	135, // 354: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.ipv4:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4
	136, // 355: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.ipv6:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6
	137, // 356: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.state:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.State
	138, // 357: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.vlan:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan
	132, // 358: openconfig.Interfaces.Interface.Subinterfaces.SubinterfaceKey.subinterface:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface
	287, // 359: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Config.description:type_name -> ywrapper.StringValue
	288, // 360: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Config.enabled:type_name -> ywrapper.BoolValue
	289, // 361: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Config.index:type_name -> ywrapper.UintValue
	139, // 362: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.addresses:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses
	140, // 363: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.config:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Config
	141, // 364: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.neighbors:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Neighbors
	142, // 365: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.proxy_arp:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.ProxyArp
	143, // 366: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.state:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.State
	144, // 367: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.unnumbered:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Unnumbered
	169, // 368: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.addresses:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses
	170, // 369: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.autoconf:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Autoconf
	171, // 370: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.config:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Config
	172, // 371: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.neighbors:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Neighbors
	173, // 372: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.router_advertisement:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.RouterAdvertisement
	174, // 373: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.state:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.State
	175, // 374: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.unnumbered:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Unnumbered
	16,  // 375: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.State.admin_status:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.State.AdminStatus
	202, // 376: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.State.counters:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.State.Counters
	287, // 377: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.State.description:type_name -> ywrapper.StringValue
	288, // 378: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.State.enabled:type_name -> ywrapper.BoolValue
	289, // 379: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.State.ifindex:type_name -> ywrapper.UintValue
	289, // 380: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.State.index:type_name -> ywrapper.UintValue
	289, // 381: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.State.last_change:type_name -> ywrapper.UintValue
	288, // 382: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.State.logical:type_name -> ywrapper.BoolValue
	287, // 383: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.State.name:type_name -> ywrapper.StringValue
	17,  // 384: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.State.oper_status:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.State.OperStatus
	203, // 385: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.config:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Config
	204, // 386: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.egress_mapping:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.EgressMapping
	205, // 387: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.ingress_mapping:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.IngressMapping
	206, // 388: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.match:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match
	207, // 389: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.state:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.State
	146, // 390: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.address:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.AddressKey
	288, // 391: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Config.dhcp_client:type_name -> ywrapper.BoolValue
	288, // 392: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Config.enabled:type_name -> ywrapper.BoolValue
	289, // 393: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Config.mtu:type_name -> ywrapper.UintValue
	158, // 394: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Neighbors.neighbor:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Neighbors.NeighborKey
	161, // 395: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.ProxyArp.config:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.ProxyArp.Config
	162, // 396: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.ProxyArp.state:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.ProxyArp.State
	163, // 397: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.State.counters:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.State.Counters
	288, // 398: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.State.dhcp_client:type_name -> ywrapper.BoolValue
	288, // 399: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.State.enabled:type_name -> ywrapper.BoolValue
	289, // 400: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.State.mtu:type_name -> ywrapper.UintValue
	164, // 401: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Unnumbered.config:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Unnumbered.Config
	165, // 402: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Unnumbered.interface_ref:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Unnumbered.InterfaceRef
	166, // 403: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Unnumbered.state:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Unnumbered.State
	147, // 404: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.Address.config:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.Address.Config
	148, // 405: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.Address.state:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.Address.State
	149, // 406: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.Address.vrrp:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.Address.Vrrp
	145, // 407: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.AddressKey.address:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.Address
	287, // 408: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.Address.Config.ip:type_name -> ywrapper.StringValue
	289, // 409: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.Address.Config.prefix_length:type_name -> ywrapper.UintValue
	287, // 410: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.Address.State.ip:type_name -> ywrapper.StringValue
	296, // 411: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.Address.State.origin:type_name -> openconfig.OpenconfigIfIpIpAddressOrigin
	289, // 412: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.Address.State.prefix_length:type_name -> ywrapper.UintValue
	151, // 413: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.Address.Vrrp.vrrp_group:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.Address.Vrrp.VrrpGroupKey
	152, // 414: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.Address.Vrrp.VrrpGroup.config:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.Address.Vrrp.VrrpGroup.Config
	153, // 415: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.Address.Vrrp.VrrpGroup.interface_tracking:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.Address.Vrrp.VrrpGroup.InterfaceTracking
	154, // 416: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.Address.Vrrp.VrrpGroup.state:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.Address.Vrrp.VrrpGroup.State
	150, // 417: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.Address.Vrrp.VrrpGroupKey.vrrp_group:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.Address.Vrrp.VrrpGroup
	288, // 418: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.Address.Vrrp.VrrpGroup.Config.accept_mode:type_name -> ywrapper.BoolValue
	289, // 419: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.Address.Vrrp.VrrpGroup.Config.advertisement_interval:type_name -> ywrapper.UintValue
	288, // 420: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.Address.Vrrp.VrrpGroup.Config.preempt:type_name -> ywrapper.BoolValue
	289, // 421: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.Address.Vrrp.VrrpGroup.Config.preempt_delay:type_name -> ywrapper.UintValue
	289, // 422: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.Address.Vrrp.VrrpGroup.Config.priority:type_name -> ywrapper.UintValue
	287, // 423: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.Address.Vrrp.VrrpGroup.Config.virtual_address:type_name -> ywrapper.StringValue
	289, // 424: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.Address.Vrrp.VrrpGroup.Config.virtual_router_id:type_name -> ywrapper.UintValue
	155, // 425: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.Address.Vrrp.VrrpGroup.InterfaceTracking.config:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.Address.Vrrp.VrrpGroup.InterfaceTracking.Config
	156, // 426: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.Address.Vrrp.VrrpGroup.InterfaceTracking.state:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.Address.Vrrp.VrrpGroup.InterfaceTracking.State
	288, // 427: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.Address.Vrrp.VrrpGroup.State.accept_mode:type_name -> ywrapper.BoolValue
	289, // 428: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.Address.Vrrp.VrrpGroup.State.advertisement_interval:type_name -> ywrapper.UintValue
	289, // 429: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.Address.Vrrp.VrrpGroup.State.current_priority:type_name -> ywrapper.UintValue
	288, // 430: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.Address.Vrrp.VrrpGroup.State.preempt:type_name -> ywrapper.BoolValue
	289, // 431: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.Address.Vrrp.VrrpGroup.State.preempt_delay:type_name -> ywrapper.UintValue
	289, // 432: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.Address.Vrrp.VrrpGroup.State.priority:type_name -> ywrapper.UintValue
	287, // 433: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.Address.Vrrp.VrrpGroup.State.virtual_address:type_name -> ywrapper.StringValue
	289, // 434: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.Address.Vrrp.VrrpGroup.State.virtual_router_id:type_name -> ywrapper.UintValue
	289, // 435: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.Address.Vrrp.VrrpGroup.InterfaceTracking.Config.priority_decrement:type_name -> ywrapper.UintValue
	287, // 436: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.Address.Vrrp.VrrpGroup.InterfaceTracking.Config.track_interface:type_name -> ywrapper.StringValue
	289, // 437: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.Address.Vrrp.VrrpGroup.InterfaceTracking.State.priority_decrement:type_name -> ywrapper.UintValue
	287, // 438: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Addresses.Address.Vrrp.VrrpGroup.InterfaceTracking.State.track_interface:type_name -> ywrapper.StringValue
	159, // 439: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Neighbors.Neighbor.config:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Neighbors.Neighbor.Config
	160, // 440: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Neighbors.Neighbor.state:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Neighbors.Neighbor.State
	157, // 441: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Neighbors.NeighborKey.neighbor:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Neighbors.Neighbor
	287, // 442: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Neighbors.Neighbor.Config.ip:type_name -> ywrapper.StringValue
	287, // 443: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Neighbors.Neighbor.Config.link_layer_address:type_name -> ywrapper.StringValue
	287, // 444: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Neighbors.Neighbor.State.ip:type_name -> ywrapper.StringValue
	287, // 445: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Neighbors.Neighbor.State.link_layer_address:type_name -> ywrapper.StringValue
	297, // 446: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Neighbors.Neighbor.State.origin:type_name -> openconfig.OpenconfigIfIpNeighborOrigin
	12,  // 447: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.ProxyArp.Config.mode:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.ProxyArp.Config.Mode
	13,  // 448: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.ProxyArp.State.mode:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.ProxyArp.State.Mode
	289, // 449: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.State.Counters.in_discarded_pkts:type_name -> ywrapper.UintValue
	289, // 450: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.State.Counters.in_error_pkts:type_name -> ywrapper.UintValue
	289, // 451: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.State.Counters.in_forwarded_octets:type_name -> ywrapper.UintValue
	289, // 452: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.State.Counters.in_forwarded_pkts:type_name -> ywrapper.UintValue
	289, // 453: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.State.Counters.in_octets:type_name -> ywrapper.UintValue
	289, // 454: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.State.Counters.in_pkts:type_name -> ywrapper.UintValue
	289, // 455: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.State.Counters.out_discarded_pkts:type_name -> ywrapper.UintValue
	289, // 456: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.State.Counters.out_error_pkts:type_name -> ywrapper.UintValue
	289, // 457: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.State.Counters.out_forwarded_octets:type_name -> ywrapper.UintValue
	289, // 458: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.State.Counters.out_forwarded_pkts:type_name -> ywrapper.UintValue
	289, // 459: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.State.Counters.out_octets:type_name -> ywrapper.UintValue
	289, // 460: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.State.Counters.out_pkts:type_name -> ywrapper.UintValue
	288, // 461: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Unnumbered.Config.enabled:type_name -> ywrapper.BoolValue
	167, // 462: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Unnumbered.InterfaceRef.config:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Unnumbered.InterfaceRef.Config
	168, // 463: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Unnumbered.InterfaceRef.state:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Unnumbered.InterfaceRef.State
	288, // 464: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Unnumbered.State.enabled:type_name -> ywrapper.BoolValue
	287, // 465: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Unnumbered.InterfaceRef.Config.interface:type_name -> ywrapper.StringValue
	289, // 466: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Unnumbered.InterfaceRef.Config.subinterface:type_name -> ywrapper.UintValue
	287, // 467: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Unnumbered.InterfaceRef.State.interface:type_name -> ywrapper.StringValue
	289, // 468: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv4.Unnumbered.InterfaceRef.State.subinterface:type_name -> ywrapper.UintValue
	177, // 469: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.address:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.AddressKey
	188, // 470: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Autoconf.config:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Autoconf.Config
	189, // 471: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Autoconf.state:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Autoconf.State
	288, // 472: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Config.dhcp_client:type_name -> ywrapper.BoolValue
	289, // 473: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Config.dup_addr_detect_transmits:type_name -> ywrapper.UintValue
	288, // 474: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Config.enabled:type_name -> ywrapper.BoolValue
	289, // 475: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Config.mtu:type_name -> ywrapper.UintValue
	191, // 476: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Neighbors.neighbor:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Neighbors.NeighborKey
	194, // 477: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.RouterAdvertisement.config:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.RouterAdvertisement.Config
	195, // 478: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.RouterAdvertisement.state:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.RouterAdvertisement.State
	196, // 479: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.State.counters:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.State.Counters
	288, // 480: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.State.dhcp_client:type_name -> ywrapper.BoolValue
	289, // 481: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.State.dup_addr_detect_transmits:type_name -> ywrapper.UintValue
	288, // 482: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.State.enabled:type_name -> ywrapper.BoolValue
	289, // 483: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.State.mtu:type_name -> ywrapper.UintValue
	197, // 484: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Unnumbered.config:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Unnumbered.Config
	198, // 485: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Unnumbered.interface_ref:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Unnumbered.InterfaceRef
	199, // 486: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Unnumbered.state:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Unnumbered.State
	178, // 487: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address.config:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address.Config
	179, // 488: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address.state:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address.State
	180, // 489: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address.vrrp:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address.Vrrp
	176, // 490: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.AddressKey.address:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address
	287, // 491: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address.Config.ip:type_name -> ywrapper.StringValue
	289, // 492: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address.Config.prefix_length:type_name -> ywrapper.UintValue
	287, // 493: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address.State.ip:type_name -> ywrapper.StringValue
	296, // 494: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address.State.origin:type_name -> openconfig.OpenconfigIfIpIpAddressOrigin
	289, // 495: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address.State.prefix_length:type_name -> ywrapper.UintValue
	14,  // 496: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address.State.status:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address.State.Status
	182, // 497: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address.Vrrp.vrrp_group:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address.Vrrp.VrrpGroupKey
	183, // 498: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address.Vrrp.VrrpGroup.config:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address.Vrrp.VrrpGroup.Config
	184, // 499: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address.Vrrp.VrrpGroup.interface_tracking:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address.Vrrp.VrrpGroup.InterfaceTracking
	185, // 500: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address.Vrrp.VrrpGroup.state:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address.Vrrp.VrrpGroup.State
	181, // 501: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address.Vrrp.VrrpGroupKey.vrrp_group:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address.Vrrp.VrrpGroup
	288, // 502: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address.Vrrp.VrrpGroup.Config.accept_mode:type_name -> ywrapper.BoolValue
	289, // 503: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address.Vrrp.VrrpGroup.Config.advertisement_interval:type_name -> ywrapper.UintValue
	288, // 504: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address.Vrrp.VrrpGroup.Config.preempt:type_name -> ywrapper.BoolValue
	289, // 505: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address.Vrrp.VrrpGroup.Config.preempt_delay:type_name -> ywrapper.UintValue
	289, // 506: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address.Vrrp.VrrpGroup.Config.priority:type_name -> ywrapper.UintValue
	287, // 507: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address.Vrrp.VrrpGroup.Config.virtual_address:type_name -> ywrapper.StringValue
	287, // 508: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address.Vrrp.VrrpGroup.Config.virtual_link_local:type_name -> ywrapper.StringValue
	289, // 509: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address.Vrrp.VrrpGroup.Config.virtual_router_id:type_name -> ywrapper.UintValue
	186, // 510: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address.Vrrp.VrrpGroup.InterfaceTracking.config:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address.Vrrp.VrrpGroup.InterfaceTracking.Config
	187, // 511: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address.Vrrp.VrrpGroup.InterfaceTracking.state:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address.Vrrp.VrrpGroup.InterfaceTracking.State
	288, // 512: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address.Vrrp.VrrpGroup.State.accept_mode:type_name -> ywrapper.BoolValue
	289, // 513: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address.Vrrp.VrrpGroup.State.advertisement_interval:type_name -> ywrapper.UintValue
	289, // 514: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address.Vrrp.VrrpGroup.State.current_priority:type_name -> ywrapper.UintValue
	288, // 515: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address.Vrrp.VrrpGroup.State.preempt:type_name -> ywrapper.BoolValue
	289, // 516: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address.Vrrp.VrrpGroup.State.preempt_delay:type_name -> ywrapper.UintValue
	289, // 517: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address.Vrrp.VrrpGroup.State.priority:type_name -> ywrapper.UintValue
	287, // 518: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address.Vrrp.VrrpGroup.State.virtual_address:type_name -> ywrapper.StringValue
	287, // 519: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address.Vrrp.VrrpGroup.State.virtual_link_local:type_name -> ywrapper.StringValue
	289, // 520: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address.Vrrp.VrrpGroup.State.virtual_router_id:type_name -> ywrapper.UintValue
	289, // 521: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address.Vrrp.VrrpGroup.InterfaceTracking.Config.priority_decrement:type_name -> ywrapper.UintValue
	287, // 522: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address.Vrrp.VrrpGroup.InterfaceTracking.Config.track_interface:type_name -> ywrapper.StringValue
	289, // 523: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address.Vrrp.VrrpGroup.InterfaceTracking.State.priority_decrement:type_name -> ywrapper.UintValue
	287, // 524: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Addresses.Address.Vrrp.VrrpGroup.InterfaceTracking.State.track_interface:type_name -> ywrapper.StringValue
	288, // 525: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Autoconf.Config.create_global_addresses:type_name -> ywrapper.BoolValue
	288, // 526: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Autoconf.Config.create_temporary_addresses:type_name -> ywrapper.BoolValue
	289, // 527: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Autoconf.Config.temporary_preferred_lifetime:type_name -> ywrapper.UintValue
	289, // 528: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Autoconf.Config.temporary_valid_lifetime:type_name -> ywrapper.UintValue
	288, // 529: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Autoconf.State.create_global_addresses:type_name -> ywrapper.BoolValue
	288, // 530: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Autoconf.State.create_temporary_addresses:type_name -> ywrapper.BoolValue
	289, // 531: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Autoconf.State.temporary_preferred_lifetime:type_name -> ywrapper.UintValue
	289, // 532: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Autoconf.State.temporary_valid_lifetime:type_name -> ywrapper.UintValue
	192, // 533: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Neighbors.Neighbor.config:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Neighbors.Neighbor.Config
	193, // 534: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Neighbors.Neighbor.state:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Neighbors.Neighbor.State
	190, // 535: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Neighbors.NeighborKey.neighbor:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Neighbors.Neighbor
	287, // 536: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Neighbors.Neighbor.Config.ip:type_name -> ywrapper.StringValue
	287, // 537: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Neighbors.Neighbor.Config.link_layer_address:type_name -> ywrapper.StringValue
	287, // 538: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Neighbors.Neighbor.State.ip:type_name -> ywrapper.StringValue
	288, // 539: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Neighbors.Neighbor.State.is_router:type_name -> ywrapper.BoolValue
	287, // 540: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Neighbors.Neighbor.State.link_layer_address:type_name -> ywrapper.StringValue
	15,  // 541: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Neighbors.Neighbor.State.neighbor_state:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Neighbors.Neighbor.State.NeighborState
	297, // 542: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Neighbors.Neighbor.State.origin:type_name -> openconfig.OpenconfigIfIpNeighborOrigin
	289, // 543: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.RouterAdvertisement.Config.interval:type_name -> ywrapper.UintValue
	289, // 544: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.RouterAdvertisement.Config.lifetime:type_name -> ywrapper.UintValue
	288, // 545: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.RouterAdvertisement.Config.suppress:type_name -> ywrapper.BoolValue
	289, // 546: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.RouterAdvertisement.State.interval:type_name -> ywrapper.UintValue
	289, // 547: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.RouterAdvertisement.State.lifetime:type_name -> ywrapper.UintValue
	288, // 548: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.RouterAdvertisement.State.suppress:type_name -> ywrapper.BoolValue
	289, // 549: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.State.Counters.in_discarded_pkts:type_name -> ywrapper.UintValue
	289, // 550: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.State.Counters.in_error_pkts:type_name -> ywrapper.UintValue
	289, // 551: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.State.Counters.in_forwarded_octets:type_name -> ywrapper.UintValue
	289, // 552: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.State.Counters.in_forwarded_pkts:type_name -> ywrapper.UintValue
	289, // 553: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.State.Counters.in_octets:type_name -> ywrapper.UintValue
	289, // 554: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.State.Counters.in_pkts:type_name -> ywrapper.UintValue
	289, // 555: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.State.Counters.out_discarded_pkts:type_name -> ywrapper.UintValue
	289, // 556: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.State.Counters.out_error_pkts:type_name -> ywrapper.UintValue
	289, // 557: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.State.Counters.out_forwarded_octets:type_name -> ywrapper.UintValue
	289, // 558: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.State.Counters.out_forwarded_pkts:type_name -> ywrapper.UintValue
	289, // 559: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.State.Counters.out_octets:type_name -> ywrapper.UintValue
	289, // 560: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.State.Counters.out_pkts:type_name -> ywrapper.UintValue
	288, // 561: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Unnumbered.Config.enabled:type_name -> ywrapper.BoolValue
	200, // 562: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Unnumbered.InterfaceRef.config:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Unnumbered.InterfaceRef.Config
	201, // 563: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Unnumbered.InterfaceRef.state:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Unnumbered.InterfaceRef.State
	288, // 564: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Unnumbered.State.enabled:type_name -> ywrapper.BoolValue
	287, // 565: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Unnumbered.InterfaceRef.Config.interface:type_name -> ywrapper.StringValue
	289, // 566: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Unnumbered.InterfaceRef.Config.subinterface:type_name -> ywrapper.UintValue
	287, // 567: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Unnumbered.InterfaceRef.State.interface:type_name -> ywrapper.StringValue
	289, // 568: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Ipv6.Unnumbered.InterfaceRef.State.subinterface:type_name -> ywrapper.UintValue
	289, // 569: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.State.Counters.carrier_transitions:type_name -> ywrapper.UintValue
	289, // 570: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.State.Counters.in_broadcast_pkts:type_name -> ywrapper.UintValue
	289, // 571: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.State.Counters.in_discards:type_name -> ywrapper.UintValue
	289, // 572: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.State.Counters.in_errors:type_name -> ywrapper.UintValue
	289, // 573: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.State.Counters.in_fcs_errors:type_name -> ywrapper.UintValue
	289, // 574: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.State.Counters.in_multicast_pkts:type_name -> ywrapper.UintValue
	289, // 575: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.State.Counters.in_octets:type_name -> ywrapper.UintValue
	289, // 576: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.State.Counters.in_pkts:type_name -> ywrapper.UintValue
	289, // 577: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.State.Counters.in_unicast_pkts:type_name -> ywrapper.UintValue
	289, // 578: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.State.Counters.in_unknown_protos:type_name -> ywrapper.UintValue
	289, // 579: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.State.Counters.last_clear:type_name -> ywrapper.UintValue
	289, // 580: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.State.Counters.out_broadcast_pkts:type_name -> ywrapper.UintValue
	289, // 581: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.State.Counters.out_discards:type_name -> ywrapper.UintValue
	289, // 582: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.State.Counters.out_errors:type_name -> ywrapper.UintValue
	289, // 583: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.State.Counters.out_multicast_pkts:type_name -> ywrapper.UintValue
	289, // 584: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.State.Counters.out_octets:type_name -> ywrapper.UintValue
	289, // 585: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.State.Counters.out_pkts:type_name -> ywrapper.UintValue
	289, // 586: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.State.Counters.out_unicast_pkts:type_name -> ywrapper.UintValue
	208, // 587: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.EgressMapping.config:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.EgressMapping.Config
	209, // 588: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.EgressMapping.state:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.EgressMapping.State
	210, // 589: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.IngressMapping.config:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.IngressMapping.Config
	211, // 590: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.IngressMapping.state:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.IngressMapping.State
	212, // 591: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.double_tagged:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTagged
	213, // 592: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.double_tagged_inner_list:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTaggedInnerList
	214, // 593: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.double_tagged_inner_outer_range:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTaggedInnerOuterRange
	215, // 594: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.double_tagged_inner_range:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTaggedInnerRange
	216, // 595: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.double_tagged_outer_list:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTaggedOuterList
	217, // 596: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.double_tagged_outer_range:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTaggedOuterRange
	218, // 597: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.single_tagged:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.SingleTagged
	219, // 598: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.single_tagged_list:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.SingleTaggedList
	220, // 599: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.single_tagged_range:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.SingleTaggedRange
	290, // 600: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.EgressMapping.Config.tpid:type_name -> openconfig.OpenconfigVlanTypesTPIDTYPES
	289, // 601: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.EgressMapping.Config.vlan_id:type_name -> ywrapper.UintValue
	298, // 602: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.EgressMapping.Config.vlan_stack_action:type_name -> openconfig.OpenconfigVlanVlanStackAction
	290, // 603: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.EgressMapping.State.tpid:type_name -> openconfig.OpenconfigVlanTypesTPIDTYPES
	289, // 604: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.EgressMapping.State.vlan_id:type_name -> ywrapper.UintValue
	298, // 605: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.EgressMapping.State.vlan_stack_action:type_name -> openconfig.OpenconfigVlanVlanStackAction
	290, // 606: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.IngressMapping.Config.tpid:type_name -> openconfig.OpenconfigVlanTypesTPIDTYPES
	289, // 607: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.IngressMapping.Config.vlan_id:type_name -> ywrapper.UintValue
	298, // 608: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.IngressMapping.Config.vlan_stack_action:type_name -> openconfig.OpenconfigVlanVlanStackAction
	290, // 609: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.IngressMapping.State.tpid:type_name -> openconfig.OpenconfigVlanTypesTPIDTYPES
	289, // 610: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.IngressMapping.State.vlan_id:type_name -> ywrapper.UintValue
	298, // 611: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.IngressMapping.State.vlan_stack_action:type_name -> openconfig.OpenconfigVlanVlanStackAction
	221, // 612: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTagged.config:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTagged.Config
	222, // 613: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTagged.state:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTagged.State
	223, // 614: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTaggedInnerList.config:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTaggedInnerList.Config
	224, // 615: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTaggedInnerList.state:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTaggedInnerList.State
	225, // 616: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTaggedInnerOuterRange.config:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTaggedInnerOuterRange.Config
	226, // 617: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTaggedInnerOuterRange.state:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTaggedInnerOuterRange.State
	227, // 618: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTaggedInnerRange.config:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTaggedInnerRange.Config
	228, // 619: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTaggedInnerRange.state:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTaggedInnerRange.State
	229, // 620: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTaggedOuterList.config:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTaggedOuterList.Config
	230, // 621: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTaggedOuterList.state:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTaggedOuterList.State
	231, // 622: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTaggedOuterRange.config:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTaggedOuterRange.Config
	232, // 623: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTaggedOuterRange.state:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTaggedOuterRange.State
	233, // 624: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.SingleTagged.config:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.SingleTagged.Config
	234, // 625: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.SingleTagged.state:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.SingleTagged.State
	235, // 626: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.SingleTaggedList.config:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.SingleTaggedList.Config
	236, // 627: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.SingleTaggedList.state:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.SingleTaggedList.State
	237, // 628: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.SingleTaggedRange.config:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.SingleTaggedRange.Config
	238, // 629: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.SingleTaggedRange.state:type_name -> openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.SingleTaggedRange.State
	289, // 630: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTagged.Config.inner_vlan_id:type_name -> ywrapper.UintValue
	289, // 631: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTagged.Config.outer_vlan_id:type_name -> ywrapper.UintValue
	289, // 632: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTagged.State.inner_vlan_id:type_name -> ywrapper.UintValue
	289, // 633: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTagged.State.outer_vlan_id:type_name -> ywrapper.UintValue
	289, // 634: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTaggedInnerList.Config.inner_vlan_ids:type_name -> ywrapper.UintValue
	289, // 635: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTaggedInnerList.Config.outer_vlan_id:type_name -> ywrapper.UintValue
	289, // 636: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTaggedInnerList.State.inner_vlan_ids:type_name -> ywrapper.UintValue
	289, // 637: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTaggedInnerList.State.outer_vlan_id:type_name -> ywrapper.UintValue
	289, // 638: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTaggedInnerOuterRange.Config.inner_high_vlan_id:type_name -> ywrapper.UintValue
	289, // 639: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTaggedInnerOuterRange.Config.inner_low_vlan_id:type_name -> ywrapper.UintValue
	289, // 640: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTaggedInnerOuterRange.Config.outer_high_vlan_id:type_name -> ywrapper.UintValue
	289, // 641: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTaggedInnerOuterRange.Config.outer_low_vlan_id:type_name -> ywrapper.UintValue
	289, // 642: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTaggedInnerOuterRange.State.inner_high_vlan_id:type_name -> ywrapper.UintValue
	289, // 643: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTaggedInnerOuterRange.State.inner_low_vlan_id:type_name -> ywrapper.UintValue
	289, // 644: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTaggedInnerOuterRange.State.outer_high_vlan_id:type_name -> ywrapper.UintValue
	289, // 645: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTaggedInnerOuterRange.State.outer_low_vlan_id:type_name -> ywrapper.UintValue
	289, // 646: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTaggedInnerRange.Config.inner_high_vlan_id:type_name -> ywrapper.UintValue
	289, // 647: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTaggedInnerRange.Config.inner_low_vlan_id:type_name -> ywrapper.UintValue
	289, // 648: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTaggedInnerRange.Config.outer_vlan_id:type_name -> ywrapper.UintValue
	289, // 649: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTaggedInnerRange.State.inner_high_vlan_id:type_name -> ywrapper.UintValue
	289, // 650: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTaggedInnerRange.State.inner_low_vlan_id:type_name -> ywrapper.UintValue
	289, // 651: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTaggedInnerRange.State.outer_vlan_id:type_name -> ywrapper.UintValue
	289, // 652: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTaggedOuterList.Config.inner_vlan_id:type_name -> ywrapper.UintValue
	289, // 653: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTaggedOuterList.Config.outer_vlan_ids:type_name -> ywrapper.UintValue
	289, // 654: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTaggedOuterList.State.inner_vlan_id:type_name -> ywrapper.UintValue
	289, // 655: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTaggedOuterList.State.outer_vlan_ids:type_name -> ywrapper.UintValue
	289, // 656: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTaggedOuterRange.Config.inner_vlan_id:type_name -> ywrapper.UintValue
	289, // 657: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTaggedOuterRange.Config.outer_high_vlan_id:type_name -> ywrapper.UintValue
	289, // 658: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTaggedOuterRange.Config.outer_low_vlan_id:type_name -> ywrapper.UintValue
	289, // 659: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTaggedOuterRange.State.inner_vlan_id:type_name -> ywrapper.UintValue
	289, // 660: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTaggedOuterRange.State.outer_high_vlan_id:type_name -> ywrapper.UintValue
	289, // 661: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.DoubleTaggedOuterRange.State.outer_low_vlan_id:type_name -> ywrapper.UintValue
	289, // 662: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.SingleTagged.Config.vlan_id:type_name -> ywrapper.UintValue
	289, // 663: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.SingleTagged.State.vlan_id:type_name -> ywrapper.UintValue
	289, // 664: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.SingleTaggedList.Config.vlan_ids:type_name -> ywrapper.UintValue
	289, // 665: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.SingleTaggedList.State.vlan_ids:type_name -> ywrapper.UintValue
	289, // 666: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.SingleTaggedRange.Config.high_vlan_id:type_name -> ywrapper.UintValue
	289, // 667: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.SingleTaggedRange.Config.low_vlan_id:type_name -> ywrapper.UintValue
	289, // 668: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.SingleTaggedRange.State.high_vlan_id:type_name -> ywrapper.UintValue
	289, // 669: openconfig.Interfaces.Interface.Subinterfaces.Subinterface.Vlan.Match.SingleTaggedRange.State.low_vlan_id:type_name -> ywrapper.UintValue
	287, // 670: openconfig.Interfaces.Interface.Tunnel.Config.dst:type_name -> ywrapper.StringValue
	289, // 671: openconfig.Interfaces.Interface.Tunnel.Config.gre_key:type_name -> ywrapper.UintValue
	287, // 672: openconfig.Interfaces.Interface.Tunnel.Config.src:type_name -> ywrapper.StringValue
	289, // 673: openconfig.Interfaces.Interface.Tunnel.Config.ttl:type_name -> ywrapper.UintValue
	243, // 674: openconfig.Interfaces.Interface.Tunnel.Ipv4.addresses:type_name -> openconfig.Interfaces.Interface.Tunnel.Ipv4.Addresses
	244, // 675: openconfig.Interfaces.Interface.Tunnel.Ipv4.config:type_name -> openconfig.Interfaces.Interface.Tunnel.Ipv4.Config
	245, // 676: openconfig.Interfaces.Interface.Tunnel.Ipv4.neighbors:type_name -> openconfig.Interfaces.Interface.Tunnel.Ipv4.Neighbors
	246, // 677: openconfig.Interfaces.Interface.Tunnel.Ipv4.proxy_arp:type_name -> openconfig.Interfaces.Interface.Tunnel.Ipv4.ProxyArp
	247, // 678: openconfig.Interfaces.Interface.Tunnel.Ipv4.state:type_name -> openconfig.Interfaces.Interface.Tunnel.Ipv4.State
	248, // 679: openconfig.Interfaces.Interface.Tunnel.Ipv4.unnumbered:type_name -> openconfig.Interfaces.Interface.Tunnel.Ipv4.Unnumbered
	265, // 680: openconfig.Interfaces.Interface.Tunnel.Ipv6.addresses:type_name -> openconfig.Interfaces.Interface.Tunnel.Ipv6.Addresses
	266, // 681: openconfig.Interfaces.Interface.Tunnel.Ipv6.config:type_name -> openconfig.Interfaces.Interface.Tunnel.Ipv6.Config
	267, // 682: openconfig.Interfaces.Interface.Tunnel.Ipv6.neighbors:type_name -> openconfig.Interfaces.Interface.Tunnel.Ipv6.Neighbors
	268, // 683: openconfig.Interfaces.Interface.Tunnel.Ipv6.router_advertisement:type_name -> openconfig.Interfaces.Interface.Tunnel.Ipv6.RouterAdvertisement
	269, // 684: openconfig.Interfaces.Interface.Tunnel.Ipv6.state:type_name -> openconfig.Interfaces.Interface.Tunnel.Ipv6.State
	270, // 685: openconfig.Interfaces.Interface.Tunnel.Ipv6.unnumbered:type_name -> openconfig.Interfaces.Interface.Tunnel.Ipv6.Unnumbered
	287, // 686: openconfig.Interfaces.Interface.Tunnel.State.dst:type_name -> ywrapper.StringValue
	289, // 687: openconfig.Interfaces.Interface.Tunnel.State.gre_key:type_name -> ywrapper.UintValue
	287, // 688: openconfig.Interfaces.Interface.Tunnel.State.src:type_name -> ywrapper.StringValue
	289, // 689: openconfig.Interfaces.Interface.Tunnel.State.ttl:type_name -> ywrapper.UintValue
	250, // 690: openconfig.Interfaces.Interface.Tunnel.Ipv4.Addresses.address:type_name -> openconfig.Interfaces.Interface.Tunnel.Ipv4.Addresses.AddressKey
	288, // 691: openconfig.Interfaces.Interface.Tunnel.Ipv4.Config.dhcp_client:type_name -> ywrapper.BoolValue
	288, // 692: openconfig.Interfaces.Interface.Tunnel.Ipv4.Config.enabled:type_name -> ywrapper.BoolValue
	289, // 693: openconfig.Interfaces.Interface.Tunnel.Ipv4.Config.mtu:type_name -> ywrapper.UintValue
	254, // 694: openconfig.Interfaces.Interface.Tunnel.Ipv4.Neighbors.neighbor:type_name -> openconfig.Interfaces.Interface.Tunnel.Ipv4.Neighbors.NeighborKey
	257, // 695: openconfig.Interfaces.Interface.Tunnel.Ipv4.ProxyArp.config:type_name -> openconfig.Interfaces.Interface.Tunnel.Ipv4.ProxyArp.Config
	258, // 696: openconfig.Interfaces.Interface.Tunnel.Ipv4.ProxyArp.state:type_name -> openconfig.Interfaces.Interface.Tunnel.Ipv4.ProxyArp.State
	259, // 697: openconfig.Interfaces.Interface.Tunnel.Ipv4.State.counters:type_name -> openconfig.Interfaces.Interface.Tunnel.Ipv4.State.Counters
	288, // 698: openconfig.Interfaces.Interface.Tunnel.Ipv4.State.dhcp_client:type_name -> ywrapper.BoolValue
	288, // 699: openconfig.Interfaces.Interface.Tunnel.Ipv4.State.enabled:type_name -> ywrapper.BoolValue
	289, // 700: openconfig.Interfaces.Interface.Tunnel.Ipv4.State.mtu:type_name -> ywrapper.UintValue
	260, // 701: openconfig.Interfaces.Interface.Tunnel.Ipv4.Unnumbered.config:type_name -> openconfig.Interfaces.Interface.Tunnel.Ipv4.Unnumbered.Config
	261, // 702: openconfig.Interfaces.Interface.Tunnel.Ipv4.Unnumbered.interface_ref:type_name -> openconfig.Interfaces.Interface.Tunnel.Ipv4.Unnumbered.InterfaceRef
	262, // 703: openconfig.Interfaces.Interface.Tunnel.Ipv4.Unnumbered.state:type_name -> openconfig.Interfaces.Interface.Tunnel.Ipv4.Unnumbered.State
	251, // 704: openconfig.Interfaces.Interface.Tunnel.Ipv4.Addresses.Address.config:type_name -> openconfig.Interfaces.Interface.Tunnel.Ipv4.Addresses.Address.Config
	252, // 705: openconfig.Interfaces.Interface.Tunnel.Ipv4.Addresses.Address.state:type_name -> openconfig.Interfaces.Interface.Tunnel.Ipv4.Addresses.Address.State
	249, // 706: openconfig.Interfaces.Interface.Tunnel.Ipv4.Addresses.AddressKey.address:type_name -> openconfig.Interfaces.Interface.Tunnel.Ipv4.Addresses.Address
	287, // 707: openconfig.Interfaces.Interface.Tunnel.Ipv4.Addresses.Address.Config.ip:type_name -> ywrapper.StringValue
	289, // 708: openconfig.Interfaces.Interface.Tunnel.Ipv4.Addresses.Address.Config.prefix_length:type_name -> ywrapper.UintValue
	287, // 709: openconfig.Interfaces.Interface.Tunnel.Ipv4.Addresses.Address.State.ip:type_name -> ywrapper.StringValue
	296, // 710: openconfig.Interfaces.Interface.Tunnel.Ipv4.Addresses.Address.State.origin:type_name -> openconfig.OpenconfigIfIpIpAddressOrigin
	289, // 711: openconfig.Interfaces.Interface.Tunnel.Ipv4.Addresses.Address.State.prefix_length:type_name -> ywrapper.UintValue
	255, // 712: openconfig.Interfaces.Interface.Tunnel.Ipv4.Neighbors.Neighbor.config:type_name -> openconfig.Interfaces.Interface.Tunnel.Ipv4.Neighbors.Neighbor.Config
	256, // 713: openconfig.Interfaces.Interface.Tunnel.Ipv4.Neighbors.Neighbor.state:type_name -> openconfig.Interfaces.Interface.Tunnel.Ipv4.Neighbors.Neighbor.State
	253, // 714: openconfig.Interfaces.Interface.Tunnel.Ipv4.Neighbors.NeighborKey.neighbor:type_name -> openconfig.Interfaces.Interface.Tunnel.Ipv4.Neighbors.Neighbor
	287, // 715: openconfig.Interfaces.Interface.Tunnel.Ipv4.Neighbors.Neighbor.Config.ip:type_name -> ywrapper.StringValue
	287, // 716: openconfig.Interfaces.Interface.Tunnel.Ipv4.Neighbors.Neighbor.Config.link_layer_address:type_name -> ywrapper.StringValue
	287, // 717: openconfig.Interfaces.Interface.Tunnel.Ipv4.Neighbors.Neighbor.State.ip:type_name -> ywrapper.StringValue
	287, // 718: openconfig.Interfaces.Interface.Tunnel.Ipv4.Neighbors.Neighbor.State.link_layer_address:type_name -> ywrapper.StringValue
	297, // 719: openconfig.Interfaces.Interface.Tunnel.Ipv4.Neighbors.Neighbor.State.origin:type_name -> openconfig.OpenconfigIfIpNeighborOrigin
	18,  // 720: openconfig.Interfaces.Interface.Tunnel.Ipv4.ProxyArp.Config.mode:type_name -> openconfig.Interfaces.Interface.Tunnel.Ipv4.ProxyArp.Config.Mode
	19,  // 721: openconfig.Interfaces.Interface.Tunnel.Ipv4.ProxyArp.State.mode:type_name -> openconfig.Interfaces.Interface.Tunnel.Ipv4.ProxyArp.State.Mode
	289, // 722: openconfig.Interfaces.Interface.Tunnel.Ipv4.State.Counters.in_discarded_pkts:type_name -> ywrapper.UintValue
	289, // 723: openconfig.Interfaces.Interface.Tunnel.Ipv4.State.Counters.in_error_pkts:type_name -> ywrapper.UintValue
	289, // 724: openconfig.Interfaces.Interface.Tunnel.Ipv4.State.Counters.in_forwarded_octets:type_name -> ywrapper.UintValue
	289, // 725: openconfig.Interfaces.Interface.Tunnel.Ipv4.State.Counters.in_forwarded_pkts:type_name -> ywrapper.UintValue
	289, // 726: openconfig.Interfaces.Interface.Tunnel.Ipv4.State.Counters.in_octets:type_name -> ywrapper.UintValue
	289, // 727: openconfig.Interfaces.Interface.Tunnel.Ipv4.State.Counters.in_pkts:type_name -> ywrapper.UintValue
	289, // 728: openconfig.Interfaces.Interface.Tunnel.Ipv4.State.Counters.out_discarded_pkts:type_name -> ywrapper.UintValue
	289, // 729: openconfig.Interfaces.Interface.Tunnel.Ipv4.State.Counters.out_error_pkts:type_name -> ywrapper.UintValue
	289, // 730: openconfig.Interfaces.Interface.Tunnel.Ipv4.State.Counters.out_forwarded_octets:type_name -> ywrapper.UintValue
	289, // 731: openconfig.Interfaces.Interface.Tunnel.Ipv4.State.Counters.out_forwarded_pkts:type_name -> ywrapper.UintValue
	289, // 732: openconfig.Interfaces.Interface.Tunnel.Ipv4.State.Counters.out_octets:type_name -> ywrapper.UintValue
	289, // 733: openconfig.Interfaces.Interface.Tunnel.Ipv4.State.Counters.out_pkts:type_name -> ywrapper.UintValue
	288, // 734: openconfig.Interfaces.Interface.Tunnel.Ipv4.Unnumbered.Config.enabled:type_name -> ywrapper.BoolValue
	263, // 735: openconfig.Interfaces.Interface.Tunnel.Ipv4.Unnumbered.InterfaceRef.config:type_name -> openconfig.Interfaces.Interface.Tunnel.Ipv4.Unnumbered.InterfaceRef.Config
	264, // 736: openconfig.Interfaces.Interface.Tunnel.Ipv4.Unnumbered.InterfaceRef.state:type_name -> openconfig.Interfaces.Interface.Tunnel.Ipv4.Unnumbered.InterfaceRef.State
	288, // 737: openconfig.Interfaces.Interface.Tunnel.Ipv4.Unnumbered.State.enabled:type_name -> ywrapper.BoolValue
	287, // 738: openconfig.Interfaces.Interface.Tunnel.Ipv4.Unnumbered.InterfaceRef.Config.interface:type_name -> ywrapper.StringValue
	289, // 739: openconfig.Interfaces.Interface.Tunnel.Ipv4.Unnumbered.InterfaceRef.Config.subinterface:type_name -> ywrapper.UintValue
	287, // 740: openconfig.Interfaces.Interface.Tunnel.Ipv4.Unnumbered.InterfaceRef.State.interface:type_name -> ywrapper.StringValue
	289, // 741: openconfig.Interfaces.Interface.Tunnel.Ipv4.Unnumbered.InterfaceRef.State.subinterface:type_name -> ywrapper.UintValue
	272, // 742: openconfig.Interfaces.Interface.Tunnel.Ipv6.Addresses.address:type_name -> openconfig.Interfaces.Interface.Tunnel.Ipv6.Addresses.AddressKey
	288, // 743: openconfig.Interfaces.Interface.Tunnel.Ipv6.Config.dhcp_client:type_name -> ywrapper.BoolValue
	289, // 744: openconfig.Interfaces.Interface.Tunnel.Ipv6.Config.dup_addr_detect_transmits:type_name -> ywrapper.UintValue
	288, // 745: openconfig.Interfaces.Interface.Tunnel.Ipv6.Config.enabled:type_name -> ywrapper.BoolValue
	289, // 746: openconfig.Interfaces.Interface.Tunnel.Ipv6.Config.mtu:type_name -> ywrapper.UintValue
	276, // 747: openconfig.Interfaces.Interface.Tunnel.Ipv6.Neighbors.neighbor:type_name -> openconfig.Interfaces.Interface.Tunnel.Ipv6.Neighbors.NeighborKey
	279, // 748: openconfig.Interfaces.Interface.Tunnel.Ipv6.RouterAdvertisement.config:type_name -> openconfig.Interfaces.Interface.Tunnel.Ipv6.RouterAdvertisement.Config
	280, // 749: openconfig.Interfaces.Interface.Tunnel.Ipv6.RouterAdvertisement.state:type_name -> openconfig.Interfaces.Interface.Tunnel.Ipv6.RouterAdvertisement.State
	281, // 750: openconfig.Interfaces.Interface.Tunnel.Ipv6.State.counters:type_name -> openconfig.Interfaces.Interface.Tunnel.Ipv6.State.Counters
	288, // 751: openconfig.Interfaces.Interface.Tunnel.Ipv6.State.dhcp_client:type_name -> ywrapper.BoolValue
	289, // 752: openconfig.Interfaces.Interface.Tunnel.Ipv6.State.dup_addr_detect_transmits:type_name -> ywrapper.UintValue
	288, // 753: openconfig.Interfaces.Interface.Tunnel.Ipv6.State.enabled:type_name -> ywrapper.BoolValue
	289, // 754: openconfig.Interfaces.Interface.Tunnel.Ipv6.State.mtu:type_name -> ywrapper.UintValue
	282, // 755: openconfig.Interfaces.Interface.Tunnel.Ipv6.Unnumbered.config:type_name -> openconfig.Interfaces.Interface.Tunnel.Ipv6.Unnumbered.Config
	283, // 756: openconfig.Interfaces.Interface.Tunnel.Ipv6.Unnumbered.interface_ref:type_name -> openconfig.Interfaces.Interface.Tunnel.Ipv6.Unnumbered.InterfaceRef
	284, // 757: openconfig.Interfaces.Interface.Tunnel.Ipv6.Unnumbered.state:type_name -> openconfig.Interfaces.Interface.Tunnel.Ipv6.Unnumbered.State
	273, // 758: openconfig.Interfaces.Interface.Tunnel.Ipv6.Addresses.Address.config:type_name -> openconfig.Interfaces.Interface.Tunnel.Ipv6.Addresses.Address.Config
	274, // 759: openconfig.Interfaces.Interface.Tunnel.Ipv6.Addresses.Address.state:type_name -> openconfig.Interfaces.Interface.Tunnel.Ipv6.Addresses.Address.State
	271, // 760: openconfig.Interfaces.Interface.Tunnel.Ipv6.Addresses.AddressKey.address:type_name -> openconfig.Interfaces.Interface.Tunnel.Ipv6.Addresses.Address
	287, // 761: openconfig.Interfaces.Interface.Tunnel.Ipv6.Addresses.Address.Config.ip:type_name -> ywrapper.StringValue
	289, // 762: openconfig.Interfaces.Interface.Tunnel.Ipv6.Addresses.Address.Config.prefix_length:type_name -> ywrapper.UintValue
	287, // 763: openconfig.Interfaces.Interface.Tunnel.Ipv6.Addresses.Address.State.ip:type_name -> ywrapper.StringValue
	296, // 764: openconfig.Interfaces.Interface.Tunnel.Ipv6.Addresses.Address.State.origin:type_name -> openconfig.OpenconfigIfIpIpAddressOrigin
	289, // 765: openconfig.Interfaces.Interface.Tunnel.Ipv6.Addresses.Address.State.prefix_length:type_name -> ywrapper.UintValue
	20,  // 766: openconfig.Interfaces.Interface.Tunnel.Ipv6.Addresses.Address.State.status:type_name -> openconfig.Interfaces.Interface.Tunnel.Ipv6.Addresses.Address.State.Status
	277, // 767: openconfig.Interfaces.Interface.Tunnel.Ipv6.Neighbors.Neighbor.config:type_name -> openconfig.Interfaces.Interface.Tunnel.Ipv6.Neighbors.Neighbor.Config
	278, // 768: openconfig.Interfaces.Interface.Tunnel.Ipv6.Neighbors.Neighbor.state:type_name -> openconfig.Interfaces.Interface.Tunnel.Ipv6.Neighbors.Neighbor.State
	275, // 769: openconfig.Interfaces.Interface.Tunnel.Ipv6.Neighbors.NeighborKey.neighbor:type_name -> openconfig.Interfaces.Interface.Tunnel.Ipv6.Neighbors.Neighbor
	287, // 770: openconfig.Interfaces.Interface.Tunnel.Ipv6.Neighbors.Neighbor.Config.ip:type_name -> ywrapper.StringValue
	287, // 771: openconfig.Interfaces.Interface.Tunnel.Ipv6.Neighbors.Neighbor.Config.link_layer_address:type_name -> ywrapper.StringValue
	287, // 772: openconfig.Interfaces.Interface.Tunnel.Ipv6.Neighbors.Neighbor.State.ip:type_name -> ywrapper.StringValue
	288, // 773: openconfig.Interfaces.Interface.Tunnel.Ipv6.Neighbors.Neighbor.State.is_router:type_name -> ywrapper.BoolValue
	287, // 774: openconfig.Interfaces.Interface.Tunnel.Ipv6.Neighbors.Neighbor.State.link_layer_address:type_name -> ywrapper.StringValue
	21,  // 775: openconfig.Interfaces.Interface.Tunnel.Ipv6.Neighbors.Neighbor.State.neighbor_state:type_name -> openconfig.Interfaces.Interface.Tunnel.Ipv6.Neighbors.Neighbor.State.NeighborState
	297, // 776: openconfig.Interfaces.Interface.Tunnel.Ipv6.Neighbors.Neighbor.State.origin:type_name -> openconfig.OpenconfigIfIpNeighborOrigin
	289, // 777: openconfig.Interfaces.Interface.Tunnel.Ipv6.RouterAdvertisement.Config.interval:type_name -> ywrapper.UintValue
	289, // 778: openconfig.Interfaces.Interface.Tunnel.Ipv6.RouterAdvertisement.Config.lifetime:type_name -> ywrapper.UintValue
	288, // 779: openconfig.Interfaces.Interface.Tunnel.Ipv6.RouterAdvertisement.Config.suppress:type_name -> ywrapper.BoolValue
	289, // 780: openconfig.Interfaces.Interface.Tunnel.Ipv6.RouterAdvertisement.State.interval:type_name -> ywrapper.UintValue
	289, // 781: openconfig.Interfaces.Interface.Tunnel.Ipv6.RouterAdvertisement.State.lifetime:type_name -> ywrapper.UintValue
	288, // 782: openconfig.Interfaces.Interface.Tunnel.Ipv6.RouterAdvertisement.State.suppress:type_name -> ywrapper.BoolValue
	289, // 783: openconfig.Interfaces.Interface.Tunnel.Ipv6.State.Counters.in_discarded_pkts:type_name -> ywrapper.UintValue
	289, // 784: openconfig.Interfaces.Interface.Tunnel.Ipv6.State.Counters.in_error_pkts:type_name -> ywrapper.UintValue
	289, // 785: openconfig.Interfaces.Interface.Tunnel.Ipv6.State.Counters.in_forwarded_octets:type_name -> ywrapper.UintValue
	289, // 786: openconfig.Interfaces.Interface.Tunnel.Ipv6.State.Counters.in_forwarded_pkts:type_name -> ywrapper.UintValue
	289, // 787: openconfig.Interfaces.Interface.Tunnel.Ipv6.State.Counters.in_octets:type_name -> ywrapper.UintValue
	289, // 788: openconfig.Interfaces.Interface.Tunnel.Ipv6.State.Counters.in_pkts:type_name -> ywrapper.UintValue
	289, // 789: openconfig.Interfaces.Interface.Tunnel.Ipv6.State.Counters.out_discarded_pkts:type_name -> ywrapper.UintValue
	289, // 790: openconfig.Interfaces.Interface.Tunnel.Ipv6.State.Counters.out_error_pkts:type_name -> ywrapper.UintValue
	289, // 791: openconfig.Interfaces.Interface.Tunnel.Ipv6.State.Counters.out_forwarded_octets:type_name -> ywrapper.UintValue
	289, // 792: openconfig.Interfaces.Interface.Tunnel.Ipv6.State.Counters.out_forwarded_pkts:type_name -> ywrapper.UintValue
	289, // 793: openconfig.Interfaces.Interface.Tunnel.Ipv6.State.Counters.out_octets:type_name -> ywrapper.UintValue
	289, // 794: openconfig.Interfaces.Interface.Tunnel.Ipv6.State.Counters.out_pkts:type_name -> ywrapper.UintValue
	288, // 795: openconfig.Interfaces.Interface.Tunnel.Ipv6.Unnumbered.Config.enabled:type_name -> ywrapper.BoolValue
	285, // 796: openconfig.Interfaces.Interface.Tunnel.Ipv6.Unnumbered.InterfaceRef.config:type_name -> openconfig.Interfaces.Interface.Tunnel.Ipv6.Unnumbered.InterfaceRef.Config
	286, // 797: openconfig.Interfaces.Interface.Tunnel.Ipv6.Unnumbered.InterfaceRef.state:type_name -> openconfig.Interfaces.Interface.Tunnel.Ipv6.Unnumbered.InterfaceRef.State
	288, // 798: openconfig.Interfaces.Interface.Tunnel.Ipv6.Unnumbered.State.enabled:type_name -> ywrapper.BoolValue
	287, // 799: openconfig.Interfaces.Interface.Tunnel.Ipv6.Unnumbered.InterfaceRef.Config.interface:type_name -> ywrapper.StringValue
	289, // 800: openconfig.Interfaces.Interface.Tunnel.Ipv6.Unnumbered.InterfaceRef.Config.subinterface:type_name -> ywrapper.UintValue
	287, // 801: openconfig.Interfaces.Interface.Tunnel.Ipv6.Unnumbered.InterfaceRef.State.interface:type_name -> ywrapper.StringValue
	289, // 802: openconfig.Interfaces.Interface.Tunnel.Ipv6.Unnumbered.InterfaceRef.State.subinterface:type_name -> ywrapper.UintValue
	803, // [803:803] is the sub-list for method output_type
	803, // [803:803] is the sub-list for method input_type
	803, // [803:803] is the sub-list for extension type_name
	803, // [803:803] is the sub-list for extension extendee
	0,   // [0:803] is the sub-list for field type_name
}

func init() { file_openconfig_interfaces_proto_init() }
func file_openconfig_interfaces_proto_init() {
	if File_openconfig_interfaces_proto != nil {
		return
	}
	file_openconfig_enums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_openconfig_interfaces_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_InterfaceKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Aggregation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Ethernet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_HoldTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_RoutedVlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Sonet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Tunnel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Aggregation_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Aggregation_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Aggregation_SwitchedVlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Aggregation_SwitchedVlan_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Aggregation_SwitchedVlan_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Aggregation_SwitchedVlan_Config_TrunkVlansUnion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Aggregation_SwitchedVlan_State_TrunkVlansUnion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Ethernet_AuthenticatedSessions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Ethernet_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Ethernet_Dot1X); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Ethernet_Poe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Ethernet_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Ethernet_SwitchedVlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSessionKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Ethernet_AuthenticatedSessions_AuthenticatedSession_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Ethernet_Dot1X_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Ethernet_Dot1X_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Ethernet_Poe_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Ethernet_Poe_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Ethernet_State_Counters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Ethernet_State_Counters_InDistribution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Ethernet_SwitchedVlan_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Ethernet_SwitchedVlan_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Ethernet_SwitchedVlan_Config_TrunkVlansUnion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanNameKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Ethernet_SwitchedVlan_Dot1XVlanMap_VlanName_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Ethernet_SwitchedVlan_State_TrunkVlansUnion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_HoldTime_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_HoldTime_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_RoutedVlan_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_RoutedVlan_Ipv4); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_RoutedVlan_Ipv6); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_RoutedVlan_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_RoutedVlan_Ipv4_Addresses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_RoutedVlan_Ipv4_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_RoutedVlan_Ipv4_Neighbors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_RoutedVlan_Ipv4_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_RoutedVlan_Ipv4_Addresses_AddressKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroupKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_RoutedVlan_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_RoutedVlan_Ipv4_Neighbors_Neighbor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_RoutedVlan_Ipv4_Neighbors_NeighborKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_RoutedVlan_Ipv4_Neighbors_Neighbor_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_RoutedVlan_Ipv4_Neighbors_Neighbor_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_RoutedVlan_Ipv4_ProxyArp_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_RoutedVlan_Ipv4_State_Counters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_RoutedVlan_Ipv6_Addresses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_RoutedVlan_Ipv6_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_RoutedVlan_Ipv6_Neighbors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_RoutedVlan_Ipv6_RouterAdvertisement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_RoutedVlan_Ipv6_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_RoutedVlan_Ipv6_Addresses_AddressKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroupKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_RoutedVlan_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_NeighborKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_RoutedVlan_Ipv6_Neighbors_Neighbor_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_RoutedVlan_Ipv6_RouterAdvertisement_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_RoutedVlan_Ipv6_RouterAdvertisement_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_RoutedVlan_Ipv6_State_Counters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_State_Counters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_SubinterfaceKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_AddressKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroupKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_NeighborKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Neighbors_Neighbor_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_ProxyArp_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_State_Counters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered_InterfaceRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered_InterfaceRef_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv4_Unnumbered_InterfaceRef_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Autoconf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_AddressKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroupKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Addresses_Address_Vrrp_VrrpGroup_InterfaceTracking_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Autoconf_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Autoconf_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_NeighborKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Neighbors_Neighbor_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_RouterAdvertisement_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_State_Counters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered_InterfaceRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered_InterfaceRef_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Ipv6_Unnumbered_InterfaceRef_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_State_Counters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[193].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[194].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[195].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[196].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[197].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[198].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[199].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[200].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[201].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[202].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[203].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[204].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[205].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[206].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[207].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[208].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[209].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[210].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[211].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[212].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[213].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[214].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[215].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[216].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[217].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Tunnel_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[218].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Tunnel_Ipv4); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[219].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Tunnel_Ipv6); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[220].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Tunnel_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[221].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Tunnel_Ipv4_Addresses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[222].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Tunnel_Ipv4_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[223].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Tunnel_Ipv4_Neighbors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[224].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Tunnel_Ipv4_ProxyArp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[225].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Tunnel_Ipv4_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[226].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Tunnel_Ipv4_Unnumbered); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[227].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Tunnel_Ipv4_Addresses_Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[228].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Tunnel_Ipv4_Addresses_AddressKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[229].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Tunnel_Ipv4_Addresses_Address_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[230].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Tunnel_Ipv4_Addresses_Address_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[231].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[232].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Tunnel_Ipv4_Neighbors_NeighborKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[233].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[234].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Tunnel_Ipv4_Neighbors_Neighbor_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[235].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Tunnel_Ipv4_ProxyArp_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[236].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Tunnel_Ipv4_ProxyArp_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[237].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Tunnel_Ipv4_State_Counters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[238].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Tunnel_Ipv4_Unnumbered_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[239].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Tunnel_Ipv4_Unnumbered_InterfaceRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[240].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Tunnel_Ipv4_Unnumbered_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[241].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Tunnel_Ipv4_Unnumbered_InterfaceRef_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[242].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Tunnel_Ipv4_Unnumbered_InterfaceRef_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[243].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Tunnel_Ipv6_Addresses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[244].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Tunnel_Ipv6_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[245].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Tunnel_Ipv6_Neighbors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[246].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[247].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Tunnel_Ipv6_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[248].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Tunnel_Ipv6_Unnumbered); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[249].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Tunnel_Ipv6_Addresses_Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[250].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Tunnel_Ipv6_Addresses_AddressKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[251].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[252].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Tunnel_Ipv6_Addresses_Address_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[253].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[254].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Tunnel_Ipv6_Neighbors_NeighborKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[255].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[256].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Tunnel_Ipv6_Neighbors_Neighbor_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[257].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[258].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Tunnel_Ipv6_RouterAdvertisement_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[259].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Tunnel_Ipv6_State_Counters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[260].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Tunnel_Ipv6_Unnumbered_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[261].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Tunnel_Ipv6_Unnumbered_InterfaceRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[262].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Tunnel_Ipv6_Unnumbered_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[263].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Tunnel_Ipv6_Unnumbered_InterfaceRef_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_interfaces_proto_msgTypes[264].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interfaces_Interface_Tunnel_Ipv6_Unnumbered_InterfaceRef_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_openconfig_interfaces_proto_msgTypes[28].OneofWrappers = []interface{}{
		(*Interfaces_Interface_Ethernet_Dot1X_Config_AuthFailVlanString)(nil),
		(*Interfaces_Interface_Ethernet_Dot1X_Config_AuthFailVlanUint64)(nil),
		(*Interfaces_Interface_Ethernet_Dot1X_Config_ServerFailVlanString)(nil),
		(*Interfaces_Interface_Ethernet_Dot1X_Config_ServerFailVlanUint64)(nil),
	}
	file_openconfig_interfaces_proto_msgTypes[29].OneofWrappers = []interface{}{
		(*Interfaces_Interface_Ethernet_Dot1X_State_AuthFailVlanString)(nil),
		(*Interfaces_Interface_Ethernet_Dot1X_State_AuthFailVlanUint64)(nil),
		(*Interfaces_Interface_Ethernet_Dot1X_State_ServerFailVlanString)(nil),
		(*Interfaces_Interface_Ethernet_Dot1X_State_ServerFailVlanUint64)(nil),
	}
	file_openconfig_interfaces_proto_msgTypes[45].OneofWrappers = []interface{}{
		(*Interfaces_Interface_RoutedVlan_Config_VlanString)(nil),
		(*Interfaces_Interface_RoutedVlan_Config_VlanUint64)(nil),
	}
	file_openconfig_interfaces_proto_msgTypes[48].OneofWrappers = []interface{}{
		(*Interfaces_Interface_RoutedVlan_State_VlanString)(nil),
		(*Interfaces_Interface_RoutedVlan_State_VlanUint64)(nil),
	}
	file_openconfig_interfaces_proto_msgTypes[181].OneofWrappers = []interface{}{
		(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Config_VlanIdString)(nil),
		(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Config_VlanIdUint64)(nil),
	}
	file_openconfig_interfaces_proto_msgTypes[185].OneofWrappers = []interface{}{
		(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_State_VlanIdString)(nil),
		(*Interfaces_Interface_Subinterfaces_Subinterface_Vlan_State_VlanIdUint64)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_openconfig_interfaces_proto_rawDesc,
			NumEnums:      22,
			NumMessages:   265,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_openconfig_interfaces_proto_goTypes,
		DependencyIndexes: file_openconfig_interfaces_proto_depIdxs,
		EnumInfos:         file_openconfig_interfaces_proto_enumTypes,
		MessageInfos:      file_openconfig_interfaces_proto_msgTypes,
	}.Build()
	File_openconfig_interfaces_proto = out.File
	file_openconfig_interfaces_proto_rawDesc = nil
	file_openconfig_interfaces_proto_goTypes = nil
	file_openconfig_interfaces_proto_depIdxs = nil
}
