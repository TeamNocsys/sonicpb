// openconfig.sonic_acl_enums is generated by proto_generator as a protobuf
// representation of a YANG schema.
//
// Input schema modules:
//  - ../api/yang/sonic/sonic-acl.yang
// Include paths:
//   - ../api/yang/sonic:../api/yang/public/third_party/...

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0
// 	protoc        v3.12.3
// source: sonic_acl_enums.proto

package openconfig

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/openconfig/ygot/proto/yext"
	_ "github.com/openconfig/ygot/proto/ywrapper"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// SonicAclAclTableType represents an enumerated type generated for the YANG enumerated type acl-table-type.
type SonicAclAclTableType int32

const (
	SonicAclAclTableType_SONICACLACLTABLETYPE_UNSET       SonicAclAclTableType = 0
	SonicAclAclTableType_SONICACLACLTABLETYPE_L2          SonicAclAclTableType = 1
	SonicAclAclTableType_SONICACLACLTABLETYPE_L3          SonicAclAclTableType = 2
	SonicAclAclTableType_SONICACLACLTABLETYPE_L3V6        SonicAclAclTableType = 3
	SonicAclAclTableType_SONICACLACLTABLETYPE_MIRROR      SonicAclAclTableType = 4
	SonicAclAclTableType_SONICACLACLTABLETYPE_MIRRORV6    SonicAclAclTableType = 5
	SonicAclAclTableType_SONICACLACLTABLETYPE_MIRROR_DSCP SonicAclAclTableType = 6
	SonicAclAclTableType_SONICACLACLTABLETYPE_CTRLPLANE   SonicAclAclTableType = 7
)

// Enum value maps for SonicAclAclTableType.
var (
	SonicAclAclTableType_name = map[int32]string{
		0: "SONICACLACLTABLETYPE_UNSET",
		1: "SONICACLACLTABLETYPE_L2",
		2: "SONICACLACLTABLETYPE_L3",
		3: "SONICACLACLTABLETYPE_L3V6",
		4: "SONICACLACLTABLETYPE_MIRROR",
		5: "SONICACLACLTABLETYPE_MIRRORV6",
		6: "SONICACLACLTABLETYPE_MIRROR_DSCP",
		7: "SONICACLACLTABLETYPE_CTRLPLANE",
	}
	SonicAclAclTableType_value = map[string]int32{
		"SONICACLACLTABLETYPE_UNSET":       0,
		"SONICACLACLTABLETYPE_L2":          1,
		"SONICACLACLTABLETYPE_L3":          2,
		"SONICACLACLTABLETYPE_L3V6":        3,
		"SONICACLACLTABLETYPE_MIRROR":      4,
		"SONICACLACLTABLETYPE_MIRRORV6":    5,
		"SONICACLACLTABLETYPE_MIRROR_DSCP": 6,
		"SONICACLACLTABLETYPE_CTRLPLANE":   7,
	}
)

func (x SonicAclAclTableType) Enum() *SonicAclAclTableType {
	p := new(SonicAclAclTableType)
	*p = x
	return p
}

func (x SonicAclAclTableType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SonicAclAclTableType) Descriptor() protoreflect.EnumDescriptor {
	return file_sonic_acl_enums_proto_enumTypes[0].Descriptor()
}

func (SonicAclAclTableType) Type() protoreflect.EnumType {
	return &file_sonic_acl_enums_proto_enumTypes[0]
}

func (x SonicAclAclTableType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SonicAclAclTableType.Descriptor instead.
func (SonicAclAclTableType) EnumDescriptor() ([]byte, []int) {
	return file_sonic_acl_enums_proto_rawDescGZIP(), []int{0}
}

// SonicAclIpType represents an enumerated type generated for the YANG enumerated type ip-type.
type SonicAclIpType int32

const (
	SonicAclIpType_SONICACLIPTYPE_UNSET    SonicAclIpType = 0
	SonicAclIpType_SONICACLIPTYPE_ANY      SonicAclIpType = 1
	SonicAclIpType_SONICACLIPTYPE_IP       SonicAclIpType = 2
	SonicAclIpType_SONICACLIPTYPE_NON_IP   SonicAclIpType = 3
	SonicAclIpType_SONICACLIPTYPE_IPV4     SonicAclIpType = 4
	SonicAclIpType_SONICACLIPTYPE_IPV6     SonicAclIpType = 5
	SonicAclIpType_SONICACLIPTYPE_IPv4ANY  SonicAclIpType = 6
	SonicAclIpType_SONICACLIPTYPE_NON_IP4  SonicAclIpType = 7
	SonicAclIpType_SONICACLIPTYPE_IPv6ANY  SonicAclIpType = 8
	SonicAclIpType_SONICACLIPTYPE_NON_IPv6 SonicAclIpType = 9
	SonicAclIpType_SONICACLIPTYPE_ARP      SonicAclIpType = 10
)

// Enum value maps for SonicAclIpType.
var (
	SonicAclIpType_name = map[int32]string{
		0:  "SONICACLIPTYPE_UNSET",
		1:  "SONICACLIPTYPE_ANY",
		2:  "SONICACLIPTYPE_IP",
		3:  "SONICACLIPTYPE_NON_IP",
		4:  "SONICACLIPTYPE_IPV4",
		5:  "SONICACLIPTYPE_IPV6",
		6:  "SONICACLIPTYPE_IPv4ANY",
		7:  "SONICACLIPTYPE_NON_IP4",
		8:  "SONICACLIPTYPE_IPv6ANY",
		9:  "SONICACLIPTYPE_NON_IPv6",
		10: "SONICACLIPTYPE_ARP",
	}
	SonicAclIpType_value = map[string]int32{
		"SONICACLIPTYPE_UNSET":    0,
		"SONICACLIPTYPE_ANY":      1,
		"SONICACLIPTYPE_IP":       2,
		"SONICACLIPTYPE_NON_IP":   3,
		"SONICACLIPTYPE_IPV4":     4,
		"SONICACLIPTYPE_IPV6":     5,
		"SONICACLIPTYPE_IPv4ANY":  6,
		"SONICACLIPTYPE_NON_IP4":  7,
		"SONICACLIPTYPE_IPv6ANY":  8,
		"SONICACLIPTYPE_NON_IPv6": 9,
		"SONICACLIPTYPE_ARP":      10,
	}
)

func (x SonicAclIpType) Enum() *SonicAclIpType {
	p := new(SonicAclIpType)
	*p = x
	return p
}

func (x SonicAclIpType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SonicAclIpType) Descriptor() protoreflect.EnumDescriptor {
	return file_sonic_acl_enums_proto_enumTypes[1].Descriptor()
}

func (SonicAclIpType) Type() protoreflect.EnumType {
	return &file_sonic_acl_enums_proto_enumTypes[1]
}

func (x SonicAclIpType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SonicAclIpType.Descriptor instead.
func (SonicAclIpType) EnumDescriptor() ([]byte, []int) {
	return file_sonic_acl_enums_proto_rawDescGZIP(), []int{1}
}

// SonicAclPacketAction represents an enumerated type generated for the YANG enumerated type packet-action.
type SonicAclPacketAction int32

const (
	SonicAclPacketAction_SONICACLPACKETACTION_UNSET    SonicAclPacketAction = 0
	SonicAclPacketAction_SONICACLPACKETACTION_DROP     SonicAclPacketAction = 1
	SonicAclPacketAction_SONICACLPACKETACTION_FORWARD  SonicAclPacketAction = 2
	SonicAclPacketAction_SONICACLPACKETACTION_REDIRECT SonicAclPacketAction = 3
)

// Enum value maps for SonicAclPacketAction.
var (
	SonicAclPacketAction_name = map[int32]string{
		0: "SONICACLPACKETACTION_UNSET",
		1: "SONICACLPACKETACTION_DROP",
		2: "SONICACLPACKETACTION_FORWARD",
		3: "SONICACLPACKETACTION_REDIRECT",
	}
	SonicAclPacketAction_value = map[string]int32{
		"SONICACLPACKETACTION_UNSET":    0,
		"SONICACLPACKETACTION_DROP":     1,
		"SONICACLPACKETACTION_FORWARD":  2,
		"SONICACLPACKETACTION_REDIRECT": 3,
	}
)

func (x SonicAclPacketAction) Enum() *SonicAclPacketAction {
	p := new(SonicAclPacketAction)
	*p = x
	return p
}

func (x SonicAclPacketAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SonicAclPacketAction) Descriptor() protoreflect.EnumDescriptor {
	return file_sonic_acl_enums_proto_enumTypes[2].Descriptor()
}

func (SonicAclPacketAction) Type() protoreflect.EnumType {
	return &file_sonic_acl_enums_proto_enumTypes[2]
}

func (x SonicAclPacketAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SonicAclPacketAction.Descriptor instead.
func (SonicAclPacketAction) EnumDescriptor() ([]byte, []int) {
	return file_sonic_acl_enums_proto_rawDescGZIP(), []int{2}
}

// SonicPortAdminStatus represents an enumerated type generated for the YANG enumerated type admin-status.
type SonicPortAdminStatus int32

const (
	SonicPortAdminStatus_SONICPORTADMINSTATUS_UNSET SonicPortAdminStatus = 0
	SonicPortAdminStatus_SONICPORTADMINSTATUS_up    SonicPortAdminStatus = 1
	SonicPortAdminStatus_SONICPORTADMINSTATUS_down  SonicPortAdminStatus = 2
)

// Enum value maps for SonicPortAdminStatus.
var (
	SonicPortAdminStatus_name = map[int32]string{
		0: "SONICPORTADMINSTATUS_UNSET",
		1: "SONICPORTADMINSTATUS_up",
		2: "SONICPORTADMINSTATUS_down",
	}
	SonicPortAdminStatus_value = map[string]int32{
		"SONICPORTADMINSTATUS_UNSET": 0,
		"SONICPORTADMINSTATUS_up":    1,
		"SONICPORTADMINSTATUS_down":  2,
	}
)

func (x SonicPortAdminStatus) Enum() *SonicPortAdminStatus {
	p := new(SonicPortAdminStatus)
	*p = x
	return p
}

func (x SonicPortAdminStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SonicPortAdminStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_sonic_acl_enums_proto_enumTypes[3].Descriptor()
}

func (SonicPortAdminStatus) Type() protoreflect.EnumType {
	return &file_sonic_acl_enums_proto_enumTypes[3]
}

func (x SonicPortAdminStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SonicPortAdminStatus.Descriptor instead.
func (SonicPortAdminStatus) EnumDescriptor() ([]byte, []int) {
	return file_sonic_acl_enums_proto_rawDescGZIP(), []int{3}
}

// SonicPortchannelAdminStatus represents an enumerated type generated for the YANG enumerated type admin-status.
type SonicPortchannelAdminStatus int32

const (
	SonicPortchannelAdminStatus_SONICPORTCHANNELADMINSTATUS_UNSET SonicPortchannelAdminStatus = 0
	SonicPortchannelAdminStatus_SONICPORTCHANNELADMINSTATUS_up    SonicPortchannelAdminStatus = 1
	SonicPortchannelAdminStatus_SONICPORTCHANNELADMINSTATUS_down  SonicPortchannelAdminStatus = 2
)

// Enum value maps for SonicPortchannelAdminStatus.
var (
	SonicPortchannelAdminStatus_name = map[int32]string{
		0: "SONICPORTCHANNELADMINSTATUS_UNSET",
		1: "SONICPORTCHANNELADMINSTATUS_up",
		2: "SONICPORTCHANNELADMINSTATUS_down",
	}
	SonicPortchannelAdminStatus_value = map[string]int32{
		"SONICPORTCHANNELADMINSTATUS_UNSET": 0,
		"SONICPORTCHANNELADMINSTATUS_up":    1,
		"SONICPORTCHANNELADMINSTATUS_down":  2,
	}
)

func (x SonicPortchannelAdminStatus) Enum() *SonicPortchannelAdminStatus {
	p := new(SonicPortchannelAdminStatus)
	*p = x
	return p
}

func (x SonicPortchannelAdminStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SonicPortchannelAdminStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_sonic_acl_enums_proto_enumTypes[4].Descriptor()
}

func (SonicPortchannelAdminStatus) Type() protoreflect.EnumType {
	return &file_sonic_acl_enums_proto_enumTypes[4]
}

func (x SonicPortchannelAdminStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SonicPortchannelAdminStatus.Descriptor instead.
func (SonicPortchannelAdminStatus) EnumDescriptor() ([]byte, []int) {
	return file_sonic_acl_enums_proto_rawDescGZIP(), []int{4}
}

var File_sonic_acl_enums_proto protoreflect.FileDescriptor

var file_sonic_acl_enums_proto_rawDesc = []byte{
	0x0a, 0x15, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x5f, 0x61, 0x63, 0x6c, 0x5f, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x1a, 0x0e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x79, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2a,
	0xea, 0x02, 0x0a, 0x14, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x41, 0x63, 0x6c, 0x41, 0x63, 0x6c, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x4f, 0x4e, 0x49,
	0x43, 0x41, 0x43, 0x4c, 0x41, 0x43, 0x4c, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x17, 0x53, 0x4f, 0x4e, 0x49,
	0x43, 0x41, 0x43, 0x4c, 0x41, 0x43, 0x4c, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4c, 0x32, 0x10, 0x01, 0x1a, 0x05, 0x82, 0x41, 0x02, 0x4c, 0x32, 0x12, 0x22, 0x0a, 0x17,
	0x53, 0x4f, 0x4e, 0x49, 0x43, 0x41, 0x43, 0x4c, 0x41, 0x43, 0x4c, 0x54, 0x41, 0x42, 0x4c, 0x45,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x33, 0x10, 0x02, 0x1a, 0x05, 0x82, 0x41, 0x02, 0x4c, 0x33,
	0x12, 0x26, 0x0a, 0x19, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x41, 0x43, 0x4c, 0x41, 0x43, 0x4c, 0x54,
	0x41, 0x42, 0x4c, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x33, 0x56, 0x36, 0x10, 0x03, 0x1a,
	0x07, 0x82, 0x41, 0x04, 0x4c, 0x33, 0x56, 0x36, 0x12, 0x2a, 0x0a, 0x1b, 0x53, 0x4f, 0x4e, 0x49,
	0x43, 0x41, 0x43, 0x4c, 0x41, 0x43, 0x4c, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4d, 0x49, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x4d, 0x49,
	0x52, 0x52, 0x4f, 0x52, 0x12, 0x2e, 0x0a, 0x1d, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x41, 0x43, 0x4c,
	0x41, 0x43, 0x4c, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x52,
	0x52, 0x4f, 0x52, 0x56, 0x36, 0x10, 0x05, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x4d, 0x49, 0x52, 0x52,
	0x4f, 0x52, 0x56, 0x36, 0x12, 0x34, 0x0a, 0x20, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x41, 0x43, 0x4c,
	0x41, 0x43, 0x4c, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x44, 0x53, 0x43, 0x50, 0x10, 0x06, 0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x4d,
	0x49, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x44, 0x53, 0x43, 0x50, 0x12, 0x30, 0x0a, 0x1e, 0x53, 0x4f,
	0x4e, 0x49, 0x43, 0x41, 0x43, 0x4c, 0x41, 0x43, 0x4c, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x43, 0x54, 0x52, 0x4c, 0x50, 0x4c, 0x41, 0x4e, 0x45, 0x10, 0x07, 0x1a, 0x0c,
	0x82, 0x41, 0x09, 0x43, 0x54, 0x52, 0x4c, 0x50, 0x4c, 0x41, 0x4e, 0x45, 0x2a, 0x94, 0x03, 0x0a,
	0x0e, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x41, 0x63, 0x6c, 0x49, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x14, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x41, 0x43, 0x4c, 0x49, 0x50, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x12, 0x53, 0x4f, 0x4e,
	0x49, 0x43, 0x41, 0x43, 0x4c, 0x49, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4e, 0x59, 0x10,
	0x01, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x41, 0x4e, 0x59, 0x12, 0x1c, 0x0a, 0x11, 0x53, 0x4f, 0x4e,
	0x49, 0x43, 0x41, 0x43, 0x4c, 0x49, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x10, 0x02,
	0x1a, 0x05, 0x82, 0x41, 0x02, 0x49, 0x50, 0x12, 0x24, 0x0a, 0x15, 0x53, 0x4f, 0x4e, 0x49, 0x43,
	0x41, 0x43, 0x4c, 0x49, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f, 0x49, 0x50,
	0x10, 0x03, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x4e, 0x4f, 0x4e, 0x5f, 0x49, 0x50, 0x12, 0x20, 0x0a,
	0x13, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x41, 0x43, 0x4c, 0x49, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x50, 0x56, 0x34, 0x10, 0x04, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x49, 0x50, 0x56, 0x34, 0x12,
	0x20, 0x0a, 0x13, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x41, 0x43, 0x4c, 0x49, 0x50, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x10, 0x05, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x49, 0x50, 0x56,
	0x36, 0x12, 0x26, 0x0a, 0x16, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x41, 0x43, 0x4c, 0x49, 0x50, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x76, 0x34, 0x41, 0x4e, 0x59, 0x10, 0x06, 0x1a, 0x0a, 0x82,
	0x41, 0x07, 0x49, 0x50, 0x76, 0x34, 0x41, 0x4e, 0x59, 0x12, 0x26, 0x0a, 0x16, 0x53, 0x4f, 0x4e,
	0x49, 0x43, 0x41, 0x43, 0x4c, 0x49, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f,
	0x49, 0x50, 0x34, 0x10, 0x07, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x4e, 0x4f, 0x4e, 0x5f, 0x49, 0x50,
	0x34, 0x12, 0x26, 0x0a, 0x16, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x41, 0x43, 0x4c, 0x49, 0x50, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x76, 0x36, 0x41, 0x4e, 0x59, 0x10, 0x08, 0x1a, 0x0a, 0x82,
	0x41, 0x07, 0x49, 0x50, 0x76, 0x36, 0x41, 0x4e, 0x59, 0x12, 0x28, 0x0a, 0x17, 0x53, 0x4f, 0x4e,
	0x49, 0x43, 0x41, 0x43, 0x4c, 0x49, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f,
	0x49, 0x50, 0x76, 0x36, 0x10, 0x09, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x4e, 0x4f, 0x4e, 0x5f, 0x49,
	0x50, 0x76, 0x36, 0x12, 0x1e, 0x0a, 0x12, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x41, 0x43, 0x4c, 0x49,
	0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x52, 0x50, 0x10, 0x0a, 0x1a, 0x06, 0x82, 0x41, 0x03,
	0x41, 0x52, 0x50, 0x2a, 0xbc, 0x01, 0x0a, 0x14, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x41, 0x63, 0x6c,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x1a,
	0x53, 0x4f, 0x4e, 0x49, 0x43, 0x41, 0x43, 0x4c, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x19,
	0x53, 0x4f, 0x4e, 0x49, 0x43, 0x41, 0x43, 0x4c, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x10, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04,
	0x44, 0x52, 0x4f, 0x50, 0x12, 0x2c, 0x0a, 0x1c, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x41, 0x43, 0x4c,
	0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x4f, 0x52,
	0x57, 0x41, 0x52, 0x44, 0x10, 0x02, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x46, 0x4f, 0x52, 0x57, 0x41,
	0x52, 0x44, 0x12, 0x2e, 0x0a, 0x1d, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x41, 0x43, 0x4c, 0x50, 0x41,
	0x43, 0x4b, 0x45, 0x54, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x44, 0x49, 0x52,
	0x45, 0x43, 0x54, 0x10, 0x03, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x52, 0x45, 0x44, 0x49, 0x52, 0x45,
	0x43, 0x54, 0x2a, 0x82, 0x01, 0x0a, 0x14, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x50, 0x6f, 0x72, 0x74,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x1a, 0x53,
	0x4f, 0x4e, 0x49, 0x43, 0x50, 0x4f, 0x52, 0x54, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x17, 0x53,
	0x4f, 0x4e, 0x49, 0x43, 0x50, 0x4f, 0x52, 0x54, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x75, 0x70, 0x10, 0x01, 0x1a, 0x05, 0x82, 0x41, 0x02, 0x75, 0x70, 0x12,
	0x26, 0x0a, 0x19, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x50, 0x4f, 0x52, 0x54, 0x41, 0x44, 0x4d, 0x49,
	0x4e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x10, 0x02, 0x1a, 0x07,
	0x82, 0x41, 0x04, 0x64, 0x6f, 0x77, 0x6e, 0x2a, 0x9e, 0x01, 0x0a, 0x1b, 0x53, 0x6f, 0x6e, 0x69,
	0x63, 0x50, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x4f, 0x4e, 0x49, 0x43,
	0x50, 0x4f, 0x52, 0x54, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x41, 0x44, 0x4d, 0x49, 0x4e,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x29,
	0x0a, 0x1e, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x50, 0x4f, 0x52, 0x54, 0x43, 0x48, 0x41, 0x4e, 0x4e,
	0x45, 0x4c, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x75, 0x70,
	0x10, 0x01, 0x1a, 0x05, 0x82, 0x41, 0x02, 0x75, 0x70, 0x12, 0x2d, 0x0a, 0x20, 0x53, 0x4f, 0x4e,
	0x49, 0x43, 0x50, 0x4f, 0x52, 0x54, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x41, 0x44, 0x4d,
	0x49, 0x4e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x10, 0x02, 0x1a,
	0x07, 0x82, 0x41, 0x04, 0x64, 0x6f, 0x77, 0x6e, 0x42, 0x17, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x2e,
	0x6e, 0x6f, 0x63, 0x73, 0x79, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sonic_acl_enums_proto_rawDescOnce sync.Once
	file_sonic_acl_enums_proto_rawDescData = file_sonic_acl_enums_proto_rawDesc
)

func file_sonic_acl_enums_proto_rawDescGZIP() []byte {
	file_sonic_acl_enums_proto_rawDescOnce.Do(func() {
		file_sonic_acl_enums_proto_rawDescData = protoimpl.X.CompressGZIP(file_sonic_acl_enums_proto_rawDescData)
	})
	return file_sonic_acl_enums_proto_rawDescData
}

var file_sonic_acl_enums_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_sonic_acl_enums_proto_goTypes = []interface{}{
	(SonicAclAclTableType)(0),        // 0: openconfig.SonicAclAclTableType
	(SonicAclIpType)(0),              // 1: openconfig.SonicAclIpType
	(SonicAclPacketAction)(0),        // 2: openconfig.SonicAclPacketAction
	(SonicPortAdminStatus)(0),        // 3: openconfig.SonicPortAdminStatus
	(SonicPortchannelAdminStatus)(0), // 4: openconfig.SonicPortchannelAdminStatus
}
var file_sonic_acl_enums_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_sonic_acl_enums_proto_init() }
func file_sonic_acl_enums_proto_init() {
	if File_sonic_acl_enums_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sonic_acl_enums_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sonic_acl_enums_proto_goTypes,
		DependencyIndexes: file_sonic_acl_enums_proto_depIdxs,
		EnumInfos:         file_sonic_acl_enums_proto_enumTypes,
	}.Build()
	File_sonic_acl_enums_proto = out.File
	file_sonic_acl_enums_proto_rawDesc = nil
	file_sonic_acl_enums_proto_goTypes = nil
	file_sonic_acl_enums_proto_depIdxs = nil
}
