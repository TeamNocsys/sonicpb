// openconfig.openconfig_spanning_tree is generated by proto_generator as a protobuf
// representation of a YANG schema.
//
// Input schema modules:
//  - ../api/yang/public/doc/openconfig-example.yang
//  - ../api/yang/public/third_party/ietf/iana-if-type.yang
//  - ../api/yang/public/third_party/ietf/ietf-interfaces.yang
//  - ../api/yang/public/third_party/ietf/ietf-yang-types.yang
//  - ../api/yang/public/third_party/ietf/ietf-inet-types.yang
//  - ../api/yang/public/release/models/bfd/openconfig-bfd.yang
//  - ../api/yang/public/release/models/vlan/openconfig-vlan.yang
//  - ../api/yang/public/release/models/vlan/openconfig-vlan-types.yang
//  - ../api/yang/public/release/models/wifi/openconfig-access-points.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-mac.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-types.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-phy.yang
//  - ../api/yang/public/release/models/wifi/openconfig-ap-interfaces.yang
//  - ../api/yang/public/release/models/wifi/openconfig-ap-manager.yang
//  - ../api/yang/public/release/models/macsec/openconfig-macsec.yang
//  - ../api/yang/public/release/models/macsec/openconfig-macsec-types.yang
//  - ../api/yang/public/release/models/stp/openconfig-spanning-tree-types.yang
//  - ../api/yang/public/release/models/stp/openconfig-spanning-tree.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-errors.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-peer-group.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-types.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-global.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-neighbor.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common-structure.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-policy.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common-multiprotocol.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-types.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-port.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-fan.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-linecard.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-ext.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-cpu.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-psu.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-transceiver.yang
//  - ../api/yang/public/release/models/multicast/openconfig-pim-types.yang
//  - ../api/yang/public/release/models/multicast/openconfig-igmp-types.yang
//  - ../api/yang/public/release/models/multicast/openconfig-igmp.yang
//  - ../api/yang/public/release/models/multicast/openconfig-pim.yang
//  - ../api/yang/public/release/models/catalog/openconfig-module-catalog.yang
//  - ../api/yang/public/release/models/catalog/openconfig-catalog-types.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-interfaces.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-8021x.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-types.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-aggregate.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-poe.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-tunnel.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ip.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ethernet.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ethernet-ext.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ip-ext.yang
//  - ../api/yang/public/release/models/acl/openconfig-packet-match-types.yang
//  - ../api/yang/public/release/models/acl/openconfig-packet-match.yang
//  - ../api/yang/public/release/models/acl/openconfig-acl.yang
//  - ../api/yang/public/release/models/system/openconfig-license.yang
//  - ../api/yang/public/release/models/system/openconfig-system.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-radius.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa.yang
//  - ../api/yang/public/release/models/system/openconfig-system-management.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-types.yang
//  - ../api/yang/public/release/models/system/openconfig-procmon.yang
//  - ../api/yang/public/release/models/system/openconfig-messages.yang
//  - ../api/yang/public/release/models/system/openconfig-system-terminal.yang
//  - ../api/yang/public/release/models/system/openconfig-system-logging.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-tacacs.yang
//  - ../api/yang/public/release/models/system/openconfig-alarms.yang
//  - ../api/yang/public/release/models/system/openconfig-alarm-types.yang
//  - ../api/yang/public/release/models/policy/openconfig-policy-types.yang
//  - ../api/yang/public/release/models/policy/openconfig-routing-policy.yang
//  - ../api/yang/public/release/models/lacp/openconfig-lacp.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-wavelength-router.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-optical-amplifier.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-protection.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-channel-monitor.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-connectivity.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-optical-attenuator.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-common.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-types.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-terminal-device.yang
//  - ../api/yang/public/release/models/telemetry/openconfig-telemetry-types.yang
//  - ../api/yang/public/release/models/telemetry/openconfig-telemetry.yang
//  - ../api/yang/public/release/models/openflow/openconfig-openflow.yang
//  - ../api/yang/public/release/models/openflow/openconfig-openflow-types.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-tables.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-ext.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-table-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-shared-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-types.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-types.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-elements.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-interfaces.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-srte.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-forwarding-policies.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-interfaces.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-path-groups.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
//  - ../api/yang/public/release/models/relay-agent/openconfig-relay-agent.yang
//  - ../api/yang/public/release/models/lldp/openconfig-lldp.yang
//  - ../api/yang/public/release/models/lldp/openconfig-lldp-types.yang
//  - ../api/yang/public/release/models/openconfig-extensions.yang
//  - ../api/yang/public/release/models/types/openconfig-yang-types.yang
//  - ../api/yang/public/release/models/types/openconfig-inet-types.yang
//  - ../api/yang/public/release/models/types/openconfig-types.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-srte-policy.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-rsvp-sr-ext.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-segment-routing-types.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-segment-routing.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-types.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-igp.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-te.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-rsvp.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-static.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-sr.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-ldp.yang
//  - ../api/yang/public/release/models/probes/openconfig-probes-types.yang
//  - ../api/yang/public/release/models/probes/openconfig-probes.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-lsp.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-lsdb-types.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-policy.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-types.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-routing.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-area.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospf-policy.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-common.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-global.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-area-interface.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-lsdb.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospf-types.yang
//  - ../api/yang/public/release/models/local-routing/openconfig-local-routing.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-l3.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-l2.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-policy.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-types.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-mpls.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-common.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-types.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ipv6.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-pf.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-network-instance.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ipv4.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ethernet.yang

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        (unknown)
// source: openconfig_spanning_tree.proto

package openconfig

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/openconfig/ygot/proto/yext"
	ywrapper "github.com/openconfig/ygot/proto/ywrapper"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Stp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Global     *Stp_Global     `protobuf:"bytes,195120946,opt,name=global,proto3" json:"global,omitempty"`
	Interfaces *Stp_Interfaces `protobuf:"bytes,384420651,opt,name=interfaces,proto3" json:"interfaces,omitempty"`
	Mstp       *Stp_Mstp       `protobuf:"bytes,306126631,opt,name=mstp,proto3" json:"mstp,omitempty"`
	RapidPvst  *Stp_RapidPvst  `protobuf:"bytes,113534595,opt,name=rapid_pvst,json=rapidPvst,proto3" json:"rapid_pvst,omitempty"`
	Rstp       *Stp_Rstp       `protobuf:"bytes,91792426,opt,name=rstp,proto3" json:"rstp,omitempty"`
}

func (x *Stp) Reset() {
	*x = Stp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_spanning_tree_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stp) ProtoMessage() {}

func (x *Stp) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_spanning_tree_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stp.ProtoReflect.Descriptor instead.
func (*Stp) Descriptor() ([]byte, []int) {
	return file_openconfig_spanning_tree_proto_rawDescGZIP(), []int{0}
}

func (x *Stp) GetGlobal() *Stp_Global {
	if x != nil {
		return x.Global
	}
	return nil
}

func (x *Stp) GetInterfaces() *Stp_Interfaces {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

func (x *Stp) GetMstp() *Stp_Mstp {
	if x != nil {
		return x.Mstp
	}
	return nil
}

func (x *Stp) GetRapidPvst() *Stp_RapidPvst {
	if x != nil {
		return x.RapidPvst
	}
	return nil
}

func (x *Stp) GetRstp() *Stp_Rstp {
	if x != nil {
		return x.Rstp
	}
	return nil
}

type Stp_Global struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Stp_Global_Config `protobuf:"bytes,300401779,opt,name=config,proto3" json:"config,omitempty"`
	State  *Stp_Global_State  `protobuf:"bytes,82194900,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Stp_Global) Reset() {
	*x = Stp_Global{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_spanning_tree_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stp_Global) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stp_Global) ProtoMessage() {}

func (x *Stp_Global) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_spanning_tree_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stp_Global.ProtoReflect.Descriptor instead.
func (*Stp_Global) Descriptor() ([]byte, []int) {
	return file_openconfig_spanning_tree_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Stp_Global) GetConfig() *Stp_Global_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Stp_Global) GetState() *Stp_Global_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Stp_Interfaces struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interface []*Stp_Interfaces_InterfaceKey `protobuf:"bytes,327756795,rep,name=interface,proto3" json:"interface,omitempty"`
}

func (x *Stp_Interfaces) Reset() {
	*x = Stp_Interfaces{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_spanning_tree_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stp_Interfaces) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stp_Interfaces) ProtoMessage() {}

func (x *Stp_Interfaces) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_spanning_tree_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stp_Interfaces.ProtoReflect.Descriptor instead.
func (*Stp_Interfaces) Descriptor() ([]byte, []int) {
	return file_openconfig_spanning_tree_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Stp_Interfaces) GetInterface() []*Stp_Interfaces_InterfaceKey {
	if x != nil {
		return x.Interface
	}
	return nil
}

type Stp_Mstp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config       *Stp_Mstp_Config       `protobuf:"bytes,362267192,opt,name=config,proto3" json:"config,omitempty"`
	MstInstances *Stp_Mstp_MstInstances `protobuf:"bytes,72798773,opt,name=mst_instances,json=mstInstances,proto3" json:"mst_instances,omitempty"`
	State        *Stp_Mstp_State        `protobuf:"bytes,419352913,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Stp_Mstp) Reset() {
	*x = Stp_Mstp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_spanning_tree_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stp_Mstp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stp_Mstp) ProtoMessage() {}

func (x *Stp_Mstp) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_spanning_tree_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stp_Mstp.ProtoReflect.Descriptor instead.
func (*Stp_Mstp) Descriptor() ([]byte, []int) {
	return file_openconfig_spanning_tree_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Stp_Mstp) GetConfig() *Stp_Mstp_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Stp_Mstp) GetMstInstances() *Stp_Mstp_MstInstances {
	if x != nil {
		return x.MstInstances
	}
	return nil
}

func (x *Stp_Mstp) GetState() *Stp_Mstp_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Stp_RapidPvst struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vlan []*Stp_RapidPvst_VlanKey `protobuf:"bytes,498125485,rep,name=vlan,proto3" json:"vlan,omitempty"`
}

func (x *Stp_RapidPvst) Reset() {
	*x = Stp_RapidPvst{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_spanning_tree_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stp_RapidPvst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stp_RapidPvst) ProtoMessage() {}

func (x *Stp_RapidPvst) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_spanning_tree_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stp_RapidPvst.ProtoReflect.Descriptor instead.
func (*Stp_RapidPvst) Descriptor() ([]byte, []int) {
	return file_openconfig_spanning_tree_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Stp_RapidPvst) GetVlan() []*Stp_RapidPvst_VlanKey {
	if x != nil {
		return x.Vlan
	}
	return nil
}

type Stp_Rstp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config     *Stp_Rstp_Config     `protobuf:"bytes,423209211,opt,name=config,proto3" json:"config,omitempty"`
	Interfaces *Stp_Rstp_Interfaces `protobuf:"bytes,234621345,opt,name=interfaces,proto3" json:"interfaces,omitempty"`
	State      *Stp_Rstp_State      `protobuf:"bytes,289330300,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Stp_Rstp) Reset() {
	*x = Stp_Rstp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_spanning_tree_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stp_Rstp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stp_Rstp) ProtoMessage() {}

func (x *Stp_Rstp) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_spanning_tree_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stp_Rstp.ProtoReflect.Descriptor instead.
func (*Stp_Rstp) Descriptor() ([]byte, []int) {
	return file_openconfig_spanning_tree_proto_rawDescGZIP(), []int{0, 4}
}

func (x *Stp_Rstp) GetConfig() *Stp_Rstp_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Stp_Rstp) GetInterfaces() *Stp_Rstp_Interfaces {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

func (x *Stp_Rstp) GetState() *Stp_Rstp_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Stp_Global_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BpduFilter                 *ywrapper.BoolValue                      `protobuf:"bytes,418165716,opt,name=bpdu_filter,json=bpduFilter,proto3" json:"bpdu_filter,omitempty"`
	BpduGuard                  *ywrapper.BoolValue                      `protobuf:"bytes,444421033,opt,name=bpdu_guard,json=bpduGuard,proto3" json:"bpdu_guard,omitempty"`
	BpduguardTimeoutRecovery   *ywrapper.UintValue                      `protobuf:"bytes,111769674,opt,name=bpduguard_timeout_recovery,json=bpduguardTimeoutRecovery,proto3" json:"bpduguard_timeout_recovery,omitempty"`
	BridgeAssurance            *ywrapper.BoolValue                      `protobuf:"bytes,174560629,opt,name=bridge_assurance,json=bridgeAssurance,proto3" json:"bridge_assurance,omitempty"`
	EnabledProtocol            []OpenconfigSpanningTreeTypesSTPPROTOCOL `protobuf:"varint,519311802,rep,packed,name=enabled_protocol,json=enabledProtocol,proto3,enum=openconfig.OpenconfigSpanningTreeTypesSTPPROTOCOL" json:"enabled_protocol,omitempty"`
	EtherchannelMisconfigGuard *ywrapper.BoolValue                      `protobuf:"bytes,442887371,opt,name=etherchannel_misconfig_guard,json=etherchannelMisconfigGuard,proto3" json:"etherchannel_misconfig_guard,omitempty"`
	LoopGuard                  *ywrapper.BoolValue                      `protobuf:"bytes,312794156,opt,name=loop_guard,json=loopGuard,proto3" json:"loop_guard,omitempty"`
}

func (x *Stp_Global_Config) Reset() {
	*x = Stp_Global_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_spanning_tree_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stp_Global_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stp_Global_Config) ProtoMessage() {}

func (x *Stp_Global_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_spanning_tree_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stp_Global_Config.ProtoReflect.Descriptor instead.
func (*Stp_Global_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_spanning_tree_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *Stp_Global_Config) GetBpduFilter() *ywrapper.BoolValue {
	if x != nil {
		return x.BpduFilter
	}
	return nil
}

func (x *Stp_Global_Config) GetBpduGuard() *ywrapper.BoolValue {
	if x != nil {
		return x.BpduGuard
	}
	return nil
}

func (x *Stp_Global_Config) GetBpduguardTimeoutRecovery() *ywrapper.UintValue {
	if x != nil {
		return x.BpduguardTimeoutRecovery
	}
	return nil
}

func (x *Stp_Global_Config) GetBridgeAssurance() *ywrapper.BoolValue {
	if x != nil {
		return x.BridgeAssurance
	}
	return nil
}

func (x *Stp_Global_Config) GetEnabledProtocol() []OpenconfigSpanningTreeTypesSTPPROTOCOL {
	if x != nil {
		return x.EnabledProtocol
	}
	return nil
}

func (x *Stp_Global_Config) GetEtherchannelMisconfigGuard() *ywrapper.BoolValue {
	if x != nil {
		return x.EtherchannelMisconfigGuard
	}
	return nil
}

func (x *Stp_Global_Config) GetLoopGuard() *ywrapper.BoolValue {
	if x != nil {
		return x.LoopGuard
	}
	return nil
}

type Stp_Global_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BpduFilter                 *ywrapper.BoolValue                      `protobuf:"bytes,49432299,opt,name=bpdu_filter,json=bpduFilter,proto3" json:"bpdu_filter,omitempty"`
	BpduGuard                  *ywrapper.BoolValue                      `protobuf:"bytes,386888444,opt,name=bpdu_guard,json=bpduGuard,proto3" json:"bpdu_guard,omitempty"`
	BpduguardTimeoutRecovery   *ywrapper.UintValue                      `protobuf:"bytes,525147231,opt,name=bpduguard_timeout_recovery,json=bpduguardTimeoutRecovery,proto3" json:"bpduguard_timeout_recovery,omitempty"`
	BridgeAssurance            *ywrapper.BoolValue                      `protobuf:"bytes,237709252,opt,name=bridge_assurance,json=bridgeAssurance,proto3" json:"bridge_assurance,omitempty"`
	EnabledProtocol            []OpenconfigSpanningTreeTypesSTPPROTOCOL `protobuf:"varint,313795967,rep,packed,name=enabled_protocol,json=enabledProtocol,proto3,enum=openconfig.OpenconfigSpanningTreeTypesSTPPROTOCOL" json:"enabled_protocol,omitempty"`
	EtherchannelMisconfigGuard *ywrapper.BoolValue                      `protobuf:"bytes,331669714,opt,name=etherchannel_misconfig_guard,json=etherchannelMisconfigGuard,proto3" json:"etherchannel_misconfig_guard,omitempty"`
	LoopGuard                  *ywrapper.BoolValue                      `protobuf:"bytes,140395837,opt,name=loop_guard,json=loopGuard,proto3" json:"loop_guard,omitempty"`
}

func (x *Stp_Global_State) Reset() {
	*x = Stp_Global_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_spanning_tree_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stp_Global_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stp_Global_State) ProtoMessage() {}

func (x *Stp_Global_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_spanning_tree_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stp_Global_State.ProtoReflect.Descriptor instead.
func (*Stp_Global_State) Descriptor() ([]byte, []int) {
	return file_openconfig_spanning_tree_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *Stp_Global_State) GetBpduFilter() *ywrapper.BoolValue {
	if x != nil {
		return x.BpduFilter
	}
	return nil
}

func (x *Stp_Global_State) GetBpduGuard() *ywrapper.BoolValue {
	if x != nil {
		return x.BpduGuard
	}
	return nil
}

func (x *Stp_Global_State) GetBpduguardTimeoutRecovery() *ywrapper.UintValue {
	if x != nil {
		return x.BpduguardTimeoutRecovery
	}
	return nil
}

func (x *Stp_Global_State) GetBridgeAssurance() *ywrapper.BoolValue {
	if x != nil {
		return x.BridgeAssurance
	}
	return nil
}

func (x *Stp_Global_State) GetEnabledProtocol() []OpenconfigSpanningTreeTypesSTPPROTOCOL {
	if x != nil {
		return x.EnabledProtocol
	}
	return nil
}

func (x *Stp_Global_State) GetEtherchannelMisconfigGuard() *ywrapper.BoolValue {
	if x != nil {
		return x.EtherchannelMisconfigGuard
	}
	return nil
}

func (x *Stp_Global_State) GetLoopGuard() *ywrapper.BoolValue {
	if x != nil {
		return x.LoopGuard
	}
	return nil
}

type Stp_Interfaces_Interface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Stp_Interfaces_Interface_Config `protobuf:"bytes,477051180,opt,name=config,proto3" json:"config,omitempty"`
	State  *Stp_Interfaces_Interface_State  `protobuf:"bytes,177132837,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Stp_Interfaces_Interface) Reset() {
	*x = Stp_Interfaces_Interface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_spanning_tree_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stp_Interfaces_Interface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stp_Interfaces_Interface) ProtoMessage() {}

func (x *Stp_Interfaces_Interface) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_spanning_tree_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stp_Interfaces_Interface.ProtoReflect.Descriptor instead.
func (*Stp_Interfaces_Interface) Descriptor() ([]byte, []int) {
	return file_openconfig_spanning_tree_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *Stp_Interfaces_Interface) GetConfig() *Stp_Interfaces_Interface_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Stp_Interfaces_Interface) GetState() *Stp_Interfaces_Interface_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Stp_Interfaces_InterfaceKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string                    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Interface *Stp_Interfaces_Interface `protobuf:"bytes,2,opt,name=interface,proto3" json:"interface,omitempty"`
}

func (x *Stp_Interfaces_InterfaceKey) Reset() {
	*x = Stp_Interfaces_InterfaceKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_spanning_tree_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stp_Interfaces_InterfaceKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stp_Interfaces_InterfaceKey) ProtoMessage() {}

func (x *Stp_Interfaces_InterfaceKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_spanning_tree_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stp_Interfaces_InterfaceKey.ProtoReflect.Descriptor instead.
func (*Stp_Interfaces_InterfaceKey) Descriptor() ([]byte, []int) {
	return file_openconfig_spanning_tree_proto_rawDescGZIP(), []int{0, 1, 1}
}

func (x *Stp_Interfaces_InterfaceKey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Stp_Interfaces_InterfaceKey) GetInterface() *Stp_Interfaces_Interface {
	if x != nil {
		return x.Interface
	}
	return nil
}

type Stp_Interfaces_Interface_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BpduFilter *ywrapper.BoolValue                    `protobuf:"bytes,494440739,opt,name=bpdu_filter,json=bpduFilter,proto3" json:"bpdu_filter,omitempty"`
	BpduGuard  *ywrapper.BoolValue                    `protobuf:"bytes,73707396,opt,name=bpdu_guard,json=bpduGuard,proto3" json:"bpdu_guard,omitempty"`
	EdgePort   OpenconfigSpanningTreeTypesSTPEDGEPORT `protobuf:"varint,386392760,opt,name=edge_port,json=edgePort,proto3,enum=openconfig.OpenconfigSpanningTreeTypesSTPEDGEPORT" json:"edge_port,omitempty"`
	Guard      OpenconfigSpanningTreeStpGuardType     `protobuf:"varint,411542382,opt,name=guard,proto3,enum=openconfig.OpenconfigSpanningTreeStpGuardType" json:"guard,omitempty"`
	LinkType   OpenconfigSpanningTreeStpLinkType      `protobuf:"varint,382517328,opt,name=link_type,json=linkType,proto3,enum=openconfig.OpenconfigSpanningTreeStpLinkType" json:"link_type,omitempty"`
	Name       *ywrapper.StringValue                  `protobuf:"bytes,80608366,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Stp_Interfaces_Interface_Config) Reset() {
	*x = Stp_Interfaces_Interface_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_spanning_tree_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stp_Interfaces_Interface_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stp_Interfaces_Interface_Config) ProtoMessage() {}

func (x *Stp_Interfaces_Interface_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_spanning_tree_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stp_Interfaces_Interface_Config.ProtoReflect.Descriptor instead.
func (*Stp_Interfaces_Interface_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_spanning_tree_proto_rawDescGZIP(), []int{0, 1, 0, 0}
}

func (x *Stp_Interfaces_Interface_Config) GetBpduFilter() *ywrapper.BoolValue {
	if x != nil {
		return x.BpduFilter
	}
	return nil
}

func (x *Stp_Interfaces_Interface_Config) GetBpduGuard() *ywrapper.BoolValue {
	if x != nil {
		return x.BpduGuard
	}
	return nil
}

func (x *Stp_Interfaces_Interface_Config) GetEdgePort() OpenconfigSpanningTreeTypesSTPEDGEPORT {
	if x != nil {
		return x.EdgePort
	}
	return OpenconfigSpanningTreeTypesSTPEDGEPORT_OPENCONFIGSPANNINGTREETYPESSTPEDGEPORT_UNSET
}

func (x *Stp_Interfaces_Interface_Config) GetGuard() OpenconfigSpanningTreeStpGuardType {
	if x != nil {
		return x.Guard
	}
	return OpenconfigSpanningTreeStpGuardType_OPENCONFIGSPANNINGTREESTPGUARDTYPE_UNSET
}

func (x *Stp_Interfaces_Interface_Config) GetLinkType() OpenconfigSpanningTreeStpLinkType {
	if x != nil {
		return x.LinkType
	}
	return OpenconfigSpanningTreeStpLinkType_OPENCONFIGSPANNINGTREESTPLINKTYPE_UNSET
}

func (x *Stp_Interfaces_Interface_Config) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

type Stp_Interfaces_Interface_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BpduFilter *ywrapper.BoolValue                    `protobuf:"bytes,111517662,opt,name=bpdu_filter,json=bpduFilter,proto3" json:"bpdu_filter,omitempty"`
	BpduGuard  *ywrapper.BoolValue                    `protobuf:"bytes,188731375,opt,name=bpdu_guard,json=bpduGuard,proto3" json:"bpdu_guard,omitempty"`
	EdgePort   OpenconfigSpanningTreeTypesSTPEDGEPORT `protobuf:"varint,114978321,opt,name=edge_port,json=edgePort,proto3,enum=openconfig.OpenconfigSpanningTreeTypesSTPEDGEPORT" json:"edge_port,omitempty"`
	Guard      OpenconfigSpanningTreeStpGuardType     `protobuf:"varint,426047799,opt,name=guard,proto3,enum=openconfig.OpenconfigSpanningTreeStpGuardType" json:"guard,omitempty"`
	LinkType   OpenconfigSpanningTreeStpLinkType      `protobuf:"varint,386303669,opt,name=link_type,json=linkType,proto3,enum=openconfig.OpenconfigSpanningTreeStpLinkType" json:"link_type,omitempty"`
	Name       *ywrapper.StringValue                  `protobuf:"bytes,376864097,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Stp_Interfaces_Interface_State) Reset() {
	*x = Stp_Interfaces_Interface_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_spanning_tree_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stp_Interfaces_Interface_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stp_Interfaces_Interface_State) ProtoMessage() {}

func (x *Stp_Interfaces_Interface_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_spanning_tree_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stp_Interfaces_Interface_State.ProtoReflect.Descriptor instead.
func (*Stp_Interfaces_Interface_State) Descriptor() ([]byte, []int) {
	return file_openconfig_spanning_tree_proto_rawDescGZIP(), []int{0, 1, 0, 1}
}

func (x *Stp_Interfaces_Interface_State) GetBpduFilter() *ywrapper.BoolValue {
	if x != nil {
		return x.BpduFilter
	}
	return nil
}

func (x *Stp_Interfaces_Interface_State) GetBpduGuard() *ywrapper.BoolValue {
	if x != nil {
		return x.BpduGuard
	}
	return nil
}

func (x *Stp_Interfaces_Interface_State) GetEdgePort() OpenconfigSpanningTreeTypesSTPEDGEPORT {
	if x != nil {
		return x.EdgePort
	}
	return OpenconfigSpanningTreeTypesSTPEDGEPORT_OPENCONFIGSPANNINGTREETYPESSTPEDGEPORT_UNSET
}

func (x *Stp_Interfaces_Interface_State) GetGuard() OpenconfigSpanningTreeStpGuardType {
	if x != nil {
		return x.Guard
	}
	return OpenconfigSpanningTreeStpGuardType_OPENCONFIGSPANNINGTREESTPGUARDTYPE_UNSET
}

func (x *Stp_Interfaces_Interface_State) GetLinkType() OpenconfigSpanningTreeStpLinkType {
	if x != nil {
		return x.LinkType
	}
	return OpenconfigSpanningTreeStpLinkType_OPENCONFIGSPANNINGTREESTPLINKTYPE_UNSET
}

func (x *Stp_Interfaces_Interface_State) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

type Stp_Mstp_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ForwardingDelay *ywrapper.UintValue   `protobuf:"bytes,18306732,opt,name=forwarding_delay,json=forwardingDelay,proto3" json:"forwarding_delay,omitempty"`
	HelloTime       *ywrapper.UintValue   `protobuf:"bytes,156515745,opt,name=hello_time,json=helloTime,proto3" json:"hello_time,omitempty"`
	HoldCount       *ywrapper.UintValue   `protobuf:"bytes,368495794,opt,name=hold_count,json=holdCount,proto3" json:"hold_count,omitempty"`
	MaxAge          *ywrapper.UintValue   `protobuf:"bytes,157271045,opt,name=max_age,json=maxAge,proto3" json:"max_age,omitempty"`
	MaxHop          *ywrapper.UintValue   `protobuf:"bytes,290078073,opt,name=max_hop,json=maxHop,proto3" json:"max_hop,omitempty"`
	Name            *ywrapper.StringValue `protobuf:"bytes,205892610,opt,name=name,proto3" json:"name,omitempty"`
	Revision        *ywrapper.UintValue   `protobuf:"bytes,151289928,opt,name=revision,proto3" json:"revision,omitempty"`
}

func (x *Stp_Mstp_Config) Reset() {
	*x = Stp_Mstp_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_spanning_tree_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stp_Mstp_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stp_Mstp_Config) ProtoMessage() {}

func (x *Stp_Mstp_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_spanning_tree_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stp_Mstp_Config.ProtoReflect.Descriptor instead.
func (*Stp_Mstp_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_spanning_tree_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *Stp_Mstp_Config) GetForwardingDelay() *ywrapper.UintValue {
	if x != nil {
		return x.ForwardingDelay
	}
	return nil
}

func (x *Stp_Mstp_Config) GetHelloTime() *ywrapper.UintValue {
	if x != nil {
		return x.HelloTime
	}
	return nil
}

func (x *Stp_Mstp_Config) GetHoldCount() *ywrapper.UintValue {
	if x != nil {
		return x.HoldCount
	}
	return nil
}

func (x *Stp_Mstp_Config) GetMaxAge() *ywrapper.UintValue {
	if x != nil {
		return x.MaxAge
	}
	return nil
}

func (x *Stp_Mstp_Config) GetMaxHop() *ywrapper.UintValue {
	if x != nil {
		return x.MaxHop
	}
	return nil
}

func (x *Stp_Mstp_Config) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Stp_Mstp_Config) GetRevision() *ywrapper.UintValue {
	if x != nil {
		return x.Revision
	}
	return nil
}

type Stp_Mstp_MstInstances struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MstInstance []*Stp_Mstp_MstInstances_MstInstanceKey `protobuf:"bytes,497343892,rep,name=mst_instance,json=mstInstance,proto3" json:"mst_instance,omitempty"`
}

func (x *Stp_Mstp_MstInstances) Reset() {
	*x = Stp_Mstp_MstInstances{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_spanning_tree_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stp_Mstp_MstInstances) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stp_Mstp_MstInstances) ProtoMessage() {}

func (x *Stp_Mstp_MstInstances) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_spanning_tree_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stp_Mstp_MstInstances.ProtoReflect.Descriptor instead.
func (*Stp_Mstp_MstInstances) Descriptor() ([]byte, []int) {
	return file_openconfig_spanning_tree_proto_rawDescGZIP(), []int{0, 2, 1}
}

func (x *Stp_Mstp_MstInstances) GetMstInstance() []*Stp_Mstp_MstInstances_MstInstanceKey {
	if x != nil {
		return x.MstInstance
	}
	return nil
}

type Stp_Mstp_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ForwardingDelay *ywrapper.UintValue   `protobuf:"bytes,512660443,opt,name=forwarding_delay,json=forwardingDelay,proto3" json:"forwarding_delay,omitempty"`
	HelloTime       *ywrapper.UintValue   `protobuf:"bytes,519125574,opt,name=hello_time,json=helloTime,proto3" json:"hello_time,omitempty"`
	HoldCount       *ywrapper.UintValue   `protobuf:"bytes,109158353,opt,name=hold_count,json=holdCount,proto3" json:"hold_count,omitempty"`
	MaxAge          *ywrapper.UintValue   `protobuf:"bytes,517220060,opt,name=max_age,json=maxAge,proto3" json:"max_age,omitempty"`
	MaxHop          *ywrapper.UintValue   `protobuf:"bytes,113450208,opt,name=max_hop,json=maxHop,proto3" json:"max_hop,omitempty"`
	Name            *ywrapper.StringValue `protobuf:"bytes,362119781,opt,name=name,proto3" json:"name,omitempty"`
	Revision        *ywrapper.UintValue   `protobuf:"bytes,426296947,opt,name=revision,proto3" json:"revision,omitempty"`
}

func (x *Stp_Mstp_State) Reset() {
	*x = Stp_Mstp_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_spanning_tree_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stp_Mstp_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stp_Mstp_State) ProtoMessage() {}

func (x *Stp_Mstp_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_spanning_tree_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stp_Mstp_State.ProtoReflect.Descriptor instead.
func (*Stp_Mstp_State) Descriptor() ([]byte, []int) {
	return file_openconfig_spanning_tree_proto_rawDescGZIP(), []int{0, 2, 2}
}

func (x *Stp_Mstp_State) GetForwardingDelay() *ywrapper.UintValue {
	if x != nil {
		return x.ForwardingDelay
	}
	return nil
}

func (x *Stp_Mstp_State) GetHelloTime() *ywrapper.UintValue {
	if x != nil {
		return x.HelloTime
	}
	return nil
}

func (x *Stp_Mstp_State) GetHoldCount() *ywrapper.UintValue {
	if x != nil {
		return x.HoldCount
	}
	return nil
}

func (x *Stp_Mstp_State) GetMaxAge() *ywrapper.UintValue {
	if x != nil {
		return x.MaxAge
	}
	return nil
}

func (x *Stp_Mstp_State) GetMaxHop() *ywrapper.UintValue {
	if x != nil {
		return x.MaxHop
	}
	return nil
}

func (x *Stp_Mstp_State) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Stp_Mstp_State) GetRevision() *ywrapper.UintValue {
	if x != nil {
		return x.Revision
	}
	return nil
}

type Stp_Mstp_MstInstances_MstInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config     *Stp_Mstp_MstInstances_MstInstance_Config     `protobuf:"bytes,472762393,opt,name=config,proto3" json:"config,omitempty"`
	Interfaces *Stp_Mstp_MstInstances_MstInstance_Interfaces `protobuf:"bytes,491215479,opt,name=interfaces,proto3" json:"interfaces,omitempty"`
	State      *Stp_Mstp_MstInstances_MstInstance_State      `protobuf:"bytes,317664238,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Stp_Mstp_MstInstances_MstInstance) Reset() {
	*x = Stp_Mstp_MstInstances_MstInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_spanning_tree_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stp_Mstp_MstInstances_MstInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stp_Mstp_MstInstances_MstInstance) ProtoMessage() {}

func (x *Stp_Mstp_MstInstances_MstInstance) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_spanning_tree_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stp_Mstp_MstInstances_MstInstance.ProtoReflect.Descriptor instead.
func (*Stp_Mstp_MstInstances_MstInstance) Descriptor() ([]byte, []int) {
	return file_openconfig_spanning_tree_proto_rawDescGZIP(), []int{0, 2, 1, 0}
}

func (x *Stp_Mstp_MstInstances_MstInstance) GetConfig() *Stp_Mstp_MstInstances_MstInstance_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Stp_Mstp_MstInstances_MstInstance) GetInterfaces() *Stp_Mstp_MstInstances_MstInstance_Interfaces {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

func (x *Stp_Mstp_MstInstances_MstInstance) GetState() *Stp_Mstp_MstInstances_MstInstance_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Stp_Mstp_MstInstances_MstInstanceKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MstId       uint64                             `protobuf:"varint,1,opt,name=mst_id,json=mstId,proto3" json:"mst_id,omitempty"`
	MstInstance *Stp_Mstp_MstInstances_MstInstance `protobuf:"bytes,2,opt,name=mst_instance,json=mstInstance,proto3" json:"mst_instance,omitempty"`
}

func (x *Stp_Mstp_MstInstances_MstInstanceKey) Reset() {
	*x = Stp_Mstp_MstInstances_MstInstanceKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_spanning_tree_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stp_Mstp_MstInstances_MstInstanceKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stp_Mstp_MstInstances_MstInstanceKey) ProtoMessage() {}

func (x *Stp_Mstp_MstInstances_MstInstanceKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_spanning_tree_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stp_Mstp_MstInstances_MstInstanceKey.ProtoReflect.Descriptor instead.
func (*Stp_Mstp_MstInstances_MstInstanceKey) Descriptor() ([]byte, []int) {
	return file_openconfig_spanning_tree_proto_rawDescGZIP(), []int{0, 2, 1, 1}
}

func (x *Stp_Mstp_MstInstances_MstInstanceKey) GetMstId() uint64 {
	if x != nil {
		return x.MstId
	}
	return 0
}

func (x *Stp_Mstp_MstInstances_MstInstanceKey) GetMstInstance() *Stp_Mstp_MstInstances_MstInstance {
	if x != nil {
		return x.MstInstance
	}
	return nil
}

type Stp_Mstp_MstInstances_MstInstance_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BridgePriority *ywrapper.UintValue                                   `protobuf:"bytes,150170028,opt,name=bridge_priority,json=bridgePriority,proto3" json:"bridge_priority,omitempty"`
	MstId          *ywrapper.UintValue                                   `protobuf:"bytes,65684746,opt,name=mst_id,json=mstId,proto3" json:"mst_id,omitempty"`
	Vlan           []*Stp_Mstp_MstInstances_MstInstance_Config_VlanUnion `protobuf:"bytes,517819675,rep,name=vlan,proto3" json:"vlan,omitempty"`
}

func (x *Stp_Mstp_MstInstances_MstInstance_Config) Reset() {
	*x = Stp_Mstp_MstInstances_MstInstance_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_spanning_tree_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stp_Mstp_MstInstances_MstInstance_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stp_Mstp_MstInstances_MstInstance_Config) ProtoMessage() {}

func (x *Stp_Mstp_MstInstances_MstInstance_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_spanning_tree_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stp_Mstp_MstInstances_MstInstance_Config.ProtoReflect.Descriptor instead.
func (*Stp_Mstp_MstInstances_MstInstance_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_spanning_tree_proto_rawDescGZIP(), []int{0, 2, 1, 0, 0}
}

func (x *Stp_Mstp_MstInstances_MstInstance_Config) GetBridgePriority() *ywrapper.UintValue {
	if x != nil {
		return x.BridgePriority
	}
	return nil
}

func (x *Stp_Mstp_MstInstances_MstInstance_Config) GetMstId() *ywrapper.UintValue {
	if x != nil {
		return x.MstId
	}
	return nil
}

func (x *Stp_Mstp_MstInstances_MstInstance_Config) GetVlan() []*Stp_Mstp_MstInstances_MstInstance_Config_VlanUnion {
	if x != nil {
		return x.Vlan
	}
	return nil
}

type Stp_Mstp_MstInstances_MstInstance_Interfaces struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interface []*Stp_Mstp_MstInstances_MstInstance_Interfaces_InterfaceKey `protobuf:"bytes,83031303,rep,name=interface,proto3" json:"interface,omitempty"`
}

func (x *Stp_Mstp_MstInstances_MstInstance_Interfaces) Reset() {
	*x = Stp_Mstp_MstInstances_MstInstance_Interfaces{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_spanning_tree_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stp_Mstp_MstInstances_MstInstance_Interfaces) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stp_Mstp_MstInstances_MstInstance_Interfaces) ProtoMessage() {}

func (x *Stp_Mstp_MstInstances_MstInstance_Interfaces) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_spanning_tree_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stp_Mstp_MstInstances_MstInstance_Interfaces.ProtoReflect.Descriptor instead.
func (*Stp_Mstp_MstInstances_MstInstance_Interfaces) Descriptor() ([]byte, []int) {
	return file_openconfig_spanning_tree_proto_rawDescGZIP(), []int{0, 2, 1, 0, 1}
}

func (x *Stp_Mstp_MstInstances_MstInstance_Interfaces) GetInterface() []*Stp_Mstp_MstInstances_MstInstance_Interfaces_InterfaceKey {
	if x != nil {
		return x.Interface
	}
	return nil
}

type Stp_Mstp_MstInstances_MstInstance_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BridgeAddress          *ywrapper.StringValue                                `protobuf:"bytes,520205789,opt,name=bridge_address,json=bridgeAddress,proto3" json:"bridge_address,omitempty"`
	BridgePriority         *ywrapper.UintValue                                  `protobuf:"bytes,352871151,opt,name=bridge_priority,json=bridgePriority,proto3" json:"bridge_priority,omitempty"`
	DesignatedRootAddress  *ywrapper.StringValue                                `protobuf:"bytes,57983091,opt,name=designated_root_address,json=designatedRootAddress,proto3" json:"designated_root_address,omitempty"`
	DesignatedRootPriority *ywrapper.UintValue                                  `protobuf:"bytes,351428737,opt,name=designated_root_priority,json=designatedRootPriority,proto3" json:"designated_root_priority,omitempty"`
	HoldTime               *ywrapper.UintValue                                  `protobuf:"bytes,318764568,opt,name=hold_time,json=holdTime,proto3" json:"hold_time,omitempty"`
	LastTopologyChange     *ywrapper.UintValue                                  `protobuf:"bytes,142303538,opt,name=last_topology_change,json=lastTopologyChange,proto3" json:"last_topology_change,omitempty"`
	MstId                  *ywrapper.UintValue                                  `protobuf:"bytes,408675299,opt,name=mst_id,json=mstId,proto3" json:"mst_id,omitempty"`
	RootCost               *ywrapper.UintValue                                  `protobuf:"bytes,305061753,opt,name=root_cost,json=rootCost,proto3" json:"root_cost,omitempty"`
	RootPort               *ywrapper.UintValue                                  `protobuf:"bytes,397337255,opt,name=root_port,json=rootPort,proto3" json:"root_port,omitempty"`
	TopologyChanges        *ywrapper.UintValue                                  `protobuf:"bytes,318857962,opt,name=topology_changes,json=topologyChanges,proto3" json:"topology_changes,omitempty"`
	Vlan                   []*Stp_Mstp_MstInstances_MstInstance_State_VlanUnion `protobuf:"bytes,175421410,rep,name=vlan,proto3" json:"vlan,omitempty"`
}

func (x *Stp_Mstp_MstInstances_MstInstance_State) Reset() {
	*x = Stp_Mstp_MstInstances_MstInstance_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_spanning_tree_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stp_Mstp_MstInstances_MstInstance_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stp_Mstp_MstInstances_MstInstance_State) ProtoMessage() {}

func (x *Stp_Mstp_MstInstances_MstInstance_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_spanning_tree_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stp_Mstp_MstInstances_MstInstance_State.ProtoReflect.Descriptor instead.
func (*Stp_Mstp_MstInstances_MstInstance_State) Descriptor() ([]byte, []int) {
	return file_openconfig_spanning_tree_proto_rawDescGZIP(), []int{0, 2, 1, 0, 2}
}

func (x *Stp_Mstp_MstInstances_MstInstance_State) GetBridgeAddress() *ywrapper.StringValue {
	if x != nil {
		return x.BridgeAddress
	}
	return nil
}

func (x *Stp_Mstp_MstInstances_MstInstance_State) GetBridgePriority() *ywrapper.UintValue {
	if x != nil {
		return x.BridgePriority
	}
	return nil
}

func (x *Stp_Mstp_MstInstances_MstInstance_State) GetDesignatedRootAddress() *ywrapper.StringValue {
	if x != nil {
		return x.DesignatedRootAddress
	}
	return nil
}

func (x *Stp_Mstp_MstInstances_MstInstance_State) GetDesignatedRootPriority() *ywrapper.UintValue {
	if x != nil {
		return x.DesignatedRootPriority
	}
	return nil
}

func (x *Stp_Mstp_MstInstances_MstInstance_State) GetHoldTime() *ywrapper.UintValue {
	if x != nil {
		return x.HoldTime
	}
	return nil
}

func (x *Stp_Mstp_MstInstances_MstInstance_State) GetLastTopologyChange() *ywrapper.UintValue {
	if x != nil {
		return x.LastTopologyChange
	}
	return nil
}

func (x *Stp_Mstp_MstInstances_MstInstance_State) GetMstId() *ywrapper.UintValue {
	if x != nil {
		return x.MstId
	}
	return nil
}

func (x *Stp_Mstp_MstInstances_MstInstance_State) GetRootCost() *ywrapper.UintValue {
	if x != nil {
		return x.RootCost
	}
	return nil
}

func (x *Stp_Mstp_MstInstances_MstInstance_State) GetRootPort() *ywrapper.UintValue {
	if x != nil {
		return x.RootPort
	}
	return nil
}

func (x *Stp_Mstp_MstInstances_MstInstance_State) GetTopologyChanges() *ywrapper.UintValue {
	if x != nil {
		return x.TopologyChanges
	}
	return nil
}

func (x *Stp_Mstp_MstInstances_MstInstance_State) GetVlan() []*Stp_Mstp_MstInstances_MstInstance_State_VlanUnion {
	if x != nil {
		return x.Vlan
	}
	return nil
}

type Stp_Mstp_MstInstances_MstInstance_Config_VlanUnion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VlanString string `protobuf:"bytes,113239521,opt,name=vlan_string,json=vlanString,proto3" json:"vlan_string,omitempty"`
	VlanUint64 uint64 `protobuf:"varint,358708228,opt,name=vlan_uint64,json=vlanUint64,proto3" json:"vlan_uint64,omitempty"`
}

func (x *Stp_Mstp_MstInstances_MstInstance_Config_VlanUnion) Reset() {
	*x = Stp_Mstp_MstInstances_MstInstance_Config_VlanUnion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_spanning_tree_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stp_Mstp_MstInstances_MstInstance_Config_VlanUnion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stp_Mstp_MstInstances_MstInstance_Config_VlanUnion) ProtoMessage() {}

func (x *Stp_Mstp_MstInstances_MstInstance_Config_VlanUnion) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_spanning_tree_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stp_Mstp_MstInstances_MstInstance_Config_VlanUnion.ProtoReflect.Descriptor instead.
func (*Stp_Mstp_MstInstances_MstInstance_Config_VlanUnion) Descriptor() ([]byte, []int) {
	return file_openconfig_spanning_tree_proto_rawDescGZIP(), []int{0, 2, 1, 0, 0, 0}
}

func (x *Stp_Mstp_MstInstances_MstInstance_Config_VlanUnion) GetVlanString() string {
	if x != nil {
		return x.VlanString
	}
	return ""
}

func (x *Stp_Mstp_MstInstances_MstInstance_Config_VlanUnion) GetVlanUint64() uint64 {
	if x != nil {
		return x.VlanUint64
	}
	return 0
}

type Stp_Mstp_MstInstances_MstInstance_Interfaces_Interface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Stp_Mstp_MstInstances_MstInstance_Interfaces_Interface_Config `protobuf:"bytes,499171864,opt,name=config,proto3" json:"config,omitempty"`
	State  *Stp_Mstp_MstInstances_MstInstance_Interfaces_Interface_State  `protobuf:"bytes,135114417,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Stp_Mstp_MstInstances_MstInstance_Interfaces_Interface) Reset() {
	*x = Stp_Mstp_MstInstances_MstInstance_Interfaces_Interface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_spanning_tree_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stp_Mstp_MstInstances_MstInstance_Interfaces_Interface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stp_Mstp_MstInstances_MstInstance_Interfaces_Interface) ProtoMessage() {}

func (x *Stp_Mstp_MstInstances_MstInstance_Interfaces_Interface) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_spanning_tree_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stp_Mstp_MstInstances_MstInstance_Interfaces_Interface.ProtoReflect.Descriptor instead.
func (*Stp_Mstp_MstInstances_MstInstance_Interfaces_Interface) Descriptor() ([]byte, []int) {
	return file_openconfig_spanning_tree_proto_rawDescGZIP(), []int{0, 2, 1, 0, 1, 0}
}

func (x *Stp_Mstp_MstInstances_MstInstance_Interfaces_Interface) GetConfig() *Stp_Mstp_MstInstances_MstInstance_Interfaces_Interface_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Stp_Mstp_MstInstances_MstInstance_Interfaces_Interface) GetState() *Stp_Mstp_MstInstances_MstInstance_Interfaces_Interface_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Stp_Mstp_MstInstances_MstInstance_Interfaces_InterfaceKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string                                                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Interface *Stp_Mstp_MstInstances_MstInstance_Interfaces_Interface `protobuf:"bytes,2,opt,name=interface,proto3" json:"interface,omitempty"`
}

func (x *Stp_Mstp_MstInstances_MstInstance_Interfaces_InterfaceKey) Reset() {
	*x = Stp_Mstp_MstInstances_MstInstance_Interfaces_InterfaceKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_spanning_tree_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stp_Mstp_MstInstances_MstInstance_Interfaces_InterfaceKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stp_Mstp_MstInstances_MstInstance_Interfaces_InterfaceKey) ProtoMessage() {}

func (x *Stp_Mstp_MstInstances_MstInstance_Interfaces_InterfaceKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_spanning_tree_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stp_Mstp_MstInstances_MstInstance_Interfaces_InterfaceKey.ProtoReflect.Descriptor instead.
func (*Stp_Mstp_MstInstances_MstInstance_Interfaces_InterfaceKey) Descriptor() ([]byte, []int) {
	return file_openconfig_spanning_tree_proto_rawDescGZIP(), []int{0, 2, 1, 0, 1, 1}
}

func (x *Stp_Mstp_MstInstances_MstInstance_Interfaces_InterfaceKey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Stp_Mstp_MstInstances_MstInstance_Interfaces_InterfaceKey) GetInterface() *Stp_Mstp_MstInstances_MstInstance_Interfaces_Interface {
	if x != nil {
		return x.Interface
	}
	return nil
}

type Stp_Mstp_MstInstances_MstInstance_Interfaces_Interface_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cost         *ywrapper.UintValue   `protobuf:"bytes,231951496,opt,name=cost,proto3" json:"cost,omitempty"`
	Name         *ywrapper.StringValue `protobuf:"bytes,14028770,opt,name=name,proto3" json:"name,omitempty"`
	PortPriority *ywrapper.UintValue   `protobuf:"bytes,140449623,opt,name=port_priority,json=portPriority,proto3" json:"port_priority,omitempty"`
}

func (x *Stp_Mstp_MstInstances_MstInstance_Interfaces_Interface_Config) Reset() {
	*x = Stp_Mstp_MstInstances_MstInstance_Interfaces_Interface_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_spanning_tree_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stp_Mstp_MstInstances_MstInstance_Interfaces_Interface_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stp_Mstp_MstInstances_MstInstance_Interfaces_Interface_Config) ProtoMessage() {}

func (x *Stp_Mstp_MstInstances_MstInstance_Interfaces_Interface_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_spanning_tree_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stp_Mstp_MstInstances_MstInstance_Interfaces_Interface_Config.ProtoReflect.Descriptor instead.
func (*Stp_Mstp_MstInstances_MstInstance_Interfaces_Interface_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_spanning_tree_proto_rawDescGZIP(), []int{0, 2, 1, 0, 1, 0, 0}
}

func (x *Stp_Mstp_MstInstances_MstInstance_Interfaces_Interface_Config) GetCost() *ywrapper.UintValue {
	if x != nil {
		return x.Cost
	}
	return nil
}

func (x *Stp_Mstp_MstInstances_MstInstance_Interfaces_Interface_Config) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Stp_Mstp_MstInstances_MstInstance_Interfaces_Interface_Config) GetPortPriority() *ywrapper.UintValue {
	if x != nil {
		return x.PortPriority
	}
	return nil
}

type Stp_Mstp_MstInstances_MstInstance_Interfaces_Interface_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cost                     *ywrapper.UintValue                                                    `protobuf:"bytes,159865123,opt,name=cost,proto3" json:"cost,omitempty"`
	Counters                 *Stp_Mstp_MstInstances_MstInstance_Interfaces_Interface_State_Counters `protobuf:"bytes,520052395,opt,name=counters,proto3" json:"counters,omitempty"`
	DesignatedBridgeAddress  *ywrapper.StringValue                                                  `protobuf:"bytes,175515179,opt,name=designated_bridge_address,json=designatedBridgeAddress,proto3" json:"designated_bridge_address,omitempty"`
	DesignatedBridgePriority *ywrapper.UintValue                                                    `protobuf:"bytes,411036809,opt,name=designated_bridge_priority,json=designatedBridgePriority,proto3" json:"designated_bridge_priority,omitempty"`
	DesignatedCost           *ywrapper.UintValue                                                    `protobuf:"bytes,24519636,opt,name=designated_cost,json=designatedCost,proto3" json:"designated_cost,omitempty"`
	DesignatedPortNum        *ywrapper.UintValue                                                    `protobuf:"bytes,305730017,opt,name=designated_port_num,json=designatedPortNum,proto3" json:"designated_port_num,omitempty"`
	DesignatedPortPriority   *ywrapper.UintValue                                                    `protobuf:"bytes,153721331,opt,name=designated_port_priority,json=designatedPortPriority,proto3" json:"designated_port_priority,omitempty"`
	DesignatedRootAddress    *ywrapper.StringValue                                                  `protobuf:"bytes,222851020,opt,name=designated_root_address,json=designatedRootAddress,proto3" json:"designated_root_address,omitempty"`
	DesignatedRootPriority   *ywrapper.UintValue                                                    `protobuf:"bytes,198628868,opt,name=designated_root_priority,json=designatedRootPriority,proto3" json:"designated_root_priority,omitempty"`
	ForwardTransisitions     *ywrapper.UintValue                                                    `protobuf:"bytes,358824040,opt,name=forward_transisitions,json=forwardTransisitions,proto3" json:"forward_transisitions,omitempty"`
	Name                     *ywrapper.StringValue                                                  `protobuf:"bytes,294895429,opt,name=name,proto3" json:"name,omitempty"`
	PortNum                  *ywrapper.UintValue                                                    `protobuf:"bytes,485847738,opt,name=port_num,json=portNum,proto3" json:"port_num,omitempty"`
	PortPriority             *ywrapper.UintValue                                                    `protobuf:"bytes,32672910,opt,name=port_priority,json=portPriority,proto3" json:"port_priority,omitempty"`
	PortState                OpenconfigSpanningTreeTypesSTPPORTSTATE                                `protobuf:"varint,253637881,opt,name=port_state,json=portState,proto3,enum=openconfig.OpenconfigSpanningTreeTypesSTPPORTSTATE" json:"port_state,omitempty"`
	Role                     OpenconfigSpanningTreeTypesSTPPORTROLE                                 `protobuf:"varint,293381284,opt,name=role,proto3,enum=openconfig.OpenconfigSpanningTreeTypesSTPPORTROLE" json:"role,omitempty"`
}

func (x *Stp_Mstp_MstInstances_MstInstance_Interfaces_Interface_State) Reset() {
	*x = Stp_Mstp_MstInstances_MstInstance_Interfaces_Interface_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_spanning_tree_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stp_Mstp_MstInstances_MstInstance_Interfaces_Interface_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stp_Mstp_MstInstances_MstInstance_Interfaces_Interface_State) ProtoMessage() {}

func (x *Stp_Mstp_MstInstances_MstInstance_Interfaces_Interface_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_spanning_tree_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stp_Mstp_MstInstances_MstInstance_Interfaces_Interface_State.ProtoReflect.Descriptor instead.
func (*Stp_Mstp_MstInstances_MstInstance_Interfaces_Interface_State) Descriptor() ([]byte, []int) {
	return file_openconfig_spanning_tree_proto_rawDescGZIP(), []int{0, 2, 1, 0, 1, 0, 1}
}

func (x *Stp_Mstp_MstInstances_MstInstance_Interfaces_Interface_State) GetCost() *ywrapper.UintValue {
	if x != nil {
		return x.Cost
	}
	return nil
}

func (x *Stp_Mstp_MstInstances_MstInstance_Interfaces_Interface_State) GetCounters() *Stp_Mstp_MstInstances_MstInstance_Interfaces_Interface_State_Counters {
	if x != nil {
		return x.Counters
	}
	return nil
}

func (x *Stp_Mstp_MstInstances_MstInstance_Interfaces_Interface_State) GetDesignatedBridgeAddress() *ywrapper.StringValue {
	if x != nil {
		return x.DesignatedBridgeAddress
	}
	return nil
}

func (x *Stp_Mstp_MstInstances_MstInstance_Interfaces_Interface_State) GetDesignatedBridgePriority() *ywrapper.UintValue {
	if x != nil {
		return x.DesignatedBridgePriority
	}
	return nil
}

func (x *Stp_Mstp_MstInstances_MstInstance_Interfaces_Interface_State) GetDesignatedCost() *ywrapper.UintValue {
	if x != nil {
		return x.DesignatedCost
	}
	return nil
}

func (x *Stp_Mstp_MstInstances_MstInstance_Interfaces_Interface_State) GetDesignatedPortNum() *ywrapper.UintValue {
	if x != nil {
		return x.DesignatedPortNum
	}
	return nil
}

func (x *Stp_Mstp_MstInstances_MstInstance_Interfaces_Interface_State) GetDesignatedPortPriority() *ywrapper.UintValue {
	if x != nil {
		return x.DesignatedPortPriority
	}
	return nil
}

func (x *Stp_Mstp_MstInstances_MstInstance_Interfaces_Interface_State) GetDesignatedRootAddress() *ywrapper.StringValue {
	if x != nil {
		return x.DesignatedRootAddress
	}
	return nil
}

func (x *Stp_Mstp_MstInstances_MstInstance_Interfaces_Interface_State) GetDesignatedRootPriority() *ywrapper.UintValue {
	if x != nil {
		return x.DesignatedRootPriority
	}
	return nil
}

func (x *Stp_Mstp_MstInstances_MstInstance_Interfaces_Interface_State) GetForwardTransisitions() *ywrapper.UintValue {
	if x != nil {
		return x.ForwardTransisitions
	}
	return nil
}

func (x *Stp_Mstp_MstInstances_MstInstance_Interfaces_Interface_State) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Stp_Mstp_MstInstances_MstInstance_Interfaces_Interface_State) GetPortNum() *ywrapper.UintValue {
	if x != nil {
		return x.PortNum
	}
	return nil
}

func (x *Stp_Mstp_MstInstances_MstInstance_Interfaces_Interface_State) GetPortPriority() *ywrapper.UintValue {
	if x != nil {
		return x.PortPriority
	}
	return nil
}

func (x *Stp_Mstp_MstInstances_MstInstance_Interfaces_Interface_State) GetPortState() OpenconfigSpanningTreeTypesSTPPORTSTATE {
	if x != nil {
		return x.PortState
	}
	return OpenconfigSpanningTreeTypesSTPPORTSTATE_OPENCONFIGSPANNINGTREETYPESSTPPORTSTATE_UNSET
}

func (x *Stp_Mstp_MstInstances_MstInstance_Interfaces_Interface_State) GetRole() OpenconfigSpanningTreeTypesSTPPORTROLE {
	if x != nil {
		return x.Role
	}
	return OpenconfigSpanningTreeTypesSTPPORTROLE_OPENCONFIGSPANNINGTREETYPESSTPPORTROLE_UNSET
}

type Stp_Mstp_MstInstances_MstInstance_Interfaces_Interface_State_Counters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BpduReceived *ywrapper.UintValue `protobuf:"bytes,63622203,opt,name=bpdu_received,json=bpduReceived,proto3" json:"bpdu_received,omitempty"`
	BpduSent     *ywrapper.UintValue `protobuf:"bytes,185749672,opt,name=bpdu_sent,json=bpduSent,proto3" json:"bpdu_sent,omitempty"`
}

func (x *Stp_Mstp_MstInstances_MstInstance_Interfaces_Interface_State_Counters) Reset() {
	*x = Stp_Mstp_MstInstances_MstInstance_Interfaces_Interface_State_Counters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_spanning_tree_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stp_Mstp_MstInstances_MstInstance_Interfaces_Interface_State_Counters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stp_Mstp_MstInstances_MstInstance_Interfaces_Interface_State_Counters) ProtoMessage() {}

func (x *Stp_Mstp_MstInstances_MstInstance_Interfaces_Interface_State_Counters) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_spanning_tree_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stp_Mstp_MstInstances_MstInstance_Interfaces_Interface_State_Counters.ProtoReflect.Descriptor instead.
func (*Stp_Mstp_MstInstances_MstInstance_Interfaces_Interface_State_Counters) Descriptor() ([]byte, []int) {
	return file_openconfig_spanning_tree_proto_rawDescGZIP(), []int{0, 2, 1, 0, 1, 0, 1, 0}
}

func (x *Stp_Mstp_MstInstances_MstInstance_Interfaces_Interface_State_Counters) GetBpduReceived() *ywrapper.UintValue {
	if x != nil {
		return x.BpduReceived
	}
	return nil
}

func (x *Stp_Mstp_MstInstances_MstInstance_Interfaces_Interface_State_Counters) GetBpduSent() *ywrapper.UintValue {
	if x != nil {
		return x.BpduSent
	}
	return nil
}

type Stp_Mstp_MstInstances_MstInstance_State_VlanUnion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VlanString string `protobuf:"bytes,26258314,opt,name=vlan_string,json=vlanString,proto3" json:"vlan_string,omitempty"`
	VlanUint64 uint64 `protobuf:"varint,405247499,opt,name=vlan_uint64,json=vlanUint64,proto3" json:"vlan_uint64,omitempty"`
}

func (x *Stp_Mstp_MstInstances_MstInstance_State_VlanUnion) Reset() {
	*x = Stp_Mstp_MstInstances_MstInstance_State_VlanUnion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_spanning_tree_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stp_Mstp_MstInstances_MstInstance_State_VlanUnion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stp_Mstp_MstInstances_MstInstance_State_VlanUnion) ProtoMessage() {}

func (x *Stp_Mstp_MstInstances_MstInstance_State_VlanUnion) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_spanning_tree_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stp_Mstp_MstInstances_MstInstance_State_VlanUnion.ProtoReflect.Descriptor instead.
func (*Stp_Mstp_MstInstances_MstInstance_State_VlanUnion) Descriptor() ([]byte, []int) {
	return file_openconfig_spanning_tree_proto_rawDescGZIP(), []int{0, 2, 1, 0, 2, 0}
}

func (x *Stp_Mstp_MstInstances_MstInstance_State_VlanUnion) GetVlanString() string {
	if x != nil {
		return x.VlanString
	}
	return ""
}

func (x *Stp_Mstp_MstInstances_MstInstance_State_VlanUnion) GetVlanUint64() uint64 {
	if x != nil {
		return x.VlanUint64
	}
	return 0
}

type Stp_RapidPvst_Vlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config     *Stp_RapidPvst_Vlan_Config     `protobuf:"bytes,145334722,opt,name=config,proto3" json:"config,omitempty"`
	Interfaces *Stp_RapidPvst_Vlan_Interfaces `protobuf:"bytes,305066408,opt,name=interfaces,proto3" json:"interfaces,omitempty"`
	State      *Stp_RapidPvst_Vlan_State      `protobuf:"bytes,420107135,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Stp_RapidPvst_Vlan) Reset() {
	*x = Stp_RapidPvst_Vlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_spanning_tree_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stp_RapidPvst_Vlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stp_RapidPvst_Vlan) ProtoMessage() {}

func (x *Stp_RapidPvst_Vlan) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_spanning_tree_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stp_RapidPvst_Vlan.ProtoReflect.Descriptor instead.
func (*Stp_RapidPvst_Vlan) Descriptor() ([]byte, []int) {
	return file_openconfig_spanning_tree_proto_rawDescGZIP(), []int{0, 3, 0}
}

func (x *Stp_RapidPvst_Vlan) GetConfig() *Stp_RapidPvst_Vlan_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Stp_RapidPvst_Vlan) GetInterfaces() *Stp_RapidPvst_Vlan_Interfaces {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

func (x *Stp_RapidPvst_Vlan) GetState() *Stp_RapidPvst_Vlan_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Stp_RapidPvst_VlanKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VlanId uint64              `protobuf:"varint,1,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
	Vlan   *Stp_RapidPvst_Vlan `protobuf:"bytes,2,opt,name=vlan,proto3" json:"vlan,omitempty"`
}

func (x *Stp_RapidPvst_VlanKey) Reset() {
	*x = Stp_RapidPvst_VlanKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_spanning_tree_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stp_RapidPvst_VlanKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stp_RapidPvst_VlanKey) ProtoMessage() {}

func (x *Stp_RapidPvst_VlanKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_spanning_tree_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stp_RapidPvst_VlanKey.ProtoReflect.Descriptor instead.
func (*Stp_RapidPvst_VlanKey) Descriptor() ([]byte, []int) {
	return file_openconfig_spanning_tree_proto_rawDescGZIP(), []int{0, 3, 1}
}

func (x *Stp_RapidPvst_VlanKey) GetVlanId() uint64 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

func (x *Stp_RapidPvst_VlanKey) GetVlan() *Stp_RapidPvst_Vlan {
	if x != nil {
		return x.Vlan
	}
	return nil
}

type Stp_RapidPvst_Vlan_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BridgePriority  *ywrapper.UintValue `protobuf:"bytes,77791083,opt,name=bridge_priority,json=bridgePriority,proto3" json:"bridge_priority,omitempty"`
	ForwardingDelay *ywrapper.UintValue `protobuf:"bytes,71214714,opt,name=forwarding_delay,json=forwardingDelay,proto3" json:"forwarding_delay,omitempty"`
	HelloTime       *ywrapper.UintValue `protobuf:"bytes,413699279,opt,name=hello_time,json=helloTime,proto3" json:"hello_time,omitempty"`
	HoldCount       *ywrapper.UintValue `protobuf:"bytes,247466364,opt,name=hold_count,json=holdCount,proto3" json:"hold_count,omitempty"`
	MaxAge          *ywrapper.UintValue `protobuf:"bytes,244952871,opt,name=max_age,json=maxAge,proto3" json:"max_age,omitempty"`
	VlanId          *ywrapper.UintValue `protobuf:"bytes,512435536,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
}

func (x *Stp_RapidPvst_Vlan_Config) Reset() {
	*x = Stp_RapidPvst_Vlan_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_spanning_tree_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stp_RapidPvst_Vlan_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stp_RapidPvst_Vlan_Config) ProtoMessage() {}

func (x *Stp_RapidPvst_Vlan_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_spanning_tree_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stp_RapidPvst_Vlan_Config.ProtoReflect.Descriptor instead.
func (*Stp_RapidPvst_Vlan_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_spanning_tree_proto_rawDescGZIP(), []int{0, 3, 0, 0}
}

func (x *Stp_RapidPvst_Vlan_Config) GetBridgePriority() *ywrapper.UintValue {
	if x != nil {
		return x.BridgePriority
	}
	return nil
}

func (x *Stp_RapidPvst_Vlan_Config) GetForwardingDelay() *ywrapper.UintValue {
	if x != nil {
		return x.ForwardingDelay
	}
	return nil
}

func (x *Stp_RapidPvst_Vlan_Config) GetHelloTime() *ywrapper.UintValue {
	if x != nil {
		return x.HelloTime
	}
	return nil
}

func (x *Stp_RapidPvst_Vlan_Config) GetHoldCount() *ywrapper.UintValue {
	if x != nil {
		return x.HoldCount
	}
	return nil
}

func (x *Stp_RapidPvst_Vlan_Config) GetMaxAge() *ywrapper.UintValue {
	if x != nil {
		return x.MaxAge
	}
	return nil
}

func (x *Stp_RapidPvst_Vlan_Config) GetVlanId() *ywrapper.UintValue {
	if x != nil {
		return x.VlanId
	}
	return nil
}

type Stp_RapidPvst_Vlan_Interfaces struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interface []*Stp_RapidPvst_Vlan_Interfaces_InterfaceKey `protobuf:"bytes,453728448,rep,name=interface,proto3" json:"interface,omitempty"`
}

func (x *Stp_RapidPvst_Vlan_Interfaces) Reset() {
	*x = Stp_RapidPvst_Vlan_Interfaces{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_spanning_tree_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stp_RapidPvst_Vlan_Interfaces) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stp_RapidPvst_Vlan_Interfaces) ProtoMessage() {}

func (x *Stp_RapidPvst_Vlan_Interfaces) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_spanning_tree_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stp_RapidPvst_Vlan_Interfaces.ProtoReflect.Descriptor instead.
func (*Stp_RapidPvst_Vlan_Interfaces) Descriptor() ([]byte, []int) {
	return file_openconfig_spanning_tree_proto_rawDescGZIP(), []int{0, 3, 0, 1}
}

func (x *Stp_RapidPvst_Vlan_Interfaces) GetInterface() []*Stp_RapidPvst_Vlan_Interfaces_InterfaceKey {
	if x != nil {
		return x.Interface
	}
	return nil
}

type Stp_RapidPvst_Vlan_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BridgeAddress          *ywrapper.StringValue `protobuf:"bytes,454985562,opt,name=bridge_address,json=bridgeAddress,proto3" json:"bridge_address,omitempty"`
	BridgePriority         *ywrapper.UintValue   `protobuf:"bytes,177157582,opt,name=bridge_priority,json=bridgePriority,proto3" json:"bridge_priority,omitempty"`
	DesignatedRootAddress  *ywrapper.StringValue `protobuf:"bytes,97211874,opt,name=designated_root_address,json=designatedRootAddress,proto3" json:"designated_root_address,omitempty"`
	DesignatedRootPriority *ywrapper.UintValue   `protobuf:"bytes,223616870,opt,name=designated_root_priority,json=designatedRootPriority,proto3" json:"designated_root_priority,omitempty"`
	ForwardingDelay        *ywrapper.UintValue   `protobuf:"bytes,192510517,opt,name=forwarding_delay,json=forwardingDelay,proto3" json:"forwarding_delay,omitempty"`
	HelloTime              *ywrapper.UintValue   `protobuf:"bytes,332690440,opt,name=hello_time,json=helloTime,proto3" json:"hello_time,omitempty"`
	HoldCount              *ywrapper.UintValue   `protobuf:"bytes,66902911,opt,name=hold_count,json=holdCount,proto3" json:"hold_count,omitempty"`
	HoldTime               *ywrapper.UintValue   `protobuf:"bytes,94235933,opt,name=hold_time,json=holdTime,proto3" json:"hold_time,omitempty"`
	LastTopologyChange     *ywrapper.UintValue   `protobuf:"bytes,533899253,opt,name=last_topology_change,json=lastTopologyChange,proto3" json:"last_topology_change,omitempty"`
	MaxAge                 *ywrapper.UintValue   `protobuf:"bytes,277917522,opt,name=max_age,json=maxAge,proto3" json:"max_age,omitempty"`
	RootCost               *ywrapper.UintValue   `protobuf:"bytes,379544816,opt,name=root_cost,json=rootCost,proto3" json:"root_cost,omitempty"`
	RootPort               *ywrapper.UintValue   `protobuf:"bytes,244515786,opt,name=root_port,json=rootPort,proto3" json:"root_port,omitempty"`
	TopologyChanges        *ywrapper.UintValue   `protobuf:"bytes,416437749,opt,name=topology_changes,json=topologyChanges,proto3" json:"topology_changes,omitempty"`
	VlanId                 *ywrapper.UintValue   `protobuf:"bytes,166116589,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
}

func (x *Stp_RapidPvst_Vlan_State) Reset() {
	*x = Stp_RapidPvst_Vlan_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_spanning_tree_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stp_RapidPvst_Vlan_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stp_RapidPvst_Vlan_State) ProtoMessage() {}

func (x *Stp_RapidPvst_Vlan_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_spanning_tree_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stp_RapidPvst_Vlan_State.ProtoReflect.Descriptor instead.
func (*Stp_RapidPvst_Vlan_State) Descriptor() ([]byte, []int) {
	return file_openconfig_spanning_tree_proto_rawDescGZIP(), []int{0, 3, 0, 2}
}

func (x *Stp_RapidPvst_Vlan_State) GetBridgeAddress() *ywrapper.StringValue {
	if x != nil {
		return x.BridgeAddress
	}
	return nil
}

func (x *Stp_RapidPvst_Vlan_State) GetBridgePriority() *ywrapper.UintValue {
	if x != nil {
		return x.BridgePriority
	}
	return nil
}

func (x *Stp_RapidPvst_Vlan_State) GetDesignatedRootAddress() *ywrapper.StringValue {
	if x != nil {
		return x.DesignatedRootAddress
	}
	return nil
}

func (x *Stp_RapidPvst_Vlan_State) GetDesignatedRootPriority() *ywrapper.UintValue {
	if x != nil {
		return x.DesignatedRootPriority
	}
	return nil
}

func (x *Stp_RapidPvst_Vlan_State) GetForwardingDelay() *ywrapper.UintValue {
	if x != nil {
		return x.ForwardingDelay
	}
	return nil
}

func (x *Stp_RapidPvst_Vlan_State) GetHelloTime() *ywrapper.UintValue {
	if x != nil {
		return x.HelloTime
	}
	return nil
}

func (x *Stp_RapidPvst_Vlan_State) GetHoldCount() *ywrapper.UintValue {
	if x != nil {
		return x.HoldCount
	}
	return nil
}

func (x *Stp_RapidPvst_Vlan_State) GetHoldTime() *ywrapper.UintValue {
	if x != nil {
		return x.HoldTime
	}
	return nil
}

func (x *Stp_RapidPvst_Vlan_State) GetLastTopologyChange() *ywrapper.UintValue {
	if x != nil {
		return x.LastTopologyChange
	}
	return nil
}

func (x *Stp_RapidPvst_Vlan_State) GetMaxAge() *ywrapper.UintValue {
	if x != nil {
		return x.MaxAge
	}
	return nil
}

func (x *Stp_RapidPvst_Vlan_State) GetRootCost() *ywrapper.UintValue {
	if x != nil {
		return x.RootCost
	}
	return nil
}

func (x *Stp_RapidPvst_Vlan_State) GetRootPort() *ywrapper.UintValue {
	if x != nil {
		return x.RootPort
	}
	return nil
}

func (x *Stp_RapidPvst_Vlan_State) GetTopologyChanges() *ywrapper.UintValue {
	if x != nil {
		return x.TopologyChanges
	}
	return nil
}

func (x *Stp_RapidPvst_Vlan_State) GetVlanId() *ywrapper.UintValue {
	if x != nil {
		return x.VlanId
	}
	return nil
}

type Stp_RapidPvst_Vlan_Interfaces_Interface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Stp_RapidPvst_Vlan_Interfaces_Interface_Config `protobuf:"bytes,115497141,opt,name=config,proto3" json:"config,omitempty"`
	State  *Stp_RapidPvst_Vlan_Interfaces_Interface_State  `protobuf:"bytes,204553130,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Stp_RapidPvst_Vlan_Interfaces_Interface) Reset() {
	*x = Stp_RapidPvst_Vlan_Interfaces_Interface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_spanning_tree_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stp_RapidPvst_Vlan_Interfaces_Interface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stp_RapidPvst_Vlan_Interfaces_Interface) ProtoMessage() {}

func (x *Stp_RapidPvst_Vlan_Interfaces_Interface) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_spanning_tree_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stp_RapidPvst_Vlan_Interfaces_Interface.ProtoReflect.Descriptor instead.
func (*Stp_RapidPvst_Vlan_Interfaces_Interface) Descriptor() ([]byte, []int) {
	return file_openconfig_spanning_tree_proto_rawDescGZIP(), []int{0, 3, 0, 1, 0}
}

func (x *Stp_RapidPvst_Vlan_Interfaces_Interface) GetConfig() *Stp_RapidPvst_Vlan_Interfaces_Interface_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Stp_RapidPvst_Vlan_Interfaces_Interface) GetState() *Stp_RapidPvst_Vlan_Interfaces_Interface_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Stp_RapidPvst_Vlan_Interfaces_InterfaceKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string                                   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Interface *Stp_RapidPvst_Vlan_Interfaces_Interface `protobuf:"bytes,2,opt,name=interface,proto3" json:"interface,omitempty"`
}

func (x *Stp_RapidPvst_Vlan_Interfaces_InterfaceKey) Reset() {
	*x = Stp_RapidPvst_Vlan_Interfaces_InterfaceKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_spanning_tree_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stp_RapidPvst_Vlan_Interfaces_InterfaceKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stp_RapidPvst_Vlan_Interfaces_InterfaceKey) ProtoMessage() {}

func (x *Stp_RapidPvst_Vlan_Interfaces_InterfaceKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_spanning_tree_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stp_RapidPvst_Vlan_Interfaces_InterfaceKey.ProtoReflect.Descriptor instead.
func (*Stp_RapidPvst_Vlan_Interfaces_InterfaceKey) Descriptor() ([]byte, []int) {
	return file_openconfig_spanning_tree_proto_rawDescGZIP(), []int{0, 3, 0, 1, 1}
}

func (x *Stp_RapidPvst_Vlan_Interfaces_InterfaceKey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Stp_RapidPvst_Vlan_Interfaces_InterfaceKey) GetInterface() *Stp_RapidPvst_Vlan_Interfaces_Interface {
	if x != nil {
		return x.Interface
	}
	return nil
}

type Stp_RapidPvst_Vlan_Interfaces_Interface_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cost         *ywrapper.UintValue   `protobuf:"bytes,112934615,opt,name=cost,proto3" json:"cost,omitempty"`
	Name         *ywrapper.StringValue `protobuf:"bytes,215156497,opt,name=name,proto3" json:"name,omitempty"`
	PortPriority *ywrapper.UintValue   `protobuf:"bytes,225996114,opt,name=port_priority,json=portPriority,proto3" json:"port_priority,omitempty"`
}

func (x *Stp_RapidPvst_Vlan_Interfaces_Interface_Config) Reset() {
	*x = Stp_RapidPvst_Vlan_Interfaces_Interface_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_spanning_tree_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stp_RapidPvst_Vlan_Interfaces_Interface_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stp_RapidPvst_Vlan_Interfaces_Interface_Config) ProtoMessage() {}

func (x *Stp_RapidPvst_Vlan_Interfaces_Interface_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_spanning_tree_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stp_RapidPvst_Vlan_Interfaces_Interface_Config.ProtoReflect.Descriptor instead.
func (*Stp_RapidPvst_Vlan_Interfaces_Interface_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_spanning_tree_proto_rawDescGZIP(), []int{0, 3, 0, 1, 0, 0}
}

func (x *Stp_RapidPvst_Vlan_Interfaces_Interface_Config) GetCost() *ywrapper.UintValue {
	if x != nil {
		return x.Cost
	}
	return nil
}

func (x *Stp_RapidPvst_Vlan_Interfaces_Interface_Config) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Stp_RapidPvst_Vlan_Interfaces_Interface_Config) GetPortPriority() *ywrapper.UintValue {
	if x != nil {
		return x.PortPriority
	}
	return nil
}

type Stp_RapidPvst_Vlan_Interfaces_Interface_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cost                     *ywrapper.UintValue                                     `protobuf:"bytes,389203710,opt,name=cost,proto3" json:"cost,omitempty"`
	Counters                 *Stp_RapidPvst_Vlan_Interfaces_Interface_State_Counters `protobuf:"bytes,259051782,opt,name=counters,proto3" json:"counters,omitempty"`
	DesignatedBridgeAddress  *ywrapper.StringValue                                   `protobuf:"bytes,285199560,opt,name=designated_bridge_address,json=designatedBridgeAddress,proto3" json:"designated_bridge_address,omitempty"`
	DesignatedBridgePriority *ywrapper.UintValue                                     `protobuf:"bytes,487332160,opt,name=designated_bridge_priority,json=designatedBridgePriority,proto3" json:"designated_bridge_priority,omitempty"`
	DesignatedCost           *ywrapper.UintValue                                     `protobuf:"bytes,205029575,opt,name=designated_cost,json=designatedCost,proto3" json:"designated_cost,omitempty"`
	DesignatedPortNum        *ywrapper.UintValue                                     `protobuf:"bytes,159446494,opt,name=designated_port_num,json=designatedPortNum,proto3" json:"designated_port_num,omitempty"`
	DesignatedPortPriority   *ywrapper.UintValue                                     `protobuf:"bytes,29583074,opt,name=designated_port_priority,json=designatedPortPriority,proto3" json:"designated_port_priority,omitempty"`
	DesignatedRootAddress    *ywrapper.StringValue                                   `protobuf:"bytes,140840559,opt,name=designated_root_address,json=designatedRootAddress,proto3" json:"designated_root_address,omitempty"`
	DesignatedRootPriority   *ywrapper.UintValue                                     `protobuf:"bytes,38925981,opt,name=designated_root_priority,json=designatedRootPriority,proto3" json:"designated_root_priority,omitempty"`
	ForwardTransisitions     *ywrapper.UintValue                                     `protobuf:"bytes,250621287,opt,name=forward_transisitions,json=forwardTransisitions,proto3" json:"forward_transisitions,omitempty"`
	Name                     *ywrapper.StringValue                                   `protobuf:"bytes,90243448,opt,name=name,proto3" json:"name,omitempty"`
	PortNum                  *ywrapper.UintValue                                     `protobuf:"bytes,258837963,opt,name=port_num,json=portNum,proto3" json:"port_num,omitempty"`
	PortPriority             *ywrapper.UintValue                                     `protobuf:"bytes,195511977,opt,name=port_priority,json=portPriority,proto3" json:"port_priority,omitempty"`
	PortState                OpenconfigSpanningTreeTypesSTPPORTSTATE                 `protobuf:"varint,363314876,opt,name=port_state,json=portState,proto3,enum=openconfig.OpenconfigSpanningTreeTypesSTPPORTSTATE" json:"port_state,omitempty"`
	Role                     OpenconfigSpanningTreeTypesSTPPORTROLE                  `protobuf:"varint,347361501,opt,name=role,proto3,enum=openconfig.OpenconfigSpanningTreeTypesSTPPORTROLE" json:"role,omitempty"`
}

func (x *Stp_RapidPvst_Vlan_Interfaces_Interface_State) Reset() {
	*x = Stp_RapidPvst_Vlan_Interfaces_Interface_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_spanning_tree_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stp_RapidPvst_Vlan_Interfaces_Interface_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stp_RapidPvst_Vlan_Interfaces_Interface_State) ProtoMessage() {}

func (x *Stp_RapidPvst_Vlan_Interfaces_Interface_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_spanning_tree_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stp_RapidPvst_Vlan_Interfaces_Interface_State.ProtoReflect.Descriptor instead.
func (*Stp_RapidPvst_Vlan_Interfaces_Interface_State) Descriptor() ([]byte, []int) {
	return file_openconfig_spanning_tree_proto_rawDescGZIP(), []int{0, 3, 0, 1, 0, 1}
}

func (x *Stp_RapidPvst_Vlan_Interfaces_Interface_State) GetCost() *ywrapper.UintValue {
	if x != nil {
		return x.Cost
	}
	return nil
}

func (x *Stp_RapidPvst_Vlan_Interfaces_Interface_State) GetCounters() *Stp_RapidPvst_Vlan_Interfaces_Interface_State_Counters {
	if x != nil {
		return x.Counters
	}
	return nil
}

func (x *Stp_RapidPvst_Vlan_Interfaces_Interface_State) GetDesignatedBridgeAddress() *ywrapper.StringValue {
	if x != nil {
		return x.DesignatedBridgeAddress
	}
	return nil
}

func (x *Stp_RapidPvst_Vlan_Interfaces_Interface_State) GetDesignatedBridgePriority() *ywrapper.UintValue {
	if x != nil {
		return x.DesignatedBridgePriority
	}
	return nil
}

func (x *Stp_RapidPvst_Vlan_Interfaces_Interface_State) GetDesignatedCost() *ywrapper.UintValue {
	if x != nil {
		return x.DesignatedCost
	}
	return nil
}

func (x *Stp_RapidPvst_Vlan_Interfaces_Interface_State) GetDesignatedPortNum() *ywrapper.UintValue {
	if x != nil {
		return x.DesignatedPortNum
	}
	return nil
}

func (x *Stp_RapidPvst_Vlan_Interfaces_Interface_State) GetDesignatedPortPriority() *ywrapper.UintValue {
	if x != nil {
		return x.DesignatedPortPriority
	}
	return nil
}

func (x *Stp_RapidPvst_Vlan_Interfaces_Interface_State) GetDesignatedRootAddress() *ywrapper.StringValue {
	if x != nil {
		return x.DesignatedRootAddress
	}
	return nil
}

func (x *Stp_RapidPvst_Vlan_Interfaces_Interface_State) GetDesignatedRootPriority() *ywrapper.UintValue {
	if x != nil {
		return x.DesignatedRootPriority
	}
	return nil
}

func (x *Stp_RapidPvst_Vlan_Interfaces_Interface_State) GetForwardTransisitions() *ywrapper.UintValue {
	if x != nil {
		return x.ForwardTransisitions
	}
	return nil
}

func (x *Stp_RapidPvst_Vlan_Interfaces_Interface_State) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Stp_RapidPvst_Vlan_Interfaces_Interface_State) GetPortNum() *ywrapper.UintValue {
	if x != nil {
		return x.PortNum
	}
	return nil
}

func (x *Stp_RapidPvst_Vlan_Interfaces_Interface_State) GetPortPriority() *ywrapper.UintValue {
	if x != nil {
		return x.PortPriority
	}
	return nil
}

func (x *Stp_RapidPvst_Vlan_Interfaces_Interface_State) GetPortState() OpenconfigSpanningTreeTypesSTPPORTSTATE {
	if x != nil {
		return x.PortState
	}
	return OpenconfigSpanningTreeTypesSTPPORTSTATE_OPENCONFIGSPANNINGTREETYPESSTPPORTSTATE_UNSET
}

func (x *Stp_RapidPvst_Vlan_Interfaces_Interface_State) GetRole() OpenconfigSpanningTreeTypesSTPPORTROLE {
	if x != nil {
		return x.Role
	}
	return OpenconfigSpanningTreeTypesSTPPORTROLE_OPENCONFIGSPANNINGTREETYPESSTPPORTROLE_UNSET
}

type Stp_RapidPvst_Vlan_Interfaces_Interface_State_Counters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BpduReceived *ywrapper.UintValue `protobuf:"bytes,123889350,opt,name=bpdu_received,json=bpduReceived,proto3" json:"bpdu_received,omitempty"`
	BpduSent     *ywrapper.UintValue `protobuf:"bytes,14257893,opt,name=bpdu_sent,json=bpduSent,proto3" json:"bpdu_sent,omitempty"`
}

func (x *Stp_RapidPvst_Vlan_Interfaces_Interface_State_Counters) Reset() {
	*x = Stp_RapidPvst_Vlan_Interfaces_Interface_State_Counters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_spanning_tree_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stp_RapidPvst_Vlan_Interfaces_Interface_State_Counters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stp_RapidPvst_Vlan_Interfaces_Interface_State_Counters) ProtoMessage() {}

func (x *Stp_RapidPvst_Vlan_Interfaces_Interface_State_Counters) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_spanning_tree_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stp_RapidPvst_Vlan_Interfaces_Interface_State_Counters.ProtoReflect.Descriptor instead.
func (*Stp_RapidPvst_Vlan_Interfaces_Interface_State_Counters) Descriptor() ([]byte, []int) {
	return file_openconfig_spanning_tree_proto_rawDescGZIP(), []int{0, 3, 0, 1, 0, 1, 0}
}

func (x *Stp_RapidPvst_Vlan_Interfaces_Interface_State_Counters) GetBpduReceived() *ywrapper.UintValue {
	if x != nil {
		return x.BpduReceived
	}
	return nil
}

func (x *Stp_RapidPvst_Vlan_Interfaces_Interface_State_Counters) GetBpduSent() *ywrapper.UintValue {
	if x != nil {
		return x.BpduSent
	}
	return nil
}

type Stp_Rstp_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BridgePriority  *ywrapper.UintValue `protobuf:"bytes,196251874,opt,name=bridge_priority,json=bridgePriority,proto3" json:"bridge_priority,omitempty"`
	ForwardingDelay *ywrapper.UintValue `protobuf:"bytes,470783249,opt,name=forwarding_delay,json=forwardingDelay,proto3" json:"forwarding_delay,omitempty"`
	HelloTime       *ywrapper.UintValue `protobuf:"bytes,88797588,opt,name=hello_time,json=helloTime,proto3" json:"hello_time,omitempty"`
	HoldCount       *ywrapper.UintValue `protobuf:"bytes,405807659,opt,name=hold_count,json=holdCount,proto3" json:"hold_count,omitempty"`
	MaxAge          *ywrapper.UintValue `protobuf:"bytes,60314870,opt,name=max_age,json=maxAge,proto3" json:"max_age,omitempty"`
}

func (x *Stp_Rstp_Config) Reset() {
	*x = Stp_Rstp_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_spanning_tree_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stp_Rstp_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stp_Rstp_Config) ProtoMessage() {}

func (x *Stp_Rstp_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_spanning_tree_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stp_Rstp_Config.ProtoReflect.Descriptor instead.
func (*Stp_Rstp_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_spanning_tree_proto_rawDescGZIP(), []int{0, 4, 0}
}

func (x *Stp_Rstp_Config) GetBridgePriority() *ywrapper.UintValue {
	if x != nil {
		return x.BridgePriority
	}
	return nil
}

func (x *Stp_Rstp_Config) GetForwardingDelay() *ywrapper.UintValue {
	if x != nil {
		return x.ForwardingDelay
	}
	return nil
}

func (x *Stp_Rstp_Config) GetHelloTime() *ywrapper.UintValue {
	if x != nil {
		return x.HelloTime
	}
	return nil
}

func (x *Stp_Rstp_Config) GetHoldCount() *ywrapper.UintValue {
	if x != nil {
		return x.HoldCount
	}
	return nil
}

func (x *Stp_Rstp_Config) GetMaxAge() *ywrapper.UintValue {
	if x != nil {
		return x.MaxAge
	}
	return nil
}

type Stp_Rstp_Interfaces struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interface []*Stp_Rstp_Interfaces_InterfaceKey `protobuf:"bytes,355189053,rep,name=interface,proto3" json:"interface,omitempty"`
}

func (x *Stp_Rstp_Interfaces) Reset() {
	*x = Stp_Rstp_Interfaces{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_spanning_tree_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stp_Rstp_Interfaces) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stp_Rstp_Interfaces) ProtoMessage() {}

func (x *Stp_Rstp_Interfaces) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_spanning_tree_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stp_Rstp_Interfaces.ProtoReflect.Descriptor instead.
func (*Stp_Rstp_Interfaces) Descriptor() ([]byte, []int) {
	return file_openconfig_spanning_tree_proto_rawDescGZIP(), []int{0, 4, 1}
}

func (x *Stp_Rstp_Interfaces) GetInterface() []*Stp_Rstp_Interfaces_InterfaceKey {
	if x != nil {
		return x.Interface
	}
	return nil
}

type Stp_Rstp_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BridgeAddress          *ywrapper.StringValue `protobuf:"bytes,213481315,opt,name=bridge_address,json=bridgeAddress,proto3" json:"bridge_address,omitempty"`
	BridgePriority         *ywrapper.UintValue   `protobuf:"bytes,63741073,opt,name=bridge_priority,json=bridgePriority,proto3" json:"bridge_priority,omitempty"`
	DesignatedRootAddress  *ywrapper.StringValue `protobuf:"bytes,45031113,opt,name=designated_root_address,json=designatedRootAddress,proto3" json:"designated_root_address,omitempty"`
	DesignatedRootPriority *ywrapper.UintValue   `protobuf:"bytes,269547755,opt,name=designated_root_priority,json=designatedRootPriority,proto3" json:"designated_root_priority,omitempty"`
	ForwardingDelay        *ywrapper.UintValue   `protobuf:"bytes,386063712,opt,name=forwarding_delay,json=forwardingDelay,proto3" json:"forwarding_delay,omitempty"`
	HelloTime              *ywrapper.UintValue   `protobuf:"bytes,491083589,opt,name=hello_time,json=helloTime,proto3" json:"hello_time,omitempty"`
	HoldCount              *ywrapper.UintValue   `protobuf:"bytes,17772518,opt,name=hold_count,json=holdCount,proto3" json:"hold_count,omitempty"`
	HoldTime               *ywrapper.UintValue   `protobuf:"bytes,406520974,opt,name=hold_time,json=holdTime,proto3" json:"hold_time,omitempty"`
	LastTopologyChange     *ywrapper.UintValue   `protobuf:"bytes,249731960,opt,name=last_topology_change,json=lastTopologyChange,proto3" json:"last_topology_change,omitempty"`
	MaxAge                 *ywrapper.UintValue   `protobuf:"bytes,80445073,opt,name=max_age,json=maxAge,proto3" json:"max_age,omitempty"`
	RootCost               *ywrapper.UintValue   `protobuf:"bytes,495356843,opt,name=root_cost,json=rootCost,proto3" json:"root_cost,omitempty"`
	RootPort               *ywrapper.UintValue   `protobuf:"bytes,510345949,opt,name=root_port,json=rootPort,proto3" json:"root_port,omitempty"`
	TopologyChanges        *ywrapper.UintValue   `protobuf:"bytes,266385392,opt,name=topology_changes,json=topologyChanges,proto3" json:"topology_changes,omitempty"`
}

func (x *Stp_Rstp_State) Reset() {
	*x = Stp_Rstp_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_spanning_tree_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stp_Rstp_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stp_Rstp_State) ProtoMessage() {}

func (x *Stp_Rstp_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_spanning_tree_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stp_Rstp_State.ProtoReflect.Descriptor instead.
func (*Stp_Rstp_State) Descriptor() ([]byte, []int) {
	return file_openconfig_spanning_tree_proto_rawDescGZIP(), []int{0, 4, 2}
}

func (x *Stp_Rstp_State) GetBridgeAddress() *ywrapper.StringValue {
	if x != nil {
		return x.BridgeAddress
	}
	return nil
}

func (x *Stp_Rstp_State) GetBridgePriority() *ywrapper.UintValue {
	if x != nil {
		return x.BridgePriority
	}
	return nil
}

func (x *Stp_Rstp_State) GetDesignatedRootAddress() *ywrapper.StringValue {
	if x != nil {
		return x.DesignatedRootAddress
	}
	return nil
}

func (x *Stp_Rstp_State) GetDesignatedRootPriority() *ywrapper.UintValue {
	if x != nil {
		return x.DesignatedRootPriority
	}
	return nil
}

func (x *Stp_Rstp_State) GetForwardingDelay() *ywrapper.UintValue {
	if x != nil {
		return x.ForwardingDelay
	}
	return nil
}

func (x *Stp_Rstp_State) GetHelloTime() *ywrapper.UintValue {
	if x != nil {
		return x.HelloTime
	}
	return nil
}

func (x *Stp_Rstp_State) GetHoldCount() *ywrapper.UintValue {
	if x != nil {
		return x.HoldCount
	}
	return nil
}

func (x *Stp_Rstp_State) GetHoldTime() *ywrapper.UintValue {
	if x != nil {
		return x.HoldTime
	}
	return nil
}

func (x *Stp_Rstp_State) GetLastTopologyChange() *ywrapper.UintValue {
	if x != nil {
		return x.LastTopologyChange
	}
	return nil
}

func (x *Stp_Rstp_State) GetMaxAge() *ywrapper.UintValue {
	if x != nil {
		return x.MaxAge
	}
	return nil
}

func (x *Stp_Rstp_State) GetRootCost() *ywrapper.UintValue {
	if x != nil {
		return x.RootCost
	}
	return nil
}

func (x *Stp_Rstp_State) GetRootPort() *ywrapper.UintValue {
	if x != nil {
		return x.RootPort
	}
	return nil
}

func (x *Stp_Rstp_State) GetTopologyChanges() *ywrapper.UintValue {
	if x != nil {
		return x.TopologyChanges
	}
	return nil
}

type Stp_Rstp_Interfaces_Interface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Stp_Rstp_Interfaces_Interface_Config `protobuf:"bytes,420941170,opt,name=config,proto3" json:"config,omitempty"`
	State  *Stp_Rstp_Interfaces_Interface_State  `protobuf:"bytes,463506799,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Stp_Rstp_Interfaces_Interface) Reset() {
	*x = Stp_Rstp_Interfaces_Interface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_spanning_tree_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stp_Rstp_Interfaces_Interface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stp_Rstp_Interfaces_Interface) ProtoMessage() {}

func (x *Stp_Rstp_Interfaces_Interface) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_spanning_tree_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stp_Rstp_Interfaces_Interface.ProtoReflect.Descriptor instead.
func (*Stp_Rstp_Interfaces_Interface) Descriptor() ([]byte, []int) {
	return file_openconfig_spanning_tree_proto_rawDescGZIP(), []int{0, 4, 1, 0}
}

func (x *Stp_Rstp_Interfaces_Interface) GetConfig() *Stp_Rstp_Interfaces_Interface_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Stp_Rstp_Interfaces_Interface) GetState() *Stp_Rstp_Interfaces_Interface_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Stp_Rstp_Interfaces_InterfaceKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string                         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Interface *Stp_Rstp_Interfaces_Interface `protobuf:"bytes,2,opt,name=interface,proto3" json:"interface,omitempty"`
}

func (x *Stp_Rstp_Interfaces_InterfaceKey) Reset() {
	*x = Stp_Rstp_Interfaces_InterfaceKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_spanning_tree_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stp_Rstp_Interfaces_InterfaceKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stp_Rstp_Interfaces_InterfaceKey) ProtoMessage() {}

func (x *Stp_Rstp_Interfaces_InterfaceKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_spanning_tree_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stp_Rstp_Interfaces_InterfaceKey.ProtoReflect.Descriptor instead.
func (*Stp_Rstp_Interfaces_InterfaceKey) Descriptor() ([]byte, []int) {
	return file_openconfig_spanning_tree_proto_rawDescGZIP(), []int{0, 4, 1, 1}
}

func (x *Stp_Rstp_Interfaces_InterfaceKey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Stp_Rstp_Interfaces_InterfaceKey) GetInterface() *Stp_Rstp_Interfaces_Interface {
	if x != nil {
		return x.Interface
	}
	return nil
}

type Stp_Rstp_Interfaces_Interface_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cost         *ywrapper.UintValue   `protobuf:"bytes,25438518,opt,name=cost,proto3" json:"cost,omitempty"`
	Name         *ywrapper.StringValue `protobuf:"bytes,302799488,opt,name=name,proto3" json:"name,omitempty"`
	PortPriority *ywrapper.UintValue   `protobuf:"bytes,410079105,opt,name=port_priority,json=portPriority,proto3" json:"port_priority,omitempty"`
}

func (x *Stp_Rstp_Interfaces_Interface_Config) Reset() {
	*x = Stp_Rstp_Interfaces_Interface_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_spanning_tree_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stp_Rstp_Interfaces_Interface_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stp_Rstp_Interfaces_Interface_Config) ProtoMessage() {}

func (x *Stp_Rstp_Interfaces_Interface_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_spanning_tree_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stp_Rstp_Interfaces_Interface_Config.ProtoReflect.Descriptor instead.
func (*Stp_Rstp_Interfaces_Interface_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_spanning_tree_proto_rawDescGZIP(), []int{0, 4, 1, 0, 0}
}

func (x *Stp_Rstp_Interfaces_Interface_Config) GetCost() *ywrapper.UintValue {
	if x != nil {
		return x.Cost
	}
	return nil
}

func (x *Stp_Rstp_Interfaces_Interface_Config) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Stp_Rstp_Interfaces_Interface_Config) GetPortPriority() *ywrapper.UintValue {
	if x != nil {
		return x.PortPriority
	}
	return nil
}

type Stp_Rstp_Interfaces_Interface_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cost                     *ywrapper.UintValue                           `protobuf:"bytes,347107837,opt,name=cost,proto3" json:"cost,omitempty"`
	Counters                 *Stp_Rstp_Interfaces_Interface_State_Counters `protobuf:"bytes,318690949,opt,name=counters,proto3" json:"counters,omitempty"`
	DesignatedBridgeAddress  *ywrapper.StringValue                         `protobuf:"bytes,29300777,opt,name=designated_bridge_address,json=designatedBridgeAddress,proto3" json:"designated_bridge_address,omitempty"`
	DesignatedBridgePriority *ywrapper.UintValue                           `protobuf:"bytes,321366475,opt,name=designated_bridge_priority,json=designatedBridgePriority,proto3" json:"designated_bridge_priority,omitempty"`
	DesignatedCost           *ywrapper.UintValue                           `protobuf:"bytes,246446598,opt,name=designated_cost,json=designatedCost,proto3" json:"designated_cost,omitempty"`
	DesignatedPortNum        *ywrapper.UintValue                           `protobuf:"bytes,328815587,opt,name=designated_port_num,json=designatedPortNum,proto3" json:"designated_port_num,omitempty"`
	DesignatedPortPriority   *ywrapper.UintValue                           `protobuf:"bytes,514948785,opt,name=designated_port_priority,json=designatedPortPriority,proto3" json:"designated_port_priority,omitempty"`
	DesignatedRootAddress    *ywrapper.StringValue                         `protobuf:"bytes,38863474,opt,name=designated_root_address,json=designatedRootAddress,proto3" json:"designated_root_address,omitempty"`
	DesignatedRootPriority   *ywrapper.UintValue                           `protobuf:"bytes,341500118,opt,name=designated_root_priority,json=designatedRootPriority,proto3" json:"designated_root_priority,omitempty"`
	ForwardTransisitions     *ywrapper.UintValue                           `protobuf:"bytes,239692746,opt,name=forward_transisitions,json=forwardTransisitions,proto3" json:"forward_transisitions,omitempty"`
	Name                     *ywrapper.StringValue                         `protobuf:"bytes,449319447,opt,name=name,proto3" json:"name,omitempty"`
	PortNum                  *ywrapper.UintValue                           `protobuf:"bytes,226492252,opt,name=port_num,json=portNum,proto3" json:"port_num,omitempty"`
	PortPriority             *ywrapper.UintValue                           `protobuf:"bytes,118646276,opt,name=port_priority,json=portPriority,proto3" json:"port_priority,omitempty"`
	PortState                OpenconfigSpanningTreeTypesSTPPORTSTATE       `protobuf:"varint,99013219,opt,name=port_state,json=portState,proto3,enum=openconfig.OpenconfigSpanningTreeTypesSTPPORTSTATE" json:"port_state,omitempty"`
	Role                     OpenconfigSpanningTreeTypesSTPPORTROLE        `protobuf:"varint,363416170,opt,name=role,proto3,enum=openconfig.OpenconfigSpanningTreeTypesSTPPORTROLE" json:"role,omitempty"`
}

func (x *Stp_Rstp_Interfaces_Interface_State) Reset() {
	*x = Stp_Rstp_Interfaces_Interface_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_spanning_tree_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stp_Rstp_Interfaces_Interface_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stp_Rstp_Interfaces_Interface_State) ProtoMessage() {}

func (x *Stp_Rstp_Interfaces_Interface_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_spanning_tree_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stp_Rstp_Interfaces_Interface_State.ProtoReflect.Descriptor instead.
func (*Stp_Rstp_Interfaces_Interface_State) Descriptor() ([]byte, []int) {
	return file_openconfig_spanning_tree_proto_rawDescGZIP(), []int{0, 4, 1, 0, 1}
}

func (x *Stp_Rstp_Interfaces_Interface_State) GetCost() *ywrapper.UintValue {
	if x != nil {
		return x.Cost
	}
	return nil
}

func (x *Stp_Rstp_Interfaces_Interface_State) GetCounters() *Stp_Rstp_Interfaces_Interface_State_Counters {
	if x != nil {
		return x.Counters
	}
	return nil
}

func (x *Stp_Rstp_Interfaces_Interface_State) GetDesignatedBridgeAddress() *ywrapper.StringValue {
	if x != nil {
		return x.DesignatedBridgeAddress
	}
	return nil
}

func (x *Stp_Rstp_Interfaces_Interface_State) GetDesignatedBridgePriority() *ywrapper.UintValue {
	if x != nil {
		return x.DesignatedBridgePriority
	}
	return nil
}

func (x *Stp_Rstp_Interfaces_Interface_State) GetDesignatedCost() *ywrapper.UintValue {
	if x != nil {
		return x.DesignatedCost
	}
	return nil
}

func (x *Stp_Rstp_Interfaces_Interface_State) GetDesignatedPortNum() *ywrapper.UintValue {
	if x != nil {
		return x.DesignatedPortNum
	}
	return nil
}

func (x *Stp_Rstp_Interfaces_Interface_State) GetDesignatedPortPriority() *ywrapper.UintValue {
	if x != nil {
		return x.DesignatedPortPriority
	}
	return nil
}

func (x *Stp_Rstp_Interfaces_Interface_State) GetDesignatedRootAddress() *ywrapper.StringValue {
	if x != nil {
		return x.DesignatedRootAddress
	}
	return nil
}

func (x *Stp_Rstp_Interfaces_Interface_State) GetDesignatedRootPriority() *ywrapper.UintValue {
	if x != nil {
		return x.DesignatedRootPriority
	}
	return nil
}

func (x *Stp_Rstp_Interfaces_Interface_State) GetForwardTransisitions() *ywrapper.UintValue {
	if x != nil {
		return x.ForwardTransisitions
	}
	return nil
}

func (x *Stp_Rstp_Interfaces_Interface_State) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Stp_Rstp_Interfaces_Interface_State) GetPortNum() *ywrapper.UintValue {
	if x != nil {
		return x.PortNum
	}
	return nil
}

func (x *Stp_Rstp_Interfaces_Interface_State) GetPortPriority() *ywrapper.UintValue {
	if x != nil {
		return x.PortPriority
	}
	return nil
}

func (x *Stp_Rstp_Interfaces_Interface_State) GetPortState() OpenconfigSpanningTreeTypesSTPPORTSTATE {
	if x != nil {
		return x.PortState
	}
	return OpenconfigSpanningTreeTypesSTPPORTSTATE_OPENCONFIGSPANNINGTREETYPESSTPPORTSTATE_UNSET
}

func (x *Stp_Rstp_Interfaces_Interface_State) GetRole() OpenconfigSpanningTreeTypesSTPPORTROLE {
	if x != nil {
		return x.Role
	}
	return OpenconfigSpanningTreeTypesSTPPORTROLE_OPENCONFIGSPANNINGTREETYPESSTPPORTROLE_UNSET
}

type Stp_Rstp_Interfaces_Interface_State_Counters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BpduReceived *ywrapper.UintValue `protobuf:"bytes,339806433,opt,name=bpdu_received,json=bpduReceived,proto3" json:"bpdu_received,omitempty"`
	BpduSent     *ywrapper.UintValue `protobuf:"bytes,418372722,opt,name=bpdu_sent,json=bpduSent,proto3" json:"bpdu_sent,omitempty"`
}

func (x *Stp_Rstp_Interfaces_Interface_State_Counters) Reset() {
	*x = Stp_Rstp_Interfaces_Interface_State_Counters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_spanning_tree_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stp_Rstp_Interfaces_Interface_State_Counters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stp_Rstp_Interfaces_Interface_State_Counters) ProtoMessage() {}

func (x *Stp_Rstp_Interfaces_Interface_State_Counters) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_spanning_tree_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stp_Rstp_Interfaces_Interface_State_Counters.ProtoReflect.Descriptor instead.
func (*Stp_Rstp_Interfaces_Interface_State_Counters) Descriptor() ([]byte, []int) {
	return file_openconfig_spanning_tree_proto_rawDescGZIP(), []int{0, 4, 1, 0, 1, 0}
}

func (x *Stp_Rstp_Interfaces_Interface_State_Counters) GetBpduReceived() *ywrapper.UintValue {
	if x != nil {
		return x.BpduReceived
	}
	return nil
}

func (x *Stp_Rstp_Interfaces_Interface_State_Counters) GetBpduSent() *ywrapper.UintValue {
	if x != nil {
		return x.BpduSent
	}
	return nil
}

var File_openconfig_spanning_tree_proto protoreflect.FileDescriptor

var file_openconfig_spanning_tree_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73, 0x70, 0x61,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x0e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x79, 0x65,
	0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xf8, 0xb4, 0x01, 0x0a, 0x03, 0x53, 0x74, 0x70, 0x12, 0x41, 0x0a, 0x06, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x18, 0xb2, 0x9e, 0x85, 0x5d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x70, 0x2e, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x42, 0x0e, 0x82, 0x41, 0x0b, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x52, 0x06, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x12, 0x52, 0x0a, 0x0a,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0xab, 0x96, 0xa7, 0xb7, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x53, 0x74, 0x70, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x42, 0x12, 0x82, 0x41, 0x0f, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x12, 0x3a, 0x0a, 0x04, 0x6d, 0x73, 0x74, 0x70, 0x18, 0xa7, 0xbe, 0xfc, 0x91, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x53, 0x74, 0x70, 0x2e, 0x4d, 0x73, 0x74, 0x70, 0x42, 0x0c, 0x82, 0x41, 0x09, 0x2f, 0x73, 0x74,
	0x70, 0x2f, 0x6d, 0x73, 0x74, 0x70, 0x52, 0x04, 0x6d, 0x73, 0x74, 0x70, 0x12, 0x4f, 0x0a, 0x0a,
	0x72, 0x61, 0x70, 0x69, 0x64, 0x5f, 0x70, 0x76, 0x73, 0x74, 0x18, 0x83, 0xcd, 0x91, 0x36, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x53, 0x74, 0x70, 0x2e, 0x52, 0x61, 0x70, 0x69, 0x64, 0x50, 0x76, 0x73, 0x74, 0x42, 0x12,
	0x82, 0x41, 0x0f, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x72, 0x61, 0x70, 0x69, 0x64, 0x2d, 0x70, 0x76,
	0x73, 0x74, 0x52, 0x09, 0x72, 0x61, 0x70, 0x69, 0x64, 0x50, 0x76, 0x73, 0x74, 0x12, 0x39, 0x0a,
	0x04, 0x72, 0x73, 0x74, 0x70, 0x18, 0xaa, 0xc8, 0xe2, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x70, 0x2e,
	0x52, 0x73, 0x74, 0x70, 0x42, 0x0c, 0x82, 0x41, 0x09, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x72, 0x73,
	0x74, 0x70, 0x52, 0x04, 0x72, 0x73, 0x74, 0x70, 0x1a, 0xf6, 0x0d, 0x0a, 0x06, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x12, 0x50, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xf3, 0x88,
	0x9f, 0x8f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x15, 0x82, 0x41, 0x12, 0x2f, 0x73, 0x74, 0x70, 0x2f,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xd4,
	0xe3, 0x98, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x14, 0x82, 0x41, 0x11, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x1a, 0xa9, 0x06, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x5b, 0x0a,
	0x0b, 0x62, 0x70, 0x64, 0x75, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0xd4, 0xe7, 0xb2,
	0xc7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x21, 0x82, 0x41, 0x1e,
	0x2f, 0x73, 0x74, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x62, 0x70, 0x64, 0x75, 0x2d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0a,
	0x62, 0x70, 0x64, 0x75, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x58, 0x0a, 0x0a, 0x62, 0x70,
	0x64, 0x75, 0x5f, 0x67, 0x75, 0x61, 0x72, 0x64, 0x18, 0xa9, 0xa7, 0xf5, 0xd3, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x20, 0x82, 0x41, 0x1d, 0x2f, 0x73, 0x74, 0x70,
	0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x62,
	0x70, 0x64, 0x75, 0x2d, 0x67, 0x75, 0x61, 0x72, 0x64, 0x52, 0x09, 0x62, 0x70, 0x64, 0x75, 0x47,
	0x75, 0x61, 0x72, 0x64, 0x12, 0x86, 0x01, 0x0a, 0x1a, 0x62, 0x70, 0x64, 0x75, 0x67, 0x75, 0x61,
	0x72, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x18, 0xca, 0xf0, 0xa5, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x30, 0x82, 0x41, 0x2d, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x62, 0x70, 0x64, 0x75, 0x67, 0x75, 0x61,
	0x72, 0x64, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x2d, 0x72, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x52, 0x18, 0x62, 0x70, 0x64, 0x75, 0x67, 0x75, 0x61, 0x72, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x12, 0x69, 0x0a,
	0x10, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0xf5, 0xaa, 0x9e, 0x53, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x26, 0x82, 0x41, 0x23, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2d, 0x61, 0x73,
	0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x41,
	0x73, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x89, 0x01, 0x0a, 0x10, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0xba, 0xa3,
	0xd0, 0xf7, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x70, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x65, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x53, 0x54, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x42, 0x26, 0x82, 0x41, 0x23,
	0x2f, 0x73, 0x74, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x52, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x8d, 0x01, 0x0a, 0x1c, 0x65, 0x74, 0x68, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6d, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x67, 0x75, 0x61, 0x72, 0x64, 0x18, 0xcb, 0xd9, 0x97, 0xd3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x32, 0x82, 0x41, 0x2f, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x74, 0x68, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x6d, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2d, 0x67, 0x75, 0x61, 0x72, 0x64, 0x52, 0x1a, 0x65, 0x74, 0x68, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47,
	0x75, 0x61, 0x72, 0x64, 0x12, 0x58, 0x0a, 0x0a, 0x6c, 0x6f, 0x6f, 0x70, 0x5f, 0x67, 0x75, 0x61,
	0x72, 0x64, 0x18, 0xac, 0xb8, 0x93, 0x95, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x20, 0x82, 0x41, 0x1d, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6c, 0x6f, 0x6f, 0x70, 0x2d, 0x67, 0x75,
	0x61, 0x72, 0x64, 0x52, 0x09, 0x6c, 0x6f, 0x6f, 0x70, 0x47, 0x75, 0x61, 0x72, 0x64, 0x1a, 0xa0,
	0x06, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x59, 0x0a, 0x0b, 0x62, 0x70, 0x64, 0x75,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0xeb, 0x8d, 0xc9, 0x17, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x20, 0x82, 0x41, 0x1d, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x62, 0x70, 0x64, 0x75,
	0x2d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x62, 0x70, 0x64, 0x75, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x57, 0x0a, 0x0a, 0x62, 0x70, 0x64, 0x75, 0x5f, 0x67, 0x75, 0x61, 0x72,
	0x64, 0x18, 0xfc, 0xe5, 0xbd, 0xb8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x1f, 0x82, 0x41, 0x1c, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x62, 0x70, 0x64, 0x75, 0x2d, 0x67, 0x75, 0x61, 0x72,
	0x64, 0x52, 0x09, 0x62, 0x70, 0x64, 0x75, 0x47, 0x75, 0x61, 0x72, 0x64, 0x12, 0x86, 0x01, 0x0a,
	0x1a, 0x62, 0x70, 0x64, 0x75, 0x67, 0x75, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x18, 0xdf, 0xb8, 0xb4, 0xfa,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2f, 0x82, 0x41, 0x2c, 0x2f,
	0x73, 0x74, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x62, 0x70, 0x64, 0x75, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x2d, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x18, 0x62, 0x70, 0x64,
	0x75, 0x67, 0x75, 0x61, 0x72, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x12, 0x68, 0x0a, 0x10, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f,
	0x61, 0x73, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0xc4, 0xcf, 0xac, 0x71, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x25, 0x82, 0x41, 0x22, 0x2f, 0x73, 0x74, 0x70,
	0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x2d, 0x61, 0x73, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0f,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x41, 0x73, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x88, 0x01, 0x0a, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x18, 0xff, 0xca, 0xd0, 0x95, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x32,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x70, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x72,
	0x65, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x53, 0x54, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4f, 0x4c, 0x42, 0x25, 0x82, 0x41, 0x22, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x8c, 0x01, 0x0a, 0x1c, 0x65,
	0x74, 0x68, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6d, 0x69, 0x73, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x67, 0x75, 0x61, 0x72, 0x64, 0x18, 0xd2, 0xc1, 0x93, 0x9e,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x31, 0x82, 0x41, 0x2e, 0x2f,
	0x73, 0x74, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x6d, 0x69,
	0x73, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2d, 0x67, 0x75, 0x61, 0x72, 0x64, 0x52, 0x1a, 0x65,
	0x74, 0x68, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x69, 0x73, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x47, 0x75, 0x61, 0x72, 0x64, 0x12, 0x56, 0x0a, 0x0a, 0x6c, 0x6f, 0x6f,
	0x70, 0x5f, 0x67, 0x75, 0x61, 0x72, 0x64, 0x18, 0xbd, 0x8a, 0xf9, 0x42, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1f, 0x82, 0x41, 0x1c, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x6f, 0x6f, 0x70,
	0x2d, 0x67, 0x75, 0x61, 0x72, 0x64, 0x52, 0x09, 0x6c, 0x6f, 0x6f, 0x70, 0x47, 0x75, 0x61, 0x72,
	0x64, 0x1a, 0xba, 0x0e, 0x0a, 0x0a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x12, 0x67, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0xfb, 0xd7,
	0xa4, 0x9c, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x70, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4b, 0x65, 0x79,
	0x42, 0x1c, 0x82, 0x41, 0x19, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x09,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x1a, 0xb6, 0x0c, 0x0a, 0x09, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x6c, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0xac, 0xf2, 0xbc, 0xe3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x70, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x23, 0x82, 0x41, 0x20, 0x2f, 0x73, 0x74,
	0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x67, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xa5,
	0xaa, 0xbb, 0x54, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x70, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x22, 0x82, 0x41, 0x1f, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xab,
	0x05, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x69, 0x0a, 0x0b, 0x62, 0x70, 0x64,
	0x75, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0xa3, 0xa2, 0xe2, 0xeb, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2f, 0x82, 0x41, 0x2c, 0x2f, 0x73, 0x74, 0x70,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x62, 0x70, 0x64,
	0x75, 0x2d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x62, 0x70, 0x64, 0x75, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x65, 0x0a, 0x0a, 0x62, 0x70, 0x64, 0x75, 0x5f, 0x67, 0x75, 0x61,
	0x72, 0x64, 0x18, 0x84, 0xdf, 0x92, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x2e, 0x82, 0x41, 0x2b, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x62, 0x70, 0x64, 0x75, 0x2d, 0x67, 0x75, 0x61, 0x72, 0x64,
	0x52, 0x09, 0x62, 0x70, 0x64, 0x75, 0x47, 0x75, 0x61, 0x72, 0x64, 0x12, 0x82, 0x01, 0x0a, 0x09,
	0x65, 0x64, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0xb8, 0xc5, 0x9f, 0xb8, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x70, 0x61, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x54, 0x72, 0x65, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x53, 0x54, 0x50, 0x45,
	0x44, 0x47, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x42, 0x2d, 0x82, 0x41, 0x2a, 0x2f, 0x73, 0x74, 0x70,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x64, 0x67,
	0x65, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x08, 0x65, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x73, 0x0a, 0x05, 0x67, 0x75, 0x61, 0x72, 0x64, 0x18, 0xee, 0xc6, 0x9e, 0xc4, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x70, 0x61, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x54, 0x72, 0x65, 0x65, 0x53, 0x74, 0x70, 0x47, 0x75, 0x61, 0x72, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x29, 0x82, 0x41, 0x26, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x67, 0x75, 0x61, 0x72, 0x64, 0x52, 0x05,
	0x67, 0x75, 0x61, 0x72, 0x64, 0x12, 0x7d, 0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0xd0, 0x80, 0xb3, 0xb6, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x70, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x65, 0x65,
	0x53, 0x74, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x42, 0x2d, 0x82, 0x41, 0x2a,
	0x2f, 0x73, 0x74, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x56, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xee, 0xf8, 0xb7,
	0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x28, 0x82, 0x41,
	0x25, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0xa3, 0x05, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x67, 0x0a, 0x0b, 0x62, 0x70, 0x64, 0x75, 0x5f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0xde, 0xbf, 0x96, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x2e, 0x82, 0x41, 0x2b, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x62, 0x70, 0x64, 0x75, 0x2d, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x0a, 0x62, 0x70, 0x64, 0x75, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x64, 0x0a, 0x0a, 0x62, 0x70, 0x64, 0x75, 0x5f, 0x67, 0x75, 0x61, 0x72, 0x64, 0x18, 0xef, 0x9f,
	0xff, 0x59, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2d, 0x82, 0x41, 0x2a,
	0x2f, 0x73, 0x74, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x62, 0x70, 0x64, 0x75, 0x2d, 0x67, 0x75, 0x61, 0x72, 0x64, 0x52, 0x09, 0x62, 0x70, 0x64, 0x75,
	0x47, 0x75, 0x61, 0x72, 0x64, 0x12, 0x80, 0x01, 0x0a, 0x09, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x91, 0xdc, 0xe9, 0x36, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x70, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x65, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x53, 0x54, 0x50, 0x45, 0x44, 0x47, 0x45, 0x50, 0x4f, 0x52, 0x54,
	0x42, 0x2c, 0x82, 0x41, 0x29, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x08,
	0x65, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x72, 0x0a, 0x05, 0x67, 0x75, 0x61, 0x72,
	0x64, 0x18, 0xb7, 0xf2, 0x93, 0xcb, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x70, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x65, 0x65, 0x53,
	0x74, 0x70, 0x47, 0x75, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x42, 0x28, 0x82, 0x41, 0x25,
	0x2f, 0x73, 0x74, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x67, 0x75, 0x61, 0x72, 0x64, 0x52, 0x05, 0x67, 0x75, 0x61, 0x72, 0x64, 0x12, 0x7c, 0x0a, 0x09,
	0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0xb5, 0x8d, 0x9a, 0xb8, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x70, 0x61, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x54, 0x72, 0x65, 0x65, 0x53, 0x74, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x2c, 0x82, 0x41, 0x29, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x74, 0x79, 0x70, 0x65,
	0x52, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x56, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0xe1, 0xfa, 0xd9, 0xb3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x27, 0x82, 0x41, 0x24, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x1a, 0x89, 0x01, 0x0a, 0x0c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x4b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x21, 0x82, 0x41, 0x1e, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x70, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x1a, 0xd9,
	0x3e, 0x0a, 0x04, 0x4d, 0x73, 0x74, 0x70, 0x12, 0x4c, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0xb8, 0x84, 0xdf, 0xac, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x70, 0x2e, 0x4d, 0x73, 0x74,
	0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x13, 0x82, 0x41, 0x10, 0x2f, 0x73, 0x74,
	0x70, 0x2f, 0x6d, 0x73, 0x74, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x65, 0x0a, 0x0d, 0x6d, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0xb5, 0xa4, 0xdb, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x70,
	0x2e, 0x4d, 0x73, 0x74, 0x70, 0x2e, 0x4d, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x42, 0x1a, 0x82, 0x41, 0x17, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x6d, 0x73, 0x74, 0x70,
	0x2f, 0x6d, 0x73, 0x74, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x0c,
	0x6d, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xd1, 0xa2, 0xfb, 0xc7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x70,
	0x2e, 0x4d, 0x73, 0x74, 0x70, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x12, 0x82, 0x41, 0x0f,
	0x2f, 0x73, 0x74, 0x70, 0x2f, 0x6d, 0x73, 0x74, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xd7, 0x04, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x67, 0x0a, 0x10, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0xac, 0xad, 0xdd, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x24, 0x82, 0x41, 0x21, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x6d, 0x73, 0x74,
	0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x2d, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x52, 0x0f, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x55, 0x0a, 0x0a, 0x68, 0x65,
	0x6c, 0x6c, 0x6f, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xa1, 0xfb, 0xd0, 0x4a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1e, 0x82, 0x41, 0x1b, 0x2f, 0x73, 0x74, 0x70, 0x2f,
	0x6d, 0x73, 0x74, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x68, 0x65, 0x6c, 0x6c,
	0x6f, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x56, 0x0a, 0x0a, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0xb2, 0x99, 0xdb, 0xaf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1e,
	0x82, 0x41, 0x1b, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x6d, 0x73, 0x74, 0x70, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x09,
	0x68, 0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x07, 0x6d, 0x61, 0x78,
	0x5f, 0x61, 0x67, 0x65, 0x18, 0x85, 0x88, 0xff, 0x4a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x1b, 0x82, 0x41, 0x18, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x6d, 0x73, 0x74, 0x70,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x61, 0x67, 0x65, 0x52,
	0x06, 0x6d, 0x61, 0x78, 0x41, 0x67, 0x65, 0x12, 0x4d, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x68,
	0x6f, 0x70, 0x18, 0xf9, 0xfa, 0xa8, 0x8a, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x1b, 0x82, 0x41, 0x18, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x6d, 0x73, 0x74, 0x70, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x68, 0x6f, 0x70, 0x52, 0x06,
	0x6d, 0x61, 0x78, 0x48, 0x6f, 0x70, 0x12, 0x46, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x82,
	0xd8, 0x96, 0x62, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x18,
	0x82, 0x41, 0x15, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x6d, 0x73, 0x74, 0x70, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x50,
	0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xc8, 0x80, 0x92, 0x48, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1c, 0x82, 0x41, 0x19, 0x2f, 0x73, 0x74,
	0x70, 0x2f, 0x6d, 0x73, 0x74, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x72, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x1a, 0xa2, 0x33, 0x0a, 0x0c, 0x4d, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x12, 0x80, 0x01, 0x0a, 0x0c, 0x6d, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x94, 0xbb, 0x93, 0xed, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x70, 0x2e, 0x4d, 0x73,
	0x74, 0x70, 0x2e, 0x4d, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e,
	0x4d, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x42, 0x27,
	0x82, 0x41, 0x24, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x6d, 0x73, 0x74, 0x70, 0x2f, 0x6d, 0x73, 0x74,
	0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x6d, 0x73, 0x74, 0x2d, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x6d, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x1a, 0xe2, 0x30, 0x0a, 0x0b, 0x4d, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x99, 0x90, 0xb7, 0xe1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x70, 0x2e, 0x4d, 0x73, 0x74, 0x70, 0x2e,
	0x4d, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x2e, 0x82, 0x41, 0x2b, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x6d, 0x73, 0x74, 0x70, 0x2f, 0x6d, 0x73,
	0x74, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x6d, 0x73, 0x74, 0x2d,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x90, 0x01, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0xf7, 0xb4, 0x9d, 0xea, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74,
	0x70, 0x2e, 0x4d, 0x73, 0x74, 0x70, 0x2e, 0x4d, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x2e, 0x4d, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x42, 0x32, 0x82, 0x41, 0x2f, 0x2f,
	0x73, 0x74, 0x70, 0x2f, 0x6d, 0x73, 0x74, 0x70, 0x2f, 0x6d, 0x73, 0x74, 0x2d, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x6d, 0x73, 0x74, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x52, 0x0a,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x7c, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0xee, 0xd7, 0xbc, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x70, 0x2e, 0x4d,
	0x73, 0x74, 0x70, 0x2e, 0x4d, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x2e, 0x4d, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x2d, 0x82, 0x41, 0x2a, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x6d, 0x73, 0x74, 0x70,
	0x2f, 0x6d, 0x73, 0x74, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x6d,
	0x73, 0x74, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xd3, 0x03, 0x0a, 0x06, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x7f, 0x0a, 0x0f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0xac, 0xd3, 0xcd, 0x47, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x6d, 0x73,
	0x74, 0x70, 0x2f, 0x6d, 0x73, 0x74, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x2f, 0x6d, 0x73, 0x74, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2d, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x52, 0x0e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x64, 0x0a, 0x06, 0x6d, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x8a,
	0x8a, 0xa9, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x35, 0x82, 0x41,
	0x32, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x6d, 0x73, 0x74, 0x70, 0x2f, 0x6d, 0x73, 0x74, 0x2d, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x6d, 0x73, 0x74, 0x2d, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x73, 0x74,
	0x2d, 0x69, 0x64, 0x52, 0x05, 0x6d, 0x73, 0x74, 0x49, 0x64, 0x12, 0x8b, 0x01, 0x0a, 0x04, 0x76,
	0x6c, 0x61, 0x6e, 0x18, 0x9b, 0x9a, 0xf5, 0xf6, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x70, 0x2e, 0x4d,
	0x73, 0x74, 0x70, 0x2e, 0x4d, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x2e, 0x4d, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x33, 0x82,
	0x41, 0x30, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x6d, 0x73, 0x74, 0x70, 0x2f, 0x6d, 0x73, 0x74, 0x2d,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x6d, 0x73, 0x74, 0x2d, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x76, 0x6c,
	0x61, 0x6e, 0x52, 0x04, 0x76, 0x6c, 0x61, 0x6e, 0x1a, 0x54, 0x0a, 0x09, 0x56, 0x6c, 0x61, 0x6e,
	0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0b, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0xe1, 0xcb, 0xff, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76,
	0x6c, 0x61, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0b, 0x76, 0x6c, 0x61,
	0x6e, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x84, 0xe8, 0x85, 0xab, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x76, 0x6c, 0x61, 0x6e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x1a, 0xff,
	0x1d, 0x0a, 0x0a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0xa4, 0x01,
	0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x87, 0xea, 0xcb, 0x27,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x53, 0x74, 0x70, 0x2e, 0x4d, 0x73, 0x74, 0x70, 0x2e, 0x4d, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x42, 0x3c, 0x82, 0x41, 0x39,
	0x2f, 0x73, 0x74, 0x70, 0x2f, 0x6d, 0x73, 0x74, 0x70, 0x2f, 0x6d, 0x73, 0x74, 0x2d, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x6d, 0x73, 0x74, 0x2d, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x1a, 0xff, 0x1a, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x12, 0xaa, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x98, 0x84,
	0x83, 0xee, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x70, 0x2e, 0x4d, 0x73, 0x74, 0x70, 0x2e, 0x4d, 0x73,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x43, 0x82, 0x41, 0x40, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x6d, 0x73, 0x74, 0x70,
	0x2f, 0x6d, 0x73, 0x74, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x6d,
	0x73, 0x74, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0xa5, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xb1, 0xdd, 0xb6, 0x40, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x48, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x53, 0x74, 0x70, 0x2e, 0x4d, 0x73, 0x74, 0x70, 0x2e, 0x4d, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x42, 0x82, 0x41,
	0x3f, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x6d, 0x73, 0x74, 0x70, 0x2f, 0x6d, 0x73, 0x74, 0x2d, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x6d, 0x73, 0x74, 0x2d, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x87, 0x03, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x74, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x88, 0x99, 0xcd, 0x6e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x48, 0x82, 0x41, 0x45, 0x2f, 0x73, 0x74,
	0x70, 0x2f, 0x6d, 0x73, 0x74, 0x70, 0x2f, 0x6d, 0x73, 0x74, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x2f, 0x6d, 0x73, 0x74, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x6f,
	0x73, 0x74, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x76, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0xe2, 0x9f, 0xd8, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x48, 0x82, 0x41, 0x45, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x6d, 0x73, 0x74, 0x70, 0x2f, 0x6d,
	0x73, 0x74, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x6d, 0x73, 0x74,
	0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x8e, 0x01, 0x0a, 0x0d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0xd7, 0xae, 0xfc, 0x42, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x51, 0x82, 0x41, 0x4e, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x6d, 0x73, 0x74, 0x70, 0x2f, 0x6d,
	0x73, 0x74, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x6d, 0x73, 0x74,
	0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x52, 0x0c, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x1a, 0x92, 0x15, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x73, 0x0a, 0x04, 0x63,
	0x6f, 0x73, 0x74, 0x18, 0xa3, 0xb2, 0x9d, 0x4c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x47, 0x82, 0x41, 0x44, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x6d, 0x73, 0x74, 0x70, 0x2f,
	0x6d, 0x73, 0x74, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x6d, 0x73,
	0x74, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74,
	0x12, 0xbe, 0x01, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0xab, 0xbd,
	0xfd, 0xf7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x70, 0x2e, 0x4d, 0x73, 0x74, 0x70, 0x2e, 0x4d, 0x73,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x42, 0x4b, 0x82, 0x41, 0x48, 0x2f,
	0x73, 0x74, 0x70, 0x2f, 0x6d, 0x73, 0x74, 0x70, 0x2f, 0x6d, 0x73, 0x74, 0x2d, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x6d, 0x73, 0x74, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x12, 0xb2, 0x01, 0x0a, 0x19, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0xab, 0xcc, 0xd8, 0x53, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x5c, 0x82, 0x41, 0x59, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x6d, 0x73, 0x74, 0x70, 0x2f, 0x6d, 0x73,
	0x74, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x6d, 0x73, 0x74, 0x2d,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x17, 0x64,
	0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0xb4, 0x01, 0x0a, 0x1a, 0x64, 0x65, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x89, 0xd9, 0xff, 0xc3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x5d, 0x82, 0x41, 0x5a, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x6d, 0x73,
	0x74, 0x70, 0x2f, 0x6d, 0x73, 0x74, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x2f, 0x6d, 0x73, 0x74, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x65, 0x64, 0x2d, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2d, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x52, 0x18, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x93, 0x01,
	0x0a, 0x0f, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x73,
	0x74, 0x18, 0xd4, 0xc7, 0xd8, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x52, 0x82, 0x41, 0x4f, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x6d, 0x73, 0x74, 0x70, 0x2f, 0x6d, 0x73,
	0x74, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x6d, 0x73, 0x74, 0x2d,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x63,
	0x6f, 0x73, 0x74, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x43,
	0x6f, 0x73, 0x74, 0x12, 0x9f, 0x01, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0xe1, 0xa3, 0xe4, 0x91,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x56, 0x82, 0x41, 0x53, 0x2f,
	0x73, 0x74, 0x70, 0x2f, 0x6d, 0x73, 0x74, 0x70, 0x2f, 0x6d, 0x73, 0x74, 0x2d, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x6d, 0x73, 0x74, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64,
	0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x6e,
	0x75, 0x6d, 0x52, 0x11, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x50, 0x6f,
	0x72, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0xad, 0x01, 0x0a, 0x18, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0xf3, 0xb3, 0xa6, 0x49, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x5b, 0x82, 0x41, 0x58, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x6d, 0x73, 0x74, 0x70, 0x2f, 0x6d,
	0x73, 0x74, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x6d, 0x73, 0x74,
	0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x2d,
	0x70, 0x6f, 0x72, 0x74, 0x2d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x16, 0x64,
	0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0xac, 0x01, 0x0a, 0x17, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0xcc, 0xdf, 0xa1, 0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x5a, 0x82, 0x41, 0x57, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x6d, 0x73, 0x74, 0x70, 0x2f,
	0x6d, 0x73, 0x74, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x6d, 0x73,
	0x74, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64,
	0x2d, 0x72, 0x6f, 0x6f, 0x74, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x15, 0x64,
	0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x6f, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0xad, 0x01, 0x0a, 0x18, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x84, 0xac, 0xdb, 0x5e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x5b, 0x82, 0x41, 0x58, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x6d, 0x73, 0x74, 0x70, 0x2f, 0x6d, 0x73,
	0x74, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x6d, 0x73, 0x74, 0x2d,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x72,
	0x6f, 0x6f, 0x74, 0x2d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x16, 0x64, 0x65,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x6f, 0x74, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x12, 0xa6, 0x01, 0x0a, 0x15, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xe8,
	0xf0, 0x8c, 0xab, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x58, 0x82,
	0x41, 0x55, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x6d, 0x73, 0x74, 0x70, 0x2f, 0x6d, 0x73, 0x74, 0x2d,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x6d, 0x73, 0x74, 0x2d, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x2d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x14, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x76, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xc5, 0xfe, 0xce, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x47, 0x82, 0x41, 0x44, 0x2f, 0x73, 0x74, 0x70, 0x2f,
	0x6d, 0x73, 0x74, 0x70, 0x2f, 0x6d, 0x73, 0x74, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x2f, 0x6d, 0x73, 0x74, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x7f, 0x0a, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x75,
	0x6d, 0x18, 0xba, 0xe5, 0xd5, 0xe7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x4b, 0x82, 0x41, 0x48, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x6d, 0x73, 0x74, 0x70, 0x2f, 0x6d,
	0x73, 0x74, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x6d, 0x73, 0x74,
	0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x6e, 0x75, 0x6d, 0x52, 0x07, 0x70,
	0x6f, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x8d, 0x01, 0x0a, 0x0d, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x8e, 0x99, 0xca, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x50, 0x82, 0x41, 0x4d, 0x2f, 0x73, 0x74, 0x70, 0x2f,
	0x6d, 0x73, 0x74, 0x70, 0x2f, 0x6d, 0x73, 0x74, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x2f, 0x6d, 0x73, 0x74, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2d,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0xa4, 0x01, 0x0a, 0x0a, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xf9, 0xe9, 0xf8, 0x78, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x70, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x72,
	0x65, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x53, 0x54, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x42, 0x4d, 0x82, 0x41, 0x4a, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x6d, 0x73, 0x74,
	0x70, 0x2f, 0x6d, 0x73, 0x74, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f,
	0x6d, 0x73, 0x74, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x93, 0x01,
	0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0xa4, 0xc9, 0xf2, 0x8b, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x70, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x54, 0x72, 0x65, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x53, 0x54, 0x50, 0x50, 0x4f, 0x52, 0x54,
	0x52, 0x4f, 0x4c, 0x45, 0x42, 0x47, 0x82, 0x41, 0x44, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x6d, 0x73,
	0x74, 0x70, 0x2f, 0x6d, 0x73, 0x74, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x2f, 0x6d, 0x73, 0x74, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72,
	0x6f, 0x6c, 0x65, 0x1a, 0xb0, 0x02, 0x0a, 0x08, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x96, 0x01, 0x0a, 0x0d, 0x62, 0x70, 0x64, 0x75, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x18, 0xbb, 0x98, 0xab, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x59, 0x82, 0x41, 0x56, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x6d, 0x73, 0x74, 0x70, 0x2f, 0x6d,
	0x73, 0x74, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x6d, 0x73, 0x74,
	0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x62, 0x70,
	0x64, 0x75, 0x2d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x52, 0x0c, 0x62, 0x70, 0x64,
	0x75, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x8a, 0x01, 0x0a, 0x09, 0x62, 0x70,
	0x64, 0x75, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0xa8, 0xa1, 0xc9, 0x58, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x55, 0x82, 0x41, 0x52, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x6d,
	0x73, 0x74, 0x70, 0x2f, 0x6d, 0x73, 0x74, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x2f, 0x6d, 0x73, 0x74, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x2f, 0x62, 0x70, 0x64, 0x75, 0x2d, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x62, 0x70,
	0x64, 0x75, 0x53, 0x65, 0x6e, 0x74, 0x1a, 0xc7, 0x01, 0x0a, 0x0c, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x55, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x6d,
	0x73, 0x74, 0x70, 0x2f, 0x6d, 0x73, 0x74, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x2f, 0x6d, 0x73, 0x74, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x60,
	0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x42, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53,
	0x74, 0x70, 0x2e, 0x4d, 0x73, 0x74, 0x70, 0x2e, 0x4d, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x1a, 0xe6, 0x0b, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x7e, 0x0a, 0x0e, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xdd, 0xeb, 0x86,
	0xf8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3c, 0x82,
	0x41, 0x39, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x6d, 0x73, 0x74, 0x70, 0x2f, 0x6d, 0x73, 0x74, 0x2d,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x6d, 0x73, 0x74, 0x2d, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0d, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x7f, 0x0a, 0x0f, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0xef, 0xc5,
	0xa1, 0xa8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3d, 0x82, 0x41,
	0x3a, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x6d, 0x73, 0x74, 0x70, 0x2f, 0x6d, 0x73, 0x74, 0x2d, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x6d, 0x73, 0x74, 0x2d, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x2d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x0e, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x97, 0x01, 0x0a, 0x17,
	0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xf3, 0x80, 0xd3, 0x1b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x73, 0x74, 0x70,
	0x2f, 0x6d, 0x73, 0x74, 0x70, 0x2f, 0x6d, 0x73, 0x74, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x2f, 0x6d, 0x73, 0x74, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65,
	0x64, 0x2d, 0x72, 0x6f, 0x6f, 0x74, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x15,
	0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x6f, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x99, 0x01, 0x0a, 0x18, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x81, 0xc1, 0xc9, 0xa7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x6d, 0x73, 0x74, 0x70, 0x2f,
	0x6d, 0x73, 0x74, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x6d, 0x73,
	0x74, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x72, 0x6f, 0x6f, 0x74,
	0x2d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x16, 0x64, 0x65, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x6f, 0x74, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x6d, 0x0a, 0x09, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x98,
	0xec, 0xff, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x37, 0x82,
	0x41, 0x34, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x6d, 0x73, 0x74, 0x70, 0x2f, 0x6d, 0x73, 0x74, 0x2d,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x6d, 0x73, 0x74, 0x2d, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x68, 0x6f, 0x6c,
	0x64, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x08, 0x68, 0x6f, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x8c, 0x01, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0xb2, 0xc2, 0xed, 0x43, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x73, 0x74, 0x70,
	0x2f, 0x6d, 0x73, 0x74, 0x70, 0x2f, 0x6d, 0x73, 0x74, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x2f, 0x6d, 0x73, 0x74, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x61, 0x73, 0x74, 0x2d, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x12, 0x6c, 0x61, 0x73,
	0x74, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x64, 0x0a, 0x06, 0x6d, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0xe3, 0xc7, 0xef, 0xc2, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x34, 0x82, 0x41, 0x31, 0x2f, 0x73, 0x74,
	0x70, 0x2f, 0x6d, 0x73, 0x74, 0x70, 0x2f, 0x6d, 0x73, 0x74, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x2f, 0x6d, 0x73, 0x74, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x73, 0x74, 0x2d, 0x69, 0x64, 0x52, 0x05,
	0x6d, 0x73, 0x74, 0x49, 0x64, 0x12, 0x6d, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x63, 0x6f,
	0x73, 0x74, 0x18, 0xf9, 0xbe, 0xbb, 0x91, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x37, 0x82, 0x41, 0x34, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x6d, 0x73, 0x74, 0x70, 0x2f,
	0x6d, 0x73, 0x74, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x6d, 0x73,
	0x74, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x72, 0x6f, 0x6f, 0x74, 0x2d, 0x63, 0x6f, 0x73, 0x74, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x74,
	0x43, 0x6f, 0x73, 0x74, 0x12, 0x6d, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0xa7, 0xc5, 0xbb, 0xbd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x37, 0x82, 0x41, 0x34, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x6d, 0x73, 0x74, 0x70, 0x2f, 0x6d,
	0x73, 0x74, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x6d, 0x73, 0x74,
	0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x72, 0x6f, 0x6f, 0x74, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x74, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x82, 0x01, 0x0a, 0x10, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0xea, 0xc5, 0x85, 0x98, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x73, 0x74, 0x70,
	0x2f, 0x6d, 0x73, 0x74, 0x70, 0x2f, 0x6d, 0x73, 0x74, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x2f, 0x6d, 0x73, 0x74, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2d,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x0f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x88, 0x01, 0x0a, 0x04, 0x76, 0x6c, 0x61,
	0x6e, 0x18, 0xe2, 0xef, 0xd2, 0x53, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x70, 0x2e, 0x4d, 0x73, 0x74, 0x70,
	0x2e, 0x4d, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x73,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x56, 0x6c, 0x61, 0x6e, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x32, 0x82, 0x41, 0x2f, 0x2f, 0x73,
	0x74, 0x70, 0x2f, 0x6d, 0x73, 0x74, 0x70, 0x2f, 0x6d, 0x73, 0x74, 0x2d, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x6d, 0x73, 0x74, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x52, 0x04, 0x76,
	0x6c, 0x61, 0x6e, 0x1a, 0x54, 0x0a, 0x09, 0x56, 0x6c, 0x61, 0x6e, 0x55, 0x6e, 0x69, 0x6f, 0x6e,
	0x12, 0x22, 0x0a, 0x0b, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x8a, 0xd7, 0xc2, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x6c, 0x61, 0x6e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0b, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x75, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x18, 0x8b, 0xac, 0x9e, 0xc1, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x76,
	0x6c, 0x61, 0x6e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x1a, 0xa9, 0x01, 0x0a, 0x0e, 0x4d, 0x73,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x45, 0x0a, 0x06,
	0x6d, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x2e, 0x82, 0x41,
	0x2b, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x6d, 0x73, 0x74, 0x70, 0x2f, 0x6d, 0x73, 0x74, 0x2d, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x6d, 0x73, 0x74, 0x2d, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x6d, 0x73, 0x74, 0x2d, 0x69, 0x64, 0x52, 0x05, 0x6d, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x0c, 0x6d, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x70, 0x2e, 0x4d, 0x73, 0x74, 0x70, 0x2e,
	0x4d, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x6d, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0xd2, 0x04, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x67, 0x0a, 0x10, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65,
	0x6c, 0x61, 0x79, 0x18, 0xdb, 0xa7, 0xba, 0xf4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x23, 0x82, 0x41, 0x20, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x6d, 0x73, 0x74, 0x70,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x2d, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x52, 0x0f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x55, 0x0a, 0x0a, 0x68, 0x65, 0x6c, 0x6c,
	0x6f, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xc6, 0xf4, 0xc4, 0xf7, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1d, 0x82, 0x41, 0x1a, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x6d,
	0x73, 0x74, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x2d,
	0x74, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x54, 0x0a, 0x0a, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xd1, 0xbf,
	0x86, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1d, 0x82, 0x41, 0x1a,
	0x2f, 0x73, 0x74, 0x70, 0x2f, 0x6d, 0x73, 0x74, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x09, 0x68, 0x6f, 0x6c, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x67, 0x65,
	0x18, 0xdc, 0xcd, 0xd0, 0xf6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x1a, 0x82, 0x41, 0x17, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x6d, 0x73, 0x74, 0x70, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x61, 0x67, 0x65, 0x52, 0x06, 0x6d, 0x61, 0x78,
	0x41, 0x67, 0x65, 0x12, 0x4b, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x68, 0x6f, 0x70, 0x18, 0xe0,
	0xb9, 0x8c, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1a, 0x82, 0x41,
	0x17, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x6d, 0x73, 0x74, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x68, 0x6f, 0x70, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x48, 0x6f, 0x70,
	0x12, 0x46, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xe5, 0x84, 0xd6, 0xac, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x17, 0x82, 0x41, 0x14, 0x2f, 0x73,
	0x74, 0x70, 0x2f, 0x6d, 0x73, 0x74, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x61,
	0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0xf3, 0x8c, 0xa3, 0xcb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x1b, 0x82, 0x41, 0x18, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x6d, 0x73, 0x74,
	0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0xa3, 0x2f, 0x0a, 0x09, 0x52,
	0x61, 0x70, 0x69, 0x64, 0x50, 0x76, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x04, 0x76, 0x6c, 0x61, 0x6e,
	0x18, 0xad, 0x95, 0xc3, 0xed, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x70, 0x2e, 0x52, 0x61, 0x70, 0x69,
	0x64, 0x50, 0x76, 0x73, 0x74, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x4b, 0x65, 0x79, 0x42, 0x17, 0x82,
	0x41, 0x14, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x72, 0x61, 0x70, 0x69, 0x64, 0x2d, 0x70, 0x76, 0x73,
	0x74, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x52, 0x04, 0x76, 0x6c, 0x61, 0x6e, 0x1a, 0xc8, 0x2d, 0x0a,
	0x04, 0x56, 0x6c, 0x61, 0x6e, 0x12, 0x60, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0xc2, 0xc3, 0xa6, 0x45, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x70, 0x2e, 0x52, 0x61, 0x70, 0x69, 0x64, 0x50,
	0x76, 0x73, 0x74, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x1e, 0x82, 0x41, 0x1b, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x72, 0x61, 0x70, 0x69, 0x64, 0x2d, 0x70,
	0x76, 0x73, 0x74, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x71, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0xa8, 0xe3, 0xbb, 0x91, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x70,
	0x2e, 0x52, 0x61, 0x70, 0x69, 0x64, 0x50, 0x76, 0x73, 0x74, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x42, 0x22, 0x82, 0x41, 0x1f, 0x2f,
	0x73, 0x74, 0x70, 0x2f, 0x72, 0x61, 0x70, 0x69, 0x64, 0x2d, 0x70, 0x76, 0x73, 0x74, 0x2f, 0x76,
	0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x52, 0x0a,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x5d, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0xff, 0xa6, 0xa9, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x70, 0x2e, 0x52,
	0x61, 0x70, 0x69, 0x64, 0x50, 0x76, 0x73, 0x74, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x1d, 0x82, 0x41, 0x1a, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x72, 0x61, 0x70,
	0x69, 0x64, 0x2d, 0x70, 0x76, 0x73, 0x74, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xe5, 0x04, 0x0a, 0x06, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x6f, 0x0a, 0x0f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0xeb, 0xfe, 0x8b, 0x25, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2e, 0x82, 0x41, 0x2b, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x72,
	0x61, 0x70, 0x69, 0x64, 0x2d, 0x70, 0x76, 0x73, 0x74, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2d, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x0e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x72, 0x0a, 0x10, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0xfa, 0xcc, 0xfa, 0x21, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2f, 0x82, 0x41, 0x2c, 0x2f, 0x73, 0x74, 0x70,
	0x2f, 0x72, 0x61, 0x70, 0x69, 0x64, 0x2d, 0x70, 0x76, 0x73, 0x74, 0x2f, 0x76, 0x6c, 0x61, 0x6e,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x2d, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x52, 0x0f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x61, 0x0a, 0x0a, 0x68, 0x65, 0x6c,
	0x6c, 0x6f, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xcf, 0x99, 0xa2, 0xc5, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x29, 0x82, 0x41, 0x26, 0x2f, 0x73, 0x74, 0x70, 0x2f,
	0x72, 0x61, 0x70, 0x69, 0x64, 0x2d, 0x70, 0x76, 0x73, 0x74, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x2d, 0x74, 0x69, 0x6d,
	0x65, 0x52, 0x09, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x60, 0x0a, 0x0a,
	0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xfc, 0x92, 0x80, 0x76, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x29, 0x82, 0x41, 0x26, 0x2f, 0x73, 0x74,
	0x70, 0x2f, 0x72, 0x61, 0x70, 0x69, 0x64, 0x2d, 0x70, 0x76, 0x73, 0x74, 0x2f, 0x76, 0x6c, 0x61,
	0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x09, 0x68, 0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x57,
	0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x67, 0x65, 0x18, 0xa7, 0xde, 0xe6, 0x74, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x26, 0x82, 0x41, 0x23, 0x2f, 0x73, 0x74, 0x70,
	0x2f, 0x72, 0x61, 0x70, 0x69, 0x64, 0x2d, 0x70, 0x76, 0x73, 0x74, 0x2f, 0x76, 0x6c, 0x61, 0x6e,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x61, 0x67, 0x65, 0x52,
	0x06, 0x6d, 0x61, 0x78, 0x41, 0x67, 0x65, 0x12, 0x58, 0x0a, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0xd0, 0xca, 0xac, 0xf4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x26, 0x82, 0x41, 0x23, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x72, 0x61, 0x70, 0x69, 0x64,
	0x2d, 0x70, 0x76, 0x73, 0x74, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x64, 0x52, 0x06, 0x76, 0x6c, 0x61, 0x6e, 0x49,
	0x64, 0x1a, 0xaf, 0x1a, 0x0a, 0x0a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x12, 0x86, 0x01, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0xc0,
	0xb1, 0xad, 0xd8, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x70, 0x2e, 0x52, 0x61, 0x70, 0x69, 0x64, 0x50,
	0x76, 0x73, 0x74, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4b, 0x65, 0x79,
	0x42, 0x2c, 0x82, 0x41, 0x29, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x72, 0x61, 0x70, 0x69, 0x64, 0x2d,
	0x70, 0x76, 0x73, 0x74, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x09,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x1a, 0xec, 0x17, 0x0a, 0x09, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0xb5, 0xb1, 0x89, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x70, 0x2e, 0x52, 0x61, 0x70,
	0x69, 0x64, 0x50, 0x76, 0x73, 0x74, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x33, 0x82, 0x41, 0x30, 0x2f, 0x73, 0x74, 0x70,
	0x2f, 0x72, 0x61, 0x70, 0x69, 0x64, 0x2d, 0x70, 0x76, 0x73, 0x74, 0x2f, 0x76, 0x6c, 0x61, 0x6e,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x86, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xaa,
	0xf7, 0xc4, 0x61, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x70, 0x2e, 0x52, 0x61, 0x70, 0x69, 0x64, 0x50, 0x76,
	0x73, 0x74, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x32, 0x82, 0x41, 0x2f, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x72, 0x61, 0x70, 0x69,
	0x64, 0x2d, 0x70, 0x76, 0x73, 0x74, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xd6, 0x02,
	0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x64, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74,
	0x18, 0xd7, 0xfd, 0xec, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x38,
	0x82, 0x41, 0x35, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x72, 0x61, 0x70, 0x69, 0x64, 0x2d, 0x70, 0x76,
	0x73, 0x74, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x66,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x91, 0x8e, 0xcc, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x38, 0x82, 0x41, 0x35, 0x2f, 0x73, 0x74, 0x70, 0x2f,
	0x72, 0x61, 0x70, 0x69, 0x64, 0x2d, 0x70, 0x76, 0x73, 0x74, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6e, 0x61, 0x6d, 0x65,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x7e, 0x0a, 0x0d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0xd2, 0xda, 0xe1, 0x6b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x72,
	0x61, 0x70, 0x69, 0x64, 0x2d, 0x70, 0x76, 0x73, 0x74, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2d,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x1a, 0xef, 0x12, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x64, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0xfe, 0x8d, 0xcb, 0xb9, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x37, 0x82, 0x41, 0x34, 0x2f, 0x73, 0x74, 0x70,
	0x2f, 0x72, 0x61, 0x70, 0x69, 0x64, 0x2d, 0x70, 0x76, 0x73, 0x74, 0x2f, 0x76, 0x6c, 0x61, 0x6e,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x73, 0x74,
	0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x9e, 0x01, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x86, 0xa2, 0xc3, 0x7b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x70, 0x2e, 0x52, 0x61,
	0x70, 0x69, 0x64, 0x50, 0x76, 0x73, 0x74, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x42, 0x3b, 0x82, 0x41, 0x38, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x72, 0x61, 0x70, 0x69, 0x64, 0x2d,
	0x70, 0x76, 0x73, 0x74, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x08, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0xa3, 0x01, 0x0a, 0x19, 0x64, 0x65, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xc8, 0x99, 0xff, 0x87, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4c, 0x82, 0x41, 0x49, 0x2f, 0x73, 0x74, 0x70, 0x2f,
	0x72, 0x61, 0x70, 0x69, 0x64, 0x2d, 0x70, 0x76, 0x73, 0x74, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x65, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2d, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x17, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0xa4, 0x01,
	0x0a, 0x1a, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0xc0, 0xb2, 0xb0,
	0xe8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4d, 0x82, 0x41, 0x4a,
	0x2f, 0x73, 0x74, 0x70, 0x2f, 0x72, 0x61, 0x70, 0x69, 0x64, 0x2d, 0x70, 0x76, 0x73, 0x74, 0x2f,
	0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x2d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x18, 0x64, 0x65, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x83, 0x01, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0xc7, 0x81, 0xe2, 0x61, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x73, 0x74, 0x70, 0x2f,
	0x72, 0x61, 0x70, 0x69, 0x64, 0x2d, 0x70, 0x76, 0x73, 0x74, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x65, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x63, 0x6f, 0x73, 0x74, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x8e, 0x01, 0x0a, 0x13, 0x64,
	0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0xde, 0xeb, 0x83, 0x4c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x72, 0x61, 0x70, 0x69, 0x64, 0x2d,
	0x70, 0x76, 0x73, 0x74, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x2d,
	0x70, 0x6f, 0x72, 0x74, 0x2d, 0x6e, 0x75, 0x6d, 0x52, 0x11, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x9d, 0x01, 0x0a, 0x18,
	0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0xe2, 0xcd, 0x8d, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4b, 0x82, 0x41, 0x48, 0x2f, 0x73, 0x74, 0x70, 0x2f,
	0x72, 0x61, 0x70, 0x69, 0x64, 0x2d, 0x70, 0x76, 0x73, 0x74, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x65, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x52, 0x16, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x50,
	0x6f, 0x72, 0x74, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x9c, 0x01, 0x0a, 0x17,
	0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xef, 0x9c, 0x94, 0x43, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4a, 0x82, 0x41, 0x47, 0x2f, 0x73, 0x74, 0x70,
	0x2f, 0x72, 0x61, 0x70, 0x69, 0x64, 0x2d, 0x70, 0x76, 0x73, 0x74, 0x2f, 0x76, 0x6c, 0x61, 0x6e,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x65, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x72, 0x6f, 0x6f, 0x74, 0x2d, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x15, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x52,
	0x6f, 0x6f, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x9d, 0x01, 0x0a, 0x18, 0x64,
	0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x9d, 0xed, 0xc7, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4b, 0x82, 0x41, 0x48, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x72,
	0x61, 0x70, 0x69, 0x64, 0x2d, 0x70, 0x76, 0x73, 0x74, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x65, 0x64, 0x2d, 0x72, 0x6f, 0x6f, 0x74, 0x2d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x52, 0x16, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x52, 0x6f,
	0x6f, 0x74, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x95, 0x01, 0x0a, 0x15, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0xe7, 0xda, 0xc0, 0x77, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x48, 0x82, 0x41, 0x45, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x72, 0x61, 0x70, 0x69,
	0x64, 0x2d, 0x70, 0x76, 0x73, 0x74, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x2d, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x14, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x65, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xf8, 0x82, 0x84, 0x2b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x37, 0x82, 0x41, 0x34, 0x2f,
	0x73, 0x74, 0x70, 0x2f, 0x72, 0x61, 0x70, 0x69, 0x64, 0x2d, 0x70, 0x76, 0x73, 0x74, 0x2f, 0x76,
	0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e,
	0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x6e, 0x0a, 0x08, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0xcb, 0x9b, 0xb6, 0x7b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x3b, 0x82, 0x41, 0x38, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x72, 0x61, 0x70,
	0x69, 0x64, 0x2d, 0x70, 0x76, 0x73, 0x74, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x6e, 0x75, 0x6d,
	0x52, 0x07, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x7d, 0x0a, 0x0d, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0xa9, 0x8d, 0x9d, 0x5d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x73, 0x74,
	0x70, 0x2f, 0x72, 0x61, 0x70, 0x69, 0x64, 0x2d, 0x70, 0x76, 0x73, 0x74, 0x2f, 0x76, 0x6c, 0x61,
	0x6e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x6f, 0x72,
	0x74, 0x2d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x70, 0x6f, 0x72, 0x74,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x95, 0x01, 0x0a, 0x0a, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xbc, 0xfd, 0x9e, 0xad, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x70, 0x61, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x54, 0x72, 0x65, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x53, 0x54, 0x50, 0x50, 0x4f, 0x52,
	0x54, 0x53, 0x54, 0x41, 0x54, 0x45, 0x42, 0x3d, 0x82, 0x41, 0x3a, 0x2f, 0x73, 0x74, 0x70, 0x2f,
	0x72, 0x61, 0x70, 0x69, 0x64, 0x2d, 0x70, 0x76, 0x73, 0x74, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2d,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x83, 0x01, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0xdd, 0xa1, 0xd1, 0xa5, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x70, 0x61, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x54, 0x72, 0x65, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x53, 0x54, 0x50, 0x50,
	0x4f, 0x52, 0x54, 0x52, 0x4f, 0x4c, 0x45, 0x42, 0x37, 0x82, 0x41, 0x34, 0x2f, 0x73, 0x74, 0x70,
	0x2f, 0x72, 0x61, 0x70, 0x69, 0x64, 0x2d, 0x70, 0x76, 0x73, 0x74, 0x2f, 0x76, 0x6c, 0x61, 0x6e,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x6f, 0x6c, 0x65,
	0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x1a, 0x8f, 0x02, 0x0a, 0x08, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x86, 0x01, 0x0a, 0x0d, 0x62, 0x70, 0x64, 0x75, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0xc6, 0xcd, 0x89, 0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x49, 0x82, 0x41, 0x46, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x72, 0x61, 0x70,
	0x69, 0x64, 0x2d, 0x70, 0x76, 0x73, 0x74, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x2f, 0x62, 0x70, 0x64, 0x75, 0x2d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x52, 0x0c,
	0x62, 0x70, 0x64, 0x75, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x7a, 0x0a, 0x09,
	0x62, 0x70, 0x64, 0x75, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0xe5, 0x9d, 0xe6, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x73, 0x74, 0x70,
	0x2f, 0x72, 0x61, 0x70, 0x69, 0x64, 0x2d, 0x70, 0x76, 0x73, 0x74, 0x2f, 0x76, 0x6c, 0x61, 0x6e,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x2f, 0x62, 0x70, 0x64, 0x75, 0x2d, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x08,
	0x62, 0x70, 0x64, 0x75, 0x53, 0x65, 0x6e, 0x74, 0x1a, 0xa8, 0x01, 0x0a, 0x0c, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x45, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0x82, 0x41, 0x2e, 0x2f, 0x73, 0x74, 0x70,
	0x2f, 0x72, 0x61, 0x70, 0x69, 0x64, 0x2d, 0x70, 0x76, 0x73, 0x74, 0x2f, 0x76, 0x6c, 0x61, 0x6e,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x51, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x53, 0x74, 0x70, 0x2e, 0x52, 0x61, 0x70, 0x69, 0x64, 0x50, 0x76, 0x73, 0x74, 0x2e, 0x56,
	0x6c, 0x61, 0x6e, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x1a, 0xf1, 0x0b, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x6e, 0x0a,
	0x0e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0xda, 0x8e, 0xfa, 0xd8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x2c, 0x82, 0x41, 0x29, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x72, 0x61, 0x70, 0x69, 0x64, 0x2d,
	0x70, 0x76, 0x73, 0x74, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0d,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x6e, 0x0a,
	0x0f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0xce, 0xeb, 0xbc, 0x54, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2d,
	0x82, 0x41, 0x2a, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x72, 0x61, 0x70, 0x69, 0x64, 0x2d, 0x70, 0x76,
	0x73, 0x74, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x2d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x0e, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x87, 0x01,
	0x0a, 0x17, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x6f,
	0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xe2, 0xab, 0xad, 0x2e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x73,
	0x74, 0x70, 0x2f, 0x72, 0x61, 0x70, 0x69, 0x64, 0x2d, 0x70, 0x76, 0x73, 0x74, 0x2f, 0x76, 0x6c,
	0x61, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x65, 0x64, 0x2d, 0x72, 0x6f, 0x6f, 0x74, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x15, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x6f, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x88, 0x01, 0x0a, 0x18, 0x64, 0x65, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x18, 0xe6, 0xbe, 0xd0, 0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x72, 0x61, 0x70, 0x69,
	0x64, 0x2d, 0x70, 0x76, 0x73, 0x74, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x72, 0x6f, 0x6f,
	0x74, 0x2d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x16, 0x64, 0x65, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x6f, 0x74, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x71, 0x0a, 0x10, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0xb5, 0xf4, 0xe5, 0x5b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x2e, 0x82, 0x41, 0x2b, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x72, 0x61,
	0x70, 0x69, 0x64, 0x2d, 0x70, 0x76, 0x73, 0x74, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x64,
	0x65, 0x6c, 0x61, 0x79, 0x52, 0x0f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x60, 0x0a, 0x0a, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x88, 0xe8, 0xd1, 0x9e, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x28, 0x82, 0x41, 0x25, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x72, 0x61, 0x70, 0x69,
	0x64, 0x2d, 0x70, 0x76, 0x73, 0x74, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x68, 0x65,
	0x6c, 0x6c, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x5f, 0x0a, 0x0a, 0x68, 0x6f, 0x6c, 0x64, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xff, 0xb6, 0xf3, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x28, 0x82, 0x41, 0x25, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x72, 0x61, 0x70,
	0x69, 0x64, 0x2d, 0x70, 0x76, 0x73, 0x74, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x09, 0x68,
	0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5c, 0x0a, 0x09, 0x68, 0x6f, 0x6c, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x9d, 0xda, 0xf7, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x27, 0x82, 0x41, 0x24, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x72, 0x61, 0x70,
	0x69, 0x64, 0x2d, 0x70, 0x76, 0x73, 0x74, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x08, 0x68, 0x6f,
	0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x7d, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0xf5,
	0xcf, 0xca, 0xfe, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x32, 0x82,
	0x41, 0x2f, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x72, 0x61, 0x70, 0x69, 0x64, 0x2d, 0x70, 0x76, 0x73,
	0x74, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x61, 0x73,
	0x74, 0x2d, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x57, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x67, 0x65,
	0x18, 0xd2, 0xde, 0xc2, 0x84, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x25, 0x82, 0x41, 0x22, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x72, 0x61, 0x70, 0x69, 0x64, 0x2d, 0x70,
	0x76, 0x73, 0x74, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d,
	0x61, 0x78, 0x2d, 0x61, 0x67, 0x65, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x41, 0x67, 0x65, 0x12, 0x5d,
	0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0xf0, 0xc9, 0xfd, 0xb4,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x27, 0x82, 0x41, 0x24, 0x2f,
	0x73, 0x74, 0x70, 0x2f, 0x72, 0x61, 0x70, 0x69, 0x64, 0x2d, 0x70, 0x76, 0x73, 0x74, 0x2f, 0x76,
	0x6c, 0x61, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x6f, 0x6f, 0x74, 0x2d, 0x63,
	0x6f, 0x73, 0x74, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x5c, 0x0a,
	0x09, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0xca, 0x87, 0xcc, 0x74, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x27, 0x82, 0x41, 0x24, 0x2f, 0x73, 0x74,
	0x70, 0x2f, 0x72, 0x61, 0x70, 0x69, 0x64, 0x2d, 0x70, 0x76, 0x73, 0x74, 0x2f, 0x76, 0x6c, 0x61,
	0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x6f, 0x6f, 0x74, 0x2d, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x72, 0x0a, 0x10, 0x74,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18,
	0xf5, 0xab, 0xc9, 0xc6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2e,
	0x82, 0x41, 0x2b, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x72, 0x61, 0x70, 0x69, 0x64, 0x2d, 0x70, 0x76,
	0x73, 0x74, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x0f,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12,
	0x56, 0x0a, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0xed, 0xf9, 0x9a, 0x4f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x25, 0x82, 0x41, 0x22, 0x2f, 0x73, 0x74,
	0x70, 0x2f, 0x72, 0x61, 0x70, 0x69, 0x64, 0x2d, 0x70, 0x76, 0x73, 0x74, 0x2f, 0x76, 0x6c, 0x61,
	0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x64, 0x52,
	0x06, 0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x1a, 0x77, 0x0a, 0x07, 0x56, 0x6c, 0x61, 0x6e, 0x4b,
	0x65, 0x79, 0x12, 0x38, 0x0a, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x1f, 0x82, 0x41, 0x1c, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x72, 0x61, 0x70,
	0x69, 0x64, 0x2d, 0x70, 0x76, 0x73, 0x74, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x6c, 0x61,
	0x6e, 0x2d, 0x69, 0x64, 0x52, 0x06, 0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x04,
	0x76, 0x6c, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x70, 0x2e, 0x52, 0x61, 0x70, 0x69,
	0x64, 0x50, 0x76, 0x73, 0x74, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x52, 0x04, 0x76, 0x6c, 0x61, 0x6e,
	0x1a, 0xd9, 0x27, 0x0a, 0x04, 0x52, 0x73, 0x74, 0x70, 0x12, 0x4c, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0xfb, 0xd1, 0xe6, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x70, 0x2e, 0x52,
	0x73, 0x74, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x13, 0x82, 0x41, 0x10, 0x2f,
	0x73, 0x74, 0x70, 0x2f, 0x72, 0x73, 0x74, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x5b, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0xa1, 0x93, 0xf0, 0x6f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x70, 0x2e,
	0x52, 0x73, 0x74, 0x70, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x42,
	0x17, 0x82, 0x41, 0x14, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x72, 0x73, 0x74, 0x70, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xfc, 0xa8,
	0xfb, 0x89, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x70, 0x2e, 0x52, 0x73, 0x74, 0x70, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x12, 0x82, 0x41, 0x0f, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x72, 0x73, 0x74,
	0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xd5,
	0x03, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x64, 0x0a, 0x0f, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0xe2, 0xa1, 0xca,
	0x5d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x23, 0x82, 0x41, 0x20, 0x2f,
	0x73, 0x74, 0x70, 0x2f, 0x72, 0x73, 0x74, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52,
	0x0e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x68, 0x0a, 0x10, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65,
	0x6c, 0x61, 0x79, 0x18, 0x91, 0xaa, 0xbe, 0xe0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x24, 0x82, 0x41, 0x21, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x72, 0x73, 0x74, 0x70,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x2d, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x52, 0x0f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x55, 0x0a, 0x0a, 0x68, 0x65, 0x6c,
	0x6c, 0x6f, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x94, 0xe3, 0xab, 0x2a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1e, 0x82, 0x41, 0x1b, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x72,
	0x73, 0x74, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x68, 0x65, 0x6c, 0x6c, 0x6f,
	0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x56, 0x0a, 0x0a, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xab,
	0xc4, 0xc0, 0xc1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1e, 0x82,
	0x41, 0x1b, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x72, 0x73, 0x74, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x09, 0x68,
	0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f,
	0x61, 0x67, 0x65, 0x18, 0xf6, 0xa9, 0xe1, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x1b, 0x82, 0x41, 0x18, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x72, 0x73, 0x74, 0x70, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x61, 0x67, 0x65, 0x52, 0x06,
	0x6d, 0x61, 0x78, 0x41, 0x67, 0x65, 0x1a, 0xf8, 0x17, 0x0a, 0x0a, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x71, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x18, 0xbd, 0x82, 0xaf, 0xa9, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x70, 0x2e, 0x52, 0x73,
	0x74, 0x70, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x42, 0x21, 0x82, 0x41, 0x1e, 0x2f,
	0x73, 0x74, 0x70, 0x2f, 0x72, 0x73, 0x74, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x09, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x1a, 0xe0, 0x15, 0x0a, 0x09, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x76, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0xf2, 0x9a, 0xdc, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x70, 0x2e, 0x52, 0x73, 0x74, 0x70,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x28, 0x82, 0x41,
	0x25, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x72, 0x73, 0x74, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x72,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xef, 0x9a, 0x82, 0xdd, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53,
	0x74, 0x70, 0x2e, 0x52, 0x73, 0x74, 0x70, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x27, 0x82, 0x41, 0x24, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x72, 0x73, 0x74, 0x70,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x1a, 0xb7, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x59, 0x0a,
	0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0xb6, 0xd2, 0x90, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x2d, 0x82, 0x41, 0x2a, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x72, 0x73, 0x74,
	0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x6f,
	0x73, 0x74, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x5c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x80, 0xb5, 0xb1, 0x90, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x2d, 0x82, 0x41, 0x2a, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x72, 0x73, 0x74, 0x70, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6e, 0x61, 0x6d, 0x65,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x74, 0x0a, 0x0d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x81, 0x9f, 0xc5, 0xc3, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x73, 0x74, 0x70, 0x2f,
	0x72, 0x73, 0x74, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x0c,
	0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x1a, 0xac, 0x11, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x59, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0xfd,
	0xe3, 0xc1, 0xa5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2c, 0x82,
	0x41, 0x29, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x72, 0x73, 0x74, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x52, 0x04, 0x63, 0x6f, 0x73,
	0x74, 0x12, 0x8a, 0x01, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x85,
	0xad, 0xfb, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x70, 0x2e, 0x52, 0x73, 0x74, 0x70, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x42, 0x30, 0x82, 0x41, 0x2d, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x72, 0x73, 0x74, 0x70,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x97,
	0x01, 0x0a, 0x19, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xa9, 0xb0, 0xfc,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x41, 0x82, 0x41,
	0x3e, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x72, 0x73, 0x74, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64,
	0x2d, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x17, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x42, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x99, 0x01, 0x0a, 0x1a, 0x64, 0x65, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0xcb, 0xd3, 0x9e, 0x99, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x73, 0x74, 0x70, 0x2f,
	0x72, 0x73, 0x74, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x2d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x18, 0x64, 0x65, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x78, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x86, 0xf4, 0xc1, 0x75, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x37, 0x82, 0x41, 0x34, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x72,
	0x73, 0x74, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64,
	0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x63, 0x6f, 0x73, 0x74, 0x52, 0x0e,
	0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x84,
	0x01, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0xe3, 0xa7, 0xe5, 0x9c, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3b, 0x82, 0x41, 0x38, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x72,
	0x73, 0x74, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64,
	0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x6e,
	0x75, 0x6d, 0x52, 0x11, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x50, 0x6f,
	0x72, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x93, 0x01, 0x0a, 0x18, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0xb1, 0xfd, 0xc5, 0xf5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x72, 0x73, 0x74, 0x70, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x65, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x52, 0x16, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x50,
	0x6f, 0x72, 0x74, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x91, 0x01, 0x0a, 0x17,
	0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xf2, 0x84, 0xc4, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x73, 0x74, 0x70,
	0x2f, 0x72, 0x73, 0x74, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x72, 0x6f, 0x6f, 0x74,
	0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x15, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x6f, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x93, 0x01, 0x0a, 0x18, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x72,
	0x6f, 0x6f, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0xd6, 0xc1, 0xeb,
	0xa2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x40, 0x82, 0x41, 0x3d,
	0x2f, 0x73, 0x74, 0x70, 0x2f, 0x72, 0x73, 0x74, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x2d,
	0x72, 0x6f, 0x6f, 0x74, 0x2d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x16, 0x64,
	0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x6f, 0x74, 0x50, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x8a, 0x01, 0x0a, 0x15, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0xca, 0xd7, 0xa5, 0x72, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3d, 0x82,
	0x41, 0x3a, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x72, 0x73, 0x74, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x2d, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x14, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x5b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x97, 0xa4, 0xa0, 0xd6, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2c, 0x82, 0x41, 0x29,
	0x2f, 0x73, 0x74, 0x70, 0x2f, 0x72, 0x73, 0x74, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x63, 0x0a, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0xdc, 0xfe, 0xff, 0x6b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x30, 0x82, 0x41, 0x2d, 0x2f, 0x73,
	0x74, 0x70, 0x2f, 0x72, 0x73, 0x74, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x6e, 0x75, 0x6d, 0x52, 0x07, 0x70, 0x6f, 0x72,
	0x74, 0x4e, 0x75, 0x6d, 0x12, 0x72, 0x0a, 0x0d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x84, 0xcc, 0xc9, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x72, 0x73, 0x74,
	0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x6f, 0x72,
	0x74, 0x2d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x70, 0x6f, 0x72, 0x74,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x89, 0x01, 0x0a, 0x0a, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xe3, 0xa4, 0x9b, 0x2f, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x70, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x54, 0x72, 0x65, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x53, 0x54, 0x50, 0x50, 0x4f, 0x52, 0x54,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x42, 0x32, 0x82, 0x41, 0x2f, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x72,
	0x73, 0x74, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70,
	0x6f, 0x72, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x78, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0xea, 0x94, 0xa5,
	0xad, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x70,
	0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x65, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x53,
	0x54, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x52, 0x4f, 0x4c, 0x45, 0x42, 0x2c, 0x82, 0x41, 0x29, 0x2f,
	0x73, 0x74, 0x70, 0x2f, 0x72, 0x73, 0x74, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x1a, 0xfa,
	0x01, 0x0a, 0x08, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x7c, 0x0a, 0x0d, 0x62,
	0x70, 0x64, 0x75, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0xe1, 0x91, 0x84,
	0xa2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3e, 0x82, 0x41, 0x3b,
	0x2f, 0x73, 0x74, 0x70, 0x2f, 0x72, 0x73, 0x74, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x62, 0x70,
	0x64, 0x75, 0x2d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x52, 0x0c, 0x62, 0x70, 0x64,
	0x75, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x70, 0x0a, 0x09, 0x62, 0x70, 0x64,
	0x75, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0xf2, 0xb8, 0xbf, 0xc7, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3a, 0x82, 0x41, 0x37, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x72,
	0x73, 0x74, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x62, 0x70, 0x64, 0x75, 0x2d, 0x73, 0x65, 0x6e,
	0x74, 0x52, 0x08, 0x62, 0x70, 0x64, 0x75, 0x53, 0x65, 0x6e, 0x74, 0x1a, 0x93, 0x01, 0x0a, 0x0c,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x82, 0x41, 0x23, 0x2f,
	0x73, 0x74, 0x70, 0x2f, 0x72, 0x73, 0x74, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6e, 0x61,
	0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x70, 0x2e, 0x52, 0x73, 0x74,
	0x70, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x1a, 0x88, 0x0a, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x62, 0x0a, 0x0e, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xe3, 0xee,
	0xe5, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x21, 0x82,
	0x41, 0x1e, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x72, 0x73, 0x74, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x0d, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x63, 0x0a, 0x0f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x91, 0xb9, 0xb2, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x22, 0x82, 0x41, 0x1f, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x72, 0x73, 0x74, 0x70, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2d, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x52, 0x0e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x7c, 0x0a, 0x17, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0xc9, 0xbd, 0xbc, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x2a, 0x82, 0x41, 0x27, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x72, 0x73, 0x74, 0x70, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x72,
	0x6f, 0x6f, 0x74, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x15, 0x64, 0x65, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x6f, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x7e, 0x0a, 0x18, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0xeb,
	0xf1, 0xc3, 0x80, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2b, 0x82,
	0x41, 0x28, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x72, 0x73, 0x74, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x72, 0x6f, 0x6f,
	0x74, 0x2d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x16, 0x64, 0x65, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x6f, 0x74, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x67, 0x0a, 0x10, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0xe0, 0xba, 0x8b, 0xb8, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x23, 0x82, 0x41, 0x20, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x72,
	0x73, 0x74, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x2d, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x52, 0x0f, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x55, 0x0a, 0x0a, 0x68,
	0x65, 0x6c, 0x6c, 0x6f, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xc5, 0xae, 0x95, 0xea, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1d, 0x82, 0x41, 0x1a, 0x2f, 0x73, 0x74,
	0x70, 0x2f, 0x72, 0x73, 0x74, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x68, 0x65, 0x6c,
	0x6c, 0x6f, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x54, 0x0a, 0x0a, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0xe6, 0xdf, 0xbc, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1d,
	0x82, 0x41, 0x1a, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x72, 0x73, 0x74, 0x70, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x09, 0x68,
	0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x52, 0x0a, 0x09, 0x68, 0x6f, 0x6c, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x8e, 0x89, 0xec, 0xc1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x1c, 0x82, 0x41, 0x19, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x72, 0x73,
	0x74, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x74, 0x69,
	0x6d, 0x65, 0x52, 0x08, 0x68, 0x6f, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x71, 0x0a, 0x14,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0xf8, 0xb6, 0x8a, 0x77, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x27, 0x82, 0x41, 0x24, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x72, 0x73, 0x74, 0x70,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x61, 0x73, 0x74, 0x2d, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x12, 0x6c, 0x61, 0x73,
	0x74, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x4b, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x91, 0xfd, 0xad, 0x26, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1a, 0x82, 0x41, 0x17, 0x2f, 0x73, 0x74,
	0x70, 0x2f, 0x72, 0x73, 0x74, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x61, 0x78,
	0x2d, 0x61, 0x67, 0x65, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x41, 0x67, 0x65, 0x12, 0x52, 0x0a, 0x09,
	0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0xab, 0x97, 0x9a, 0xec, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1c, 0x82, 0x41, 0x19, 0x2f, 0x73, 0x74,
	0x70, 0x2f, 0x72, 0x73, 0x74, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x6f, 0x6f,
	0x74, 0x2d, 0x63, 0x6f, 0x73, 0x74, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x74, 0x43, 0x6f, 0x73, 0x74,
	0x12, 0x52, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0xdd, 0x85,
	0xad, 0xf3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1c, 0x82, 0x41,
	0x19, 0x2f, 0x73, 0x74, 0x70, 0x2f, 0x72, 0x73, 0x74, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x72, 0x6f, 0x6f, 0x74, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x74,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x66, 0x0a, 0x10, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0xf0, 0xef, 0x82, 0x7f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x23, 0x82, 0x41, 0x20, 0x2f, 0x73, 0x74, 0x70, 0x2f,
	0x72, 0x73, 0x74, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x0f, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x42, 0x17, 0x0a, 0x15,
	0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x6f, 0x63, 0x73, 0x79, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_openconfig_spanning_tree_proto_rawDescOnce sync.Once
	file_openconfig_spanning_tree_proto_rawDescData = file_openconfig_spanning_tree_proto_rawDesc
)

func file_openconfig_spanning_tree_proto_rawDescGZIP() []byte {
	file_openconfig_spanning_tree_proto_rawDescOnce.Do(func() {
		file_openconfig_spanning_tree_proto_rawDescData = protoimpl.X.CompressGZIP(file_openconfig_spanning_tree_proto_rawDescData)
	})
	return file_openconfig_spanning_tree_proto_rawDescData
}

var file_openconfig_spanning_tree_proto_msgTypes = make([]protoimpl.MessageInfo, 45)
var file_openconfig_spanning_tree_proto_goTypes = []interface{}{
	(*Stp)(nil),                                                                   // 0: openconfig.Stp
	(*Stp_Global)(nil),                                                            // 1: openconfig.Stp.Global
	(*Stp_Interfaces)(nil),                                                        // 2: openconfig.Stp.Interfaces
	(*Stp_Mstp)(nil),                                                              // 3: openconfig.Stp.Mstp
	(*Stp_RapidPvst)(nil),                                                         // 4: openconfig.Stp.RapidPvst
	(*Stp_Rstp)(nil),                                                              // 5: openconfig.Stp.Rstp
	(*Stp_Global_Config)(nil),                                                     // 6: openconfig.Stp.Global.Config
	(*Stp_Global_State)(nil),                                                      // 7: openconfig.Stp.Global.State
	(*Stp_Interfaces_Interface)(nil),                                              // 8: openconfig.Stp.Interfaces.Interface
	(*Stp_Interfaces_InterfaceKey)(nil),                                           // 9: openconfig.Stp.Interfaces.InterfaceKey
	(*Stp_Interfaces_Interface_Config)(nil),                                       // 10: openconfig.Stp.Interfaces.Interface.Config
	(*Stp_Interfaces_Interface_State)(nil),                                        // 11: openconfig.Stp.Interfaces.Interface.State
	(*Stp_Mstp_Config)(nil),                                                       // 12: openconfig.Stp.Mstp.Config
	(*Stp_Mstp_MstInstances)(nil),                                                 // 13: openconfig.Stp.Mstp.MstInstances
	(*Stp_Mstp_State)(nil),                                                        // 14: openconfig.Stp.Mstp.State
	(*Stp_Mstp_MstInstances_MstInstance)(nil),                                     // 15: openconfig.Stp.Mstp.MstInstances.MstInstance
	(*Stp_Mstp_MstInstances_MstInstanceKey)(nil),                                  // 16: openconfig.Stp.Mstp.MstInstances.MstInstanceKey
	(*Stp_Mstp_MstInstances_MstInstance_Config)(nil),                              // 17: openconfig.Stp.Mstp.MstInstances.MstInstance.Config
	(*Stp_Mstp_MstInstances_MstInstance_Interfaces)(nil),                          // 18: openconfig.Stp.Mstp.MstInstances.MstInstance.Interfaces
	(*Stp_Mstp_MstInstances_MstInstance_State)(nil),                               // 19: openconfig.Stp.Mstp.MstInstances.MstInstance.State
	(*Stp_Mstp_MstInstances_MstInstance_Config_VlanUnion)(nil),                    // 20: openconfig.Stp.Mstp.MstInstances.MstInstance.Config.VlanUnion
	(*Stp_Mstp_MstInstances_MstInstance_Interfaces_Interface)(nil),                // 21: openconfig.Stp.Mstp.MstInstances.MstInstance.Interfaces.Interface
	(*Stp_Mstp_MstInstances_MstInstance_Interfaces_InterfaceKey)(nil),             // 22: openconfig.Stp.Mstp.MstInstances.MstInstance.Interfaces.InterfaceKey
	(*Stp_Mstp_MstInstances_MstInstance_Interfaces_Interface_Config)(nil),         // 23: openconfig.Stp.Mstp.MstInstances.MstInstance.Interfaces.Interface.Config
	(*Stp_Mstp_MstInstances_MstInstance_Interfaces_Interface_State)(nil),          // 24: openconfig.Stp.Mstp.MstInstances.MstInstance.Interfaces.Interface.State
	(*Stp_Mstp_MstInstances_MstInstance_Interfaces_Interface_State_Counters)(nil), // 25: openconfig.Stp.Mstp.MstInstances.MstInstance.Interfaces.Interface.State.Counters
	(*Stp_Mstp_MstInstances_MstInstance_State_VlanUnion)(nil),                     // 26: openconfig.Stp.Mstp.MstInstances.MstInstance.State.VlanUnion
	(*Stp_RapidPvst_Vlan)(nil),                                                    // 27: openconfig.Stp.RapidPvst.Vlan
	(*Stp_RapidPvst_VlanKey)(nil),                                                 // 28: openconfig.Stp.RapidPvst.VlanKey
	(*Stp_RapidPvst_Vlan_Config)(nil),                                             // 29: openconfig.Stp.RapidPvst.Vlan.Config
	(*Stp_RapidPvst_Vlan_Interfaces)(nil),                                         // 30: openconfig.Stp.RapidPvst.Vlan.Interfaces
	(*Stp_RapidPvst_Vlan_State)(nil),                                              // 31: openconfig.Stp.RapidPvst.Vlan.State
	(*Stp_RapidPvst_Vlan_Interfaces_Interface)(nil),                               // 32: openconfig.Stp.RapidPvst.Vlan.Interfaces.Interface
	(*Stp_RapidPvst_Vlan_Interfaces_InterfaceKey)(nil),                            // 33: openconfig.Stp.RapidPvst.Vlan.Interfaces.InterfaceKey
	(*Stp_RapidPvst_Vlan_Interfaces_Interface_Config)(nil),                        // 34: openconfig.Stp.RapidPvst.Vlan.Interfaces.Interface.Config
	(*Stp_RapidPvst_Vlan_Interfaces_Interface_State)(nil),                         // 35: openconfig.Stp.RapidPvst.Vlan.Interfaces.Interface.State
	(*Stp_RapidPvst_Vlan_Interfaces_Interface_State_Counters)(nil),                // 36: openconfig.Stp.RapidPvst.Vlan.Interfaces.Interface.State.Counters
	(*Stp_Rstp_Config)(nil),                                                       // 37: openconfig.Stp.Rstp.Config
	(*Stp_Rstp_Interfaces)(nil),                                                   // 38: openconfig.Stp.Rstp.Interfaces
	(*Stp_Rstp_State)(nil),                                                        // 39: openconfig.Stp.Rstp.State
	(*Stp_Rstp_Interfaces_Interface)(nil),                                         // 40: openconfig.Stp.Rstp.Interfaces.Interface
	(*Stp_Rstp_Interfaces_InterfaceKey)(nil),                                      // 41: openconfig.Stp.Rstp.Interfaces.InterfaceKey
	(*Stp_Rstp_Interfaces_Interface_Config)(nil),                                  // 42: openconfig.Stp.Rstp.Interfaces.Interface.Config
	(*Stp_Rstp_Interfaces_Interface_State)(nil),                                   // 43: openconfig.Stp.Rstp.Interfaces.Interface.State
	(*Stp_Rstp_Interfaces_Interface_State_Counters)(nil),                          // 44: openconfig.Stp.Rstp.Interfaces.Interface.State.Counters
	(*ywrapper.BoolValue)(nil),                                                    // 45: ywrapper.BoolValue
	(*ywrapper.UintValue)(nil),                                                    // 46: ywrapper.UintValue
	(OpenconfigSpanningTreeTypesSTPPROTOCOL)(0),                                   // 47: openconfig.OpenconfigSpanningTreeTypesSTPPROTOCOL
	(OpenconfigSpanningTreeTypesSTPEDGEPORT)(0),                                   // 48: openconfig.OpenconfigSpanningTreeTypesSTPEDGEPORT
	(OpenconfigSpanningTreeStpGuardType)(0),                                       // 49: openconfig.OpenconfigSpanningTreeStpGuardType
	(OpenconfigSpanningTreeStpLinkType)(0),                                        // 50: openconfig.OpenconfigSpanningTreeStpLinkType
	(*ywrapper.StringValue)(nil),                                                  // 51: ywrapper.StringValue
	(OpenconfigSpanningTreeTypesSTPPORTSTATE)(0),                                  // 52: openconfig.OpenconfigSpanningTreeTypesSTPPORTSTATE
	(OpenconfigSpanningTreeTypesSTPPORTROLE)(0),                                   // 53: openconfig.OpenconfigSpanningTreeTypesSTPPORTROLE
}
var file_openconfig_spanning_tree_proto_depIdxs = []int32{
	1,   // 0: openconfig.Stp.global:type_name -> openconfig.Stp.Global
	2,   // 1: openconfig.Stp.interfaces:type_name -> openconfig.Stp.Interfaces
	3,   // 2: openconfig.Stp.mstp:type_name -> openconfig.Stp.Mstp
	4,   // 3: openconfig.Stp.rapid_pvst:type_name -> openconfig.Stp.RapidPvst
	5,   // 4: openconfig.Stp.rstp:type_name -> openconfig.Stp.Rstp
	6,   // 5: openconfig.Stp.Global.config:type_name -> openconfig.Stp.Global.Config
	7,   // 6: openconfig.Stp.Global.state:type_name -> openconfig.Stp.Global.State
	9,   // 7: openconfig.Stp.Interfaces.interface:type_name -> openconfig.Stp.Interfaces.InterfaceKey
	12,  // 8: openconfig.Stp.Mstp.config:type_name -> openconfig.Stp.Mstp.Config
	13,  // 9: openconfig.Stp.Mstp.mst_instances:type_name -> openconfig.Stp.Mstp.MstInstances
	14,  // 10: openconfig.Stp.Mstp.state:type_name -> openconfig.Stp.Mstp.State
	28,  // 11: openconfig.Stp.RapidPvst.vlan:type_name -> openconfig.Stp.RapidPvst.VlanKey
	37,  // 12: openconfig.Stp.Rstp.config:type_name -> openconfig.Stp.Rstp.Config
	38,  // 13: openconfig.Stp.Rstp.interfaces:type_name -> openconfig.Stp.Rstp.Interfaces
	39,  // 14: openconfig.Stp.Rstp.state:type_name -> openconfig.Stp.Rstp.State
	45,  // 15: openconfig.Stp.Global.Config.bpdu_filter:type_name -> ywrapper.BoolValue
	45,  // 16: openconfig.Stp.Global.Config.bpdu_guard:type_name -> ywrapper.BoolValue
	46,  // 17: openconfig.Stp.Global.Config.bpduguard_timeout_recovery:type_name -> ywrapper.UintValue
	45,  // 18: openconfig.Stp.Global.Config.bridge_assurance:type_name -> ywrapper.BoolValue
	47,  // 19: openconfig.Stp.Global.Config.enabled_protocol:type_name -> openconfig.OpenconfigSpanningTreeTypesSTPPROTOCOL
	45,  // 20: openconfig.Stp.Global.Config.etherchannel_misconfig_guard:type_name -> ywrapper.BoolValue
	45,  // 21: openconfig.Stp.Global.Config.loop_guard:type_name -> ywrapper.BoolValue
	45,  // 22: openconfig.Stp.Global.State.bpdu_filter:type_name -> ywrapper.BoolValue
	45,  // 23: openconfig.Stp.Global.State.bpdu_guard:type_name -> ywrapper.BoolValue
	46,  // 24: openconfig.Stp.Global.State.bpduguard_timeout_recovery:type_name -> ywrapper.UintValue
	45,  // 25: openconfig.Stp.Global.State.bridge_assurance:type_name -> ywrapper.BoolValue
	47,  // 26: openconfig.Stp.Global.State.enabled_protocol:type_name -> openconfig.OpenconfigSpanningTreeTypesSTPPROTOCOL
	45,  // 27: openconfig.Stp.Global.State.etherchannel_misconfig_guard:type_name -> ywrapper.BoolValue
	45,  // 28: openconfig.Stp.Global.State.loop_guard:type_name -> ywrapper.BoolValue
	10,  // 29: openconfig.Stp.Interfaces.Interface.config:type_name -> openconfig.Stp.Interfaces.Interface.Config
	11,  // 30: openconfig.Stp.Interfaces.Interface.state:type_name -> openconfig.Stp.Interfaces.Interface.State
	8,   // 31: openconfig.Stp.Interfaces.InterfaceKey.interface:type_name -> openconfig.Stp.Interfaces.Interface
	45,  // 32: openconfig.Stp.Interfaces.Interface.Config.bpdu_filter:type_name -> ywrapper.BoolValue
	45,  // 33: openconfig.Stp.Interfaces.Interface.Config.bpdu_guard:type_name -> ywrapper.BoolValue
	48,  // 34: openconfig.Stp.Interfaces.Interface.Config.edge_port:type_name -> openconfig.OpenconfigSpanningTreeTypesSTPEDGEPORT
	49,  // 35: openconfig.Stp.Interfaces.Interface.Config.guard:type_name -> openconfig.OpenconfigSpanningTreeStpGuardType
	50,  // 36: openconfig.Stp.Interfaces.Interface.Config.link_type:type_name -> openconfig.OpenconfigSpanningTreeStpLinkType
	51,  // 37: openconfig.Stp.Interfaces.Interface.Config.name:type_name -> ywrapper.StringValue
	45,  // 38: openconfig.Stp.Interfaces.Interface.State.bpdu_filter:type_name -> ywrapper.BoolValue
	45,  // 39: openconfig.Stp.Interfaces.Interface.State.bpdu_guard:type_name -> ywrapper.BoolValue
	48,  // 40: openconfig.Stp.Interfaces.Interface.State.edge_port:type_name -> openconfig.OpenconfigSpanningTreeTypesSTPEDGEPORT
	49,  // 41: openconfig.Stp.Interfaces.Interface.State.guard:type_name -> openconfig.OpenconfigSpanningTreeStpGuardType
	50,  // 42: openconfig.Stp.Interfaces.Interface.State.link_type:type_name -> openconfig.OpenconfigSpanningTreeStpLinkType
	51,  // 43: openconfig.Stp.Interfaces.Interface.State.name:type_name -> ywrapper.StringValue
	46,  // 44: openconfig.Stp.Mstp.Config.forwarding_delay:type_name -> ywrapper.UintValue
	46,  // 45: openconfig.Stp.Mstp.Config.hello_time:type_name -> ywrapper.UintValue
	46,  // 46: openconfig.Stp.Mstp.Config.hold_count:type_name -> ywrapper.UintValue
	46,  // 47: openconfig.Stp.Mstp.Config.max_age:type_name -> ywrapper.UintValue
	46,  // 48: openconfig.Stp.Mstp.Config.max_hop:type_name -> ywrapper.UintValue
	51,  // 49: openconfig.Stp.Mstp.Config.name:type_name -> ywrapper.StringValue
	46,  // 50: openconfig.Stp.Mstp.Config.revision:type_name -> ywrapper.UintValue
	16,  // 51: openconfig.Stp.Mstp.MstInstances.mst_instance:type_name -> openconfig.Stp.Mstp.MstInstances.MstInstanceKey
	46,  // 52: openconfig.Stp.Mstp.State.forwarding_delay:type_name -> ywrapper.UintValue
	46,  // 53: openconfig.Stp.Mstp.State.hello_time:type_name -> ywrapper.UintValue
	46,  // 54: openconfig.Stp.Mstp.State.hold_count:type_name -> ywrapper.UintValue
	46,  // 55: openconfig.Stp.Mstp.State.max_age:type_name -> ywrapper.UintValue
	46,  // 56: openconfig.Stp.Mstp.State.max_hop:type_name -> ywrapper.UintValue
	51,  // 57: openconfig.Stp.Mstp.State.name:type_name -> ywrapper.StringValue
	46,  // 58: openconfig.Stp.Mstp.State.revision:type_name -> ywrapper.UintValue
	17,  // 59: openconfig.Stp.Mstp.MstInstances.MstInstance.config:type_name -> openconfig.Stp.Mstp.MstInstances.MstInstance.Config
	18,  // 60: openconfig.Stp.Mstp.MstInstances.MstInstance.interfaces:type_name -> openconfig.Stp.Mstp.MstInstances.MstInstance.Interfaces
	19,  // 61: openconfig.Stp.Mstp.MstInstances.MstInstance.state:type_name -> openconfig.Stp.Mstp.MstInstances.MstInstance.State
	15,  // 62: openconfig.Stp.Mstp.MstInstances.MstInstanceKey.mst_instance:type_name -> openconfig.Stp.Mstp.MstInstances.MstInstance
	46,  // 63: openconfig.Stp.Mstp.MstInstances.MstInstance.Config.bridge_priority:type_name -> ywrapper.UintValue
	46,  // 64: openconfig.Stp.Mstp.MstInstances.MstInstance.Config.mst_id:type_name -> ywrapper.UintValue
	20,  // 65: openconfig.Stp.Mstp.MstInstances.MstInstance.Config.vlan:type_name -> openconfig.Stp.Mstp.MstInstances.MstInstance.Config.VlanUnion
	22,  // 66: openconfig.Stp.Mstp.MstInstances.MstInstance.Interfaces.interface:type_name -> openconfig.Stp.Mstp.MstInstances.MstInstance.Interfaces.InterfaceKey
	51,  // 67: openconfig.Stp.Mstp.MstInstances.MstInstance.State.bridge_address:type_name -> ywrapper.StringValue
	46,  // 68: openconfig.Stp.Mstp.MstInstances.MstInstance.State.bridge_priority:type_name -> ywrapper.UintValue
	51,  // 69: openconfig.Stp.Mstp.MstInstances.MstInstance.State.designated_root_address:type_name -> ywrapper.StringValue
	46,  // 70: openconfig.Stp.Mstp.MstInstances.MstInstance.State.designated_root_priority:type_name -> ywrapper.UintValue
	46,  // 71: openconfig.Stp.Mstp.MstInstances.MstInstance.State.hold_time:type_name -> ywrapper.UintValue
	46,  // 72: openconfig.Stp.Mstp.MstInstances.MstInstance.State.last_topology_change:type_name -> ywrapper.UintValue
	46,  // 73: openconfig.Stp.Mstp.MstInstances.MstInstance.State.mst_id:type_name -> ywrapper.UintValue
	46,  // 74: openconfig.Stp.Mstp.MstInstances.MstInstance.State.root_cost:type_name -> ywrapper.UintValue
	46,  // 75: openconfig.Stp.Mstp.MstInstances.MstInstance.State.root_port:type_name -> ywrapper.UintValue
	46,  // 76: openconfig.Stp.Mstp.MstInstances.MstInstance.State.topology_changes:type_name -> ywrapper.UintValue
	26,  // 77: openconfig.Stp.Mstp.MstInstances.MstInstance.State.vlan:type_name -> openconfig.Stp.Mstp.MstInstances.MstInstance.State.VlanUnion
	23,  // 78: openconfig.Stp.Mstp.MstInstances.MstInstance.Interfaces.Interface.config:type_name -> openconfig.Stp.Mstp.MstInstances.MstInstance.Interfaces.Interface.Config
	24,  // 79: openconfig.Stp.Mstp.MstInstances.MstInstance.Interfaces.Interface.state:type_name -> openconfig.Stp.Mstp.MstInstances.MstInstance.Interfaces.Interface.State
	21,  // 80: openconfig.Stp.Mstp.MstInstances.MstInstance.Interfaces.InterfaceKey.interface:type_name -> openconfig.Stp.Mstp.MstInstances.MstInstance.Interfaces.Interface
	46,  // 81: openconfig.Stp.Mstp.MstInstances.MstInstance.Interfaces.Interface.Config.cost:type_name -> ywrapper.UintValue
	51,  // 82: openconfig.Stp.Mstp.MstInstances.MstInstance.Interfaces.Interface.Config.name:type_name -> ywrapper.StringValue
	46,  // 83: openconfig.Stp.Mstp.MstInstances.MstInstance.Interfaces.Interface.Config.port_priority:type_name -> ywrapper.UintValue
	46,  // 84: openconfig.Stp.Mstp.MstInstances.MstInstance.Interfaces.Interface.State.cost:type_name -> ywrapper.UintValue
	25,  // 85: openconfig.Stp.Mstp.MstInstances.MstInstance.Interfaces.Interface.State.counters:type_name -> openconfig.Stp.Mstp.MstInstances.MstInstance.Interfaces.Interface.State.Counters
	51,  // 86: openconfig.Stp.Mstp.MstInstances.MstInstance.Interfaces.Interface.State.designated_bridge_address:type_name -> ywrapper.StringValue
	46,  // 87: openconfig.Stp.Mstp.MstInstances.MstInstance.Interfaces.Interface.State.designated_bridge_priority:type_name -> ywrapper.UintValue
	46,  // 88: openconfig.Stp.Mstp.MstInstances.MstInstance.Interfaces.Interface.State.designated_cost:type_name -> ywrapper.UintValue
	46,  // 89: openconfig.Stp.Mstp.MstInstances.MstInstance.Interfaces.Interface.State.designated_port_num:type_name -> ywrapper.UintValue
	46,  // 90: openconfig.Stp.Mstp.MstInstances.MstInstance.Interfaces.Interface.State.designated_port_priority:type_name -> ywrapper.UintValue
	51,  // 91: openconfig.Stp.Mstp.MstInstances.MstInstance.Interfaces.Interface.State.designated_root_address:type_name -> ywrapper.StringValue
	46,  // 92: openconfig.Stp.Mstp.MstInstances.MstInstance.Interfaces.Interface.State.designated_root_priority:type_name -> ywrapper.UintValue
	46,  // 93: openconfig.Stp.Mstp.MstInstances.MstInstance.Interfaces.Interface.State.forward_transisitions:type_name -> ywrapper.UintValue
	51,  // 94: openconfig.Stp.Mstp.MstInstances.MstInstance.Interfaces.Interface.State.name:type_name -> ywrapper.StringValue
	46,  // 95: openconfig.Stp.Mstp.MstInstances.MstInstance.Interfaces.Interface.State.port_num:type_name -> ywrapper.UintValue
	46,  // 96: openconfig.Stp.Mstp.MstInstances.MstInstance.Interfaces.Interface.State.port_priority:type_name -> ywrapper.UintValue
	52,  // 97: openconfig.Stp.Mstp.MstInstances.MstInstance.Interfaces.Interface.State.port_state:type_name -> openconfig.OpenconfigSpanningTreeTypesSTPPORTSTATE
	53,  // 98: openconfig.Stp.Mstp.MstInstances.MstInstance.Interfaces.Interface.State.role:type_name -> openconfig.OpenconfigSpanningTreeTypesSTPPORTROLE
	46,  // 99: openconfig.Stp.Mstp.MstInstances.MstInstance.Interfaces.Interface.State.Counters.bpdu_received:type_name -> ywrapper.UintValue
	46,  // 100: openconfig.Stp.Mstp.MstInstances.MstInstance.Interfaces.Interface.State.Counters.bpdu_sent:type_name -> ywrapper.UintValue
	29,  // 101: openconfig.Stp.RapidPvst.Vlan.config:type_name -> openconfig.Stp.RapidPvst.Vlan.Config
	30,  // 102: openconfig.Stp.RapidPvst.Vlan.interfaces:type_name -> openconfig.Stp.RapidPvst.Vlan.Interfaces
	31,  // 103: openconfig.Stp.RapidPvst.Vlan.state:type_name -> openconfig.Stp.RapidPvst.Vlan.State
	27,  // 104: openconfig.Stp.RapidPvst.VlanKey.vlan:type_name -> openconfig.Stp.RapidPvst.Vlan
	46,  // 105: openconfig.Stp.RapidPvst.Vlan.Config.bridge_priority:type_name -> ywrapper.UintValue
	46,  // 106: openconfig.Stp.RapidPvst.Vlan.Config.forwarding_delay:type_name -> ywrapper.UintValue
	46,  // 107: openconfig.Stp.RapidPvst.Vlan.Config.hello_time:type_name -> ywrapper.UintValue
	46,  // 108: openconfig.Stp.RapidPvst.Vlan.Config.hold_count:type_name -> ywrapper.UintValue
	46,  // 109: openconfig.Stp.RapidPvst.Vlan.Config.max_age:type_name -> ywrapper.UintValue
	46,  // 110: openconfig.Stp.RapidPvst.Vlan.Config.vlan_id:type_name -> ywrapper.UintValue
	33,  // 111: openconfig.Stp.RapidPvst.Vlan.Interfaces.interface:type_name -> openconfig.Stp.RapidPvst.Vlan.Interfaces.InterfaceKey
	51,  // 112: openconfig.Stp.RapidPvst.Vlan.State.bridge_address:type_name -> ywrapper.StringValue
	46,  // 113: openconfig.Stp.RapidPvst.Vlan.State.bridge_priority:type_name -> ywrapper.UintValue
	51,  // 114: openconfig.Stp.RapidPvst.Vlan.State.designated_root_address:type_name -> ywrapper.StringValue
	46,  // 115: openconfig.Stp.RapidPvst.Vlan.State.designated_root_priority:type_name -> ywrapper.UintValue
	46,  // 116: openconfig.Stp.RapidPvst.Vlan.State.forwarding_delay:type_name -> ywrapper.UintValue
	46,  // 117: openconfig.Stp.RapidPvst.Vlan.State.hello_time:type_name -> ywrapper.UintValue
	46,  // 118: openconfig.Stp.RapidPvst.Vlan.State.hold_count:type_name -> ywrapper.UintValue
	46,  // 119: openconfig.Stp.RapidPvst.Vlan.State.hold_time:type_name -> ywrapper.UintValue
	46,  // 120: openconfig.Stp.RapidPvst.Vlan.State.last_topology_change:type_name -> ywrapper.UintValue
	46,  // 121: openconfig.Stp.RapidPvst.Vlan.State.max_age:type_name -> ywrapper.UintValue
	46,  // 122: openconfig.Stp.RapidPvst.Vlan.State.root_cost:type_name -> ywrapper.UintValue
	46,  // 123: openconfig.Stp.RapidPvst.Vlan.State.root_port:type_name -> ywrapper.UintValue
	46,  // 124: openconfig.Stp.RapidPvst.Vlan.State.topology_changes:type_name -> ywrapper.UintValue
	46,  // 125: openconfig.Stp.RapidPvst.Vlan.State.vlan_id:type_name -> ywrapper.UintValue
	34,  // 126: openconfig.Stp.RapidPvst.Vlan.Interfaces.Interface.config:type_name -> openconfig.Stp.RapidPvst.Vlan.Interfaces.Interface.Config
	35,  // 127: openconfig.Stp.RapidPvst.Vlan.Interfaces.Interface.state:type_name -> openconfig.Stp.RapidPvst.Vlan.Interfaces.Interface.State
	32,  // 128: openconfig.Stp.RapidPvst.Vlan.Interfaces.InterfaceKey.interface:type_name -> openconfig.Stp.RapidPvst.Vlan.Interfaces.Interface
	46,  // 129: openconfig.Stp.RapidPvst.Vlan.Interfaces.Interface.Config.cost:type_name -> ywrapper.UintValue
	51,  // 130: openconfig.Stp.RapidPvst.Vlan.Interfaces.Interface.Config.name:type_name -> ywrapper.StringValue
	46,  // 131: openconfig.Stp.RapidPvst.Vlan.Interfaces.Interface.Config.port_priority:type_name -> ywrapper.UintValue
	46,  // 132: openconfig.Stp.RapidPvst.Vlan.Interfaces.Interface.State.cost:type_name -> ywrapper.UintValue
	36,  // 133: openconfig.Stp.RapidPvst.Vlan.Interfaces.Interface.State.counters:type_name -> openconfig.Stp.RapidPvst.Vlan.Interfaces.Interface.State.Counters
	51,  // 134: openconfig.Stp.RapidPvst.Vlan.Interfaces.Interface.State.designated_bridge_address:type_name -> ywrapper.StringValue
	46,  // 135: openconfig.Stp.RapidPvst.Vlan.Interfaces.Interface.State.designated_bridge_priority:type_name -> ywrapper.UintValue
	46,  // 136: openconfig.Stp.RapidPvst.Vlan.Interfaces.Interface.State.designated_cost:type_name -> ywrapper.UintValue
	46,  // 137: openconfig.Stp.RapidPvst.Vlan.Interfaces.Interface.State.designated_port_num:type_name -> ywrapper.UintValue
	46,  // 138: openconfig.Stp.RapidPvst.Vlan.Interfaces.Interface.State.designated_port_priority:type_name -> ywrapper.UintValue
	51,  // 139: openconfig.Stp.RapidPvst.Vlan.Interfaces.Interface.State.designated_root_address:type_name -> ywrapper.StringValue
	46,  // 140: openconfig.Stp.RapidPvst.Vlan.Interfaces.Interface.State.designated_root_priority:type_name -> ywrapper.UintValue
	46,  // 141: openconfig.Stp.RapidPvst.Vlan.Interfaces.Interface.State.forward_transisitions:type_name -> ywrapper.UintValue
	51,  // 142: openconfig.Stp.RapidPvst.Vlan.Interfaces.Interface.State.name:type_name -> ywrapper.StringValue
	46,  // 143: openconfig.Stp.RapidPvst.Vlan.Interfaces.Interface.State.port_num:type_name -> ywrapper.UintValue
	46,  // 144: openconfig.Stp.RapidPvst.Vlan.Interfaces.Interface.State.port_priority:type_name -> ywrapper.UintValue
	52,  // 145: openconfig.Stp.RapidPvst.Vlan.Interfaces.Interface.State.port_state:type_name -> openconfig.OpenconfigSpanningTreeTypesSTPPORTSTATE
	53,  // 146: openconfig.Stp.RapidPvst.Vlan.Interfaces.Interface.State.role:type_name -> openconfig.OpenconfigSpanningTreeTypesSTPPORTROLE
	46,  // 147: openconfig.Stp.RapidPvst.Vlan.Interfaces.Interface.State.Counters.bpdu_received:type_name -> ywrapper.UintValue
	46,  // 148: openconfig.Stp.RapidPvst.Vlan.Interfaces.Interface.State.Counters.bpdu_sent:type_name -> ywrapper.UintValue
	46,  // 149: openconfig.Stp.Rstp.Config.bridge_priority:type_name -> ywrapper.UintValue
	46,  // 150: openconfig.Stp.Rstp.Config.forwarding_delay:type_name -> ywrapper.UintValue
	46,  // 151: openconfig.Stp.Rstp.Config.hello_time:type_name -> ywrapper.UintValue
	46,  // 152: openconfig.Stp.Rstp.Config.hold_count:type_name -> ywrapper.UintValue
	46,  // 153: openconfig.Stp.Rstp.Config.max_age:type_name -> ywrapper.UintValue
	41,  // 154: openconfig.Stp.Rstp.Interfaces.interface:type_name -> openconfig.Stp.Rstp.Interfaces.InterfaceKey
	51,  // 155: openconfig.Stp.Rstp.State.bridge_address:type_name -> ywrapper.StringValue
	46,  // 156: openconfig.Stp.Rstp.State.bridge_priority:type_name -> ywrapper.UintValue
	51,  // 157: openconfig.Stp.Rstp.State.designated_root_address:type_name -> ywrapper.StringValue
	46,  // 158: openconfig.Stp.Rstp.State.designated_root_priority:type_name -> ywrapper.UintValue
	46,  // 159: openconfig.Stp.Rstp.State.forwarding_delay:type_name -> ywrapper.UintValue
	46,  // 160: openconfig.Stp.Rstp.State.hello_time:type_name -> ywrapper.UintValue
	46,  // 161: openconfig.Stp.Rstp.State.hold_count:type_name -> ywrapper.UintValue
	46,  // 162: openconfig.Stp.Rstp.State.hold_time:type_name -> ywrapper.UintValue
	46,  // 163: openconfig.Stp.Rstp.State.last_topology_change:type_name -> ywrapper.UintValue
	46,  // 164: openconfig.Stp.Rstp.State.max_age:type_name -> ywrapper.UintValue
	46,  // 165: openconfig.Stp.Rstp.State.root_cost:type_name -> ywrapper.UintValue
	46,  // 166: openconfig.Stp.Rstp.State.root_port:type_name -> ywrapper.UintValue
	46,  // 167: openconfig.Stp.Rstp.State.topology_changes:type_name -> ywrapper.UintValue
	42,  // 168: openconfig.Stp.Rstp.Interfaces.Interface.config:type_name -> openconfig.Stp.Rstp.Interfaces.Interface.Config
	43,  // 169: openconfig.Stp.Rstp.Interfaces.Interface.state:type_name -> openconfig.Stp.Rstp.Interfaces.Interface.State
	40,  // 170: openconfig.Stp.Rstp.Interfaces.InterfaceKey.interface:type_name -> openconfig.Stp.Rstp.Interfaces.Interface
	46,  // 171: openconfig.Stp.Rstp.Interfaces.Interface.Config.cost:type_name -> ywrapper.UintValue
	51,  // 172: openconfig.Stp.Rstp.Interfaces.Interface.Config.name:type_name -> ywrapper.StringValue
	46,  // 173: openconfig.Stp.Rstp.Interfaces.Interface.Config.port_priority:type_name -> ywrapper.UintValue
	46,  // 174: openconfig.Stp.Rstp.Interfaces.Interface.State.cost:type_name -> ywrapper.UintValue
	44,  // 175: openconfig.Stp.Rstp.Interfaces.Interface.State.counters:type_name -> openconfig.Stp.Rstp.Interfaces.Interface.State.Counters
	51,  // 176: openconfig.Stp.Rstp.Interfaces.Interface.State.designated_bridge_address:type_name -> ywrapper.StringValue
	46,  // 177: openconfig.Stp.Rstp.Interfaces.Interface.State.designated_bridge_priority:type_name -> ywrapper.UintValue
	46,  // 178: openconfig.Stp.Rstp.Interfaces.Interface.State.designated_cost:type_name -> ywrapper.UintValue
	46,  // 179: openconfig.Stp.Rstp.Interfaces.Interface.State.designated_port_num:type_name -> ywrapper.UintValue
	46,  // 180: openconfig.Stp.Rstp.Interfaces.Interface.State.designated_port_priority:type_name -> ywrapper.UintValue
	51,  // 181: openconfig.Stp.Rstp.Interfaces.Interface.State.designated_root_address:type_name -> ywrapper.StringValue
	46,  // 182: openconfig.Stp.Rstp.Interfaces.Interface.State.designated_root_priority:type_name -> ywrapper.UintValue
	46,  // 183: openconfig.Stp.Rstp.Interfaces.Interface.State.forward_transisitions:type_name -> ywrapper.UintValue
	51,  // 184: openconfig.Stp.Rstp.Interfaces.Interface.State.name:type_name -> ywrapper.StringValue
	46,  // 185: openconfig.Stp.Rstp.Interfaces.Interface.State.port_num:type_name -> ywrapper.UintValue
	46,  // 186: openconfig.Stp.Rstp.Interfaces.Interface.State.port_priority:type_name -> ywrapper.UintValue
	52,  // 187: openconfig.Stp.Rstp.Interfaces.Interface.State.port_state:type_name -> openconfig.OpenconfigSpanningTreeTypesSTPPORTSTATE
	53,  // 188: openconfig.Stp.Rstp.Interfaces.Interface.State.role:type_name -> openconfig.OpenconfigSpanningTreeTypesSTPPORTROLE
	46,  // 189: openconfig.Stp.Rstp.Interfaces.Interface.State.Counters.bpdu_received:type_name -> ywrapper.UintValue
	46,  // 190: openconfig.Stp.Rstp.Interfaces.Interface.State.Counters.bpdu_sent:type_name -> ywrapper.UintValue
	191, // [191:191] is the sub-list for method output_type
	191, // [191:191] is the sub-list for method input_type
	191, // [191:191] is the sub-list for extension type_name
	191, // [191:191] is the sub-list for extension extendee
	0,   // [0:191] is the sub-list for field type_name
}

func init() { file_openconfig_spanning_tree_proto_init() }
func file_openconfig_spanning_tree_proto_init() {
	if File_openconfig_spanning_tree_proto != nil {
		return
	}
	file_openconfig_enums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_openconfig_spanning_tree_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_spanning_tree_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stp_Global); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_spanning_tree_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stp_Interfaces); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_spanning_tree_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stp_Mstp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_spanning_tree_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stp_RapidPvst); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_spanning_tree_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stp_Rstp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_spanning_tree_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stp_Global_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_spanning_tree_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stp_Global_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_spanning_tree_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stp_Interfaces_Interface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_spanning_tree_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stp_Interfaces_InterfaceKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_spanning_tree_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stp_Interfaces_Interface_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_spanning_tree_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stp_Interfaces_Interface_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_spanning_tree_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stp_Mstp_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_spanning_tree_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stp_Mstp_MstInstances); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_spanning_tree_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stp_Mstp_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_spanning_tree_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stp_Mstp_MstInstances_MstInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_spanning_tree_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stp_Mstp_MstInstances_MstInstanceKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_spanning_tree_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stp_Mstp_MstInstances_MstInstance_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_spanning_tree_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stp_Mstp_MstInstances_MstInstance_Interfaces); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_spanning_tree_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stp_Mstp_MstInstances_MstInstance_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_spanning_tree_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stp_Mstp_MstInstances_MstInstance_Config_VlanUnion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_spanning_tree_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stp_Mstp_MstInstances_MstInstance_Interfaces_Interface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_spanning_tree_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stp_Mstp_MstInstances_MstInstance_Interfaces_InterfaceKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_spanning_tree_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stp_Mstp_MstInstances_MstInstance_Interfaces_Interface_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_spanning_tree_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stp_Mstp_MstInstances_MstInstance_Interfaces_Interface_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_spanning_tree_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stp_Mstp_MstInstances_MstInstance_Interfaces_Interface_State_Counters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_spanning_tree_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stp_Mstp_MstInstances_MstInstance_State_VlanUnion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_spanning_tree_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stp_RapidPvst_Vlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_spanning_tree_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stp_RapidPvst_VlanKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_spanning_tree_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stp_RapidPvst_Vlan_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_spanning_tree_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stp_RapidPvst_Vlan_Interfaces); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_spanning_tree_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stp_RapidPvst_Vlan_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_spanning_tree_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stp_RapidPvst_Vlan_Interfaces_Interface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_spanning_tree_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stp_RapidPvst_Vlan_Interfaces_InterfaceKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_spanning_tree_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stp_RapidPvst_Vlan_Interfaces_Interface_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_spanning_tree_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stp_RapidPvst_Vlan_Interfaces_Interface_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_spanning_tree_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stp_RapidPvst_Vlan_Interfaces_Interface_State_Counters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_spanning_tree_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stp_Rstp_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_spanning_tree_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stp_Rstp_Interfaces); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_spanning_tree_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stp_Rstp_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_spanning_tree_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stp_Rstp_Interfaces_Interface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_spanning_tree_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stp_Rstp_Interfaces_InterfaceKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_spanning_tree_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stp_Rstp_Interfaces_Interface_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_spanning_tree_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stp_Rstp_Interfaces_Interface_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_spanning_tree_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stp_Rstp_Interfaces_Interface_State_Counters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_openconfig_spanning_tree_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   45,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_openconfig_spanning_tree_proto_goTypes,
		DependencyIndexes: file_openconfig_spanning_tree_proto_depIdxs,
		MessageInfos:      file_openconfig_spanning_tree_proto_msgTypes,
	}.Build()
	File_openconfig_spanning_tree_proto = out.File
	file_openconfig_spanning_tree_proto_rawDesc = nil
	file_openconfig_spanning_tree_proto_goTypes = nil
	file_openconfig_spanning_tree_proto_depIdxs = nil
}
