// openconfig.openconfig_optical_amplifier is generated by proto_generator as a protobuf
// representation of a YANG schema.
//
// Input schema modules:
//  - ../api/yang/public/doc/openconfig-example.yang
//  - ../api/yang/public/third_party/ietf/iana-if-type.yang
//  - ../api/yang/public/third_party/ietf/ietf-interfaces.yang
//  - ../api/yang/public/third_party/ietf/ietf-yang-types.yang
//  - ../api/yang/public/third_party/ietf/ietf-inet-types.yang
//  - ../api/yang/public/release/models/bfd/openconfig-bfd.yang
//  - ../api/yang/public/release/models/vlan/openconfig-vlan.yang
//  - ../api/yang/public/release/models/vlan/openconfig-vlan-types.yang
//  - ../api/yang/public/release/models/wifi/openconfig-access-points.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-mac.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-types.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-phy.yang
//  - ../api/yang/public/release/models/wifi/openconfig-ap-interfaces.yang
//  - ../api/yang/public/release/models/wifi/openconfig-ap-manager.yang
//  - ../api/yang/public/release/models/macsec/openconfig-macsec.yang
//  - ../api/yang/public/release/models/macsec/openconfig-macsec-types.yang
//  - ../api/yang/public/release/models/stp/openconfig-spanning-tree-types.yang
//  - ../api/yang/public/release/models/stp/openconfig-spanning-tree.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-errors.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-peer-group.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-types.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-global.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-neighbor.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common-structure.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-policy.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common-multiprotocol.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-types.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-port.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-fan.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-linecard.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-ext.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-cpu.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-psu.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-transceiver.yang
//  - ../api/yang/public/release/models/multicast/openconfig-pim-types.yang
//  - ../api/yang/public/release/models/multicast/openconfig-igmp-types.yang
//  - ../api/yang/public/release/models/multicast/openconfig-igmp.yang
//  - ../api/yang/public/release/models/multicast/openconfig-pim.yang
//  - ../api/yang/public/release/models/catalog/openconfig-module-catalog.yang
//  - ../api/yang/public/release/models/catalog/openconfig-catalog-types.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-interfaces.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-8021x.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-types.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-aggregate.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-poe.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-tunnel.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ip.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ethernet.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ethernet-ext.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ip-ext.yang
//  - ../api/yang/public/release/models/acl/openconfig-packet-match-types.yang
//  - ../api/yang/public/release/models/acl/openconfig-packet-match.yang
//  - ../api/yang/public/release/models/acl/openconfig-acl.yang
//  - ../api/yang/public/release/models/system/openconfig-license.yang
//  - ../api/yang/public/release/models/system/openconfig-system.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-radius.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa.yang
//  - ../api/yang/public/release/models/system/openconfig-system-management.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-types.yang
//  - ../api/yang/public/release/models/system/openconfig-procmon.yang
//  - ../api/yang/public/release/models/system/openconfig-messages.yang
//  - ../api/yang/public/release/models/system/openconfig-system-terminal.yang
//  - ../api/yang/public/release/models/system/openconfig-system-logging.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-tacacs.yang
//  - ../api/yang/public/release/models/system/openconfig-alarms.yang
//  - ../api/yang/public/release/models/system/openconfig-alarm-types.yang
//  - ../api/yang/public/release/models/policy/openconfig-policy-types.yang
//  - ../api/yang/public/release/models/policy/openconfig-routing-policy.yang
//  - ../api/yang/public/release/models/lacp/openconfig-lacp.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-wavelength-router.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-optical-amplifier.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-protection.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-channel-monitor.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-connectivity.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-optical-attenuator.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-common.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-types.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-terminal-device.yang
//  - ../api/yang/public/release/models/telemetry/openconfig-telemetry-types.yang
//  - ../api/yang/public/release/models/telemetry/openconfig-telemetry.yang
//  - ../api/yang/public/release/models/openflow/openconfig-openflow.yang
//  - ../api/yang/public/release/models/openflow/openconfig-openflow-types.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-tables.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-ext.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-table-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-shared-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-types.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-types.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-elements.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-interfaces.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-srte.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-forwarding-policies.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-interfaces.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-path-groups.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
//  - ../api/yang/public/release/models/relay-agent/openconfig-relay-agent.yang
//  - ../api/yang/public/release/models/lldp/openconfig-lldp.yang
//  - ../api/yang/public/release/models/lldp/openconfig-lldp-types.yang
//  - ../api/yang/public/release/models/openconfig-extensions.yang
//  - ../api/yang/public/release/models/types/openconfig-yang-types.yang
//  - ../api/yang/public/release/models/types/openconfig-inet-types.yang
//  - ../api/yang/public/release/models/types/openconfig-types.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-srte-policy.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-rsvp-sr-ext.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-segment-routing-types.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-segment-routing.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-types.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-igp.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-te.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-rsvp.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-static.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-sr.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-ldp.yang
//  - ../api/yang/public/release/models/probes/openconfig-probes-types.yang
//  - ../api/yang/public/release/models/probes/openconfig-probes.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-lsp.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-lsdb-types.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-policy.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-types.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-routing.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-area.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospf-policy.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-common.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-global.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-area-interface.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-lsdb.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospf-types.yang
//  - ../api/yang/public/release/models/local-routing/openconfig-local-routing.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-l3.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-l2.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-policy.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-types.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-mpls.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-common.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-types.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ipv6.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-pf.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-network-instance.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ipv4.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ethernet.yang

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        (unknown)
// source: openconfig_optical_amplifier.proto

package openconfig

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/openconfig/ygot/proto/yext"
	ywrapper "github.com/openconfig/ygot/proto/ywrapper"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type OpticalAmplifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amplifiers          *OpticalAmplifier_Amplifiers          `protobuf:"bytes,372184323,opt,name=amplifiers,proto3" json:"amplifiers,omitempty"`
	SupervisoryChannels *OpticalAmplifier_SupervisoryChannels `protobuf:"bytes,28767387,opt,name=supervisory_channels,json=supervisoryChannels,proto3" json:"supervisory_channels,omitempty"`
}

func (x *OpticalAmplifier) Reset() {
	*x = OpticalAmplifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_optical_amplifier_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpticalAmplifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpticalAmplifier) ProtoMessage() {}

func (x *OpticalAmplifier) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_optical_amplifier_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpticalAmplifier.ProtoReflect.Descriptor instead.
func (*OpticalAmplifier) Descriptor() ([]byte, []int) {
	return file_openconfig_optical_amplifier_proto_rawDescGZIP(), []int{0}
}

func (x *OpticalAmplifier) GetAmplifiers() *OpticalAmplifier_Amplifiers {
	if x != nil {
		return x.Amplifiers
	}
	return nil
}

func (x *OpticalAmplifier) GetSupervisoryChannels() *OpticalAmplifier_SupervisoryChannels {
	if x != nil {
		return x.SupervisoryChannels
	}
	return nil
}

type OpticalAmplifier_Amplifiers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amplifier []*OpticalAmplifier_Amplifiers_AmplifierKey `protobuf:"bytes,265912407,rep,name=amplifier,proto3" json:"amplifier,omitempty"`
}

func (x *OpticalAmplifier_Amplifiers) Reset() {
	*x = OpticalAmplifier_Amplifiers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_optical_amplifier_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpticalAmplifier_Amplifiers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpticalAmplifier_Amplifiers) ProtoMessage() {}

func (x *OpticalAmplifier_Amplifiers) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_optical_amplifier_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpticalAmplifier_Amplifiers.ProtoReflect.Descriptor instead.
func (*OpticalAmplifier_Amplifiers) Descriptor() ([]byte, []int) {
	return file_openconfig_optical_amplifier_proto_rawDescGZIP(), []int{0, 0}
}

func (x *OpticalAmplifier_Amplifiers) GetAmplifier() []*OpticalAmplifier_Amplifiers_AmplifierKey {
	if x != nil {
		return x.Amplifier
	}
	return nil
}

type OpticalAmplifier_SupervisoryChannels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SupervisoryChannel []*OpticalAmplifier_SupervisoryChannels_SupervisoryChannelKey `protobuf:"bytes,42639227,rep,name=supervisory_channel,json=supervisoryChannel,proto3" json:"supervisory_channel,omitempty"`
}

func (x *OpticalAmplifier_SupervisoryChannels) Reset() {
	*x = OpticalAmplifier_SupervisoryChannels{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_optical_amplifier_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpticalAmplifier_SupervisoryChannels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpticalAmplifier_SupervisoryChannels) ProtoMessage() {}

func (x *OpticalAmplifier_SupervisoryChannels) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_optical_amplifier_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpticalAmplifier_SupervisoryChannels.ProtoReflect.Descriptor instead.
func (*OpticalAmplifier_SupervisoryChannels) Descriptor() ([]byte, []int) {
	return file_openconfig_optical_amplifier_proto_rawDescGZIP(), []int{0, 1}
}

func (x *OpticalAmplifier_SupervisoryChannels) GetSupervisoryChannel() []*OpticalAmplifier_SupervisoryChannels_SupervisoryChannelKey {
	if x != nil {
		return x.SupervisoryChannel
	}
	return nil
}

type OpticalAmplifier_Amplifiers_Amplifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *OpticalAmplifier_Amplifiers_Amplifier_Config `protobuf:"bytes,47251912,opt,name=config,proto3" json:"config,omitempty"`
	State  *OpticalAmplifier_Amplifiers_Amplifier_State  `protobuf:"bytes,337450593,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *OpticalAmplifier_Amplifiers_Amplifier) Reset() {
	*x = OpticalAmplifier_Amplifiers_Amplifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_optical_amplifier_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpticalAmplifier_Amplifiers_Amplifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpticalAmplifier_Amplifiers_Amplifier) ProtoMessage() {}

func (x *OpticalAmplifier_Amplifiers_Amplifier) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_optical_amplifier_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpticalAmplifier_Amplifiers_Amplifier.ProtoReflect.Descriptor instead.
func (*OpticalAmplifier_Amplifiers_Amplifier) Descriptor() ([]byte, []int) {
	return file_openconfig_optical_amplifier_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *OpticalAmplifier_Amplifiers_Amplifier) GetConfig() *OpticalAmplifier_Amplifiers_Amplifier_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier) GetState() *OpticalAmplifier_Amplifiers_Amplifier_State {
	if x != nil {
		return x.State
	}
	return nil
}

type OpticalAmplifier_Amplifiers_AmplifierKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string                                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Amplifier *OpticalAmplifier_Amplifiers_Amplifier `protobuf:"bytes,2,opt,name=amplifier,proto3" json:"amplifier,omitempty"`
}

func (x *OpticalAmplifier_Amplifiers_AmplifierKey) Reset() {
	*x = OpticalAmplifier_Amplifiers_AmplifierKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_optical_amplifier_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpticalAmplifier_Amplifiers_AmplifierKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpticalAmplifier_Amplifiers_AmplifierKey) ProtoMessage() {}

func (x *OpticalAmplifier_Amplifiers_AmplifierKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_optical_amplifier_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpticalAmplifier_Amplifiers_AmplifierKey.ProtoReflect.Descriptor instead.
func (*OpticalAmplifier_Amplifiers_AmplifierKey) Descriptor() ([]byte, []int) {
	return file_openconfig_optical_amplifier_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *OpticalAmplifier_Amplifiers_AmplifierKey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OpticalAmplifier_Amplifiers_AmplifierKey) GetAmplifier() *OpticalAmplifier_Amplifiers_Amplifier {
	if x != nil {
		return x.Amplifier
	}
	return nil
}

type OpticalAmplifier_Amplifiers_Amplifier_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AmpMode           OpenconfigOpticalAmplifierOPTICALAMPLIFIERMODE `protobuf:"varint,213173045,opt,name=amp_mode,json=ampMode,proto3,enum=openconfig.OpenconfigOpticalAmplifierOPTICALAMPLIFIERMODE" json:"amp_mode,omitempty"`
	Enabled           *ywrapper.BoolValue                            `protobuf:"bytes,274752762,opt,name=enabled,proto3" json:"enabled,omitempty"`
	FiberTypeProfile  OpenconfigOpticalAmplifierFIBERTYPEPROFILE     `protobuf:"varint,422775780,opt,name=fiber_type_profile,json=fiberTypeProfile,proto3,enum=openconfig.OpenconfigOpticalAmplifierFIBERTYPEPROFILE" json:"fiber_type_profile,omitempty"`
	GainRange         OpenconfigOpticalAmplifierGAINRANGE            `protobuf:"varint,391412418,opt,name=gain_range,json=gainRange,proto3,enum=openconfig.OpenconfigOpticalAmplifierGAINRANGE" json:"gain_range,omitempty"`
	MaxGain           *ywrapper.Decimal64Value                       `protobuf:"bytes,401949685,opt,name=max_gain,json=maxGain,proto3" json:"max_gain,omitempty"`
	MaxOutputPower    *ywrapper.Decimal64Value                       `protobuf:"bytes,324458431,opt,name=max_output_power,json=maxOutputPower,proto3" json:"max_output_power,omitempty"`
	MinGain           *ywrapper.Decimal64Value                       `protobuf:"bytes,222040427,opt,name=min_gain,json=minGain,proto3" json:"min_gain,omitempty"`
	Name              *ywrapper.StringValue                          `protobuf:"bytes,237538034,opt,name=name,proto3" json:"name,omitempty"`
	TargetGain        *ywrapper.Decimal64Value                       `protobuf:"bytes,287715864,opt,name=target_gain,json=targetGain,proto3" json:"target_gain,omitempty"`
	TargetGainTilt    *ywrapper.Decimal64Value                       `protobuf:"bytes,534835064,opt,name=target_gain_tilt,json=targetGainTilt,proto3" json:"target_gain_tilt,omitempty"`
	TargetOutputPower *ywrapper.Decimal64Value                       `protobuf:"bytes,457627626,opt,name=target_output_power,json=targetOutputPower,proto3" json:"target_output_power,omitempty"`
	Type              OpenconfigOpticalAmplifierOPTICALAMPLIFIERTYPE `protobuf:"varint,497413935,opt,name=type,proto3,enum=openconfig.OpenconfigOpticalAmplifierOPTICALAMPLIFIERTYPE" json:"type,omitempty"`
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_Config) Reset() {
	*x = OpticalAmplifier_Amplifiers_Amplifier_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_optical_amplifier_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpticalAmplifier_Amplifiers_Amplifier_Config) ProtoMessage() {}

func (x *OpticalAmplifier_Amplifiers_Amplifier_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_optical_amplifier_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpticalAmplifier_Amplifiers_Amplifier_Config.ProtoReflect.Descriptor instead.
func (*OpticalAmplifier_Amplifiers_Amplifier_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_optical_amplifier_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_Config) GetAmpMode() OpenconfigOpticalAmplifierOPTICALAMPLIFIERMODE {
	if x != nil {
		return x.AmpMode
	}
	return OpenconfigOpticalAmplifierOPTICALAMPLIFIERMODE_OPENCONFIGOPTICALAMPLIFIEROPTICALAMPLIFIERMODE_UNSET
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_Config) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_Config) GetFiberTypeProfile() OpenconfigOpticalAmplifierFIBERTYPEPROFILE {
	if x != nil {
		return x.FiberTypeProfile
	}
	return OpenconfigOpticalAmplifierFIBERTYPEPROFILE_OPENCONFIGOPTICALAMPLIFIERFIBERTYPEPROFILE_UNSET
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_Config) GetGainRange() OpenconfigOpticalAmplifierGAINRANGE {
	if x != nil {
		return x.GainRange
	}
	return OpenconfigOpticalAmplifierGAINRANGE_OPENCONFIGOPTICALAMPLIFIERGAINRANGE_UNSET
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_Config) GetMaxGain() *ywrapper.Decimal64Value {
	if x != nil {
		return x.MaxGain
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_Config) GetMaxOutputPower() *ywrapper.Decimal64Value {
	if x != nil {
		return x.MaxOutputPower
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_Config) GetMinGain() *ywrapper.Decimal64Value {
	if x != nil {
		return x.MinGain
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_Config) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_Config) GetTargetGain() *ywrapper.Decimal64Value {
	if x != nil {
		return x.TargetGain
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_Config) GetTargetGainTilt() *ywrapper.Decimal64Value {
	if x != nil {
		return x.TargetGainTilt
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_Config) GetTargetOutputPower() *ywrapper.Decimal64Value {
	if x != nil {
		return x.TargetOutputPower
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_Config) GetType() OpenconfigOpticalAmplifierOPTICALAMPLIFIERTYPE {
	if x != nil {
		return x.Type
	}
	return OpenconfigOpticalAmplifierOPTICALAMPLIFIERTYPE_OPENCONFIGOPTICALAMPLIFIEROPTICALAMPLIFIERTYPE_UNSET
}

type OpticalAmplifier_Amplifiers_Amplifier_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActualGain        *OpticalAmplifier_Amplifiers_Amplifier_State_ActualGain        `protobuf:"bytes,427903922,opt,name=actual_gain,json=actualGain,proto3" json:"actual_gain,omitempty"`
	ActualGainTilt    *OpticalAmplifier_Amplifiers_Amplifier_State_ActualGainTilt    `protobuf:"bytes,414245390,opt,name=actual_gain_tilt,json=actualGainTilt,proto3" json:"actual_gain_tilt,omitempty"`
	AmpMode           OpenconfigOpticalAmplifierOPTICALAMPLIFIERMODE                 `protobuf:"varint,314189198,opt,name=amp_mode,json=ampMode,proto3,enum=openconfig.OpenconfigOpticalAmplifierOPTICALAMPLIFIERMODE" json:"amp_mode,omitempty"`
	Component         *ywrapper.StringValue                                          `protobuf:"bytes,124258433,opt,name=component,proto3" json:"component,omitempty"`
	EgressPort        *ywrapper.StringValue                                          `protobuf:"bytes,529707375,opt,name=egress_port,json=egressPort,proto3" json:"egress_port,omitempty"`
	Enabled           *ywrapper.BoolValue                                            `protobuf:"bytes,423614103,opt,name=enabled,proto3" json:"enabled,omitempty"`
	FiberTypeProfile  OpenconfigOpticalAmplifierFIBERTYPEPROFILE                     `protobuf:"varint,412975067,opt,name=fiber_type_profile,json=fiberTypeProfile,proto3,enum=openconfig.OpenconfigOpticalAmplifierFIBERTYPEPROFILE" json:"fiber_type_profile,omitempty"`
	GainRange         OpenconfigOpticalAmplifierGAINRANGE                            `protobuf:"varint,452923353,opt,name=gain_range,json=gainRange,proto3,enum=openconfig.OpenconfigOpticalAmplifierGAINRANGE" json:"gain_range,omitempty"`
	IngressPort       *ywrapper.StringValue                                          `protobuf:"bytes,532185287,opt,name=ingress_port,json=ingressPort,proto3" json:"ingress_port,omitempty"`
	InputPowerCBand   *OpticalAmplifier_Amplifiers_Amplifier_State_InputPowerCBand   `protobuf:"bytes,514337388,opt,name=input_power_c_band,json=inputPowerCBand,proto3" json:"input_power_c_band,omitempty"`
	InputPowerLBand   *OpticalAmplifier_Amplifiers_Amplifier_State_InputPowerLBand   `protobuf:"bytes,362773089,opt,name=input_power_l_band,json=inputPowerLBand,proto3" json:"input_power_l_band,omitempty"`
	InputPowerTotal   *OpticalAmplifier_Amplifiers_Amplifier_State_InputPowerTotal   `protobuf:"bytes,290016501,opt,name=input_power_total,json=inputPowerTotal,proto3" json:"input_power_total,omitempty"`
	LaserBiasCurrent  *OpticalAmplifier_Amplifiers_Amplifier_State_LaserBiasCurrent  `protobuf:"bytes,363893777,opt,name=laser_bias_current,json=laserBiasCurrent,proto3" json:"laser_bias_current,omitempty"`
	MaxGain           *ywrapper.Decimal64Value                                       `protobuf:"bytes,352221906,opt,name=max_gain,json=maxGain,proto3" json:"max_gain,omitempty"`
	MaxOutputPower    *ywrapper.Decimal64Value                                       `protobuf:"bytes,526259916,opt,name=max_output_power,json=maxOutputPower,proto3" json:"max_output_power,omitempty"`
	MinGain           *ywrapper.Decimal64Value                                       `protobuf:"bytes,31274440,opt,name=min_gain,json=minGain,proto3" json:"min_gain,omitempty"`
	Name              *ywrapper.StringValue                                          `protobuf:"bytes,411449237,opt,name=name,proto3" json:"name,omitempty"`
	OpticalReturnLoss *OpticalAmplifier_Amplifiers_Amplifier_State_OpticalReturnLoss `protobuf:"bytes,1826957,opt,name=optical_return_loss,json=opticalReturnLoss,proto3" json:"optical_return_loss,omitempty"`
	OutputPowerCBand  *OpticalAmplifier_Amplifiers_Amplifier_State_OutputPowerCBand  `protobuf:"bytes,533754081,opt,name=output_power_c_band,json=outputPowerCBand,proto3" json:"output_power_c_band,omitempty"`
	OutputPowerLBand  *OpticalAmplifier_Amplifiers_Amplifier_State_OutputPowerLBand  `protobuf:"bytes,148447468,opt,name=output_power_l_band,json=outputPowerLBand,proto3" json:"output_power_l_band,omitempty"`
	OutputPowerTotal  *OpticalAmplifier_Amplifiers_Amplifier_State_OutputPowerTotal  `protobuf:"bytes,170412918,opt,name=output_power_total,json=outputPowerTotal,proto3" json:"output_power_total,omitempty"`
	TargetGain        *ywrapper.Decimal64Value                                       `protobuf:"bytes,382709921,opt,name=target_gain,json=targetGain,proto3" json:"target_gain,omitempty"`
	TargetGainTilt    *ywrapper.Decimal64Value                                       `protobuf:"bytes,253671195,opt,name=target_gain_tilt,json=targetGainTilt,proto3" json:"target_gain_tilt,omitempty"`
	TargetOutputPower *ywrapper.Decimal64Value                                       `protobuf:"bytes,39144115,opt,name=target_output_power,json=targetOutputPower,proto3" json:"target_output_power,omitempty"`
	Type              OpenconfigOpticalAmplifierOPTICALAMPLIFIERTYPE                 `protobuf:"varint,28656020,opt,name=type,proto3,enum=openconfig.OpenconfigOpticalAmplifierOPTICALAMPLIFIERTYPE" json:"type,omitempty"`
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State) Reset() {
	*x = OpticalAmplifier_Amplifiers_Amplifier_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_optical_amplifier_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpticalAmplifier_Amplifiers_Amplifier_State) ProtoMessage() {}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_optical_amplifier_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpticalAmplifier_Amplifiers_Amplifier_State.ProtoReflect.Descriptor instead.
func (*OpticalAmplifier_Amplifiers_Amplifier_State) Descriptor() ([]byte, []int) {
	return file_openconfig_optical_amplifier_proto_rawDescGZIP(), []int{0, 0, 0, 1}
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State) GetActualGain() *OpticalAmplifier_Amplifiers_Amplifier_State_ActualGain {
	if x != nil {
		return x.ActualGain
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State) GetActualGainTilt() *OpticalAmplifier_Amplifiers_Amplifier_State_ActualGainTilt {
	if x != nil {
		return x.ActualGainTilt
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State) GetAmpMode() OpenconfigOpticalAmplifierOPTICALAMPLIFIERMODE {
	if x != nil {
		return x.AmpMode
	}
	return OpenconfigOpticalAmplifierOPTICALAMPLIFIERMODE_OPENCONFIGOPTICALAMPLIFIEROPTICALAMPLIFIERMODE_UNSET
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State) GetComponent() *ywrapper.StringValue {
	if x != nil {
		return x.Component
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State) GetEgressPort() *ywrapper.StringValue {
	if x != nil {
		return x.EgressPort
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State) GetFiberTypeProfile() OpenconfigOpticalAmplifierFIBERTYPEPROFILE {
	if x != nil {
		return x.FiberTypeProfile
	}
	return OpenconfigOpticalAmplifierFIBERTYPEPROFILE_OPENCONFIGOPTICALAMPLIFIERFIBERTYPEPROFILE_UNSET
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State) GetGainRange() OpenconfigOpticalAmplifierGAINRANGE {
	if x != nil {
		return x.GainRange
	}
	return OpenconfigOpticalAmplifierGAINRANGE_OPENCONFIGOPTICALAMPLIFIERGAINRANGE_UNSET
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State) GetIngressPort() *ywrapper.StringValue {
	if x != nil {
		return x.IngressPort
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State) GetInputPowerCBand() *OpticalAmplifier_Amplifiers_Amplifier_State_InputPowerCBand {
	if x != nil {
		return x.InputPowerCBand
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State) GetInputPowerLBand() *OpticalAmplifier_Amplifiers_Amplifier_State_InputPowerLBand {
	if x != nil {
		return x.InputPowerLBand
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State) GetInputPowerTotal() *OpticalAmplifier_Amplifiers_Amplifier_State_InputPowerTotal {
	if x != nil {
		return x.InputPowerTotal
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State) GetLaserBiasCurrent() *OpticalAmplifier_Amplifiers_Amplifier_State_LaserBiasCurrent {
	if x != nil {
		return x.LaserBiasCurrent
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State) GetMaxGain() *ywrapper.Decimal64Value {
	if x != nil {
		return x.MaxGain
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State) GetMaxOutputPower() *ywrapper.Decimal64Value {
	if x != nil {
		return x.MaxOutputPower
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State) GetMinGain() *ywrapper.Decimal64Value {
	if x != nil {
		return x.MinGain
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State) GetOpticalReturnLoss() *OpticalAmplifier_Amplifiers_Amplifier_State_OpticalReturnLoss {
	if x != nil {
		return x.OpticalReturnLoss
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State) GetOutputPowerCBand() *OpticalAmplifier_Amplifiers_Amplifier_State_OutputPowerCBand {
	if x != nil {
		return x.OutputPowerCBand
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State) GetOutputPowerLBand() *OpticalAmplifier_Amplifiers_Amplifier_State_OutputPowerLBand {
	if x != nil {
		return x.OutputPowerLBand
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State) GetOutputPowerTotal() *OpticalAmplifier_Amplifiers_Amplifier_State_OutputPowerTotal {
	if x != nil {
		return x.OutputPowerTotal
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State) GetTargetGain() *ywrapper.Decimal64Value {
	if x != nil {
		return x.TargetGain
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State) GetTargetGainTilt() *ywrapper.Decimal64Value {
	if x != nil {
		return x.TargetGainTilt
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State) GetTargetOutputPower() *ywrapper.Decimal64Value {
	if x != nil {
		return x.TargetOutputPower
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State) GetType() OpenconfigOpticalAmplifierOPTICALAMPLIFIERTYPE {
	if x != nil {
		return x.Type
	}
	return OpenconfigOpticalAmplifierOPTICALAMPLIFIERTYPE_OPENCONFIGOPTICALAMPLIFIEROPTICALAMPLIFIERTYPE_UNSET
}

type OpticalAmplifier_Amplifiers_Amplifier_State_ActualGain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avg      *ywrapper.Decimal64Value `protobuf:"bytes,156932943,opt,name=avg,proto3" json:"avg,omitempty"`
	Instant  *ywrapper.Decimal64Value `protobuf:"bytes,107311160,opt,name=instant,proto3" json:"instant,omitempty"`
	Interval *ywrapper.UintValue      `protobuf:"bytes,41392966,opt,name=interval,proto3" json:"interval,omitempty"`
	Max      *ywrapper.Decimal64Value `protobuf:"bytes,139553953,opt,name=max,proto3" json:"max,omitempty"`
	MaxTime  *ywrapper.UintValue      `protobuf:"bytes,51702201,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	Min      *ywrapper.Decimal64Value `protobuf:"bytes,273774879,opt,name=min,proto3" json:"min,omitempty"`
	MinTime  *ywrapper.UintValue      `protobuf:"bytes,121807587,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_ActualGain) Reset() {
	*x = OpticalAmplifier_Amplifiers_Amplifier_State_ActualGain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_optical_amplifier_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_ActualGain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpticalAmplifier_Amplifiers_Amplifier_State_ActualGain) ProtoMessage() {}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_ActualGain) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_optical_amplifier_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpticalAmplifier_Amplifiers_Amplifier_State_ActualGain.ProtoReflect.Descriptor instead.
func (*OpticalAmplifier_Amplifiers_Amplifier_State_ActualGain) Descriptor() ([]byte, []int) {
	return file_openconfig_optical_amplifier_proto_rawDescGZIP(), []int{0, 0, 0, 1, 0}
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_ActualGain) GetAvg() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Avg
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_ActualGain) GetInstant() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Instant
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_ActualGain) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_ActualGain) GetMax() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_ActualGain) GetMaxTime() *ywrapper.UintValue {
	if x != nil {
		return x.MaxTime
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_ActualGain) GetMin() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_ActualGain) GetMinTime() *ywrapper.UintValue {
	if x != nil {
		return x.MinTime
	}
	return nil
}

type OpticalAmplifier_Amplifiers_Amplifier_State_ActualGainTilt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avg      *ywrapper.Decimal64Value `protobuf:"bytes,342459139,opt,name=avg,proto3" json:"avg,omitempty"`
	Instant  *ywrapper.Decimal64Value `protobuf:"bytes,364260860,opt,name=instant,proto3" json:"instant,omitempty"`
	Interval *ywrapper.UintValue      `protobuf:"bytes,448738762,opt,name=interval,proto3" json:"interval,omitempty"`
	Max      *ywrapper.Decimal64Value `protobuf:"bytes,458034221,opt,name=max,proto3" json:"max,omitempty"`
	MaxTime  *ywrapper.UintValue      `protobuf:"bytes,44616125,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	Min      *ywrapper.Decimal64Value `protobuf:"bytes,55384195,opt,name=min,proto3" json:"min,omitempty"`
	MinTime  *ywrapper.UintValue      `protobuf:"bytes,535342703,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_ActualGainTilt) Reset() {
	*x = OpticalAmplifier_Amplifiers_Amplifier_State_ActualGainTilt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_optical_amplifier_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_ActualGainTilt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpticalAmplifier_Amplifiers_Amplifier_State_ActualGainTilt) ProtoMessage() {}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_ActualGainTilt) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_optical_amplifier_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpticalAmplifier_Amplifiers_Amplifier_State_ActualGainTilt.ProtoReflect.Descriptor instead.
func (*OpticalAmplifier_Amplifiers_Amplifier_State_ActualGainTilt) Descriptor() ([]byte, []int) {
	return file_openconfig_optical_amplifier_proto_rawDescGZIP(), []int{0, 0, 0, 1, 1}
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_ActualGainTilt) GetAvg() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Avg
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_ActualGainTilt) GetInstant() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Instant
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_ActualGainTilt) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_ActualGainTilt) GetMax() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_ActualGainTilt) GetMaxTime() *ywrapper.UintValue {
	if x != nil {
		return x.MaxTime
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_ActualGainTilt) GetMin() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_ActualGainTilt) GetMinTime() *ywrapper.UintValue {
	if x != nil {
		return x.MinTime
	}
	return nil
}

type OpticalAmplifier_Amplifiers_Amplifier_State_InputPowerCBand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avg      *ywrapper.Decimal64Value `protobuf:"bytes,463266069,opt,name=avg,proto3" json:"avg,omitempty"`
	Instant  *ywrapper.Decimal64Value `protobuf:"bytes,490318226,opt,name=instant,proto3" json:"instant,omitempty"`
	Interval *ywrapper.UintValue      `protobuf:"bytes,55665268,opt,name=interval,proto3" json:"interval,omitempty"`
	Max      *ywrapper.Decimal64Value `protobuf:"bytes,247141399,opt,name=max,proto3" json:"max,omitempty"`
	MaxTime  *ywrapper.UintValue      `protobuf:"bytes,275300123,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	Min      *ywrapper.Decimal64Value `protobuf:"bytes,381362537,opt,name=min,proto3" json:"min,omitempty"`
	MinTime  *ywrapper.UintValue      `protobuf:"bytes,313493057,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_InputPowerCBand) Reset() {
	*x = OpticalAmplifier_Amplifiers_Amplifier_State_InputPowerCBand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_optical_amplifier_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_InputPowerCBand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpticalAmplifier_Amplifiers_Amplifier_State_InputPowerCBand) ProtoMessage() {}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_InputPowerCBand) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_optical_amplifier_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpticalAmplifier_Amplifiers_Amplifier_State_InputPowerCBand.ProtoReflect.Descriptor instead.
func (*OpticalAmplifier_Amplifiers_Amplifier_State_InputPowerCBand) Descriptor() ([]byte, []int) {
	return file_openconfig_optical_amplifier_proto_rawDescGZIP(), []int{0, 0, 0, 1, 2}
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_InputPowerCBand) GetAvg() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Avg
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_InputPowerCBand) GetInstant() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Instant
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_InputPowerCBand) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_InputPowerCBand) GetMax() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_InputPowerCBand) GetMaxTime() *ywrapper.UintValue {
	if x != nil {
		return x.MaxTime
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_InputPowerCBand) GetMin() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_InputPowerCBand) GetMinTime() *ywrapper.UintValue {
	if x != nil {
		return x.MinTime
	}
	return nil
}

type OpticalAmplifier_Amplifiers_Amplifier_State_InputPowerLBand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avg      *ywrapper.Decimal64Value `protobuf:"bytes,295143420,opt,name=avg,proto3" json:"avg,omitempty"`
	Instant  *ywrapper.Decimal64Value `protobuf:"bytes,117495079,opt,name=instant,proto3" json:"instant,omitempty"`
	Interval *ywrapper.UintValue      `protobuf:"bytes,341383863,opt,name=interval,proto3" json:"interval,omitempty"`
	Max      *ywrapper.Decimal64Value `protobuf:"bytes,513840662,opt,name=max,proto3" json:"max,omitempty"`
	MaxTime  *ywrapper.UintValue      `protobuf:"bytes,303824020,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	Min      *ywrapper.Decimal64Value `protobuf:"bytes,379619768,opt,name=min,proto3" json:"min,omitempty"`
	MinTime  *ywrapper.UintValue      `protobuf:"bytes,335223962,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_InputPowerLBand) Reset() {
	*x = OpticalAmplifier_Amplifiers_Amplifier_State_InputPowerLBand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_optical_amplifier_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_InputPowerLBand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpticalAmplifier_Amplifiers_Amplifier_State_InputPowerLBand) ProtoMessage() {}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_InputPowerLBand) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_optical_amplifier_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpticalAmplifier_Amplifiers_Amplifier_State_InputPowerLBand.ProtoReflect.Descriptor instead.
func (*OpticalAmplifier_Amplifiers_Amplifier_State_InputPowerLBand) Descriptor() ([]byte, []int) {
	return file_openconfig_optical_amplifier_proto_rawDescGZIP(), []int{0, 0, 0, 1, 3}
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_InputPowerLBand) GetAvg() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Avg
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_InputPowerLBand) GetInstant() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Instant
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_InputPowerLBand) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_InputPowerLBand) GetMax() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_InputPowerLBand) GetMaxTime() *ywrapper.UintValue {
	if x != nil {
		return x.MaxTime
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_InputPowerLBand) GetMin() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_InputPowerLBand) GetMinTime() *ywrapper.UintValue {
	if x != nil {
		return x.MinTime
	}
	return nil
}

type OpticalAmplifier_Amplifiers_Amplifier_State_InputPowerTotal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avg      *ywrapper.Decimal64Value `protobuf:"bytes,109050616,opt,name=avg,proto3" json:"avg,omitempty"`
	Instant  *ywrapper.Decimal64Value `protobuf:"bytes,261310371,opt,name=instant,proto3" json:"instant,omitempty"`
	Interval *ywrapper.UintValue      `protobuf:"bytes,501780355,opt,name=interval,proto3" json:"interval,omitempty"`
	Max      *ywrapper.Decimal64Value `protobuf:"bytes,463351994,opt,name=max,proto3" json:"max,omitempty"`
	MaxTime  *ywrapper.UintValue      `protobuf:"bytes,420850992,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	Min      *ywrapper.Decimal64Value `protobuf:"bytes,60702004,opt,name=min,proto3" json:"min,omitempty"`
	MinTime  *ywrapper.UintValue      `protobuf:"bytes,535984222,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_InputPowerTotal) Reset() {
	*x = OpticalAmplifier_Amplifiers_Amplifier_State_InputPowerTotal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_optical_amplifier_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_InputPowerTotal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpticalAmplifier_Amplifiers_Amplifier_State_InputPowerTotal) ProtoMessage() {}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_InputPowerTotal) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_optical_amplifier_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpticalAmplifier_Amplifiers_Amplifier_State_InputPowerTotal.ProtoReflect.Descriptor instead.
func (*OpticalAmplifier_Amplifiers_Amplifier_State_InputPowerTotal) Descriptor() ([]byte, []int) {
	return file_openconfig_optical_amplifier_proto_rawDescGZIP(), []int{0, 0, 0, 1, 4}
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_InputPowerTotal) GetAvg() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Avg
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_InputPowerTotal) GetInstant() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Instant
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_InputPowerTotal) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_InputPowerTotal) GetMax() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_InputPowerTotal) GetMaxTime() *ywrapper.UintValue {
	if x != nil {
		return x.MaxTime
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_InputPowerTotal) GetMin() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_InputPowerTotal) GetMinTime() *ywrapper.UintValue {
	if x != nil {
		return x.MinTime
	}
	return nil
}

type OpticalAmplifier_Amplifiers_Amplifier_State_LaserBiasCurrent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avg      *ywrapper.Decimal64Value `protobuf:"bytes,200827724,opt,name=avg,proto3" json:"avg,omitempty"`
	Instant  *ywrapper.Decimal64Value `protobuf:"bytes,534817719,opt,name=instant,proto3" json:"instant,omitempty"`
	Interval *ywrapper.UintValue      `protobuf:"bytes,50187495,opt,name=interval,proto3" json:"interval,omitempty"`
	Max      *ywrapper.Decimal64Value `protobuf:"bytes,419615462,opt,name=max,proto3" json:"max,omitempty"`
	MaxTime  *ywrapper.UintValue      `protobuf:"bytes,83058916,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	Min      *ywrapper.Decimal64Value `protobuf:"bytes,285394536,opt,name=min,proto3" json:"min,omitempty"`
	MinTime  *ywrapper.UintValue      `protobuf:"bytes,312699914,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_LaserBiasCurrent) Reset() {
	*x = OpticalAmplifier_Amplifiers_Amplifier_State_LaserBiasCurrent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_optical_amplifier_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_LaserBiasCurrent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpticalAmplifier_Amplifiers_Amplifier_State_LaserBiasCurrent) ProtoMessage() {}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_LaserBiasCurrent) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_optical_amplifier_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpticalAmplifier_Amplifiers_Amplifier_State_LaserBiasCurrent.ProtoReflect.Descriptor instead.
func (*OpticalAmplifier_Amplifiers_Amplifier_State_LaserBiasCurrent) Descriptor() ([]byte, []int) {
	return file_openconfig_optical_amplifier_proto_rawDescGZIP(), []int{0, 0, 0, 1, 5}
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_LaserBiasCurrent) GetAvg() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Avg
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_LaserBiasCurrent) GetInstant() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Instant
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_LaserBiasCurrent) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_LaserBiasCurrent) GetMax() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_LaserBiasCurrent) GetMaxTime() *ywrapper.UintValue {
	if x != nil {
		return x.MaxTime
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_LaserBiasCurrent) GetMin() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_LaserBiasCurrent) GetMinTime() *ywrapper.UintValue {
	if x != nil {
		return x.MinTime
	}
	return nil
}

type OpticalAmplifier_Amplifiers_Amplifier_State_OpticalReturnLoss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avg      *ywrapper.Decimal64Value `protobuf:"bytes,22622816,opt,name=avg,proto3" json:"avg,omitempty"`
	Instant  *ywrapper.Decimal64Value `protobuf:"bytes,124129147,opt,name=instant,proto3" json:"instant,omitempty"`
	Interval *ywrapper.UintValue      `protobuf:"bytes,348154123,opt,name=interval,proto3" json:"interval,omitempty"`
	Max      *ywrapper.Decimal64Value `protobuf:"bytes,374261186,opt,name=max,proto3" json:"max,omitempty"`
	MaxTime  *ywrapper.UintValue      `protobuf:"bytes,158052408,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	Min      *ywrapper.Decimal64Value `protobuf:"bytes,240040268,opt,name=min,proto3" json:"min,omitempty"`
	MinTime  *ywrapper.UintValue      `protobuf:"bytes,368570102,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_OpticalReturnLoss) Reset() {
	*x = OpticalAmplifier_Amplifiers_Amplifier_State_OpticalReturnLoss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_optical_amplifier_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_OpticalReturnLoss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpticalAmplifier_Amplifiers_Amplifier_State_OpticalReturnLoss) ProtoMessage() {}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_OpticalReturnLoss) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_optical_amplifier_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpticalAmplifier_Amplifiers_Amplifier_State_OpticalReturnLoss.ProtoReflect.Descriptor instead.
func (*OpticalAmplifier_Amplifiers_Amplifier_State_OpticalReturnLoss) Descriptor() ([]byte, []int) {
	return file_openconfig_optical_amplifier_proto_rawDescGZIP(), []int{0, 0, 0, 1, 6}
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_OpticalReturnLoss) GetAvg() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Avg
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_OpticalReturnLoss) GetInstant() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Instant
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_OpticalReturnLoss) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_OpticalReturnLoss) GetMax() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_OpticalReturnLoss) GetMaxTime() *ywrapper.UintValue {
	if x != nil {
		return x.MaxTime
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_OpticalReturnLoss) GetMin() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_OpticalReturnLoss) GetMinTime() *ywrapper.UintValue {
	if x != nil {
		return x.MinTime
	}
	return nil
}

type OpticalAmplifier_Amplifiers_Amplifier_State_OutputPowerCBand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avg      *ywrapper.Decimal64Value `protobuf:"bytes,159475324,opt,name=avg,proto3" json:"avg,omitempty"`
	Instant  *ywrapper.Decimal64Value `protobuf:"bytes,155851687,opt,name=instant,proto3" json:"instant,omitempty"`
	Interval *ywrapper.UintValue      `protobuf:"bytes,229840439,opt,name=interval,proto3" json:"interval,omitempty"`
	Max      *ywrapper.Decimal64Value `protobuf:"bytes,378172566,opt,name=max,proto3" json:"max,omitempty"`
	MaxTime  *ywrapper.UintValue      `protobuf:"bytes,192280596,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	Min      *ywrapper.Decimal64Value `protobuf:"bytes,243951672,opt,name=min,proto3" json:"min,omitempty"`
	MinTime  *ywrapper.UintValue      `protobuf:"bytes,223680538,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_OutputPowerCBand) Reset() {
	*x = OpticalAmplifier_Amplifiers_Amplifier_State_OutputPowerCBand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_optical_amplifier_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_OutputPowerCBand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpticalAmplifier_Amplifiers_Amplifier_State_OutputPowerCBand) ProtoMessage() {}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_OutputPowerCBand) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_optical_amplifier_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpticalAmplifier_Amplifiers_Amplifier_State_OutputPowerCBand.ProtoReflect.Descriptor instead.
func (*OpticalAmplifier_Amplifiers_Amplifier_State_OutputPowerCBand) Descriptor() ([]byte, []int) {
	return file_openconfig_optical_amplifier_proto_rawDescGZIP(), []int{0, 0, 0, 1, 7}
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_OutputPowerCBand) GetAvg() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Avg
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_OutputPowerCBand) GetInstant() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Instant
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_OutputPowerCBand) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_OutputPowerCBand) GetMax() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_OutputPowerCBand) GetMaxTime() *ywrapper.UintValue {
	if x != nil {
		return x.MaxTime
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_OutputPowerCBand) GetMin() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_OutputPowerCBand) GetMinTime() *ywrapper.UintValue {
	if x != nil {
		return x.MinTime
	}
	return nil
}

type OpticalAmplifier_Amplifiers_Amplifier_State_OutputPowerLBand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avg      *ywrapper.Decimal64Value `protobuf:"bytes,327597973,opt,name=avg,proto3" json:"avg,omitempty"`
	Instant  *ywrapper.Decimal64Value `protobuf:"bytes,528674834,opt,name=instant,proto3" json:"instant,omitempty"`
	Interval *ywrapper.UintValue      `protobuf:"bytes,480992756,opt,name=interval,proto3" json:"interval,omitempty"`
	Max      *ywrapper.Decimal64Value `protobuf:"bytes,111473303,opt,name=max,proto3" json:"max,omitempty"`
	MaxTime  *ywrapper.UintValue      `protobuf:"bytes,163756699,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	Min      *ywrapper.Decimal64Value `protobuf:"bytes,245694441,opt,name=min,proto3" json:"min,omitempty"`
	MinTime  *ywrapper.UintValue      `protobuf:"bytes,201949633,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_OutputPowerLBand) Reset() {
	*x = OpticalAmplifier_Amplifiers_Amplifier_State_OutputPowerLBand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_optical_amplifier_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_OutputPowerLBand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpticalAmplifier_Amplifiers_Amplifier_State_OutputPowerLBand) ProtoMessage() {}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_OutputPowerLBand) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_optical_amplifier_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpticalAmplifier_Amplifiers_Amplifier_State_OutputPowerLBand.ProtoReflect.Descriptor instead.
func (*OpticalAmplifier_Amplifiers_Amplifier_State_OutputPowerLBand) Descriptor() ([]byte, []int) {
	return file_openconfig_optical_amplifier_proto_rawDescGZIP(), []int{0, 0, 0, 1, 8}
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_OutputPowerLBand) GetAvg() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Avg
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_OutputPowerLBand) GetInstant() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Instant
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_OutputPowerLBand) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_OutputPowerLBand) GetMax() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_OutputPowerLBand) GetMaxTime() *ywrapper.UintValue {
	if x != nil {
		return x.MaxTime
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_OutputPowerLBand) GetMin() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_OutputPowerLBand) GetMinTime() *ywrapper.UintValue {
	if x != nil {
		return x.MinTime
	}
	return nil
}

type OpticalAmplifier_Amplifiers_Amplifier_State_OutputPowerTotal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avg      *ywrapper.Decimal64Value `protobuf:"bytes,221413691,opt,name=avg,proto3" json:"avg,omitempty"`
	Instant  *ywrapper.Decimal64Value `protobuf:"bytes,16585284,opt,name=instant,proto3" json:"instant,omitempty"`
	Interval *ywrapper.UintValue      `protobuf:"bytes,58825282,opt,name=interval,proto3" json:"interval,omitempty"`
	Max      *ywrapper.Decimal64Value `protobuf:"bytes,339548613,opt,name=max,proto3" json:"max,omitempty"`
	MaxTime  *ywrapper.UintValue      `protobuf:"bytes,410337973,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	Min      *ywrapper.Decimal64Value `protobuf:"bytes,205327691,opt,name=min,proto3" json:"min,omitempty"`
	MinTime  *ywrapper.UintValue      `protobuf:"bytes,403128759,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_OutputPowerTotal) Reset() {
	*x = OpticalAmplifier_Amplifiers_Amplifier_State_OutputPowerTotal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_optical_amplifier_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_OutputPowerTotal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpticalAmplifier_Amplifiers_Amplifier_State_OutputPowerTotal) ProtoMessage() {}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_OutputPowerTotal) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_optical_amplifier_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpticalAmplifier_Amplifiers_Amplifier_State_OutputPowerTotal.ProtoReflect.Descriptor instead.
func (*OpticalAmplifier_Amplifiers_Amplifier_State_OutputPowerTotal) Descriptor() ([]byte, []int) {
	return file_openconfig_optical_amplifier_proto_rawDescGZIP(), []int{0, 0, 0, 1, 9}
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_OutputPowerTotal) GetAvg() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Avg
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_OutputPowerTotal) GetInstant() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Instant
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_OutputPowerTotal) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_OutputPowerTotal) GetMax() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_OutputPowerTotal) GetMaxTime() *ywrapper.UintValue {
	if x != nil {
		return x.MaxTime
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_OutputPowerTotal) GetMin() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *OpticalAmplifier_Amplifiers_Amplifier_State_OutputPowerTotal) GetMinTime() *ywrapper.UintValue {
	if x != nil {
		return x.MinTime
	}
	return nil
}

type OpticalAmplifier_SupervisoryChannels_SupervisoryChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_Config `protobuf:"bytes,299726764,opt,name=config,proto3" json:"config,omitempty"`
	State  *OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_State  `protobuf:"bytes,48802981,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *OpticalAmplifier_SupervisoryChannels_SupervisoryChannel) Reset() {
	*x = OpticalAmplifier_SupervisoryChannels_SupervisoryChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_optical_amplifier_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpticalAmplifier_SupervisoryChannels_SupervisoryChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpticalAmplifier_SupervisoryChannels_SupervisoryChannel) ProtoMessage() {}

func (x *OpticalAmplifier_SupervisoryChannels_SupervisoryChannel) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_optical_amplifier_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpticalAmplifier_SupervisoryChannels_SupervisoryChannel.ProtoReflect.Descriptor instead.
func (*OpticalAmplifier_SupervisoryChannels_SupervisoryChannel) Descriptor() ([]byte, []int) {
	return file_openconfig_optical_amplifier_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *OpticalAmplifier_SupervisoryChannels_SupervisoryChannel) GetConfig() *OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *OpticalAmplifier_SupervisoryChannels_SupervisoryChannel) GetState() *OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_State {
	if x != nil {
		return x.State
	}
	return nil
}

type OpticalAmplifier_SupervisoryChannels_SupervisoryChannelKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interface          string                                                   `protobuf:"bytes,1,opt,name=interface,proto3" json:"interface,omitempty"`
	SupervisoryChannel *OpticalAmplifier_SupervisoryChannels_SupervisoryChannel `protobuf:"bytes,2,opt,name=supervisory_channel,json=supervisoryChannel,proto3" json:"supervisory_channel,omitempty"`
}

func (x *OpticalAmplifier_SupervisoryChannels_SupervisoryChannelKey) Reset() {
	*x = OpticalAmplifier_SupervisoryChannels_SupervisoryChannelKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_optical_amplifier_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpticalAmplifier_SupervisoryChannels_SupervisoryChannelKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpticalAmplifier_SupervisoryChannels_SupervisoryChannelKey) ProtoMessage() {}

func (x *OpticalAmplifier_SupervisoryChannels_SupervisoryChannelKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_optical_amplifier_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpticalAmplifier_SupervisoryChannels_SupervisoryChannelKey.ProtoReflect.Descriptor instead.
func (*OpticalAmplifier_SupervisoryChannels_SupervisoryChannelKey) Descriptor() ([]byte, []int) {
	return file_openconfig_optical_amplifier_proto_rawDescGZIP(), []int{0, 1, 1}
}

func (x *OpticalAmplifier_SupervisoryChannels_SupervisoryChannelKey) GetInterface() string {
	if x != nil {
		return x.Interface
	}
	return ""
}

func (x *OpticalAmplifier_SupervisoryChannels_SupervisoryChannelKey) GetSupervisoryChannel() *OpticalAmplifier_SupervisoryChannels_SupervisoryChannel {
	if x != nil {
		return x.SupervisoryChannel
	}
	return nil
}

type OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interface *ywrapper.StringValue `protobuf:"bytes,147399380,opt,name=interface,proto3" json:"interface,omitempty"`
}

func (x *OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_Config) Reset() {
	*x = OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_optical_amplifier_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_Config) ProtoMessage() {}

func (x *OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_optical_amplifier_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_Config.ProtoReflect.Descriptor instead.
func (*OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_optical_amplifier_proto_rawDescGZIP(), []int{0, 1, 0, 0}
}

func (x *OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_Config) GetInterface() *ywrapper.StringValue {
	if x != nil {
		return x.Interface
	}
	return nil
}

type OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InputPower       *OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_State_InputPower       `protobuf:"bytes,273167428,opt,name=input_power,json=inputPower,proto3" json:"input_power,omitempty"`
	Interface        *ywrapper.StringValue                                                           `protobuf:"bytes,295428929,opt,name=interface,proto3" json:"interface,omitempty"`
	LaserBiasCurrent *OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_State_LaserBiasCurrent `protobuf:"bytes,267426693,opt,name=laser_bias_current,json=laserBiasCurrent,proto3" json:"laser_bias_current,omitempty"`
	OutputFrequency  *ywrapper.UintValue                                                             `protobuf:"bytes,6690138,opt,name=output_frequency,json=outputFrequency,proto3" json:"output_frequency,omitempty"`
	OutputPower      *OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_State_OutputPower      `protobuf:"bytes,348784371,opt,name=output_power,json=outputPower,proto3" json:"output_power,omitempty"`
}

func (x *OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_State) Reset() {
	*x = OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_optical_amplifier_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_State) ProtoMessage() {}

func (x *OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_optical_amplifier_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_State.ProtoReflect.Descriptor instead.
func (*OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_State) Descriptor() ([]byte, []int) {
	return file_openconfig_optical_amplifier_proto_rawDescGZIP(), []int{0, 1, 0, 1}
}

func (x *OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_State) GetInputPower() *OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_State_InputPower {
	if x != nil {
		return x.InputPower
	}
	return nil
}

func (x *OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_State) GetInterface() *ywrapper.StringValue {
	if x != nil {
		return x.Interface
	}
	return nil
}

func (x *OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_State) GetLaserBiasCurrent() *OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_State_LaserBiasCurrent {
	if x != nil {
		return x.LaserBiasCurrent
	}
	return nil
}

func (x *OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_State) GetOutputFrequency() *ywrapper.UintValue {
	if x != nil {
		return x.OutputFrequency
	}
	return nil
}

func (x *OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_State) GetOutputPower() *OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_State_OutputPower {
	if x != nil {
		return x.OutputPower
	}
	return nil
}

type OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_State_InputPower struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avg      *ywrapper.Decimal64Value `protobuf:"bytes,217925853,opt,name=avg,proto3" json:"avg,omitempty"`
	Instant  *ywrapper.Decimal64Value `protobuf:"bytes,247179786,opt,name=instant,proto3" json:"instant,omitempty"`
	Interval *ywrapper.UintValue      `protobuf:"bytes,189599228,opt,name=interval,proto3" json:"interval,omitempty"`
	Max      *ywrapper.Decimal64Value `protobuf:"bytes,536112191,opt,name=max,proto3" json:"max,omitempty"`
	MaxTime  *ywrapper.UintValue      `protobuf:"bytes,183222531,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	Min      *ywrapper.Decimal64Value `protobuf:"bytes,401891265,opt,name=min,proto3" json:"min,omitempty"`
	MinTime  *ywrapper.UintValue      `protobuf:"bytes,442706009,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
}

func (x *OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_State_InputPower) Reset() {
	*x = OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_State_InputPower{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_optical_amplifier_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_State_InputPower) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_State_InputPower) ProtoMessage() {}

func (x *OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_State_InputPower) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_optical_amplifier_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_State_InputPower.ProtoReflect.Descriptor instead.
func (*OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_State_InputPower) Descriptor() ([]byte, []int) {
	return file_openconfig_optical_amplifier_proto_rawDescGZIP(), []int{0, 1, 0, 1, 0}
}

func (x *OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_State_InputPower) GetAvg() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Avg
	}
	return nil
}

func (x *OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_State_InputPower) GetInstant() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Instant
	}
	return nil
}

func (x *OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_State_InputPower) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_State_InputPower) GetMax() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_State_InputPower) GetMaxTime() *ywrapper.UintValue {
	if x != nil {
		return x.MaxTime
	}
	return nil
}

func (x *OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_State_InputPower) GetMin() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_State_InputPower) GetMinTime() *ywrapper.UintValue {
	if x != nil {
		return x.MinTime
	}
	return nil
}

type OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_State_LaserBiasCurrent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avg      *ywrapper.Decimal64Value `protobuf:"bytes,354513576,opt,name=avg,proto3" json:"avg,omitempty"`
	Instant  *ywrapper.Decimal64Value `protobuf:"bytes,237850003,opt,name=instant,proto3" json:"instant,omitempty"`
	Interval *ywrapper.UintValue      `protobuf:"bytes,285212819,opt,name=interval,proto3" json:"interval,omitempty"`
	Max      *ywrapper.Decimal64Value `protobuf:"bytes,171931370,opt,name=max,proto3" json:"max,omitempty"`
	MaxTime  *ywrapper.UintValue      `protobuf:"bytes,300176608,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	Min      *ywrapper.Decimal64Value `protobuf:"bytes,306152260,opt,name=min,proto3" json:"min,omitempty"`
	MinTime  *ywrapper.UintValue      `protobuf:"bytes,393363630,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
}

func (x *OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_State_LaserBiasCurrent) Reset() {
	*x = OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_State_LaserBiasCurrent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_optical_amplifier_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_State_LaserBiasCurrent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_State_LaserBiasCurrent) ProtoMessage() {
}

func (x *OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_State_LaserBiasCurrent) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_optical_amplifier_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_State_LaserBiasCurrent.ProtoReflect.Descriptor instead.
func (*OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_State_LaserBiasCurrent) Descriptor() ([]byte, []int) {
	return file_openconfig_optical_amplifier_proto_rawDescGZIP(), []int{0, 1, 0, 1, 1}
}

func (x *OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_State_LaserBiasCurrent) GetAvg() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Avg
	}
	return nil
}

func (x *OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_State_LaserBiasCurrent) GetInstant() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Instant
	}
	return nil
}

func (x *OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_State_LaserBiasCurrent) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_State_LaserBiasCurrent) GetMax() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_State_LaserBiasCurrent) GetMaxTime() *ywrapper.UintValue {
	if x != nil {
		return x.MaxTime
	}
	return nil
}

func (x *OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_State_LaserBiasCurrent) GetMin() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_State_LaserBiasCurrent) GetMinTime() *ywrapper.UintValue {
	if x != nil {
		return x.MinTime
	}
	return nil
}

type OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_State_OutputPower struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avg      *ywrapper.Decimal64Value `protobuf:"bytes,381268042,opt,name=avg,proto3" json:"avg,omitempty"`
	Instant  *ywrapper.Decimal64Value `protobuf:"bytes,134280905,opt,name=instant,proto3" json:"instant,omitempty"`
	Interval *ywrapper.UintValue      `protobuf:"bytes,416178893,opt,name=interval,proto3" json:"interval,omitempty"`
	Max      *ywrapper.Decimal64Value `protobuf:"bytes,131575260,opt,name=max,proto3" json:"max,omitempty"`
	MaxTime  *ywrapper.UintValue      `protobuf:"bytes,166660998,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	Min      *ywrapper.Decimal64Value `protobuf:"bytes,534225250,opt,name=min,proto3" json:"min,omitempty"`
	MinTime  *ywrapper.UintValue      `protobuf:"bytes,94152280,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
}

func (x *OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_State_OutputPower) Reset() {
	*x = OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_State_OutputPower{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_optical_amplifier_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_State_OutputPower) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_State_OutputPower) ProtoMessage() {}

func (x *OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_State_OutputPower) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_optical_amplifier_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_State_OutputPower.ProtoReflect.Descriptor instead.
func (*OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_State_OutputPower) Descriptor() ([]byte, []int) {
	return file_openconfig_optical_amplifier_proto_rawDescGZIP(), []int{0, 1, 0, 1, 2}
}

func (x *OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_State_OutputPower) GetAvg() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Avg
	}
	return nil
}

func (x *OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_State_OutputPower) GetInstant() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Instant
	}
	return nil
}

func (x *OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_State_OutputPower) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_State_OutputPower) GetMax() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_State_OutputPower) GetMaxTime() *ywrapper.UintValue {
	if x != nil {
		return x.MaxTime
	}
	return nil
}

func (x *OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_State_OutputPower) GetMin() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_State_OutputPower) GetMinTime() *ywrapper.UintValue {
	if x != nil {
		return x.MinTime
	}
	return nil
}

var File_openconfig_optical_amplifier_proto protoreflect.FileDescriptor

var file_openconfig_optical_amplifier_proto_rawDesc = []byte{
	0x0a, 0x22, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x1a, 0x0e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0a, 0x79, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa3, 0x9f, 0x01, 0x0a, 0x10, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x41, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x6d, 0x0a, 0x0a, 0x61, 0x6d,
	0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x83, 0xaa, 0xbc, 0xb1, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x2e, 0x41, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x42, 0x20, 0x82, 0x41, 0x1d,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x52, 0x0a, 0x61,
	0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x92, 0x01, 0x0a, 0x14, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x18, 0x9b, 0xe9, 0xdb, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x41, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76,
	0x69, 0x73, 0x6f, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x42, 0x2a, 0x82,
	0x41, 0x27, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79,
	0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x13, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x1a, 0x93,
	0x76, 0x0a, 0x0a, 0x41, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x81, 0x01,
	0x0a, 0x09, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0xd7, 0x80, 0xe6, 0x7e,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x2e, 0x41, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x41, 0x6d,
	0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x42, 0x2a, 0x82, 0x41, 0x27, 0x2f,
	0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d, 0x70,
	0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x09, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x1a, 0xd9, 0x73, 0x0a, 0x09, 0x41, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x86, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xc8, 0x83, 0xc4, 0x16, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x2e, 0x41, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x41, 0x6d, 0x70,
	0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x31, 0x82,
	0x41, 0x2e, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f,
	0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x83, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0xe1, 0xac, 0xf4, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x41, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x41, 0x6d, 0x70, 0x6c, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x41, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x30, 0x82, 0x41, 0x2d, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70,
	0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xdb,
	0x0c, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x94, 0x01, 0x0a, 0x08, 0x61, 0x6d,
	0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0xb5, 0x86, 0xd3, 0x65, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x6d,
	0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4f, 0x50, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x41, 0x4d,
	0x50, 0x4c, 0x49, 0x46, 0x49, 0x45, 0x52, 0x4d, 0x4f, 0x44, 0x45, 0x42, 0x3a, 0x82, 0x41, 0x37,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d,
	0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61,
	0x6d, 0x70, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x61, 0x6d, 0x70, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x6c, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xfa, 0xc9, 0x81, 0x83,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f,
	0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d, 0x70,
	0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0xae,
	0x01, 0x0a, 0x12, 0x66, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0xe4, 0x97, 0xcc, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x36, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x6d,
	0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x46, 0x49, 0x42, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45,
	0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x6f, 0x70, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x61,
	0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x66, 0x69, 0x62, 0x65, 0x72,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x2d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x10, 0x66,
	0x69, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12,
	0x90, 0x01, 0x0a, 0x0a, 0x67, 0x61, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0xc2,
	0xf5, 0xd1, 0xba, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x47, 0x41, 0x49, 0x4e, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x42, 0x3c, 0x82, 0x41, 0x39, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d, 0x70, 0x6c,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x67, 0x61, 0x69,
	0x6e, 0x2d, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x67, 0x61, 0x69, 0x6e, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x73, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x67, 0x61, 0x69, 0x6e, 0x18, 0xf5,
	0x87, 0xd5, 0xbf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x3a, 0x82, 0x41, 0x37, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d,
	0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x67, 0x61, 0x69, 0x6e, 0x52, 0x07,
	0x6d, 0x61, 0x78, 0x47, 0x61, 0x69, 0x6e, 0x12, 0x8a, 0x01, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0xbf, 0xaf, 0xdb,
	0x9a, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d,
	0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x73, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x12, 0x72, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x67, 0x61, 0x69, 0x6e,
	0x18, 0xeb, 0xa2, 0xf0, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x3a, 0x82, 0x41, 0x37, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x69, 0x6e, 0x2d, 0x67, 0x61, 0x69, 0x6e, 0x52,
	0x07, 0x6d, 0x69, 0x6e, 0x47, 0x61, 0x69, 0x6e, 0x12, 0x64, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0xf2, 0x95, 0xa2, 0x71, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d,
	0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x73, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x7c,
	0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x67, 0x61, 0x69, 0x6e, 0x18, 0x98, 0xe4,
	0x98, 0x89, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x3d, 0x82, 0x41, 0x3a, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61,
	0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2d, 0x67, 0x61, 0x69, 0x6e,
	0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x47, 0x61, 0x69, 0x6e, 0x12, 0x8a, 0x01, 0x0a,
	0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x67, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6c,
	0x74, 0x18, 0xf8, 0xde, 0x83, 0xff, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70,
	0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2d,
	0x67, 0x61, 0x69, 0x6e, 0x2d, 0x74, 0x69, 0x6c, 0x74, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x47, 0x61, 0x69, 0x6e, 0x54, 0x69, 0x6c, 0x74, 0x12, 0x93, 0x01, 0x0a, 0x13, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x18, 0xea, 0xaf, 0x9b, 0xda, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70,
	0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2d,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x11, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12,
	0x8a, 0x01, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0xaf, 0xde, 0x97, 0xed, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x41, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4f, 0x50, 0x54, 0x49, 0x43, 0x41,
	0x4c, 0x41, 0x4d, 0x50, 0x4c, 0x49, 0x46, 0x49, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x42, 0x36,
	0x82, 0x41, 0x33, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73,
	0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0xde, 0x64, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xa5, 0x01, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x75, 0x61,
	0x6c, 0x5f, 0x67, 0x61, 0x69, 0x6e, 0x18, 0xb2, 0x97, 0x85, 0xcc, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x42, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x41,
	0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x41, 0x6d, 0x70, 0x6c, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c,
	0x47, 0x61, 0x69, 0x6e, 0x42, 0x3c, 0x82, 0x41, 0x39, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x2d, 0x67, 0x61,
	0x69, 0x6e, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x47, 0x61, 0x69, 0x6e, 0x12, 0xb7,
	0x01, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x67, 0x61, 0x69, 0x6e, 0x5f, 0x74,
	0x69, 0x6c, 0x74, 0x18, 0x8e, 0xc4, 0xc3, 0xc5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x41, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x41, 0x6d, 0x70, 0x6c,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x41, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x47, 0x61, 0x69,
	0x6e, 0x54, 0x69, 0x6c, 0x74, 0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70,
	0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x2d, 0x67,
	0x61, 0x69, 0x6e, 0x2d, 0x74, 0x69, 0x6c, 0x74, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c,
	0x47, 0x61, 0x69, 0x6e, 0x54, 0x69, 0x6c, 0x74, 0x12, 0x94, 0x01, 0x0a, 0x08, 0x61, 0x6d, 0x70,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x8e, 0xcb, 0xe8, 0x95, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x6d,
	0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4f, 0x50, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x41, 0x4d,
	0x50, 0x4c, 0x49, 0x46, 0x49, 0x45, 0x52, 0x4d, 0x4f, 0x44, 0x45, 0x42, 0x39, 0x82, 0x41, 0x36,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d,
	0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x6d,
	0x70, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x61, 0x6d, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x72, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x81, 0x91, 0xa0,
	0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3a, 0x82, 0x41,
	0x37, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x61,
	0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x12, 0x78, 0x0a, 0x0b, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0xef, 0xe2, 0xca, 0xfc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x3c, 0x82, 0x41, 0x39, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x0a, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x6b, 0x0a,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x97, 0xad, 0xff, 0xc9, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x38, 0x82, 0x41, 0x35, 0x2f, 0x6f, 0x70, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x61,
	0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0xad, 0x01, 0x0a, 0x12, 0x66,
	0x69, 0x62, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0xdb, 0xff, 0xf5, 0xc4, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x6d, 0x70, 0x6c, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x46, 0x49, 0x42, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x50, 0x52, 0x4f, 0x46,
	0x49, 0x4c, 0x45, 0x42, 0x43, 0x82, 0x41, 0x40, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x66, 0x69, 0x62, 0x65, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65,
	0x2d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x10, 0x66, 0x69, 0x62, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x8f, 0x01, 0x0a, 0x0a, 0x67,
	0x61, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0xd9, 0x9f, 0xfc, 0xd7, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x41, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x47, 0x41, 0x49, 0x4e, 0x52,
	0x41, 0x4e, 0x47, 0x45, 0x42, 0x3b, 0x82, 0x41, 0x38, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x67, 0x61, 0x69, 0x6e, 0x2d, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x09, 0x67, 0x61, 0x69, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x7b, 0x0a, 0x0c,
	0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0xc7, 0x81, 0xe2,
	0xfd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3d, 0x82,
	0x41, 0x3a, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f,
	0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0b, 0x69, 0x6e,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x12, 0xbd, 0x01, 0x0a, 0x12, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x63, 0x5f, 0x62, 0x61, 0x6e, 0x64,
	0x18, 0xec, 0xd4, 0xa0, 0xf5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x41,
	0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x41, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x73, 0x2e, 0x41, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x42,
	0x61, 0x6e, 0x64, 0x42, 0x43, 0x82, 0x41, 0x40, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x2d, 0x63, 0x2d, 0x62, 0x61, 0x6e, 0x64, 0x52, 0x0f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x43, 0x42, 0x61, 0x6e, 0x64, 0x12, 0xbd, 0x01, 0x0a, 0x12, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6c, 0x5f, 0x62, 0x61, 0x6e, 0x64,
	0x18, 0xe1, 0xf4, 0xfd, 0xac, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x41,
	0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x41, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x73, 0x2e, 0x41, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x42,
	0x61, 0x6e, 0x64, 0x42, 0x43, 0x82, 0x41, 0x40, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x2d, 0x6c, 0x2d, 0x62, 0x61, 0x6e, 0x64, 0x52, 0x0f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x4c, 0x42, 0x61, 0x6e, 0x64, 0x12, 0xbb, 0x01, 0x0a, 0x11, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0xf5, 0x99, 0xa5, 0x8a, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x6d,
	0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x41, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x73, 0x2e, 0x41, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d,
	0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x2d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x0f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0xbf, 0x01, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x65,
	0x72, 0x5f, 0x62, 0x69, 0x61, 0x73, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x91,
	0xa8, 0xc2, 0xad, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x6d, 0x70,
	0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x41, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x73, 0x2e, 0x41, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x4c, 0x61, 0x73, 0x65, 0x72, 0x42, 0x69, 0x61, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x42, 0x43, 0x82, 0x41, 0x40, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d,
	0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x2d, 0x62, 0x69, 0x61, 0x73, 0x2d,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x42, 0x69,
	0x61, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x72, 0x0a, 0x08, 0x6d, 0x61, 0x78,
	0x5f, 0x67, 0x61, 0x69, 0x6e, 0x18, 0xd2, 0xf5, 0xf9, 0xa7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d, 0x70, 0x6c,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x61, 0x78, 0x2d,
	0x67, 0x61, 0x69, 0x6e, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x47, 0x61, 0x69, 0x6e, 0x12, 0x89, 0x01,
	0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x18, 0xcc, 0xad, 0xf8, 0xfa, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d,
	0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x71, 0x0a, 0x08, 0x6d, 0x69, 0x6e,
	0x5f, 0x67, 0x61, 0x69, 0x6e, 0x18, 0xc8, 0xeb, 0xf4, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x6f, 0x70,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f,
	0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x69, 0x6e, 0x2d, 0x67,
	0x61, 0x69, 0x6e, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x47, 0x61, 0x69, 0x6e, 0x12, 0x64, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x95, 0xef, 0x98, 0xc4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70,
	0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0xc1, 0x01, 0x0a, 0x13, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x18, 0x8d, 0xc1, 0x6f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x49, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x2e, 0x41, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x41, 0x6d, 0x70, 0x6c,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4c, 0x6f, 0x73, 0x73, 0x42, 0x44, 0x82,
	0x41, 0x41, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f,
	0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x2d, 0x6c,
	0x6f, 0x73, 0x73, 0x52, 0x11, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0xc1, 0x01, 0x0a, 0x13, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x63, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x18, 0xe1,
	0xe1, 0xc1, 0xfe, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x6d, 0x70,
	0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x41, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x73, 0x2e, 0x41, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x42, 0x61,
	0x6e, 0x64, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d,
	0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x2d, 0x63, 0x2d, 0x62, 0x61, 0x6e, 0x64, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x42, 0x61, 0x6e, 0x64, 0x12, 0xc0, 0x01, 0x0a, 0x13, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6c, 0x5f, 0x62, 0x61,
	0x6e, 0x64, 0x18, 0xec, 0xc1, 0xe4, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x41, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x41, 0x6d, 0x70, 0x6c, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x73, 0x2e, 0x41, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x4c, 0x42, 0x61, 0x6e, 0x64, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70,
	0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x2d, 0x6c, 0x2d, 0x62, 0x61, 0x6e, 0x64, 0x52, 0x10, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x42, 0x61, 0x6e, 0x64, 0x12, 0xbe, 0x01,
	0x0a, 0x12, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0xf6, 0x96, 0xa1, 0x51, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x41, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x41, 0x6d, 0x70, 0x6c,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x41, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x43, 0x82, 0x41, 0x40, 0x2f, 0x6f, 0x70, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x61,
	0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x10, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x7b,
	0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x67, 0x61, 0x69, 0x6e, 0x18, 0xa1, 0xe1,
	0xbe, 0xb6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x3c, 0x82, 0x41, 0x39, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61,
	0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2d, 0x67, 0x61, 0x69, 0x6e, 0x52,
	0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x47, 0x61, 0x69, 0x6e, 0x12, 0x88, 0x01, 0x0a, 0x10,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x67, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6c, 0x74,
	0x18, 0x9b, 0xee, 0xfa, 0x78, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2d, 0x67, 0x61, 0x69,
	0x6e, 0x2d, 0x74, 0x69, 0x6c, 0x74, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x47, 0x61,
	0x69, 0x6e, 0x54, 0x69, 0x6c, 0x74, 0x12, 0x91, 0x01, 0x0a, 0x13, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0xb3,
	0x95, 0xd5, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61,
	0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2d, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x88, 0x01, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x94, 0x83, 0xd5, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x6d, 0x70, 0x6c, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x4f, 0x50, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x41, 0x4d, 0x50, 0x4c, 0x49,
	0x46, 0x49, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x6f, 0x70,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f,
	0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0xcc, 0x06, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c,
	0x47, 0x61, 0x69, 0x6e, 0x12, 0x6f, 0x0a, 0x03, 0x61, 0x76, 0x67, 0x18, 0xcf, 0xb6, 0xea, 0x4a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x40,
	0x82, 0x41, 0x3d, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73,
	0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x2d, 0x67, 0x61, 0x69, 0x6e, 0x2f, 0x61, 0x76, 0x67,
	0x52, 0x03, 0x61, 0x76, 0x67, 0x12, 0x7b, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x18, 0xb8, 0xe0, 0x95, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x2d, 0x67, 0x61, 0x69,
	0x6e, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x12, 0x79, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0xc6,
	0xb6, 0xde, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x45, 0x82, 0x41,
	0x42, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x61,
	0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61,
	0x63, 0x74, 0x75, 0x61, 0x6c, 0x2d, 0x67, 0x61, 0x69, 0x6e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x6f, 0x0a,
	0x03, 0x6d, 0x61, 0x78, 0x18, 0xa1, 0xd9, 0xc5, 0x42, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x6f, 0x70, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x61,
	0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c,
	0x2d, 0x67, 0x61, 0x69, 0x6e, 0x2f, 0x6d, 0x61, 0x78, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x78,
	0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xb9, 0xd3, 0xd3, 0x18, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x6f, 0x70,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f,
	0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x63, 0x74, 0x75, 0x61,
	0x6c, 0x2d, 0x67, 0x61, 0x69, 0x6e, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52,
	0x07, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x70, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18,
	0x9f, 0xf2, 0xc5, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x2d, 0x67, 0x61, 0x69,
	0x6e, 0x2f, 0x6d, 0x69, 0x6e, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x78, 0x0a, 0x08, 0x6d, 0x69,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xe3, 0xc5, 0x8a, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x2d, 0x67, 0x61,
	0x69, 0x6e, 0x2f, 0x6d, 0x69, 0x6e, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x69, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x1a, 0xf8, 0x06, 0x0a, 0x0e, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x47,
	0x61, 0x69, 0x6e, 0x54, 0x69, 0x6c, 0x74, 0x12, 0x75, 0x0a, 0x03, 0x61, 0x76, 0x67, 0x18, 0x83,
	0x86, 0xa6, 0xa3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d,
	0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x2d, 0x67, 0x61, 0x69, 0x6e,
	0x2d, 0x74, 0x69, 0x6c, 0x74, 0x2f, 0x61, 0x76, 0x67, 0x52, 0x03, 0x61, 0x76, 0x67, 0x12, 0x81,
	0x01, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0xfc, 0xdb, 0xd8, 0xad, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x49,
	0x82, 0x41, 0x46, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73,
	0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x2d, 0x67, 0x61, 0x69, 0x6e, 0x2d, 0x74, 0x69, 0x6c,
	0x74, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x12, 0x7f, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0xca,
	0xeb, 0xfc, 0xd5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4a, 0x82,
	0x41, 0x47, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f,
	0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x2d, 0x67, 0x61, 0x69, 0x6e, 0x2d, 0x74, 0x69, 0x6c, 0x74,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x12, 0x75, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0xad, 0x98, 0xb4, 0xda, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x45,
	0x82, 0x41, 0x42, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73,
	0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x2d, 0x67, 0x61, 0x69, 0x6e, 0x2d, 0x74, 0x69, 0x6c,
	0x74, 0x2f, 0x6d, 0x61, 0x78, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x7d, 0x0a, 0x08, 0x6d, 0x61,
	0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xbd, 0x93, 0xa3, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x4a, 0x82, 0x41, 0x47, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x2d, 0x67, 0x61,
	0x69, 0x6e, 0x2d, 0x74, 0x69, 0x6c, 0x74, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x74, 0x69, 0x6d, 0x65,
	0x52, 0x07, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x74, 0x0a, 0x03, 0x6d, 0x69, 0x6e,
	0x18, 0x83, 0xb1, 0xb4, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x2d, 0x67, 0x61, 0x69,
	0x6e, 0x2d, 0x74, 0x69, 0x6c, 0x74, 0x2f, 0x6d, 0x69, 0x6e, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12,
	0x7e, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xef, 0xdc, 0xa2, 0xff,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4a, 0x82, 0x41, 0x47, 0x2f,
	0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d, 0x70,
	0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x63, 0x74,
	0x75, 0x61, 0x6c, 0x2d, 0x67, 0x61, 0x69, 0x6e, 0x2d, 0x74, 0x69, 0x6c, 0x74, 0x2f, 0x6d, 0x69,
	0x6e, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x1a,
	0x8a, 0x07, 0x0a, 0x0f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x42,
	0x61, 0x6e, 0x64, 0x12, 0x77, 0x0a, 0x03, 0x61, 0x76, 0x67, 0x18, 0x95, 0xc2, 0xf3, 0xdc, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x47,
	0x82, 0x41, 0x44, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73,
	0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x63, 0x2d, 0x62,
	0x61, 0x6e, 0x64, 0x2f, 0x61, 0x76, 0x67, 0x52, 0x03, 0x61, 0x76, 0x67, 0x12, 0x83, 0x01, 0x0a,
	0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x92, 0xd3, 0xe6, 0xe9, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4b, 0x82, 0x41,
	0x48, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x61,
	0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x63, 0x2d, 0x62, 0x61, 0x6e,
	0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x12, 0x80, 0x01, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0xf4, 0xc4, 0xc5, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4c, 0x82,
	0x41, 0x49, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f,
	0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x63, 0x2d, 0x62, 0x61,
	0x6e, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x76, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x97, 0xa8, 0xec,
	0x75, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x47, 0x82, 0x41, 0x44, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70,
	0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x73, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x63, 0x2d,
	0x62, 0x61, 0x6e, 0x64, 0x2f, 0x6d, 0x61, 0x78, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x80, 0x01,
	0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x9b, 0xfe, 0xa2, 0x83, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4c, 0x82, 0x41, 0x49, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d, 0x70, 0x6c,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x63, 0x2d, 0x62, 0x61, 0x6e, 0x64, 0x2f, 0x6d,
	0x61, 0x78, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x77, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0xe9, 0xc2, 0xec, 0xb5, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x47, 0x82, 0x41, 0x44,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d,
	0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x63, 0x2d, 0x62, 0x61, 0x6e, 0x64,
	0x2f, 0x6d, 0x69, 0x6e, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x80, 0x01, 0x0a, 0x08, 0x6d, 0x69,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xc1, 0x8c, 0xbe, 0x95, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4c, 0x82, 0x41, 0x49, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70,
	0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x2d, 0x63, 0x2d, 0x62, 0x61, 0x6e, 0x64, 0x2f, 0x6d, 0x69, 0x6e, 0x2d, 0x74,
	0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x8b, 0x07, 0x0a,
	0x0f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x42, 0x61, 0x6e, 0x64,
	0x12, 0x77, 0x0a, 0x03, 0x61, 0x76, 0x67, 0x18, 0xfc, 0x8f, 0xde, 0x8c, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x47, 0x82, 0x41, 0x44,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d,
	0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x6c, 0x2d, 0x62, 0x61, 0x6e, 0x64,
	0x2f, 0x61, 0x76, 0x67, 0x52, 0x03, 0x61, 0x76, 0x67, 0x12, 0x82, 0x01, 0x0a, 0x07, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0xa7, 0xaa, 0x83, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4b, 0x82, 0x41, 0x48, 0x2f, 0x6f, 0x70,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f,
	0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x6c, 0x2d, 0x62, 0x61, 0x6e, 0x64, 0x2f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x81,
	0x01, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0xb7, 0xb5, 0xe4, 0xa2,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4c, 0x82, 0x41, 0x49, 0x2f,
	0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d, 0x70,
	0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x6c, 0x2d, 0x62, 0x61, 0x6e, 0x64, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x77, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x96, 0xac, 0x82, 0xf5, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x47, 0x82,
	0x41, 0x44, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f,
	0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x6c, 0x2d, 0x62, 0x61,
	0x6e, 0x64, 0x2f, 0x6d, 0x61, 0x78, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x80, 0x01, 0x0a, 0x08,
	0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x94, 0xf9, 0xef, 0x90, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4c, 0x82, 0x41, 0x49, 0x2f, 0x6f, 0x70, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x61,
	0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2d,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x6c, 0x2d, 0x62, 0x61, 0x6e, 0x64, 0x2f, 0x6d, 0x61, 0x78,
	0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x77,
	0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0xb8, 0x93, 0x82, 0xb5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x47, 0x82, 0x41, 0x44, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d, 0x70, 0x6c,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x6c, 0x2d, 0x62, 0x61, 0x6e, 0x64, 0x2f, 0x6d,
	0x69, 0x6e, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x80, 0x01, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x9a, 0xb9, 0xec, 0x9f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x4c, 0x82, 0x41, 0x49, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x2d, 0x6c, 0x2d, 0x62, 0x61, 0x6e, 0x64, 0x2f, 0x6d, 0x69, 0x6e, 0x2d, 0x74, 0x69, 0x6d,
	0x65, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x80, 0x07, 0x0a, 0x0f, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x75,
	0x0a, 0x03, 0x61, 0x76, 0x67, 0x18, 0xf8, 0xf5, 0xff, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x6f, 0x70,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f,
	0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2f, 0x61, 0x76, 0x67,
	0x52, 0x03, 0x61, 0x76, 0x67, 0x12, 0x81, 0x01, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x18, 0xa3, 0x8f, 0xcd, 0x7c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x4a, 0x82, 0x41, 0x47, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x2d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x80, 0x01, 0x0a, 0x08, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x83, 0x9f, 0xa2, 0xef, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4b, 0x82, 0x41, 0x48, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70,
	0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x2d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x76, 0x0a, 0x03,
	0x6d, 0x61, 0x78, 0x18, 0xba, 0xe1, 0xf8, 0xdc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x6f, 0x70, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x61,
	0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2d,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2f, 0x6d, 0x61, 0x78, 0x52,
	0x03, 0x6d, 0x61, 0x78, 0x12, 0x7f, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0xb0, 0xda, 0xd6, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x4b, 0x82, 0x41, 0x48, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70,
	0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x73, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x61,
	0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x75, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0xb4, 0xfa, 0xf8,
	0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x46, 0x82, 0x41, 0x43, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70,
	0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x73, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x2f, 0x6d, 0x69, 0x6e, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x7f, 0x0a, 0x08,
	0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xde, 0xf0, 0xc9, 0xff, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4b, 0x82, 0x41, 0x48, 0x2f, 0x6f, 0x70, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x61,
	0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2d,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2f, 0x6d, 0x69, 0x6e, 0x2d,
	0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x89, 0x07,
	0x0a, 0x10, 0x4c, 0x61, 0x73, 0x65, 0x72, 0x42, 0x69, 0x61, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x12, 0x76, 0x0a, 0x03, 0x61, 0x76, 0x67, 0x18, 0xcc, 0xc6, 0xe1, 0x5f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x47, 0x82, 0x41,
	0x44, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x61,
	0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c,
	0x61, 0x73, 0x65, 0x72, 0x2d, 0x62, 0x69, 0x61, 0x73, 0x2d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x2f, 0x61, 0x76, 0x67, 0x52, 0x03, 0x61, 0x76, 0x67, 0x12, 0x83, 0x01, 0x0a, 0x07, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0xb7, 0xd7, 0x82, 0xff, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4b, 0x82, 0x41, 0x48, 0x2f,
	0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d, 0x70,
	0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x61, 0x73,
	0x65, 0x72, 0x2d, 0x62, 0x69, 0x61, 0x73, 0x2d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x12, 0x80, 0x01, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0xe7, 0x99,
	0xf7, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4c, 0x82, 0x41, 0x49,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d,
	0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x61,
	0x73, 0x65, 0x72, 0x2d, 0x62, 0x69, 0x61, 0x73, 0x2d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x12, 0x77, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0xe6, 0xa5, 0x8b, 0xc8, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x47,
	0x82, 0x41, 0x44, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73,
	0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x2d, 0x62, 0x69, 0x61, 0x73, 0x2d, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x2f, 0x6d, 0x61, 0x78, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x7f, 0x0a, 0x08,
	0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xe4, 0xc1, 0xcd, 0x27, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4c, 0x82, 0x41, 0x49, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d,
	0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x2d, 0x62,
	0x69, 0x61, 0x73, 0x2d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2f, 0x6d, 0x61, 0x78, 0x2d,
	0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x77, 0x0a,
	0x03, 0x6d, 0x69, 0x6e, 0x18, 0xe8, 0x8c, 0x8b, 0x88, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x47, 0x82, 0x41, 0x44, 0x2f, 0x6f, 0x70,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f,
	0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x61, 0x73, 0x65, 0x72,
	0x2d, 0x62, 0x69, 0x61, 0x73, 0x2d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2f, 0x6d, 0x69,
	0x6e, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x80, 0x01, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x8a, 0xd8, 0x8d, 0x95, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x4c, 0x82, 0x41, 0x49, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d,
	0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x2d, 0x62, 0x69, 0x61, 0x73, 0x2d,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2f, 0x6d, 0x69, 0x6e, 0x2d, 0x74, 0x69, 0x6d, 0x65,
	0x52, 0x07, 0x6d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x91, 0x07, 0x0a, 0x11, 0x4f, 0x70,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4c, 0x6f, 0x73, 0x73, 0x12,
	0x77, 0x0a, 0x03, 0x61, 0x76, 0x67, 0x18, 0xe0, 0xe4, 0xe4, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x48, 0x82, 0x41, 0x45, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d, 0x70, 0x6c,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x2d, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x2d, 0x6c, 0x6f, 0x73, 0x73, 0x2f,
	0x61, 0x76, 0x67, 0x52, 0x03, 0x61, 0x76, 0x67, 0x12, 0x83, 0x01, 0x0a, 0x07, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x18, 0xfb, 0x9e, 0x98, 0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4c, 0x82, 0x41, 0x49, 0x2f, 0x6f, 0x70, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x61,
	0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x2d, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x2d, 0x6c, 0x6f, 0x73, 0x73, 0x2f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x82,
	0x01, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x8b, 0xd2, 0x81, 0xa6,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4d, 0x82, 0x41, 0x4a, 0x2f,
	0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d, 0x70,
	0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x2d, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x2d, 0x6c, 0x6f, 0x73, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x12, 0x78, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0xc2, 0x8b, 0xbb, 0xb2, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x48,
	0x82, 0x41, 0x45, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73,
	0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x2d,
	0x6c, 0x6f, 0x73, 0x73, 0x2f, 0x6d, 0x61, 0x78, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x80, 0x01,
	0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xb8, 0xe0, 0xae, 0x4b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4d, 0x82, 0x41, 0x4a, 0x2f, 0x6f, 0x70,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f,
	0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x2d, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x2d, 0x6c, 0x6f, 0x73, 0x73, 0x2f, 0x6d,
	0x61, 0x78, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x77, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0xcc, 0xf2, 0xba, 0x72, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x48, 0x82, 0x41, 0x45, 0x2f,
	0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d, 0x70,
	0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x2d, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x2d, 0x6c, 0x6f, 0x73, 0x73,
	0x2f, 0x6d, 0x69, 0x6e, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x81, 0x01, 0x0a, 0x08, 0x6d, 0x69,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xf6, 0xdd, 0xdf, 0xaf, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4d, 0x82, 0x41, 0x4a, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70,
	0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x2d, 0x6c, 0x6f, 0x73, 0x73, 0x2f, 0x6d, 0x69, 0x6e, 0x2d,
	0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x8e, 0x07,
	0x0a, 0x10, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x42, 0x61,
	0x6e, 0x64, 0x12, 0x77, 0x0a, 0x03, 0x61, 0x76, 0x67, 0x18, 0xfc, 0xcc, 0x85, 0x4c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x48, 0x82, 0x41,
	0x45, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x61,
	0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x63, 0x2d, 0x62, 0x61,
	0x6e, 0x64, 0x2f, 0x61, 0x76, 0x67, 0x52, 0x03, 0x61, 0x76, 0x67, 0x12, 0x83, 0x01, 0x0a, 0x07,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0xa7, 0xb7, 0xa8, 0x4a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4c, 0x82, 0x41, 0x49, 0x2f,
	0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d, 0x70,
	0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x63, 0x2d, 0x62, 0x61, 0x6e, 0x64,
	0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x12, 0x81, 0x01, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0xb7,
	0xac, 0xcc, 0x6d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4d, 0x82, 0x41,
	0x4a, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x61,
	0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x63, 0x2d, 0x62, 0x61,
	0x6e, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x78, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x96, 0xe9, 0xa9,
	0xb4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x48, 0x82, 0x41, 0x45, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d,
	0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x73, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d,
	0x63, 0x2d, 0x62, 0x61, 0x6e, 0x64, 0x2f, 0x6d, 0x61, 0x78, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12,
	0x80, 0x01, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x94, 0xf0, 0xd7,
	0x5b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4d, 0x82, 0x41, 0x4a, 0x2f,
	0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d, 0x70,
	0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x63, 0x2d, 0x62, 0x61, 0x6e, 0x64,
	0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x77, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0xb8, 0xd0, 0xa9, 0x74, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x48, 0x82, 0x41,
	0x45, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x61,
	0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x63, 0x2d, 0x62, 0x61,
	0x6e, 0x64, 0x2f, 0x6d, 0x69, 0x6e, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x80, 0x01, 0x0a, 0x08,
	0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x9a, 0xb0, 0xd4, 0x6a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4d, 0x82, 0x41, 0x4a, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d,
	0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x63, 0x2d, 0x62, 0x61, 0x6e, 0x64, 0x2f, 0x6d, 0x69, 0x6e,
	0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x90,
	0x07, 0x0a, 0x10, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x42,
	0x61, 0x6e, 0x64, 0x12, 0x78, 0x0a, 0x03, 0x61, 0x76, 0x67, 0x18, 0x95, 0xff, 0x9a, 0x9c, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x48,
	0x82, 0x41, 0x45, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73,
	0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x6c, 0x2d,
	0x62, 0x61, 0x6e, 0x64, 0x2f, 0x61, 0x76, 0x67, 0x52, 0x03, 0x61, 0x76, 0x67, 0x12, 0x84, 0x01,
	0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x92, 0xe0, 0x8b, 0xfc, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4c, 0x82,
	0x41, 0x49, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f,
	0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x6c, 0x2d, 0x62,
	0x61, 0x6e, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x07, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x12, 0x82, 0x01, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0xf4, 0xbb, 0xad, 0xe5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x4d, 0x82, 0x41, 0x4a, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d,
	0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x73, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d,
	0x6c, 0x2d, 0x62, 0x61, 0x6e, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52,
	0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x77, 0x0a, 0x03, 0x6d, 0x61, 0x78,
	0x18, 0x97, 0xe5, 0x93, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x48, 0x82, 0x41, 0x45, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x2d, 0x6c, 0x2d, 0x62, 0x61, 0x6e, 0x64, 0x2f, 0x6d, 0x61, 0x78, 0x52, 0x03, 0x6d,
	0x61, 0x78, 0x12, 0x80, 0x01, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x9b, 0xf5, 0x8a, 0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4d, 0x82,
	0x41, 0x4a, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f,
	0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x6c, 0x2d, 0x62,
	0x61, 0x6e, 0x64, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x61,
	0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x77, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0xe9, 0xff, 0x93,
	0x75, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x48, 0x82, 0x41, 0x45, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70,
	0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x73, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x6c,
	0x2d, 0x62, 0x61, 0x6e, 0x64, 0x2f, 0x6d, 0x69, 0x6e, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x80,
	0x01, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xc1, 0x83, 0xa6, 0x60,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4d, 0x82, 0x41, 0x4a, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d, 0x70, 0x6c,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x6c, 0x2d, 0x62, 0x61, 0x6e, 0x64, 0x2f,
	0x6d, 0x69, 0x6e, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x1a, 0x89, 0x07, 0x0a, 0x10, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x76, 0x0a, 0x03, 0x61, 0x76, 0x67, 0x18, 0xbb, 0x82,
	0xca, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x47, 0x82, 0x41, 0x44, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d,
	0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x73, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2f, 0x61, 0x76, 0x67, 0x52, 0x03, 0x61, 0x76, 0x67, 0x12, 0x82,
	0x01, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0xc4, 0xa4, 0xf4, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4b, 0x82,
	0x41, 0x48, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f,
	0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x12, 0x80, 0x01, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0xc2, 0xb4, 0x86, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4c,
	0x82, 0x41, 0x49, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73,
	0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x77, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0xc5, 0xb3,
	0xf4, 0xa1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x47, 0x82, 0x41, 0x44, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61,
	0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x2d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2f, 0x6d, 0x61, 0x78, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12,
	0x80, 0x01, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xb5, 0x85, 0xd5,
	0xc3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4c, 0x82, 0x41, 0x49,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d,
	0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x76, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0xcb, 0x9a, 0xf4, 0x61, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x47, 0x82, 0x41,
	0x44, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x61,
	0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x2f, 0x6d, 0x69, 0x6e, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x80, 0x01, 0x0a, 0x08, 0x6d,
	0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xb7, 0x83, 0x9d, 0xc0, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4c, 0x82, 0x41, 0x49, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d,
	0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2f, 0x6d, 0x69, 0x6e, 0x2d,
	0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0xa4, 0x01,
	0x0a, 0x0c, 0x41, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x43,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0x82, 0x41,
	0x2c, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x61,
	0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x4f, 0x0a, 0x09, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x6d, 0x70, 0x6c, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x2e, 0x41, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e,
	0x41, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x09, 0x61, 0x6d, 0x70, 0x6c, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x1a, 0xf4, 0x26, 0x0a, 0x13, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69,
	0x73, 0x6f, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0xba, 0x01, 0x0a,
	0x13, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x18, 0xfb, 0xbe, 0xaa, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x41, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x70, 0x65,
	0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e,
	0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4b, 0x65, 0x79, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x2f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x2d, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x12, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f,
	0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x1a, 0xa7, 0x23, 0x0a, 0x12, 0x53, 0x75,
	0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0xad, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xac, 0xef, 0xf5, 0x8e,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x6d, 0x70, 0x6c, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73,
	0x6f, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61,
	0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69,
	0x73, 0x6f, 0x72, 0x79, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0xa8, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xa5, 0xd9, 0xa2, 0x17, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x2e, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72,
	0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x44,
	0x82, 0x41, 0x41, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72,
	0x79, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x92, 0x01, 0x0a, 0x06,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x87, 0x01, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x18, 0xd4, 0xc5, 0xa4, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x2f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x2d, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x1a, 0xa0, 0x1f, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xcb, 0x01, 0x0a, 0x0b, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0xc4, 0xe8, 0xa0, 0x82, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x2e, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f,
	0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x50, 0x82, 0x41, 0x4d, 0x2f,
	0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x2f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x2d, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f,
	0x72, 0x79, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x87, 0x01, 0x0a, 0x09, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0xc1, 0xc6, 0xef, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x6f, 0x70, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x2f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x2d,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x12, 0xe4, 0x01, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x5f, 0x62, 0x69, 0x61,
	0x73, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x85, 0xb7, 0xc2, 0x7f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x2e, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4c, 0x61,
	0x73, 0x65, 0x72, 0x42, 0x69, 0x61, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x57,
	0x82, 0x41, 0x54, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72,
	0x79, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x2d, 0x62, 0x69, 0x61, 0x73, 0x2d,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x42, 0x69,
	0x61, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x98, 0x01, 0x0a, 0x10, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0xda,
	0xaa, 0x98, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x55, 0x82, 0x41,
	0x52, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x2f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x2d,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69,
	0x73, 0x6f, 0x72, 0x79, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x52, 0x0f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0xcf, 0x01, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0xf3, 0x8d, 0xa8, 0xa6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x55, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x41, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x53, 0x75,
	0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x2e, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x51, 0x82, 0x41, 0x4e, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x2f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x2d, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x1a, 0xe1, 0x07, 0x0a, 0x0a, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x83, 0x01, 0x0a, 0x03, 0x61, 0x76, 0x67, 0x18, 0xdd, 0x91,
	0xf5, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x54, 0x82, 0x41, 0x51, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d,
	0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73,
	0x6f, 0x72, 0x79, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x2f, 0x61, 0x76, 0x67, 0x52, 0x03, 0x61, 0x76, 0x67, 0x12, 0x8f, 0x01, 0x0a, 0x07,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x8a, 0xd4, 0xee, 0x75, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x58, 0x82, 0x41, 0x55, 0x2f,
	0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x2f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x2d, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f,
	0x72, 0x79, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x8d, 0x01,
	0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0xfc, 0x9b, 0xb4, 0x5a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x59, 0x82, 0x41, 0x56, 0x2f, 0x6f, 0x70,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x2d, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79,
	0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x84, 0x01,
	0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0xbf, 0xd8, 0xd1, 0xff, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x54, 0x82, 0x41, 0x51, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x2f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x2d, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72,
	0x79, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2f, 0x6d, 0x61, 0x78, 0x52,
	0x03, 0x6d, 0x61, 0x78, 0x12, 0x8c, 0x01, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x83, 0x82, 0xaf, 0x57, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x59, 0x82, 0x41, 0x56, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70,
	0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f,
	0x72, 0x79, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0xc1, 0xbf, 0xd1, 0xbf,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x54, 0x82, 0x41, 0x51, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70,
	0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f,
	0x72, 0x79, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x2f, 0x6d, 0x69, 0x6e, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x8d, 0x01, 0x0a, 0x08, 0x6d,
	0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xd9, 0xd0, 0x8c, 0xd3, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x59, 0x82, 0x41, 0x56, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x2f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x2d, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2f, 0x6d, 0x69, 0x6e, 0x2d, 0x74, 0x69, 0x6d,
	0x65, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x9a, 0x08, 0x0a, 0x10, 0x4c,
	0x61, 0x73, 0x65, 0x72, 0x42, 0x69, 0x61, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12,
	0x8b, 0x01, 0x0a, 0x03, 0x61, 0x76, 0x67, 0x18, 0xa8, 0xe5, 0x85, 0xa9, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5b, 0x82, 0x41, 0x58,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x2f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x2d, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73,
	0x6f, 0x72, 0x79, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x2d, 0x62, 0x69, 0x61, 0x73, 0x2d, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x76, 0x67, 0x52, 0x03, 0x61, 0x76, 0x67, 0x12, 0x96, 0x01,
	0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x93, 0x9b, 0xb5, 0x71, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5f, 0x82, 0x41,
	0x5c, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x2f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x2d,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69,
	0x73, 0x6f, 0x72, 0x79, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x2d, 0x62, 0x69, 0x61, 0x73, 0x2d, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x07, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x95, 0x01, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0x93, 0x81, 0x80, 0x88, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x60, 0x82, 0x41, 0x5d, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d,
	0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76,
	0x69, 0x73, 0x6f, 0x72, 0x79, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x2d, 0x62,
	0x69, 0x61, 0x73, 0x2d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x8a,
	0x01, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0xea, 0xed, 0xfd, 0x51, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5b, 0x82, 0x41, 0x58, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x2f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x2d, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72,
	0x79, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x6c, 0x61, 0x73, 0x65, 0x72, 0x2d, 0x62, 0x69, 0x61, 0x73, 0x2d, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x2f, 0x6d, 0x61, 0x78, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x94, 0x01, 0x0a, 0x08,
	0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xe0, 0xa9, 0x91, 0x8f, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x60, 0x82, 0x41, 0x5d, 0x2f, 0x6f, 0x70, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x2f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x2d,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x61,
	0x73, 0x65, 0x72, 0x2d, 0x62, 0x69, 0x61, 0x73, 0x2d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x8b, 0x01, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0xc4, 0x86, 0xfe, 0x91, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5b,
	0x82, 0x41, 0x58, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72,
	0x79, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x2d, 0x62, 0x69, 0x61, 0x73, 0x2d,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2f, 0x6d, 0x69, 0x6e, 0x52, 0x03, 0x6d, 0x69, 0x6e,
	0x12, 0x94, 0x01, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xae, 0x81,
	0xc9, 0xbb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x60, 0x82, 0x41,
	0x5d, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x2f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x2d,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69,
	0x73, 0x6f, 0x72, 0x79, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x2d, 0x62, 0x69, 0x61, 0x73, 0x2d, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x2f, 0x6d, 0x69, 0x6e, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07,
	0x6d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0xe9, 0x07, 0x0a, 0x0b, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x85, 0x01, 0x0a, 0x03, 0x61, 0x76, 0x67, 0x18,
	0xca, 0xe0, 0xe6, 0xb5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x55, 0x82, 0x41, 0x52, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x2d, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2f, 0x61, 0x76, 0x67, 0x52, 0x03, 0x61, 0x76, 0x67, 0x12,
	0x90, 0x01, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0xc9, 0xed, 0x83, 0x40,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x59,
	0x82, 0x41, 0x56, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72,
	0x79, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x12, 0x8f, 0x01, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0xcd, 0xc5, 0xb9, 0xc6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5a,
	0x82, 0x41, 0x57, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72,
	0x79, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x84, 0x01, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0xdc, 0xdb, 0xde,
	0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x55, 0x82, 0x41, 0x52, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70,
	0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f,
	0x72, 0x79, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x2f, 0x6d, 0x61, 0x78, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x8d, 0x01, 0x0a, 0x08,
	0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x86, 0x97, 0xbc, 0x4f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5a, 0x82, 0x41, 0x57, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x2f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x2d, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x74, 0x69,
	0x6d, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x03,
	0x6d, 0x69, 0x6e, 0x18, 0xe2, 0xc2, 0xde, 0xfe, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x55, 0x82, 0x41, 0x52, 0x2f, 0x6f, 0x70, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x2f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x2d,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2f, 0x6d, 0x69, 0x6e, 0x52, 0x03,
	0x6d, 0x69, 0x6e, 0x12, 0x8d, 0x01, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0xd8, 0xcc, 0xf2, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5a,
	0x82, 0x41, 0x57, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d, 0x70, 0x6c,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72,
	0x79, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x2f, 0x6d, 0x69, 0x6e, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x1a, 0xf5, 0x01, 0x0a, 0x15, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73,
	0x6f, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4b, 0x65, 0x79, 0x12, 0x66, 0x0a,
	0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x48, 0x82, 0x41, 0x45, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6d,
	0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73,
	0x6f, 0x72, 0x79, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x74, 0x0a, 0x13, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69,
	0x73, 0x6f, 0x72, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x43, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x2e, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x12, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69,
	0x73, 0x6f, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x17, 0x0a, 0x15, 0x63,
	0x6f, 0x6d, 0x2e, 0x6e, 0x6f, 0x63, 0x73, 0x79, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_openconfig_optical_amplifier_proto_rawDescOnce sync.Once
	file_openconfig_optical_amplifier_proto_rawDescData = file_openconfig_optical_amplifier_proto_rawDesc
)

func file_openconfig_optical_amplifier_proto_rawDescGZIP() []byte {
	file_openconfig_optical_amplifier_proto_rawDescOnce.Do(func() {
		file_openconfig_optical_amplifier_proto_rawDescData = protoimpl.X.CompressGZIP(file_openconfig_optical_amplifier_proto_rawDescData)
	})
	return file_openconfig_optical_amplifier_proto_rawDescData
}

var file_openconfig_optical_amplifier_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_openconfig_optical_amplifier_proto_goTypes = []interface{}{
	(*OpticalAmplifier)(nil),                                                               // 0: openconfig.OpticalAmplifier
	(*OpticalAmplifier_Amplifiers)(nil),                                                    // 1: openconfig.OpticalAmplifier.Amplifiers
	(*OpticalAmplifier_SupervisoryChannels)(nil),                                           // 2: openconfig.OpticalAmplifier.SupervisoryChannels
	(*OpticalAmplifier_Amplifiers_Amplifier)(nil),                                          // 3: openconfig.OpticalAmplifier.Amplifiers.Amplifier
	(*OpticalAmplifier_Amplifiers_AmplifierKey)(nil),                                       // 4: openconfig.OpticalAmplifier.Amplifiers.AmplifierKey
	(*OpticalAmplifier_Amplifiers_Amplifier_Config)(nil),                                   // 5: openconfig.OpticalAmplifier.Amplifiers.Amplifier.Config
	(*OpticalAmplifier_Amplifiers_Amplifier_State)(nil),                                    // 6: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State
	(*OpticalAmplifier_Amplifiers_Amplifier_State_ActualGain)(nil),                         // 7: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.ActualGain
	(*OpticalAmplifier_Amplifiers_Amplifier_State_ActualGainTilt)(nil),                     // 8: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.ActualGainTilt
	(*OpticalAmplifier_Amplifiers_Amplifier_State_InputPowerCBand)(nil),                    // 9: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.InputPowerCBand
	(*OpticalAmplifier_Amplifiers_Amplifier_State_InputPowerLBand)(nil),                    // 10: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.InputPowerLBand
	(*OpticalAmplifier_Amplifiers_Amplifier_State_InputPowerTotal)(nil),                    // 11: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.InputPowerTotal
	(*OpticalAmplifier_Amplifiers_Amplifier_State_LaserBiasCurrent)(nil),                   // 12: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.LaserBiasCurrent
	(*OpticalAmplifier_Amplifiers_Amplifier_State_OpticalReturnLoss)(nil),                  // 13: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.OpticalReturnLoss
	(*OpticalAmplifier_Amplifiers_Amplifier_State_OutputPowerCBand)(nil),                   // 14: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.OutputPowerCBand
	(*OpticalAmplifier_Amplifiers_Amplifier_State_OutputPowerLBand)(nil),                   // 15: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.OutputPowerLBand
	(*OpticalAmplifier_Amplifiers_Amplifier_State_OutputPowerTotal)(nil),                   // 16: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.OutputPowerTotal
	(*OpticalAmplifier_SupervisoryChannels_SupervisoryChannel)(nil),                        // 17: openconfig.OpticalAmplifier.SupervisoryChannels.SupervisoryChannel
	(*OpticalAmplifier_SupervisoryChannels_SupervisoryChannelKey)(nil),                     // 18: openconfig.OpticalAmplifier.SupervisoryChannels.SupervisoryChannelKey
	(*OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_Config)(nil),                 // 19: openconfig.OpticalAmplifier.SupervisoryChannels.SupervisoryChannel.Config
	(*OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_State)(nil),                  // 20: openconfig.OpticalAmplifier.SupervisoryChannels.SupervisoryChannel.State
	(*OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_State_InputPower)(nil),       // 21: openconfig.OpticalAmplifier.SupervisoryChannels.SupervisoryChannel.State.InputPower
	(*OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_State_LaserBiasCurrent)(nil), // 22: openconfig.OpticalAmplifier.SupervisoryChannels.SupervisoryChannel.State.LaserBiasCurrent
	(*OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_State_OutputPower)(nil),      // 23: openconfig.OpticalAmplifier.SupervisoryChannels.SupervisoryChannel.State.OutputPower
	(OpenconfigOpticalAmplifierOPTICALAMPLIFIERMODE)(0),                                    // 24: openconfig.OpenconfigOpticalAmplifierOPTICALAMPLIFIERMODE
	(*ywrapper.BoolValue)(nil),                                                             // 25: ywrapper.BoolValue
	(OpenconfigOpticalAmplifierFIBERTYPEPROFILE)(0),                                        // 26: openconfig.OpenconfigOpticalAmplifierFIBERTYPEPROFILE
	(OpenconfigOpticalAmplifierGAINRANGE)(0),                                               // 27: openconfig.OpenconfigOpticalAmplifierGAINRANGE
	(*ywrapper.Decimal64Value)(nil),                                                        // 28: ywrapper.Decimal64Value
	(*ywrapper.StringValue)(nil),                                                           // 29: ywrapper.StringValue
	(OpenconfigOpticalAmplifierOPTICALAMPLIFIERTYPE)(0),                                    // 30: openconfig.OpenconfigOpticalAmplifierOPTICALAMPLIFIERTYPE
	(*ywrapper.UintValue)(nil),                                                             // 31: ywrapper.UintValue
}
var file_openconfig_optical_amplifier_proto_depIdxs = []int32{
	1,   // 0: openconfig.OpticalAmplifier.amplifiers:type_name -> openconfig.OpticalAmplifier.Amplifiers
	2,   // 1: openconfig.OpticalAmplifier.supervisory_channels:type_name -> openconfig.OpticalAmplifier.SupervisoryChannels
	4,   // 2: openconfig.OpticalAmplifier.Amplifiers.amplifier:type_name -> openconfig.OpticalAmplifier.Amplifiers.AmplifierKey
	18,  // 3: openconfig.OpticalAmplifier.SupervisoryChannels.supervisory_channel:type_name -> openconfig.OpticalAmplifier.SupervisoryChannels.SupervisoryChannelKey
	5,   // 4: openconfig.OpticalAmplifier.Amplifiers.Amplifier.config:type_name -> openconfig.OpticalAmplifier.Amplifiers.Amplifier.Config
	6,   // 5: openconfig.OpticalAmplifier.Amplifiers.Amplifier.state:type_name -> openconfig.OpticalAmplifier.Amplifiers.Amplifier.State
	3,   // 6: openconfig.OpticalAmplifier.Amplifiers.AmplifierKey.amplifier:type_name -> openconfig.OpticalAmplifier.Amplifiers.Amplifier
	24,  // 7: openconfig.OpticalAmplifier.Amplifiers.Amplifier.Config.amp_mode:type_name -> openconfig.OpenconfigOpticalAmplifierOPTICALAMPLIFIERMODE
	25,  // 8: openconfig.OpticalAmplifier.Amplifiers.Amplifier.Config.enabled:type_name -> ywrapper.BoolValue
	26,  // 9: openconfig.OpticalAmplifier.Amplifiers.Amplifier.Config.fiber_type_profile:type_name -> openconfig.OpenconfigOpticalAmplifierFIBERTYPEPROFILE
	27,  // 10: openconfig.OpticalAmplifier.Amplifiers.Amplifier.Config.gain_range:type_name -> openconfig.OpenconfigOpticalAmplifierGAINRANGE
	28,  // 11: openconfig.OpticalAmplifier.Amplifiers.Amplifier.Config.max_gain:type_name -> ywrapper.Decimal64Value
	28,  // 12: openconfig.OpticalAmplifier.Amplifiers.Amplifier.Config.max_output_power:type_name -> ywrapper.Decimal64Value
	28,  // 13: openconfig.OpticalAmplifier.Amplifiers.Amplifier.Config.min_gain:type_name -> ywrapper.Decimal64Value
	29,  // 14: openconfig.OpticalAmplifier.Amplifiers.Amplifier.Config.name:type_name -> ywrapper.StringValue
	28,  // 15: openconfig.OpticalAmplifier.Amplifiers.Amplifier.Config.target_gain:type_name -> ywrapper.Decimal64Value
	28,  // 16: openconfig.OpticalAmplifier.Amplifiers.Amplifier.Config.target_gain_tilt:type_name -> ywrapper.Decimal64Value
	28,  // 17: openconfig.OpticalAmplifier.Amplifiers.Amplifier.Config.target_output_power:type_name -> ywrapper.Decimal64Value
	30,  // 18: openconfig.OpticalAmplifier.Amplifiers.Amplifier.Config.type:type_name -> openconfig.OpenconfigOpticalAmplifierOPTICALAMPLIFIERTYPE
	7,   // 19: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.actual_gain:type_name -> openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.ActualGain
	8,   // 20: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.actual_gain_tilt:type_name -> openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.ActualGainTilt
	24,  // 21: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.amp_mode:type_name -> openconfig.OpenconfigOpticalAmplifierOPTICALAMPLIFIERMODE
	29,  // 22: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.component:type_name -> ywrapper.StringValue
	29,  // 23: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.egress_port:type_name -> ywrapper.StringValue
	25,  // 24: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.enabled:type_name -> ywrapper.BoolValue
	26,  // 25: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.fiber_type_profile:type_name -> openconfig.OpenconfigOpticalAmplifierFIBERTYPEPROFILE
	27,  // 26: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.gain_range:type_name -> openconfig.OpenconfigOpticalAmplifierGAINRANGE
	29,  // 27: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.ingress_port:type_name -> ywrapper.StringValue
	9,   // 28: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.input_power_c_band:type_name -> openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.InputPowerCBand
	10,  // 29: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.input_power_l_band:type_name -> openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.InputPowerLBand
	11,  // 30: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.input_power_total:type_name -> openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.InputPowerTotal
	12,  // 31: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.laser_bias_current:type_name -> openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.LaserBiasCurrent
	28,  // 32: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.max_gain:type_name -> ywrapper.Decimal64Value
	28,  // 33: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.max_output_power:type_name -> ywrapper.Decimal64Value
	28,  // 34: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.min_gain:type_name -> ywrapper.Decimal64Value
	29,  // 35: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.name:type_name -> ywrapper.StringValue
	13,  // 36: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.optical_return_loss:type_name -> openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.OpticalReturnLoss
	14,  // 37: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.output_power_c_band:type_name -> openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.OutputPowerCBand
	15,  // 38: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.output_power_l_band:type_name -> openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.OutputPowerLBand
	16,  // 39: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.output_power_total:type_name -> openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.OutputPowerTotal
	28,  // 40: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.target_gain:type_name -> ywrapper.Decimal64Value
	28,  // 41: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.target_gain_tilt:type_name -> ywrapper.Decimal64Value
	28,  // 42: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.target_output_power:type_name -> ywrapper.Decimal64Value
	30,  // 43: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.type:type_name -> openconfig.OpenconfigOpticalAmplifierOPTICALAMPLIFIERTYPE
	28,  // 44: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.ActualGain.avg:type_name -> ywrapper.Decimal64Value
	28,  // 45: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.ActualGain.instant:type_name -> ywrapper.Decimal64Value
	31,  // 46: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.ActualGain.interval:type_name -> ywrapper.UintValue
	28,  // 47: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.ActualGain.max:type_name -> ywrapper.Decimal64Value
	31,  // 48: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.ActualGain.max_time:type_name -> ywrapper.UintValue
	28,  // 49: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.ActualGain.min:type_name -> ywrapper.Decimal64Value
	31,  // 50: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.ActualGain.min_time:type_name -> ywrapper.UintValue
	28,  // 51: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.ActualGainTilt.avg:type_name -> ywrapper.Decimal64Value
	28,  // 52: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.ActualGainTilt.instant:type_name -> ywrapper.Decimal64Value
	31,  // 53: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.ActualGainTilt.interval:type_name -> ywrapper.UintValue
	28,  // 54: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.ActualGainTilt.max:type_name -> ywrapper.Decimal64Value
	31,  // 55: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.ActualGainTilt.max_time:type_name -> ywrapper.UintValue
	28,  // 56: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.ActualGainTilt.min:type_name -> ywrapper.Decimal64Value
	31,  // 57: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.ActualGainTilt.min_time:type_name -> ywrapper.UintValue
	28,  // 58: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.InputPowerCBand.avg:type_name -> ywrapper.Decimal64Value
	28,  // 59: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.InputPowerCBand.instant:type_name -> ywrapper.Decimal64Value
	31,  // 60: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.InputPowerCBand.interval:type_name -> ywrapper.UintValue
	28,  // 61: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.InputPowerCBand.max:type_name -> ywrapper.Decimal64Value
	31,  // 62: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.InputPowerCBand.max_time:type_name -> ywrapper.UintValue
	28,  // 63: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.InputPowerCBand.min:type_name -> ywrapper.Decimal64Value
	31,  // 64: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.InputPowerCBand.min_time:type_name -> ywrapper.UintValue
	28,  // 65: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.InputPowerLBand.avg:type_name -> ywrapper.Decimal64Value
	28,  // 66: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.InputPowerLBand.instant:type_name -> ywrapper.Decimal64Value
	31,  // 67: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.InputPowerLBand.interval:type_name -> ywrapper.UintValue
	28,  // 68: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.InputPowerLBand.max:type_name -> ywrapper.Decimal64Value
	31,  // 69: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.InputPowerLBand.max_time:type_name -> ywrapper.UintValue
	28,  // 70: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.InputPowerLBand.min:type_name -> ywrapper.Decimal64Value
	31,  // 71: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.InputPowerLBand.min_time:type_name -> ywrapper.UintValue
	28,  // 72: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.InputPowerTotal.avg:type_name -> ywrapper.Decimal64Value
	28,  // 73: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.InputPowerTotal.instant:type_name -> ywrapper.Decimal64Value
	31,  // 74: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.InputPowerTotal.interval:type_name -> ywrapper.UintValue
	28,  // 75: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.InputPowerTotal.max:type_name -> ywrapper.Decimal64Value
	31,  // 76: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.InputPowerTotal.max_time:type_name -> ywrapper.UintValue
	28,  // 77: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.InputPowerTotal.min:type_name -> ywrapper.Decimal64Value
	31,  // 78: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.InputPowerTotal.min_time:type_name -> ywrapper.UintValue
	28,  // 79: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.LaserBiasCurrent.avg:type_name -> ywrapper.Decimal64Value
	28,  // 80: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.LaserBiasCurrent.instant:type_name -> ywrapper.Decimal64Value
	31,  // 81: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.LaserBiasCurrent.interval:type_name -> ywrapper.UintValue
	28,  // 82: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.LaserBiasCurrent.max:type_name -> ywrapper.Decimal64Value
	31,  // 83: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.LaserBiasCurrent.max_time:type_name -> ywrapper.UintValue
	28,  // 84: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.LaserBiasCurrent.min:type_name -> ywrapper.Decimal64Value
	31,  // 85: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.LaserBiasCurrent.min_time:type_name -> ywrapper.UintValue
	28,  // 86: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.OpticalReturnLoss.avg:type_name -> ywrapper.Decimal64Value
	28,  // 87: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.OpticalReturnLoss.instant:type_name -> ywrapper.Decimal64Value
	31,  // 88: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.OpticalReturnLoss.interval:type_name -> ywrapper.UintValue
	28,  // 89: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.OpticalReturnLoss.max:type_name -> ywrapper.Decimal64Value
	31,  // 90: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.OpticalReturnLoss.max_time:type_name -> ywrapper.UintValue
	28,  // 91: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.OpticalReturnLoss.min:type_name -> ywrapper.Decimal64Value
	31,  // 92: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.OpticalReturnLoss.min_time:type_name -> ywrapper.UintValue
	28,  // 93: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.OutputPowerCBand.avg:type_name -> ywrapper.Decimal64Value
	28,  // 94: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.OutputPowerCBand.instant:type_name -> ywrapper.Decimal64Value
	31,  // 95: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.OutputPowerCBand.interval:type_name -> ywrapper.UintValue
	28,  // 96: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.OutputPowerCBand.max:type_name -> ywrapper.Decimal64Value
	31,  // 97: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.OutputPowerCBand.max_time:type_name -> ywrapper.UintValue
	28,  // 98: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.OutputPowerCBand.min:type_name -> ywrapper.Decimal64Value
	31,  // 99: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.OutputPowerCBand.min_time:type_name -> ywrapper.UintValue
	28,  // 100: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.OutputPowerLBand.avg:type_name -> ywrapper.Decimal64Value
	28,  // 101: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.OutputPowerLBand.instant:type_name -> ywrapper.Decimal64Value
	31,  // 102: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.OutputPowerLBand.interval:type_name -> ywrapper.UintValue
	28,  // 103: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.OutputPowerLBand.max:type_name -> ywrapper.Decimal64Value
	31,  // 104: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.OutputPowerLBand.max_time:type_name -> ywrapper.UintValue
	28,  // 105: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.OutputPowerLBand.min:type_name -> ywrapper.Decimal64Value
	31,  // 106: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.OutputPowerLBand.min_time:type_name -> ywrapper.UintValue
	28,  // 107: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.OutputPowerTotal.avg:type_name -> ywrapper.Decimal64Value
	28,  // 108: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.OutputPowerTotal.instant:type_name -> ywrapper.Decimal64Value
	31,  // 109: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.OutputPowerTotal.interval:type_name -> ywrapper.UintValue
	28,  // 110: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.OutputPowerTotal.max:type_name -> ywrapper.Decimal64Value
	31,  // 111: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.OutputPowerTotal.max_time:type_name -> ywrapper.UintValue
	28,  // 112: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.OutputPowerTotal.min:type_name -> ywrapper.Decimal64Value
	31,  // 113: openconfig.OpticalAmplifier.Amplifiers.Amplifier.State.OutputPowerTotal.min_time:type_name -> ywrapper.UintValue
	19,  // 114: openconfig.OpticalAmplifier.SupervisoryChannels.SupervisoryChannel.config:type_name -> openconfig.OpticalAmplifier.SupervisoryChannels.SupervisoryChannel.Config
	20,  // 115: openconfig.OpticalAmplifier.SupervisoryChannels.SupervisoryChannel.state:type_name -> openconfig.OpticalAmplifier.SupervisoryChannels.SupervisoryChannel.State
	17,  // 116: openconfig.OpticalAmplifier.SupervisoryChannels.SupervisoryChannelKey.supervisory_channel:type_name -> openconfig.OpticalAmplifier.SupervisoryChannels.SupervisoryChannel
	29,  // 117: openconfig.OpticalAmplifier.SupervisoryChannels.SupervisoryChannel.Config.interface:type_name -> ywrapper.StringValue
	21,  // 118: openconfig.OpticalAmplifier.SupervisoryChannels.SupervisoryChannel.State.input_power:type_name -> openconfig.OpticalAmplifier.SupervisoryChannels.SupervisoryChannel.State.InputPower
	29,  // 119: openconfig.OpticalAmplifier.SupervisoryChannels.SupervisoryChannel.State.interface:type_name -> ywrapper.StringValue
	22,  // 120: openconfig.OpticalAmplifier.SupervisoryChannels.SupervisoryChannel.State.laser_bias_current:type_name -> openconfig.OpticalAmplifier.SupervisoryChannels.SupervisoryChannel.State.LaserBiasCurrent
	31,  // 121: openconfig.OpticalAmplifier.SupervisoryChannels.SupervisoryChannel.State.output_frequency:type_name -> ywrapper.UintValue
	23,  // 122: openconfig.OpticalAmplifier.SupervisoryChannels.SupervisoryChannel.State.output_power:type_name -> openconfig.OpticalAmplifier.SupervisoryChannels.SupervisoryChannel.State.OutputPower
	28,  // 123: openconfig.OpticalAmplifier.SupervisoryChannels.SupervisoryChannel.State.InputPower.avg:type_name -> ywrapper.Decimal64Value
	28,  // 124: openconfig.OpticalAmplifier.SupervisoryChannels.SupervisoryChannel.State.InputPower.instant:type_name -> ywrapper.Decimal64Value
	31,  // 125: openconfig.OpticalAmplifier.SupervisoryChannels.SupervisoryChannel.State.InputPower.interval:type_name -> ywrapper.UintValue
	28,  // 126: openconfig.OpticalAmplifier.SupervisoryChannels.SupervisoryChannel.State.InputPower.max:type_name -> ywrapper.Decimal64Value
	31,  // 127: openconfig.OpticalAmplifier.SupervisoryChannels.SupervisoryChannel.State.InputPower.max_time:type_name -> ywrapper.UintValue
	28,  // 128: openconfig.OpticalAmplifier.SupervisoryChannels.SupervisoryChannel.State.InputPower.min:type_name -> ywrapper.Decimal64Value
	31,  // 129: openconfig.OpticalAmplifier.SupervisoryChannels.SupervisoryChannel.State.InputPower.min_time:type_name -> ywrapper.UintValue
	28,  // 130: openconfig.OpticalAmplifier.SupervisoryChannels.SupervisoryChannel.State.LaserBiasCurrent.avg:type_name -> ywrapper.Decimal64Value
	28,  // 131: openconfig.OpticalAmplifier.SupervisoryChannels.SupervisoryChannel.State.LaserBiasCurrent.instant:type_name -> ywrapper.Decimal64Value
	31,  // 132: openconfig.OpticalAmplifier.SupervisoryChannels.SupervisoryChannel.State.LaserBiasCurrent.interval:type_name -> ywrapper.UintValue
	28,  // 133: openconfig.OpticalAmplifier.SupervisoryChannels.SupervisoryChannel.State.LaserBiasCurrent.max:type_name -> ywrapper.Decimal64Value
	31,  // 134: openconfig.OpticalAmplifier.SupervisoryChannels.SupervisoryChannel.State.LaserBiasCurrent.max_time:type_name -> ywrapper.UintValue
	28,  // 135: openconfig.OpticalAmplifier.SupervisoryChannels.SupervisoryChannel.State.LaserBiasCurrent.min:type_name -> ywrapper.Decimal64Value
	31,  // 136: openconfig.OpticalAmplifier.SupervisoryChannels.SupervisoryChannel.State.LaserBiasCurrent.min_time:type_name -> ywrapper.UintValue
	28,  // 137: openconfig.OpticalAmplifier.SupervisoryChannels.SupervisoryChannel.State.OutputPower.avg:type_name -> ywrapper.Decimal64Value
	28,  // 138: openconfig.OpticalAmplifier.SupervisoryChannels.SupervisoryChannel.State.OutputPower.instant:type_name -> ywrapper.Decimal64Value
	31,  // 139: openconfig.OpticalAmplifier.SupervisoryChannels.SupervisoryChannel.State.OutputPower.interval:type_name -> ywrapper.UintValue
	28,  // 140: openconfig.OpticalAmplifier.SupervisoryChannels.SupervisoryChannel.State.OutputPower.max:type_name -> ywrapper.Decimal64Value
	31,  // 141: openconfig.OpticalAmplifier.SupervisoryChannels.SupervisoryChannel.State.OutputPower.max_time:type_name -> ywrapper.UintValue
	28,  // 142: openconfig.OpticalAmplifier.SupervisoryChannels.SupervisoryChannel.State.OutputPower.min:type_name -> ywrapper.Decimal64Value
	31,  // 143: openconfig.OpticalAmplifier.SupervisoryChannels.SupervisoryChannel.State.OutputPower.min_time:type_name -> ywrapper.UintValue
	144, // [144:144] is the sub-list for method output_type
	144, // [144:144] is the sub-list for method input_type
	144, // [144:144] is the sub-list for extension type_name
	144, // [144:144] is the sub-list for extension extendee
	0,   // [0:144] is the sub-list for field type_name
}

func init() { file_openconfig_optical_amplifier_proto_init() }
func file_openconfig_optical_amplifier_proto_init() {
	if File_openconfig_optical_amplifier_proto != nil {
		return
	}
	file_openconfig_enums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_openconfig_optical_amplifier_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpticalAmplifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_optical_amplifier_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpticalAmplifier_Amplifiers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_optical_amplifier_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpticalAmplifier_SupervisoryChannels); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_optical_amplifier_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpticalAmplifier_Amplifiers_Amplifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_optical_amplifier_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpticalAmplifier_Amplifiers_AmplifierKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_optical_amplifier_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpticalAmplifier_Amplifiers_Amplifier_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_optical_amplifier_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpticalAmplifier_Amplifiers_Amplifier_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_optical_amplifier_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpticalAmplifier_Amplifiers_Amplifier_State_ActualGain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_optical_amplifier_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpticalAmplifier_Amplifiers_Amplifier_State_ActualGainTilt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_optical_amplifier_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpticalAmplifier_Amplifiers_Amplifier_State_InputPowerCBand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_optical_amplifier_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpticalAmplifier_Amplifiers_Amplifier_State_InputPowerLBand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_optical_amplifier_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpticalAmplifier_Amplifiers_Amplifier_State_InputPowerTotal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_optical_amplifier_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpticalAmplifier_Amplifiers_Amplifier_State_LaserBiasCurrent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_optical_amplifier_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpticalAmplifier_Amplifiers_Amplifier_State_OpticalReturnLoss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_optical_amplifier_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpticalAmplifier_Amplifiers_Amplifier_State_OutputPowerCBand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_optical_amplifier_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpticalAmplifier_Amplifiers_Amplifier_State_OutputPowerLBand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_optical_amplifier_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpticalAmplifier_Amplifiers_Amplifier_State_OutputPowerTotal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_optical_amplifier_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpticalAmplifier_SupervisoryChannels_SupervisoryChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_optical_amplifier_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpticalAmplifier_SupervisoryChannels_SupervisoryChannelKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_optical_amplifier_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_optical_amplifier_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_optical_amplifier_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_State_InputPower); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_optical_amplifier_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_State_LaserBiasCurrent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_optical_amplifier_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpticalAmplifier_SupervisoryChannels_SupervisoryChannel_State_OutputPower); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_openconfig_optical_amplifier_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_openconfig_optical_amplifier_proto_goTypes,
		DependencyIndexes: file_openconfig_optical_amplifier_proto_depIdxs,
		MessageInfos:      file_openconfig_optical_amplifier_proto_msgTypes,
	}.Build()
	File_openconfig_optical_amplifier_proto = out.File
	file_openconfig_optical_amplifier_proto_rawDesc = nil
	file_openconfig_optical_amplifier_proto_goTypes = nil
	file_openconfig_optical_amplifier_proto_depIdxs = nil
}
