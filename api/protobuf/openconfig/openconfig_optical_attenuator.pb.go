// openconfig.openconfig_optical_attenuator is generated by proto_generator as a protobuf
// representation of a YANG schema.
//
// Input schema modules:
//  - ../api/yang/public/doc/openconfig-example.yang
//  - ../api/yang/public/third_party/ietf/iana-if-type.yang
//  - ../api/yang/public/third_party/ietf/ietf-interfaces.yang
//  - ../api/yang/public/third_party/ietf/ietf-yang-types.yang
//  - ../api/yang/public/third_party/ietf/ietf-inet-types.yang
//  - ../api/yang/public/release/models/bfd/openconfig-bfd.yang
//  - ../api/yang/public/release/models/vlan/openconfig-vlan.yang
//  - ../api/yang/public/release/models/vlan/openconfig-vlan-types.yang
//  - ../api/yang/public/release/models/wifi/openconfig-access-points.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-mac.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-types.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-phy.yang
//  - ../api/yang/public/release/models/wifi/openconfig-ap-interfaces.yang
//  - ../api/yang/public/release/models/wifi/openconfig-ap-manager.yang
//  - ../api/yang/public/release/models/macsec/openconfig-macsec.yang
//  - ../api/yang/public/release/models/macsec/openconfig-macsec-types.yang
//  - ../api/yang/public/release/models/stp/openconfig-spanning-tree-types.yang
//  - ../api/yang/public/release/models/stp/openconfig-spanning-tree.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-errors.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-peer-group.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-types.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-global.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-neighbor.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common-structure.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-policy.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common-multiprotocol.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-types.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-port.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-fan.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-linecard.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-ext.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-cpu.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-psu.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-transceiver.yang
//  - ../api/yang/public/release/models/multicast/openconfig-pim-types.yang
//  - ../api/yang/public/release/models/multicast/openconfig-igmp-types.yang
//  - ../api/yang/public/release/models/multicast/openconfig-igmp.yang
//  - ../api/yang/public/release/models/multicast/openconfig-pim.yang
//  - ../api/yang/public/release/models/catalog/openconfig-module-catalog.yang
//  - ../api/yang/public/release/models/catalog/openconfig-catalog-types.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-interfaces.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-8021x.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-types.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-aggregate.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-poe.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-tunnel.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ip.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ethernet.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ethernet-ext.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ip-ext.yang
//  - ../api/yang/public/release/models/acl/openconfig-packet-match-types.yang
//  - ../api/yang/public/release/models/acl/openconfig-packet-match.yang
//  - ../api/yang/public/release/models/acl/openconfig-acl.yang
//  - ../api/yang/public/release/models/system/openconfig-license.yang
//  - ../api/yang/public/release/models/system/openconfig-system.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-radius.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa.yang
//  - ../api/yang/public/release/models/system/openconfig-system-management.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-types.yang
//  - ../api/yang/public/release/models/system/openconfig-procmon.yang
//  - ../api/yang/public/release/models/system/openconfig-messages.yang
//  - ../api/yang/public/release/models/system/openconfig-system-terminal.yang
//  - ../api/yang/public/release/models/system/openconfig-system-logging.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-tacacs.yang
//  - ../api/yang/public/release/models/system/openconfig-alarms.yang
//  - ../api/yang/public/release/models/system/openconfig-alarm-types.yang
//  - ../api/yang/public/release/models/policy/openconfig-policy-types.yang
//  - ../api/yang/public/release/models/policy/openconfig-routing-policy.yang
//  - ../api/yang/public/release/models/lacp/openconfig-lacp.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-wavelength-router.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-optical-amplifier.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-protection.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-channel-monitor.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-connectivity.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-optical-attenuator.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-common.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-types.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-terminal-device.yang
//  - ../api/yang/public/release/models/telemetry/openconfig-telemetry-types.yang
//  - ../api/yang/public/release/models/telemetry/openconfig-telemetry.yang
//  - ../api/yang/public/release/models/openflow/openconfig-openflow.yang
//  - ../api/yang/public/release/models/openflow/openconfig-openflow-types.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-tables.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-ext.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-table-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-shared-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-types.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-types.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-elements.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-interfaces.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-srte.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-forwarding-policies.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-interfaces.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-path-groups.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
//  - ../api/yang/public/release/models/relay-agent/openconfig-relay-agent.yang
//  - ../api/yang/public/release/models/lldp/openconfig-lldp.yang
//  - ../api/yang/public/release/models/lldp/openconfig-lldp-types.yang
//  - ../api/yang/public/release/models/openconfig-extensions.yang
//  - ../api/yang/public/release/models/types/openconfig-yang-types.yang
//  - ../api/yang/public/release/models/types/openconfig-inet-types.yang
//  - ../api/yang/public/release/models/types/openconfig-types.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-srte-policy.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-rsvp-sr-ext.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-segment-routing-types.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-segment-routing.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-types.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-igp.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-te.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-rsvp.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-static.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-sr.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-ldp.yang
//  - ../api/yang/public/release/models/probes/openconfig-probes-types.yang
//  - ../api/yang/public/release/models/probes/openconfig-probes.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-lsp.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-lsdb-types.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-policy.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-types.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-routing.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-area.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospf-policy.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-common.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-global.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-area-interface.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-lsdb.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospf-types.yang
//  - ../api/yang/public/release/models/local-routing/openconfig-local-routing.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-l3.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-l2.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-policy.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-types.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-mpls.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-common.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-types.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ipv6.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-pf.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-network-instance.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ipv4.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ethernet.yang

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        (unknown)
// source: openconfig_optical_attenuator.proto

package openconfig

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/openconfig/ygot/proto/yext"
	ywrapper "github.com/openconfig/ygot/proto/ywrapper"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type OpticalAttenuator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attenuators *OpticalAttenuator_Attenuators `protobuf:"bytes,28951735,opt,name=attenuators,proto3" json:"attenuators,omitempty"`
}

func (x *OpticalAttenuator) Reset() {
	*x = OpticalAttenuator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_optical_attenuator_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpticalAttenuator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpticalAttenuator) ProtoMessage() {}

func (x *OpticalAttenuator) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_optical_attenuator_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpticalAttenuator.ProtoReflect.Descriptor instead.
func (*OpticalAttenuator) Descriptor() ([]byte, []int) {
	return file_openconfig_optical_attenuator_proto_rawDescGZIP(), []int{0}
}

func (x *OpticalAttenuator) GetAttenuators() *OpticalAttenuator_Attenuators {
	if x != nil {
		return x.Attenuators
	}
	return nil
}

type OpticalAttenuator_Attenuators struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attenuator []*OpticalAttenuator_Attenuators_AttenuatorKey `protobuf:"bytes,140375399,rep,name=attenuator,proto3" json:"attenuator,omitempty"`
}

func (x *OpticalAttenuator_Attenuators) Reset() {
	*x = OpticalAttenuator_Attenuators{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_optical_attenuator_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpticalAttenuator_Attenuators) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpticalAttenuator_Attenuators) ProtoMessage() {}

func (x *OpticalAttenuator_Attenuators) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_optical_attenuator_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpticalAttenuator_Attenuators.ProtoReflect.Descriptor instead.
func (*OpticalAttenuator_Attenuators) Descriptor() ([]byte, []int) {
	return file_openconfig_optical_attenuator_proto_rawDescGZIP(), []int{0, 0}
}

func (x *OpticalAttenuator_Attenuators) GetAttenuator() []*OpticalAttenuator_Attenuators_AttenuatorKey {
	if x != nil {
		return x.Attenuator
	}
	return nil
}

type OpticalAttenuator_Attenuators_Attenuator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *OpticalAttenuator_Attenuators_Attenuator_Config `protobuf:"bytes,229926648,opt,name=config,proto3" json:"config,omitempty"`
	State  *OpticalAttenuator_Attenuators_Attenuator_State  `protobuf:"bytes,154150161,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *OpticalAttenuator_Attenuators_Attenuator) Reset() {
	*x = OpticalAttenuator_Attenuators_Attenuator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_optical_attenuator_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpticalAttenuator_Attenuators_Attenuator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpticalAttenuator_Attenuators_Attenuator) ProtoMessage() {}

func (x *OpticalAttenuator_Attenuators_Attenuator) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_optical_attenuator_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpticalAttenuator_Attenuators_Attenuator.ProtoReflect.Descriptor instead.
func (*OpticalAttenuator_Attenuators_Attenuator) Descriptor() ([]byte, []int) {
	return file_openconfig_optical_attenuator_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *OpticalAttenuator_Attenuators_Attenuator) GetConfig() *OpticalAttenuator_Attenuators_Attenuator_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *OpticalAttenuator_Attenuators_Attenuator) GetState() *OpticalAttenuator_Attenuators_Attenuator_State {
	if x != nil {
		return x.State
	}
	return nil
}

type OpticalAttenuator_Attenuators_AttenuatorKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string                                    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Attenuator *OpticalAttenuator_Attenuators_Attenuator `protobuf:"bytes,2,opt,name=attenuator,proto3" json:"attenuator,omitempty"`
}

func (x *OpticalAttenuator_Attenuators_AttenuatorKey) Reset() {
	*x = OpticalAttenuator_Attenuators_AttenuatorKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_optical_attenuator_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpticalAttenuator_Attenuators_AttenuatorKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpticalAttenuator_Attenuators_AttenuatorKey) ProtoMessage() {}

func (x *OpticalAttenuator_Attenuators_AttenuatorKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_optical_attenuator_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpticalAttenuator_Attenuators_AttenuatorKey.ProtoReflect.Descriptor instead.
func (*OpticalAttenuator_Attenuators_AttenuatorKey) Descriptor() ([]byte, []int) {
	return file_openconfig_optical_attenuator_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *OpticalAttenuator_Attenuators_AttenuatorKey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OpticalAttenuator_Attenuators_AttenuatorKey) GetAttenuator() *OpticalAttenuator_Attenuators_Attenuator {
	if x != nil {
		return x.Attenuator
	}
	return nil
}

type OpticalAttenuator_Attenuators_Attenuator_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attenuation       *ywrapper.Decimal64Value                         `protobuf:"bytes,109057421,opt,name=attenuation,proto3" json:"attenuation,omitempty"`
	AttenuationMode   OpenconfigOpticalAttenuatorOPTICALATTENUATORMODE `protobuf:"varint,460978135,opt,name=attenuation_mode,json=attenuationMode,proto3,enum=openconfig.OpenconfigOpticalAttenuatorOPTICALATTENUATORMODE" json:"attenuation_mode,omitempty"`
	Enabled           *ywrapper.BoolValue                              `protobuf:"bytes,58884778,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Name              *ywrapper.StringValue                            `protobuf:"bytes,48967746,opt,name=name,proto3" json:"name,omitempty"`
	TargetOutputPower *ywrapper.Decimal64Value                         `protobuf:"bytes,37332602,opt,name=target_output_power,json=targetOutputPower,proto3" json:"target_output_power,omitempty"`
}

func (x *OpticalAttenuator_Attenuators_Attenuator_Config) Reset() {
	*x = OpticalAttenuator_Attenuators_Attenuator_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_optical_attenuator_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpticalAttenuator_Attenuators_Attenuator_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpticalAttenuator_Attenuators_Attenuator_Config) ProtoMessage() {}

func (x *OpticalAttenuator_Attenuators_Attenuator_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_optical_attenuator_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpticalAttenuator_Attenuators_Attenuator_Config.ProtoReflect.Descriptor instead.
func (*OpticalAttenuator_Attenuators_Attenuator_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_optical_attenuator_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (x *OpticalAttenuator_Attenuators_Attenuator_Config) GetAttenuation() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Attenuation
	}
	return nil
}

func (x *OpticalAttenuator_Attenuators_Attenuator_Config) GetAttenuationMode() OpenconfigOpticalAttenuatorOPTICALATTENUATORMODE {
	if x != nil {
		return x.AttenuationMode
	}
	return OpenconfigOpticalAttenuatorOPTICALATTENUATORMODE_OPENCONFIGOPTICALATTENUATOROPTICALATTENUATORMODE_UNSET
}

func (x *OpticalAttenuator_Attenuators_Attenuator_Config) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *OpticalAttenuator_Attenuators_Attenuator_Config) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *OpticalAttenuator_Attenuators_Attenuator_Config) GetTargetOutputPower() *ywrapper.Decimal64Value {
	if x != nil {
		return x.TargetOutputPower
	}
	return nil
}

type OpticalAttenuator_Attenuators_Attenuator_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActualAttenuation *OpticalAttenuator_Attenuators_Attenuator_State_ActualAttenuation `protobuf:"bytes,381705717,opt,name=actual_attenuation,json=actualAttenuation,proto3" json:"actual_attenuation,omitempty"`
	Attenuation       *ywrapper.Decimal64Value                                          `protobuf:"bytes,51202748,opt,name=attenuation,proto3" json:"attenuation,omitempty"`
	AttenuationMode   OpenconfigOpticalAttenuatorOPTICALATTENUATORMODE                  `protobuf:"varint,278979244,opt,name=attenuation_mode,json=attenuationMode,proto3,enum=openconfig.OpenconfigOpticalAttenuatorOPTICALATTENUATORMODE" json:"attenuation_mode,omitempty"`
	Component         *ywrapper.StringValue                                             `protobuf:"bytes,56527409,opt,name=component,proto3" json:"component,omitempty"`
	EgressPort        *ywrapper.StringValue                                             `protobuf:"bytes,118939935,opt,name=egress_port,json=egressPort,proto3" json:"egress_port,omitempty"`
	Enabled           *ywrapper.BoolValue                                               `protobuf:"bytes,437788871,opt,name=enabled,proto3" json:"enabled,omitempty"`
	IngressPort       *ywrapper.StringValue                                             `protobuf:"bytes,459142551,opt,name=ingress_port,json=ingressPort,proto3" json:"ingress_port,omitempty"`
	Name              *ywrapper.StringValue                                             `protobuf:"bytes,230672293,opt,name=name,proto3" json:"name,omitempty"`
	OpticalReturnLoss *OpticalAttenuator_Attenuators_Attenuator_State_OpticalReturnLoss `protobuf:"bytes,405680637,opt,name=optical_return_loss,json=opticalReturnLoss,proto3" json:"optical_return_loss,omitempty"`
	OutputPowerTotal  *OpticalAttenuator_Attenuators_Attenuator_State_OutputPowerTotal  `protobuf:"bytes,172983174,opt,name=output_power_total,json=outputPowerTotal,proto3" json:"output_power_total,omitempty"`
	TargetOutputPower *ywrapper.Decimal64Value                                          `protobuf:"bytes,446489283,opt,name=target_output_power,json=targetOutputPower,proto3" json:"target_output_power,omitempty"`
}

func (x *OpticalAttenuator_Attenuators_Attenuator_State) Reset() {
	*x = OpticalAttenuator_Attenuators_Attenuator_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_optical_attenuator_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpticalAttenuator_Attenuators_Attenuator_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpticalAttenuator_Attenuators_Attenuator_State) ProtoMessage() {}

func (x *OpticalAttenuator_Attenuators_Attenuator_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_optical_attenuator_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpticalAttenuator_Attenuators_Attenuator_State.ProtoReflect.Descriptor instead.
func (*OpticalAttenuator_Attenuators_Attenuator_State) Descriptor() ([]byte, []int) {
	return file_openconfig_optical_attenuator_proto_rawDescGZIP(), []int{0, 0, 0, 1}
}

func (x *OpticalAttenuator_Attenuators_Attenuator_State) GetActualAttenuation() *OpticalAttenuator_Attenuators_Attenuator_State_ActualAttenuation {
	if x != nil {
		return x.ActualAttenuation
	}
	return nil
}

func (x *OpticalAttenuator_Attenuators_Attenuator_State) GetAttenuation() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Attenuation
	}
	return nil
}

func (x *OpticalAttenuator_Attenuators_Attenuator_State) GetAttenuationMode() OpenconfigOpticalAttenuatorOPTICALATTENUATORMODE {
	if x != nil {
		return x.AttenuationMode
	}
	return OpenconfigOpticalAttenuatorOPTICALATTENUATORMODE_OPENCONFIGOPTICALATTENUATOROPTICALATTENUATORMODE_UNSET
}

func (x *OpticalAttenuator_Attenuators_Attenuator_State) GetComponent() *ywrapper.StringValue {
	if x != nil {
		return x.Component
	}
	return nil
}

func (x *OpticalAttenuator_Attenuators_Attenuator_State) GetEgressPort() *ywrapper.StringValue {
	if x != nil {
		return x.EgressPort
	}
	return nil
}

func (x *OpticalAttenuator_Attenuators_Attenuator_State) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *OpticalAttenuator_Attenuators_Attenuator_State) GetIngressPort() *ywrapper.StringValue {
	if x != nil {
		return x.IngressPort
	}
	return nil
}

func (x *OpticalAttenuator_Attenuators_Attenuator_State) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *OpticalAttenuator_Attenuators_Attenuator_State) GetOpticalReturnLoss() *OpticalAttenuator_Attenuators_Attenuator_State_OpticalReturnLoss {
	if x != nil {
		return x.OpticalReturnLoss
	}
	return nil
}

func (x *OpticalAttenuator_Attenuators_Attenuator_State) GetOutputPowerTotal() *OpticalAttenuator_Attenuators_Attenuator_State_OutputPowerTotal {
	if x != nil {
		return x.OutputPowerTotal
	}
	return nil
}

func (x *OpticalAttenuator_Attenuators_Attenuator_State) GetTargetOutputPower() *ywrapper.Decimal64Value {
	if x != nil {
		return x.TargetOutputPower
	}
	return nil
}

type OpticalAttenuator_Attenuators_Attenuator_State_ActualAttenuation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avg      *ywrapper.Decimal64Value `protobuf:"bytes,479665144,opt,name=avg,proto3" json:"avg,omitempty"`
	Instant  *ywrapper.Decimal64Value `protobuf:"bytes,71006371,opt,name=instant,proto3" json:"instant,omitempty"`
	Interval *ywrapper.UintValue      `protobuf:"bytes,44937859,opt,name=interval,proto3" json:"interval,omitempty"`
	Max      *ywrapper.Decimal64Value `protobuf:"bytes,297095610,opt,name=max,proto3" json:"max,omitempty"`
	MaxTime  *ywrapper.UintValue      `protobuf:"bytes,500879408,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	Min      *ywrapper.Decimal64Value `protobuf:"bytes,431316532,opt,name=min,proto3" json:"min,omitempty"`
	MinTime  *ywrapper.UintValue      `protobuf:"bytes,79141726,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
}

func (x *OpticalAttenuator_Attenuators_Attenuator_State_ActualAttenuation) Reset() {
	*x = OpticalAttenuator_Attenuators_Attenuator_State_ActualAttenuation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_optical_attenuator_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpticalAttenuator_Attenuators_Attenuator_State_ActualAttenuation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpticalAttenuator_Attenuators_Attenuator_State_ActualAttenuation) ProtoMessage() {}

func (x *OpticalAttenuator_Attenuators_Attenuator_State_ActualAttenuation) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_optical_attenuator_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpticalAttenuator_Attenuators_Attenuator_State_ActualAttenuation.ProtoReflect.Descriptor instead.
func (*OpticalAttenuator_Attenuators_Attenuator_State_ActualAttenuation) Descriptor() ([]byte, []int) {
	return file_openconfig_optical_attenuator_proto_rawDescGZIP(), []int{0, 0, 0, 1, 0}
}

func (x *OpticalAttenuator_Attenuators_Attenuator_State_ActualAttenuation) GetAvg() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Avg
	}
	return nil
}

func (x *OpticalAttenuator_Attenuators_Attenuator_State_ActualAttenuation) GetInstant() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Instant
	}
	return nil
}

func (x *OpticalAttenuator_Attenuators_Attenuator_State_ActualAttenuation) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *OpticalAttenuator_Attenuators_Attenuator_State_ActualAttenuation) GetMax() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *OpticalAttenuator_Attenuators_Attenuator_State_ActualAttenuation) GetMaxTime() *ywrapper.UintValue {
	if x != nil {
		return x.MaxTime
	}
	return nil
}

func (x *OpticalAttenuator_Attenuators_Attenuator_State_ActualAttenuation) GetMin() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *OpticalAttenuator_Attenuators_Attenuator_State_ActualAttenuation) GetMinTime() *ywrapper.UintValue {
	if x != nil {
		return x.MinTime
	}
	return nil
}

type OpticalAttenuator_Attenuators_Attenuator_State_OpticalReturnLoss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avg      *ywrapper.Decimal64Value `protobuf:"bytes,350878320,opt,name=avg,proto3" json:"avg,omitempty"`
	Instant  *ywrapper.Decimal64Value `protobuf:"bytes,441982219,opt,name=instant,proto3" json:"instant,omitempty"`
	Interval *ywrapper.UintValue      `protobuf:"bytes,275745979,opt,name=interval,proto3" json:"interval,omitempty"`
	Max      *ywrapper.Decimal64Value `protobuf:"bytes,165632786,opt,name=max,proto3" json:"max,omitempty"`
	MaxTime  *ywrapper.UintValue      `protobuf:"bytes,536751304,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	Min      *ywrapper.Decimal64Value `protobuf:"bytes,31411900,opt,name=min,proto3" json:"min,omitempty"`
	MinTime  *ywrapper.UintValue      `protobuf:"bytes,248802278,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
}

func (x *OpticalAttenuator_Attenuators_Attenuator_State_OpticalReturnLoss) Reset() {
	*x = OpticalAttenuator_Attenuators_Attenuator_State_OpticalReturnLoss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_optical_attenuator_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpticalAttenuator_Attenuators_Attenuator_State_OpticalReturnLoss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpticalAttenuator_Attenuators_Attenuator_State_OpticalReturnLoss) ProtoMessage() {}

func (x *OpticalAttenuator_Attenuators_Attenuator_State_OpticalReturnLoss) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_optical_attenuator_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpticalAttenuator_Attenuators_Attenuator_State_OpticalReturnLoss.ProtoReflect.Descriptor instead.
func (*OpticalAttenuator_Attenuators_Attenuator_State_OpticalReturnLoss) Descriptor() ([]byte, []int) {
	return file_openconfig_optical_attenuator_proto_rawDescGZIP(), []int{0, 0, 0, 1, 1}
}

func (x *OpticalAttenuator_Attenuators_Attenuator_State_OpticalReturnLoss) GetAvg() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Avg
	}
	return nil
}

func (x *OpticalAttenuator_Attenuators_Attenuator_State_OpticalReturnLoss) GetInstant() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Instant
	}
	return nil
}

func (x *OpticalAttenuator_Attenuators_Attenuator_State_OpticalReturnLoss) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *OpticalAttenuator_Attenuators_Attenuator_State_OpticalReturnLoss) GetMax() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *OpticalAttenuator_Attenuators_Attenuator_State_OpticalReturnLoss) GetMaxTime() *ywrapper.UintValue {
	if x != nil {
		return x.MaxTime
	}
	return nil
}

func (x *OpticalAttenuator_Attenuators_Attenuator_State_OpticalReturnLoss) GetMin() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *OpticalAttenuator_Attenuators_Attenuator_State_OpticalReturnLoss) GetMinTime() *ywrapper.UintValue {
	if x != nil {
		return x.MinTime
	}
	return nil
}

type OpticalAttenuator_Attenuators_Attenuator_State_OutputPowerTotal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avg      *ywrapper.Decimal64Value `protobuf:"bytes,500167083,opt,name=avg,proto3" json:"avg,omitempty"`
	Instant  *ywrapper.Decimal64Value `protobuf:"bytes,280496052,opt,name=instant,proto3" json:"instant,omitempty"`
	Interval *ywrapper.UintValue      `protobuf:"bytes,433609938,opt,name=interval,proto3" json:"interval,omitempty"`
	Max      *ywrapper.Decimal64Value `protobuf:"bytes,81444085,opt,name=max,proto3" json:"max,omitempty"`
	MaxTime  *ywrapper.UintValue      `protobuf:"bytes,12330597,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	Min      *ywrapper.Decimal64Value `protobuf:"bytes,484093851,opt,name=min,proto3" json:"min,omitempty"`
	MinTime  *ywrapper.UintValue      `protobuf:"bytes,282127431,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
}

func (x *OpticalAttenuator_Attenuators_Attenuator_State_OutputPowerTotal) Reset() {
	*x = OpticalAttenuator_Attenuators_Attenuator_State_OutputPowerTotal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_optical_attenuator_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpticalAttenuator_Attenuators_Attenuator_State_OutputPowerTotal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpticalAttenuator_Attenuators_Attenuator_State_OutputPowerTotal) ProtoMessage() {}

func (x *OpticalAttenuator_Attenuators_Attenuator_State_OutputPowerTotal) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_optical_attenuator_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpticalAttenuator_Attenuators_Attenuator_State_OutputPowerTotal.ProtoReflect.Descriptor instead.
func (*OpticalAttenuator_Attenuators_Attenuator_State_OutputPowerTotal) Descriptor() ([]byte, []int) {
	return file_openconfig_optical_attenuator_proto_rawDescGZIP(), []int{0, 0, 0, 1, 2}
}

func (x *OpticalAttenuator_Attenuators_Attenuator_State_OutputPowerTotal) GetAvg() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Avg
	}
	return nil
}

func (x *OpticalAttenuator_Attenuators_Attenuator_State_OutputPowerTotal) GetInstant() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Instant
	}
	return nil
}

func (x *OpticalAttenuator_Attenuators_Attenuator_State_OutputPowerTotal) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *OpticalAttenuator_Attenuators_Attenuator_State_OutputPowerTotal) GetMax() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *OpticalAttenuator_Attenuators_Attenuator_State_OutputPowerTotal) GetMaxTime() *ywrapper.UintValue {
	if x != nil {
		return x.MaxTime
	}
	return nil
}

func (x *OpticalAttenuator_Attenuators_Attenuator_State_OutputPowerTotal) GetMin() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *OpticalAttenuator_Attenuators_Attenuator_State_OutputPowerTotal) GetMinTime() *ywrapper.UintValue {
	if x != nil {
		return x.MinTime
	}
	return nil
}

var File_openconfig_optical_attenuator_proto protoreflect.FileDescriptor

var file_openconfig_optical_attenuator_proto_rawDesc = []byte{
	0x0a, 0x23, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x1a, 0x0e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0a, 0x79, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9c, 0x2e, 0x0a, 0x11, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x72, 0x0a, 0x0b, 0x61,
	0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0xb7, 0x89, 0xe7, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x42, 0x22,
	0x82, 0x41, 0x1f, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x74, 0x74, 0x65,
	0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x1a,
	0x92, 0x2d, 0x0a, 0x0b, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12,
	0x89, 0x01, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x18, 0xe7,
	0xea, 0xf7, 0x42, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x74, 0x74, 0x65,
	0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x4b, 0x65, 0x79,
	0x42, 0x2d, 0x82, 0x41, 0x2a, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x74,
	0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61,
	0x74, 0x6f, 0x72, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x52,
	0x0a, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x1a, 0xc6, 0x2a, 0x0a, 0x0a,
	0x41, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x8c, 0x01, 0x0a, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xf8, 0xcd, 0xd1, 0x6d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x74,
	0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x75,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x34, 0x82, 0x41, 0x31,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61,
	0x74, 0x6f, 0x72, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f,
	0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x88, 0x01, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x91, 0xca, 0xc0, 0x49, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x74, 0x74, 0x65,
	0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x33, 0x82, 0x41, 0x30, 0x2f, 0x6f, 0x70,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72,
	0x2f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x61, 0x74, 0x74,
	0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x1a, 0xaf, 0x05, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x7f, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x8d,
	0xab, 0x80, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61,
	0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75,
	0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0xb2, 0x01, 0x0a, 0x10, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0xd7, 0xef, 0xe7, 0xdb, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x74,
	0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x4f, 0x50, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x41,
	0x54, 0x54, 0x45, 0x4e, 0x55, 0x41, 0x54, 0x4f, 0x52, 0x4d, 0x4f, 0x44, 0x45, 0x42, 0x45, 0x82,
	0x41, 0x42, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x74, 0x74, 0x65, 0x6e,
	0x75, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72,
	0x73, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d,
	0x6d, 0x6f, 0x64, 0x65, 0x52, 0x0f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x6e, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0xaa, 0x85, 0x8a, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3c,
	0x82, 0x41, 0x39, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x74, 0x74, 0x65,
	0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x67, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xc2, 0xe0,
	0xac, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x39, 0x82,
	0x41, 0x36, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x74, 0x74, 0x65, 0x6e,
	0x75, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72,
	0x73, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x95,
	0x01, 0x0a, 0x13, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0xfa, 0xcc, 0xe6, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x48, 0x82, 0x41, 0x45, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f,
	0x72, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x61, 0x74,
	0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x52, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x1a, 0xeb, 0x22, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0xc7, 0x01, 0x0a, 0x12, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x61, 0x74, 0x74, 0x65,
	0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xf5, 0xbb, 0x81, 0xb6, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x4c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f,
	0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x41, 0x74, 0x74,
	0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x63,
	0x74, 0x75, 0x61, 0x6c, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x46, 0x82, 0x41, 0x43, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x74, 0x74,
	0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x2d, 0x61, 0x74, 0x74, 0x65,
	0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x41,
	0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7e, 0x0a, 0x0b, 0x61, 0x74,
	0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xbc, 0x95, 0xb5, 0x18, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3f, 0x82, 0x41,
	0x3c, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75,
	0x61, 0x74, 0x6f, 0x72, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x73,
	0x2f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61,
	0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xb1, 0x01, 0x0a, 0x10, 0x61,
	0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0xac, 0xc5, 0x83, 0x85, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74,
	0x6f, 0x72, 0x4f, 0x50, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x41, 0x54, 0x54, 0x45, 0x4e, 0x55, 0x41,
	0x54, 0x4f, 0x52, 0x4d, 0x4f, 0x44, 0x45, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x6f, 0x70, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x2f,
	0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x65,
	0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74,
	0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x52, 0x0f, 0x61,
	0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x75,
	0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0xb1, 0x94, 0xfa, 0x1a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3d, 0x82, 0x41, 0x3a,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61,
	0x74, 0x6f, 0x72, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f,
	0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x7a, 0x0a, 0x0b, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x9f, 0xc2, 0xdb, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x2d, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x61, 0x74, 0x74,
	0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61,
	0x74, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0a, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x6e, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xc7, 0xc1, 0xe0,
	0xd0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3b, 0x82, 0x41, 0x38,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61,
	0x74, 0x6f, 0x72, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f,
	0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x7e, 0x0a, 0x0c, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x97, 0xeb, 0xf7, 0xda, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d,
	0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x6e,
	0x75, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f,
	0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x0b, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x66, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xa5, 0x8f, 0xff, 0x6d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x38, 0x82, 0x41, 0x35, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f,
	0x72, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x61, 0x74,
	0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e,
	0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0xc9, 0x01, 0x0a, 0x13, 0x6f, 0x70,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6c, 0x6f, 0x73,
	0x73, 0x18, 0xfd, 0xe3, 0xb8, 0xc1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x41, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x6e,
	0x75, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x4c, 0x6f, 0x73, 0x73, 0x42, 0x47, 0x82, 0x41, 0x44, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f,
	0x72, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x61, 0x74,
	0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x2d, 0x6c, 0x6f,
	0x73, 0x73, 0x52, 0x11, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0xc4, 0x01, 0x0a, 0x12, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x86, 0x87, 0xbe,
	0x52, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x75,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x73,
	0x2e, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d,
	0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x6e,
	0x75, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f,
	0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x2d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x95, 0x01, 0x0a,
	0x13, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x18, 0xc3, 0xc5, 0xf3, 0xd4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x47, 0x82, 0x41, 0x44, 0x2f, 0x6f, 0x70,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72,
	0x2f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x61, 0x74, 0x74,
	0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x2d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x52, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x1a, 0xa0, 0x07, 0x0a, 0x11, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x41,
	0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7a, 0x0a, 0x03, 0x61, 0x76,
	0x67, 0x18, 0xf8, 0xb7, 0xdc, 0xe4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4a, 0x82, 0x41, 0x47, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x2d, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x61, 0x74,
	0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75,
	0x61, 0x74, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x63, 0x74, 0x75, 0x61,
	0x6c, 0x2d, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x61, 0x76,
	0x67, 0x52, 0x03, 0x61, 0x76, 0x67, 0x12, 0x85, 0x01, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x18, 0xa3, 0xf1, 0xed, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x2d, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x61, 0x74,
	0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75,
	0x61, 0x74, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x63, 0x74, 0x75, 0x61,
	0x6c, 0x2d, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x83,
	0x01, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x83, 0xe5, 0xb6, 0x15,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f,
	0x72, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x61, 0x74,
	0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61,
	0x63, 0x74, 0x75, 0x61, 0x6c, 0x2d, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x7a, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0xba, 0xa3, 0xd5, 0x8d,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x4a, 0x82, 0x41, 0x47, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x74, 0x74,
	0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x2d, 0x61, 0x74, 0x74, 0x65,
	0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x61, 0x78, 0x52, 0x03, 0x6d, 0x61, 0x78,
	0x12, 0x83, 0x01, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xb0, 0xa0,
	0xeb, 0xee, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4f, 0x82, 0x41,
	0x4c, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75,
	0x61, 0x74, 0x6f, 0x72, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x73,
	0x2f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x2d, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d,
	0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x7a, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0xb4, 0xbc,
	0xd5, 0xcd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x4a, 0x82, 0x41, 0x47, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61,
	0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75,
	0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x2d, 0x61, 0x74,
	0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x69, 0x6e, 0x52, 0x03, 0x6d,
	0x69, 0x6e, 0x12, 0x82, 0x01, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0xde, 0xb6, 0xde, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4f, 0x82,
	0x41, 0x4c, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x74, 0x74, 0x65, 0x6e,
	0x75, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72,
	0x73, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x2d, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x69, 0x6e, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07,
	0x6d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0xa7, 0x07, 0x0a, 0x11, 0x4f, 0x70, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x7b, 0x0a,
	0x03, 0x61, 0x76, 0x67, 0x18, 0xf0, 0xf4, 0xa7, 0xa7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4b, 0x82, 0x41, 0x48, 0x2f, 0x6f, 0x70,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72,
	0x2f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x61, 0x74, 0x74,
	0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x2d, 0x6c, 0x6f, 0x73,
	0x73, 0x2f, 0x61, 0x76, 0x67, 0x52, 0x03, 0x61, 0x76, 0x67, 0x12, 0x87, 0x01, 0x0a, 0x07, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x8b, 0xba, 0xe0, 0xd2, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f,
	0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74,
	0x6f, 0x72, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x61,
	0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x2d, 0x6c,
	0x6f, 0x73, 0x73, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x07, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x12, 0x85, 0x01, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0xbb, 0x99, 0xbe, 0x83, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x50, 0x82, 0x41, 0x4d, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x74,
	0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61,
	0x74, 0x6f, 0x72, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x2d, 0x6c, 0x6f, 0x73, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x7a, 0x0a, 0x03,
	0x6d, 0x61, 0x78, 0x18, 0x92, 0xb6, 0xfd, 0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4b, 0x82, 0x41, 0x48, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x2d, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x61,
	0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x6e,
	0x75, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x2d, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x2d, 0x6c, 0x6f, 0x73, 0x73, 0x2f,
	0x6d, 0x61, 0x78, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x84, 0x01, 0x0a, 0x08, 0x6d, 0x61, 0x78,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xc8, 0xd9, 0xf8, 0xff, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x50, 0x82, 0x41, 0x4d, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x2d, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x61, 0x74, 0x74,
	0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61,
	0x74, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x2d, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x2d, 0x6c, 0x6f, 0x73, 0x73, 0x2f, 0x6d, 0x61,
	0x78, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x7a, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0xbc, 0x9d, 0xfd, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4b, 0x82, 0x41, 0x48, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f,
	0x72, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x61, 0x74,
	0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x2d, 0x6c, 0x6f,
	0x73, 0x73, 0x2f, 0x6d, 0x69, 0x6e, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x83, 0x01, 0x0a, 0x08,
	0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xe6, 0xd7, 0xd1, 0x76, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x50, 0x82, 0x41, 0x4d, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x2d, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x61,
	0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x6e,
	0x75, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x2d, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x2d, 0x6c, 0x6f, 0x73, 0x73, 0x2f,
	0x6d, 0x69, 0x6e, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x1a, 0xa0, 0x07, 0x0a, 0x10, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x7a, 0x0a, 0x03, 0x61, 0x76, 0x67, 0x18, 0xab, 0xe3,
	0xbf, 0xee, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x4a, 0x82, 0x41, 0x47, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61,
	0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75,
	0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x2d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2f, 0x61, 0x76, 0x67, 0x52, 0x03, 0x61,
	0x76, 0x67, 0x12, 0x86, 0x01, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0xb4,
	0x8f, 0xe0, 0x85, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d,
	0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x6e,
	0x75, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f,
	0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x2d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x84, 0x01, 0x0a, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0xd2, 0xb9, 0xe1, 0xce, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x6f, 0x70, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x2f,
	0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x65,
	0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x79, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0xf5, 0xf9, 0xea, 0x26, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4a, 0x82, 0x41,
	0x47, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75,
	0x61, 0x74, 0x6f, 0x72, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x73,
	0x2f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x2f, 0x6d, 0x61, 0x78, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x82, 0x01,
	0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xe5, 0xcc, 0xf0, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x6f, 0x70,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72,
	0x2f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x61, 0x74, 0x74,
	0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x7a, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x9b, 0xdf, 0xea, 0xe6, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4a, 0x82,
	0x41, 0x47, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x74, 0x74, 0x65, 0x6e,
	0x75, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72,
	0x73, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2f, 0x6d, 0x69, 0x6e, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x83,
	0x01, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xc7, 0xd8, 0xc3, 0x86,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f,
	0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74,
	0x6f, 0x72, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x61,
	0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x2f, 0x6d, 0x69, 0x6e, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x69, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x1a, 0xad, 0x01, 0x0a, 0x0d, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61,
	0x74, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x46, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0x82, 0x41, 0x2f, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x2d, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x61, 0x74, 0x74,
	0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61,
	0x74, 0x6f, 0x72, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x54,
	0x0a, 0x0a, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x41, 0x74,
	0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75,
	0x61, 0x74, 0x6f, 0x72, 0x42, 0x17, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x6f, 0x63, 0x73,
	0x79, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_openconfig_optical_attenuator_proto_rawDescOnce sync.Once
	file_openconfig_optical_attenuator_proto_rawDescData = file_openconfig_optical_attenuator_proto_rawDesc
)

func file_openconfig_optical_attenuator_proto_rawDescGZIP() []byte {
	file_openconfig_optical_attenuator_proto_rawDescOnce.Do(func() {
		file_openconfig_optical_attenuator_proto_rawDescData = protoimpl.X.CompressGZIP(file_openconfig_optical_attenuator_proto_rawDescData)
	})
	return file_openconfig_optical_attenuator_proto_rawDescData
}

var file_openconfig_optical_attenuator_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_openconfig_optical_attenuator_proto_goTypes = []interface{}{
	(*OpticalAttenuator)(nil),                                                // 0: openconfig.OpticalAttenuator
	(*OpticalAttenuator_Attenuators)(nil),                                    // 1: openconfig.OpticalAttenuator.Attenuators
	(*OpticalAttenuator_Attenuators_Attenuator)(nil),                         // 2: openconfig.OpticalAttenuator.Attenuators.Attenuator
	(*OpticalAttenuator_Attenuators_AttenuatorKey)(nil),                      // 3: openconfig.OpticalAttenuator.Attenuators.AttenuatorKey
	(*OpticalAttenuator_Attenuators_Attenuator_Config)(nil),                  // 4: openconfig.OpticalAttenuator.Attenuators.Attenuator.Config
	(*OpticalAttenuator_Attenuators_Attenuator_State)(nil),                   // 5: openconfig.OpticalAttenuator.Attenuators.Attenuator.State
	(*OpticalAttenuator_Attenuators_Attenuator_State_ActualAttenuation)(nil), // 6: openconfig.OpticalAttenuator.Attenuators.Attenuator.State.ActualAttenuation
	(*OpticalAttenuator_Attenuators_Attenuator_State_OpticalReturnLoss)(nil), // 7: openconfig.OpticalAttenuator.Attenuators.Attenuator.State.OpticalReturnLoss
	(*OpticalAttenuator_Attenuators_Attenuator_State_OutputPowerTotal)(nil),  // 8: openconfig.OpticalAttenuator.Attenuators.Attenuator.State.OutputPowerTotal
	(*ywrapper.Decimal64Value)(nil),                                          // 9: ywrapper.Decimal64Value
	(OpenconfigOpticalAttenuatorOPTICALATTENUATORMODE)(0),                    // 10: openconfig.OpenconfigOpticalAttenuatorOPTICALATTENUATORMODE
	(*ywrapper.BoolValue)(nil),                                               // 11: ywrapper.BoolValue
	(*ywrapper.StringValue)(nil),                                             // 12: ywrapper.StringValue
	(*ywrapper.UintValue)(nil),                                               // 13: ywrapper.UintValue
}
var file_openconfig_optical_attenuator_proto_depIdxs = []int32{
	1,  // 0: openconfig.OpticalAttenuator.attenuators:type_name -> openconfig.OpticalAttenuator.Attenuators
	3,  // 1: openconfig.OpticalAttenuator.Attenuators.attenuator:type_name -> openconfig.OpticalAttenuator.Attenuators.AttenuatorKey
	4,  // 2: openconfig.OpticalAttenuator.Attenuators.Attenuator.config:type_name -> openconfig.OpticalAttenuator.Attenuators.Attenuator.Config
	5,  // 3: openconfig.OpticalAttenuator.Attenuators.Attenuator.state:type_name -> openconfig.OpticalAttenuator.Attenuators.Attenuator.State
	2,  // 4: openconfig.OpticalAttenuator.Attenuators.AttenuatorKey.attenuator:type_name -> openconfig.OpticalAttenuator.Attenuators.Attenuator
	9,  // 5: openconfig.OpticalAttenuator.Attenuators.Attenuator.Config.attenuation:type_name -> ywrapper.Decimal64Value
	10, // 6: openconfig.OpticalAttenuator.Attenuators.Attenuator.Config.attenuation_mode:type_name -> openconfig.OpenconfigOpticalAttenuatorOPTICALATTENUATORMODE
	11, // 7: openconfig.OpticalAttenuator.Attenuators.Attenuator.Config.enabled:type_name -> ywrapper.BoolValue
	12, // 8: openconfig.OpticalAttenuator.Attenuators.Attenuator.Config.name:type_name -> ywrapper.StringValue
	9,  // 9: openconfig.OpticalAttenuator.Attenuators.Attenuator.Config.target_output_power:type_name -> ywrapper.Decimal64Value
	6,  // 10: openconfig.OpticalAttenuator.Attenuators.Attenuator.State.actual_attenuation:type_name -> openconfig.OpticalAttenuator.Attenuators.Attenuator.State.ActualAttenuation
	9,  // 11: openconfig.OpticalAttenuator.Attenuators.Attenuator.State.attenuation:type_name -> ywrapper.Decimal64Value
	10, // 12: openconfig.OpticalAttenuator.Attenuators.Attenuator.State.attenuation_mode:type_name -> openconfig.OpenconfigOpticalAttenuatorOPTICALATTENUATORMODE
	12, // 13: openconfig.OpticalAttenuator.Attenuators.Attenuator.State.component:type_name -> ywrapper.StringValue
	12, // 14: openconfig.OpticalAttenuator.Attenuators.Attenuator.State.egress_port:type_name -> ywrapper.StringValue
	11, // 15: openconfig.OpticalAttenuator.Attenuators.Attenuator.State.enabled:type_name -> ywrapper.BoolValue
	12, // 16: openconfig.OpticalAttenuator.Attenuators.Attenuator.State.ingress_port:type_name -> ywrapper.StringValue
	12, // 17: openconfig.OpticalAttenuator.Attenuators.Attenuator.State.name:type_name -> ywrapper.StringValue
	7,  // 18: openconfig.OpticalAttenuator.Attenuators.Attenuator.State.optical_return_loss:type_name -> openconfig.OpticalAttenuator.Attenuators.Attenuator.State.OpticalReturnLoss
	8,  // 19: openconfig.OpticalAttenuator.Attenuators.Attenuator.State.output_power_total:type_name -> openconfig.OpticalAttenuator.Attenuators.Attenuator.State.OutputPowerTotal
	9,  // 20: openconfig.OpticalAttenuator.Attenuators.Attenuator.State.target_output_power:type_name -> ywrapper.Decimal64Value
	9,  // 21: openconfig.OpticalAttenuator.Attenuators.Attenuator.State.ActualAttenuation.avg:type_name -> ywrapper.Decimal64Value
	9,  // 22: openconfig.OpticalAttenuator.Attenuators.Attenuator.State.ActualAttenuation.instant:type_name -> ywrapper.Decimal64Value
	13, // 23: openconfig.OpticalAttenuator.Attenuators.Attenuator.State.ActualAttenuation.interval:type_name -> ywrapper.UintValue
	9,  // 24: openconfig.OpticalAttenuator.Attenuators.Attenuator.State.ActualAttenuation.max:type_name -> ywrapper.Decimal64Value
	13, // 25: openconfig.OpticalAttenuator.Attenuators.Attenuator.State.ActualAttenuation.max_time:type_name -> ywrapper.UintValue
	9,  // 26: openconfig.OpticalAttenuator.Attenuators.Attenuator.State.ActualAttenuation.min:type_name -> ywrapper.Decimal64Value
	13, // 27: openconfig.OpticalAttenuator.Attenuators.Attenuator.State.ActualAttenuation.min_time:type_name -> ywrapper.UintValue
	9,  // 28: openconfig.OpticalAttenuator.Attenuators.Attenuator.State.OpticalReturnLoss.avg:type_name -> ywrapper.Decimal64Value
	9,  // 29: openconfig.OpticalAttenuator.Attenuators.Attenuator.State.OpticalReturnLoss.instant:type_name -> ywrapper.Decimal64Value
	13, // 30: openconfig.OpticalAttenuator.Attenuators.Attenuator.State.OpticalReturnLoss.interval:type_name -> ywrapper.UintValue
	9,  // 31: openconfig.OpticalAttenuator.Attenuators.Attenuator.State.OpticalReturnLoss.max:type_name -> ywrapper.Decimal64Value
	13, // 32: openconfig.OpticalAttenuator.Attenuators.Attenuator.State.OpticalReturnLoss.max_time:type_name -> ywrapper.UintValue
	9,  // 33: openconfig.OpticalAttenuator.Attenuators.Attenuator.State.OpticalReturnLoss.min:type_name -> ywrapper.Decimal64Value
	13, // 34: openconfig.OpticalAttenuator.Attenuators.Attenuator.State.OpticalReturnLoss.min_time:type_name -> ywrapper.UintValue
	9,  // 35: openconfig.OpticalAttenuator.Attenuators.Attenuator.State.OutputPowerTotal.avg:type_name -> ywrapper.Decimal64Value
	9,  // 36: openconfig.OpticalAttenuator.Attenuators.Attenuator.State.OutputPowerTotal.instant:type_name -> ywrapper.Decimal64Value
	13, // 37: openconfig.OpticalAttenuator.Attenuators.Attenuator.State.OutputPowerTotal.interval:type_name -> ywrapper.UintValue
	9,  // 38: openconfig.OpticalAttenuator.Attenuators.Attenuator.State.OutputPowerTotal.max:type_name -> ywrapper.Decimal64Value
	13, // 39: openconfig.OpticalAttenuator.Attenuators.Attenuator.State.OutputPowerTotal.max_time:type_name -> ywrapper.UintValue
	9,  // 40: openconfig.OpticalAttenuator.Attenuators.Attenuator.State.OutputPowerTotal.min:type_name -> ywrapper.Decimal64Value
	13, // 41: openconfig.OpticalAttenuator.Attenuators.Attenuator.State.OutputPowerTotal.min_time:type_name -> ywrapper.UintValue
	42, // [42:42] is the sub-list for method output_type
	42, // [42:42] is the sub-list for method input_type
	42, // [42:42] is the sub-list for extension type_name
	42, // [42:42] is the sub-list for extension extendee
	0,  // [0:42] is the sub-list for field type_name
}

func init() { file_openconfig_optical_attenuator_proto_init() }
func file_openconfig_optical_attenuator_proto_init() {
	if File_openconfig_optical_attenuator_proto != nil {
		return
	}
	file_openconfig_enums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_openconfig_optical_attenuator_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpticalAttenuator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_optical_attenuator_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpticalAttenuator_Attenuators); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_optical_attenuator_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpticalAttenuator_Attenuators_Attenuator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_optical_attenuator_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpticalAttenuator_Attenuators_AttenuatorKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_optical_attenuator_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpticalAttenuator_Attenuators_Attenuator_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_optical_attenuator_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpticalAttenuator_Attenuators_Attenuator_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_optical_attenuator_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpticalAttenuator_Attenuators_Attenuator_State_ActualAttenuation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_optical_attenuator_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpticalAttenuator_Attenuators_Attenuator_State_OpticalReturnLoss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_optical_attenuator_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpticalAttenuator_Attenuators_Attenuator_State_OutputPowerTotal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_openconfig_optical_attenuator_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_openconfig_optical_attenuator_proto_goTypes,
		DependencyIndexes: file_openconfig_optical_attenuator_proto_depIdxs,
		MessageInfos:      file_openconfig_optical_attenuator_proto_msgTypes,
	}.Build()
	File_openconfig_optical_attenuator_proto = out.File
	file_openconfig_optical_attenuator_proto_rawDesc = nil
	file_openconfig_optical_attenuator_proto_goTypes = nil
	file_openconfig_optical_attenuator_proto_depIdxs = nil
}
