// openconfig.openconfig_qos is generated by proto_generator as a protobuf
// representation of a YANG schema.
//
// Input schema modules:
//  - ../api/yang/public/doc/openconfig-example.yang
//  - ../api/yang/public/third_party/ietf/iana-if-type.yang
//  - ../api/yang/public/third_party/ietf/ietf-interfaces.yang
//  - ../api/yang/public/third_party/ietf/ietf-yang-types.yang
//  - ../api/yang/public/third_party/ietf/ietf-inet-types.yang
//  - ../api/yang/public/release/models/bfd/openconfig-bfd.yang
//  - ../api/yang/public/release/models/vlan/openconfig-vlan.yang
//  - ../api/yang/public/release/models/vlan/openconfig-vlan-types.yang
//  - ../api/yang/public/release/models/wifi/openconfig-access-points.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-mac.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-types.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-phy.yang
//  - ../api/yang/public/release/models/wifi/openconfig-ap-interfaces.yang
//  - ../api/yang/public/release/models/wifi/openconfig-ap-manager.yang
//  - ../api/yang/public/release/models/macsec/openconfig-macsec.yang
//  - ../api/yang/public/release/models/macsec/openconfig-macsec-types.yang
//  - ../api/yang/public/release/models/stp/openconfig-spanning-tree-types.yang
//  - ../api/yang/public/release/models/stp/openconfig-spanning-tree.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-errors.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-peer-group.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-types.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-global.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-neighbor.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common-structure.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-policy.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common-multiprotocol.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-types.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-port.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-fan.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-linecard.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-ext.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-cpu.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-psu.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-transceiver.yang
//  - ../api/yang/public/release/models/multicast/openconfig-pim-types.yang
//  - ../api/yang/public/release/models/multicast/openconfig-igmp-types.yang
//  - ../api/yang/public/release/models/multicast/openconfig-igmp.yang
//  - ../api/yang/public/release/models/multicast/openconfig-pim.yang
//  - ../api/yang/public/release/models/catalog/openconfig-module-catalog.yang
//  - ../api/yang/public/release/models/catalog/openconfig-catalog-types.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-interfaces.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-8021x.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-types.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-aggregate.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-poe.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-tunnel.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ip.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ethernet.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ethernet-ext.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ip-ext.yang
//  - ../api/yang/public/release/models/acl/openconfig-packet-match-types.yang
//  - ../api/yang/public/release/models/acl/openconfig-packet-match.yang
//  - ../api/yang/public/release/models/acl/openconfig-acl.yang
//  - ../api/yang/public/release/models/system/openconfig-license.yang
//  - ../api/yang/public/release/models/system/openconfig-system.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-radius.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa.yang
//  - ../api/yang/public/release/models/system/openconfig-system-management.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-types.yang
//  - ../api/yang/public/release/models/system/openconfig-procmon.yang
//  - ../api/yang/public/release/models/system/openconfig-messages.yang
//  - ../api/yang/public/release/models/system/openconfig-system-terminal.yang
//  - ../api/yang/public/release/models/system/openconfig-system-logging.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-tacacs.yang
//  - ../api/yang/public/release/models/system/openconfig-alarms.yang
//  - ../api/yang/public/release/models/system/openconfig-alarm-types.yang
//  - ../api/yang/public/release/models/policy/openconfig-policy-types.yang
//  - ../api/yang/public/release/models/policy/openconfig-routing-policy.yang
//  - ../api/yang/public/release/models/lacp/openconfig-lacp.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-wavelength-router.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-optical-amplifier.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-protection.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-channel-monitor.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-connectivity.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-optical-attenuator.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-common.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-types.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-terminal-device.yang
//  - ../api/yang/public/release/models/telemetry/openconfig-telemetry-types.yang
//  - ../api/yang/public/release/models/telemetry/openconfig-telemetry.yang
//  - ../api/yang/public/release/models/openflow/openconfig-openflow.yang
//  - ../api/yang/public/release/models/openflow/openconfig-openflow-types.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-tables.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-ext.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-table-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-shared-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-types.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-types.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-elements.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-interfaces.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-srte.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-forwarding-policies.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-interfaces.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-path-groups.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
//  - ../api/yang/public/release/models/relay-agent/openconfig-relay-agent.yang
//  - ../api/yang/public/release/models/lldp/openconfig-lldp.yang
//  - ../api/yang/public/release/models/lldp/openconfig-lldp-types.yang
//  - ../api/yang/public/release/models/openconfig-extensions.yang
//  - ../api/yang/public/release/models/types/openconfig-yang-types.yang
//  - ../api/yang/public/release/models/types/openconfig-inet-types.yang
//  - ../api/yang/public/release/models/types/openconfig-types.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-srte-policy.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-rsvp-sr-ext.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-segment-routing-types.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-segment-routing.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-types.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-igp.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-te.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-rsvp.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-static.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-sr.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-ldp.yang
//  - ../api/yang/public/release/models/probes/openconfig-probes-types.yang
//  - ../api/yang/public/release/models/probes/openconfig-probes.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-lsp.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-lsdb-types.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-policy.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-types.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-routing.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-area.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospf-policy.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-common.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-global.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-area-interface.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-lsdb.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospf-types.yang
//  - ../api/yang/public/release/models/local-routing/openconfig-local-routing.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-l3.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-l2.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-policy.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-types.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-mpls.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-common.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-types.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ipv6.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-pf.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-network-instance.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ipv4.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ethernet.yang

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        (unknown)
// source: openconfig_qos.proto

package openconfig

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/openconfig/ygot/proto/yext"
	ywrapper "github.com/openconfig/ygot/proto/ywrapper"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Qos_Classifiers_Classifier_Config_Type int32

const (
	Qos_Classifiers_Classifier_Config_TYPE_UNSET    Qos_Classifiers_Classifier_Config_Type = 0
	Qos_Classifiers_Classifier_Config_TYPE_IPV4     Qos_Classifiers_Classifier_Config_Type = 1
	Qos_Classifiers_Classifier_Config_TYPE_IPV6     Qos_Classifiers_Classifier_Config_Type = 2
	Qos_Classifiers_Classifier_Config_TYPE_MPLS     Qos_Classifiers_Classifier_Config_Type = 3
	Qos_Classifiers_Classifier_Config_TYPE_ETHERNET Qos_Classifiers_Classifier_Config_Type = 4
)

// Enum value maps for Qos_Classifiers_Classifier_Config_Type.
var (
	Qos_Classifiers_Classifier_Config_Type_name = map[int32]string{
		0: "TYPE_UNSET",
		1: "TYPE_IPV4",
		2: "TYPE_IPV6",
		3: "TYPE_MPLS",
		4: "TYPE_ETHERNET",
	}
	Qos_Classifiers_Classifier_Config_Type_value = map[string]int32{
		"TYPE_UNSET":    0,
		"TYPE_IPV4":     1,
		"TYPE_IPV6":     2,
		"TYPE_MPLS":     3,
		"TYPE_ETHERNET": 4,
	}
)

func (x Qos_Classifiers_Classifier_Config_Type) Enum() *Qos_Classifiers_Classifier_Config_Type {
	p := new(Qos_Classifiers_Classifier_Config_Type)
	*p = x
	return p
}

func (x Qos_Classifiers_Classifier_Config_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_Classifiers_Classifier_Config_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_qos_proto_enumTypes[0].Descriptor()
}

func (Qos_Classifiers_Classifier_Config_Type) Type() protoreflect.EnumType {
	return &file_openconfig_qos_proto_enumTypes[0]
}

func (x Qos_Classifiers_Classifier_Config_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_Classifiers_Classifier_Config_Type.Descriptor instead.
func (Qos_Classifiers_Classifier_Config_Type) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0}
}

type Qos_Classifiers_Classifier_State_Type int32

const (
	Qos_Classifiers_Classifier_State_TYPE_UNSET    Qos_Classifiers_Classifier_State_Type = 0
	Qos_Classifiers_Classifier_State_TYPE_IPV4     Qos_Classifiers_Classifier_State_Type = 1
	Qos_Classifiers_Classifier_State_TYPE_IPV6     Qos_Classifiers_Classifier_State_Type = 2
	Qos_Classifiers_Classifier_State_TYPE_MPLS     Qos_Classifiers_Classifier_State_Type = 3
	Qos_Classifiers_Classifier_State_TYPE_ETHERNET Qos_Classifiers_Classifier_State_Type = 4
)

// Enum value maps for Qos_Classifiers_Classifier_State_Type.
var (
	Qos_Classifiers_Classifier_State_Type_name = map[int32]string{
		0: "TYPE_UNSET",
		1: "TYPE_IPV4",
		2: "TYPE_IPV6",
		3: "TYPE_MPLS",
		4: "TYPE_ETHERNET",
	}
	Qos_Classifiers_Classifier_State_Type_value = map[string]int32{
		"TYPE_UNSET":    0,
		"TYPE_IPV4":     1,
		"TYPE_IPV6":     2,
		"TYPE_MPLS":     3,
		"TYPE_ETHERNET": 4,
	}
)

func (x Qos_Classifiers_Classifier_State_Type) Enum() *Qos_Classifiers_Classifier_State_Type {
	p := new(Qos_Classifiers_Classifier_State_Type)
	*p = x
	return p
}

func (x Qos_Classifiers_Classifier_State_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_Classifiers_Classifier_State_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_qos_proto_enumTypes[1].Descriptor()
}

func (Qos_Classifiers_Classifier_State_Type) Type() protoreflect.EnumType {
	return &file_openconfig_qos_proto_enumTypes[1]
}

func (x Qos_Classifiers_Classifier_State_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_Classifiers_Classifier_State_Type.Descriptor instead.
func (Qos_Classifiers_Classifier_State_Type) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 0, 0, 1, 0}
}

type Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort int32

const (
	Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DESTINATIONPORT_UNSET Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort = 0
	Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DESTINATIONPORT_ANY   Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort = 1
)

// Enum value maps for Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort.
var (
	Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort_name = map[int32]string{
		0: "DESTINATIONPORT_UNSET",
		1: "DESTINATIONPORT_ANY",
	}
	Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort_value = map[string]int32{
		"DESTINATIONPORT_UNSET": 0,
		"DESTINATIONPORT_ANY":   1,
	}
)

func (x Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort) Enum() *Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort {
	p := new(Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort)
	*p = x
	return p
}

func (x Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_qos_proto_enumTypes[2].Descriptor()
}

func (Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort) Type() protoreflect.EnumType {
	return &file_openconfig_qos_proto_enumTypes[2]
}

func (x Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort.Descriptor instead.
func (Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0, 1, 4, 0, 0}
}

type Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort int32

const (
	Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SOURCEPORT_UNSET Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort = 0
	Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SOURCEPORT_ANY   Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort = 1
)

// Enum value maps for Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort.
var (
	Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort_name = map[int32]string{
		0: "SOURCEPORT_UNSET",
		1: "SOURCEPORT_ANY",
	}
	Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort_value = map[string]int32{
		"SOURCEPORT_UNSET": 0,
		"SOURCEPORT_ANY":   1,
	}
)

func (x Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort) Enum() *Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort {
	p := new(Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort)
	*p = x
	return p
}

func (x Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_qos_proto_enumTypes[3].Descriptor()
}

func (Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort) Type() protoreflect.EnumType {
	return &file_openconfig_qos_proto_enumTypes[3]
}

func (x Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort.Descriptor instead.
func (Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0, 1, 4, 0, 1}
}

type Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort int32

const (
	Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DESTINATIONPORT_UNSET Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort = 0
	Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DESTINATIONPORT_ANY   Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort = 1
)

// Enum value maps for Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort.
var (
	Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort_name = map[int32]string{
		0: "DESTINATIONPORT_UNSET",
		1: "DESTINATIONPORT_ANY",
	}
	Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort_value = map[string]int32{
		"DESTINATIONPORT_UNSET": 0,
		"DESTINATIONPORT_ANY":   1,
	}
)

func (x Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort) Enum() *Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort {
	p := new(Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort)
	*p = x
	return p
}

func (x Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_qos_proto_enumTypes[4].Descriptor()
}

func (Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort) Type() protoreflect.EnumType {
	return &file_openconfig_qos_proto_enumTypes[4]
}

func (x Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort.Descriptor instead.
func (Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0, 1, 4, 1, 0}
}

type Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort int32

const (
	Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SOURCEPORT_UNSET Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort = 0
	Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SOURCEPORT_ANY   Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort = 1
)

// Enum value maps for Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort.
var (
	Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort_name = map[int32]string{
		0: "SOURCEPORT_UNSET",
		1: "SOURCEPORT_ANY",
	}
	Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort_value = map[string]int32{
		"SOURCEPORT_UNSET": 0,
		"SOURCEPORT_ANY":   1,
	}
)

func (x Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort) Enum() *Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort {
	p := new(Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort)
	*p = x
	return p
}

func (x Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_qos_proto_enumTypes[5].Descriptor()
}

func (Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort) Type() protoreflect.EnumType {
	return &file_openconfig_qos_proto_enumTypes[5]
}

func (x Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort.Descriptor instead.
func (Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0, 1, 4, 1, 1}
}

type Qos_Interfaces_Interface_Input_Classifiers_Classifier_Config_Type int32

const (
	Qos_Interfaces_Interface_Input_Classifiers_Classifier_Config_TYPE_UNSET Qos_Interfaces_Interface_Input_Classifiers_Classifier_Config_Type = 0
	Qos_Interfaces_Interface_Input_Classifiers_Classifier_Config_TYPE_IPV4  Qos_Interfaces_Interface_Input_Classifiers_Classifier_Config_Type = 5
	Qos_Interfaces_Interface_Input_Classifiers_Classifier_Config_TYPE_IPV6  Qos_Interfaces_Interface_Input_Classifiers_Classifier_Config_Type = 7
	Qos_Interfaces_Interface_Input_Classifiers_Classifier_Config_TYPE_MPLS  Qos_Interfaces_Interface_Input_Classifiers_Classifier_Config_Type = 8
)

// Enum value maps for Qos_Interfaces_Interface_Input_Classifiers_Classifier_Config_Type.
var (
	Qos_Interfaces_Interface_Input_Classifiers_Classifier_Config_Type_name = map[int32]string{
		0: "TYPE_UNSET",
		5: "TYPE_IPV4",
		7: "TYPE_IPV6",
		8: "TYPE_MPLS",
	}
	Qos_Interfaces_Interface_Input_Classifiers_Classifier_Config_Type_value = map[string]int32{
		"TYPE_UNSET": 0,
		"TYPE_IPV4":  5,
		"TYPE_IPV6":  7,
		"TYPE_MPLS":  8,
	}
)

func (x Qos_Interfaces_Interface_Input_Classifiers_Classifier_Config_Type) Enum() *Qos_Interfaces_Interface_Input_Classifiers_Classifier_Config_Type {
	p := new(Qos_Interfaces_Interface_Input_Classifiers_Classifier_Config_Type)
	*p = x
	return p
}

func (x Qos_Interfaces_Interface_Input_Classifiers_Classifier_Config_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_Interfaces_Interface_Input_Classifiers_Classifier_Config_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_qos_proto_enumTypes[6].Descriptor()
}

func (Qos_Interfaces_Interface_Input_Classifiers_Classifier_Config_Type) Type() protoreflect.EnumType {
	return &file_openconfig_qos_proto_enumTypes[6]
}

func (x Qos_Interfaces_Interface_Input_Classifiers_Classifier_Config_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_Interfaces_Interface_Input_Classifiers_Classifier_Config_Type.Descriptor instead.
func (Qos_Interfaces_Interface_Input_Classifiers_Classifier_Config_Type) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0, 1, 0, 0, 0, 0}
}

type Qos_Interfaces_Interface_Input_Classifiers_Classifier_State_Type int32

const (
	Qos_Interfaces_Interface_Input_Classifiers_Classifier_State_TYPE_UNSET Qos_Interfaces_Interface_Input_Classifiers_Classifier_State_Type = 0
	Qos_Interfaces_Interface_Input_Classifiers_Classifier_State_TYPE_IPV4  Qos_Interfaces_Interface_Input_Classifiers_Classifier_State_Type = 5
	Qos_Interfaces_Interface_Input_Classifiers_Classifier_State_TYPE_IPV6  Qos_Interfaces_Interface_Input_Classifiers_Classifier_State_Type = 7
	Qos_Interfaces_Interface_Input_Classifiers_Classifier_State_TYPE_MPLS  Qos_Interfaces_Interface_Input_Classifiers_Classifier_State_Type = 8
)

// Enum value maps for Qos_Interfaces_Interface_Input_Classifiers_Classifier_State_Type.
var (
	Qos_Interfaces_Interface_Input_Classifiers_Classifier_State_Type_name = map[int32]string{
		0: "TYPE_UNSET",
		5: "TYPE_IPV4",
		7: "TYPE_IPV6",
		8: "TYPE_MPLS",
	}
	Qos_Interfaces_Interface_Input_Classifiers_Classifier_State_Type_value = map[string]int32{
		"TYPE_UNSET": 0,
		"TYPE_IPV4":  5,
		"TYPE_IPV6":  7,
		"TYPE_MPLS":  8,
	}
)

func (x Qos_Interfaces_Interface_Input_Classifiers_Classifier_State_Type) Enum() *Qos_Interfaces_Interface_Input_Classifiers_Classifier_State_Type {
	p := new(Qos_Interfaces_Interface_Input_Classifiers_Classifier_State_Type)
	*p = x
	return p
}

func (x Qos_Interfaces_Interface_Input_Classifiers_Classifier_State_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_Interfaces_Interface_Input_Classifiers_Classifier_State_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_qos_proto_enumTypes[7].Descriptor()
}

func (Qos_Interfaces_Interface_Input_Classifiers_Classifier_State_Type) Type() protoreflect.EnumType {
	return &file_openconfig_qos_proto_enumTypes[7]
}

func (x Qos_Interfaces_Interface_Input_Classifiers_Classifier_State_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_Interfaces_Interface_Input_Classifiers_Classifier_State_Type.Descriptor instead.
func (Qos_Interfaces_Interface_Input_Classifiers_Classifier_State_Type) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0, 1, 0, 0, 1, 0}
}

type Qos_Interfaces_Interface_Input_Classifiers_ClassifierKey_Type int32

const (
	Qos_Interfaces_Interface_Input_Classifiers_ClassifierKey_TYPE_UNSET Qos_Interfaces_Interface_Input_Classifiers_ClassifierKey_Type = 0
	Qos_Interfaces_Interface_Input_Classifiers_ClassifierKey_TYPE_IPV4  Qos_Interfaces_Interface_Input_Classifiers_ClassifierKey_Type = 5
	Qos_Interfaces_Interface_Input_Classifiers_ClassifierKey_TYPE_IPV6  Qos_Interfaces_Interface_Input_Classifiers_ClassifierKey_Type = 7
	Qos_Interfaces_Interface_Input_Classifiers_ClassifierKey_TYPE_MPLS  Qos_Interfaces_Interface_Input_Classifiers_ClassifierKey_Type = 8
)

// Enum value maps for Qos_Interfaces_Interface_Input_Classifiers_ClassifierKey_Type.
var (
	Qos_Interfaces_Interface_Input_Classifiers_ClassifierKey_Type_name = map[int32]string{
		0: "TYPE_UNSET",
		5: "TYPE_IPV4",
		7: "TYPE_IPV6",
		8: "TYPE_MPLS",
	}
	Qos_Interfaces_Interface_Input_Classifiers_ClassifierKey_Type_value = map[string]int32{
		"TYPE_UNSET": 0,
		"TYPE_IPV4":  5,
		"TYPE_IPV6":  7,
		"TYPE_MPLS":  8,
	}
)

func (x Qos_Interfaces_Interface_Input_Classifiers_ClassifierKey_Type) Enum() *Qos_Interfaces_Interface_Input_Classifiers_ClassifierKey_Type {
	p := new(Qos_Interfaces_Interface_Input_Classifiers_ClassifierKey_Type)
	*p = x
	return p
}

func (x Qos_Interfaces_Interface_Input_Classifiers_ClassifierKey_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_Interfaces_Interface_Input_Classifiers_ClassifierKey_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_qos_proto_enumTypes[8].Descriptor()
}

func (Qos_Interfaces_Interface_Input_Classifiers_ClassifierKey_Type) Type() protoreflect.EnumType {
	return &file_openconfig_qos_proto_enumTypes[8]
}

func (x Qos_Interfaces_Interface_Input_Classifiers_ClassifierKey_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_Interfaces_Interface_Input_Classifiers_ClassifierKey_Type.Descriptor instead.
func (Qos_Interfaces_Interface_Input_Classifiers_ClassifierKey_Type) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0, 1, 0, 1, 0}
}

type Qos_Interfaces_Interface_Output_Classifiers_Classifier_Config_Type int32

const (
	Qos_Interfaces_Interface_Output_Classifiers_Classifier_Config_TYPE_UNSET Qos_Interfaces_Interface_Output_Classifiers_Classifier_Config_Type = 0
	Qos_Interfaces_Interface_Output_Classifiers_Classifier_Config_TYPE_IPV4  Qos_Interfaces_Interface_Output_Classifiers_Classifier_Config_Type = 5
	Qos_Interfaces_Interface_Output_Classifiers_Classifier_Config_TYPE_IPV6  Qos_Interfaces_Interface_Output_Classifiers_Classifier_Config_Type = 7
	Qos_Interfaces_Interface_Output_Classifiers_Classifier_Config_TYPE_MPLS  Qos_Interfaces_Interface_Output_Classifiers_Classifier_Config_Type = 8
)

// Enum value maps for Qos_Interfaces_Interface_Output_Classifiers_Classifier_Config_Type.
var (
	Qos_Interfaces_Interface_Output_Classifiers_Classifier_Config_Type_name = map[int32]string{
		0: "TYPE_UNSET",
		5: "TYPE_IPV4",
		7: "TYPE_IPV6",
		8: "TYPE_MPLS",
	}
	Qos_Interfaces_Interface_Output_Classifiers_Classifier_Config_Type_value = map[string]int32{
		"TYPE_UNSET": 0,
		"TYPE_IPV4":  5,
		"TYPE_IPV6":  7,
		"TYPE_MPLS":  8,
	}
)

func (x Qos_Interfaces_Interface_Output_Classifiers_Classifier_Config_Type) Enum() *Qos_Interfaces_Interface_Output_Classifiers_Classifier_Config_Type {
	p := new(Qos_Interfaces_Interface_Output_Classifiers_Classifier_Config_Type)
	*p = x
	return p
}

func (x Qos_Interfaces_Interface_Output_Classifiers_Classifier_Config_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_Interfaces_Interface_Output_Classifiers_Classifier_Config_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_qos_proto_enumTypes[9].Descriptor()
}

func (Qos_Interfaces_Interface_Output_Classifiers_Classifier_Config_Type) Type() protoreflect.EnumType {
	return &file_openconfig_qos_proto_enumTypes[9]
}

func (x Qos_Interfaces_Interface_Output_Classifiers_Classifier_Config_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_Interfaces_Interface_Output_Classifiers_Classifier_Config_Type.Descriptor instead.
func (Qos_Interfaces_Interface_Output_Classifiers_Classifier_Config_Type) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0, 3, 0, 0, 0, 0}
}

type Qos_Interfaces_Interface_Output_Classifiers_Classifier_State_Type int32

const (
	Qos_Interfaces_Interface_Output_Classifiers_Classifier_State_TYPE_UNSET Qos_Interfaces_Interface_Output_Classifiers_Classifier_State_Type = 0
	Qos_Interfaces_Interface_Output_Classifiers_Classifier_State_TYPE_IPV4  Qos_Interfaces_Interface_Output_Classifiers_Classifier_State_Type = 5
	Qos_Interfaces_Interface_Output_Classifiers_Classifier_State_TYPE_IPV6  Qos_Interfaces_Interface_Output_Classifiers_Classifier_State_Type = 7
	Qos_Interfaces_Interface_Output_Classifiers_Classifier_State_TYPE_MPLS  Qos_Interfaces_Interface_Output_Classifiers_Classifier_State_Type = 8
)

// Enum value maps for Qos_Interfaces_Interface_Output_Classifiers_Classifier_State_Type.
var (
	Qos_Interfaces_Interface_Output_Classifiers_Classifier_State_Type_name = map[int32]string{
		0: "TYPE_UNSET",
		5: "TYPE_IPV4",
		7: "TYPE_IPV6",
		8: "TYPE_MPLS",
	}
	Qos_Interfaces_Interface_Output_Classifiers_Classifier_State_Type_value = map[string]int32{
		"TYPE_UNSET": 0,
		"TYPE_IPV4":  5,
		"TYPE_IPV6":  7,
		"TYPE_MPLS":  8,
	}
)

func (x Qos_Interfaces_Interface_Output_Classifiers_Classifier_State_Type) Enum() *Qos_Interfaces_Interface_Output_Classifiers_Classifier_State_Type {
	p := new(Qos_Interfaces_Interface_Output_Classifiers_Classifier_State_Type)
	*p = x
	return p
}

func (x Qos_Interfaces_Interface_Output_Classifiers_Classifier_State_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_Interfaces_Interface_Output_Classifiers_Classifier_State_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_qos_proto_enumTypes[10].Descriptor()
}

func (Qos_Interfaces_Interface_Output_Classifiers_Classifier_State_Type) Type() protoreflect.EnumType {
	return &file_openconfig_qos_proto_enumTypes[10]
}

func (x Qos_Interfaces_Interface_Output_Classifiers_Classifier_State_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_Interfaces_Interface_Output_Classifiers_Classifier_State_Type.Descriptor instead.
func (Qos_Interfaces_Interface_Output_Classifiers_Classifier_State_Type) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0, 3, 0, 0, 1, 0}
}

type Qos_Interfaces_Interface_Output_Classifiers_ClassifierKey_Type int32

const (
	Qos_Interfaces_Interface_Output_Classifiers_ClassifierKey_TYPE_UNSET Qos_Interfaces_Interface_Output_Classifiers_ClassifierKey_Type = 0
	Qos_Interfaces_Interface_Output_Classifiers_ClassifierKey_TYPE_IPV4  Qos_Interfaces_Interface_Output_Classifiers_ClassifierKey_Type = 5
	Qos_Interfaces_Interface_Output_Classifiers_ClassifierKey_TYPE_IPV6  Qos_Interfaces_Interface_Output_Classifiers_ClassifierKey_Type = 7
	Qos_Interfaces_Interface_Output_Classifiers_ClassifierKey_TYPE_MPLS  Qos_Interfaces_Interface_Output_Classifiers_ClassifierKey_Type = 8
)

// Enum value maps for Qos_Interfaces_Interface_Output_Classifiers_ClassifierKey_Type.
var (
	Qos_Interfaces_Interface_Output_Classifiers_ClassifierKey_Type_name = map[int32]string{
		0: "TYPE_UNSET",
		5: "TYPE_IPV4",
		7: "TYPE_IPV6",
		8: "TYPE_MPLS",
	}
	Qos_Interfaces_Interface_Output_Classifiers_ClassifierKey_Type_value = map[string]int32{
		"TYPE_UNSET": 0,
		"TYPE_IPV4":  5,
		"TYPE_IPV6":  7,
		"TYPE_MPLS":  8,
	}
)

func (x Qos_Interfaces_Interface_Output_Classifiers_ClassifierKey_Type) Enum() *Qos_Interfaces_Interface_Output_Classifiers_ClassifierKey_Type {
	p := new(Qos_Interfaces_Interface_Output_Classifiers_ClassifierKey_Type)
	*p = x
	return p
}

func (x Qos_Interfaces_Interface_Output_Classifiers_ClassifierKey_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_Interfaces_Interface_Output_Classifiers_ClassifierKey_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_qos_proto_enumTypes[11].Descriptor()
}

func (Qos_Interfaces_Interface_Output_Classifiers_ClassifierKey_Type) Type() protoreflect.EnumType {
	return &file_openconfig_qos_proto_enumTypes[11]
}

func (x Qos_Interfaces_Interface_Output_Classifiers_ClassifierKey_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_Interfaces_Interface_Output_Classifiers_ClassifierKey_Type.Descriptor instead.
func (Qos_Interfaces_Interface_Output_Classifiers_ClassifierKey_Type) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0, 3, 0, 1, 0}
}

type Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_Priority int32

const (
	Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_PRIORITY_UNSET  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_Priority = 0
	Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_PRIORITY_STRICT Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_Priority = 1
)

// Enum value maps for Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_Priority.
var (
	Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_Priority_name = map[int32]string{
		0: "PRIORITY_UNSET",
		1: "PRIORITY_STRICT",
	}
	Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_Priority_value = map[string]int32{
		"PRIORITY_UNSET":  0,
		"PRIORITY_STRICT": 1,
	}
)

func (x Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_Priority) Enum() *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_Priority {
	p := new(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_Priority)
	*p = x
	return p
}

func (x Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_Priority) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_Priority) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_qos_proto_enumTypes[12].Descriptor()
}

func (Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_Priority) Type() protoreflect.EnumType {
	return &file_openconfig_qos_proto_enumTypes[12]
}

func (x Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_Priority) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_Priority.Descriptor instead.
func (Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_Priority) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 5, 0, 1, 0, 0, 0}
}

type Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType int32

const (
	Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_INPUTTYPE_UNSET       Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType = 0
	Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_INPUTTYPE_QUEUE       Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType = 1
	Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_INPUTTYPE_IN_PROFILE  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType = 2
	Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_INPUTTYPE_OUT_PROFILE Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType = 3
)

// Enum value maps for Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType.
var (
	Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType_name = map[int32]string{
		0: "INPUTTYPE_UNSET",
		1: "INPUTTYPE_QUEUE",
		2: "INPUTTYPE_IN_PROFILE",
		3: "INPUTTYPE_OUT_PROFILE",
	}
	Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType_value = map[string]int32{
		"INPUTTYPE_UNSET":       0,
		"INPUTTYPE_QUEUE":       1,
		"INPUTTYPE_IN_PROFILE":  2,
		"INPUTTYPE_OUT_PROFILE": 3,
	}
)

func (x Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType) Enum() *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType {
	p := new(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType)
	*p = x
	return p
}

func (x Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_qos_proto_enumTypes[13].Descriptor()
}

func (Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType) Type() protoreflect.EnumType {
	return &file_openconfig_qos_proto_enumTypes[13]
}

func (x Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType.Descriptor instead.
func (Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 5, 0, 1, 0, 1, 0, 0, 0}
}

type Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType int32

const (
	Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_INPUTTYPE_UNSET       Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType = 0
	Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_INPUTTYPE_QUEUE       Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType = 1
	Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_INPUTTYPE_IN_PROFILE  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType = 2
	Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_INPUTTYPE_OUT_PROFILE Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType = 3
)

// Enum value maps for Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType.
var (
	Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType_name = map[int32]string{
		0: "INPUTTYPE_UNSET",
		1: "INPUTTYPE_QUEUE",
		2: "INPUTTYPE_IN_PROFILE",
		3: "INPUTTYPE_OUT_PROFILE",
	}
	Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType_value = map[string]int32{
		"INPUTTYPE_UNSET":       0,
		"INPUTTYPE_QUEUE":       1,
		"INPUTTYPE_IN_PROFILE":  2,
		"INPUTTYPE_OUT_PROFILE": 3,
	}
)

func (x Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType) Enum() *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType {
	p := new(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType)
	*p = x
	return p
}

func (x Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_qos_proto_enumTypes[14].Descriptor()
}

func (Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType) Type() protoreflect.EnumType {
	return &file_openconfig_qos_proto_enumTypes[14]
}

func (x Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType.Descriptor instead.
func (Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 5, 0, 1, 0, 1, 0, 1, 0}
}

type Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType int32

const (
	Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OUTPUTTYPE_UNSET     Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType = 0
	Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OUTPUTTYPE_SCHEDULER Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType = 1
	Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OUTPUTTYPE_FWD_GROUP Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType = 2
	Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OUTPUTTYPE_INTERFACE Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType = 3
)

// Enum value maps for Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType.
var (
	Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType_name = map[int32]string{
		0: "OUTPUTTYPE_UNSET",
		1: "OUTPUTTYPE_SCHEDULER",
		2: "OUTPUTTYPE_FWD_GROUP",
		3: "OUTPUTTYPE_INTERFACE",
	}
	Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType_value = map[string]int32{
		"OUTPUTTYPE_UNSET":     0,
		"OUTPUTTYPE_SCHEDULER": 1,
		"OUTPUTTYPE_FWD_GROUP": 2,
		"OUTPUTTYPE_INTERFACE": 3,
	}
)

func (x Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType) Enum() *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType {
	p := new(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType)
	*p = x
	return p
}

func (x Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_qos_proto_enumTypes[15].Descriptor()
}

func (Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType) Type() protoreflect.EnumType {
	return &file_openconfig_qos_proto_enumTypes[15]
}

func (x Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType.Descriptor instead.
func (Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 5, 0, 1, 0, 3, 0, 0}
}

type Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType int32

const (
	Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OUTPUTTYPE_UNSET     Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType = 0
	Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OUTPUTTYPE_SCHEDULER Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType = 1
	Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OUTPUTTYPE_FWD_GROUP Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType = 2
	Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OUTPUTTYPE_INTERFACE Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType = 3
)

// Enum value maps for Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType.
var (
	Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType_name = map[int32]string{
		0: "OUTPUTTYPE_UNSET",
		1: "OUTPUTTYPE_SCHEDULER",
		2: "OUTPUTTYPE_FWD_GROUP",
		3: "OUTPUTTYPE_INTERFACE",
	}
	Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType_value = map[string]int32{
		"OUTPUTTYPE_UNSET":     0,
		"OUTPUTTYPE_SCHEDULER": 1,
		"OUTPUTTYPE_FWD_GROUP": 2,
		"OUTPUTTYPE_INTERFACE": 3,
	}
)

func (x Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType) Enum() *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType {
	p := new(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType)
	*p = x
	return p
}

func (x Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_qos_proto_enumTypes[16].Descriptor()
}

func (Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType) Type() protoreflect.EnumType {
	return &file_openconfig_qos_proto_enumTypes[16]
}

func (x Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType.Descriptor instead.
func (Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 5, 0, 1, 0, 3, 1, 0}
}

type Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_Priority int32

const (
	Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_PRIORITY_UNSET  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_Priority = 0
	Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_PRIORITY_STRICT Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_Priority = 1
)

// Enum value maps for Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_Priority.
var (
	Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_Priority_name = map[int32]string{
		0: "PRIORITY_UNSET",
		1: "PRIORITY_STRICT",
	}
	Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_Priority_value = map[string]int32{
		"PRIORITY_UNSET":  0,
		"PRIORITY_STRICT": 1,
	}
)

func (x Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_Priority) Enum() *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_Priority {
	p := new(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_Priority)
	*p = x
	return p
}

func (x Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_Priority) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_Priority) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_qos_proto_enumTypes[17].Descriptor()
}

func (Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_Priority) Type() protoreflect.EnumType {
	return &file_openconfig_qos_proto_enumTypes[17]
}

func (x Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_Priority) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_Priority.Descriptor instead.
func (Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_Priority) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 5, 0, 1, 0, 4, 0}
}

type Qos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Classifiers       *Qos_Classifiers       `protobuf:"bytes,90288891,opt,name=classifiers,proto3" json:"classifiers,omitempty"`
	Config            *Qos_Config            `protobuf:"bytes,254929617,opt,name=config,proto3" json:"config,omitempty"`
	ForwardingGroups  *Qos_ForwardingGroups  `protobuf:"bytes,328718935,opt,name=forwarding_groups,json=forwardingGroups,proto3" json:"forwarding_groups,omitempty"`
	Interfaces        *Qos_Interfaces        `protobuf:"bytes,329973087,opt,name=interfaces,proto3" json:"interfaces,omitempty"`
	Queues            *Qos_Queues            `protobuf:"bytes,244490847,opt,name=queues,proto3" json:"queues,omitempty"`
	SchedulerPolicies *Qos_SchedulerPolicies `protobuf:"bytes,191956329,opt,name=scheduler_policies,json=schedulerPolicies,proto3" json:"scheduler_policies,omitempty"`
	State             *Qos_State             `protobuf:"bytes,139048646,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Qos) Reset() {
	*x = Qos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos) ProtoMessage() {}

func (x *Qos) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos.ProtoReflect.Descriptor instead.
func (*Qos) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0}
}

func (x *Qos) GetClassifiers() *Qos_Classifiers {
	if x != nil {
		return x.Classifiers
	}
	return nil
}

func (x *Qos) GetConfig() *Qos_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Qos) GetForwardingGroups() *Qos_ForwardingGroups {
	if x != nil {
		return x.ForwardingGroups
	}
	return nil
}

func (x *Qos) GetInterfaces() *Qos_Interfaces {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

func (x *Qos) GetQueues() *Qos_Queues {
	if x != nil {
		return x.Queues
	}
	return nil
}

func (x *Qos) GetSchedulerPolicies() *Qos_SchedulerPolicies {
	if x != nil {
		return x.SchedulerPolicies
	}
	return nil
}

func (x *Qos) GetState() *Qos_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Qos_Classifiers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Classifier []*Qos_Classifiers_ClassifierKey `protobuf:"bytes,281713417,rep,name=classifier,proto3" json:"classifier,omitempty"`
}

func (x *Qos_Classifiers) Reset() {
	*x = Qos_Classifiers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Classifiers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Classifiers) ProtoMessage() {}

func (x *Qos_Classifiers) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Classifiers.ProtoReflect.Descriptor instead.
func (*Qos_Classifiers) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Qos_Classifiers) GetClassifier() []*Qos_Classifiers_ClassifierKey {
	if x != nil {
		return x.Classifier
	}
	return nil
}

type Qos_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Qos_Config) Reset() {
	*x = Qos_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Config) ProtoMessage() {}

func (x *Qos_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Config.ProtoReflect.Descriptor instead.
func (*Qos_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 1}
}

type Qos_ForwardingGroups struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ForwardingGroup []*Qos_ForwardingGroups_ForwardingGroupKey `protobuf:"bytes,454859993,rep,name=forwarding_group,json=forwardingGroup,proto3" json:"forwarding_group,omitempty"`
}

func (x *Qos_ForwardingGroups) Reset() {
	*x = Qos_ForwardingGroups{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ForwardingGroups) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ForwardingGroups) ProtoMessage() {}

func (x *Qos_ForwardingGroups) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ForwardingGroups.ProtoReflect.Descriptor instead.
func (*Qos_ForwardingGroups) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Qos_ForwardingGroups) GetForwardingGroup() []*Qos_ForwardingGroups_ForwardingGroupKey {
	if x != nil {
		return x.ForwardingGroup
	}
	return nil
}

type Qos_Interfaces struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interface []*Qos_Interfaces_InterfaceKey `protobuf:"bytes,178908543,rep,name=interface,proto3" json:"interface,omitempty"`
}

func (x *Qos_Interfaces) Reset() {
	*x = Qos_Interfaces{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Interfaces) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Interfaces) ProtoMessage() {}

func (x *Qos_Interfaces) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Interfaces.ProtoReflect.Descriptor instead.
func (*Qos_Interfaces) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Qos_Interfaces) GetInterface() []*Qos_Interfaces_InterfaceKey {
	if x != nil {
		return x.Interface
	}
	return nil
}

type Qos_Queues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Queue []*Qos_Queues_QueueKey `protobuf:"bytes,108026875,rep,name=queue,proto3" json:"queue,omitempty"`
}

func (x *Qos_Queues) Reset() {
	*x = Qos_Queues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Queues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Queues) ProtoMessage() {}

func (x *Qos_Queues) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Queues.ProtoReflect.Descriptor instead.
func (*Qos_Queues) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 4}
}

func (x *Qos_Queues) GetQueue() []*Qos_Queues_QueueKey {
	if x != nil {
		return x.Queue
	}
	return nil
}

type Qos_SchedulerPolicies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchedulerPolicy []*Qos_SchedulerPolicies_SchedulerPolicyKey `protobuf:"bytes,422526610,rep,name=scheduler_policy,json=schedulerPolicy,proto3" json:"scheduler_policy,omitempty"`
}

func (x *Qos_SchedulerPolicies) Reset() {
	*x = Qos_SchedulerPolicies{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_SchedulerPolicies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_SchedulerPolicies) ProtoMessage() {}

func (x *Qos_SchedulerPolicies) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_SchedulerPolicies.ProtoReflect.Descriptor instead.
func (*Qos_SchedulerPolicies) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 5}
}

func (x *Qos_SchedulerPolicies) GetSchedulerPolicy() []*Qos_SchedulerPolicies_SchedulerPolicyKey {
	if x != nil {
		return x.SchedulerPolicy
	}
	return nil
}

type Qos_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Qos_State) Reset() {
	*x = Qos_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_State) ProtoMessage() {}

func (x *Qos_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_State.ProtoReflect.Descriptor instead.
func (*Qos_State) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 6}
}

type Qos_Classifiers_Classifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Qos_Classifiers_Classifier_Config `protobuf:"bytes,505734526,opt,name=config,proto3" json:"config,omitempty"`
	State  *Qos_Classifiers_Classifier_State  `protobuf:"bytes,125517931,opt,name=state,proto3" json:"state,omitempty"`
	Terms  *Qos_Classifiers_Classifier_Terms  `protobuf:"bytes,506313861,opt,name=terms,proto3" json:"terms,omitempty"`
}

func (x *Qos_Classifiers_Classifier) Reset() {
	*x = Qos_Classifiers_Classifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Classifiers_Classifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Classifiers_Classifier) ProtoMessage() {}

func (x *Qos_Classifiers_Classifier) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Classifiers_Classifier.ProtoReflect.Descriptor instead.
func (*Qos_Classifiers_Classifier) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *Qos_Classifiers_Classifier) GetConfig() *Qos_Classifiers_Classifier_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Qos_Classifiers_Classifier) GetState() *Qos_Classifiers_Classifier_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Qos_Classifiers_Classifier) GetTerms() *Qos_Classifiers_Classifier_Terms {
	if x != nil {
		return x.Terms
	}
	return nil
}

type Qos_Classifiers_ClassifierKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string                      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Classifier *Qos_Classifiers_Classifier `protobuf:"bytes,2,opt,name=classifier,proto3" json:"classifier,omitempty"`
}

func (x *Qos_Classifiers_ClassifierKey) Reset() {
	*x = Qos_Classifiers_ClassifierKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Classifiers_ClassifierKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Classifiers_ClassifierKey) ProtoMessage() {}

func (x *Qos_Classifiers_ClassifierKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Classifiers_ClassifierKey.ProtoReflect.Descriptor instead.
func (*Qos_Classifiers_ClassifierKey) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *Qos_Classifiers_ClassifierKey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Qos_Classifiers_ClassifierKey) GetClassifier() *Qos_Classifiers_Classifier {
	if x != nil {
		return x.Classifier
	}
	return nil
}

type Qos_Classifiers_Classifier_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *ywrapper.StringValue                  `protobuf:"bytes,444888484,opt,name=name,proto3" json:"name,omitempty"`
	Type Qos_Classifiers_Classifier_Config_Type `protobuf:"varint,422459117,opt,name=type,proto3,enum=openconfig.Qos_Classifiers_Classifier_Config_Type" json:"type,omitempty"`
}

func (x *Qos_Classifiers_Classifier_Config) Reset() {
	*x = Qos_Classifiers_Classifier_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Classifiers_Classifier_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Classifiers_Classifier_Config) ProtoMessage() {}

func (x *Qos_Classifiers_Classifier_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Classifiers_Classifier_Config.ProtoReflect.Descriptor instead.
func (*Qos_Classifiers_Classifier_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (x *Qos_Classifiers_Classifier_Config) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Qos_Classifiers_Classifier_Config) GetType() Qos_Classifiers_Classifier_Config_Type {
	if x != nil {
		return x.Type
	}
	return Qos_Classifiers_Classifier_Config_TYPE_UNSET
}

type Qos_Classifiers_Classifier_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *ywrapper.StringValue                 `protobuf:"bytes,242051611,opt,name=name,proto3" json:"name,omitempty"`
	Type Qos_Classifiers_Classifier_State_Type `protobuf:"varint,334844318,opt,name=type,proto3,enum=openconfig.Qos_Classifiers_Classifier_State_Type" json:"type,omitempty"`
}

func (x *Qos_Classifiers_Classifier_State) Reset() {
	*x = Qos_Classifiers_Classifier_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Classifiers_Classifier_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Classifiers_Classifier_State) ProtoMessage() {}

func (x *Qos_Classifiers_Classifier_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Classifiers_Classifier_State.ProtoReflect.Descriptor instead.
func (*Qos_Classifiers_Classifier_State) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 0, 0, 1}
}

func (x *Qos_Classifiers_Classifier_State) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Qos_Classifiers_Classifier_State) GetType() Qos_Classifiers_Classifier_State_Type {
	if x != nil {
		return x.Type
	}
	return Qos_Classifiers_Classifier_State_TYPE_UNSET
}

type Qos_Classifiers_Classifier_Terms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Term []*Qos_Classifiers_Classifier_Terms_TermKey `protobuf:"bytes,74659894,rep,name=term,proto3" json:"term,omitempty"`
}

func (x *Qos_Classifiers_Classifier_Terms) Reset() {
	*x = Qos_Classifiers_Classifier_Terms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Classifiers_Classifier_Terms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Classifiers_Classifier_Terms) ProtoMessage() {}

func (x *Qos_Classifiers_Classifier_Terms) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Classifiers_Classifier_Terms.ProtoReflect.Descriptor instead.
func (*Qos_Classifiers_Classifier_Terms) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 0, 0, 2}
}

func (x *Qos_Classifiers_Classifier_Terms) GetTerm() []*Qos_Classifiers_Classifier_Terms_TermKey {
	if x != nil {
		return x.Term
	}
	return nil
}

type Qos_Classifiers_Classifier_Terms_Term struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Actions    *Qos_Classifiers_Classifier_Terms_Term_Actions    `protobuf:"bytes,288444670,opt,name=actions,proto3" json:"actions,omitempty"`
	Conditions *Qos_Classifiers_Classifier_Terms_Term_Conditions `protobuf:"bytes,14705347,opt,name=conditions,proto3" json:"conditions,omitempty"`
	Config     *Qos_Classifiers_Classifier_Terms_Term_Config     `protobuf:"bytes,419346967,opt,name=config,proto3" json:"config,omitempty"`
	State      *Qos_Classifiers_Classifier_Terms_Term_State      `protobuf:"bytes,18572232,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Qos_Classifiers_Classifier_Terms_Term) Reset() {
	*x = Qos_Classifiers_Classifier_Terms_Term{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Classifiers_Classifier_Terms_Term) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Classifiers_Classifier_Terms_Term) ProtoMessage() {}

func (x *Qos_Classifiers_Classifier_Terms_Term) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Classifiers_Classifier_Terms_Term.ProtoReflect.Descriptor instead.
func (*Qos_Classifiers_Classifier_Terms_Term) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0}
}

func (x *Qos_Classifiers_Classifier_Terms_Term) GetActions() *Qos_Classifiers_Classifier_Terms_Term_Actions {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *Qos_Classifiers_Classifier_Terms_Term) GetConditions() *Qos_Classifiers_Classifier_Terms_Term_Conditions {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *Qos_Classifiers_Classifier_Terms_Term) GetConfig() *Qos_Classifiers_Classifier_Terms_Term_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Qos_Classifiers_Classifier_Terms_Term) GetState() *Qos_Classifiers_Classifier_Terms_Term_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Qos_Classifiers_Classifier_Terms_TermKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string                                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Term *Qos_Classifiers_Classifier_Terms_Term `protobuf:"bytes,2,opt,name=term,proto3" json:"term,omitempty"`
}

func (x *Qos_Classifiers_Classifier_Terms_TermKey) Reset() {
	*x = Qos_Classifiers_Classifier_Terms_TermKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Classifiers_Classifier_Terms_TermKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Classifiers_Classifier_Terms_TermKey) ProtoMessage() {}

func (x *Qos_Classifiers_Classifier_Terms_TermKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Classifiers_Classifier_Terms_TermKey.ProtoReflect.Descriptor instead.
func (*Qos_Classifiers_Classifier_Terms_TermKey) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 0, 0, 2, 1}
}

func (x *Qos_Classifiers_Classifier_Terms_TermKey) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Qos_Classifiers_Classifier_Terms_TermKey) GetTerm() *Qos_Classifiers_Classifier_Terms_Term {
	if x != nil {
		return x.Term
	}
	return nil
}

type Qos_Classifiers_Classifier_Terms_Term_Actions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Qos_Classifiers_Classifier_Terms_Term_Actions_Config `protobuf:"bytes,112958415,opt,name=config,proto3" json:"config,omitempty"`
	Remark *Qos_Classifiers_Classifier_Terms_Term_Actions_Remark `protobuf:"bytes,45738605,opt,name=remark,proto3" json:"remark,omitempty"`
	State  *Qos_Classifiers_Classifier_Terms_Term_Actions_State  `protobuf:"bytes,404171968,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Actions) Reset() {
	*x = Qos_Classifiers_Classifier_Terms_Term_Actions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Actions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Classifiers_Classifier_Terms_Term_Actions) ProtoMessage() {}

func (x *Qos_Classifiers_Classifier_Terms_Term_Actions) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Classifiers_Classifier_Terms_Term_Actions.ProtoReflect.Descriptor instead.
func (*Qos_Classifiers_Classifier_Terms_Term_Actions) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0, 0}
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Actions) GetConfig() *Qos_Classifiers_Classifier_Terms_Term_Actions_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Actions) GetRemark() *Qos_Classifiers_Classifier_Terms_Term_Actions_Remark {
	if x != nil {
		return x.Remark
	}
	return nil
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Actions) GetState() *Qos_Classifiers_Classifier_Terms_Term_Actions_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Qos_Classifiers_Classifier_Terms_Term_Conditions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ipv4      *Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4      `protobuf:"bytes,10035435,opt,name=ipv4,proto3" json:"ipv4,omitempty"`
	Ipv6      *Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6      `protobuf:"bytes,10035433,opt,name=ipv6,proto3" json:"ipv6,omitempty"`
	L2        *Qos_Classifiers_Classifier_Terms_Term_Conditions_L2        `protobuf:"bytes,363202488,opt,name=l2,proto3" json:"l2,omitempty"`
	Mpls      *Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls      `protobuf:"bytes,259157330,opt,name=mpls,proto3" json:"mpls,omitempty"`
	Transport *Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport `protobuf:"bytes,396236957,opt,name=transport,proto3" json:"transport,omitempty"`
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions) Reset() {
	*x = Qos_Classifiers_Classifier_Terms_Term_Conditions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Classifiers_Classifier_Terms_Term_Conditions) ProtoMessage() {}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Classifiers_Classifier_Terms_Term_Conditions.ProtoReflect.Descriptor instead.
func (*Qos_Classifiers_Classifier_Terms_Term_Conditions) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0, 1}
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions) GetIpv4() *Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4 {
	if x != nil {
		return x.Ipv4
	}
	return nil
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions) GetIpv6() *Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6 {
	if x != nil {
		return x.Ipv6
	}
	return nil
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions) GetL2() *Qos_Classifiers_Classifier_Terms_Term_Conditions_L2 {
	if x != nil {
		return x.L2
	}
	return nil
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions) GetMpls() *Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls {
	if x != nil {
		return x.Mpls
	}
	return nil
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions) GetTransport() *Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport {
	if x != nil {
		return x.Transport
	}
	return nil
}

type Qos_Classifiers_Classifier_Terms_Term_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *ywrapper.StringValue `protobuf:"bytes,136646369,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Config) Reset() {
	*x = Qos_Classifiers_Classifier_Terms_Term_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Classifiers_Classifier_Terms_Term_Config) ProtoMessage() {}

func (x *Qos_Classifiers_Classifier_Terms_Term_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Classifiers_Classifier_Terms_Term_Config.ProtoReflect.Descriptor instead.
func (*Qos_Classifiers_Classifier_Terms_Term_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0, 2}
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Config) GetId() *ywrapper.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

type Qos_Classifiers_Classifier_Terms_Term_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *ywrapper.StringValue `protobuf:"bytes,281525904,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Qos_Classifiers_Classifier_Terms_Term_State) Reset() {
	*x = Qos_Classifiers_Classifier_Terms_Term_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Classifiers_Classifier_Terms_Term_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Classifiers_Classifier_Terms_Term_State) ProtoMessage() {}

func (x *Qos_Classifiers_Classifier_Terms_Term_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Classifiers_Classifier_Terms_Term_State.ProtoReflect.Descriptor instead.
func (*Qos_Classifiers_Classifier_Terms_Term_State) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0, 3}
}

func (x *Qos_Classifiers_Classifier_Terms_Term_State) GetId() *ywrapper.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

type Qos_Classifiers_Classifier_Terms_Term_Actions_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetGroup *ywrapper.StringValue `protobuf:"bytes,263567595,opt,name=target_group,json=targetGroup,proto3" json:"target_group,omitempty"`
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Actions_Config) Reset() {
	*x = Qos_Classifiers_Classifier_Terms_Term_Actions_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Actions_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Classifiers_Classifier_Terms_Term_Actions_Config) ProtoMessage() {}

func (x *Qos_Classifiers_Classifier_Terms_Term_Actions_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Classifiers_Classifier_Terms_Term_Actions_Config.ProtoReflect.Descriptor instead.
func (*Qos_Classifiers_Classifier_Terms_Term_Actions_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0, 0, 0}
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Actions_Config) GetTargetGroup() *ywrapper.StringValue {
	if x != nil {
		return x.TargetGroup
	}
	return nil
}

type Qos_Classifiers_Classifier_Terms_Term_Actions_Remark struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config `protobuf:"bytes,535857410,opt,name=config,proto3" json:"config,omitempty"`
	State  *Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State  `protobuf:"bytes,416672959,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Actions_Remark) Reset() {
	*x = Qos_Classifiers_Classifier_Terms_Term_Actions_Remark{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Actions_Remark) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Classifiers_Classifier_Terms_Term_Actions_Remark) ProtoMessage() {}

func (x *Qos_Classifiers_Classifier_Terms_Term_Actions_Remark) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Classifiers_Classifier_Terms_Term_Actions_Remark.ProtoReflect.Descriptor instead.
func (*Qos_Classifiers_Classifier_Terms_Term_Actions_Remark) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0, 0, 1}
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Actions_Remark) GetConfig() *Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Actions_Remark) GetState() *Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Qos_Classifiers_Classifier_Terms_Term_Actions_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetGroup *ywrapper.StringValue `protobuf:"bytes,329531914,opt,name=target_group,json=targetGroup,proto3" json:"target_group,omitempty"`
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Actions_State) Reset() {
	*x = Qos_Classifiers_Classifier_Terms_Term_Actions_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Actions_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Classifiers_Classifier_Terms_Term_Actions_State) ProtoMessage() {}

func (x *Qos_Classifiers_Classifier_Terms_Term_Actions_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Classifiers_Classifier_Terms_Term_Actions_State.ProtoReflect.Descriptor instead.
func (*Qos_Classifiers_Classifier_Terms_Term_Actions_State) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0, 0, 2}
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Actions_State) GetTargetGroup() *ywrapper.StringValue {
	if x != nil {
		return x.TargetGroup
	}
	return nil
}

type Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SetDot1P  *ywrapper.UintValue `protobuf:"bytes,129420902,opt,name=set_dot1p,json=setDot1p,proto3" json:"set_dot1p,omitempty"`
	SetDscp   *ywrapper.UintValue `protobuf:"bytes,184950326,opt,name=set_dscp,json=setDscp,proto3" json:"set_dscp,omitempty"`
	SetMplsTc *ywrapper.UintValue `protobuf:"bytes,115576782,opt,name=set_mpls_tc,json=setMplsTc,proto3" json:"set_mpls_tc,omitempty"`
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config) Reset() {
	*x = Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config) ProtoMessage() {}

func (x *Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config.ProtoReflect.Descriptor instead.
func (*Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0, 0, 1, 0}
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config) GetSetDot1P() *ywrapper.UintValue {
	if x != nil {
		return x.SetDot1P
	}
	return nil
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config) GetSetDscp() *ywrapper.UintValue {
	if x != nil {
		return x.SetDscp
	}
	return nil
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config) GetSetMplsTc() *ywrapper.UintValue {
	if x != nil {
		return x.SetMplsTc
	}
	return nil
}

type Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SetDot1P  *ywrapper.UintValue `protobuf:"bytes,309389519,opt,name=set_dot1p,json=setDot1p,proto3" json:"set_dot1p,omitempty"`
	SetDscp   *ywrapper.UintValue `protobuf:"bytes,509738221,opt,name=set_dscp,json=setDscp,proto3" json:"set_dscp,omitempty"`
	SetMplsTc *ywrapper.UintValue `protobuf:"bytes,103423347,opt,name=set_mpls_tc,json=setMplsTc,proto3" json:"set_mpls_tc,omitempty"`
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State) Reset() {
	*x = Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State) ProtoMessage() {}

func (x *Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State.ProtoReflect.Descriptor instead.
func (*Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0, 0, 1, 1}
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State) GetSetDot1P() *ywrapper.UintValue {
	if x != nil {
		return x.SetDot1P
	}
	return nil
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State) GetSetDscp() *ywrapper.UintValue {
	if x != nil {
		return x.SetDscp
	}
	return nil
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State) GetSetMplsTc() *ywrapper.UintValue {
	if x != nil {
		return x.SetMplsTc
	}
	return nil
}

type Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config `protobuf:"bytes,82051516,opt,name=config,proto3" json:"config,omitempty"`
	State  *Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State  `protobuf:"bytes,26286517,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4) Reset() {
	*x = Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4) ProtoMessage() {}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4.ProtoReflect.Descriptor instead.
func (*Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0, 1, 0}
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4) GetConfig() *Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4) GetState() *Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config `protobuf:"bytes,464400478,opt,name=config,proto3" json:"config,omitempty"`
	State  *Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State  `protobuf:"bytes,39645643,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6) Reset() {
	*x = Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6) ProtoMessage() {}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6.ProtoReflect.Descriptor instead.
func (*Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0, 1, 1}
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6) GetConfig() *Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6) GetState() *Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Qos_Classifiers_Classifier_Terms_Term_Conditions_L2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config `protobuf:"bytes,173916861,opt,name=config,proto3" json:"config,omitempty"`
	State  *Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State  `protobuf:"bytes,2053426,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_L2) Reset() {
	*x = Qos_Classifiers_Classifier_Terms_Term_Conditions_L2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_L2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Classifiers_Classifier_Terms_Term_Conditions_L2) ProtoMessage() {}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_L2) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Classifiers_Classifier_Terms_Term_Conditions_L2.ProtoReflect.Descriptor instead.
func (*Qos_Classifiers_Classifier_Terms_Term_Conditions_L2) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0, 1, 2}
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_L2) GetConfig() *Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_L2) GetState() *Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config `protobuf:"bytes,470766099,opt,name=config,proto3" json:"config,omitempty"`
	State  *Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State  `protobuf:"bytes,254469620,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls) Reset() {
	*x = Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls) ProtoMessage() {}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls.ProtoReflect.Descriptor instead.
func (*Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0, 1, 3}
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls) GetConfig() *Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls) GetState() *Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config `protobuf:"bytes,471168594,opt,name=config,proto3" json:"config,omitempty"`
	State  *Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State  `protobuf:"bytes,253249231,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport) Reset() {
	*x = Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport) ProtoMessage() {}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport.ProtoReflect.Descriptor instead.
func (*Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0, 1, 4}
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport) GetConfig() *Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport) GetState() *Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinationAddress *ywrapper.StringValue `protobuf:"bytes,527978798,opt,name=destination_address,json=destinationAddress,proto3" json:"destination_address,omitempty"`
	Dscp               *ywrapper.UintValue   `protobuf:"bytes,459218869,opt,name=dscp,proto3" json:"dscp,omitempty"`
	HopLimit           *ywrapper.UintValue   `protobuf:"bytes,164634146,opt,name=hop_limit,json=hopLimit,proto3" json:"hop_limit,omitempty"`
	// Types that are assignable to Protocol:
	//	*Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config_ProtocolOpenconfigpacketmatchtypesipprotocol
	//	*Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config_ProtocolUint64
	Protocol      isQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config_Protocol `protobuf_oneof:"protocol"`
	SourceAddress *ywrapper.StringValue                                                   `protobuf:"bytes,389228459,opt,name=source_address,json=sourceAddress,proto3" json:"source_address,omitempty"`
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config) Reset() {
	*x = Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config) ProtoMessage() {}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config.ProtoReflect.Descriptor instead.
func (*Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0, 1, 0, 0}
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config) GetDestinationAddress() *ywrapper.StringValue {
	if x != nil {
		return x.DestinationAddress
	}
	return nil
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config) GetDscp() *ywrapper.UintValue {
	if x != nil {
		return x.Dscp
	}
	return nil
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config) GetHopLimit() *ywrapper.UintValue {
	if x != nil {
		return x.HopLimit
	}
	return nil
}

func (m *Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config) GetProtocol() isQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config_Protocol {
	if m != nil {
		return m.Protocol
	}
	return nil
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config) GetProtocolOpenconfigpacketmatchtypesipprotocol() OpenconfigPacketMatchTypesIPPROTOCOL {
	if x, ok := x.GetProtocol().(*Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config_ProtocolOpenconfigpacketmatchtypesipprotocol); ok {
		return x.ProtocolOpenconfigpacketmatchtypesipprotocol
	}
	return OpenconfigPacketMatchTypesIPPROTOCOL_OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_UNSET
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config) GetProtocolUint64() uint64 {
	if x, ok := x.GetProtocol().(*Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config_ProtocolUint64); ok {
		return x.ProtocolUint64
	}
	return 0
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config) GetSourceAddress() *ywrapper.StringValue {
	if x != nil {
		return x.SourceAddress
	}
	return nil
}

type isQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config_Protocol interface {
	isQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config_Protocol()
}

type Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config_ProtocolOpenconfigpacketmatchtypesipprotocol struct {
	ProtocolOpenconfigpacketmatchtypesipprotocol OpenconfigPacketMatchTypesIPPROTOCOL `protobuf:"varint,371958053,opt,name=protocol_openconfigpacketmatchtypesipprotocol,json=protocolOpenconfigpacketmatchtypesipprotocol,proto3,enum=openconfig.OpenconfigPacketMatchTypesIPPROTOCOL,oneof"`
}

type Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config_ProtocolUint64 struct {
	ProtocolUint64 uint64 `protobuf:"varint,488250108,opt,name=protocol_uint64,json=protocolUint64,proto3,oneof"`
}

func (*Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config_ProtocolOpenconfigpacketmatchtypesipprotocol) isQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config_Protocol() {
}

func (*Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config_ProtocolUint64) isQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config_Protocol() {
}

type Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinationAddress *ywrapper.StringValue `protobuf:"bytes,384655847,opt,name=destination_address,json=destinationAddress,proto3" json:"destination_address,omitempty"`
	Dscp               *ywrapper.UintValue   `protobuf:"bytes,215913306,opt,name=dscp,proto3" json:"dscp,omitempty"`
	HopLimit           *ywrapper.UintValue   `protobuf:"bytes,362494135,opt,name=hop_limit,json=hopLimit,proto3" json:"hop_limit,omitempty"`
	// Types that are assignable to Protocol:
	//	*Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State_ProtocolOpenconfigpacketmatchtypesipprotocol
	//	*Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State_ProtocolUint64
	Protocol      isQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State_Protocol `protobuf_oneof:"protocol"`
	SourceAddress *ywrapper.StringValue                                                  `protobuf:"bytes,139081528,opt,name=source_address,json=sourceAddress,proto3" json:"source_address,omitempty"`
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State) Reset() {
	*x = Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State) ProtoMessage() {}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State.ProtoReflect.Descriptor instead.
func (*Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0, 1, 0, 1}
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State) GetDestinationAddress() *ywrapper.StringValue {
	if x != nil {
		return x.DestinationAddress
	}
	return nil
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State) GetDscp() *ywrapper.UintValue {
	if x != nil {
		return x.Dscp
	}
	return nil
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State) GetHopLimit() *ywrapper.UintValue {
	if x != nil {
		return x.HopLimit
	}
	return nil
}

func (m *Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State) GetProtocol() isQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State_Protocol {
	if m != nil {
		return m.Protocol
	}
	return nil
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State) GetProtocolOpenconfigpacketmatchtypesipprotocol() OpenconfigPacketMatchTypesIPPROTOCOL {
	if x, ok := x.GetProtocol().(*Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State_ProtocolOpenconfigpacketmatchtypesipprotocol); ok {
		return x.ProtocolOpenconfigpacketmatchtypesipprotocol
	}
	return OpenconfigPacketMatchTypesIPPROTOCOL_OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_UNSET
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State) GetProtocolUint64() uint64 {
	if x, ok := x.GetProtocol().(*Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State_ProtocolUint64); ok {
		return x.ProtocolUint64
	}
	return 0
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State) GetSourceAddress() *ywrapper.StringValue {
	if x != nil {
		return x.SourceAddress
	}
	return nil
}

type isQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State_Protocol interface {
	isQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State_Protocol()
}

type Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State_ProtocolOpenconfigpacketmatchtypesipprotocol struct {
	ProtocolOpenconfigpacketmatchtypesipprotocol OpenconfigPacketMatchTypesIPPROTOCOL `protobuf:"varint,336703624,opt,name=protocol_openconfigpacketmatchtypesipprotocol,json=protocolOpenconfigpacketmatchtypesipprotocol,proto3,enum=openconfig.OpenconfigPacketMatchTypesIPPROTOCOL,oneof"`
}

type Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State_ProtocolUint64 struct {
	ProtocolUint64 uint64 `protobuf:"varint,139262509,opt,name=protocol_uint64,json=protocolUint64,proto3,oneof"`
}

func (*Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State_ProtocolOpenconfigpacketmatchtypesipprotocol) isQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State_Protocol() {
}

func (*Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State_ProtocolUint64) isQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State_Protocol() {
}

type Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinationAddress   *ywrapper.StringValue `protobuf:"bytes,139860024,opt,name=destination_address,json=destinationAddress,proto3" json:"destination_address,omitempty"`
	DestinationFlowLabel *ywrapper.UintValue   `protobuf:"bytes,26892661,opt,name=destination_flow_label,json=destinationFlowLabel,proto3" json:"destination_flow_label,omitempty"`
	Dscp                 *ywrapper.UintValue   `protobuf:"bytes,482221487,opt,name=dscp,proto3" json:"dscp,omitempty"`
	HopLimit             *ywrapper.UintValue   `protobuf:"bytes,233120028,opt,name=hop_limit,json=hopLimit,proto3" json:"hop_limit,omitempty"`
	// Types that are assignable to Protocol:
	//	*Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config_ProtocolOpenconfigpacketmatchtypesipprotocol
	//	*Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config_ProtocolUint64
	Protocol        isQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config_Protocol `protobuf_oneof:"protocol"`
	SourceAddress   *ywrapper.StringValue                                                   `protobuf:"bytes,498643489,opt,name=source_address,json=sourceAddress,proto3" json:"source_address,omitempty"`
	SourceFlowLabel *ywrapper.UintValue                                                     `protobuf:"bytes,158748530,opt,name=source_flow_label,json=sourceFlowLabel,proto3" json:"source_flow_label,omitempty"`
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config) Reset() {
	*x = Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config) ProtoMessage() {}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config.ProtoReflect.Descriptor instead.
func (*Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0, 1, 1, 0}
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config) GetDestinationAddress() *ywrapper.StringValue {
	if x != nil {
		return x.DestinationAddress
	}
	return nil
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config) GetDestinationFlowLabel() *ywrapper.UintValue {
	if x != nil {
		return x.DestinationFlowLabel
	}
	return nil
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config) GetDscp() *ywrapper.UintValue {
	if x != nil {
		return x.Dscp
	}
	return nil
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config) GetHopLimit() *ywrapper.UintValue {
	if x != nil {
		return x.HopLimit
	}
	return nil
}

func (m *Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config) GetProtocol() isQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config_Protocol {
	if m != nil {
		return m.Protocol
	}
	return nil
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config) GetProtocolOpenconfigpacketmatchtypesipprotocol() OpenconfigPacketMatchTypesIPPROTOCOL {
	if x, ok := x.GetProtocol().(*Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config_ProtocolOpenconfigpacketmatchtypesipprotocol); ok {
		return x.ProtocolOpenconfigpacketmatchtypesipprotocol
	}
	return OpenconfigPacketMatchTypesIPPROTOCOL_OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_UNSET
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config) GetProtocolUint64() uint64 {
	if x, ok := x.GetProtocol().(*Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config_ProtocolUint64); ok {
		return x.ProtocolUint64
	}
	return 0
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config) GetSourceAddress() *ywrapper.StringValue {
	if x != nil {
		return x.SourceAddress
	}
	return nil
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config) GetSourceFlowLabel() *ywrapper.UintValue {
	if x != nil {
		return x.SourceFlowLabel
	}
	return nil
}

type isQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config_Protocol interface {
	isQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config_Protocol()
}

type Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config_ProtocolOpenconfigpacketmatchtypesipprotocol struct {
	ProtocolOpenconfigpacketmatchtypesipprotocol OpenconfigPacketMatchTypesIPPROTOCOL `protobuf:"varint,483684219,opt,name=protocol_openconfigpacketmatchtypesipprotocol,json=protocolOpenconfigpacketmatchtypesipprotocol,proto3,enum=openconfig.OpenconfigPacketMatchTypesIPPROTOCOL,oneof"`
}

type Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config_ProtocolUint64 struct {
	ProtocolUint64 uint64 `protobuf:"varint,50630658,opt,name=protocol_uint64,json=protocolUint64,proto3,oneof"`
}

func (*Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config_ProtocolOpenconfigpacketmatchtypesipprotocol) isQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config_Protocol() {
}

func (*Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config_ProtocolUint64) isQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config_Protocol() {
}

type Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinationAddress   *ywrapper.StringValue `protobuf:"bytes,268066477,opt,name=destination_address,json=destinationAddress,proto3" json:"destination_address,omitempty"`
	DestinationFlowLabel *ywrapper.UintValue   `protobuf:"bytes,333529406,opt,name=destination_flow_label,json=destinationFlowLabel,proto3" json:"destination_flow_label,omitempty"`
	Dscp                 *ywrapper.UintValue   `protobuf:"bytes,297057864,opt,name=dscp,proto3" json:"dscp,omitempty"`
	HopLimit             *ywrapper.UintValue   `protobuf:"bytes,472314045,opt,name=hop_limit,json=hopLimit,proto3" json:"hop_limit,omitempty"`
	// Types that are assignable to Protocol:
	//	*Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State_ProtocolOpenconfigpacketmatchtypesipprotocol
	//	*Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State_ProtocolUint64
	Protocol        isQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State_Protocol `protobuf_oneof:"protocol"`
	SourceAddress   *ywrapper.StringValue                                                  `protobuf:"bytes,239778034,opt,name=source_address,json=sourceAddress,proto3" json:"source_address,omitempty"`
	SourceFlowLabel *ywrapper.UintValue                                                    `protobuf:"bytes,218402383,opt,name=source_flow_label,json=sourceFlowLabel,proto3" json:"source_flow_label,omitempty"`
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State) Reset() {
	*x = Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State) ProtoMessage() {}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State.ProtoReflect.Descriptor instead.
func (*Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0, 1, 1, 1}
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State) GetDestinationAddress() *ywrapper.StringValue {
	if x != nil {
		return x.DestinationAddress
	}
	return nil
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State) GetDestinationFlowLabel() *ywrapper.UintValue {
	if x != nil {
		return x.DestinationFlowLabel
	}
	return nil
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State) GetDscp() *ywrapper.UintValue {
	if x != nil {
		return x.Dscp
	}
	return nil
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State) GetHopLimit() *ywrapper.UintValue {
	if x != nil {
		return x.HopLimit
	}
	return nil
}

func (m *Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State) GetProtocol() isQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State_Protocol {
	if m != nil {
		return m.Protocol
	}
	return nil
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State) GetProtocolOpenconfigpacketmatchtypesipprotocol() OpenconfigPacketMatchTypesIPPROTOCOL {
	if x, ok := x.GetProtocol().(*Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State_ProtocolOpenconfigpacketmatchtypesipprotocol); ok {
		return x.ProtocolOpenconfigpacketmatchtypesipprotocol
	}
	return OpenconfigPacketMatchTypesIPPROTOCOL_OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_UNSET
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State) GetProtocolUint64() uint64 {
	if x, ok := x.GetProtocol().(*Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State_ProtocolUint64); ok {
		return x.ProtocolUint64
	}
	return 0
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State) GetSourceAddress() *ywrapper.StringValue {
	if x != nil {
		return x.SourceAddress
	}
	return nil
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State) GetSourceFlowLabel() *ywrapper.UintValue {
	if x != nil {
		return x.SourceFlowLabel
	}
	return nil
}

type isQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State_Protocol interface {
	isQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State_Protocol()
}

type Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State_ProtocolOpenconfigpacketmatchtypesipprotocol struct {
	ProtocolOpenconfigpacketmatchtypesipprotocol OpenconfigPacketMatchTypesIPPROTOCOL `protobuf:"varint,248928978,opt,name=protocol_openconfigpacketmatchtypesipprotocol,json=protocolOpenconfigpacketmatchtypesipprotocol,proto3,enum=openconfig.OpenconfigPacketMatchTypesIPPROTOCOL,oneof"`
}

type Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State_ProtocolUint64 struct {
	ProtocolUint64 uint64 `protobuf:"varint,136889423,opt,name=protocol_uint64,json=protocolUint64,proto3,oneof"`
}

func (*Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State_ProtocolOpenconfigpacketmatchtypesipprotocol) isQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State_Protocol() {
}

func (*Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State_ProtocolUint64) isQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State_Protocol() {
}

type Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinationMac     *ywrapper.StringValue `protobuf:"bytes,515610502,opt,name=destination_mac,json=destinationMac,proto3" json:"destination_mac,omitempty"`
	DestinationMacMask *ywrapper.StringValue `protobuf:"bytes,287932171,opt,name=destination_mac_mask,json=destinationMacMask,proto3" json:"destination_mac_mask,omitempty"`
	// Types that are assignable to Ethertype:
	//	*Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config_EthertypeOpenconfigpacketmatchtypesethertype
	//	*Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config_EthertypeUint64
	Ethertype     isQos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config_Ethertype `protobuf_oneof:"ethertype"`
	SourceMac     *ywrapper.StringValue                                                  `protobuf:"bytes,658529,opt,name=source_mac,json=sourceMac,proto3" json:"source_mac,omitempty"`
	SourceMacMask *ywrapper.StringValue                                                  `protobuf:"bytes,49113846,opt,name=source_mac_mask,json=sourceMacMask,proto3" json:"source_mac_mask,omitempty"`
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config) Reset() {
	*x = Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config) ProtoMessage() {}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config.ProtoReflect.Descriptor instead.
func (*Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0, 1, 2, 0}
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config) GetDestinationMac() *ywrapper.StringValue {
	if x != nil {
		return x.DestinationMac
	}
	return nil
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config) GetDestinationMacMask() *ywrapper.StringValue {
	if x != nil {
		return x.DestinationMacMask
	}
	return nil
}

func (m *Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config) GetEthertype() isQos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config_Ethertype {
	if m != nil {
		return m.Ethertype
	}
	return nil
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config) GetEthertypeOpenconfigpacketmatchtypesethertype() OpenconfigPacketMatchTypesETHERTYPE {
	if x, ok := x.GetEthertype().(*Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config_EthertypeOpenconfigpacketmatchtypesethertype); ok {
		return x.EthertypeOpenconfigpacketmatchtypesethertype
	}
	return OpenconfigPacketMatchTypesETHERTYPE_OPENCONFIGPACKETMATCHTYPESETHERTYPE_UNSET
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config) GetEthertypeUint64() uint64 {
	if x, ok := x.GetEthertype().(*Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config_EthertypeUint64); ok {
		return x.EthertypeUint64
	}
	return 0
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config) GetSourceMac() *ywrapper.StringValue {
	if x != nil {
		return x.SourceMac
	}
	return nil
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config) GetSourceMacMask() *ywrapper.StringValue {
	if x != nil {
		return x.SourceMacMask
	}
	return nil
}

type isQos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config_Ethertype interface {
	isQos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config_Ethertype()
}

type Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config_EthertypeOpenconfigpacketmatchtypesethertype struct {
	EthertypeOpenconfigpacketmatchtypesethertype OpenconfigPacketMatchTypesETHERTYPE `protobuf:"varint,245699045,opt,name=ethertype_openconfigpacketmatchtypesethertype,json=ethertypeOpenconfigpacketmatchtypesethertype,proto3,enum=openconfig.OpenconfigPacketMatchTypesETHERTYPE,oneof"`
}

type Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config_EthertypeUint64 struct {
	EthertypeUint64 uint64 `protobuf:"varint,132607809,opt,name=ethertype_uint64,json=ethertypeUint64,proto3,oneof"`
}

func (*Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config_EthertypeOpenconfigpacketmatchtypesethertype) isQos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config_Ethertype() {
}

func (*Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config_EthertypeUint64) isQos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config_Ethertype() {
}

type Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinationMac     *ywrapper.StringValue `protobuf:"bytes,278919501,opt,name=destination_mac,json=destinationMac,proto3" json:"destination_mac,omitempty"`
	DestinationMacMask *ywrapper.StringValue `protobuf:"bytes,85439306,opt,name=destination_mac_mask,json=destinationMacMask,proto3" json:"destination_mac_mask,omitempty"`
	// Types that are assignable to Ethertype:
	//	*Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State_EthertypeOpenconfigpacketmatchtypesethertype
	//	*Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State_EthertypeUint64
	Ethertype     isQos_Classifiers_Classifier_Terms_Term_Conditions_L2_State_Ethertype `protobuf_oneof:"ethertype"`
	SourceMac     *ywrapper.StringValue                                                 `protobuf:"bytes,505619284,opt,name=source_mac,json=sourceMac,proto3" json:"source_mac,omitempty"`
	SourceMacMask *ywrapper.StringValue                                                 `protobuf:"bytes,219492717,opt,name=source_mac_mask,json=sourceMacMask,proto3" json:"source_mac_mask,omitempty"`
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State) Reset() {
	*x = Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State) ProtoMessage() {}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State.ProtoReflect.Descriptor instead.
func (*Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0, 1, 2, 1}
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State) GetDestinationMac() *ywrapper.StringValue {
	if x != nil {
		return x.DestinationMac
	}
	return nil
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State) GetDestinationMacMask() *ywrapper.StringValue {
	if x != nil {
		return x.DestinationMacMask
	}
	return nil
}

func (m *Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State) GetEthertype() isQos_Classifiers_Classifier_Terms_Term_Conditions_L2_State_Ethertype {
	if m != nil {
		return m.Ethertype
	}
	return nil
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State) GetEthertypeOpenconfigpacketmatchtypesethertype() OpenconfigPacketMatchTypesETHERTYPE {
	if x, ok := x.GetEthertype().(*Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State_EthertypeOpenconfigpacketmatchtypesethertype); ok {
		return x.EthertypeOpenconfigpacketmatchtypesethertype
	}
	return OpenconfigPacketMatchTypesETHERTYPE_OPENCONFIGPACKETMATCHTYPESETHERTYPE_UNSET
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State) GetEthertypeUint64() uint64 {
	if x, ok := x.GetEthertype().(*Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State_EthertypeUint64); ok {
		return x.EthertypeUint64
	}
	return 0
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State) GetSourceMac() *ywrapper.StringValue {
	if x != nil {
		return x.SourceMac
	}
	return nil
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State) GetSourceMacMask() *ywrapper.StringValue {
	if x != nil {
		return x.SourceMacMask
	}
	return nil
}

type isQos_Classifiers_Classifier_Terms_Term_Conditions_L2_State_Ethertype interface {
	isQos_Classifiers_Classifier_Terms_Term_Conditions_L2_State_Ethertype()
}

type Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State_EthertypeOpenconfigpacketmatchtypesethertype struct {
	EthertypeOpenconfigpacketmatchtypesethertype OpenconfigPacketMatchTypesETHERTYPE `protobuf:"varint,405942806,opt,name=ethertype_openconfigpacketmatchtypesethertype,json=ethertypeOpenconfigpacketmatchtypesethertype,proto3,enum=openconfig.OpenconfigPacketMatchTypesETHERTYPE,oneof"`
}

type Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State_EthertypeUint64 struct {
	EthertypeUint64 uint64 `protobuf:"varint,461693036,opt,name=ethertype_uint64,json=ethertypeUint64,proto3,oneof"`
}

func (*Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State_EthertypeOpenconfigpacketmatchtypesethertype) isQos_Classifiers_Classifier_Terms_Term_Conditions_L2_State_Ethertype() {
}

func (*Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State_EthertypeUint64) isQos_Classifiers_Classifier_Terms_Term_Conditions_L2_State_Ethertype() {
}

type Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrafficClass *ywrapper.UintValue `protobuf:"bytes,292059538,opt,name=traffic_class,json=trafficClass,proto3" json:"traffic_class,omitempty"`
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config) Reset() {
	*x = Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config) ProtoMessage() {}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config.ProtoReflect.Descriptor instead.
func (*Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0, 1, 3, 0}
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config) GetTrafficClass() *ywrapper.UintValue {
	if x != nil {
		return x.TrafficClass
	}
	return nil
}

type Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrafficClass *ywrapper.UintValue `protobuf:"bytes,380342165,opt,name=traffic_class,json=trafficClass,proto3" json:"traffic_class,omitempty"`
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State) Reset() {
	*x = Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State) ProtoMessage() {}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State.ProtoReflect.Descriptor instead.
func (*Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0, 1, 3, 1}
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State) GetTrafficClass() *ywrapper.UintValue {
	if x != nil {
		return x.TrafficClass
	}
	return nil
}

type Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to DestinationPort:
	//	*Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPortDestinationport
	//	*Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPortString
	//	*Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPortUint64
	DestinationPort isQos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort `protobuf_oneof:"destination_port"`
	// Types that are assignable to SourcePort:
	//	*Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePortSourceport
	//	*Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePortString
	//	*Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePortUint64
	SourcePort isQos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort `protobuf_oneof:"source_port"`
	TcpFlags   []OpenconfigPacketMatchTypesTCPFLAGS                                           `protobuf:"varint,82538752,rep,packed,name=tcp_flags,json=tcpFlags,proto3,enum=openconfig.OpenconfigPacketMatchTypesTCPFLAGS" json:"tcp_flags,omitempty"`
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config) Reset() {
	*x = Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config) ProtoMessage() {}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config.ProtoReflect.Descriptor instead.
func (*Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0, 1, 4, 0}
}

func (m *Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config) GetDestinationPort() isQos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort {
	if m != nil {
		return m.DestinationPort
	}
	return nil
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config) GetDestinationPortDestinationport() Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort {
	if x, ok := x.GetDestinationPort().(*Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPortDestinationport); ok {
		return x.DestinationPortDestinationport
	}
	return Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DESTINATIONPORT_UNSET
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config) GetDestinationPortString() string {
	if x, ok := x.GetDestinationPort().(*Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPortString); ok {
		return x.DestinationPortString
	}
	return ""
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config) GetDestinationPortUint64() uint64 {
	if x, ok := x.GetDestinationPort().(*Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPortUint64); ok {
		return x.DestinationPortUint64
	}
	return 0
}

func (m *Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config) GetSourcePort() isQos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort {
	if m != nil {
		return m.SourcePort
	}
	return nil
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config) GetSourcePortSourceport() Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort {
	if x, ok := x.GetSourcePort().(*Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePortSourceport); ok {
		return x.SourcePortSourceport
	}
	return Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SOURCEPORT_UNSET
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config) GetSourcePortString() string {
	if x, ok := x.GetSourcePort().(*Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePortString); ok {
		return x.SourcePortString
	}
	return ""
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config) GetSourcePortUint64() uint64 {
	if x, ok := x.GetSourcePort().(*Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePortUint64); ok {
		return x.SourcePortUint64
	}
	return 0
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config) GetTcpFlags() []OpenconfigPacketMatchTypesTCPFLAGS {
	if x != nil {
		return x.TcpFlags
	}
	return nil
}

type isQos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort interface {
	isQos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort()
}

type Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPortDestinationport struct {
	DestinationPortDestinationport Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort `protobuf:"varint,61984185,opt,name=destination_port_destinationport,json=destinationPortDestinationport,proto3,enum=openconfig.Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort,oneof"`
}

type Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPortString struct {
	DestinationPortString string `protobuf:"bytes,43341491,opt,name=destination_port_string,json=destinationPortString,proto3,oneof"`
}

type Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPortUint64 struct {
	DestinationPortUint64 uint64 `protobuf:"varint,296926614,opt,name=destination_port_uint64,json=destinationPortUint64,proto3,oneof"`
}

func (*Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPortDestinationport) isQos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort() {
}

func (*Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPortString) isQos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort() {
}

func (*Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPortUint64) isQos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort() {
}

type isQos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort interface {
	isQos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort()
}

type Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePortSourceport struct {
	SourcePortSourceport Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort `protobuf:"varint,169477687,opt,name=source_port_sourceport,json=sourcePortSourceport,proto3,enum=openconfig.Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort,oneof"`
}

type Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePortString struct {
	SourcePortString string `protobuf:"bytes,342703790,opt,name=source_port_string,json=sourcePortString,proto3,oneof"`
}

type Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePortUint64 struct {
	SourcePortUint64 uint64 `protobuf:"varint,278063023,opt,name=source_port_uint64,json=sourcePortUint64,proto3,oneof"`
}

func (*Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePortSourceport) isQos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort() {
}

func (*Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePortString) isQos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort() {
}

func (*Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePortUint64) isQos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort() {
}

type Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to DestinationPort:
	//	*Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPortDestinationport
	//	*Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPortString
	//	*Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPortUint64
	DestinationPort isQos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort `protobuf_oneof:"destination_port"`
	// Types that are assignable to SourcePort:
	//	*Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePortSourceport
	//	*Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePortString
	//	*Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePortUint64
	SourcePort isQos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort `protobuf_oneof:"source_port"`
	TcpFlags   []OpenconfigPacketMatchTypesTCPFLAGS                                          `protobuf:"varint,388480337,rep,packed,name=tcp_flags,json=tcpFlags,proto3,enum=openconfig.OpenconfigPacketMatchTypesTCPFLAGS" json:"tcp_flags,omitempty"`
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State) Reset() {
	*x = Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State) ProtoMessage() {}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State.ProtoReflect.Descriptor instead.
func (*Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0, 1, 4, 1}
}

func (m *Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State) GetDestinationPort() isQos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort {
	if m != nil {
		return m.DestinationPort
	}
	return nil
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State) GetDestinationPortDestinationport() Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort {
	if x, ok := x.GetDestinationPort().(*Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPortDestinationport); ok {
		return x.DestinationPortDestinationport
	}
	return Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DESTINATIONPORT_UNSET
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State) GetDestinationPortString() string {
	if x, ok := x.GetDestinationPort().(*Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPortString); ok {
		return x.DestinationPortString
	}
	return ""
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State) GetDestinationPortUint64() uint64 {
	if x, ok := x.GetDestinationPort().(*Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPortUint64); ok {
		return x.DestinationPortUint64
	}
	return 0
}

func (m *Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State) GetSourcePort() isQos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort {
	if m != nil {
		return m.SourcePort
	}
	return nil
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State) GetSourcePortSourceport() Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort {
	if x, ok := x.GetSourcePort().(*Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePortSourceport); ok {
		return x.SourcePortSourceport
	}
	return Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SOURCEPORT_UNSET
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State) GetSourcePortString() string {
	if x, ok := x.GetSourcePort().(*Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePortString); ok {
		return x.SourcePortString
	}
	return ""
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State) GetSourcePortUint64() uint64 {
	if x, ok := x.GetSourcePort().(*Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePortUint64); ok {
		return x.SourcePortUint64
	}
	return 0
}

func (x *Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State) GetTcpFlags() []OpenconfigPacketMatchTypesTCPFLAGS {
	if x != nil {
		return x.TcpFlags
	}
	return nil
}

type isQos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort interface {
	isQos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort()
}

type Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPortDestinationport struct {
	DestinationPortDestinationport Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort `protobuf:"varint,103011798,opt,name=destination_port_destinationport,json=destinationPortDestinationport,proto3,enum=openconfig.Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort,oneof"`
}

type Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPortString struct {
	DestinationPortString string `protobuf:"bytes,232129498,opt,name=destination_port_string,json=destinationPortString,proto3,oneof"`
}

type Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPortUint64 struct {
	DestinationPortUint64 uint64 `protobuf:"varint,150348603,opt,name=destination_port_uint64,json=destinationPortUint64,proto3,oneof"`
}

func (*Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPortDestinationport) isQos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort() {
}

func (*Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPortString) isQos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort() {
}

func (*Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPortUint64) isQos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort() {
}

type isQos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort interface {
	isQos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort()
}

type Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePortSourceport struct {
	SourcePortSourceport Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort `protobuf:"varint,434715756,opt,name=source_port_sourceport,json=sourcePortSourceport,proto3,enum=openconfig.Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort,oneof"`
}

type Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePortString struct {
	SourcePortString string `protobuf:"bytes,531489437,opt,name=source_port_string,json=sourcePortString,proto3,oneof"`
}

type Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePortUint64 struct {
	SourcePortUint64 uint64 `protobuf:"varint,275615616,opt,name=source_port_uint64,json=sourcePortUint64,proto3,oneof"`
}

func (*Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePortSourceport) isQos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort() {
}

func (*Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePortString) isQos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort() {
}

func (*Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePortUint64) isQos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort() {
}

type Qos_ForwardingGroups_ForwardingGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Qos_ForwardingGroups_ForwardingGroup_Config `protobuf:"bytes,30587438,opt,name=config,proto3" json:"config,omitempty"`
	State  *Qos_ForwardingGroups_ForwardingGroup_State  `protobuf:"bytes,512276571,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Qos_ForwardingGroups_ForwardingGroup) Reset() {
	*x = Qos_ForwardingGroups_ForwardingGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ForwardingGroups_ForwardingGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ForwardingGroups_ForwardingGroup) ProtoMessage() {}

func (x *Qos_ForwardingGroups_ForwardingGroup) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ForwardingGroups_ForwardingGroup.ProtoReflect.Descriptor instead.
func (*Qos_ForwardingGroups_ForwardingGroup) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *Qos_ForwardingGroups_ForwardingGroup) GetConfig() *Qos_ForwardingGroups_ForwardingGroup_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Qos_ForwardingGroups_ForwardingGroup) GetState() *Qos_ForwardingGroups_ForwardingGroup_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Qos_ForwardingGroups_ForwardingGroupKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string                                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ForwardingGroup *Qos_ForwardingGroups_ForwardingGroup `protobuf:"bytes,2,opt,name=forwarding_group,json=forwardingGroup,proto3" json:"forwarding_group,omitempty"`
}

func (x *Qos_ForwardingGroups_ForwardingGroupKey) Reset() {
	*x = Qos_ForwardingGroups_ForwardingGroupKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ForwardingGroups_ForwardingGroupKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ForwardingGroups_ForwardingGroupKey) ProtoMessage() {}

func (x *Qos_ForwardingGroups_ForwardingGroupKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ForwardingGroups_ForwardingGroupKey.ProtoReflect.Descriptor instead.
func (*Qos_ForwardingGroups_ForwardingGroupKey) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 2, 1}
}

func (x *Qos_ForwardingGroups_ForwardingGroupKey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Qos_ForwardingGroups_ForwardingGroupKey) GetForwardingGroup() *Qos_ForwardingGroups_ForwardingGroup {
	if x != nil {
		return x.ForwardingGroup
	}
	return nil
}

type Qos_ForwardingGroups_ForwardingGroup_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FabricPriority *ywrapper.UintValue   `protobuf:"bytes,199494503,opt,name=fabric_priority,json=fabricPriority,proto3" json:"fabric_priority,omitempty"`
	Name           *ywrapper.StringValue `protobuf:"bytes,179879028,opt,name=name,proto3" json:"name,omitempty"`
	OutputQueue    *ywrapper.StringValue `protobuf:"bytes,22359152,opt,name=output_queue,json=outputQueue,proto3" json:"output_queue,omitempty"`
}

func (x *Qos_ForwardingGroups_ForwardingGroup_Config) Reset() {
	*x = Qos_ForwardingGroups_ForwardingGroup_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ForwardingGroups_ForwardingGroup_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ForwardingGroups_ForwardingGroup_Config) ProtoMessage() {}

func (x *Qos_ForwardingGroups_ForwardingGroup_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ForwardingGroups_ForwardingGroup_Config.ProtoReflect.Descriptor instead.
func (*Qos_ForwardingGroups_ForwardingGroup_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 2, 0, 0}
}

func (x *Qos_ForwardingGroups_ForwardingGroup_Config) GetFabricPriority() *ywrapper.UintValue {
	if x != nil {
		return x.FabricPriority
	}
	return nil
}

func (x *Qos_ForwardingGroups_ForwardingGroup_Config) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Qos_ForwardingGroups_ForwardingGroup_Config) GetOutputQueue() *ywrapper.StringValue {
	if x != nil {
		return x.OutputQueue
	}
	return nil
}

type Qos_ForwardingGroups_ForwardingGroup_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FabricPriority *ywrapper.UintValue   `protobuf:"bytes,435056042,opt,name=fabric_priority,json=fabricPriority,proto3" json:"fabric_priority,omitempty"`
	Name           *ywrapper.StringValue `protobuf:"bytes,399045611,opt,name=name,proto3" json:"name,omitempty"`
	OutputQueue    *ywrapper.StringValue `protobuf:"bytes,104836423,opt,name=output_queue,json=outputQueue,proto3" json:"output_queue,omitempty"`
}

func (x *Qos_ForwardingGroups_ForwardingGroup_State) Reset() {
	*x = Qos_ForwardingGroups_ForwardingGroup_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ForwardingGroups_ForwardingGroup_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ForwardingGroups_ForwardingGroup_State) ProtoMessage() {}

func (x *Qos_ForwardingGroups_ForwardingGroup_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ForwardingGroups_ForwardingGroup_State.ProtoReflect.Descriptor instead.
func (*Qos_ForwardingGroups_ForwardingGroup_State) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 2, 0, 1}
}

func (x *Qos_ForwardingGroups_ForwardingGroup_State) GetFabricPriority() *ywrapper.UintValue {
	if x != nil {
		return x.FabricPriority
	}
	return nil
}

func (x *Qos_ForwardingGroups_ForwardingGroup_State) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Qos_ForwardingGroups_ForwardingGroup_State) GetOutputQueue() *ywrapper.StringValue {
	if x != nil {
		return x.OutputQueue
	}
	return nil
}

type Qos_Interfaces_Interface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config       *Qos_Interfaces_Interface_Config       `protobuf:"bytes,151272640,opt,name=config,proto3" json:"config,omitempty"`
	Input        *Qos_Interfaces_Interface_Input        `protobuf:"bytes,185281278,opt,name=input,proto3" json:"input,omitempty"`
	InterfaceRef *Qos_Interfaces_Interface_InterfaceRef `protobuf:"bytes,340560111,opt,name=interface_ref,json=interfaceRef,proto3" json:"interface_ref,omitempty"`
	Output       *Qos_Interfaces_Interface_Output       `protobuf:"bytes,494792021,opt,name=output,proto3" json:"output,omitempty"`
	State        *Qos_Interfaces_Interface_State        `protobuf:"bytes,236972729,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Qos_Interfaces_Interface) Reset() {
	*x = Qos_Interfaces_Interface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Interfaces_Interface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Interfaces_Interface) ProtoMessage() {}

func (x *Qos_Interfaces_Interface) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Interfaces_Interface.ProtoReflect.Descriptor instead.
func (*Qos_Interfaces_Interface) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0}
}

func (x *Qos_Interfaces_Interface) GetConfig() *Qos_Interfaces_Interface_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Qos_Interfaces_Interface) GetInput() *Qos_Interfaces_Interface_Input {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *Qos_Interfaces_Interface) GetInterfaceRef() *Qos_Interfaces_Interface_InterfaceRef {
	if x != nil {
		return x.InterfaceRef
	}
	return nil
}

func (x *Qos_Interfaces_Interface) GetOutput() *Qos_Interfaces_Interface_Output {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *Qos_Interfaces_Interface) GetState() *Qos_Interfaces_Interface_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Qos_Interfaces_InterfaceKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceId string                    `protobuf:"bytes,1,opt,name=interface_id,json=interfaceId,proto3" json:"interface_id,omitempty"`
	Interface   *Qos_Interfaces_Interface `protobuf:"bytes,2,opt,name=interface,proto3" json:"interface,omitempty"`
}

func (x *Qos_Interfaces_InterfaceKey) Reset() {
	*x = Qos_Interfaces_InterfaceKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Interfaces_InterfaceKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Interfaces_InterfaceKey) ProtoMessage() {}

func (x *Qos_Interfaces_InterfaceKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Interfaces_InterfaceKey.ProtoReflect.Descriptor instead.
func (*Qos_Interfaces_InterfaceKey) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 1}
}

func (x *Qos_Interfaces_InterfaceKey) GetInterfaceId() string {
	if x != nil {
		return x.InterfaceId
	}
	return ""
}

func (x *Qos_Interfaces_InterfaceKey) GetInterface() *Qos_Interfaces_Interface {
	if x != nil {
		return x.Interface
	}
	return nil
}

type Qos_Interfaces_Interface_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceId *ywrapper.StringValue `protobuf:"bytes,261126006,opt,name=interface_id,json=interfaceId,proto3" json:"interface_id,omitempty"`
}

func (x *Qos_Interfaces_Interface_Config) Reset() {
	*x = Qos_Interfaces_Interface_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Interfaces_Interface_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Interfaces_Interface_Config) ProtoMessage() {}

func (x *Qos_Interfaces_Interface_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Interfaces_Interface_Config.ProtoReflect.Descriptor instead.
func (*Qos_Interfaces_Interface_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0, 0}
}

func (x *Qos_Interfaces_Interface_Config) GetInterfaceId() *ywrapper.StringValue {
	if x != nil {
		return x.InterfaceId
	}
	return nil
}

type Qos_Interfaces_Interface_Input struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Classifiers         *Qos_Interfaces_Interface_Input_Classifiers         `protobuf:"bytes,38586209,opt,name=classifiers,proto3" json:"classifiers,omitempty"`
	Config              *Qos_Interfaces_Interface_Input_Config              `protobuf:"bytes,195844559,opt,name=config,proto3" json:"config,omitempty"`
	Queues              *Qos_Interfaces_Interface_Input_Queues              `protobuf:"bytes,491614229,opt,name=queues,proto3" json:"queues,omitempty"`
	SchedulerPolicy     *Qos_Interfaces_Interface_Input_SchedulerPolicy     `protobuf:"bytes,391585903,opt,name=scheduler_policy,json=schedulerPolicy,proto3" json:"scheduler_policy,omitempty"`
	State               *Qos_Interfaces_Interface_Input_State               `protobuf:"bytes,273823424,opt,name=state,proto3" json:"state,omitempty"`
	VirtualOutputQueues *Qos_Interfaces_Interface_Input_VirtualOutputQueues `protobuf:"bytes,370520089,opt,name=virtual_output_queues,json=virtualOutputQueues,proto3" json:"virtual_output_queues,omitempty"`
}

func (x *Qos_Interfaces_Interface_Input) Reset() {
	*x = Qos_Interfaces_Interface_Input{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Interfaces_Interface_Input) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Interfaces_Interface_Input) ProtoMessage() {}

func (x *Qos_Interfaces_Interface_Input) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Interfaces_Interface_Input.ProtoReflect.Descriptor instead.
func (*Qos_Interfaces_Interface_Input) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0, 1}
}

func (x *Qos_Interfaces_Interface_Input) GetClassifiers() *Qos_Interfaces_Interface_Input_Classifiers {
	if x != nil {
		return x.Classifiers
	}
	return nil
}

func (x *Qos_Interfaces_Interface_Input) GetConfig() *Qos_Interfaces_Interface_Input_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Qos_Interfaces_Interface_Input) GetQueues() *Qos_Interfaces_Interface_Input_Queues {
	if x != nil {
		return x.Queues
	}
	return nil
}

func (x *Qos_Interfaces_Interface_Input) GetSchedulerPolicy() *Qos_Interfaces_Interface_Input_SchedulerPolicy {
	if x != nil {
		return x.SchedulerPolicy
	}
	return nil
}

func (x *Qos_Interfaces_Interface_Input) GetState() *Qos_Interfaces_Interface_Input_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Qos_Interfaces_Interface_Input) GetVirtualOutputQueues() *Qos_Interfaces_Interface_Input_VirtualOutputQueues {
	if x != nil {
		return x.VirtualOutputQueues
	}
	return nil
}

type Qos_Interfaces_Interface_InterfaceRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Qos_Interfaces_Interface_InterfaceRef_Config `protobuf:"bytes,115373008,opt,name=config,proto3" json:"config,omitempty"`
	State  *Qos_Interfaces_Interface_InterfaceRef_State  `protobuf:"bytes,487930057,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Qos_Interfaces_Interface_InterfaceRef) Reset() {
	*x = Qos_Interfaces_Interface_InterfaceRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Interfaces_Interface_InterfaceRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Interfaces_Interface_InterfaceRef) ProtoMessage() {}

func (x *Qos_Interfaces_Interface_InterfaceRef) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Interfaces_Interface_InterfaceRef.ProtoReflect.Descriptor instead.
func (*Qos_Interfaces_Interface_InterfaceRef) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0, 2}
}

func (x *Qos_Interfaces_Interface_InterfaceRef) GetConfig() *Qos_Interfaces_Interface_InterfaceRef_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Qos_Interfaces_Interface_InterfaceRef) GetState() *Qos_Interfaces_Interface_InterfaceRef_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Qos_Interfaces_Interface_Output struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Classifiers     *Qos_Interfaces_Interface_Output_Classifiers     `protobuf:"bytes,100369638,opt,name=classifiers,proto3" json:"classifiers,omitempty"`
	Config          *Qos_Interfaces_Interface_Output_Config          `protobuf:"bytes,362175482,opt,name=config,proto3" json:"config,omitempty"`
	InterfaceRef    *Qos_Interfaces_Interface_Output_InterfaceRef    `protobuf:"bytes,13944721,opt,name=interface_ref,json=interfaceRef,proto3" json:"interface_ref,omitempty"`
	Queues          *Qos_Interfaces_Interface_Output_Queues          `protobuf:"bytes,208565052,opt,name=queues,proto3" json:"queues,omitempty"`
	SchedulerPolicy *Qos_Interfaces_Interface_Output_SchedulerPolicy `protobuf:"bytes,345632622,opt,name=scheduler_policy,json=schedulerPolicy,proto3" json:"scheduler_policy,omitempty"`
	State           *Qos_Interfaces_Interface_Output_State           `protobuf:"bytes,109678103,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Qos_Interfaces_Interface_Output) Reset() {
	*x = Qos_Interfaces_Interface_Output{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Interfaces_Interface_Output) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Interfaces_Interface_Output) ProtoMessage() {}

func (x *Qos_Interfaces_Interface_Output) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Interfaces_Interface_Output.ProtoReflect.Descriptor instead.
func (*Qos_Interfaces_Interface_Output) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0, 3}
}

func (x *Qos_Interfaces_Interface_Output) GetClassifiers() *Qos_Interfaces_Interface_Output_Classifiers {
	if x != nil {
		return x.Classifiers
	}
	return nil
}

func (x *Qos_Interfaces_Interface_Output) GetConfig() *Qos_Interfaces_Interface_Output_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Qos_Interfaces_Interface_Output) GetInterfaceRef() *Qos_Interfaces_Interface_Output_InterfaceRef {
	if x != nil {
		return x.InterfaceRef
	}
	return nil
}

func (x *Qos_Interfaces_Interface_Output) GetQueues() *Qos_Interfaces_Interface_Output_Queues {
	if x != nil {
		return x.Queues
	}
	return nil
}

func (x *Qos_Interfaces_Interface_Output) GetSchedulerPolicy() *Qos_Interfaces_Interface_Output_SchedulerPolicy {
	if x != nil {
		return x.SchedulerPolicy
	}
	return nil
}

func (x *Qos_Interfaces_Interface_Output) GetState() *Qos_Interfaces_Interface_Output_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Qos_Interfaces_Interface_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceId *ywrapper.StringValue `protobuf:"bytes,173808393,opt,name=interface_id,json=interfaceId,proto3" json:"interface_id,omitempty"`
}

func (x *Qos_Interfaces_Interface_State) Reset() {
	*x = Qos_Interfaces_Interface_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Interfaces_Interface_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Interfaces_Interface_State) ProtoMessage() {}

func (x *Qos_Interfaces_Interface_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Interfaces_Interface_State.ProtoReflect.Descriptor instead.
func (*Qos_Interfaces_Interface_State) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0, 4}
}

func (x *Qos_Interfaces_Interface_State) GetInterfaceId() *ywrapper.StringValue {
	if x != nil {
		return x.InterfaceId
	}
	return nil
}

type Qos_Interfaces_Interface_Input_Classifiers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Classifier []*Qos_Interfaces_Interface_Input_Classifiers_ClassifierKey `protobuf:"bytes,29408171,rep,name=classifier,proto3" json:"classifier,omitempty"`
}

func (x *Qos_Interfaces_Interface_Input_Classifiers) Reset() {
	*x = Qos_Interfaces_Interface_Input_Classifiers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Interfaces_Interface_Input_Classifiers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Interfaces_Interface_Input_Classifiers) ProtoMessage() {}

func (x *Qos_Interfaces_Interface_Input_Classifiers) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Interfaces_Interface_Input_Classifiers.ProtoReflect.Descriptor instead.
func (*Qos_Interfaces_Interface_Input_Classifiers) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0, 1, 0}
}

func (x *Qos_Interfaces_Interface_Input_Classifiers) GetClassifier() []*Qos_Interfaces_Interface_Input_Classifiers_ClassifierKey {
	if x != nil {
		return x.Classifier
	}
	return nil
}

type Qos_Interfaces_Interface_Input_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Qos_Interfaces_Interface_Input_Config) Reset() {
	*x = Qos_Interfaces_Interface_Input_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Interfaces_Interface_Input_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Interfaces_Interface_Input_Config) ProtoMessage() {}

func (x *Qos_Interfaces_Interface_Input_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Interfaces_Interface_Input_Config.ProtoReflect.Descriptor instead.
func (*Qos_Interfaces_Interface_Input_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0, 1, 1}
}

type Qos_Interfaces_Interface_Input_Queues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Queue []*Qos_Interfaces_Interface_Input_Queues_QueueKey `protobuf:"bytes,103221525,rep,name=queue,proto3" json:"queue,omitempty"`
}

func (x *Qos_Interfaces_Interface_Input_Queues) Reset() {
	*x = Qos_Interfaces_Interface_Input_Queues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Interfaces_Interface_Input_Queues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Interfaces_Interface_Input_Queues) ProtoMessage() {}

func (x *Qos_Interfaces_Interface_Input_Queues) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Interfaces_Interface_Input_Queues.ProtoReflect.Descriptor instead.
func (*Qos_Interfaces_Interface_Input_Queues) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0, 1, 2}
}

func (x *Qos_Interfaces_Interface_Input_Queues) GetQueue() []*Qos_Interfaces_Interface_Input_Queues_QueueKey {
	if x != nil {
		return x.Queue
	}
	return nil
}

type Qos_Interfaces_Interface_Input_SchedulerPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config     *Qos_Interfaces_Interface_Input_SchedulerPolicy_Config     `protobuf:"bytes,506789456,opt,name=config,proto3" json:"config,omitempty"`
	Schedulers *Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers `protobuf:"bytes,242022128,opt,name=schedulers,proto3" json:"schedulers,omitempty"`
	State      *Qos_Interfaces_Interface_Input_SchedulerPolicy_State      `protobuf:"bytes,403641417,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Qos_Interfaces_Interface_Input_SchedulerPolicy) Reset() {
	*x = Qos_Interfaces_Interface_Input_SchedulerPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Interfaces_Interface_Input_SchedulerPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Interfaces_Interface_Input_SchedulerPolicy) ProtoMessage() {}

func (x *Qos_Interfaces_Interface_Input_SchedulerPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Interfaces_Interface_Input_SchedulerPolicy.ProtoReflect.Descriptor instead.
func (*Qos_Interfaces_Interface_Input_SchedulerPolicy) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0, 1, 3}
}

func (x *Qos_Interfaces_Interface_Input_SchedulerPolicy) GetConfig() *Qos_Interfaces_Interface_Input_SchedulerPolicy_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Qos_Interfaces_Interface_Input_SchedulerPolicy) GetSchedulers() *Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers {
	if x != nil {
		return x.Schedulers
	}
	return nil
}

func (x *Qos_Interfaces_Interface_Input_SchedulerPolicy) GetState() *Qos_Interfaces_Interface_Input_SchedulerPolicy_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Qos_Interfaces_Interface_Input_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Qos_Interfaces_Interface_Input_State) Reset() {
	*x = Qos_Interfaces_Interface_Input_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Interfaces_Interface_Input_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Interfaces_Interface_Input_State) ProtoMessage() {}

func (x *Qos_Interfaces_Interface_Input_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Interfaces_Interface_Input_State.ProtoReflect.Descriptor instead.
func (*Qos_Interfaces_Interface_Input_State) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0, 1, 4}
}

type Qos_Interfaces_Interface_Input_VirtualOutputQueues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VoqInterface []*Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey `protobuf:"bytes,134149572,rep,name=voq_interface,json=voqInterface,proto3" json:"voq_interface,omitempty"`
}

func (x *Qos_Interfaces_Interface_Input_VirtualOutputQueues) Reset() {
	*x = Qos_Interfaces_Interface_Input_VirtualOutputQueues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Interfaces_Interface_Input_VirtualOutputQueues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Interfaces_Interface_Input_VirtualOutputQueues) ProtoMessage() {}

func (x *Qos_Interfaces_Interface_Input_VirtualOutputQueues) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Interfaces_Interface_Input_VirtualOutputQueues.ProtoReflect.Descriptor instead.
func (*Qos_Interfaces_Interface_Input_VirtualOutputQueues) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0, 1, 5}
}

func (x *Qos_Interfaces_Interface_Input_VirtualOutputQueues) GetVoqInterface() []*Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey {
	if x != nil {
		return x.VoqInterface
	}
	return nil
}

type Qos_Interfaces_Interface_Input_Classifiers_Classifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Qos_Interfaces_Interface_Input_Classifiers_Classifier_Config `protobuf:"bytes,536240380,opt,name=config,proto3" json:"config,omitempty"`
	State  *Qos_Interfaces_Interface_Input_Classifiers_Classifier_State  `protobuf:"bytes,447595509,opt,name=state,proto3" json:"state,omitempty"`
	Terms  *Qos_Interfaces_Interface_Input_Classifiers_Classifier_Terms  `protobuf:"bytes,234168483,opt,name=terms,proto3" json:"terms,omitempty"`
}

func (x *Qos_Interfaces_Interface_Input_Classifiers_Classifier) Reset() {
	*x = Qos_Interfaces_Interface_Input_Classifiers_Classifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Interfaces_Interface_Input_Classifiers_Classifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Interfaces_Interface_Input_Classifiers_Classifier) ProtoMessage() {}

func (x *Qos_Interfaces_Interface_Input_Classifiers_Classifier) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Interfaces_Interface_Input_Classifiers_Classifier.ProtoReflect.Descriptor instead.
func (*Qos_Interfaces_Interface_Input_Classifiers_Classifier) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0, 1, 0, 0}
}

func (x *Qos_Interfaces_Interface_Input_Classifiers_Classifier) GetConfig() *Qos_Interfaces_Interface_Input_Classifiers_Classifier_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Qos_Interfaces_Interface_Input_Classifiers_Classifier) GetState() *Qos_Interfaces_Interface_Input_Classifiers_Classifier_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Qos_Interfaces_Interface_Input_Classifiers_Classifier) GetTerms() *Qos_Interfaces_Interface_Input_Classifiers_Classifier_Terms {
	if x != nil {
		return x.Terms
	}
	return nil
}

type Qos_Interfaces_Interface_Input_Classifiers_ClassifierKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       Qos_Interfaces_Interface_Input_Classifiers_ClassifierKey_Type `protobuf:"varint,1,opt,name=type,proto3,enum=openconfig.Qos_Interfaces_Interface_Input_Classifiers_ClassifierKey_Type" json:"type,omitempty"`
	Classifier *Qos_Interfaces_Interface_Input_Classifiers_Classifier        `protobuf:"bytes,2,opt,name=classifier,proto3" json:"classifier,omitempty"`
}

func (x *Qos_Interfaces_Interface_Input_Classifiers_ClassifierKey) Reset() {
	*x = Qos_Interfaces_Interface_Input_Classifiers_ClassifierKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Interfaces_Interface_Input_Classifiers_ClassifierKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Interfaces_Interface_Input_Classifiers_ClassifierKey) ProtoMessage() {}

func (x *Qos_Interfaces_Interface_Input_Classifiers_ClassifierKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Interfaces_Interface_Input_Classifiers_ClassifierKey.ProtoReflect.Descriptor instead.
func (*Qos_Interfaces_Interface_Input_Classifiers_ClassifierKey) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0, 1, 0, 1}
}

func (x *Qos_Interfaces_Interface_Input_Classifiers_ClassifierKey) GetType() Qos_Interfaces_Interface_Input_Classifiers_ClassifierKey_Type {
	if x != nil {
		return x.Type
	}
	return Qos_Interfaces_Interface_Input_Classifiers_ClassifierKey_TYPE_UNSET
}

func (x *Qos_Interfaces_Interface_Input_Classifiers_ClassifierKey) GetClassifier() *Qos_Interfaces_Interface_Input_Classifiers_Classifier {
	if x != nil {
		return x.Classifier
	}
	return nil
}

type Qos_Interfaces_Interface_Input_Classifiers_Classifier_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *ywrapper.StringValue                                             `protobuf:"bytes,202460638,opt,name=name,proto3" json:"name,omitempty"`
	Type Qos_Interfaces_Interface_Input_Classifiers_Classifier_Config_Type `protobuf:"varint,9240883,opt,name=type,proto3,enum=openconfig.Qos_Interfaces_Interface_Input_Classifiers_Classifier_Config_Type" json:"type,omitempty"`
}

func (x *Qos_Interfaces_Interface_Input_Classifiers_Classifier_Config) Reset() {
	*x = Qos_Interfaces_Interface_Input_Classifiers_Classifier_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Interfaces_Interface_Input_Classifiers_Classifier_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Interfaces_Interface_Input_Classifiers_Classifier_Config) ProtoMessage() {}

func (x *Qos_Interfaces_Interface_Input_Classifiers_Classifier_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Interfaces_Interface_Input_Classifiers_Classifier_Config.ProtoReflect.Descriptor instead.
func (*Qos_Interfaces_Interface_Input_Classifiers_Classifier_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0, 1, 0, 0, 0}
}

func (x *Qos_Interfaces_Interface_Input_Classifiers_Classifier_Config) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Qos_Interfaces_Interface_Input_Classifiers_Classifier_Config) GetType() Qos_Interfaces_Interface_Input_Classifiers_Classifier_Config_Type {
	if x != nil {
		return x.Type
	}
	return Qos_Interfaces_Interface_Input_Classifiers_Classifier_Config_TYPE_UNSET
}

type Qos_Interfaces_Interface_Input_Classifiers_Classifier_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *ywrapper.StringValue                                            `protobuf:"bytes,383524049,opt,name=name,proto3" json:"name,omitempty"`
	Type Qos_Interfaces_Interface_Input_Classifiers_Classifier_State_Type `protobuf:"varint,94771320,opt,name=type,proto3,enum=openconfig.Qos_Interfaces_Interface_Input_Classifiers_Classifier_State_Type" json:"type,omitempty"`
}

func (x *Qos_Interfaces_Interface_Input_Classifiers_Classifier_State) Reset() {
	*x = Qos_Interfaces_Interface_Input_Classifiers_Classifier_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Interfaces_Interface_Input_Classifiers_Classifier_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Interfaces_Interface_Input_Classifiers_Classifier_State) ProtoMessage() {}

func (x *Qos_Interfaces_Interface_Input_Classifiers_Classifier_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Interfaces_Interface_Input_Classifiers_Classifier_State.ProtoReflect.Descriptor instead.
func (*Qos_Interfaces_Interface_Input_Classifiers_Classifier_State) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0, 1, 0, 0, 1}
}

func (x *Qos_Interfaces_Interface_Input_Classifiers_Classifier_State) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Qos_Interfaces_Interface_Input_Classifiers_Classifier_State) GetType() Qos_Interfaces_Interface_Input_Classifiers_Classifier_State_Type {
	if x != nil {
		return x.Type
	}
	return Qos_Interfaces_Interface_Input_Classifiers_Classifier_State_TYPE_UNSET
}

type Qos_Interfaces_Interface_Input_Classifiers_Classifier_Terms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Term []*Qos_Interfaces_Interface_Input_Classifiers_Classifier_Terms_TermKey `protobuf:"bytes,526585944,rep,name=term,proto3" json:"term,omitempty"`
}

func (x *Qos_Interfaces_Interface_Input_Classifiers_Classifier_Terms) Reset() {
	*x = Qos_Interfaces_Interface_Input_Classifiers_Classifier_Terms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Interfaces_Interface_Input_Classifiers_Classifier_Terms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Interfaces_Interface_Input_Classifiers_Classifier_Terms) ProtoMessage() {}

func (x *Qos_Interfaces_Interface_Input_Classifiers_Classifier_Terms) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Interfaces_Interface_Input_Classifiers_Classifier_Terms.ProtoReflect.Descriptor instead.
func (*Qos_Interfaces_Interface_Input_Classifiers_Classifier_Terms) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0, 1, 0, 0, 2}
}

func (x *Qos_Interfaces_Interface_Input_Classifiers_Classifier_Terms) GetTerm() []*Qos_Interfaces_Interface_Input_Classifiers_Classifier_Terms_TermKey {
	if x != nil {
		return x.Term
	}
	return nil
}

type Qos_Interfaces_Interface_Input_Classifiers_Classifier_Terms_Term struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Qos_Interfaces_Interface_Input_Classifiers_Classifier_Terms_Term_Config `protobuf:"bytes,295136477,opt,name=config,proto3" json:"config,omitempty"`
	State  *Qos_Interfaces_Interface_Input_Classifiers_Classifier_Terms_Term_State  `protobuf:"bytes,434316754,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Qos_Interfaces_Interface_Input_Classifiers_Classifier_Terms_Term) Reset() {
	*x = Qos_Interfaces_Interface_Input_Classifiers_Classifier_Terms_Term{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Interfaces_Interface_Input_Classifiers_Classifier_Terms_Term) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Interfaces_Interface_Input_Classifiers_Classifier_Terms_Term) ProtoMessage() {}

func (x *Qos_Interfaces_Interface_Input_Classifiers_Classifier_Terms_Term) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Interfaces_Interface_Input_Classifiers_Classifier_Terms_Term.ProtoReflect.Descriptor instead.
func (*Qos_Interfaces_Interface_Input_Classifiers_Classifier_Terms_Term) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0, 1, 0, 0, 2, 0}
}

func (x *Qos_Interfaces_Interface_Input_Classifiers_Classifier_Terms_Term) GetConfig() *Qos_Interfaces_Interface_Input_Classifiers_Classifier_Terms_Term_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Qos_Interfaces_Interface_Input_Classifiers_Classifier_Terms_Term) GetState() *Qos_Interfaces_Interface_Input_Classifiers_Classifier_Terms_Term_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Qos_Interfaces_Interface_Input_Classifiers_Classifier_Terms_TermKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string                                                            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Term *Qos_Interfaces_Interface_Input_Classifiers_Classifier_Terms_Term `protobuf:"bytes,2,opt,name=term,proto3" json:"term,omitempty"`
}

func (x *Qos_Interfaces_Interface_Input_Classifiers_Classifier_Terms_TermKey) Reset() {
	*x = Qos_Interfaces_Interface_Input_Classifiers_Classifier_Terms_TermKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Interfaces_Interface_Input_Classifiers_Classifier_Terms_TermKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Interfaces_Interface_Input_Classifiers_Classifier_Terms_TermKey) ProtoMessage() {}

func (x *Qos_Interfaces_Interface_Input_Classifiers_Classifier_Terms_TermKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Interfaces_Interface_Input_Classifiers_Classifier_Terms_TermKey.ProtoReflect.Descriptor instead.
func (*Qos_Interfaces_Interface_Input_Classifiers_Classifier_Terms_TermKey) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0, 1, 0, 0, 2, 1}
}

func (x *Qos_Interfaces_Interface_Input_Classifiers_Classifier_Terms_TermKey) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Qos_Interfaces_Interface_Input_Classifiers_Classifier_Terms_TermKey) GetTerm() *Qos_Interfaces_Interface_Input_Classifiers_Classifier_Terms_Term {
	if x != nil {
		return x.Term
	}
	return nil
}

type Qos_Interfaces_Interface_Input_Classifiers_Classifier_Terms_Term_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *ywrapper.StringValue `protobuf:"bytes,465329095,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Qos_Interfaces_Interface_Input_Classifiers_Classifier_Terms_Term_Config) Reset() {
	*x = Qos_Interfaces_Interface_Input_Classifiers_Classifier_Terms_Term_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Interfaces_Interface_Input_Classifiers_Classifier_Terms_Term_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Interfaces_Interface_Input_Classifiers_Classifier_Terms_Term_Config) ProtoMessage() {}

func (x *Qos_Interfaces_Interface_Input_Classifiers_Classifier_Terms_Term_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Interfaces_Interface_Input_Classifiers_Classifier_Terms_Term_Config.ProtoReflect.Descriptor instead.
func (*Qos_Interfaces_Interface_Input_Classifiers_Classifier_Terms_Term_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0, 1, 0, 0, 2, 0, 0}
}

func (x *Qos_Interfaces_Interface_Input_Classifiers_Classifier_Terms_Term_Config) GetId() *ywrapper.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

type Qos_Interfaces_Interface_Input_Classifiers_Classifier_Terms_Term_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             *ywrapper.StringValue `protobuf:"bytes,151047026,opt,name=id,proto3" json:"id,omitempty"`
	MatchedOctets  *ywrapper.UintValue   `protobuf:"bytes,398563416,opt,name=matched_octets,json=matchedOctets,proto3" json:"matched_octets,omitempty"`
	MatchedPackets *ywrapper.UintValue   `protobuf:"bytes,150415211,opt,name=matched_packets,json=matchedPackets,proto3" json:"matched_packets,omitempty"`
}

func (x *Qos_Interfaces_Interface_Input_Classifiers_Classifier_Terms_Term_State) Reset() {
	*x = Qos_Interfaces_Interface_Input_Classifiers_Classifier_Terms_Term_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Interfaces_Interface_Input_Classifiers_Classifier_Terms_Term_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Interfaces_Interface_Input_Classifiers_Classifier_Terms_Term_State) ProtoMessage() {}

func (x *Qos_Interfaces_Interface_Input_Classifiers_Classifier_Terms_Term_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Interfaces_Interface_Input_Classifiers_Classifier_Terms_Term_State.ProtoReflect.Descriptor instead.
func (*Qos_Interfaces_Interface_Input_Classifiers_Classifier_Terms_Term_State) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0, 1, 0, 0, 2, 0, 1}
}

func (x *Qos_Interfaces_Interface_Input_Classifiers_Classifier_Terms_Term_State) GetId() *ywrapper.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Qos_Interfaces_Interface_Input_Classifiers_Classifier_Terms_Term_State) GetMatchedOctets() *ywrapper.UintValue {
	if x != nil {
		return x.MatchedOctets
	}
	return nil
}

func (x *Qos_Interfaces_Interface_Input_Classifiers_Classifier_Terms_Term_State) GetMatchedPackets() *ywrapper.UintValue {
	if x != nil {
		return x.MatchedPackets
	}
	return nil
}

type Qos_Interfaces_Interface_Input_Queues_Queue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Qos_Interfaces_Interface_Input_Queues_Queue_Config `protobuf:"bytes,503523130,opt,name=config,proto3" json:"config,omitempty"`
	State  *Qos_Interfaces_Interface_Input_Queues_Queue_State  `protobuf:"bytes,189832279,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Qos_Interfaces_Interface_Input_Queues_Queue) Reset() {
	*x = Qos_Interfaces_Interface_Input_Queues_Queue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Interfaces_Interface_Input_Queues_Queue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Interfaces_Interface_Input_Queues_Queue) ProtoMessage() {}

func (x *Qos_Interfaces_Interface_Input_Queues_Queue) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Interfaces_Interface_Input_Queues_Queue.ProtoReflect.Descriptor instead.
func (*Qos_Interfaces_Interface_Input_Queues_Queue) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0, 1, 2, 0}
}

func (x *Qos_Interfaces_Interface_Input_Queues_Queue) GetConfig() *Qos_Interfaces_Interface_Input_Queues_Queue_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Qos_Interfaces_Interface_Input_Queues_Queue) GetState() *Qos_Interfaces_Interface_Input_Queues_Queue_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Qos_Interfaces_Interface_Input_Queues_QueueKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string                                       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Queue *Qos_Interfaces_Interface_Input_Queues_Queue `protobuf:"bytes,2,opt,name=queue,proto3" json:"queue,omitempty"`
}

func (x *Qos_Interfaces_Interface_Input_Queues_QueueKey) Reset() {
	*x = Qos_Interfaces_Interface_Input_Queues_QueueKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Interfaces_Interface_Input_Queues_QueueKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Interfaces_Interface_Input_Queues_QueueKey) ProtoMessage() {}

func (x *Qos_Interfaces_Interface_Input_Queues_QueueKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Interfaces_Interface_Input_Queues_QueueKey.ProtoReflect.Descriptor instead.
func (*Qos_Interfaces_Interface_Input_Queues_QueueKey) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0, 1, 2, 1}
}

func (x *Qos_Interfaces_Interface_Input_Queues_QueueKey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Qos_Interfaces_Interface_Input_Queues_QueueKey) GetQueue() *Qos_Interfaces_Interface_Input_Queues_Queue {
	if x != nil {
		return x.Queue
	}
	return nil
}

type Qos_Interfaces_Interface_Input_Queues_Queue_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *ywrapper.StringValue `protobuf:"bytes,441396008,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Qos_Interfaces_Interface_Input_Queues_Queue_Config) Reset() {
	*x = Qos_Interfaces_Interface_Input_Queues_Queue_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Interfaces_Interface_Input_Queues_Queue_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Interfaces_Interface_Input_Queues_Queue_Config) ProtoMessage() {}

func (x *Qos_Interfaces_Interface_Input_Queues_Queue_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Interfaces_Interface_Input_Queues_Queue_Config.ProtoReflect.Descriptor instead.
func (*Qos_Interfaces_Interface_Input_Queues_Queue_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0, 1, 2, 0, 0}
}

func (x *Qos_Interfaces_Interface_Input_Queues_Queue_Config) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

type Qos_Interfaces_Interface_Input_Queues_Queue_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvgQueueLen    *ywrapper.UintValue   `protobuf:"bytes,357067202,opt,name=avg_queue_len,json=avgQueueLen,proto3" json:"avg_queue_len,omitempty"`
	DroppedPkts    *ywrapper.UintValue   `protobuf:"bytes,530366041,opt,name=dropped_pkts,json=droppedPkts,proto3" json:"dropped_pkts,omitempty"`
	MaxQueueLen    *ywrapper.UintValue   `protobuf:"bytes,535584496,opt,name=max_queue_len,json=maxQueueLen,proto3" json:"max_queue_len,omitempty"`
	Name           *ywrapper.StringValue `protobuf:"bytes,147116895,opt,name=name,proto3" json:"name,omitempty"`
	TransmitOctets *ywrapper.UintValue   `protobuf:"bytes,237910979,opt,name=transmit_octets,json=transmitOctets,proto3" json:"transmit_octets,omitempty"`
	TransmitPkts   *ywrapper.UintValue   `protobuf:"bytes,368710075,opt,name=transmit_pkts,json=transmitPkts,proto3" json:"transmit_pkts,omitempty"`
}

func (x *Qos_Interfaces_Interface_Input_Queues_Queue_State) Reset() {
	*x = Qos_Interfaces_Interface_Input_Queues_Queue_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Interfaces_Interface_Input_Queues_Queue_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Interfaces_Interface_Input_Queues_Queue_State) ProtoMessage() {}

func (x *Qos_Interfaces_Interface_Input_Queues_Queue_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Interfaces_Interface_Input_Queues_Queue_State.ProtoReflect.Descriptor instead.
func (*Qos_Interfaces_Interface_Input_Queues_Queue_State) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0, 1, 2, 0, 1}
}

func (x *Qos_Interfaces_Interface_Input_Queues_Queue_State) GetAvgQueueLen() *ywrapper.UintValue {
	if x != nil {
		return x.AvgQueueLen
	}
	return nil
}

func (x *Qos_Interfaces_Interface_Input_Queues_Queue_State) GetDroppedPkts() *ywrapper.UintValue {
	if x != nil {
		return x.DroppedPkts
	}
	return nil
}

func (x *Qos_Interfaces_Interface_Input_Queues_Queue_State) GetMaxQueueLen() *ywrapper.UintValue {
	if x != nil {
		return x.MaxQueueLen
	}
	return nil
}

func (x *Qos_Interfaces_Interface_Input_Queues_Queue_State) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Qos_Interfaces_Interface_Input_Queues_Queue_State) GetTransmitOctets() *ywrapper.UintValue {
	if x != nil {
		return x.TransmitOctets
	}
	return nil
}

func (x *Qos_Interfaces_Interface_Input_Queues_Queue_State) GetTransmitPkts() *ywrapper.UintValue {
	if x != nil {
		return x.TransmitPkts
	}
	return nil
}

type Qos_Interfaces_Interface_Input_SchedulerPolicy_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *ywrapper.StringValue `protobuf:"bytes,5527674,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Qos_Interfaces_Interface_Input_SchedulerPolicy_Config) Reset() {
	*x = Qos_Interfaces_Interface_Input_SchedulerPolicy_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Interfaces_Interface_Input_SchedulerPolicy_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Interfaces_Interface_Input_SchedulerPolicy_Config) ProtoMessage() {}

func (x *Qos_Interfaces_Interface_Input_SchedulerPolicy_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Interfaces_Interface_Input_SchedulerPolicy_Config.ProtoReflect.Descriptor instead.
func (*Qos_Interfaces_Interface_Input_SchedulerPolicy_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0, 1, 3, 0}
}

func (x *Qos_Interfaces_Interface_Input_SchedulerPolicy_Config) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

type Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scheduler []*Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey `protobuf:"bytes,306639558,rep,name=scheduler,proto3" json:"scheduler,omitempty"`
}

func (x *Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers) Reset() {
	*x = Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers) ProtoMessage() {}

func (x *Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers.ProtoReflect.Descriptor instead.
func (*Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0, 1, 3, 1}
}

func (x *Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers) GetScheduler() []*Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey {
	if x != nil {
		return x.Scheduler
	}
	return nil
}

type Qos_Interfaces_Interface_Input_SchedulerPolicy_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *ywrapper.StringValue `protobuf:"bytes,120647037,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Qos_Interfaces_Interface_Input_SchedulerPolicy_State) Reset() {
	*x = Qos_Interfaces_Interface_Input_SchedulerPolicy_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Interfaces_Interface_Input_SchedulerPolicy_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Interfaces_Interface_Input_SchedulerPolicy_State) ProtoMessage() {}

func (x *Qos_Interfaces_Interface_Input_SchedulerPolicy_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Interfaces_Interface_Input_SchedulerPolicy_State.ProtoReflect.Descriptor instead.
func (*Qos_Interfaces_Interface_Input_SchedulerPolicy_State) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0, 1, 3, 2}
}

func (x *Qos_Interfaces_Interface_Input_SchedulerPolicy_State) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

type Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State `protobuf:"bytes,395252664,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler) Reset() {
	*x = Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler) ProtoMessage() {}

func (x *Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler.ProtoReflect.Descriptor instead.
func (*Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0, 1, 3, 1, 0}
}

func (x *Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler) GetState() *Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sequence  uint64                                                               `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Scheduler *Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler `protobuf:"bytes,2,opt,name=scheduler,proto3" json:"scheduler,omitempty"`
}

func (x *Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey) Reset() {
	*x = Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey) ProtoMessage() {}

func (x *Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey.ProtoReflect.Descriptor instead.
func (*Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0, 1, 3, 1, 1}
}

func (x *Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey) GetScheduler() *Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler {
	if x != nil {
		return x.Scheduler
	}
	return nil
}

type Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConformingOctets *ywrapper.UintValue `protobuf:"bytes,204398478,opt,name=conforming_octets,json=conformingOctets,proto3" json:"conforming_octets,omitempty"`
	ConformingPkts   *ywrapper.UintValue `protobuf:"bytes,395467958,opt,name=conforming_pkts,json=conformingPkts,proto3" json:"conforming_pkts,omitempty"`
	ExceedingOctets  *ywrapper.UintValue `protobuf:"bytes,22590706,opt,name=exceeding_octets,json=exceedingOctets,proto3" json:"exceeding_octets,omitempty"`
	ExceedingPkts    *ywrapper.UintValue `protobuf:"bytes,80265874,opt,name=exceeding_pkts,json=exceedingPkts,proto3" json:"exceeding_pkts,omitempty"`
	Sequence         *ywrapper.UintValue `protobuf:"bytes,466083128,opt,name=sequence,proto3" json:"sequence,omitempty"`
	ViolatingOctets  *ywrapper.UintValue `protobuf:"bytes,419767763,opt,name=violating_octets,json=violatingOctets,proto3" json:"violating_octets,omitempty"`
	ViolatingPkts    *ywrapper.UintValue `protobuf:"bytes,174860491,opt,name=violating_pkts,json=violatingPkts,proto3" json:"violating_pkts,omitempty"`
}

func (x *Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State) Reset() {
	*x = Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State) ProtoMessage() {}

func (x *Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State.ProtoReflect.Descriptor instead.
func (*Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0, 1, 3, 1, 0, 0}
}

func (x *Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State) GetConformingOctets() *ywrapper.UintValue {
	if x != nil {
		return x.ConformingOctets
	}
	return nil
}

func (x *Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State) GetConformingPkts() *ywrapper.UintValue {
	if x != nil {
		return x.ConformingPkts
	}
	return nil
}

func (x *Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State) GetExceedingOctets() *ywrapper.UintValue {
	if x != nil {
		return x.ExceedingOctets
	}
	return nil
}

func (x *Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State) GetExceedingPkts() *ywrapper.UintValue {
	if x != nil {
		return x.ExceedingPkts
	}
	return nil
}

func (x *Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State) GetSequence() *ywrapper.UintValue {
	if x != nil {
		return x.Sequence
	}
	return nil
}

func (x *Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State) GetViolatingOctets() *ywrapper.UintValue {
	if x != nil {
		return x.ViolatingOctets
	}
	return nil
}

func (x *Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State) GetViolatingPkts() *ywrapper.UintValue {
	if x != nil {
		return x.ViolatingPkts
	}
	return nil
}

type Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config `protobuf:"bytes,78813417,opt,name=config,proto3" json:"config,omitempty"`
	Queues *Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues `protobuf:"bytes,40799367,opt,name=queues,proto3" json:"queues,omitempty"`
	State  *Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State  `protobuf:"bytes,323748030,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface) Reset() {
	*x = Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface) ProtoMessage() {}

func (x *Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface.ProtoReflect.Descriptor instead.
func (*Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0, 1, 5, 0}
}

func (x *Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface) GetConfig() *Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface) GetQueues() *Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues {
	if x != nil {
		return x.Queues
	}
	return nil
}

func (x *Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface) GetState() *Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string                                                           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	VoqInterface *Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface `protobuf:"bytes,2,opt,name=voq_interface,json=voqInterface,proto3" json:"voq_interface,omitempty"`
}

func (x *Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey) Reset() {
	*x = Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey) ProtoMessage() {}

func (x *Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey.ProtoReflect.Descriptor instead.
func (*Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0, 1, 5, 1}
}

func (x *Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey) GetVoqInterface() *Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface {
	if x != nil {
		return x.VoqInterface
	}
	return nil
}

type Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *ywrapper.StringValue `protobuf:"bytes,76520861,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config) Reset() {
	*x = Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config) ProtoMessage() {}

func (x *Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config.ProtoReflect.Descriptor instead.
func (*Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0, 1, 5, 0, 0}
}

func (x *Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

type Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Queue []*Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey `protobuf:"bytes,80000787,rep,name=queue,proto3" json:"queue,omitempty"`
}

func (x *Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues) Reset() {
	*x = Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues) ProtoMessage() {}

func (x *Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues.ProtoReflect.Descriptor instead.
func (*Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0, 1, 5, 0, 1}
}

func (x *Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues) GetQueue() []*Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey {
	if x != nil {
		return x.Queue
	}
	return nil
}

type Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *ywrapper.StringValue `protobuf:"bytes,75480420,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State) Reset() {
	*x = Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State) ProtoMessage() {}

func (x *Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State.ProtoReflect.Descriptor instead.
func (*Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0, 1, 5, 0, 2}
}

func (x *Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

type Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config `protobuf:"bytes,422405812,opt,name=config,proto3" json:"config,omitempty"`
	State  *Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State  `protobuf:"bytes,208271053,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue) Reset() {
	*x = Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue) ProtoMessage() {}

func (x *Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue.ProtoReflect.Descriptor instead.
func (*Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0, 1, 5, 0, 1, 0}
}

func (x *Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue) GetConfig() *Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue) GetState() *Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string                                                                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Queue *Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue `protobuf:"bytes,2,opt,name=queue,proto3" json:"queue,omitempty"`
}

func (x *Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey) Reset() {
	*x = Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey) ProtoMessage() {
}

func (x *Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey.ProtoReflect.Descriptor instead.
func (*Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0, 1, 5, 0, 1, 1}
}

func (x *Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey) GetQueue() *Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue {
	if x != nil {
		return x.Queue
	}
	return nil
}

type Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *ywrapper.StringValue `protobuf:"bytes,410648534,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config) Reset() {
	*x = Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config) ProtoMessage() {
}

func (x *Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config.ProtoReflect.Descriptor instead.
func (*Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0, 1, 5, 0, 1, 0, 0}
}

func (x *Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

type Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvgQueueLen    *ywrapper.UintValue   `protobuf:"bytes,370597120,opt,name=avg_queue_len,json=avgQueueLen,proto3" json:"avg_queue_len,omitempty"`
	DroppedPkts    *ywrapper.UintValue   `protobuf:"bytes,300610831,opt,name=dropped_pkts,json=droppedPkts,proto3" json:"dropped_pkts,omitempty"`
	MaxQueueLen    *ywrapper.UintValue   `protobuf:"bytes,489510182,opt,name=max_queue_len,json=maxQueueLen,proto3" json:"max_queue_len,omitempty"`
	Name           *ywrapper.StringValue `protobuf:"bytes,379083081,opt,name=name,proto3" json:"name,omitempty"`
	TransmitOctets *ywrapper.UintValue   `protobuf:"bytes,19609109,opt,name=transmit_octets,json=transmitOctets,proto3" json:"transmit_octets,omitempty"`
	TransmitPkts   *ywrapper.UintValue   `protobuf:"bytes,265927841,opt,name=transmit_pkts,json=transmitPkts,proto3" json:"transmit_pkts,omitempty"`
}

func (x *Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State) Reset() {
	*x = Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State) ProtoMessage() {
}

func (x *Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State.ProtoReflect.Descriptor instead.
func (*Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0, 1, 5, 0, 1, 0, 1}
}

func (x *Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State) GetAvgQueueLen() *ywrapper.UintValue {
	if x != nil {
		return x.AvgQueueLen
	}
	return nil
}

func (x *Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State) GetDroppedPkts() *ywrapper.UintValue {
	if x != nil {
		return x.DroppedPkts
	}
	return nil
}

func (x *Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State) GetMaxQueueLen() *ywrapper.UintValue {
	if x != nil {
		return x.MaxQueueLen
	}
	return nil
}

func (x *Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State) GetTransmitOctets() *ywrapper.UintValue {
	if x != nil {
		return x.TransmitOctets
	}
	return nil
}

func (x *Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State) GetTransmitPkts() *ywrapper.UintValue {
	if x != nil {
		return x.TransmitPkts
	}
	return nil
}

type Qos_Interfaces_Interface_InterfaceRef_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interface    *ywrapper.StringValue `protobuf:"bytes,31011128,opt,name=interface,proto3" json:"interface,omitempty"`
	Subinterface *ywrapper.UintValue   `protobuf:"bytes,407353336,opt,name=subinterface,proto3" json:"subinterface,omitempty"`
}

func (x *Qos_Interfaces_Interface_InterfaceRef_Config) Reset() {
	*x = Qos_Interfaces_Interface_InterfaceRef_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Interfaces_Interface_InterfaceRef_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Interfaces_Interface_InterfaceRef_Config) ProtoMessage() {}

func (x *Qos_Interfaces_Interface_InterfaceRef_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Interfaces_Interface_InterfaceRef_Config.ProtoReflect.Descriptor instead.
func (*Qos_Interfaces_Interface_InterfaceRef_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0, 2, 0}
}

func (x *Qos_Interfaces_Interface_InterfaceRef_Config) GetInterface() *ywrapper.StringValue {
	if x != nil {
		return x.Interface
	}
	return nil
}

func (x *Qos_Interfaces_Interface_InterfaceRef_Config) GetSubinterface() *ywrapper.UintValue {
	if x != nil {
		return x.Subinterface
	}
	return nil
}

type Qos_Interfaces_Interface_InterfaceRef_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interface    *ywrapper.StringValue `protobuf:"bytes,75395573,opt,name=interface,proto3" json:"interface,omitempty"`
	Subinterface *ywrapper.UintValue   `protobuf:"bytes,380934871,opt,name=subinterface,proto3" json:"subinterface,omitempty"`
}

func (x *Qos_Interfaces_Interface_InterfaceRef_State) Reset() {
	*x = Qos_Interfaces_Interface_InterfaceRef_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Interfaces_Interface_InterfaceRef_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Interfaces_Interface_InterfaceRef_State) ProtoMessage() {}

func (x *Qos_Interfaces_Interface_InterfaceRef_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Interfaces_Interface_InterfaceRef_State.ProtoReflect.Descriptor instead.
func (*Qos_Interfaces_Interface_InterfaceRef_State) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0, 2, 1}
}

func (x *Qos_Interfaces_Interface_InterfaceRef_State) GetInterface() *ywrapper.StringValue {
	if x != nil {
		return x.Interface
	}
	return nil
}

func (x *Qos_Interfaces_Interface_InterfaceRef_State) GetSubinterface() *ywrapper.UintValue {
	if x != nil {
		return x.Subinterface
	}
	return nil
}

type Qos_Interfaces_Interface_Output_Classifiers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Classifier []*Qos_Interfaces_Interface_Output_Classifiers_ClassifierKey `protobuf:"bytes,211046558,rep,name=classifier,proto3" json:"classifier,omitempty"`
}

func (x *Qos_Interfaces_Interface_Output_Classifiers) Reset() {
	*x = Qos_Interfaces_Interface_Output_Classifiers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Interfaces_Interface_Output_Classifiers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Interfaces_Interface_Output_Classifiers) ProtoMessage() {}

func (x *Qos_Interfaces_Interface_Output_Classifiers) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Interfaces_Interface_Output_Classifiers.ProtoReflect.Descriptor instead.
func (*Qos_Interfaces_Interface_Output_Classifiers) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0, 3, 0}
}

func (x *Qos_Interfaces_Interface_Output_Classifiers) GetClassifier() []*Qos_Interfaces_Interface_Output_Classifiers_ClassifierKey {
	if x != nil {
		return x.Classifier
	}
	return nil
}

type Qos_Interfaces_Interface_Output_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Qos_Interfaces_Interface_Output_Config) Reset() {
	*x = Qos_Interfaces_Interface_Output_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Interfaces_Interface_Output_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Interfaces_Interface_Output_Config) ProtoMessage() {}

func (x *Qos_Interfaces_Interface_Output_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Interfaces_Interface_Output_Config.ProtoReflect.Descriptor instead.
func (*Qos_Interfaces_Interface_Output_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0, 3, 1}
}

type Qos_Interfaces_Interface_Output_InterfaceRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Qos_Interfaces_Interface_Output_InterfaceRef_Config `protobuf:"bytes,412349494,opt,name=config,proto3" json:"config,omitempty"`
	State  *Qos_Interfaces_Interface_Output_InterfaceRef_State  `protobuf:"bytes,226867043,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Qos_Interfaces_Interface_Output_InterfaceRef) Reset() {
	*x = Qos_Interfaces_Interface_Output_InterfaceRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Interfaces_Interface_Output_InterfaceRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Interfaces_Interface_Output_InterfaceRef) ProtoMessage() {}

func (x *Qos_Interfaces_Interface_Output_InterfaceRef) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Interfaces_Interface_Output_InterfaceRef.ProtoReflect.Descriptor instead.
func (*Qos_Interfaces_Interface_Output_InterfaceRef) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0, 3, 2}
}

func (x *Qos_Interfaces_Interface_Output_InterfaceRef) GetConfig() *Qos_Interfaces_Interface_Output_InterfaceRef_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Qos_Interfaces_Interface_Output_InterfaceRef) GetState() *Qos_Interfaces_Interface_Output_InterfaceRef_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Qos_Interfaces_Interface_Output_Queues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Queue []*Qos_Interfaces_Interface_Output_Queues_QueueKey `protobuf:"bytes,316768612,rep,name=queue,proto3" json:"queue,omitempty"`
}

func (x *Qos_Interfaces_Interface_Output_Queues) Reset() {
	*x = Qos_Interfaces_Interface_Output_Queues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Interfaces_Interface_Output_Queues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Interfaces_Interface_Output_Queues) ProtoMessage() {}

func (x *Qos_Interfaces_Interface_Output_Queues) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Interfaces_Interface_Output_Queues.ProtoReflect.Descriptor instead.
func (*Qos_Interfaces_Interface_Output_Queues) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0, 3, 3}
}

func (x *Qos_Interfaces_Interface_Output_Queues) GetQueue() []*Qos_Interfaces_Interface_Output_Queues_QueueKey {
	if x != nil {
		return x.Queue
	}
	return nil
}

type Qos_Interfaces_Interface_Output_SchedulerPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config     *Qos_Interfaces_Interface_Output_SchedulerPolicy_Config     `protobuf:"bytes,507310111,opt,name=config,proto3" json:"config,omitempty"`
	Schedulers *Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers `protobuf:"bytes,300824503,opt,name=schedulers,proto3" json:"schedulers,omitempty"`
	State      *Qos_Interfaces_Interface_Output_SchedulerPolicy_State      `protobuf:"bytes,422509776,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Qos_Interfaces_Interface_Output_SchedulerPolicy) Reset() {
	*x = Qos_Interfaces_Interface_Output_SchedulerPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Interfaces_Interface_Output_SchedulerPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Interfaces_Interface_Output_SchedulerPolicy) ProtoMessage() {}

func (x *Qos_Interfaces_Interface_Output_SchedulerPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Interfaces_Interface_Output_SchedulerPolicy.ProtoReflect.Descriptor instead.
func (*Qos_Interfaces_Interface_Output_SchedulerPolicy) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0, 3, 4}
}

func (x *Qos_Interfaces_Interface_Output_SchedulerPolicy) GetConfig() *Qos_Interfaces_Interface_Output_SchedulerPolicy_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Qos_Interfaces_Interface_Output_SchedulerPolicy) GetSchedulers() *Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers {
	if x != nil {
		return x.Schedulers
	}
	return nil
}

func (x *Qos_Interfaces_Interface_Output_SchedulerPolicy) GetState() *Qos_Interfaces_Interface_Output_SchedulerPolicy_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Qos_Interfaces_Interface_Output_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Qos_Interfaces_Interface_Output_State) Reset() {
	*x = Qos_Interfaces_Interface_Output_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Interfaces_Interface_Output_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Interfaces_Interface_Output_State) ProtoMessage() {}

func (x *Qos_Interfaces_Interface_Output_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Interfaces_Interface_Output_State.ProtoReflect.Descriptor instead.
func (*Qos_Interfaces_Interface_Output_State) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0, 3, 5}
}

type Qos_Interfaces_Interface_Output_Classifiers_Classifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Qos_Interfaces_Interface_Output_Classifiers_Classifier_Config `protobuf:"bytes,130415471,opt,name=config,proto3" json:"config,omitempty"`
	State  *Qos_Interfaces_Interface_Output_Classifiers_Classifier_State  `protobuf:"bytes,464339424,opt,name=state,proto3" json:"state,omitempty"`
	Terms  *Qos_Interfaces_Interface_Output_Classifiers_Classifier_Terms  `protobuf:"bytes,44230374,opt,name=terms,proto3" json:"terms,omitempty"`
}

func (x *Qos_Interfaces_Interface_Output_Classifiers_Classifier) Reset() {
	*x = Qos_Interfaces_Interface_Output_Classifiers_Classifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Interfaces_Interface_Output_Classifiers_Classifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Interfaces_Interface_Output_Classifiers_Classifier) ProtoMessage() {}

func (x *Qos_Interfaces_Interface_Output_Classifiers_Classifier) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Interfaces_Interface_Output_Classifiers_Classifier.ProtoReflect.Descriptor instead.
func (*Qos_Interfaces_Interface_Output_Classifiers_Classifier) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0, 3, 0, 0}
}

func (x *Qos_Interfaces_Interface_Output_Classifiers_Classifier) GetConfig() *Qos_Interfaces_Interface_Output_Classifiers_Classifier_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Qos_Interfaces_Interface_Output_Classifiers_Classifier) GetState() *Qos_Interfaces_Interface_Output_Classifiers_Classifier_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Qos_Interfaces_Interface_Output_Classifiers_Classifier) GetTerms() *Qos_Interfaces_Interface_Output_Classifiers_Classifier_Terms {
	if x != nil {
		return x.Terms
	}
	return nil
}

type Qos_Interfaces_Interface_Output_Classifiers_ClassifierKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       Qos_Interfaces_Interface_Output_Classifiers_ClassifierKey_Type `protobuf:"varint,1,opt,name=type,proto3,enum=openconfig.Qos_Interfaces_Interface_Output_Classifiers_ClassifierKey_Type" json:"type,omitempty"`
	Classifier *Qos_Interfaces_Interface_Output_Classifiers_Classifier        `protobuf:"bytes,2,opt,name=classifier,proto3" json:"classifier,omitempty"`
}

func (x *Qos_Interfaces_Interface_Output_Classifiers_ClassifierKey) Reset() {
	*x = Qos_Interfaces_Interface_Output_Classifiers_ClassifierKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Interfaces_Interface_Output_Classifiers_ClassifierKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Interfaces_Interface_Output_Classifiers_ClassifierKey) ProtoMessage() {}

func (x *Qos_Interfaces_Interface_Output_Classifiers_ClassifierKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Interfaces_Interface_Output_Classifiers_ClassifierKey.ProtoReflect.Descriptor instead.
func (*Qos_Interfaces_Interface_Output_Classifiers_ClassifierKey) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0, 3, 0, 1}
}

func (x *Qos_Interfaces_Interface_Output_Classifiers_ClassifierKey) GetType() Qos_Interfaces_Interface_Output_Classifiers_ClassifierKey_Type {
	if x != nil {
		return x.Type
	}
	return Qos_Interfaces_Interface_Output_Classifiers_ClassifierKey_TYPE_UNSET
}

func (x *Qos_Interfaces_Interface_Output_Classifiers_ClassifierKey) GetClassifier() *Qos_Interfaces_Interface_Output_Classifiers_Classifier {
	if x != nil {
		return x.Classifier
	}
	return nil
}

type Qos_Interfaces_Interface_Output_Classifiers_Classifier_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *ywrapper.StringValue                                              `protobuf:"bytes,516742167,opt,name=name,proto3" json:"name,omitempty"`
	Type Qos_Interfaces_Interface_Output_Classifiers_Classifier_Config_Type `protobuf:"varint,483633474,opt,name=type,proto3,enum=openconfig.Qos_Interfaces_Interface_Output_Classifiers_Classifier_Config_Type" json:"type,omitempty"`
}

func (x *Qos_Interfaces_Interface_Output_Classifiers_Classifier_Config) Reset() {
	*x = Qos_Interfaces_Interface_Output_Classifiers_Classifier_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Interfaces_Interface_Output_Classifiers_Classifier_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Interfaces_Interface_Output_Classifiers_Classifier_Config) ProtoMessage() {}

func (x *Qos_Interfaces_Interface_Output_Classifiers_Classifier_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Interfaces_Interface_Output_Classifiers_Classifier_Config.ProtoReflect.Descriptor instead.
func (*Qos_Interfaces_Interface_Output_Classifiers_Classifier_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0, 3, 0, 0, 0}
}

func (x *Qos_Interfaces_Interface_Output_Classifiers_Classifier_Config) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Qos_Interfaces_Interface_Output_Classifiers_Classifier_Config) GetType() Qos_Interfaces_Interface_Output_Classifiers_Classifier_Config_Type {
	if x != nil {
		return x.Type
	}
	return Qos_Interfaces_Interface_Output_Classifiers_Classifier_Config_TYPE_UNSET
}

type Qos_Interfaces_Interface_Output_Classifiers_Classifier_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *ywrapper.StringValue                                             `protobuf:"bytes,31060778,opt,name=name,proto3" json:"name,omitempty"`
	Type Qos_Interfaces_Interface_Output_Classifiers_Classifier_State_Type `protobuf:"varint,246250711,opt,name=type,proto3,enum=openconfig.Qos_Interfaces_Interface_Output_Classifiers_Classifier_State_Type" json:"type,omitempty"`
}

func (x *Qos_Interfaces_Interface_Output_Classifiers_Classifier_State) Reset() {
	*x = Qos_Interfaces_Interface_Output_Classifiers_Classifier_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Interfaces_Interface_Output_Classifiers_Classifier_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Interfaces_Interface_Output_Classifiers_Classifier_State) ProtoMessage() {}

func (x *Qos_Interfaces_Interface_Output_Classifiers_Classifier_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Interfaces_Interface_Output_Classifiers_Classifier_State.ProtoReflect.Descriptor instead.
func (*Qos_Interfaces_Interface_Output_Classifiers_Classifier_State) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0, 3, 0, 0, 1}
}

func (x *Qos_Interfaces_Interface_Output_Classifiers_Classifier_State) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Qos_Interfaces_Interface_Output_Classifiers_Classifier_State) GetType() Qos_Interfaces_Interface_Output_Classifiers_Classifier_State_Type {
	if x != nil {
		return x.Type
	}
	return Qos_Interfaces_Interface_Output_Classifiers_Classifier_State_TYPE_UNSET
}

type Qos_Interfaces_Interface_Output_Classifiers_Classifier_Terms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Term []*Qos_Interfaces_Interface_Output_Classifiers_Classifier_Terms_TermKey `protobuf:"bytes,434237615,rep,name=term,proto3" json:"term,omitempty"`
}

func (x *Qos_Interfaces_Interface_Output_Classifiers_Classifier_Terms) Reset() {
	*x = Qos_Interfaces_Interface_Output_Classifiers_Classifier_Terms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Interfaces_Interface_Output_Classifiers_Classifier_Terms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Interfaces_Interface_Output_Classifiers_Classifier_Terms) ProtoMessage() {}

func (x *Qos_Interfaces_Interface_Output_Classifiers_Classifier_Terms) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Interfaces_Interface_Output_Classifiers_Classifier_Terms.ProtoReflect.Descriptor instead.
func (*Qos_Interfaces_Interface_Output_Classifiers_Classifier_Terms) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0, 3, 0, 0, 2}
}

func (x *Qos_Interfaces_Interface_Output_Classifiers_Classifier_Terms) GetTerm() []*Qos_Interfaces_Interface_Output_Classifiers_Classifier_Terms_TermKey {
	if x != nil {
		return x.Term
	}
	return nil
}

type Qos_Interfaces_Interface_Output_Classifiers_Classifier_Terms_Term struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Qos_Interfaces_Interface_Output_Classifiers_Classifier_Terms_Term_Config `protobuf:"bytes,428995344,opt,name=config,proto3" json:"config,omitempty"`
	State  *Qos_Interfaces_Interface_Output_Classifiers_Classifier_Terms_Term_State  `protobuf:"bytes,113957385,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Qos_Interfaces_Interface_Output_Classifiers_Classifier_Terms_Term) Reset() {
	*x = Qos_Interfaces_Interface_Output_Classifiers_Classifier_Terms_Term{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Interfaces_Interface_Output_Classifiers_Classifier_Terms_Term) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Interfaces_Interface_Output_Classifiers_Classifier_Terms_Term) ProtoMessage() {}

func (x *Qos_Interfaces_Interface_Output_Classifiers_Classifier_Terms_Term) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Interfaces_Interface_Output_Classifiers_Classifier_Terms_Term.ProtoReflect.Descriptor instead.
func (*Qos_Interfaces_Interface_Output_Classifiers_Classifier_Terms_Term) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0, 3, 0, 0, 2, 0}
}

func (x *Qos_Interfaces_Interface_Output_Classifiers_Classifier_Terms_Term) GetConfig() *Qos_Interfaces_Interface_Output_Classifiers_Classifier_Terms_Term_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Qos_Interfaces_Interface_Output_Classifiers_Classifier_Terms_Term) GetState() *Qos_Interfaces_Interface_Output_Classifiers_Classifier_Terms_Term_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Qos_Interfaces_Interface_Output_Classifiers_Classifier_Terms_TermKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string                                                             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Term *Qos_Interfaces_Interface_Output_Classifiers_Classifier_Terms_Term `protobuf:"bytes,2,opt,name=term,proto3" json:"term,omitempty"`
}

func (x *Qos_Interfaces_Interface_Output_Classifiers_Classifier_Terms_TermKey) Reset() {
	*x = Qos_Interfaces_Interface_Output_Classifiers_Classifier_Terms_TermKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Interfaces_Interface_Output_Classifiers_Classifier_Terms_TermKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Interfaces_Interface_Output_Classifiers_Classifier_Terms_TermKey) ProtoMessage() {}

func (x *Qos_Interfaces_Interface_Output_Classifiers_Classifier_Terms_TermKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Interfaces_Interface_Output_Classifiers_Classifier_Terms_TermKey.ProtoReflect.Descriptor instead.
func (*Qos_Interfaces_Interface_Output_Classifiers_Classifier_Terms_TermKey) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0, 3, 0, 0, 2, 1}
}

func (x *Qos_Interfaces_Interface_Output_Classifiers_Classifier_Terms_TermKey) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Qos_Interfaces_Interface_Output_Classifiers_Classifier_Terms_TermKey) GetTerm() *Qos_Interfaces_Interface_Output_Classifiers_Classifier_Terms_Term {
	if x != nil {
		return x.Term
	}
	return nil
}

type Qos_Interfaces_Interface_Output_Classifiers_Classifier_Terms_Term_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *ywrapper.StringValue `protobuf:"bytes,468452424,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Qos_Interfaces_Interface_Output_Classifiers_Classifier_Terms_Term_Config) Reset() {
	*x = Qos_Interfaces_Interface_Output_Classifiers_Classifier_Terms_Term_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Interfaces_Interface_Output_Classifiers_Classifier_Terms_Term_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Interfaces_Interface_Output_Classifiers_Classifier_Terms_Term_Config) ProtoMessage() {}

func (x *Qos_Interfaces_Interface_Output_Classifiers_Classifier_Terms_Term_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Interfaces_Interface_Output_Classifiers_Classifier_Terms_Term_Config.ProtoReflect.Descriptor instead.
func (*Qos_Interfaces_Interface_Output_Classifiers_Classifier_Terms_Term_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0, 3, 0, 0, 2, 0, 0}
}

func (x *Qos_Interfaces_Interface_Output_Classifiers_Classifier_Terms_Term_Config) GetId() *ywrapper.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

type Qos_Interfaces_Interface_Output_Classifiers_Classifier_Terms_Term_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             *ywrapper.StringValue `protobuf:"bytes,345458779,opt,name=id,proto3" json:"id,omitempty"`
	MatchedOctets  *ywrapper.UintValue   `protobuf:"bytes,517480033,opt,name=matched_octets,json=matchedOctets,proto3" json:"matched_octets,omitempty"`
	MatchedPackets *ywrapper.UintValue   `protobuf:"bytes,176878908,opt,name=matched_packets,json=matchedPackets,proto3" json:"matched_packets,omitempty"`
}

func (x *Qos_Interfaces_Interface_Output_Classifiers_Classifier_Terms_Term_State) Reset() {
	*x = Qos_Interfaces_Interface_Output_Classifiers_Classifier_Terms_Term_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Interfaces_Interface_Output_Classifiers_Classifier_Terms_Term_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Interfaces_Interface_Output_Classifiers_Classifier_Terms_Term_State) ProtoMessage() {}

func (x *Qos_Interfaces_Interface_Output_Classifiers_Classifier_Terms_Term_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Interfaces_Interface_Output_Classifiers_Classifier_Terms_Term_State.ProtoReflect.Descriptor instead.
func (*Qos_Interfaces_Interface_Output_Classifiers_Classifier_Terms_Term_State) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0, 3, 0, 0, 2, 0, 1}
}

func (x *Qos_Interfaces_Interface_Output_Classifiers_Classifier_Terms_Term_State) GetId() *ywrapper.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Qos_Interfaces_Interface_Output_Classifiers_Classifier_Terms_Term_State) GetMatchedOctets() *ywrapper.UintValue {
	if x != nil {
		return x.MatchedOctets
	}
	return nil
}

func (x *Qos_Interfaces_Interface_Output_Classifiers_Classifier_Terms_Term_State) GetMatchedPackets() *ywrapper.UintValue {
	if x != nil {
		return x.MatchedPackets
	}
	return nil
}

type Qos_Interfaces_Interface_Output_InterfaceRef_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interface    *ywrapper.StringValue `protobuf:"bytes,351351714,opt,name=interface,proto3" json:"interface,omitempty"`
	Subinterface *ywrapper.UintValue   `protobuf:"bytes,18610174,opt,name=subinterface,proto3" json:"subinterface,omitempty"`
}

func (x *Qos_Interfaces_Interface_Output_InterfaceRef_Config) Reset() {
	*x = Qos_Interfaces_Interface_Output_InterfaceRef_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Interfaces_Interface_Output_InterfaceRef_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Interfaces_Interface_Output_InterfaceRef_Config) ProtoMessage() {}

func (x *Qos_Interfaces_Interface_Output_InterfaceRef_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Interfaces_Interface_Output_InterfaceRef_Config.ProtoReflect.Descriptor instead.
func (*Qos_Interfaces_Interface_Output_InterfaceRef_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0, 3, 2, 0}
}

func (x *Qos_Interfaces_Interface_Output_InterfaceRef_Config) GetInterface() *ywrapper.StringValue {
	if x != nil {
		return x.Interface
	}
	return nil
}

func (x *Qos_Interfaces_Interface_Output_InterfaceRef_Config) GetSubinterface() *ywrapper.UintValue {
	if x != nil {
		return x.Subinterface
	}
	return nil
}

type Qos_Interfaces_Interface_Output_InterfaceRef_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interface    *ywrapper.StringValue `protobuf:"bytes,287441027,opt,name=interface,proto3" json:"interface,omitempty"`
	Subinterface *ywrapper.UintValue   `protobuf:"bytes,418676689,opt,name=subinterface,proto3" json:"subinterface,omitempty"`
}

func (x *Qos_Interfaces_Interface_Output_InterfaceRef_State) Reset() {
	*x = Qos_Interfaces_Interface_Output_InterfaceRef_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Interfaces_Interface_Output_InterfaceRef_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Interfaces_Interface_Output_InterfaceRef_State) ProtoMessage() {}

func (x *Qos_Interfaces_Interface_Output_InterfaceRef_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Interfaces_Interface_Output_InterfaceRef_State.ProtoReflect.Descriptor instead.
func (*Qos_Interfaces_Interface_Output_InterfaceRef_State) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0, 3, 2, 1}
}

func (x *Qos_Interfaces_Interface_Output_InterfaceRef_State) GetInterface() *ywrapper.StringValue {
	if x != nil {
		return x.Interface
	}
	return nil
}

func (x *Qos_Interfaces_Interface_Output_InterfaceRef_State) GetSubinterface() *ywrapper.UintValue {
	if x != nil {
		return x.Subinterface
	}
	return nil
}

type Qos_Interfaces_Interface_Output_Queues_Queue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Qos_Interfaces_Interface_Output_Queues_Queue_Config `protobuf:"bytes,491134857,opt,name=config,proto3" json:"config,omitempty"`
	State  *Qos_Interfaces_Interface_Output_Queues_Queue_State  `protobuf:"bytes,122510046,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Qos_Interfaces_Interface_Output_Queues_Queue) Reset() {
	*x = Qos_Interfaces_Interface_Output_Queues_Queue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Interfaces_Interface_Output_Queues_Queue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Interfaces_Interface_Output_Queues_Queue) ProtoMessage() {}

func (x *Qos_Interfaces_Interface_Output_Queues_Queue) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Interfaces_Interface_Output_Queues_Queue.ProtoReflect.Descriptor instead.
func (*Qos_Interfaces_Interface_Output_Queues_Queue) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0, 3, 3, 0}
}

func (x *Qos_Interfaces_Interface_Output_Queues_Queue) GetConfig() *Qos_Interfaces_Interface_Output_Queues_Queue_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Qos_Interfaces_Interface_Output_Queues_Queue) GetState() *Qos_Interfaces_Interface_Output_Queues_Queue_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Qos_Interfaces_Interface_Output_Queues_QueueKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string                                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Queue *Qos_Interfaces_Interface_Output_Queues_Queue `protobuf:"bytes,2,opt,name=queue,proto3" json:"queue,omitempty"`
}

func (x *Qos_Interfaces_Interface_Output_Queues_QueueKey) Reset() {
	*x = Qos_Interfaces_Interface_Output_Queues_QueueKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Interfaces_Interface_Output_Queues_QueueKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Interfaces_Interface_Output_Queues_QueueKey) ProtoMessage() {}

func (x *Qos_Interfaces_Interface_Output_Queues_QueueKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Interfaces_Interface_Output_Queues_QueueKey.ProtoReflect.Descriptor instead.
func (*Qos_Interfaces_Interface_Output_Queues_QueueKey) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0, 3, 3, 1}
}

func (x *Qos_Interfaces_Interface_Output_Queues_QueueKey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Qos_Interfaces_Interface_Output_Queues_QueueKey) GetQueue() *Qos_Interfaces_Interface_Output_Queues_Queue {
	if x != nil {
		return x.Queue
	}
	return nil
}

type Qos_Interfaces_Interface_Output_Queues_Queue_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *ywrapper.StringValue `protobuf:"bytes,149002045,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Qos_Interfaces_Interface_Output_Queues_Queue_Config) Reset() {
	*x = Qos_Interfaces_Interface_Output_Queues_Queue_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Interfaces_Interface_Output_Queues_Queue_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Interfaces_Interface_Output_Queues_Queue_Config) ProtoMessage() {}

func (x *Qos_Interfaces_Interface_Output_Queues_Queue_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Interfaces_Interface_Output_Queues_Queue_Config.ProtoReflect.Descriptor instead.
func (*Qos_Interfaces_Interface_Output_Queues_Queue_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0, 3, 3, 0, 0}
}

func (x *Qos_Interfaces_Interface_Output_Queues_Queue_Config) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

type Qos_Interfaces_Interface_Output_Queues_Queue_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvgQueueLen    *ywrapper.UintValue   `protobuf:"bytes,497534235,opt,name=avg_queue_len,json=avgQueueLen,proto3" json:"avg_queue_len,omitempty"`
	DroppedPkts    *ywrapper.UintValue   `protobuf:"bytes,358084770,opt,name=dropped_pkts,json=droppedPkts,proto3" json:"dropped_pkts,omitempty"`
	MaxQueueLen    *ywrapper.UintValue   `protobuf:"bytes,509845137,opt,name=max_queue_len,json=maxQueueLen,proto3" json:"max_queue_len,omitempty"`
	Name           *ywrapper.StringValue `protobuf:"bytes,422045572,opt,name=name,proto3" json:"name,omitempty"`
	TransmitOctets *ywrapper.UintValue   `protobuf:"bytes,117378910,opt,name=transmit_octets,json=transmitOctets,proto3" json:"transmit_octets,omitempty"`
	TransmitPkts   *ywrapper.UintValue   `protobuf:"bytes,20090310,opt,name=transmit_pkts,json=transmitPkts,proto3" json:"transmit_pkts,omitempty"`
}

func (x *Qos_Interfaces_Interface_Output_Queues_Queue_State) Reset() {
	*x = Qos_Interfaces_Interface_Output_Queues_Queue_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Interfaces_Interface_Output_Queues_Queue_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Interfaces_Interface_Output_Queues_Queue_State) ProtoMessage() {}

func (x *Qos_Interfaces_Interface_Output_Queues_Queue_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Interfaces_Interface_Output_Queues_Queue_State.ProtoReflect.Descriptor instead.
func (*Qos_Interfaces_Interface_Output_Queues_Queue_State) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0, 3, 3, 0, 1}
}

func (x *Qos_Interfaces_Interface_Output_Queues_Queue_State) GetAvgQueueLen() *ywrapper.UintValue {
	if x != nil {
		return x.AvgQueueLen
	}
	return nil
}

func (x *Qos_Interfaces_Interface_Output_Queues_Queue_State) GetDroppedPkts() *ywrapper.UintValue {
	if x != nil {
		return x.DroppedPkts
	}
	return nil
}

func (x *Qos_Interfaces_Interface_Output_Queues_Queue_State) GetMaxQueueLen() *ywrapper.UintValue {
	if x != nil {
		return x.MaxQueueLen
	}
	return nil
}

func (x *Qos_Interfaces_Interface_Output_Queues_Queue_State) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Qos_Interfaces_Interface_Output_Queues_Queue_State) GetTransmitOctets() *ywrapper.UintValue {
	if x != nil {
		return x.TransmitOctets
	}
	return nil
}

func (x *Qos_Interfaces_Interface_Output_Queues_Queue_State) GetTransmitPkts() *ywrapper.UintValue {
	if x != nil {
		return x.TransmitPkts
	}
	return nil
}

type Qos_Interfaces_Interface_Output_SchedulerPolicy_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *ywrapper.StringValue `protobuf:"bytes,32047975,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Qos_Interfaces_Interface_Output_SchedulerPolicy_Config) Reset() {
	*x = Qos_Interfaces_Interface_Output_SchedulerPolicy_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Interfaces_Interface_Output_SchedulerPolicy_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Interfaces_Interface_Output_SchedulerPolicy_Config) ProtoMessage() {}

func (x *Qos_Interfaces_Interface_Output_SchedulerPolicy_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Interfaces_Interface_Output_SchedulerPolicy_Config.ProtoReflect.Descriptor instead.
func (*Qos_Interfaces_Interface_Output_SchedulerPolicy_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0, 3, 4, 0}
}

func (x *Qos_Interfaces_Interface_Output_SchedulerPolicy_Config) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

type Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scheduler []*Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey `protobuf:"bytes,208885833,rep,name=scheduler,proto3" json:"scheduler,omitempty"`
}

func (x *Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers) Reset() {
	*x = Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers) ProtoMessage() {}

func (x *Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers.ProtoReflect.Descriptor instead.
func (*Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0, 3, 4, 1}
}

func (x *Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers) GetScheduler() []*Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey {
	if x != nil {
		return x.Scheduler
	}
	return nil
}

type Qos_Interfaces_Interface_Output_SchedulerPolicy_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *ywrapper.StringValue `protobuf:"bytes,131511290,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Qos_Interfaces_Interface_Output_SchedulerPolicy_State) Reset() {
	*x = Qos_Interfaces_Interface_Output_SchedulerPolicy_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Interfaces_Interface_Output_SchedulerPolicy_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Interfaces_Interface_Output_SchedulerPolicy_State) ProtoMessage() {}

func (x *Qos_Interfaces_Interface_Output_SchedulerPolicy_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Interfaces_Interface_Output_SchedulerPolicy_State.ProtoReflect.Descriptor instead.
func (*Qos_Interfaces_Interface_Output_SchedulerPolicy_State) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0, 3, 4, 2}
}

func (x *Qos_Interfaces_Interface_Output_SchedulerPolicy_State) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

type Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State `protobuf:"bytes,352057387,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler) Reset() {
	*x = Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler) ProtoMessage() {}

func (x *Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler.ProtoReflect.Descriptor instead.
func (*Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0, 3, 4, 1, 0}
}

func (x *Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler) GetState() *Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sequence  uint64                                                                `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Scheduler *Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler `protobuf:"bytes,2,opt,name=scheduler,proto3" json:"scheduler,omitempty"`
}

func (x *Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey) Reset() {
	*x = Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey) ProtoMessage() {}

func (x *Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey.ProtoReflect.Descriptor instead.
func (*Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0, 3, 4, 1, 1}
}

func (x *Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey) GetScheduler() *Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler {
	if x != nil {
		return x.Scheduler
	}
	return nil
}

type Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConformingOctets *ywrapper.UintValue `protobuf:"bytes,190363557,opt,name=conforming_octets,json=conformingOctets,proto3" json:"conforming_octets,omitempty"`
	ConformingPkts   *ywrapper.UintValue `protobuf:"bytes,384889393,opt,name=conforming_pkts,json=conformingPkts,proto3" json:"conforming_pkts,omitempty"`
	ExceedingOctets  *ywrapper.UintValue `protobuf:"bytes,127842319,opt,name=exceeding_octets,json=exceedingOctets,proto3" json:"exceeding_octets,omitempty"`
	ExceedingPkts    *ywrapper.UintValue `protobuf:"bytes,174504655,opt,name=exceeding_pkts,json=exceedingPkts,proto3" json:"exceeding_pkts,omitempty"`
	Sequence         *ywrapper.UintValue `protobuf:"bytes,379118145,opt,name=sequence,proto3" json:"sequence,omitempty"`
	ViolatingOctets  *ywrapper.UintValue `protobuf:"bytes,334250126,opt,name=violating_octets,json=violatingOctets,proto3" json:"violating_octets,omitempty"`
	ViolatingPkts    *ywrapper.UintValue `protobuf:"bytes,380540342,opt,name=violating_pkts,json=violatingPkts,proto3" json:"violating_pkts,omitempty"`
}

func (x *Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State) Reset() {
	*x = Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State) ProtoMessage() {}

func (x *Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State.ProtoReflect.Descriptor instead.
func (*Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 3, 0, 3, 4, 1, 0, 0}
}

func (x *Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State) GetConformingOctets() *ywrapper.UintValue {
	if x != nil {
		return x.ConformingOctets
	}
	return nil
}

func (x *Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State) GetConformingPkts() *ywrapper.UintValue {
	if x != nil {
		return x.ConformingPkts
	}
	return nil
}

func (x *Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State) GetExceedingOctets() *ywrapper.UintValue {
	if x != nil {
		return x.ExceedingOctets
	}
	return nil
}

func (x *Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State) GetExceedingPkts() *ywrapper.UintValue {
	if x != nil {
		return x.ExceedingPkts
	}
	return nil
}

func (x *Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State) GetSequence() *ywrapper.UintValue {
	if x != nil {
		return x.Sequence
	}
	return nil
}

func (x *Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State) GetViolatingOctets() *ywrapper.UintValue {
	if x != nil {
		return x.ViolatingOctets
	}
	return nil
}

func (x *Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State) GetViolatingPkts() *ywrapper.UintValue {
	if x != nil {
		return x.ViolatingPkts
	}
	return nil
}

type Qos_Queues_Queue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Qos_Queues_Queue_Config `protobuf:"bytes,173754668,opt,name=config,proto3" json:"config,omitempty"`
	Red    *Qos_Queues_Queue_Red    `protobuf:"bytes,36543379,opt,name=red,proto3" json:"red,omitempty"`
	State  *Qos_Queues_Queue_State  `protobuf:"bytes,213681445,opt,name=state,proto3" json:"state,omitempty"`
	Wred   *Qos_Queues_Queue_Wred   `protobuf:"bytes,285364058,opt,name=wred,proto3" json:"wred,omitempty"`
}

func (x *Qos_Queues_Queue) Reset() {
	*x = Qos_Queues_Queue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Queues_Queue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Queues_Queue) ProtoMessage() {}

func (x *Qos_Queues_Queue) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Queues_Queue.ProtoReflect.Descriptor instead.
func (*Qos_Queues_Queue) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 4, 0}
}

func (x *Qos_Queues_Queue) GetConfig() *Qos_Queues_Queue_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Qos_Queues_Queue) GetRed() *Qos_Queues_Queue_Red {
	if x != nil {
		return x.Red
	}
	return nil
}

func (x *Qos_Queues_Queue) GetState() *Qos_Queues_Queue_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Qos_Queues_Queue) GetWred() *Qos_Queues_Queue_Wred {
	if x != nil {
		return x.Wred
	}
	return nil
}

type Qos_Queues_QueueKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Queue *Qos_Queues_Queue `protobuf:"bytes,2,opt,name=queue,proto3" json:"queue,omitempty"`
}

func (x *Qos_Queues_QueueKey) Reset() {
	*x = Qos_Queues_QueueKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Queues_QueueKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Queues_QueueKey) ProtoMessage() {}

func (x *Qos_Queues_QueueKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Queues_QueueKey.ProtoReflect.Descriptor instead.
func (*Qos_Queues_QueueKey) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 4, 1}
}

func (x *Qos_Queues_QueueKey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Qos_Queues_QueueKey) GetQueue() *Qos_Queues_Queue {
	if x != nil {
		return x.Queue
	}
	return nil
}

type Qos_Queues_Queue_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      *ywrapper.StringValue          `protobuf:"bytes,135146606,opt,name=name,proto3" json:"name,omitempty"`
	QueueType OpenconfigQosTypesQOSQUEUETYPE `protobuf:"varint,351938521,opt,name=queue_type,json=queueType,proto3,enum=openconfig.OpenconfigQosTypesQOSQUEUETYPE" json:"queue_type,omitempty"`
}

func (x *Qos_Queues_Queue_Config) Reset() {
	*x = Qos_Queues_Queue_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Queues_Queue_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Queues_Queue_Config) ProtoMessage() {}

func (x *Qos_Queues_Queue_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Queues_Queue_Config.ProtoReflect.Descriptor instead.
func (*Qos_Queues_Queue_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 4, 0, 0}
}

func (x *Qos_Queues_Queue_Config) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Qos_Queues_Queue_Config) GetQueueType() OpenconfigQosTypesQOSQUEUETYPE {
	if x != nil {
		return x.QueueType
	}
	return OpenconfigQosTypesQOSQUEUETYPE_OPENCONFIGQOSTYPESQOSQUEUETYPE_UNSET
}

type Qos_Queues_Queue_Red struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Qos_Queues_Queue_Red_Config `protobuf:"bytes,530804788,opt,name=config,proto3" json:"config,omitempty"`
	State  *Qos_Queues_Queue_Red_State  `protobuf:"bytes,443004749,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Qos_Queues_Queue_Red) Reset() {
	*x = Qos_Queues_Queue_Red{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Queues_Queue_Red) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Queues_Queue_Red) ProtoMessage() {}

func (x *Qos_Queues_Queue_Red) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Queues_Queue_Red.ProtoReflect.Descriptor instead.
func (*Qos_Queues_Queue_Red) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 4, 0, 1}
}

func (x *Qos_Queues_Queue_Red) GetConfig() *Qos_Queues_Queue_Red_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Qos_Queues_Queue_Red) GetState() *Qos_Queues_Queue_Red_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Qos_Queues_Queue_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      *ywrapper.StringValue          `protobuf:"bytes,454266209,opt,name=name,proto3" json:"name,omitempty"`
	QueueType OpenconfigQosTypesQOSQUEUETYPE `protobuf:"varint,390406498,opt,name=queue_type,json=queueType,proto3,enum=openconfig.OpenconfigQosTypesQOSQUEUETYPE" json:"queue_type,omitempty"`
}

func (x *Qos_Queues_Queue_State) Reset() {
	*x = Qos_Queues_Queue_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Queues_Queue_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Queues_Queue_State) ProtoMessage() {}

func (x *Qos_Queues_Queue_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Queues_Queue_State.ProtoReflect.Descriptor instead.
func (*Qos_Queues_Queue_State) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 4, 0, 2}
}

func (x *Qos_Queues_Queue_State) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Qos_Queues_Queue_State) GetQueueType() OpenconfigQosTypesQOSQUEUETYPE {
	if x != nil {
		return x.QueueType
	}
	return OpenconfigQosTypesQOSQUEUETYPE_OPENCONFIGQOSTYPESQOSQUEUETYPE_UNSET
}

type Qos_Queues_Queue_Wred struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Qos_Queues_Queue_Wred_Config `protobuf:"bytes,22449995,opt,name=config,proto3" json:"config,omitempty"`
	State  *Qos_Queues_Queue_Wred_State  `protobuf:"bytes,29756812,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Qos_Queues_Queue_Wred) Reset() {
	*x = Qos_Queues_Queue_Wred{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Queues_Queue_Wred) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Queues_Queue_Wred) ProtoMessage() {}

func (x *Qos_Queues_Queue_Wred) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Queues_Queue_Wred.ProtoReflect.Descriptor instead.
func (*Qos_Queues_Queue_Wred) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 4, 0, 3}
}

func (x *Qos_Queues_Queue_Wred) GetConfig() *Qos_Queues_Queue_Wred_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Qos_Queues_Queue_Wred) GetState() *Qos_Queues_Queue_Wred_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Qos_Queues_Queue_Red_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Maxth *ywrapper.UintValue `protobuf:"bytes,77750307,opt,name=maxth,proto3" json:"maxth,omitempty"`
	Minth *ywrapper.UintValue `protobuf:"bytes,301751197,opt,name=minth,proto3" json:"minth,omitempty"`
}

func (x *Qos_Queues_Queue_Red_Config) Reset() {
	*x = Qos_Queues_Queue_Red_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Queues_Queue_Red_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Queues_Queue_Red_Config) ProtoMessage() {}

func (x *Qos_Queues_Queue_Red_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Queues_Queue_Red_Config.ProtoReflect.Descriptor instead.
func (*Qos_Queues_Queue_Red_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 4, 0, 1, 0}
}

func (x *Qos_Queues_Queue_Red_Config) GetMaxth() *ywrapper.UintValue {
	if x != nil {
		return x.Maxth
	}
	return nil
}

func (x *Qos_Queues_Queue_Red_Config) GetMinth() *ywrapper.UintValue {
	if x != nil {
		return x.Minth
	}
	return nil
}

type Qos_Queues_Queue_Red_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Maxth *ywrapper.UintValue `protobuf:"bytes,499507070,opt,name=maxth,proto3" json:"maxth,omitempty"`
	Minth *ywrapper.UintValue `protobuf:"bytes,316915032,opt,name=minth,proto3" json:"minth,omitempty"`
}

func (x *Qos_Queues_Queue_Red_State) Reset() {
	*x = Qos_Queues_Queue_Red_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Queues_Queue_Red_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Queues_Queue_Red_State) ProtoMessage() {}

func (x *Qos_Queues_Queue_Red_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Queues_Queue_Red_State.ProtoReflect.Descriptor instead.
func (*Qos_Queues_Queue_Red_State) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 4, 0, 1, 1}
}

func (x *Qos_Queues_Queue_Red_State) GetMaxth() *ywrapper.UintValue {
	if x != nil {
		return x.Maxth
	}
	return nil
}

func (x *Qos_Queues_Queue_Red_State) GetMinth() *ywrapper.UintValue {
	if x != nil {
		return x.Minth
	}
	return nil
}

type Qos_Queues_Queue_Wred_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Qos_Queues_Queue_Wred_Config) Reset() {
	*x = Qos_Queues_Queue_Wred_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Queues_Queue_Wred_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Queues_Queue_Wred_Config) ProtoMessage() {}

func (x *Qos_Queues_Queue_Wred_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Queues_Queue_Wred_Config.ProtoReflect.Descriptor instead.
func (*Qos_Queues_Queue_Wred_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 4, 0, 3, 0}
}

type Qos_Queues_Queue_Wred_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Qos_Queues_Queue_Wred_State) Reset() {
	*x = Qos_Queues_Queue_Wred_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Queues_Queue_Wred_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Queues_Queue_Wred_State) ProtoMessage() {}

func (x *Qos_Queues_Queue_Wred_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Queues_Queue_Wred_State.ProtoReflect.Descriptor instead.
func (*Qos_Queues_Queue_Wred_State) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 4, 0, 3, 1}
}

type Qos_SchedulerPolicies_SchedulerPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config     *Qos_SchedulerPolicies_SchedulerPolicy_Config     `protobuf:"bytes,524943827,opt,name=config,proto3" json:"config,omitempty"`
	Schedulers *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers `protobuf:"bytes,419692355,opt,name=schedulers,proto3" json:"schedulers,omitempty"`
	State      *Qos_SchedulerPolicies_SchedulerPolicy_State      `protobuf:"bytes,242070708,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy) Reset() {
	*x = Qos_SchedulerPolicies_SchedulerPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_SchedulerPolicies_SchedulerPolicy) ProtoMessage() {}

func (x *Qos_SchedulerPolicies_SchedulerPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_SchedulerPolicies_SchedulerPolicy.ProtoReflect.Descriptor instead.
func (*Qos_SchedulerPolicies_SchedulerPolicy) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 5, 0}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy) GetConfig() *Qos_SchedulerPolicies_SchedulerPolicy_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy) GetSchedulers() *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers {
	if x != nil {
		return x.Schedulers
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy) GetState() *Qos_SchedulerPolicies_SchedulerPolicy_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Qos_SchedulerPolicies_SchedulerPolicyKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string                                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	SchedulerPolicy *Qos_SchedulerPolicies_SchedulerPolicy `protobuf:"bytes,2,opt,name=scheduler_policy,json=schedulerPolicy,proto3" json:"scheduler_policy,omitempty"`
}

func (x *Qos_SchedulerPolicies_SchedulerPolicyKey) Reset() {
	*x = Qos_SchedulerPolicies_SchedulerPolicyKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicyKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_SchedulerPolicies_SchedulerPolicyKey) ProtoMessage() {}

func (x *Qos_SchedulerPolicies_SchedulerPolicyKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_SchedulerPolicies_SchedulerPolicyKey.ProtoReflect.Descriptor instead.
func (*Qos_SchedulerPolicies_SchedulerPolicyKey) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 5, 1}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicyKey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Qos_SchedulerPolicies_SchedulerPolicyKey) GetSchedulerPolicy() *Qos_SchedulerPolicies_SchedulerPolicy {
	if x != nil {
		return x.SchedulerPolicy
	}
	return nil
}

type Qos_SchedulerPolicies_SchedulerPolicy_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *ywrapper.StringValue `protobuf:"bytes,15306115,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Config) Reset() {
	*x = Qos_SchedulerPolicies_SchedulerPolicy_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_SchedulerPolicies_SchedulerPolicy_Config) ProtoMessage() {}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_SchedulerPolicies_SchedulerPolicy_Config.ProtoReflect.Descriptor instead.
func (*Qos_SchedulerPolicies_SchedulerPolicy_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 5, 0, 0}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Config) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

type Qos_SchedulerPolicies_SchedulerPolicy_Schedulers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scheduler []*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey `protobuf:"bytes,494699541,rep,name=scheduler,proto3" json:"scheduler,omitempty"`
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers) Reset() {
	*x = Qos_SchedulerPolicies_SchedulerPolicy_Schedulers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers) ProtoMessage() {}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_SchedulerPolicies_SchedulerPolicy_Schedulers.ProtoReflect.Descriptor instead.
func (*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 5, 0, 1}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers) GetScheduler() []*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey {
	if x != nil {
		return x.Scheduler
	}
	return nil
}

type Qos_SchedulerPolicies_SchedulerPolicy_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *ywrapper.StringValue `protobuf:"bytes,1534422,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_State) Reset() {
	*x = Qos_SchedulerPolicies_SchedulerPolicy_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_SchedulerPolicies_SchedulerPolicy_State) ProtoMessage() {}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_SchedulerPolicies_SchedulerPolicy_State.ProtoReflect.Descriptor instead.
func (*Qos_SchedulerPolicies_SchedulerPolicy_State) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 5, 0, 2}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_State) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

type Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config            *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config            `protobuf:"bytes,235323450,opt,name=config,proto3" json:"config,omitempty"`
	Inputs            *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs            `protobuf:"bytes,152276279,opt,name=inputs,proto3" json:"inputs,omitempty"`
	OneRateTwoColor   *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor   `protobuf:"bytes,502240564,opt,name=one_rate_two_color,json=oneRateTwoColor,proto3" json:"one_rate_two_color,omitempty"`
	Output            *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output            `protobuf:"bytes,46224159,opt,name=output,proto3" json:"output,omitempty"`
	State             *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State             `protobuf:"bytes,237125463,opt,name=state,proto3" json:"state,omitempty"`
	TwoRateThreeColor *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor `protobuf:"bytes,10046740,opt,name=two_rate_three_color,json=twoRateThreeColor,proto3" json:"two_rate_three_color,omitempty"`
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler) Reset() {
	*x = Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler) ProtoMessage() {}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler.ProtoReflect.Descriptor instead.
func (*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 5, 0, 1, 0}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler) GetConfig() *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler) GetInputs() *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler) GetOneRateTwoColor() *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor {
	if x != nil {
		return x.OneRateTwoColor
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler) GetOutput() *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler) GetState() *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler) GetTwoRateThreeColor() *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor {
	if x != nil {
		return x.TwoRateThreeColor
	}
	return nil
}

type Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sequence  uint64                                                      `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Scheduler *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler `protobuf:"bytes,2,opt,name=scheduler,proto3" json:"scheduler,omitempty"`
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey) Reset() {
	*x = Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey) ProtoMessage() {}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey.ProtoReflect.Descriptor instead.
func (*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 5, 0, 1, 1}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey) GetScheduler() *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler {
	if x != nil {
		return x.Scheduler
	}
	return nil
}

type Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Priority Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_Priority `protobuf:"varint,116027193,opt,name=priority,proto3,enum=openconfig.Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_Priority" json:"priority,omitempty"`
	Sequence *ywrapper.UintValue                                                        `protobuf:"bytes,189420374,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Type     OpenconfigQosTypesQOSSCHEDULERTYPE                                         `protobuf:"varint,125973545,opt,name=type,proto3,enum=openconfig.OpenconfigQosTypesQOSSCHEDULERTYPE" json:"type,omitempty"`
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config) Reset() {
	*x = Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config) ProtoMessage() {}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config.ProtoReflect.Descriptor instead.
func (*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 5, 0, 1, 0, 0}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config) GetPriority() Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_Priority {
	if x != nil {
		return x.Priority
	}
	return Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_PRIORITY_UNSET
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config) GetSequence() *ywrapper.UintValue {
	if x != nil {
		return x.Sequence
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config) GetType() OpenconfigQosTypesQOSSCHEDULERTYPE {
	if x != nil {
		return x.Type
	}
	return OpenconfigQosTypesQOSSCHEDULERTYPE_OPENCONFIGQOSTYPESQOSSCHEDULERTYPE_UNSET
}

type Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Input []*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey `protobuf:"bytes,224691974,rep,name=input,proto3" json:"input,omitempty"`
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs) Reset() {
	*x = Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs) ProtoMessage() {}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs.ProtoReflect.Descriptor instead.
func (*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 5, 0, 1, 0, 1}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs) GetInput() []*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey {
	if x != nil {
		return x.Input
	}
	return nil
}

type Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config        *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config        `protobuf:"bytes,473487161,opt,name=config,proto3" json:"config,omitempty"`
	ConformAction *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction `protobuf:"bytes,29149902,opt,name=conform_action,json=conformAction,proto3" json:"conform_action,omitempty"`
	ExceedAction  *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction  `protobuf:"bytes,297338034,opt,name=exceed_action,json=exceedAction,proto3" json:"exceed_action,omitempty"`
	State         *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State         `protobuf:"bytes,437562510,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor) Reset() {
	*x = Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor) ProtoMessage() {}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor.ProtoReflect.Descriptor instead.
func (*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 5, 0, 1, 0, 2}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor) GetConfig() *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor) GetConformAction() *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction {
	if x != nil {
		return x.ConformAction
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor) GetExceedAction() *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction {
	if x != nil {
		return x.ExceedAction
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor) GetState() *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config `protobuf:"bytes,210934496,opt,name=config,proto3" json:"config,omitempty"`
	State  *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State  `protobuf:"bytes,378101593,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output) Reset() {
	*x = Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output) ProtoMessage() {}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output.ProtoReflect.Descriptor instead.
func (*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 5, 0, 1, 0, 3}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output) GetConfig() *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output) GetState() *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Priority Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_Priority `protobuf:"varint,187259654,opt,name=priority,proto3,enum=openconfig.Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_Priority" json:"priority,omitempty"`
	Sequence *ywrapper.UintValue                                                       `protobuf:"bytes,280455557,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Type     OpenconfigQosTypesQOSSCHEDULERTYPE                                        `protobuf:"varint,13202618,opt,name=type,proto3,enum=openconfig.OpenconfigQosTypesQOSSCHEDULERTYPE" json:"type,omitempty"`
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State) Reset() {
	*x = Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State) ProtoMessage() {}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State.ProtoReflect.Descriptor instead.
func (*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 5, 0, 1, 0, 4}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State) GetPriority() Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_Priority {
	if x != nil {
		return x.Priority
	}
	return Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_PRIORITY_UNSET
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State) GetSequence() *ywrapper.UintValue {
	if x != nil {
		return x.Sequence
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State) GetType() OpenconfigQosTypesQOSSCHEDULERTYPE {
	if x != nil {
		return x.Type
	}
	return OpenconfigQosTypesQOSSCHEDULERTYPE_OPENCONFIGQOSTYPESQOSSCHEDULERTYPE_UNSET
}

type Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config        *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config        `protobuf:"bytes,526981785,opt,name=config,proto3" json:"config,omitempty"`
	ConformAction *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction `protobuf:"bytes,482658734,opt,name=conform_action,json=conformAction,proto3" json:"conform_action,omitempty"`
	ExceedAction  *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction  `protobuf:"bytes,447571730,opt,name=exceed_action,json=exceedAction,proto3" json:"exceed_action,omitempty"`
	State         *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State         `protobuf:"bytes,264511342,opt,name=state,proto3" json:"state,omitempty"`
	ViolateAction *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction `protobuf:"bytes,110529342,opt,name=violate_action,json=violateAction,proto3" json:"violate_action,omitempty"`
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor) Reset() {
	*x = Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor) ProtoMessage() {}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor.ProtoReflect.Descriptor instead.
func (*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 5, 0, 1, 0, 5}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor) GetConfig() *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor) GetConformAction() *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction {
	if x != nil {
		return x.ConformAction
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor) GetExceedAction() *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction {
	if x != nil {
		return x.ExceedAction
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor) GetState() *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor) GetViolateAction() *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction {
	if x != nil {
		return x.ViolateAction
	}
	return nil
}

type Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config `protobuf:"bytes,362916871,opt,name=config,proto3" json:"config,omitempty"`
	State  *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State  `protobuf:"bytes,308364152,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input) Reset() {
	*x = Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input) ProtoMessage() {}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input.ProtoReflect.Descriptor instead.
func (*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 5, 0, 1, 0, 1, 0}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input) GetConfig() *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input) GetState() *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string                                                                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Input *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey) Reset() {
	*x = Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey) ProtoMessage() {}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey.ProtoReflect.Descriptor instead.
func (*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 5, 0, 1, 0, 1, 1}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey) GetInput() *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input {
	if x != nil {
		return x.Input
	}
	return nil
}

type Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *ywrapper.StringValue                                                                    `protobuf:"bytes,424446001,opt,name=id,proto3" json:"id,omitempty"`
	InputType Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType `protobuf:"varint,323155511,opt,name=input_type,json=inputType,proto3,enum=openconfig.Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType" json:"input_type,omitempty"`
	Queue     *ywrapper.StringValue                                                                    `protobuf:"bytes,442686099,opt,name=queue,proto3" json:"queue,omitempty"`
	Weight    *ywrapper.UintValue                                                                      `protobuf:"bytes,396218658,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config) Reset() {
	*x = Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config) ProtoMessage() {
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config.ProtoReflect.Descriptor instead.
func (*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 5, 0, 1, 0, 1, 0, 0}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config) GetId() *ywrapper.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config) GetInputType() Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType {
	if x != nil {
		return x.InputType
	}
	return Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_INPUTTYPE_UNSET
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config) GetQueue() *ywrapper.StringValue {
	if x != nil {
		return x.Queue
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config) GetWeight() *ywrapper.UintValue {
	if x != nil {
		return x.Weight
	}
	return nil
}

type Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *ywrapper.StringValue                                                                   `protobuf:"bytes,321502496,opt,name=id,proto3" json:"id,omitempty"`
	InputType Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType `protobuf:"varint,255095878,opt,name=input_type,json=inputType,proto3,enum=openconfig.Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType" json:"input_type,omitempty"`
	Queue     *ywrapper.StringValue                                                                   `protobuf:"bytes,285927912,opt,name=queue,proto3" json:"queue,omitempty"`
	Weight    *ywrapper.UintValue                                                                     `protobuf:"bytes,141802883,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State) Reset() {
	*x = Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State) ProtoMessage() {
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State.ProtoReflect.Descriptor instead.
func (*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 5, 0, 1, 0, 1, 0, 1}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State) GetId() *ywrapper.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State) GetInputType() Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType {
	if x != nil {
		return x.InputType
	}
	return Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_INPUTTYPE_UNSET
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State) GetQueue() *ywrapper.StringValue {
	if x != nil {
		return x.Queue
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State) GetWeight() *ywrapper.UintValue {
	if x != nil {
		return x.Weight
	}
	return nil
}

type Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bc                   *ywrapper.UintValue        `protobuf:"bytes,100183769,opt,name=bc,proto3" json:"bc,omitempty"`
	Cir                  *ywrapper.UintValue        `protobuf:"bytes,494749918,opt,name=cir,proto3" json:"cir,omitempty"`
	CirPct               *ywrapper.UintValue        `protobuf:"bytes,315109376,opt,name=cir_pct,json=cirPct,proto3" json:"cir_pct,omitempty"`
	CirPctRemaining      *ywrapper.UintValue        `protobuf:"bytes,206933707,opt,name=cir_pct_remaining,json=cirPctRemaining,proto3" json:"cir_pct_remaining,omitempty"`
	MaxQueueDepthBytes   *ywrapper.UintValue        `protobuf:"bytes,279197854,opt,name=max_queue_depth_bytes,json=maxQueueDepthBytes,proto3" json:"max_queue_depth_bytes,omitempty"`
	MaxQueueDepthPackets *ywrapper.UintValue        `protobuf:"bytes,38247640,opt,name=max_queue_depth_packets,json=maxQueueDepthPackets,proto3" json:"max_queue_depth_packets,omitempty"`
	MaxQueueDepthPercent *ywrapper.UintValue        `protobuf:"bytes,466868204,opt,name=max_queue_depth_percent,json=maxQueueDepthPercent,proto3" json:"max_queue_depth_percent,omitempty"`
	QueuingBehavior      OpenconfigQosQueueBehavior `protobuf:"varint,78239583,opt,name=queuing_behavior,json=queuingBehavior,proto3,enum=openconfig.OpenconfigQosQueueBehavior" json:"queuing_behavior,omitempty"`
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config) Reset() {
	*x = Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config) ProtoMessage() {
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config.ProtoReflect.Descriptor instead.
func (*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 5, 0, 1, 0, 2, 0}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config) GetBc() *ywrapper.UintValue {
	if x != nil {
		return x.Bc
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config) GetCir() *ywrapper.UintValue {
	if x != nil {
		return x.Cir
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config) GetCirPct() *ywrapper.UintValue {
	if x != nil {
		return x.CirPct
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config) GetCirPctRemaining() *ywrapper.UintValue {
	if x != nil {
		return x.CirPctRemaining
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config) GetMaxQueueDepthBytes() *ywrapper.UintValue {
	if x != nil {
		return x.MaxQueueDepthBytes
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config) GetMaxQueueDepthPackets() *ywrapper.UintValue {
	if x != nil {
		return x.MaxQueueDepthPackets
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config) GetMaxQueueDepthPercent() *ywrapper.UintValue {
	if x != nil {
		return x.MaxQueueDepthPercent
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config) GetQueuingBehavior() OpenconfigQosQueueBehavior {
	if x != nil {
		return x.QueuingBehavior
	}
	return OpenconfigQosQueueBehavior_OPENCONFIGQOSQUEUEBEHAVIOR_UNSET
}

type Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config `protobuf:"bytes,263196799,opt,name=config,proto3" json:"config,omitempty"`
	State  *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State  `protobuf:"bytes,488106672,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction) Reset() {
	*x = Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction) ProtoMessage() {
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction.ProtoReflect.Descriptor instead.
func (*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 5, 0, 1, 0, 2, 1}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction) GetConfig() *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction) GetState() *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config `protobuf:"bytes,333494515,opt,name=config,proto3" json:"config,omitempty"`
	State  *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State  `protobuf:"bytes,362036052,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction) Reset() {
	*x = Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction) ProtoMessage() {
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction.ProtoReflect.Descriptor instead.
func (*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 5, 0, 1, 0, 2, 2}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction) GetConfig() *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction) GetState() *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bc                   *ywrapper.UintValue        `protobuf:"bytes,76345220,opt,name=bc,proto3" json:"bc,omitempty"`
	Cir                  *ywrapper.UintValue        `protobuf:"bytes,333122165,opt,name=cir,proto3" json:"cir,omitempty"`
	CirPct               *ywrapper.UintValue        `protobuf:"bytes,102978535,opt,name=cir_pct,json=cirPct,proto3" json:"cir_pct,omitempty"`
	CirPctRemaining      *ywrapper.UintValue        `protobuf:"bytes,286997148,opt,name=cir_pct_remaining,json=cirPctRemaining,proto3" json:"cir_pct_remaining,omitempty"`
	MaxQueueDepthBytes   *ywrapper.UintValue        `protobuf:"bytes,118786445,opt,name=max_queue_depth_bytes,json=maxQueueDepthBytes,proto3" json:"max_queue_depth_bytes,omitempty"`
	MaxQueueDepthPackets *ywrapper.UintValue        `protobuf:"bytes,339691679,opt,name=max_queue_depth_packets,json=maxQueueDepthPackets,proto3" json:"max_queue_depth_packets,omitempty"`
	MaxQueueDepthPercent *ywrapper.UintValue        `protobuf:"bytes,99186575,opt,name=max_queue_depth_percent,json=maxQueueDepthPercent,proto3" json:"max_queue_depth_percent,omitempty"`
	QueuingBehavior      OpenconfigQosQueueBehavior `protobuf:"varint,225811202,opt,name=queuing_behavior,json=queuingBehavior,proto3,enum=openconfig.OpenconfigQosQueueBehavior" json:"queuing_behavior,omitempty"`
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State) Reset() {
	*x = Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State) ProtoMessage() {
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State.ProtoReflect.Descriptor instead.
func (*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 5, 0, 1, 0, 2, 3}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State) GetBc() *ywrapper.UintValue {
	if x != nil {
		return x.Bc
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State) GetCir() *ywrapper.UintValue {
	if x != nil {
		return x.Cir
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State) GetCirPct() *ywrapper.UintValue {
	if x != nil {
		return x.CirPct
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State) GetCirPctRemaining() *ywrapper.UintValue {
	if x != nil {
		return x.CirPctRemaining
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State) GetMaxQueueDepthBytes() *ywrapper.UintValue {
	if x != nil {
		return x.MaxQueueDepthBytes
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State) GetMaxQueueDepthPackets() *ywrapper.UintValue {
	if x != nil {
		return x.MaxQueueDepthPackets
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State) GetMaxQueueDepthPercent() *ywrapper.UintValue {
	if x != nil {
		return x.MaxQueueDepthPercent
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State) GetQueuingBehavior() OpenconfigQosQueueBehavior {
	if x != nil {
		return x.QueuingBehavior
	}
	return OpenconfigQosQueueBehavior_OPENCONFIGQOSQUEUEBEHAVIOR_UNSET
}

type Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SetDot1P  *ywrapper.UintValue `protobuf:"bytes,347963663,opt,name=set_dot1p,json=setDot1p,proto3" json:"set_dot1p,omitempty"`
	SetDscp   *ywrapper.UintValue `protobuf:"bytes,274036909,opt,name=set_dscp,json=setDscp,proto3" json:"set_dscp,omitempty"`
	SetMplsTc *ywrapper.UintValue `protobuf:"bytes,407069875,opt,name=set_mpls_tc,json=setMplsTc,proto3" json:"set_mpls_tc,omitempty"`
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config) Reset() {
	*x = Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config) ProtoMessage() {
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config.ProtoReflect.Descriptor instead.
func (*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 5, 0, 1, 0, 2, 1, 0}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config) GetSetDot1P() *ywrapper.UintValue {
	if x != nil {
		return x.SetDot1P
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config) GetSetDscp() *ywrapper.UintValue {
	if x != nil {
		return x.SetDscp
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config) GetSetMplsTc() *ywrapper.UintValue {
	if x != nil {
		return x.SetMplsTc
	}
	return nil
}

type Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SetDot1P  *ywrapper.UintValue `protobuf:"bytes,381011320,opt,name=set_dot1p,json=setDot1p,proto3" json:"set_dot1p,omitempty"`
	SetDscp   *ywrapper.UintValue `protobuf:"bytes,167728608,opt,name=set_dscp,json=setDscp,proto3" json:"set_dscp,omitempty"`
	SetMplsTc *ywrapper.UintValue `protobuf:"bytes,205338668,opt,name=set_mpls_tc,json=setMplsTc,proto3" json:"set_mpls_tc,omitempty"`
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State) Reset() {
	*x = Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State) ProtoMessage() {
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State.ProtoReflect.Descriptor instead.
func (*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 5, 0, 1, 0, 2, 1, 1}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State) GetSetDot1P() *ywrapper.UintValue {
	if x != nil {
		return x.SetDot1P
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State) GetSetDscp() *ywrapper.UintValue {
	if x != nil {
		return x.SetDscp
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State) GetSetMplsTc() *ywrapper.UintValue {
	if x != nil {
		return x.SetMplsTc
	}
	return nil
}

type Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Drop      *ywrapper.BoolValue `protobuf:"bytes,131419485,opt,name=drop,proto3" json:"drop,omitempty"`
	SetDot1P  *ywrapper.UintValue `protobuf:"bytes,431798715,opt,name=set_dot1p,json=setDot1p,proto3" json:"set_dot1p,omitempty"`
	SetDscp   *ywrapper.UintValue `protobuf:"bytes,70544401,opt,name=set_dscp,json=setDscp,proto3" json:"set_dscp,omitempty"`
	SetMplsTc *ywrapper.UintValue `protobuf:"bytes,156774487,opt,name=set_mpls_tc,json=setMplsTc,proto3" json:"set_mpls_tc,omitempty"`
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config) Reset() {
	*x = Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config) ProtoMessage() {
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config.ProtoReflect.Descriptor instead.
func (*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 5, 0, 1, 0, 2, 2, 0}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config) GetDrop() *ywrapper.BoolValue {
	if x != nil {
		return x.Drop
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config) GetSetDot1P() *ywrapper.UintValue {
	if x != nil {
		return x.SetDot1P
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config) GetSetDscp() *ywrapper.UintValue {
	if x != nil {
		return x.SetDscp
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config) GetSetMplsTc() *ywrapper.UintValue {
	if x != nil {
		return x.SetMplsTc
	}
	return nil
}

type Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Drop      *ywrapper.BoolValue `protobuf:"bytes,168830944,opt,name=drop,proto3" json:"drop,omitempty"`
	SetDot1P  *ywrapper.UintValue `protobuf:"bytes,132458132,opt,name=set_dot1p,json=setDot1p,proto3" json:"set_dot1p,omitempty"`
	SetDscp   *ywrapper.UintValue `protobuf:"bytes,500275780,opt,name=set_dscp,json=setDscp,proto3" json:"set_dscp,omitempty"`
	SetMplsTc *ywrapper.UintValue `protobuf:"bytes,94135584,opt,name=set_mpls_tc,json=setMplsTc,proto3" json:"set_mpls_tc,omitempty"`
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State) Reset() {
	*x = Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State) ProtoMessage() {
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State.ProtoReflect.Descriptor instead.
func (*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 5, 0, 1, 0, 2, 2, 1}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State) GetDrop() *ywrapper.BoolValue {
	if x != nil {
		return x.Drop
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State) GetSetDot1P() *ywrapper.UintValue {
	if x != nil {
		return x.SetDot1P
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State) GetSetDscp() *ywrapper.UintValue {
	if x != nil {
		return x.SetDscp
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State) GetSetMplsTc() *ywrapper.UintValue {
	if x != nil {
		return x.SetMplsTc
	}
	return nil
}

type Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChildScheduler *ywrapper.StringValue                                                               `protobuf:"bytes,101554311,opt,name=child_scheduler,json=childScheduler,proto3" json:"child_scheduler,omitempty"`
	OutputFwdGroup *ywrapper.StringValue                                                               `protobuf:"bytes,283910326,opt,name=output_fwd_group,json=outputFwdGroup,proto3" json:"output_fwd_group,omitempty"`
	OutputType     Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType `protobuf:"varint,485674633,opt,name=output_type,json=outputType,proto3,enum=openconfig.Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType" json:"output_type,omitempty"`
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config) Reset() {
	*x = Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config) ProtoMessage() {}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config.ProtoReflect.Descriptor instead.
func (*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 5, 0, 1, 0, 3, 0}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config) GetChildScheduler() *ywrapper.StringValue {
	if x != nil {
		return x.ChildScheduler
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config) GetOutputFwdGroup() *ywrapper.StringValue {
	if x != nil {
		return x.OutputFwdGroup
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config) GetOutputType() Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType {
	if x != nil {
		return x.OutputType
	}
	return Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OUTPUTTYPE_UNSET
}

type Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChildScheduler *ywrapper.StringValue                                                              `protobuf:"bytes,493732510,opt,name=child_scheduler,json=childScheduler,proto3" json:"child_scheduler,omitempty"`
	OutputFwdGroup *ywrapper.StringValue                                                              `protobuf:"bytes,475276361,opt,name=output_fwd_group,json=outputFwdGroup,proto3" json:"output_fwd_group,omitempty"`
	OutputType     Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType `protobuf:"varint,322389940,opt,name=output_type,json=outputType,proto3,enum=openconfig.Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType" json:"output_type,omitempty"`
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State) Reset() {
	*x = Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State) ProtoMessage() {}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State.ProtoReflect.Descriptor instead.
func (*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 5, 0, 1, 0, 3, 1}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State) GetChildScheduler() *ywrapper.StringValue {
	if x != nil {
		return x.ChildScheduler
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State) GetOutputFwdGroup() *ywrapper.StringValue {
	if x != nil {
		return x.OutputFwdGroup
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State) GetOutputType() Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType {
	if x != nil {
		return x.OutputType
	}
	return Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OUTPUTTYPE_UNSET
}

type Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bc              *ywrapper.UintValue `protobuf:"bytes,488133689,opt,name=bc,proto3" json:"bc,omitempty"`
	Be              *ywrapper.UintValue `protobuf:"bytes,488133695,opt,name=be,proto3" json:"be,omitempty"`
	Cir             *ywrapper.UintValue `protobuf:"bytes,72261310,opt,name=cir,proto3" json:"cir,omitempty"`
	CirPct          *ywrapper.UintValue `protobuf:"bytes,148455776,opt,name=cir_pct,json=cirPct,proto3" json:"cir_pct,omitempty"`
	CirPctRemaining *ywrapper.UintValue `protobuf:"bytes,426598443,opt,name=cir_pct_remaining,json=cirPctRemaining,proto3" json:"cir_pct_remaining,omitempty"`
	Pir             *ywrapper.UintValue `protobuf:"bytes,69260261,opt,name=pir,proto3" json:"pir,omitempty"`
	PirPct          *ywrapper.UintValue `protobuf:"bytes,115916567,opt,name=pir_pct,json=pirPct,proto3" json:"pir_pct,omitempty"`
	PirPctRemaining *ywrapper.UintValue `protobuf:"bytes,517108460,opt,name=pir_pct_remaining,json=pirPctRemaining,proto3" json:"pir_pct_remaining,omitempty"`
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config) Reset() {
	*x = Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config) ProtoMessage() {
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config.ProtoReflect.Descriptor instead.
func (*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 5, 0, 1, 0, 5, 0}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config) GetBc() *ywrapper.UintValue {
	if x != nil {
		return x.Bc
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config) GetBe() *ywrapper.UintValue {
	if x != nil {
		return x.Be
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config) GetCir() *ywrapper.UintValue {
	if x != nil {
		return x.Cir
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config) GetCirPct() *ywrapper.UintValue {
	if x != nil {
		return x.CirPct
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config) GetCirPctRemaining() *ywrapper.UintValue {
	if x != nil {
		return x.CirPctRemaining
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config) GetPir() *ywrapper.UintValue {
	if x != nil {
		return x.Pir
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config) GetPirPct() *ywrapper.UintValue {
	if x != nil {
		return x.PirPct
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config) GetPirPctRemaining() *ywrapper.UintValue {
	if x != nil {
		return x.PirPctRemaining
	}
	return nil
}

type Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config `protobuf:"bytes,320685791,opt,name=config,proto3" json:"config,omitempty"`
	State  *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State  `protobuf:"bytes,49137552,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction) Reset() {
	*x = Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction) ProtoMessage() {
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction.ProtoReflect.Descriptor instead.
func (*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 5, 0, 1, 0, 5, 1}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction) GetConfig() *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction) GetState() *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config `protobuf:"bytes,520730451,opt,name=config,proto3" json:"config,omitempty"`
	State  *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State  `protobuf:"bytes,230070580,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction) Reset() {
	*x = Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction) ProtoMessage() {
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction.ProtoReflect.Descriptor instead.
func (*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 5, 0, 1, 0, 5, 2}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction) GetConfig() *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction) GetState() *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bc              *ywrapper.UintValue `protobuf:"bytes,15153380,opt,name=bc,proto3" json:"bc,omitempty"`
	Be              *ywrapper.UintValue `protobuf:"bytes,15153378,opt,name=be,proto3" json:"be,omitempty"`
	Cir             *ywrapper.UintValue `protobuf:"bytes,368769365,opt,name=cir,proto3" json:"cir,omitempty"`
	CirPct          *ywrapper.UintValue `protobuf:"bytes,228243271,opt,name=cir_pct,json=cirPct,proto3" json:"cir_pct,omitempty"`
	CirPctRemaining *ywrapper.UintValue `protobuf:"bytes,276174460,opt,name=cir_pct_remaining,json=cirPctRemaining,proto3" json:"cir_pct_remaining,omitempty"`
	Pir             *ywrapper.UintValue `protobuf:"bytes,366650638,opt,name=pir,proto3" json:"pir,omitempty"`
	PirPct          *ywrapper.UintValue `protobuf:"bytes,484968816,opt,name=pir_pct,json=pirPct,proto3" json:"pir_pct,omitempty"`
	PirPctRemaining *ywrapper.UintValue `protobuf:"bytes,223122459,opt,name=pir_pct_remaining,json=pirPctRemaining,proto3" json:"pir_pct_remaining,omitempty"`
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State) Reset() {
	*x = Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State) ProtoMessage() {
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State.ProtoReflect.Descriptor instead.
func (*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 5, 0, 1, 0, 5, 3}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State) GetBc() *ywrapper.UintValue {
	if x != nil {
		return x.Bc
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State) GetBe() *ywrapper.UintValue {
	if x != nil {
		return x.Be
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State) GetCir() *ywrapper.UintValue {
	if x != nil {
		return x.Cir
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State) GetCirPct() *ywrapper.UintValue {
	if x != nil {
		return x.CirPct
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State) GetCirPctRemaining() *ywrapper.UintValue {
	if x != nil {
		return x.CirPctRemaining
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State) GetPir() *ywrapper.UintValue {
	if x != nil {
		return x.Pir
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State) GetPirPct() *ywrapper.UintValue {
	if x != nil {
		return x.PirPct
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State) GetPirPctRemaining() *ywrapper.UintValue {
	if x != nil {
		return x.PirPctRemaining
	}
	return nil
}

type Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config `protobuf:"bytes,491497103,opt,name=config,proto3" json:"config,omitempty"`
	State  *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State  `protobuf:"bytes,142023808,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction) Reset() {
	*x = Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction) ProtoMessage() {
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction.ProtoReflect.Descriptor instead.
func (*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 5, 0, 1, 0, 5, 4}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction) GetConfig() *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction) GetState() *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SetDot1P  *ywrapper.UintValue `protobuf:"bytes,106933487,opt,name=set_dot1p,json=setDot1p,proto3" json:"set_dot1p,omitempty"`
	SetDscp   *ywrapper.UintValue `protobuf:"bytes,410653965,opt,name=set_dscp,json=setDscp,proto3" json:"set_dscp,omitempty"`
	SetMplsTc *ywrapper.UintValue `protobuf:"bytes,301290899,opt,name=set_mpls_tc,json=setMplsTc,proto3" json:"set_mpls_tc,omitempty"`
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config) Reset() {
	*x = Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config) ProtoMessage() {
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config.ProtoReflect.Descriptor instead.
func (*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 5, 0, 1, 0, 5, 1, 0}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config) GetSetDot1P() *ywrapper.UintValue {
	if x != nil {
		return x.SetDot1P
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config) GetSetDscp() *ywrapper.UintValue {
	if x != nil {
		return x.SetDscp
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config) GetSetMplsTc() *ywrapper.UintValue {
	if x != nil {
		return x.SetMplsTc
	}
	return nil
}

type Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SetDot1P  *ywrapper.UintValue `protobuf:"bytes,287866712,opt,name=set_dot1p,json=setDot1p,proto3" json:"set_dot1p,omitempty"`
	SetDscp   *ywrapper.UintValue `protobuf:"bytes,308605888,opt,name=set_dscp,json=setDscp,proto3" json:"set_dscp,omitempty"`
	SetMplsTc *ywrapper.UintValue `protobuf:"bytes,213542028,opt,name=set_mpls_tc,json=setMplsTc,proto3" json:"set_mpls_tc,omitempty"`
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State) Reset() {
	*x = Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State) ProtoMessage() {
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State.ProtoReflect.Descriptor instead.
func (*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 5, 0, 1, 0, 5, 1, 1}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State) GetSetDot1P() *ywrapper.UintValue {
	if x != nil {
		return x.SetDot1P
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State) GetSetDscp() *ywrapper.UintValue {
	if x != nil {
		return x.SetDscp
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State) GetSetMplsTc() *ywrapper.UintValue {
	if x != nil {
		return x.SetMplsTc
	}
	return nil
}

type Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Drop      *ywrapper.BoolValue `protobuf:"bytes,299899453,opt,name=drop,proto3" json:"drop,omitempty"`
	SetDot1P  *ywrapper.UintValue `protobuf:"bytes,143535771,opt,name=set_dot1p,json=setDot1p,proto3" json:"set_dot1p,omitempty"`
	SetDscp   *ywrapper.UintValue `protobuf:"bytes,530765681,opt,name=set_dscp,json=setDscp,proto3" json:"set_dscp,omitempty"`
	SetMplsTc *ywrapper.UintValue `protobuf:"bytes,435204023,opt,name=set_mpls_tc,json=setMplsTc,proto3" json:"set_mpls_tc,omitempty"`
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config) Reset() {
	*x = Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config) ProtoMessage() {
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config.ProtoReflect.Descriptor instead.
func (*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 5, 0, 1, 0, 5, 2, 0}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config) GetDrop() *ywrapper.BoolValue {
	if x != nil {
		return x.Drop
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config) GetSetDot1P() *ywrapper.UintValue {
	if x != nil {
		return x.SetDot1P
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config) GetSetDscp() *ywrapper.UintValue {
	if x != nil {
		return x.SetDscp
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config) GetSetMplsTc() *ywrapper.UintValue {
	if x != nil {
		return x.SetMplsTc
	}
	return nil
}

type Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Drop      *ywrapper.BoolValue `protobuf:"bytes,190345152,opt,name=drop,proto3" json:"drop,omitempty"`
	SetDot1P  *ywrapper.UintValue `protobuf:"bytes,525081588,opt,name=set_dot1p,json=setDot1p,proto3" json:"set_dot1p,omitempty"`
	SetDscp   *ywrapper.UintValue `protobuf:"bytes,329397924,opt,name=set_dscp,json=setDscp,proto3" json:"set_dscp,omitempty"`
	SetMplsTc *ywrapper.UintValue `protobuf:"bytes,313456384,opt,name=set_mpls_tc,json=setMplsTc,proto3" json:"set_mpls_tc,omitempty"`
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State) Reset() {
	*x = Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State) ProtoMessage() {
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State.ProtoReflect.Descriptor instead.
func (*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 5, 0, 1, 0, 5, 2, 1}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State) GetDrop() *ywrapper.BoolValue {
	if x != nil {
		return x.Drop
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State) GetSetDot1P() *ywrapper.UintValue {
	if x != nil {
		return x.SetDot1P
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State) GetSetDscp() *ywrapper.UintValue {
	if x != nil {
		return x.SetDscp
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State) GetSetMplsTc() *ywrapper.UintValue {
	if x != nil {
		return x.SetMplsTc
	}
	return nil
}

type Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Drop      *ywrapper.BoolValue `protobuf:"bytes,230160201,opt,name=drop,proto3" json:"drop,omitempty"`
	SetDot1P  *ywrapper.UintValue `protobuf:"bytes,433219903,opt,name=set_dot1p,json=setDot1p,proto3" json:"set_dot1p,omitempty"`
	SetDscp   *ywrapper.UintValue `protobuf:"bytes,77658205,opt,name=set_dscp,json=setDscp,proto3" json:"set_dscp,omitempty"`
	SetMplsTc *ywrapper.UintValue `protobuf:"bytes,446571619,opt,name=set_mpls_tc,json=setMplsTc,proto3" json:"set_mpls_tc,omitempty"`
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config) Reset() {
	*x = Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config) ProtoMessage() {
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config.ProtoReflect.Descriptor instead.
func (*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 5, 0, 1, 0, 5, 4, 0}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config) GetDrop() *ywrapper.BoolValue {
	if x != nil {
		return x.Drop
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config) GetSetDot1P() *ywrapper.UintValue {
	if x != nil {
		return x.SetDot1P
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config) GetSetDscp() *ywrapper.UintValue {
	if x != nil {
		return x.SetDscp
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config) GetSetMplsTc() *ywrapper.UintValue {
	if x != nil {
		return x.SetMplsTc
	}
	return nil
}

type Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Drop      *ywrapper.BoolValue `protobuf:"bytes,94921628,opt,name=drop,proto3" json:"drop,omitempty"`
	SetDot1P  *ywrapper.UintValue `protobuf:"bytes,311422824,opt,name=set_dot1p,json=setDot1p,proto3" json:"set_dot1p,omitempty"`
	SetDscp   *ywrapper.UintValue `protobuf:"bytes,206736528,opt,name=set_dscp,json=setDscp,proto3" json:"set_dscp,omitempty"`
	SetMplsTc *ywrapper.UintValue `protobuf:"bytes,425194396,opt,name=set_mpls_tc,json=setMplsTc,proto3" json:"set_mpls_tc,omitempty"`
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State) Reset() {
	*x = Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_qos_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State) ProtoMessage() {
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_qos_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State.ProtoReflect.Descriptor instead.
func (*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State) Descriptor() ([]byte, []int) {
	return file_openconfig_qos_proto_rawDescGZIP(), []int{0, 5, 0, 1, 0, 5, 4, 1}
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State) GetDrop() *ywrapper.BoolValue {
	if x != nil {
		return x.Drop
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State) GetSetDot1P() *ywrapper.UintValue {
	if x != nil {
		return x.SetDot1P
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State) GetSetDscp() *ywrapper.UintValue {
	if x != nil {
		return x.SetDscp
	}
	return nil
}

func (x *Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State) GetSetMplsTc() *ywrapper.UintValue {
	if x != nil {
		return x.SetMplsTc
	}
	return nil
}

var File_openconfig_qos_proto protoreflect.FileDescriptor

var file_openconfig_qos_proto_rawDesc = []byte{
	0x0a, 0x14, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x71, 0x6f, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x1a, 0x0e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0a, 0x79, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xef, 0xf8, 0x03, 0x0a, 0x03, 0x51, 0x6f, 0x73, 0x12,
	0x55, 0x0a, 0x0b, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0xfb,
	0xe5, 0x86, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x73, 0x42, 0x13, 0x82, 0x41, 0x10, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x52, 0x0b, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x41, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0xd1, 0xd5, 0xc7, 0x79, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x0e, 0x82, 0x41, 0x0b, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6c, 0x0a, 0x11, 0x66, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0xd7,
	0xb4, 0xdf, 0x9c, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x42, 0x19, 0x82, 0x41, 0x16, 0x2f,
	0x71, 0x6f, 0x73, 0x2f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x10, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x52, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0xdf, 0xfa, 0xab, 0x9d, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x42, 0x12, 0x82, 0x41, 0x0f,
	0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x52,
	0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x06, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x73, 0x18, 0xdf, 0xc4, 0xca, 0x74, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x42, 0x0e, 0x82, 0x41, 0x0b, 0x2f, 0x71, 0x6f, 0x73, 0x2f,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x52, 0x06, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x12, 0x6f,
	0x0a, 0x12, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x18, 0xe9, 0x8a, 0xc4, 0x5b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x42, 0x1a, 0x82, 0x41, 0x17, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x11, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12,
	0x3d, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xc6, 0xed, 0xa6, 0x42, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51,
	0x6f, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x0d, 0x82, 0x41, 0x0a, 0x2f, 0x71, 0x6f,
	0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xb6,
	0x6f, 0x0a, 0x0b, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x6d,
	0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x89, 0xb6, 0xaa,
	0x86, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4b, 0x65,
	0x79, 0x42, 0x1e, 0x82, 0x41, 0x1b, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x52, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0xa4, 0x6d,
	0x0a, 0x0a, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x70, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xfe, 0xca, 0x93, 0xf1, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x25, 0x82, 0x41, 0x22, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6b,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xeb, 0x80, 0xed, 0x3b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x24,
	0x82, 0x41, 0x21, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x6c, 0x0a, 0x05, 0x74,
	0x65, 0x72, 0x6d, 0x73, 0x18, 0x85, 0xf9, 0xb6, 0xf1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x42, 0x24, 0x82, 0x41,
	0x21, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x74, 0x65, 0x72,
	0x6d, 0x73, 0x52, 0x05, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x1a, 0xdb, 0x02, 0x0a, 0x06, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x59, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xa4, 0xeb, 0x91,
	0xd4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2a, 0x82,
	0x41, 0x27, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x76, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0xed, 0xed, 0xb8, 0xc9, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51,
	0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x2a, 0x82, 0x41, 0x27, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x7e, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0e, 0x0a, 0x0a, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12,
	0x16, 0x0a, 0x09, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x10, 0x01, 0x1a, 0x07,
	0x82, 0x41, 0x04, 0x49, 0x50, 0x56, 0x34, 0x12, 0x16, 0x0a, 0x09, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x50, 0x56, 0x36, 0x10, 0x02, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x49, 0x50, 0x56, 0x36, 0x12,
	0x16, 0x0a, 0x09, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x10, 0x03, 0x1a, 0x07,
	0x82, 0x41, 0x04, 0x4d, 0x50, 0x4c, 0x53, 0x12, 0x1e, 0x0a, 0x0d, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x10, 0x04, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x45,
	0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x1a, 0xd6, 0x02, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x57, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x9b, 0xd4, 0xb5, 0x73, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x29, 0x82, 0x41, 0x26, 0x2f, 0x71,
	0x6f, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x74, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x9e, 0xa3, 0xd5, 0x9f, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x29, 0x82, 0x41, 0x26, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x7e, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x09, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x50, 0x56, 0x34, 0x10, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x49, 0x50, 0x56, 0x34,
	0x12, 0x16, 0x0a, 0x09, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x10, 0x02, 0x1a,
	0x07, 0x82, 0x41, 0x04, 0x49, 0x50, 0x56, 0x36, 0x12, 0x16, 0x0a, 0x09, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x10, 0x03, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x4d, 0x50, 0x4c, 0x53,
	0x12, 0x1e, 0x0a, 0x0d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45,
	0x54, 0x10, 0x04, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54,
	0x1a, 0x91, 0x65, 0x0a, 0x05, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x12, 0x76, 0x0a, 0x04, 0x74, 0x65,
	0x72, 0x6d, 0x18, 0xb6, 0xf0, 0xcc, 0x23, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x4b, 0x65,
	0x79, 0x42, 0x29, 0x82, 0x41, 0x26, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x52, 0x04, 0x74, 0x65,
	0x72, 0x6d, 0x1a, 0xfe, 0x62, 0x0a, 0x04, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x8a, 0x01, 0x0a, 0x07,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xfe, 0xa1, 0xc5, 0x89, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51,
	0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x2e,
	0x54, 0x65, 0x72, 0x6d, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x31, 0x82, 0x41,
	0x2e, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x74, 0x65, 0x72,
	0x6d, 0x73, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x95, 0x01, 0x0a, 0x0a, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xc3, 0xc5, 0x81, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x2e, 0x54,
	0x65, 0x72, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x34,
	0x82, 0x41, 0x31, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x74,
	0x65, 0x72, 0x6d, 0x73, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x86, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x97, 0xf4, 0xfa, 0xc7,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x54, 0x65,
	0x72, 0x6d, 0x73, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x30, 0x82, 0x41, 0x2d, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f,
	0x74, 0x65, 0x72, 0x6d, 0x73, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x81, 0x01, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0xc8, 0xc7, 0xed, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x2f, 0x82, 0x41, 0x2c, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x2f, 0x74, 0x65, 0x72, 0x6d,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xdc, 0x0e,
	0x0a, 0x07, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x95, 0x01, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0xcf, 0xb7, 0xee, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x2e, 0x54, 0x65, 0x72, 0x6d,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x38, 0x82, 0x41, 0x35, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f,
	0x74, 0x65, 0x72, 0x6d, 0x73, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x95, 0x01, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0xed, 0xd4, 0xe7,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x54, 0x65,
	0x72, 0x6d, 0x73, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x38, 0x82, 0x41, 0x35, 0x2f, 0x71, 0x6f, 0x73,
	0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x2f, 0x74, 0x65,
	0x72, 0x6d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x92, 0x01, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0xc0, 0xd9, 0xdc, 0xc0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x2e, 0x54, 0x65, 0x72, 0x6d,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x37,
	0x82, 0x41, 0x34, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x74,
	0x65, 0x72, 0x6d, 0x73, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x8d,
	0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x82, 0x01, 0x0a, 0x0c, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0xeb, 0xf1, 0xd6, 0x7d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f,
	0x71, 0x6f, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x73,
	0x2f, 0x74, 0x65, 0x72, 0x6d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0xec,
	0x08, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0xa4, 0x01, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x82, 0x92, 0xc2, 0xff, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x2e, 0x54, 0x65, 0x72,
	0x6d, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x71, 0x6f, 0x73,
	0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x2f, 0x74, 0x65,
	0x72, 0x6d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0xa0, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xbf, 0xd9, 0xd7, 0xc6, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x72,
	0x6d, 0x73, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x3e, 0x82, 0x41,
	0x3b, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x74, 0x65, 0x72,
	0x6d, 0x73, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x1a, 0x8b, 0x03, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x7e,
	0x0a, 0x09, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x6f, 0x74, 0x31, 0x70, 0x18, 0xe6, 0x9c, 0xdb, 0x3d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x49, 0x82, 0x41, 0x46, 0x2f, 0x71,
	0x6f, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x2f,
	0x74, 0x65, 0x72, 0x6d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x64,
	0x6f, 0x74, 0x31, 0x70, 0x52, 0x08, 0x73, 0x65, 0x74, 0x44, 0x6f, 0x74, 0x31, 0x70, 0x12, 0x7b,
	0x0a, 0x08, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x18, 0xb6, 0xbc, 0x98, 0x58, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x48, 0x82, 0x41, 0x45, 0x2f, 0x71, 0x6f,
	0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x2f, 0x74,
	0x65, 0x72, 0x6d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x64, 0x73,
	0x63, 0x70, 0x52, 0x07, 0x73, 0x65, 0x74, 0x44, 0x73, 0x63, 0x70, 0x12, 0x83, 0x01, 0x0a, 0x0b,
	0x73, 0x65, 0x74, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x63, 0x18, 0xce, 0x9f, 0x8e, 0x37,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4b, 0x82, 0x41, 0x48, 0x2f, 0x71,
	0x6f, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x2f,
	0x74, 0x65, 0x72, 0x6d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x6d,
	0x70, 0x6c, 0x73, 0x2d, 0x74, 0x63, 0x52, 0x09, 0x73, 0x65, 0x74, 0x4d, 0x70, 0x6c, 0x73, 0x54,
	0x63, 0x1a, 0x89, 0x03, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x7e, 0x0a, 0x09, 0x73,
	0x65, 0x74, 0x5f, 0x64, 0x6f, 0x74, 0x31, 0x70, 0x18, 0xcf, 0xd1, 0xc3, 0x93, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x48, 0x82, 0x41, 0x45, 0x2f, 0x71, 0x6f, 0x73,
	0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x2f, 0x74, 0x65,
	0x72, 0x6d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x64, 0x6f, 0x74, 0x31,
	0x70, 0x52, 0x08, 0x73, 0x65, 0x74, 0x44, 0x6f, 0x74, 0x31, 0x70, 0x12, 0x7b, 0x0a, 0x08, 0x73,
	0x65, 0x74, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x18, 0xed, 0xf9, 0x87, 0xf3, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x47, 0x82, 0x41, 0x44, 0x2f, 0x71, 0x6f, 0x73, 0x2f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x2f, 0x74, 0x65, 0x72,
	0x6d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x64, 0x73, 0x63, 0x70, 0x52,
	0x07, 0x73, 0x65, 0x74, 0x44, 0x73, 0x63, 0x70, 0x12, 0x82, 0x01, 0x0a, 0x0b, 0x73, 0x65, 0x74,
	0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x63, 0x18, 0xf3, 0xba, 0xa8, 0x31, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4a, 0x82, 0x41, 0x47, 0x2f, 0x71, 0x6f, 0x73, 0x2f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x2f, 0x74, 0x65, 0x72,
	0x6d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x6d, 0x70, 0x6c, 0x73, 0x2d,
	0x74, 0x63, 0x52, 0x09, 0x73, 0x65, 0x74, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x63, 0x1a, 0x8c, 0x01,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x8a, 0x84, 0x91, 0x9d, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x71,
	0x6f, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x2f,
	0x74, 0x65, 0x72, 0x6d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0x93, 0x4e, 0x0a,
	0x0a, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x93, 0x01, 0x0a, 0x04,
	0x69, 0x70, 0x76, 0x34, 0x18, 0xeb, 0xc1, 0xe4, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x2e, 0x54, 0x65, 0x72, 0x6d,
	0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x49, 0x70, 0x76, 0x34,
	0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x2f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x52, 0x04, 0x69, 0x70, 0x76,
	0x34, 0x12, 0x93, 0x01, 0x0a, 0x04, 0x69, 0x70, 0x76, 0x36, 0x18, 0xe9, 0xc1, 0xe4, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73,
	0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x72, 0x6d,
	0x73, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x71, 0x6f, 0x73, 0x2f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x2f, 0x74, 0x65, 0x72,
	0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x70, 0x76,
	0x36, 0x52, 0x04, 0x69, 0x70, 0x76, 0x36, 0x12, 0x8c, 0x01, 0x0a, 0x02, 0x6c, 0x32, 0x18, 0xb8,
	0x8f, 0x98, 0xad, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x2e, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4c, 0x32, 0x42, 0x37, 0x82, 0x41, 0x34, 0x2f, 0x71,
	0x6f, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x2f,
	0x74, 0x65, 0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x6c, 0x32, 0x52, 0x02, 0x6c, 0x32, 0x12, 0x93, 0x01, 0x0a, 0x04, 0x6d, 0x70, 0x6c, 0x73, 0x18,
	0xd2, 0xda, 0xc9, 0x7b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x2e, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x42, 0x39, 0x82, 0x41, 0x36,
	0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73,
	0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x74, 0x65, 0x72, 0x6d,
	0x73, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x6d, 0x70, 0x6c, 0x73, 0x52, 0x04, 0x6d, 0x70, 0x6c, 0x73, 0x12, 0xa8, 0x01, 0x0a,
	0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x9d, 0xb1, 0xf8, 0xbc, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x72,
	0x6d, 0x73, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x3e, 0x82, 0x41,
	0x3b, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x74, 0x65, 0x72,
	0x6d, 0x73, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x09, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0xeb, 0x0e, 0x0a, 0x04, 0x49, 0x70, 0x76, 0x34,
	0x12, 0xa5, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xbc, 0x83, 0x90, 0x27,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x72,
	0x6d, 0x73, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x40,
	0x82, 0x41, 0x3d, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x74,
	0x65, 0x72, 0x6d, 0x73, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xa1, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0xb5, 0xb3, 0xc4, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x2e, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x2f,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x8d, 0x06, 0x0a,
	0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xa0, 0x01, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0xae, 0xa2, 0xe1, 0xfb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x54, 0x82, 0x41, 0x51, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x2f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x12, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x72, 0x0a, 0x04, 0x64, 0x73,
	0x63, 0x70, 0x18, 0xb5, 0xbf, 0xfc, 0xda, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x64, 0x73, 0x63, 0x70, 0x52, 0x04, 0x64, 0x73, 0x63, 0x70, 0x12, 0x7f,
	0x0a, 0x09, 0x68, 0x6f, 0x70, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0xa2, 0xbc, 0xc0, 0x4e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4a, 0x82, 0x41, 0x47, 0x2f, 0x71,
	0x6f, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x2f,
	0x74, 0x65, 0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x69, 0x70, 0x76, 0x34, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x68, 0x6f, 0x70, 0x2d,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x08, 0x68, 0x6f, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x9b, 0x01, 0x0a, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x73, 0x69, 0x70, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x18, 0xa5, 0xc2, 0xae, 0xb1, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x49, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x48, 0x00, 0x52,
	0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x69, 0x70, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x2d, 0x0a,
	0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x18, 0xfc, 0xb5, 0xe8, 0xe8, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x91, 0x01, 0x0a,
	0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0xab, 0xcf, 0xcc, 0xb9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x2f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x42, 0x0a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x1a, 0x86, 0x06, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x9f, 0x01, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xe7,
	0xc3, 0xb5, 0xb7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x53, 0x82, 0x41, 0x50, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f,
	0x74, 0x65, 0x72, 0x6d, 0x73, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x12, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x70, 0x0a, 0x04, 0x64, 0x73, 0x63, 0x70,
	0x18, 0xda, 0xa6, 0xfa, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x44,
	0x82, 0x41, 0x41, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x74,
	0x65, 0x72, 0x6d, 0x73, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x64, 0x73, 0x63, 0x70, 0x52, 0x04, 0x64, 0x73, 0x63, 0x70, 0x12, 0x7f, 0x0a, 0x09, 0x68, 0x6f,
	0x70, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0xb7, 0xf1, 0xec, 0xac, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x49, 0x82, 0x41, 0x46, 0x2f, 0x71, 0x6f, 0x73, 0x2f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x2f, 0x74, 0x65, 0x72,
	0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x70, 0x76,
	0x34, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x68, 0x6f, 0x70, 0x2d, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x52, 0x08, 0x68, 0x6f, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x9b, 0x01, 0x0a, 0x2d,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x69, 0x70, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x88, 0xe1,
	0xc6, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x73, 0x49,
	0x50, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x48, 0x00, 0x52, 0x2c, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x73, 0x69,
	0x70, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x2c, 0x0a, 0x0f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xad, 0xf4, 0xb3,
	0x42, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x8f, 0x01, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xb8, 0xee, 0xa8, 0x42, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4e, 0x82, 0x41, 0x4b, 0x2f,
	0x71, 0x6f, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x73,
	0x2f, 0x74, 0x65, 0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x1a, 0xea, 0x13, 0x0a, 0x04, 0x49, 0x70, 0x76, 0x36, 0x12, 0xa6,
	0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xde, 0xe0, 0xb8, 0xdd, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73,
	0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x72, 0x6d,
	0x73, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x40, 0x82,
	0x41, 0x3d, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x74, 0x65,
	0x72, 0x6d, 0x73, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xa1, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0xcb, 0xe3, 0xf3, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x2e, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x2f, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xcc, 0x08, 0x0a, 0x06,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x9f, 0x01, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xb8,
	0xb0, 0xd8, 0x42, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x54,
	0x82, 0x41, 0x51, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x74,
	0x65, 0x72, 0x6d, 0x73, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x12, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0xa5, 0x01, 0x0a, 0x16, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0xf5, 0xb2, 0xe9, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x57, 0x82, 0x41, 0x54, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d,
	0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x14, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x72, 0x0a, 0x04, 0x64, 0x73, 0x63, 0x70, 0x18, 0xaf, 0xbb, 0xf8, 0xe5, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x71, 0x6f, 0x73,
	0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x2f, 0x74, 0x65,
	0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x70,
	0x76, 0x36, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64, 0x73, 0x63, 0x70, 0x52, 0x04,
	0x64, 0x73, 0x63, 0x70, 0x12, 0x7f, 0x0a, 0x09, 0x68, 0x6f, 0x70, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x9c, 0xc2, 0x94, 0x6f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x4a, 0x82, 0x41, 0x47, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f,
	0x74, 0x65, 0x72, 0x6d, 0x73, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x68, 0x6f, 0x70, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x08, 0x68, 0x6f, 0x70,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x9b, 0x01, 0x0a, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x73, 0x69, 0x70, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0xfb, 0xde, 0xd1, 0xe6, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x30, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x73, 0x49, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4f, 0x4c, 0x48, 0x00, 0x52, 0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x73, 0x69, 0x70, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x12, 0x2c, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f,
	0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x82, 0xa0, 0x92, 0x18, 0x20, 0x01, 0x28, 0x04, 0x48,
	0x00, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x55, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x12, 0x91, 0x01, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0xa1, 0xe4, 0xe2, 0xed, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x2f, 0x74, 0x65, 0x72, 0x6d,
	0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x70, 0x76, 0x36,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x96, 0x01, 0x0a, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0xf2, 0x9e, 0xd9, 0x4b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x52, 0x82, 0x41, 0x4f, 0x2f, 0x71,
	0x6f, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x2f,
	0x74, 0x65, 0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x69, 0x70, 0x76, 0x36, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2d, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x0f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x0a,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x1a, 0xc5, 0x08, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x9e, 0x01, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xad, 0xbd, 0xe9,
	0x7f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x53, 0x82, 0x41,
	0x50, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x74, 0x65, 0x72,
	0x6d, 0x73, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x12, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0xa5, 0x01, 0x0a, 0x16, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0xbe, 0x82, 0x85, 0x9f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x56, 0x82, 0x41, 0x53, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f,
	0x74, 0x65, 0x72, 0x6d, 0x73, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x66, 0x6c, 0x6f,
	0x77, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x14, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x71, 0x0a,
	0x04, 0x64, 0x73, 0x63, 0x70, 0x18, 0xc8, 0xfc, 0xd2, 0x8d, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x2f,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x73, 0x63, 0x70, 0x52, 0x04, 0x64, 0x73, 0x63, 0x70,
	0x12, 0x7f, 0x0a, 0x09, 0x68, 0x6f, 0x70, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0xbd, 0xe1,
	0x9b, 0xe1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x49, 0x82, 0x41,
	0x46, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x74, 0x65, 0x72,
	0x6d, 0x73, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x68, 0x6f,
	0x70, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x08, 0x68, 0x6f, 0x70, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x9a, 0x01, 0x0a, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x73, 0x69, 0x70, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x18, 0xd2, 0xb5, 0xd9, 0x76, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x49, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x48, 0x00,
	0x52, 0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x69, 0x70, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x2c,
	0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x18, 0xcf, 0x88, 0xa3, 0x41, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x8f, 0x01, 0x0a,
	0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0xf2, 0xf1, 0xaa, 0x72, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f,
	0x74, 0x65, 0x72, 0x6d, 0x73, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x95,
	0x01, 0x0a, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x18, 0xcf, 0x9c, 0x92, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x51, 0x82, 0x41, 0x4e, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x2f, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x66, 0x6c, 0x6f, 0x77, 0x2d,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x6c, 0x6f,
	0x77, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x0a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x1a, 0xab, 0x0f, 0x0a, 0x02, 0x4c, 0x32, 0x12, 0xa1, 0x01, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0xbd, 0x85, 0xf7, 0x52, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x2e, 0x54, 0x65, 0x72, 0x6d,
	0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4c, 0x32, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x2f, 0x74, 0x65, 0x72, 0x6d,
	0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6c, 0x32, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x9c, 0x01,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xb2, 0xaa, 0x7d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x45, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73,
	0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x2e, 0x54, 0x65,
	0x72, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4c, 0x32,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x3d, 0x82, 0x41, 0x3a, 0x2f, 0x71, 0x6f, 0x73, 0x2f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x2f, 0x74, 0x65, 0x72,
	0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6c, 0x32, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xb0, 0x06, 0x0a,
	0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x92, 0x01, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x63, 0x18, 0x86, 0xaf, 0xee, 0xf5,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4e, 0x82, 0x41,
	0x4b, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x74, 0x65, 0x72,
	0x6d, 0x73, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x6c, 0x32, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6d, 0x61, 0x63, 0x52, 0x0e, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x63, 0x12, 0xa0, 0x01, 0x0a,
	0x14, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x63,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x8b, 0xfe, 0xa5, 0x89, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x53, 0x82, 0x41, 0x50, 0x2f, 0x71, 0x6f, 0x73, 0x2f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x2f, 0x74, 0x65, 0x72,
	0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6c, 0x32, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2d, 0x6d, 0x61, 0x63, 0x2d, 0x6d, 0x61, 0x73, 0x6b, 0x52, 0x12, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x63, 0x4d, 0x61, 0x73, 0x6b, 0x12,
	0x99, 0x01, 0x0a, 0x2d, 0x65, 0x74, 0x68, 0x65, 0x72, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x73, 0x65, 0x74, 0x68, 0x65, 0x72, 0x74, 0x79, 0x70,
	0x65, 0x18, 0xe5, 0xa3, 0x94, 0x75, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x45, 0x54, 0x48, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x48, 0x00, 0x52, 0x2c, 0x65,
	0x74, 0x68, 0x65, 0x72, 0x74, 0x79, 0x70, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x65, 0x74, 0x68, 0x65, 0x72, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x10, 0x65,
	0x74, 0x68, 0x65, 0x72, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18,
	0xc1, 0xde, 0x9d, 0x3f, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0f, 0x65, 0x74, 0x68, 0x65,
	0x72, 0x74, 0x79, 0x70, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x81, 0x01, 0x0a, 0x0a,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x18, 0xe1, 0x98, 0x28, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x49, 0x82, 0x41, 0x46, 0x2f, 0x71,
	0x6f, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x2f,
	0x74, 0x65, 0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x6c, 0x32, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2d, 0x6d, 0x61, 0x63, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x63, 0x12,
	0x90, 0x01, 0x0a, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x18, 0xf6, 0xd5, 0xb5, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x2f, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6c, 0x32, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x6d, 0x61, 0x63, 0x2d, 0x6d,
	0x61, 0x73, 0x6b, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x63, 0x4d, 0x61,
	0x73, 0x6b, 0x42, 0x0b, 0x0a, 0x09, 0x65, 0x74, 0x68, 0x65, 0x72, 0x74, 0x79, 0x70, 0x65, 0x1a,
	0xae, 0x06, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x91, 0x01, 0x0a, 0x0f, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x63, 0x18, 0xcd, 0xf2,
	0xff, 0x84, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4d,
	0x82, 0x41, 0x4a, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x74,
	0x65, 0x72, 0x6d, 0x73, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6c, 0x32, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6d, 0x61, 0x63, 0x52, 0x0e, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x63, 0x12, 0x9e, 0x01,
	0x0a, 0x14, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61,
	0x63, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0xca, 0xe6, 0xde, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x52, 0x82, 0x41, 0x4f, 0x2f, 0x71, 0x6f, 0x73, 0x2f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x2f, 0x74, 0x65, 0x72,
	0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6c, 0x32, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2d, 0x6d, 0x61, 0x63, 0x2d, 0x6d, 0x61, 0x73, 0x6b, 0x52, 0x12, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x63, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x9a,
	0x01, 0x0a, 0x2d, 0x65, 0x74, 0x68, 0x65, 0x72, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x73, 0x65, 0x74, 0x68, 0x65, 0x72, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x96, 0xe4, 0xc8, 0xc1, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x45, 0x54, 0x48, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x48, 0x00, 0x52, 0x2c, 0x65,
	0x74, 0x68, 0x65, 0x72, 0x74, 0x79, 0x70, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x65, 0x74, 0x68, 0x65, 0x72, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x10, 0x65,
	0x74, 0x68, 0x65, 0x72, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18,
	0xec, 0xc0, 0x93, 0xdc, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0f, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x74, 0x79, 0x70, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x82, 0x01, 0x0a,
	0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x18, 0xd4, 0xc6, 0x8c, 0xf1,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x48, 0x82, 0x41,
	0x45, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x74, 0x65, 0x72,
	0x6d, 0x73, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x6c, 0x32, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2d, 0x6d, 0x61, 0x63, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61,
	0x63, 0x12, 0x8f, 0x01, 0x0a, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x63,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0xed, 0xe2, 0xd4, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4d, 0x82, 0x41, 0x4a, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x2f, 0x74, 0x65, 0x72, 0x6d,
	0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6c, 0x32, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x6d, 0x61, 0x63, 0x2d,
	0x6d, 0x61, 0x73, 0x6b, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x63, 0x4d,
	0x61, 0x73, 0x6b, 0x42, 0x0b, 0x0a, 0x09, 0x65, 0x74, 0x68, 0x65, 0x72, 0x74, 0x79, 0x70, 0x65,
	0x1a, 0x85, 0x05, 0x0a, 0x04, 0x4d, 0x70, 0x6c, 0x73, 0x12, 0xa6, 0x01, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x93, 0xa4, 0xbd, 0xe0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x2e, 0x54, 0x65, 0x72,
	0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4d, 0x70, 0x6c,
	0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x71, 0x6f,
	0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x2f, 0x74,
	0x65, 0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d,
	0x70, 0x6c, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0xa1, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xf4, 0xcb, 0xab,
	0x79, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x54, 0x65,
	0x72, 0x6d, 0x73, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x3f,
	0x82, 0x41, 0x3c, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x74,
	0x65, 0x72, 0x6d, 0x73, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x70, 0x6c, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x97, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x8c, 0x01, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x18, 0x92, 0xf3, 0xa1, 0x8b, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x2f, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x70, 0x6c, 0x73, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x2d, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x1a, 0x95, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x8b, 0x01, 0x0a, 0x0d, 0x74,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x95, 0x9f, 0xae,
	0xb5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4d, 0x82, 0x41, 0x4a,
	0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73,
	0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x74, 0x65, 0x72, 0x6d,
	0x73, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x6d, 0x70, 0x6c, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x1a, 0xf7, 0x10, 0x0a, 0x09, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0xb0, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0xd2, 0xec, 0xd5, 0xe0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x2e, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f,
	0x71, 0x6f, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x73,
	0x2f, 0x74, 0x65, 0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xab, 0x01, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0xcf, 0x8d, 0xe1, 0x78, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x2e,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f,
	0x71, 0x6f, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x73,
	0x2f, 0x74, 0x65, 0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x84, 0x07, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0xac, 0x01, 0x0a, 0x20, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x70, 0x6f, 0x72, 0x74, 0x18, 0xb9, 0x9b, 0xc7, 0x1d, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x5d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x2e, 0x54,
	0x65, 0x72, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x48,
	0x00, 0x52, 0x1e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f,
	0x72, 0x74, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x3b, 0x0a, 0x17, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0xb3, 0xad, 0xd5,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x15, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x3c,
	0x0a, 0x17, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x96, 0xfb, 0xca, 0x8d, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x15, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x93, 0x01, 0x0a,
	0x16, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0xb7, 0x8c, 0xe8, 0x50, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x58, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x2e, 0x54,
	0x65, 0x72, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x48, 0x01, 0x52, 0x14, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x32, 0x0a, 0x12, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0xae, 0xfd, 0xb4, 0xa3, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x32, 0x0a, 0x12, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xaf, 0xcf, 0xcb,
	0x84, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x50, 0x6f, 0x72, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x9f, 0x01, 0x0a, 0x09, 0x74,
	0x63, 0x70, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x80, 0xe2, 0xad, 0x27, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x73, 0x54, 0x43, 0x50, 0x46, 0x4c, 0x41, 0x47,
	0x53, 0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x74, 0x63, 0x70, 0x2d, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x52, 0x08, 0x74, 0x63, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x22, 0x4d, 0x0a, 0x0f,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x19, 0x0a, 0x15, 0x44, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x13, 0x44, 0x45,
	0x53, 0x54, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x4e,
	0x59, 0x10, 0x01, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x41, 0x4e, 0x59, 0x22, 0x3e, 0x0a, 0x0a, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12,
	0x1a, 0x0a, 0x0e, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x4e,
	0x59, 0x10, 0x01, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x41, 0x4e, 0x59, 0x42, 0x12, 0x0a, 0x10, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x42,
	0x0d, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x81,
	0x07, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xab, 0x01, 0x0a, 0x20, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x6f, 0x72, 0x74, 0x18, 0xd6, 0xab,
	0x8f, 0x31, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x54,
	0x65, 0x72, 0x6d, 0x73, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52, 0x1e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x3b, 0x0a, 0x17, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0xda, 0x87, 0xd8, 0x6e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x15, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x3b, 0x0a, 0x17, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xbb,
	0xc6, 0xd8, 0x47, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x15, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x12, 0x93, 0x01, 0x0a, 0x16, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0xec, 0xf8, 0xa4, 0xcf,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x57, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x54, 0x65,
	0x72, 0x6d, 0x73, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x48, 0x01,
	0x52, 0x14, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x32, 0x0a, 0x12, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x9d, 0xc5, 0xb7,
	0xfd, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x32, 0x0a, 0x12, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x18, 0x80, 0x9f, 0xb6, 0x83, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x10, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x9f,
	0x01, 0x0a, 0x09, 0x74, 0x63, 0x70, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0xd1, 0xfa, 0x9e,
	0xb9, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x73, 0x54, 0x43,
	0x50, 0x46, 0x4c, 0x41, 0x47, 0x53, 0x42, 0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x71, 0x6f, 0x73, 0x2f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x2f, 0x74, 0x65, 0x72,
	0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x63, 0x70,
	0x2d, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x08, 0x74, 0x63, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x73,
	0x22, 0x4d, 0x0a, 0x0f, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x1f,
	0x0a, 0x13, 0x44, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x41, 0x4e, 0x59, 0x10, 0x01, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x41, 0x4e, 0x59, 0x22,
	0x3e, 0x0a, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a,
	0x10, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x45,
	0x54, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x0e, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x41, 0x4e, 0x59, 0x10, 0x01, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x41, 0x4e, 0x59, 0x42,
	0x12, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x1a, 0x67, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x5d, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0xe1, 0x9d, 0x94, 0x41, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x33, 0x82, 0x41, 0x30, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x1a, 0x66, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x5d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x90, 0xfd, 0x9e, 0x86, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x32, 0x82, 0x41, 0x2f,
	0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73,
	0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x74, 0x65, 0x72, 0x6d,
	0x73, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x64, 0x52,
	0x02, 0x69, 0x64, 0x1a, 0x8e, 0x01, 0x0a, 0x07, 0x54, 0x65, 0x72, 0x6d, 0x4b, 0x65, 0x79, 0x12,
	0x3c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0x82, 0x41, 0x29,
	0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73,
	0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x74, 0x65, 0x72, 0x6d,
	0x73, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x2f, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x45, 0x0a,
	0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x52, 0x04,
	0x74, 0x65, 0x72, 0x6d, 0x1a, 0x90, 0x01, 0x0a, 0x0d, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x82, 0x41, 0x20, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x46, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73,
	0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0x08, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x1a, 0xe1, 0x0a, 0x0a, 0x10, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x8e, 0x01, 0x0a, 0x10, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0xd9, 0xb9, 0xf2, 0xd8,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x42, 0x2a, 0x82, 0x41, 0x27, 0x2f,
	0x71, 0x6f, 0x73, 0x2f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0x82, 0x08, 0x0a, 0x0f, 0x46, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x85, 0x01, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xae, 0xf4, 0xca, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73,
	0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x31, 0x82, 0x41, 0x2e, 0x2f, 0x71, 0x6f,
	0x73, 0x2f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x2f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x82, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xdb, 0xf0,
	0xa2, 0xf4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42,
	0x30, 0x82, 0x41, 0x2d, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xf0, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x82, 0x01, 0x0a, 0x0f, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x5f, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0xe7, 0x96, 0x90, 0x5f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x2d,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x0e, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x64, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0xf4, 0xf8, 0xe2, 0x55, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x7b,
	0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0xf0,
	0xd8, 0xd4, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3e,
	0x82, 0x41, 0x3b, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x52, 0x0b,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x1a, 0xee, 0x02, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x0f, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63,
	0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0xaa, 0xdb, 0xb9, 0xcf, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x71, 0x6f,
	0x73, 0x2f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x2f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x66, 0x61, 0x62, 0x72, 0x69,
	0x63, 0x2d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x0e, 0x66, 0x61, 0x62, 0x72,
	0x69, 0x63, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x64, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0xeb, 0xe7, 0xa3, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x66, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x7a, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x18, 0xc7, 0xda, 0xfe, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x3d, 0x82, 0x41, 0x3a, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x52,
	0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x1a, 0xb6, 0x01, 0x0a,
	0x12, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4b, 0x65, 0x79, 0x12, 0x43, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2f, 0x82, 0x41, 0x2c, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x66, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x6e, 0x61,
	0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x5b, 0x0a, 0x10, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x51, 0x6f, 0x73, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x0f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0xec, 0xae, 0x01, 0x0a, 0x0a, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x66, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x18, 0xff, 0xda, 0xa7, 0x55, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x4b, 0x65, 0x79, 0x42, 0x1c, 0x82, 0x41, 0x19, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x1a, 0xd1, 0xac,
	0x01, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x6b, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xc0, 0xf9, 0x90, 0x48, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x23, 0x82, 0x41,
	0x20, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x67, 0x0a, 0x05, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x18, 0xfe, 0xd5, 0xac, 0x58, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x22, 0x82, 0x41, 0x1f, 0x2f, 0x71, 0x6f, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x86, 0x01, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x5f, 0x72, 0x65, 0x66, 0x18, 0xef, 0x91, 0xb2, 0xa2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65,
	0x66, 0x42, 0x2a, 0x82, 0x41, 0x27, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x66, 0x52, 0x0c, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x12, 0x6c, 0x0a, 0x06, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0xd5, 0xda, 0xf7, 0xeb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x23, 0x82, 0x41,
	0x20, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x67, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0xb9, 0xd5, 0xff, 0x70, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x22, 0x82, 0x41, 0x1f, 0x2f, 0x71, 0x6f, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x1a, 0x77, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6d, 0x0a, 0x0c,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0xf6, 0xee, 0xc1,
	0x7c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x30, 0x82, 0x41,
	0x2d, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x69, 0x64, 0x52, 0x0b,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x1a, 0xcf, 0x59, 0x0a, 0x05,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x8b, 0x01, 0x0a, 0x0b, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0xe1, 0x8e, 0xb3, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x42, 0x2e, 0x82, 0x41, 0x2b, 0x2f, 0x71, 0x6f, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x52, 0x0b, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x73, 0x12, 0x77, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xcf, 0xb3,
	0xb1, 0x5d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x29, 0x82, 0x41, 0x26, 0x2f, 0x71,
	0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x78, 0x0a, 0x06,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x18, 0x95, 0xe0, 0xb5, 0xea, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x73, 0x42, 0x29, 0x82, 0x41, 0x26, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x52, 0x06,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x12, 0x9e, 0x01, 0x0a, 0x10, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0xef, 0xc0, 0xdc, 0xba,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x42, 0x33, 0x82, 0x41, 0x30, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x74, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0xc0, 0xed, 0xc8, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x28, 0x82, 0x41,
	0x25, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0xb0, 0x01,
	0x0a, 0x15, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x18, 0x99, 0xe0, 0xd6, 0xb0, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51,
	0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x73, 0x42, 0x38, 0x82, 0x41, 0x35, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x2f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x2d, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x52, 0x13, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73,
	0x1a, 0x88, 0x19, 0x0a, 0x0b, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73,
	0x12, 0xa2, 0x01, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0xab, 0xf7, 0x82, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73,
	0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x42, 0x39,
	0x82, 0x41, 0x36, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0xde, 0x14, 0x0a, 0x0a, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0xa6, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0xfc, 0xc1, 0xd9, 0xff, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xa2, 0x01,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xf5, 0x87, 0xb7, 0xd5, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x47, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51,
	0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f,
	0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0xa1, 0x01, 0x0a, 0x05, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x18, 0xa3, 0xc1, 0xd4,
	0x6f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x42, 0x3f,
	0x82, 0x41, 0x3c, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x52,
	0x05, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x1a, 0x8b, 0x03, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x73, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xde, 0x9b, 0xc5, 0x60, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x71,
	0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6e, 0x61, 0x6d, 0x65,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0xab, 0x01, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0xb3, 0x82, 0xb4, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73,
	0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x71, 0x6f, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x5e, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x09,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x10, 0x05, 0x1a, 0x07, 0x82, 0x41, 0x04,
	0x49, 0x50, 0x56, 0x34, 0x12, 0x16, 0x0a, 0x09, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56,
	0x36, 0x10, 0x07, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x49, 0x50, 0x56, 0x36, 0x12, 0x16, 0x0a, 0x09,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x10, 0x08, 0x1a, 0x07, 0x82, 0x41, 0x04,
	0x4d, 0x50, 0x4c, 0x53, 0x1a, 0x88, 0x03, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x73,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xd1, 0xb9, 0xf0, 0xb6, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x71, 0x6f, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0xa9, 0x01, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0xf8, 0xb0, 0x98,
	0x2d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x5e, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x09, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x50, 0x56, 0x34, 0x10, 0x05, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x49, 0x50, 0x56, 0x34, 0x12,
	0x16, 0x0a, 0x09, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x10, 0x07, 0x1a, 0x07,
	0x82, 0x41, 0x04, 0x49, 0x50, 0x56, 0x36, 0x12, 0x16, 0x0a, 0x09, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4d, 0x50, 0x4c, 0x53, 0x10, 0x08, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x4d, 0x50, 0x4c, 0x53, 0x1a,
	0xc4, 0x0a, 0x0a, 0x05, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x12, 0xad, 0x01, 0x0a, 0x04, 0x74, 0x65,
	0x72, 0x6d, 0x18, 0xd8, 0xa0, 0x8c, 0xfb, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e,
	0x54, 0x65, 0x72, 0x6d, 0x73, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x4b, 0x65, 0x79, 0x42, 0x44, 0x82,
	0x41, 0x41, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x2f, 0x74,
	0x65, 0x72, 0x6d, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x1a, 0xc3, 0x07, 0x0a, 0x04, 0x54, 0x65,
	0x72, 0x6d, 0x12, 0xbc, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xdd, 0xd9,
	0xdd, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x73,
	0x2e, 0x54, 0x65, 0x72, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x4b, 0x82, 0x41,
	0x48, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x2f, 0x74, 0x65,
	0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0xb8, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xd2, 0xcb, 0x8c, 0xcf,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x2e, 0x54,
	0x65, 0x72, 0x6d, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x4a, 0x82, 0x41, 0x47, 0x2f, 0x71,
	0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x83, 0x01, 0x0a,
	0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x79, 0x0a, 0x02, 0x69, 0x64, 0x18, 0xc7, 0xb7,
	0xf1, 0xdd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4e,
	0x82, 0x41, 0x4b, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x2f,
	0x74, 0x65, 0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x64, 0x52, 0x02,
	0x69, 0x64, 0x1a, 0xba, 0x03, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x77, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0xf2, 0x96, 0x83, 0x48, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x4d, 0x82, 0x41, 0x4a, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x74, 0x65,
	0x72, 0x6d, 0x73, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69,
	0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x99, 0x01, 0x0a, 0x0e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x64, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0xd8, 0xb0, 0x86, 0xbe, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x59, 0x82, 0x41, 0x56, 0x2f, 0x71, 0x6f, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x2d, 0x6f, 0x63, 0x74, 0x65,
	0x74, 0x73, 0x52, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x4f, 0x63, 0x74, 0x65, 0x74,
	0x73, 0x12, 0x9b, 0x01, 0x0a, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0xeb, 0xce, 0xdc, 0x47, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x5a, 0x82, 0x41, 0x57, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x74,
	0x65, 0x72, 0x6d, 0x73, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52,
	0x0e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x1a,
	0xc4, 0x01, 0x0a, 0x07, 0x54, 0x65, 0x72, 0x6d, 0x4b, 0x65, 0x79, 0x12, 0x57, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x47, 0x82, 0x41, 0x44, 0x2f, 0x71, 0x6f, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x2f, 0x69, 0x64,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x60, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x51, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x2e, 0x54, 0x65, 0x72, 0x6d,
	0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x1a, 0xf2, 0x02, 0x0a, 0x0d, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x9d, 0x01, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x49, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x61, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x5e, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45,
	0x54, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x09, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x34,
	0x10, 0x05, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x49, 0x50, 0x56, 0x34, 0x12, 0x16, 0x0a, 0x09, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x10, 0x07, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x49,
	0x50, 0x56, 0x36, 0x12, 0x16, 0x0a, 0x09, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53,
	0x10, 0x08, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x4d, 0x50, 0x4c, 0x53, 0x1a, 0x08, 0x0a, 0x06, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0xe1, 0x0b, 0x0a, 0x06, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73,
	0x12, 0x84, 0x01, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x95, 0x92, 0x9c, 0x31, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4b, 0x65, 0x79, 0x42,
	0x2f, 0x82, 0x41, 0x2c, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x1a, 0xa9, 0x09, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x12, 0x92, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xba, 0xce, 0x8c,
	0xf0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x71, 0x6f, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x73, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x8d, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0xd7, 0xb8, 0xc2, 0x5a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x71, 0x6f,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2f, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x74, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x6a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xa8, 0xd6, 0xbc, 0xd2, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3b, 0x82, 0x41, 0x38, 0x2f, 0x71,
	0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2f, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x84, 0x06, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x0d, 0x61, 0x76, 0x67, 0x5f, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0xc2, 0xd3, 0xa1, 0xaa, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x43, 0x82, 0x41, 0x40, 0x2f, 0x71, 0x6f, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2f, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61,
	0x76, 0x67, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x6c, 0x65, 0x6e, 0x52, 0x0b, 0x61, 0x76,
	0x67, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4c, 0x65, 0x6e, 0x12, 0x7e, 0x0a, 0x0c, 0x64, 0x72, 0x6f,
	0x70, 0x70, 0x65, 0x64, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0xd9, 0xfc, 0xf2, 0xfc, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x71, 0x6f,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2f, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x0b, 0x64, 0x72,
	0x6f, 0x70, 0x70, 0x65, 0x64, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x80, 0x01, 0x0a, 0x0d, 0x6d, 0x61,
	0x78, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0xf0, 0xbd, 0xb1, 0xff,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x43, 0x82, 0x41, 0x40, 0x2f,
	0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2f, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x6c, 0x65, 0x6e, 0x52,
	0x0b, 0x6d, 0x61, 0x78, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4c, 0x65, 0x6e, 0x12, 0x68, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0xdf, 0xa6, 0x93, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x3a, 0x82, 0x41, 0x37, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2f,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x61, 0x6d, 0x65,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x6d, 0x69, 0x74, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0xc3, 0xf7, 0xb8, 0x71, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x71, 0x6f,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2f, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x2d, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x52,
	0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12,
	0x81, 0x01, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x6b, 0x74,
	0x73, 0x18, 0xbb, 0xa3, 0xe8, 0xaf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x43, 0x82, 0x41, 0x40, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74,
	0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x50,
	0x6b, 0x74, 0x73, 0x1a, 0xa3, 0x01, 0x0a, 0x08, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4b, 0x65, 0x79,
	0x12, 0x48, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x34,
	0x82, 0x41, 0x31, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2f,
	0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x05, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x1a, 0xdc, 0x13, 0x0a, 0x0f, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x99, 0x01,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xd0, 0xfc, 0xd3, 0xf1, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x51, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x3a, 0x82, 0x41, 0x37, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xa8, 0x01, 0x0a, 0x0a, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x18, 0xf0, 0xed, 0xb3, 0x73, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x45, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51,
	0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x71, 0x6f,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x73, 0x12, 0x95, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xc9,
	0xa8, 0xbc, 0xc0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f,
	0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x77, 0x0a, 0x06,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xfa,
	0xb0, 0xd1, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3f,
	0x82, 0x41, 0x3c, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0xf9, 0x0d, 0x0a, 0x0a, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x73, 0x12, 0xbe, 0x01, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x18, 0xc6, 0xe5, 0x9b, 0x92, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x4b, 0x65, 0x79,
	0x42, 0x48, 0x82, 0x41, 0x45, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73,
	0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x1a, 0xba, 0x0a, 0x0a, 0x09, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x12, 0xbf, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xb8, 0xa7,
	0xbc, 0xbc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x4e,
	0x82, 0x41, 0x4b, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xea, 0x08, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0xa5, 0x01, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x6f,
	0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0x8e, 0xbf, 0xbb, 0x61, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x60, 0x82, 0x41, 0x5d, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x2d, 0x6f,
	0x63, 0x74, 0x65, 0x74, 0x73, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x69, 0x6e,
	0x67, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12, 0xa0, 0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0xb6, 0xb9, 0xc9, 0xbc,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5e, 0x82, 0x41, 0x5b, 0x2f,
	0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x50, 0x6b, 0x74, 0x73, 0x12, 0xa2, 0x01, 0x0a, 0x10, 0x65,
	0x78, 0x63, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18,
	0xf2, 0xe9, 0xe2, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5f, 0x82,
	0x41, 0x5c, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x78,
	0x63, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x52, 0x0f,
	0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12,
	0x9c, 0x01, 0x0a, 0x0e, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6b,
	0x74, 0x73, 0x18, 0x92, 0x85, 0xa3, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x5d, 0x82, 0x41, 0x5a, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73,
	0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52,
	0x0d, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x8c,
	0x01, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0xb8, 0xba, 0x9f, 0xde,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x57, 0x82, 0x41, 0x54, 0x2f,
	0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0xa3, 0x01,
	0x0a, 0x10, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x63, 0x74, 0x65,
	0x74, 0x73, 0x18, 0xd3, 0xcb, 0x94, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x5f, 0x82, 0x41, 0x5c, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x6f, 0x63, 0x74, 0x65,
	0x74, 0x73, 0x52, 0x0f, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x63, 0x74,
	0x65, 0x74, 0x73, 0x12, 0x9c, 0x01, 0x0a, 0x0e, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0xcb, 0xd1, 0xb0, 0x53, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x5d, 0x82, 0x41, 0x5a, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70,
	0x6b, 0x74, 0x73, 0x52, 0x0d, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6b,
	0x74, 0x73, 0x1a, 0xec, 0x01, 0x0a, 0x0c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x4b, 0x65, 0x79, 0x12, 0x6d, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x51, 0x82, 0x41, 0x4e, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x6d, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x1a, 0x75, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x6c, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0xfd, 0xda, 0xc3, 0x39, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x61,
	0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x07, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x1a, 0x99, 0x1a, 0x0a, 0x13, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x12, 0xbe, 0x01, 0x0a, 0x0d, 0x76, 0x6f,
	0x71, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0xc4, 0xeb, 0xfb, 0x3f,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x73, 0x2e, 0x56, 0x6f, 0x71, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x4b, 0x65, 0x79, 0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x2d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2f, 0x76,
	0x6f, 0x71, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x0c, 0x76, 0x6f,
	0x71, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x1a, 0xd9, 0x16, 0x0a, 0x0c, 0x56,
	0x6f, 0x71, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0xbc, 0x01, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xe9, 0xb1, 0xca, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x52, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x56, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e,
	0x56, 0x6f, 0x71, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x4d, 0x82, 0x41, 0x4a, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x2d,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2f, 0x76, 0x6f,
	0x71, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xbc, 0x01, 0x0a, 0x06, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x73, 0x18, 0x87, 0x99, 0xba, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x52,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x56,
	0x6f, 0x71, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x73, 0x42, 0x4d, 0x82, 0x41, 0x4a, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x2d, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2f, 0x76, 0x6f, 0x71,
	0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x73, 0x52, 0x06, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x12, 0xb9, 0x01, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0xbe, 0x81, 0xb0, 0x9a, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x56, 0x6f,
	0x71, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x4c, 0x82, 0x41, 0x49, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x2f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x2d, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2f, 0x76, 0x6f, 0x71, 0x2d, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x8b, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x80, 0x01, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x9d, 0xbb, 0xbe, 0x24, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x52, 0x82, 0x41, 0x4f, 0x2f, 0x71,
	0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2f, 0x76, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x2d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x73, 0x2f, 0x76, 0x6f, 0x71, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x1a, 0xf5, 0x0f, 0x0a, 0x06, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x12, 0xc9,
	0x01, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x93, 0xee, 0x92, 0x26, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x5b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51,
	0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x73, 0x2e, 0x56, 0x6f, 0x71, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4b, 0x65, 0x79, 0x42, 0x53,
	0x82, 0x41, 0x50, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x2f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x2d, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2f, 0x76, 0x6f, 0x71, 0x2d, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2f, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x1a, 0xb3, 0x0c, 0x0a, 0x05, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x12, 0xd7, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0xb4, 0xcd, 0xb5, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5f, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x56, 0x6f, 0x71, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x5a, 0x82, 0x41, 0x57, 0x2f,
	0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2f, 0x76,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x2d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x73, 0x2f, 0x76, 0x6f, 0x71, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xd2,
	0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xcd, 0xed, 0xa7, 0x63, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x5e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51,
	0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x73, 0x2e, 0x56, 0x6f, 0x71, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x59, 0x82, 0x41, 0x56, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x2f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x2d, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2f, 0x76, 0x6f, 0x71, 0x2d,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73,
	0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x1a, 0x99, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x8e,
	0x01, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xd6, 0xff, 0xe7, 0xc3, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5f, 0x82, 0x41, 0x5c, 0x2f, 0x71, 0x6f,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2f, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x2d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x73, 0x2f, 0x76, 0x6f, 0x71, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a,
	0xde, 0x07, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xa4, 0x01, 0x0a, 0x0d, 0x61, 0x76,
	0x67, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x80, 0xba, 0xdb, 0xb0,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x67, 0x82, 0x41, 0x64, 0x2f,
	0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2f, 0x76,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x2d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x73, 0x2f, 0x76, 0x6f, 0x71, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x76, 0x67, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d,
	0x6c, 0x65, 0x6e, 0x52, 0x0b, 0x61, 0x76, 0x67, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4c, 0x65, 0x6e,
	0x12, 0xa2, 0x01, 0x0a, 0x0c, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x70, 0x6b, 0x74,
	0x73, 0x18, 0x8f, 0xea, 0xab, 0x8f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x66, 0x82, 0x41, 0x63, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x2f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x2d, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2f, 0x76, 0x6f, 0x71, 0x2d, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2f,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x72, 0x6f, 0x70,
	0x70, 0x65, 0x64, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x0b, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65,
	0x64, 0x50, 0x6b, 0x74, 0x73, 0x12, 0xa4, 0x01, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0xa6, 0xaa, 0xb5, 0xe9, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x67, 0x82, 0x41, 0x64, 0x2f, 0x71, 0x6f, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2f, 0x76, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x2d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73,
	0x2f, 0x76, 0x6f, 0x71, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x6c, 0x65, 0x6e, 0x52,
	0x0b, 0x6d, 0x61, 0x78, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4c, 0x65, 0x6e, 0x12, 0x8d, 0x01, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xc9, 0xb2, 0xe1, 0xb4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5e, 0x82, 0x41, 0x5b, 0x2f, 0x71, 0x6f, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2f, 0x76, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x2d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73,
	0x2f, 0x76, 0x6f, 0x71, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0xaa, 0x01, 0x0a,
	0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73,
	0x18, 0x95, 0xec, 0xac, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x69,
	0x82, 0x41, 0x66, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x2f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x2d, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2f, 0x76, 0x6f, 0x71, 0x2d, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2f, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d,
	0x69, 0x74, 0x2d, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x6d, 0x69, 0x74, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12, 0xa4, 0x01, 0x0a, 0x0d, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0xa1, 0xf9, 0xe6, 0x7e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x67, 0x82, 0x41, 0x64, 0x2f, 0x71,
	0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2f, 0x76, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x2d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x73, 0x2f, 0x76, 0x6f, 0x71, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x2d, 0x70, 0x6b,
	0x74, 0x73, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x50, 0x6b, 0x74, 0x73,
	0x1a, 0xe8, 0x01, 0x0a, 0x08, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x6c, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x58, 0x82, 0x41, 0x55,
	0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2f,
	0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x2d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x73, 0x2f, 0x76, 0x6f, 0x71, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x6e, 0x0a, 0x05, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x56, 0x6f, 0x71, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x1a, 0x88, 0x01, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x7f, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xe4, 0xfa,
	0xfe, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x51, 0x82,
	0x41, 0x4e, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x2f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x2d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2f, 0x76, 0x6f, 0x71, 0x2d, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x61, 0x6d, 0x65,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0xe4, 0x01, 0x0a, 0x0f, 0x56, 0x6f, 0x71, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x5f, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4b, 0x82, 0x41, 0x48, 0x2f, 0x71, 0x6f,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2f, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x2d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x73, 0x2f, 0x76, 0x6f, 0x71, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x70, 0x0a, 0x0d, 0x76,
	0x6f, 0x71, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x51, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x56,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x73, 0x2e, 0x56, 0x6f, 0x71, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52,
	0x0c, 0x76, 0x6f, 0x71, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x1a, 0x94, 0x06,
	0x0a, 0x0c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x12, 0x86,
	0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xd0, 0xe7, 0x81, 0x37, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x51, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x52, 0x65, 0x66, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x31, 0x82, 0x41,
	0x2e, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x66, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x83, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0xc9, 0xf1, 0xd4, 0xe8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x30, 0x82, 0x41, 0x2d, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x66,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xfa, 0x01,
	0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x73, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0xb8, 0xe2, 0xe4, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3b, 0x82, 0x41, 0x38, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65,
	0x66, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x7b, 0x0a,
	0x0c, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0xf8, 0xef,
	0x9e, 0xc2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3e, 0x82, 0x41,
	0x3b, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x66, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x0c, 0x73, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x1a, 0xf7, 0x01, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x72, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x18, 0xf5, 0xe3, 0xf9, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x3a, 0x82, 0x41, 0x37, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x66, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x09, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x7a, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0xd7, 0xb5, 0xd2, 0xb5, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3d, 0x82, 0x41, 0x3a, 0x2f, 0x71, 0x6f, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d,
	0x72, 0x65, 0x66, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x1a, 0xb4, 0x46, 0x0a, 0x06, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12,
	0x8d, 0x01, 0x0a, 0x0b, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18,
	0xe6, 0x89, 0xee, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x73, 0x42, 0x2f, 0x82, 0x41, 0x2c, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x73, 0x52, 0x0b, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12,
	0x7a, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xfa, 0xb7, 0xd9, 0xac, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x2a, 0x82, 0x41, 0x27, 0x2f, 0x71, 0x6f, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x93, 0x01, 0x0a, 0x0d,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x91, 0x8f,
	0xd3, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66,
	0x42, 0x31, 0x82, 0x41, 0x2e, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d,
	0x72, 0x65, 0x66, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65,
	0x66, 0x12, 0x79, 0x0a, 0x06, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x18, 0xbc, 0xe6, 0xb9, 0x63,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x42, 0x2a, 0x82, 0x41, 0x27, 0x2f, 0x71, 0x6f,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2f, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x73, 0x52, 0x06, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x12, 0xa0, 0x01, 0x0a,
	0x10, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x18, 0xee, 0xde, 0xe7, 0xa4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x34, 0x82, 0x41, 0x31, 0x2f, 0x71, 0x6f,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2f, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x75, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x9c, 0xa6, 0x34, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51,
	0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x29, 0x82, 0x41, 0x26, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xa5, 0x19, 0x0a, 0x0b, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0xa4, 0x01, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x9e, 0xa1, 0xd1, 0x64, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x4b, 0x65, 0x79, 0x42, 0x3a, 0x82, 0x41, 0x37, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x52, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0xf6, 0x14,
	0x0a, 0x0a, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0xa7, 0x01, 0x0a,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xef, 0xf6, 0x97, 0x3e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x49, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x41, 0x82, 0x41, 0x3e,
	0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xa4, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0xe0, 0x83, 0xb5, 0xdd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0xa3, 0x01,
	0x0a, 0x05, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x18, 0xe6, 0xcd, 0x8b, 0x15, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x48, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f,
	0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x52, 0x05, 0x74, 0x65,
	0x72, 0x6d, 0x73, 0x1a, 0x90, 0x03, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x75,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x97, 0xb8, 0xb3, 0xf6, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x71, 0x6f, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2f, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0xae, 0x01, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0xc2,
	0xd2, 0xce, 0xe6, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x71, 0x6f,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x5e, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e,
	0x0a, 0x0a, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x16,
	0x0a, 0x09, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x10, 0x05, 0x1a, 0x07, 0x82,
	0x41, 0x04, 0x49, 0x50, 0x56, 0x34, 0x12, 0x16, 0x0a, 0x09, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x50, 0x56, 0x36, 0x10, 0x07, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x49, 0x50, 0x56, 0x36, 0x12, 0x16,
	0x0a, 0x09, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x10, 0x08, 0x1a, 0x07, 0x82,
	0x41, 0x04, 0x4d, 0x50, 0x4c, 0x53, 0x1a, 0x8a, 0x03, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x73, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xaa, 0xe6, 0xe7, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x71, 0x6f,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0xab, 0x01, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0xd7,
	0xf9, 0xb5, 0x75, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73,
	0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x71, 0x6f, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0x5e, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x09, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x10, 0x05, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x49,
	0x50, 0x56, 0x34, 0x12, 0x16, 0x0a, 0x09, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x36,
	0x10, 0x07, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x49, 0x50, 0x56, 0x36, 0x12, 0x16, 0x0a, 0x09, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x10, 0x08, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x4d,
	0x50, 0x4c, 0x53, 0x1a, 0xd0, 0x0a, 0x0a, 0x05, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x12, 0xaf, 0x01,
	0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0xaf, 0xe1, 0x87, 0xcf, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x50, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x4b,
	0x65, 0x79, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x74,
	0x65, 0x72, 0x6d, 0x73, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x1a,
	0xcb, 0x07, 0x0a, 0x04, 0x54, 0x65, 0x72, 0x6d, 0x12, 0xbe, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x90, 0xe6, 0xc7, 0xcc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x54, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x4c, 0x82, 0x41, 0x49, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f,
	0x74, 0x65, 0x72, 0x6d, 0x73, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xb9, 0x01, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x89, 0xb4, 0xab, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x2e, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x4b, 0x82, 0x41, 0x48, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x74, 0x65,
	0x72, 0x6d, 0x73, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x84, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x7a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0xc8, 0x88, 0xb0, 0xdf, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x71, 0x6f, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2f, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x1a, 0xbe, 0x03, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x79, 0x0a, 0x02, 0x69, 0x64, 0x18, 0xdb, 0x90, 0xdd,
	0xa4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4e, 0x82,
	0x41, 0x4b, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x2f,
	0x74, 0x65, 0x72, 0x6d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x9a, 0x01, 0x0a, 0x0e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x6f, 0x63,
	0x74, 0x65, 0x74, 0x73, 0x18, 0xe1, 0xbc, 0xe0, 0xf6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x5a, 0x82, 0x41, 0x57, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f,
	0x74, 0x65, 0x72, 0x6d, 0x73, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x2d, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x52,
	0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12, 0x9c,
	0x01, 0x0a, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x18, 0xbc, 0xea, 0xab, 0x54, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x5b, 0x82, 0x41, 0x58, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x74, 0x65, 0x72,
	0x6d, 0x73, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x64, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x0e, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x1a, 0xc6, 0x01,
	0x0a, 0x07, 0x54, 0x65, 0x72, 0x6d, 0x4b, 0x65, 0x79, 0x12, 0x58, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x48, 0x82, 0x41, 0x45, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x2f, 0x69, 0x64, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x61, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x4d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51,
	0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x2e, 0x54, 0x65, 0x72, 0x6d,
	0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x1a, 0xf5, 0x02, 0x0a, 0x0d, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x9f, 0x01, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73,
	0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f,
	0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x62, 0x0a, 0x0a, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x5e,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x09, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x50, 0x56, 0x34, 0x10, 0x05, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x49, 0x50, 0x56, 0x34, 0x12, 0x16,
	0x0a, 0x09, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x10, 0x07, 0x1a, 0x07, 0x82,
	0x41, 0x04, 0x49, 0x50, 0x56, 0x36, 0x12, 0x16, 0x0a, 0x09, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d,
	0x50, 0x4c, 0x53, 0x10, 0x08, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x4d, 0x50, 0x4c, 0x53, 0x1a, 0x08,
	0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0xcf, 0x06, 0x0a, 0x0c, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x12, 0x95, 0x01, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0xb6, 0xe8, 0xcf, 0xc4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x38, 0x82, 0x41, 0x35, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x72,
	0x65, 0x66, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x90, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xe3, 0xee, 0x96, 0x6c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x37, 0x82, 0x41, 0x34, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x66, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x1a, 0x89, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x7b, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0xa2, 0xe7, 0xc4,
	0xa7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x42, 0x82,
	0x41, 0x3f, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x66,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x81, 0x01, 0x0a,
	0x0c, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0xfe, 0xef,
	0xef, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x45, 0x82, 0x41, 0x42,
	0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x66, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x1a, 0x87, 0x02, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x7a, 0x0a, 0x09, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x83, 0x81, 0x88, 0x89, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f, 0x71, 0x6f,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x66, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0xd1, 0xff, 0xd1, 0xc7, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x71, 0x6f, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x66, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x0c, 0x73, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x1a, 0xf0, 0x0b, 0x0a, 0x06, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x73, 0x12, 0x87, 0x01, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18,
	0xe4, 0x82, 0x86, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x4b, 0x65, 0x79, 0x42, 0x30, 0x82, 0x41, 0x2d, 0x2f, 0x71, 0x6f, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2f, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x1a,
	0xb3, 0x09, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x94, 0x01, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x89, 0xbf, 0x98, 0xea, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x37, 0x82, 0x41, 0x34, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x8f, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xde, 0xb5, 0xb5, 0x3a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2f,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x1a, 0x74, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6a, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0xbd, 0xae, 0x86, 0x47, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x3c, 0x82, 0x41, 0x39, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73,
	0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6e, 0x61,
	0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x8a, 0x06, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x0d, 0x61, 0x76, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x9b, 0x8a, 0x9f, 0xed, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2f,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x76, 0x67, 0x2d,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x6c, 0x65, 0x6e, 0x52, 0x0b, 0x61, 0x76, 0x67, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x4c, 0x65, 0x6e, 0x12, 0x7f, 0x0a, 0x0c, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65,
	0x64, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0xa2, 0xe1, 0xdf, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x43, 0x82, 0x41, 0x40, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x73, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x72,
	0x6f, 0x70, 0x70, 0x65, 0x64, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x0b, 0x64, 0x72, 0x6f, 0x70,
	0x70, 0x65, 0x64, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x81, 0x01, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x91, 0xbd, 0x8e, 0xf3, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x71, 0x6f,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2f, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x6c, 0x65, 0x6e, 0x52, 0x0b,
	0x6d, 0x61, 0x78, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4c, 0x65, 0x6e, 0x12, 0x6a, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x84, 0xcf, 0x9f, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x3b, 0x82, 0x41, 0x38, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73,
	0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x61, 0x6d,
	0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x6d, 0x69, 0x74, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0xde, 0x9e, 0xfc, 0x37,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x71,
	0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2f, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x2d, 0x6f, 0x63, 0x74, 0x65, 0x74,
	0x73, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x4f, 0x63, 0x74, 0x65, 0x74,
	0x73, 0x12, 0x81, 0x01, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x5f, 0x70,
	0x6b, 0x74, 0x73, 0x18, 0xc6, 0x9b, 0xca, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2f, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d,
	0x69, 0x74, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69,
	0x74, 0x50, 0x6b, 0x74, 0x73, 0x1a, 0xa5, 0x01, 0x0a, 0x08, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4b,
	0x65, 0x79, 0x12, 0x49, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2f, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a,
	0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73,
	0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x1a, 0xf2, 0x13,
	0x0a, 0x0f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x9b, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x9f, 0xe0, 0xf3,
	0xf1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x3b, 0x82, 0x41, 0x38, 0x2f,
	0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0xab, 0x01, 0x0a, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x18, 0xb7,
	0xef, 0xb8, 0x8f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73,
	0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x73, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x97, 0x01,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xd0, 0xf9, 0xbb, 0xc9, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x41, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51,
	0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x3a, 0x82, 0x41, 0x37, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x78, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x6e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xe7, 0x86, 0xa4, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x71,
	0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x1a, 0x86, 0x0e, 0x0a, 0x0a, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73,
	0x12, 0xbf, 0x01, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x18, 0xc9,
	0xb0, 0xcd, 0x63, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x42, 0x49, 0x82, 0x41,
	0x46, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x1a, 0xc4, 0x0a, 0x0a, 0x09, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x12, 0xc1, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xab, 0xf0, 0xef, 0xa7, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x4f, 0x82, 0x41,
	0x4c, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x1a, 0xf2, 0x08, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xa6,
	0x01, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x63,
	0x74, 0x65, 0x74, 0x73, 0x18, 0xa5, 0xef, 0xe2, 0x5a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x61, 0x82, 0x41, 0x5e, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x2d, 0x6f,
	0x63, 0x74, 0x65, 0x74, 0x73, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x69, 0x6e,
	0x67, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12, 0xa1, 0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0xb1, 0xe4, 0xc3, 0xb7,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5f, 0x82, 0x41, 0x5c, 0x2f,
	0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x0e, 0x63, 0x6f, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x50, 0x6b, 0x74, 0x73, 0x12, 0xa3, 0x01, 0x0a, 0x10,
	0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73,
	0x18, 0x8f, 0xf0, 0xfa, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x60,
	0x82, 0x41, 0x5d, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73,
	0x52, 0x0f, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x4f, 0x63, 0x74, 0x65, 0x74,
	0x73, 0x12, 0x9d, 0x01, 0x0a, 0x0e, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x70, 0x6b, 0x74, 0x73, 0x18, 0xcf, 0xf5, 0x9a, 0x53, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x5e, 0x82, 0x41, 0x5b, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6b,
	0x74, 0x73, 0x52, 0x0d, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6b, 0x74,
	0x73, 0x12, 0x8d, 0x01, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0xc1,
	0xc4, 0xe3, 0xb4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x58, 0x82,
	0x41, 0x55, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0xa4, 0x01, 0x0a, 0x10, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0x8e, 0x81, 0xb1, 0x9f, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x60, 0x82, 0x41, 0x5d, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x2d, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x52, 0x0f, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12, 0x9e, 0x01, 0x0a, 0x0e, 0x76, 0x69, 0x6f,
	0x6c, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0xb6, 0xab, 0xba, 0xb5,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5e, 0x82, 0x41, 0x5b, 0x2f,
	0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x69, 0x6f, 0x6c,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x0d, 0x76, 0x69, 0x6f, 0x6c,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6b, 0x74, 0x73, 0x1a, 0xee, 0x01, 0x0a, 0x0c, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x6e, 0x0a, 0x08, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x52, 0x82, 0x41,
	0x4f, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x6e, 0x0a, 0x09, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x52,
	0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x1a, 0x76, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x6d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xfa, 0xe7, 0xda, 0x3e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3f, 0x82, 0x41, 0x3c,
	0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x1a, 0x07, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x75, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x6c, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x89, 0xb6, 0xf0, 0x52, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x2f, 0x82, 0x41, 0x2c, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2d, 0x69, 0x64, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x49, 0x64, 0x1a, 0xa0, 0x01, 0x0a, 0x0c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x4b, 0x65, 0x79, 0x12, 0x4c, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0x82, 0x41, 0x26, 0x2f, 0x71,
	0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2d, 0x69, 0x64, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x42, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x1a, 0xf0, 0x0d, 0x0a, 0x06, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73,
	0x12, 0x4e, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0xfb, 0xb7, 0xc1, 0x33, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x4b, 0x65, 0x79, 0x42, 0x14, 0x82, 0x41, 0x11, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x1a, 0xa6, 0x0c, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x5b, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0xac, 0x92, 0xed, 0x52, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x1b, 0x82, 0x41, 0x18, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4f, 0x0a, 0x03, 0x72, 0x65, 0x64, 0x18, 0x93,
	0xb7, 0xb6, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x52, 0x65, 0x64, 0x42, 0x18, 0x82, 0x41, 0x15, 0x2f, 0x71,
	0x6f, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2f,
	0x72, 0x65, 0x64, 0x52, 0x03, 0x72, 0x65, 0x64, 0x12, 0x57, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0xa5, 0x8a, 0xf2, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x1a,
	0x82, 0x41, 0x17, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2f, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x54, 0x0a, 0x04, 0x77, 0x72, 0x65, 0x64, 0x18, 0xda, 0x9e, 0x89, 0x88, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x2e, 0x57, 0x72, 0x65, 0x64, 0x42, 0x19, 0x82, 0x41, 0x16, 0x2f, 0x71, 0x6f, 0x73, 0x2f,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2f, 0x77, 0x72, 0x65,
	0x64, 0x52, 0x04, 0x77, 0x72, 0x65, 0x64, 0x1a, 0xcf, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x4e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xee, 0xd8, 0xb8, 0x40, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x20, 0x82, 0x41, 0x1d, 0x2f,
	0x71, 0x6f, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x75, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0xd9, 0xcf, 0xe8, 0xa7, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x51, 0x6f, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x51, 0x4f, 0x53, 0x51, 0x55, 0x45,
	0x55, 0x45, 0x54, 0x59, 0x50, 0x45, 0x42, 0x26, 0x82, 0x41, 0x23, 0x2f, 0x71, 0x6f, 0x73, 0x2f,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x1a, 0xb7, 0x04, 0x0a, 0x03, 0x52, 0x65,
	0x64, 0x12, 0x64, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xb4, 0xe0, 0x8d, 0xfd,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x2e, 0x52, 0x65, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x1f,
	0x82, 0x41, 0x1c, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2f, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x2f, 0x72, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x60, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0xcd, 0xee, 0x9e, 0xd3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x52, 0x65, 0x64, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x1e, 0x82, 0x41, 0x1b, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2f, 0x72, 0x65, 0x64, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xb3, 0x01, 0x0a, 0x06, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x53, 0x0a, 0x05, 0x6d, 0x61, 0x78, 0x74, 0x68, 0x18, 0xa3, 0xc0,
	0x89, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x25, 0x82, 0x41, 0x22,
	0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x2f, 0x72, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x61, 0x78,
	0x74, 0x68, 0x52, 0x05, 0x6d, 0x61, 0x78, 0x74, 0x68, 0x12, 0x54, 0x0a, 0x05, 0x6d, 0x69, 0x6e,
	0x74, 0x68, 0x18, 0x9d, 0xb7, 0xf1, 0x8f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x25, 0x82, 0x41, 0x22, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x73, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2f, 0x72, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x6d, 0x69, 0x6e, 0x74, 0x68, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x74, 0x68, 0x1a,
	0xb1, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x53, 0x0a, 0x05, 0x6d, 0x61, 0x78,
	0x74, 0x68, 0x18, 0xfe, 0xbe, 0x97, 0xee, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x24, 0x82, 0x41, 0x21, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x73, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2f, 0x72, 0x65, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x6d, 0x61, 0x78, 0x74, 0x68, 0x52, 0x05, 0x6d, 0x61, 0x78, 0x74, 0x68, 0x12, 0x53,
	0x0a, 0x05, 0x6d, 0x69, 0x6e, 0x74, 0x68, 0x18, 0xd8, 0xfa, 0x8e, 0x97, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x24, 0x82, 0x41, 0x21, 0x2f, 0x71, 0x6f, 0x73, 0x2f,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2f, 0x72, 0x65, 0x64,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x69, 0x6e, 0x74, 0x68, 0x52, 0x05, 0x6d, 0x69,
	0x6e, 0x74, 0x68, 0x1a, 0xcd, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4e, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xe1, 0x9a, 0xce, 0xd8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1f, 0x82, 0x41, 0x1c, 0x2f, 0x71, 0x6f, 0x73, 0x2f,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x74, 0x0a,
	0x0a, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0xe2, 0xc2, 0x94, 0xba,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x51, 0x6f, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x51, 0x4f, 0x53, 0x51, 0x55, 0x45, 0x55, 0x45, 0x54, 0x59, 0x50,
	0x45, 0x42, 0x25, 0x82, 0x41, 0x22, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x73, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x09, 0x71, 0x75, 0x65, 0x75, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x1a, 0xe3, 0x01, 0x0a, 0x04, 0x57, 0x72, 0x65, 0x64, 0x12, 0x65, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xcb, 0x9e, 0xda, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73,
	0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x57, 0x72,
	0x65, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x20, 0x82, 0x41, 0x1d, 0x2f, 0x71,
	0x6f, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2f,
	0x77, 0x72, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x61, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x8c, 0x9b, 0x98,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x2e, 0x57, 0x72, 0x65, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x1f,
	0x82, 0x41, 0x1c, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2f, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x2f, 0x77, 0x72, 0x65, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x08, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x1a, 0x07, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x6d, 0x0a, 0x08, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x19, 0x82, 0x41, 0x16, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x1a, 0x84, 0xbd, 0x01, 0x0a, 0x11, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12,
	0x90, 0x01, 0x0a, 0x10, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x18, 0x92, 0xfd, 0xbc, 0xc9, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x4b, 0x65, 0x79, 0x42, 0x2b, 0x82, 0x41, 0x28, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x1a, 0x9f, 0xba, 0x01, 0x0a, 0x0f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x88, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0xd3, 0x83, 0xa8, 0xfa, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x32, 0x82, 0x41, 0x2f, 0x2f, 0x71, 0x6f, 0x73, 0x2f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x98, 0x01, 0x0a, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x73, 0x18, 0xc3, 0xfe, 0x8f, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x71,
	0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x73, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x83, 0x01,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xb4, 0xe9, 0xb6, 0x73, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x31, 0x82, 0x41, 0x2e, 0x2f, 0x71,
	0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x1a, 0x6f, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x65, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x83, 0x9b, 0xa6, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x37, 0x82, 0x41, 0x34, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x1a, 0xff, 0xb4, 0x01, 0x0a, 0x0a, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x73, 0x12, 0xad, 0x01, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x18, 0x95, 0x88, 0xf2, 0xeb, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x71, 0x6f, 0x73,
	0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x1a, 0xe1, 0xb1, 0x01, 0x0a, 0x09, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x12, 0xb1, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xba,
	0x80, 0x9b, 0x70, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x47, 0x82, 0x41, 0x44, 0x2f, 0x71, 0x6f, 0x73, 0x2f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xb1, 0x01, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x73, 0x18, 0xb7, 0x9a, 0xce, 0x48, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x42, 0x47, 0x82, 0x41, 0x44, 0x2f,
	0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0xdc, 0x01, 0x0a, 0x12,
	0x6f, 0x6e, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x77, 0x6f, 0x5f, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0xb4, 0xaa, 0xbe, 0xef, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x2e, 0x4f, 0x6e, 0x65, 0x52, 0x61, 0x74, 0x65, 0x54, 0x77, 0x6f, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x42, 0x53, 0x82, 0x41, 0x50, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x6f, 0x6e, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d,
	0x74, 0x77, 0x6f, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x0f, 0x6f, 0x6e, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x54, 0x77, 0x6f, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0xb1, 0x01, 0x0a, 0x06, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x9f, 0xa6, 0x85, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x47, 0x82,
	0x41, 0x44, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0xad,
	0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xd7, 0xfe, 0x88, 0x71, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x4c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51,
	0x6f, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42,
	0x46, 0x82, 0x41, 0x43, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0xe3,
	0x01, 0x0a, 0x14, 0x74, 0x77, 0x6f, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65,
	0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x94, 0x9a, 0xe5, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x58, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x54, 0x77, 0x6f, 0x52, 0x61, 0x74, 0x65,
	0x54, 0x68, 0x72, 0x65, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x42, 0x55, 0x82, 0x41, 0x52, 0x2f,
	0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x74, 0x77, 0x6f,
	0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x65, 0x2d, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x52, 0x11, 0x74, 0x77, 0x6f, 0x52, 0x61, 0x74, 0x65, 0x54, 0x68, 0x72, 0x65, 0x65, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x1a, 0xaf, 0x04, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0xc7, 0x01, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0xb9, 0xde, 0xa9,
	0x37, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x56, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x42, 0x50, 0x82,
	0x41, 0x4d, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52,
	0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x84, 0x01, 0x0a, 0x08, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0xd6, 0xa6, 0xa9, 0x5a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x50, 0x82, 0x41, 0x4d, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x93, 0x01, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0xa9, 0xe8, 0x88, 0x3c, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x51, 0x6f, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x51, 0x4f, 0x53, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x52, 0x54, 0x59,
	0x50, 0x45, 0x42, 0x4c, 0x82, 0x41, 0x49, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3e, 0x0a, 0x08, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x55,
	0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x0f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x10, 0x01, 0x1a, 0x09, 0x82, 0x41, 0x06,
	0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x1a, 0x9b, 0x13, 0x0a, 0x06, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x12, 0xbe, 0x01, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x86, 0x8e, 0x92, 0x6b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x42, 0x4d, 0x82, 0x41,
	0x4a, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x1a, 0xf5, 0x0f, 0x0a, 0x05, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0xcc, 0x01, 0x0a,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x87, 0xd8, 0x86, 0xad, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x5a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51,
	0x6f, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x54, 0x82,
	0x41, 0x51, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xc8, 0x01, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xf8, 0x86, 0x85, 0x93, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x59, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73,
	0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x53, 0x82, 0x41, 0x50, 0x2f,
	0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xab, 0x06, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x82, 0x01, 0x0a, 0x02, 0x69, 0x64, 0x18, 0xb1, 0x90, 0xb2, 0xca, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x57, 0x82, 0x41, 0x54, 0x2f, 0x71,
	0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x73, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0xe8, 0x01, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0xb7, 0xec, 0x8b, 0x9a, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x64, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73,
	0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x5f, 0x82, 0x41, 0x5c, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x2f, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x8b, 0x01, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x93, 0xb5, 0x8b, 0xd3,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5a, 0x82, 0x41,
	0x57, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12,
	0x8c, 0x01, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0xa2, 0xa2, 0xf7, 0xbc, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5b, 0x82, 0x41, 0x58, 0x2f, 0x71,
	0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x73, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x93,
	0x01, 0x0a, 0x09, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f,
	0x49, 0x4e, 0x50, 0x55, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10,
	0x00, 0x12, 0x1d, 0x0a, 0x0f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x51,
	0x55, 0x45, 0x55, 0x45, 0x10, 0x01, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x51, 0x55, 0x45, 0x55, 0x45,
	0x12, 0x27, 0x0a, 0x14, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e,
	0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x02, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x49,
	0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x12, 0x29, 0x0a, 0x15, 0x49, 0x4e, 0x50,
	0x55, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49,
	0x4c, 0x45, 0x10, 0x03, 0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x4f, 0x55, 0x54, 0x5f, 0x50, 0x52, 0x4f,
	0x46, 0x49, 0x4c, 0x45, 0x1a, 0xa3, 0x06, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x81,
	0x01, 0x0a, 0x02, 0x69, 0x64, 0x18, 0xa0, 0xfa, 0xa6, 0x99, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x56, 0x82, 0x41, 0x53, 0x2f, 0x71, 0x6f, 0x73, 0x2f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x2f,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x64, 0x52, 0x02,
	0x69, 0x64, 0x12, 0xe5, 0x01, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0xc6, 0xe8, 0xd1, 0x79, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x63, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x5e, 0x82, 0x41, 0x5b, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x05, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x18, 0xe8, 0xd3, 0xab, 0x88, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x59, 0x82, 0x41, 0x56, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x2f, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x83, 0xfb, 0xce, 0x43, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x5a, 0x82, 0x41, 0x57, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x06, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x22, 0x93, 0x01, 0x0a, 0x09, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x0f, 0x49, 0x4e, 0x50, 0x55, 0x54,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x10, 0x01, 0x1a, 0x08, 0x82, 0x41,
	0x05, 0x51, 0x55, 0x45, 0x55, 0x45, 0x12, 0x27, 0x0a, 0x14, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x02,
	0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x12,
	0x29, 0x0a, 0x15, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x55, 0x54,
	0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x03, 0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x4f,
	0x55, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x1a, 0xd7, 0x01, 0x0a, 0x08, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x60, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x50, 0x82, 0x41, 0x4d, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x2f, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x2f, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x69, 0x0a, 0x05, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x1a, 0xd5, 0x37, 0x0a, 0x0f, 0x4f, 0x6e, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x54, 0x77, 0x6f, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0xd5, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0xb9, 0xae, 0xe3, 0xe1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5d, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x4f, 0x6e, 0x65, 0x52, 0x61, 0x74, 0x65, 0x54, 0x77, 0x6f,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x5a, 0x82, 0x41,
	0x57, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x6f,
	0x6e, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x74, 0x77, 0x6f, 0x2d, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0xf2, 0x01, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0xce, 0x95, 0xf3, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x64, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x2e, 0x4f, 0x6e, 0x65, 0x52, 0x61, 0x74, 0x65, 0x54, 0x77, 0x6f, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x62, 0x82, 0x41, 0x5f, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x2f, 0x6f, 0x6e, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x74, 0x77,
	0x6f, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x2d,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xef, 0x01, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xb2, 0x89, 0xe4, 0x8d, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x63, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51,
	0x6f, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x4f, 0x6e, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x54, 0x77, 0x6f, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x82, 0x41, 0x5e, 0x2f, 0x71, 0x6f, 0x73, 0x2f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x6f, 0x6e, 0x65, 0x2d, 0x72, 0x61, 0x74,
	0x65, 0x2d, 0x74, 0x77, 0x6f, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2f, 0x65, 0x78, 0x63, 0x65,
	0x65, 0x64, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x65, 0x65,
	0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xd1, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x8e, 0xd9, 0xd2, 0xd0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5c, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x2e, 0x4f, 0x6e, 0x65, 0x52, 0x61, 0x74, 0x65, 0x54, 0x77, 0x6f, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x59, 0x82, 0x41, 0x56, 0x2f, 0x71,
	0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x6f, 0x6e, 0x65, 0x2d,
	0x72, 0x61, 0x74, 0x65, 0x2d, 0x74, 0x77, 0x6f, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xf2, 0x0a, 0x0a, 0x06,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x85, 0x01, 0x0a, 0x02, 0x62, 0x63, 0x18, 0xd9, 0xdd,
	0xe2, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5d, 0x82, 0x41, 0x5a,
	0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x6f, 0x6e,
	0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x74, 0x77, 0x6f, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x62, 0x63, 0x52, 0x02, 0x62, 0x63, 0x12, 0x89,
	0x01, 0x0a, 0x03, 0x63, 0x69, 0x72, 0x18, 0xde, 0x91, 0xf5, 0xeb, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5e, 0x82, 0x41, 0x5b, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x6f, 0x6e, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65,
	0x2d, 0x74, 0x77, 0x6f, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x63, 0x69, 0x72, 0x52, 0x03, 0x63, 0x69, 0x72, 0x12, 0x94, 0x01, 0x0a, 0x07, 0x63,
	0x69, 0x72, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x80, 0xe0, 0xa0, 0x96, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x62, 0x82, 0x41, 0x5f, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x6f, 0x6e, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65,
	0x2d, 0x74, 0x77, 0x6f, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x63, 0x69, 0x72, 0x2d, 0x70, 0x63, 0x74, 0x52, 0x06, 0x63, 0x69, 0x72, 0x50, 0x63,
	0x74, 0x12, 0xb0, 0x01, 0x0a, 0x11, 0x63, 0x69, 0x72, 0x5f, 0x70, 0x63, 0x74, 0x5f, 0x72, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0xcb, 0x9d, 0xd6, 0x62, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6c, 0x82, 0x41, 0x69, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x6f, 0x6e, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65,
	0x2d, 0x74, 0x77, 0x6f, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x63, 0x69, 0x72, 0x2d, 0x70, 0x63, 0x74, 0x2d, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x52, 0x0f, 0x63, 0x69, 0x72, 0x50, 0x63, 0x74, 0x52, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x12, 0xbc, 0x01, 0x0a, 0x15, 0x6d, 0x61, 0x78, 0x5f, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x9e,
	0xf1, 0x90, 0x85, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x70, 0x82,
	0x41, 0x6d, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f,
	0x6f, 0x6e, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x74, 0x77, 0x6f, 0x2d, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x2d, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x52,
	0x12, 0x6d, 0x61, 0x78, 0x51, 0x75, 0x65, 0x75, 0x65, 0x44, 0x65, 0x70, 0x74, 0x68, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x12, 0xc1, 0x01, 0x0a, 0x17, 0x6d, 0x61, 0x78, 0x5f, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18,
	0xd8, 0xb9, 0x9e, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x72, 0x82,
	0x41, 0x6f, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f,
	0x6f, 0x6e, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x74, 0x77, 0x6f, 0x2d, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x2d, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x51, 0x75, 0x65, 0x75, 0x65, 0x44, 0x65, 0x70, 0x74, 0x68,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0xc2, 0x01, 0x0a, 0x17, 0x6d, 0x61, 0x78, 0x5f,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x5f, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x18, 0xec, 0xaf, 0xcf, 0xde, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x72, 0x82, 0x41, 0x6f, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x2f, 0x6f, 0x6e, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x74, 0x77,
	0x6f, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d,
	0x61, 0x78, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2d, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x44, 0x65, 0x70, 0x74, 0x68, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0xc1, 0x01, 0x0a,
	0x10, 0x71, 0x75, 0x65, 0x75, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x18, 0xdf, 0xae, 0xa7, 0x25, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x51, 0x6f, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x42, 0x6b, 0x82, 0x41, 0x68, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x2f, 0x6f, 0x6e, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x74, 0x77,
	0x6f, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x71,
	0x75, 0x65, 0x75, 0x69, 0x6e, 0x67, 0x2d, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x52,
	0x0f, 0x71, 0x75, 0x65, 0x75, 0x69, 0x6e, 0x67, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	0x1a, 0x90, 0x0c, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0xf1, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xff, 0xa0,
	0xc0, 0x7d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x4f,
	0x6e, 0x65, 0x52, 0x61, 0x74, 0x65, 0x54, 0x77, 0x6f, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x69, 0x82, 0x41, 0x66, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x6f, 0x6e, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x74,
	0x77, 0x6f, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xee, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0xb0, 0xd5, 0xdf, 0xe8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6a, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x2e, 0x4f, 0x6e, 0x65, 0x52, 0x61, 0x74, 0x65, 0x54, 0x77, 0x6f, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x68, 0x82, 0x41, 0x65, 0x2f, 0x71, 0x6f, 0x73, 0x2f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x6f, 0x6e, 0x65, 0x2d, 0x72, 0x61, 0x74,
	0x65, 0x2d, 0x74, 0x77, 0x6f, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x8e, 0x04, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0xa9, 0x01, 0x0a, 0x09, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x6f, 0x74, 0x31, 0x70,
	0x18, 0x8f, 0x82, 0xf6, 0xa5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x73, 0x82, 0x41, 0x70, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x2f, 0x6f, 0x6e, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x74, 0x77, 0x6f, 0x2d, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x64,
	0x6f, 0x74, 0x31, 0x70, 0x52, 0x08, 0x73, 0x65, 0x74, 0x44, 0x6f, 0x74, 0x31, 0x70, 0x12, 0xa6,
	0x01, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x18, 0xad, 0xf1, 0xd5, 0x82,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x72, 0x82, 0x41, 0x6f, 0x2f,
	0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x6f, 0x6e, 0x65,
	0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x74, 0x77, 0x6f, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x64, 0x73, 0x63, 0x70, 0x52, 0x07,
	0x73, 0x65, 0x74, 0x44, 0x73, 0x63, 0x70, 0x12, 0xae, 0x01, 0x0a, 0x0b, 0x73, 0x65, 0x74, 0x5f,
	0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x63, 0x18, 0xb3, 0xc9, 0x8d, 0xc2, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x75, 0x82, 0x41, 0x72, 0x2f, 0x71, 0x6f, 0x73, 0x2f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x6f, 0x6e, 0x65, 0x2d, 0x72, 0x61, 0x74,
	0x65, 0x2d, 0x74, 0x77, 0x6f, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x6d, 0x70, 0x6c, 0x73, 0x2d, 0x74, 0x63, 0x52, 0x09, 0x73,
	0x65, 0x74, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x63, 0x1a, 0x88, 0x04, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0xa8, 0x01, 0x0a, 0x09, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x6f, 0x74, 0x31, 0x70,
	0x18, 0xf8, 0x8a, 0xd7, 0xb5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x72, 0x82, 0x41, 0x6f, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x2f, 0x6f, 0x6e, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x74, 0x77, 0x6f, 0x2d, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x64, 0x6f,
	0x74, 0x31, 0x70, 0x52, 0x08, 0x73, 0x65, 0x74, 0x44, 0x6f, 0x74, 0x31, 0x70, 0x12, 0xa4, 0x01,
	0x0a, 0x08, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x18, 0xe0, 0xab, 0xfd, 0x4f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x71, 0x82, 0x41, 0x6e, 0x2f, 0x71, 0x6f,
	0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73,
	0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x6f, 0x6e, 0x65, 0x2d, 0x72,
	0x61, 0x74, 0x65, 0x2d, 0x74, 0x77, 0x6f, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x64, 0x73, 0x63, 0x70, 0x52, 0x07, 0x73, 0x65, 0x74,
	0x44, 0x73, 0x63, 0x70, 0x12, 0xac, 0x01, 0x0a, 0x0b, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x70, 0x6c,
	0x73, 0x5f, 0x74, 0x63, 0x18, 0xac, 0xf0, 0xf4, 0x61, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x74, 0x82, 0x41, 0x71, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x2f, 0x6f, 0x6e, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x74, 0x77,
	0x6f, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x2d,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x65, 0x74,
	0x2d, 0x6d, 0x70, 0x6c, 0x73, 0x2d, 0x74, 0x63, 0x52, 0x09, 0x73, 0x65, 0x74, 0x4d, 0x70, 0x6c,
	0x73, 0x54, 0x63, 0x1a, 0xbb, 0x0e, 0x0a, 0x0c, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0xf0, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0xf3, 0xf1, 0x82, 0x9f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6a, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x2e, 0x4f, 0x6e, 0x65, 0x52, 0x61, 0x74, 0x65, 0x54, 0x77, 0x6f, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x2e, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x68, 0x82, 0x41, 0x65, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x6f, 0x6e, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65,
	0x2d, 0x74, 0x77, 0x6f, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2f, 0x65, 0x78, 0x63, 0x65, 0x65,
	0x64, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xec, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0xd4, 0xf6, 0xd0, 0xac, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x69, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x2e, 0x4f, 0x6e, 0x65, 0x52, 0x61, 0x74, 0x65, 0x54, 0x77, 0x6f, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x2e, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x67, 0x82, 0x41, 0x64, 0x2f, 0x71, 0x6f, 0x73, 0x2f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x6f, 0x6e, 0x65, 0x2d, 0x72, 0x61, 0x74,
	0x65, 0x2d, 0x74, 0x77, 0x6f, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2f, 0x65, 0x78, 0x63, 0x65,
	0x65, 0x64, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xa5, 0x05, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x99, 0x01, 0x0a, 0x04, 0x64, 0x72, 0x6f, 0x70, 0x18, 0xdd, 0x9a, 0xd5, 0x3e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6d, 0x82, 0x41, 0x6a, 0x2f, 0x71, 0x6f,
	0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73,
	0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x6f, 0x6e, 0x65, 0x2d, 0x72,
	0x61, 0x74, 0x65, 0x2d, 0x74, 0x77, 0x6f, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2f, 0x65, 0x78,
	0x63, 0x65, 0x65, 0x64, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x64, 0x72, 0x6f, 0x70, 0x52, 0x04, 0x64, 0x72, 0x6f, 0x70, 0x12, 0xa8, 0x01,
	0x0a, 0x09, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x6f, 0x74, 0x31, 0x70, 0x18, 0xbb, 0xf3, 0xf2, 0xcd,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x72, 0x82, 0x41, 0x6f, 0x2f,
	0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x6f, 0x6e, 0x65,
	0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x74, 0x77, 0x6f, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2f,
	0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x64, 0x6f, 0x74, 0x31, 0x70, 0x52, 0x08,
	0x73, 0x65, 0x74, 0x44, 0x6f, 0x74, 0x31, 0x70, 0x12, 0xa4, 0x01, 0x0a, 0x08, 0x73, 0x65, 0x74,
	0x5f, 0x64, 0x73, 0x63, 0x70, 0x18, 0x91, 0xd8, 0xd1, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x71, 0x82, 0x41, 0x6e, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x6f, 0x6e, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x74,
	0x77, 0x6f, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2f, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x2d,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x65,
	0x74, 0x2d, 0x64, 0x73, 0x63, 0x70, 0x52, 0x07, 0x73, 0x65, 0x74, 0x44, 0x73, 0x63, 0x70, 0x12,
	0xac, 0x01, 0x0a, 0x0b, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x63, 0x18,
	0xd7, 0xe0, 0xe0, 0x4a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x74, 0x82,
	0x41, 0x71, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f,
	0x6f, 0x6e, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x74, 0x77, 0x6f, 0x2d, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x2f, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x6d, 0x70, 0x6c, 0x73,
	0x2d, 0x74, 0x63, 0x52, 0x09, 0x73, 0x65, 0x74, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x63, 0x1a, 0xa0,
	0x05, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x98, 0x01, 0x0a, 0x04, 0x64, 0x72, 0x6f,
	0x70, 0x18, 0xe0, 0xcf, 0xc0, 0x50, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x6c, 0x82, 0x41, 0x69, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x2f, 0x6f, 0x6e, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x74, 0x77, 0x6f, 0x2d, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x2f, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x2d, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x72, 0x6f, 0x70, 0x52, 0x04, 0x64,
	0x72, 0x6f, 0x70, 0x12, 0xa6, 0x01, 0x0a, 0x09, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x6f, 0x74, 0x31,
	0x70, 0x18, 0x94, 0xcd, 0x94, 0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x71, 0x82, 0x41, 0x6e, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x2f, 0x6f, 0x6e, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x74, 0x77, 0x6f, 0x2d, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x2f, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x2d, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x64, 0x6f, 0x74,
	0x31, 0x70, 0x52, 0x08, 0x73, 0x65, 0x74, 0x44, 0x6f, 0x74, 0x31, 0x70, 0x12, 0xa4, 0x01, 0x0a,
	0x08, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x18, 0xc4, 0xb4, 0xc6, 0xee, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x70, 0x82, 0x41, 0x6d, 0x2f, 0x71, 0x6f,
	0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73,
	0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x6f, 0x6e, 0x65, 0x2d, 0x72,
	0x61, 0x74, 0x65, 0x2d, 0x74, 0x77, 0x6f, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2f, 0x65, 0x78,
	0x63, 0x65, 0x65, 0x64, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x64, 0x73, 0x63, 0x70, 0x52, 0x07, 0x73, 0x65, 0x74, 0x44,
	0x73, 0x63, 0x70, 0x12, 0xab, 0x01, 0x0a, 0x0b, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x70, 0x6c, 0x73,
	0x5f, 0x74, 0x63, 0x18, 0xa0, 0xca, 0xf1, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x73, 0x82, 0x41, 0x70, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x2f, 0x6f, 0x6e, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x74, 0x77, 0x6f,
	0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2f, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x2d, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x6d,
	0x70, 0x6c, 0x73, 0x2d, 0x74, 0x63, 0x52, 0x09, 0x73, 0x65, 0x74, 0x4d, 0x70, 0x6c, 0x73, 0x54,
	0x63, 0x1a, 0xe8, 0x0a, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x02,
	0x62, 0x63, 0x18, 0x84, 0xdf, 0xb3, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x5c, 0x82, 0x41, 0x59, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x2f, 0x6f, 0x6e, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x74, 0x77, 0x6f, 0x2d,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x62, 0x63, 0x52, 0x02,
	0x62, 0x63, 0x12, 0x88, 0x01, 0x0a, 0x03, 0x63, 0x69, 0x72, 0x18, 0xf5, 0x94, 0xec, 0x9e, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5d, 0x82, 0x41, 0x5a, 0x2f, 0x71,
	0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x6f, 0x6e, 0x65, 0x2d,
	0x72, 0x61, 0x74, 0x65, 0x2d, 0x74, 0x77, 0x6f, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x69, 0x72, 0x52, 0x03, 0x63, 0x69, 0x72, 0x12, 0x92, 0x01,
	0x0a, 0x07, 0x63, 0x69, 0x72, 0x5f, 0x70, 0x63, 0x74, 0x18, 0xe7, 0xa7, 0x8d, 0x31, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x61, 0x82, 0x41, 0x5e, 0x2f, 0x71, 0x6f, 0x73,
	0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x6f, 0x6e, 0x65, 0x2d, 0x72, 0x61,
	0x74, 0x65, 0x2d, 0x74, 0x77, 0x6f, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x63, 0x69, 0x72, 0x2d, 0x70, 0x63, 0x74, 0x52, 0x06, 0x63, 0x69, 0x72, 0x50,
	0x63, 0x74, 0x12, 0xb0, 0x01, 0x0a, 0x11, 0x63, 0x69, 0x72, 0x5f, 0x70, 0x63, 0x74, 0x5f, 0x72,
	0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x9c, 0xf5, 0xec, 0x88, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6b, 0x82, 0x41, 0x68, 0x2f, 0x71, 0x6f, 0x73,
	0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x6f, 0x6e, 0x65, 0x2d, 0x72, 0x61,
	0x74, 0x65, 0x2d, 0x74, 0x77, 0x6f, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x63, 0x69, 0x72, 0x2d, 0x70, 0x63, 0x74, 0x2d, 0x72, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x63, 0x69, 0x72, 0x50, 0x63, 0x74, 0x52, 0x65, 0x6d, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0xba, 0x01, 0x0a, 0x15, 0x6d, 0x61, 0x78, 0x5f, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x8d, 0x93, 0xd2, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6f, 0x82,
	0x41, 0x6c, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f,
	0x6f, 0x6e, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x74, 0x77, 0x6f, 0x2d, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x2d, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x52, 0x12,
	0x6d, 0x61, 0x78, 0x51, 0x75, 0x65, 0x75, 0x65, 0x44, 0x65, 0x70, 0x74, 0x68, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x12, 0xc1, 0x01, 0x0a, 0x17, 0x6d, 0x61, 0x78, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x9f,
	0x91, 0xfd, 0xa1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x71, 0x82,
	0x41, 0x6e, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f,
	0x6f, 0x6e, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x74, 0x77, 0x6f, 0x2d, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x2d, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x52, 0x14, 0x6d, 0x61, 0x78, 0x51, 0x75, 0x65, 0x75, 0x65, 0x44, 0x65, 0x70, 0x74, 0x68, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0xc0, 0x01, 0x0a, 0x17, 0x6d, 0x61, 0x78, 0x5f, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x18, 0x8f, 0xef, 0xa5, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x71, 0x82, 0x41, 0x6e, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x2f, 0x6f, 0x6e, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x74, 0x77, 0x6f, 0x2d,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x61, 0x78, 0x2d,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2d, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x51, 0x75, 0x65, 0x75, 0x65, 0x44, 0x65, 0x70,
	0x74, 0x68, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0xc0, 0x01, 0x0a, 0x10, 0x71, 0x75,
	0x65, 0x75, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x18, 0x82,
	0xb6, 0xd6, 0x6b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x51,
	0x6f, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x42,
	0x6a, 0x82, 0x41, 0x67, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x2f, 0x6f, 0x6e, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x74, 0x77, 0x6f, 0x2d, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x69,
	0x6e, 0x67, 0x2d, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x52, 0x0f, 0x71, 0x75, 0x65,
	0x75, 0x69, 0x6e, 0x67, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x1a, 0xb1, 0x0e, 0x0a,
	0x06, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0xbf, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0xe0, 0xb5, 0xca, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xbc, 0x01, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0xd9, 0xbe, 0xa5, 0xb4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x4d, 0x82, 0x41, 0x4a, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xd3, 0x05, 0x0a, 0x06, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0xa1, 0x01, 0x0a, 0x0f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x18, 0x87, 0xb1, 0xb6, 0x30, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5e, 0x82, 0x41, 0x5b, 0x2f, 0x71, 0x6f, 0x73,
	0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x2d, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x52, 0x0e, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x12, 0xa4, 0x01, 0x0a, 0x10, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x5f, 0x66, 0x77, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0xb6, 0xc1, 0xb0,
	0x87, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5f, 0x82,
	0x41, 0x5c, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x2d, 0x66, 0x77, 0x64, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0e,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x77, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0xe0,
	0x01, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x89,
	0x9d, 0xcb, 0xe7, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x5a, 0x82, 0x41, 0x57, 0x2f, 0x71,
	0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x9a, 0x01, 0x0a, 0x0a, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x10, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x14, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x52, 0x10, 0x01,
	0x1a, 0x0c, 0x82, 0x41, 0x09, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x52, 0x12, 0x26,
	0x0a, 0x14, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x57, 0x44,
	0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x02, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x46, 0x57, 0x44,
	0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x12, 0x26, 0x0a, 0x14, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x10, 0x03,
	0x1a, 0x0c, 0x82, 0x41, 0x09, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x1a, 0xcf,
	0x05, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xa1, 0x01, 0x0a, 0x0f, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x18, 0x9e, 0x85, 0xb7,
	0xeb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5d, 0x82,
	0x41, 0x5a, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x52, 0x0e, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x12, 0xa3, 0x01, 0x0a,
	0x10, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x77, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0xc9, 0xc8, 0xd0, 0xe2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x5e, 0x82, 0x41, 0x5b, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x66, 0x77, 0x64, 0x2d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x0e, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x77, 0x64, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0xde, 0x01, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0xb4, 0x8f, 0xdd, 0x99, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5e, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x59, 0x82, 0x41,
	0x56, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x0a, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x14, 0x4f, 0x55, 0x54, 0x50,
	0x55, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x52,
	0x10, 0x01, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x52,
	0x12, 0x26, 0x0a, 0x14, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46,
	0x57, 0x44, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x02, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x46,
	0x57, 0x44, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x12, 0x26, 0x0a, 0x14, 0x4f, 0x55, 0x54, 0x50,
	0x55, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x10, 0x03, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x1a, 0xab, 0x04, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xc5, 0x01, 0x0a, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x86, 0xb6, 0xa5, 0x59, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x55, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x71, 0x6f, 0x73,
	0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x84, 0x01, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x85, 0xd3, 0xdd, 0x85, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4f,
	0x82, 0x41, 0x4c, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x92, 0x01, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0xba, 0xe9, 0xa5, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x51, 0x6f, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x51, 0x4f, 0x53, 0x53, 0x43,
	0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x42, 0x4b, 0x82, 0x41, 0x48,
	0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3e,
	0x0a, 0x08, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x52,
	0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x1e,
	0x0a, 0x0f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x43,
	0x54, 0x10, 0x01, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x1a, 0xb8,
	0x46, 0x0a, 0x11, 0x54, 0x77, 0x6f, 0x52, 0x61, 0x74, 0x65, 0x54, 0x68, 0x72, 0x65, 0x65, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x12, 0xd9, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x99, 0xb5, 0xa4, 0xfb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5f, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x2e, 0x54, 0x77, 0x6f, 0x52, 0x61, 0x74, 0x65, 0x54, 0x68, 0x72, 0x65, 0x65, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x5c, 0x82, 0x41, 0x59, 0x2f,
	0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x74, 0x77, 0x6f,
	0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x65, 0x2d, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0xf7, 0x01, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0xae, 0x93, 0x93, 0xe6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x66, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x54, 0x77, 0x6f, 0x52, 0x61, 0x74, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x64, 0x82, 0x41, 0x61, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x74, 0x77, 0x6f, 0x2d, 0x72, 0x61, 0x74, 0x65,
	0x2d, 0x74, 0x68, 0x72, 0x65, 0x65, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x6f, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xf3, 0x01, 0x0a, 0x0d, 0x65,
	0x78, 0x63, 0x65, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x92, 0xce, 0xb5,
	0xd5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x54,
	0x77, 0x6f, 0x52, 0x61, 0x74, 0x65, 0x54, 0x68, 0x72, 0x65, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x2e, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x63, 0x82,
	0x41, 0x60, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f,
	0x74, 0x77, 0x6f, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x65, 0x2d, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x2f, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x2d, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0xd4, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xee, 0xbe, 0x90, 0x7e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x5e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x54, 0x77, 0x6f, 0x52,
	0x61, 0x74, 0x65, 0x54, 0x68, 0x72, 0x65, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x5b, 0x82, 0x41, 0x58, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x74, 0x77, 0x6f, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x74,
	0x68, 0x72, 0x65, 0x65, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0xf6, 0x01, 0x0a, 0x0e, 0x76, 0x69, 0x6f, 0x6c,
	0x61, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xbe, 0x96, 0xda, 0x34, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x66, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x54, 0x77, 0x6f, 0x52,
	0x61, 0x74, 0x65, 0x54, 0x68, 0x72, 0x65, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x56, 0x69,
	0x6f, 0x6c, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x64, 0x82, 0x41, 0x61,
	0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x74, 0x77,
	0x6f, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x65, 0x2d, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x2f, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0d, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0xd4, 0x09, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x88, 0x01, 0x0a, 0x02,
	0x62, 0x63, 0x18, 0xb9, 0xa8, 0xe1, 0xe8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x5f, 0x82, 0x41, 0x5c, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x2f, 0x74, 0x77, 0x6f, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x74, 0x68, 0x72,
	0x65, 0x65, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x62, 0x63, 0x52, 0x02, 0x62, 0x63, 0x12, 0x88, 0x01, 0x0a, 0x02, 0x62, 0x65, 0x18, 0xbf, 0xa8,
	0xe1, 0xe8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5f, 0x82, 0x41,
	0x5c, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x74,
	0x77, 0x6f, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x65, 0x2d, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x62, 0x65, 0x52, 0x02, 0x62,
	0x65, 0x12, 0x8a, 0x01, 0x0a, 0x03, 0x63, 0x69, 0x72, 0x18, 0xbe, 0xbd, 0xba, 0x22, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x60, 0x82, 0x41, 0x5d, 0x2f, 0x71, 0x6f, 0x73,
	0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x74, 0x77, 0x6f, 0x2d, 0x72, 0x61,
	0x74, 0x65, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x65, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x69, 0x72, 0x52, 0x03, 0x63, 0x69, 0x72, 0x12, 0x95,
	0x01, 0x0a, 0x07, 0x63, 0x69, 0x72, 0x5f, 0x70, 0x63, 0x74, 0x18, 0xe0, 0x82, 0xe5, 0x46, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x64, 0x82, 0x41, 0x61, 0x2f, 0x71, 0x6f,
	0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73,
	0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x74, 0x77, 0x6f, 0x2d, 0x72,
	0x61, 0x74, 0x65, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x65, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x69, 0x72, 0x2d, 0x70, 0x63, 0x74, 0x52, 0x06,
	0x63, 0x69, 0x72, 0x50, 0x63, 0x74, 0x12, 0xb3, 0x01, 0x0a, 0x11, 0x63, 0x69, 0x72, 0x5f, 0x70,
	0x63, 0x74, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0xab, 0xc0, 0xb5,
	0xcb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6e, 0x82, 0x41, 0x6b,
	0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x74, 0x77,
	0x6f, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x65, 0x2d, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x69, 0x72, 0x2d, 0x70, 0x63,
	0x74, 0x2d, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x63, 0x69, 0x72,
	0x50, 0x63, 0x74, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x8a, 0x01, 0x0a,
	0x03, 0x70, 0x69, 0x72, 0x18, 0xe5, 0xa7, 0x83, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x60, 0x82, 0x41, 0x5d, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x2f, 0x74, 0x77, 0x6f, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x74, 0x68,
	0x72, 0x65, 0x65, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x70, 0x69, 0x72, 0x52, 0x03, 0x70, 0x69, 0x72, 0x12, 0x95, 0x01, 0x0a, 0x07, 0x70, 0x69,
	0x72, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x97, 0xfe, 0xa2, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x64, 0x82, 0x41, 0x61, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x74, 0x77, 0x6f, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x74,
	0x68, 0x72, 0x65, 0x65, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x70, 0x69, 0x72, 0x2d, 0x70, 0x63, 0x74, 0x52, 0x06, 0x70, 0x69, 0x72, 0x50, 0x63,
	0x74, 0x12, 0xb3, 0x01, 0x0a, 0x11, 0x70, 0x69, 0x72, 0x5f, 0x70, 0x63, 0x74, 0x5f, 0x72, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0xec, 0xe5, 0xc9, 0xf6, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6e, 0x82, 0x41, 0x6b, 0x2f, 0x71, 0x6f, 0x73, 0x2f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x74, 0x77, 0x6f, 0x2d, 0x72, 0x61, 0x74,
	0x65, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x65, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x69, 0x72, 0x2d, 0x70, 0x63, 0x74, 0x2d, 0x72, 0x65, 0x6d,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x70, 0x69, 0x72, 0x50, 0x63, 0x74, 0x52, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x1a, 0xa4, 0x0c, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xf6, 0x01, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0xdf, 0x8d, 0xf5, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6d,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x54, 0x77, 0x6f, 0x52, 0x61, 0x74, 0x65, 0x54, 0x68,
	0x72, 0x65, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x6b, 0x82,
	0x41, 0x68, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f,
	0x74, 0x77, 0x6f, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x65, 0x2d, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0xf1, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x90, 0x8f, 0xb7,
	0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x54, 0x77,
	0x6f, 0x52, 0x61, 0x74, 0x65, 0x54, 0x68, 0x72, 0x65, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x6a, 0x82, 0x41, 0x67, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x74, 0x77, 0x6f, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x74,
	0x68, 0x72, 0x65, 0x65, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x93, 0x04, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0xaa, 0x01, 0x0a, 0x09, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x6f, 0x74, 0x31, 0x70, 0x18,
	0xef, 0xd9, 0xfe, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x75, 0x82,
	0x41, 0x72, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f,
	0x74, 0x77, 0x6f, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x65, 0x2d, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x64,
	0x6f, 0x74, 0x31, 0x70, 0x52, 0x08, 0x73, 0x65, 0x74, 0x44, 0x6f, 0x74, 0x31, 0x70, 0x12, 0xa8,
	0x01, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x18, 0x8d, 0xaa, 0xe8, 0xc3,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x74, 0x82, 0x41, 0x71, 0x2f,
	0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x74, 0x77, 0x6f,
	0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x65, 0x2d, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x64, 0x73, 0x63, 0x70,
	0x52, 0x07, 0x73, 0x65, 0x74, 0x44, 0x73, 0x63, 0x70, 0x12, 0xb0, 0x01, 0x0a, 0x0b, 0x73, 0x65,
	0x74, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x63, 0x18, 0x93, 0xab, 0xd5, 0x8f, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x77, 0x82, 0x41, 0x74, 0x2f, 0x71, 0x6f,
	0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73,
	0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x74, 0x77, 0x6f, 0x2d, 0x72,
	0x61, 0x74, 0x65, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x65, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x6d, 0x70, 0x6c, 0x73, 0x2d, 0x74,
	0x63, 0x52, 0x09, 0x73, 0x65, 0x74, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x63, 0x1a, 0x8f, 0x04, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xaa, 0x01, 0x0a, 0x09, 0x73, 0x65, 0x74, 0x5f, 0x64,
	0x6f, 0x74, 0x31, 0x70, 0x18, 0xd8, 0xfe, 0xa1, 0x89, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x74, 0x82, 0x41, 0x71, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x74, 0x77, 0x6f, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x74,
	0x68, 0x72, 0x65, 0x65, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x73, 0x65, 0x74, 0x2d, 0x64, 0x6f, 0x74, 0x31, 0x70, 0x52, 0x08, 0x73, 0x65, 0x74, 0x44, 0x6f,
	0x74, 0x31, 0x70, 0x12, 0xa7, 0x01, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x73, 0x63, 0x70,
	0x18, 0xc0, 0xe7, 0x93, 0x93, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x73, 0x82, 0x41, 0x70, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x2f, 0x74, 0x77, 0x6f, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x65,
	0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x65, 0x74, 0x2d,
	0x64, 0x73, 0x63, 0x70, 0x52, 0x07, 0x73, 0x65, 0x74, 0x44, 0x73, 0x63, 0x70, 0x12, 0xae, 0x01,
	0x0a, 0x0b, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x63, 0x18, 0x8c, 0xc9,
	0xe9, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x76, 0x82, 0x41, 0x73,
	0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x74, 0x77,
	0x6f, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x65, 0x2d, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x6d, 0x70, 0x6c, 0x73,
	0x2d, 0x74, 0x63, 0x52, 0x09, 0x73, 0x65, 0x74, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x63, 0x1a, 0xd6,
	0x0e, 0x0a, 0x0c, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0xf4, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xd3, 0xee, 0xa6, 0xf8, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x6c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x54, 0x77, 0x6f,
	0x52, 0x61, 0x74, 0x65, 0x54, 0x68, 0x72, 0x65, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x45,
	0x78, 0x63, 0x65, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x6a, 0x82, 0x41, 0x67, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x2f, 0x74, 0x77, 0x6f, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x74, 0x68,
	0x72, 0x65, 0x65, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2f, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64,
	0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xef, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0xb4, 0xb2, 0xda, 0x6d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6b, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x2e, 0x54, 0x77, 0x6f, 0x52, 0x61, 0x74, 0x65, 0x54, 0x68, 0x72, 0x65, 0x65, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x2e, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x69, 0x82, 0x41, 0x66, 0x2f, 0x71, 0x6f, 0x73, 0x2f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x74, 0x77, 0x6f, 0x2d, 0x72, 0x61, 0x74,
	0x65, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x65, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2f, 0x65, 0x78,
	0x63, 0x65, 0x65, 0x64, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xaf, 0x05, 0x0a, 0x06, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x9c, 0x01, 0x0a, 0x04, 0x64, 0x72, 0x6f, 0x70, 0x18, 0xbd, 0xb4, 0x80,
	0x8f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6f, 0x82, 0x41, 0x6c,
	0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x74, 0x77,
	0x6f, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x65, 0x2d, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x2f, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64, 0x72, 0x6f, 0x70, 0x52, 0x04, 0x64, 0x72,
	0x6f, 0x70, 0x12, 0xa9, 0x01, 0x0a, 0x09, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x6f, 0x74, 0x31, 0x70,
	0x18, 0x9b, 0xdd, 0xb8, 0x44, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x74,
	0x82, 0x41, 0x71, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x2f, 0x74, 0x77, 0x6f, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x65, 0x2d,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2f, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x2d, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x64,
	0x6f, 0x74, 0x31, 0x70, 0x52, 0x08, 0x73, 0x65, 0x74, 0x44, 0x6f, 0x74, 0x31, 0x70, 0x12, 0xa7,
	0x01, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x18, 0xf1, 0xae, 0x8b, 0xfd,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x73, 0x82, 0x41, 0x70, 0x2f,
	0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x74, 0x77, 0x6f,
	0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x65, 0x2d, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x2f, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x64, 0x73, 0x63, 0x70, 0x52,
	0x07, 0x73, 0x65, 0x74, 0x44, 0x73, 0x63, 0x70, 0x12, 0xaf, 0x01, 0x0a, 0x0b, 0x73, 0x65, 0x74,
	0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x63, 0x18, 0xb7, 0xdf, 0xc2, 0xcf, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x76, 0x82, 0x41, 0x73, 0x2f, 0x71, 0x6f, 0x73,
	0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x74, 0x77, 0x6f, 0x2d, 0x72, 0x61,
	0x74, 0x65, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x65, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2f, 0x65,
	0x78, 0x63, 0x65, 0x65, 0x64, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x6d, 0x70, 0x6c, 0x73, 0x2d, 0x74, 0x63, 0x52,
	0x09, 0x73, 0x65, 0x74, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x63, 0x1a, 0xaa, 0x05, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x9a, 0x01, 0x0a, 0x04, 0x64, 0x72, 0x6f, 0x70, 0x18, 0xc0, 0xdf,
	0xe1, 0x5a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6e, 0x82, 0x41, 0x6b,
	0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x74, 0x77,
	0x6f, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x65, 0x2d, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x2f, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x72, 0x6f, 0x70, 0x52, 0x04, 0x64, 0x72, 0x6f,
	0x70, 0x12, 0xa9, 0x01, 0x0a, 0x09, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x6f, 0x74, 0x31, 0x70, 0x18,
	0xf4, 0xb7, 0xb0, 0xfa, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x73,
	0x82, 0x41, 0x70, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x2f, 0x74, 0x77, 0x6f, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x65, 0x2d,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2f, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x2d, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x64, 0x6f,
	0x74, 0x31, 0x70, 0x52, 0x08, 0x73, 0x65, 0x74, 0x44, 0x6f, 0x74, 0x31, 0x70, 0x12, 0xa6, 0x01,
	0x0a, 0x08, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x18, 0xa4, 0xed, 0x88, 0x9d, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x72, 0x82, 0x41, 0x6f, 0x2f, 0x71,
	0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x74, 0x77, 0x6f, 0x2d,
	0x72, 0x61, 0x74, 0x65, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x65, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x2f, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x64, 0x73, 0x63, 0x70, 0x52, 0x07, 0x73,
	0x65, 0x74, 0x44, 0x73, 0x63, 0x70, 0x12, 0xae, 0x01, 0x0a, 0x0b, 0x73, 0x65, 0x74, 0x5f, 0x6d,
	0x70, 0x6c, 0x73, 0x5f, 0x74, 0x63, 0x18, 0x80, 0xee, 0xbb, 0x95, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x75, 0x82, 0x41, 0x72, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x74, 0x77, 0x6f, 0x2d, 0x72, 0x61, 0x74, 0x65,
	0x2d, 0x74, 0x68, 0x72, 0x65, 0x65, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2f, 0x65, 0x78, 0x63,
	0x65, 0x65, 0x64, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x73, 0x65, 0x74, 0x2d, 0x6d, 0x70, 0x6c, 0x73, 0x2d, 0x74, 0x63, 0x52, 0x09, 0x73, 0x65,
	0x74, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x63, 0x1a, 0xcb, 0x09, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x86, 0x01, 0x0a, 0x02, 0x62, 0x63, 0x18, 0xe4, 0xf1, 0x9c, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5e, 0x82, 0x41, 0x5b, 0x2f, 0x71, 0x6f, 0x73, 0x2f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x74, 0x77, 0x6f, 0x2d, 0x72, 0x61, 0x74,
	0x65, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x65, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x62, 0x63, 0x52, 0x02, 0x62, 0x63, 0x12, 0x86, 0x01, 0x0a, 0x02, 0x62,
	0x65, 0x18, 0xe2, 0xf1, 0x9c, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x5e, 0x82, 0x41, 0x5b, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x2f, 0x74, 0x77, 0x6f, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x65,
	0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x62, 0x65, 0x52,
	0x02, 0x62, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x03, 0x63, 0x69, 0x72, 0x18, 0xd5, 0xf2, 0xeb, 0xaf,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5f, 0x82, 0x41, 0x5c, 0x2f,
	0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x74, 0x77, 0x6f,
	0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x65, 0x2d, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x69, 0x72, 0x52, 0x03, 0x63, 0x69, 0x72,
	0x12, 0x94, 0x01, 0x0a, 0x07, 0x63, 0x69, 0x72, 0x5f, 0x70, 0x63, 0x74, 0x18, 0xc7, 0xee, 0xea,
	0x6c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x63, 0x82, 0x41, 0x60, 0x2f,
	0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x74, 0x77, 0x6f,
	0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x65, 0x2d, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x69, 0x72, 0x2d, 0x70, 0x63, 0x74, 0x52,
	0x06, 0x63, 0x69, 0x72, 0x50, 0x63, 0x74, 0x12, 0xb2, 0x01, 0x0a, 0x11, 0x63, 0x69, 0x72, 0x5f,
	0x70, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0xfc, 0xac,
	0xd8, 0x83, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6d, 0x82, 0x41,
	0x6a, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x74,
	0x77, 0x6f, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x65, 0x2d, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x69, 0x72, 0x2d, 0x70, 0x63,
	0x74, 0x2d, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x63, 0x69, 0x72,
	0x50, 0x63, 0x74, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x8a, 0x01, 0x0a,
	0x03, 0x70, 0x69, 0x72, 0x18, 0x8e, 0xca, 0xea, 0xae, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x5f, 0x82, 0x41, 0x5c, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x74, 0x77, 0x6f, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x74,
	0x68, 0x72, 0x65, 0x65, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x70, 0x69, 0x72, 0x52, 0x03, 0x70, 0x69, 0x72, 0x12, 0x95, 0x01, 0x0a, 0x07, 0x70, 0x69,
	0x72, 0x5f, 0x70, 0x63, 0x74, 0x18, 0xf0, 0x92, 0xa0, 0xe7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x63, 0x82, 0x41, 0x60, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x74, 0x77, 0x6f, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d,
	0x74, 0x68, 0x72, 0x65, 0x65, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x70, 0x69, 0x72, 0x2d, 0x70, 0x63, 0x74, 0x52, 0x06, 0x70, 0x69, 0x72, 0x50, 0x63,
	0x74, 0x12, 0xb1, 0x01, 0x0a, 0x11, 0x70, 0x69, 0x72, 0x5f, 0x70, 0x63, 0x74, 0x5f, 0x72, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x9b, 0xa8, 0xb2, 0x6a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6d, 0x82, 0x41, 0x6a, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x74, 0x77, 0x6f, 0x2d, 0x72, 0x61, 0x74, 0x65,
	0x2d, 0x74, 0x68, 0x72, 0x65, 0x65, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x70, 0x69, 0x72, 0x2d, 0x70, 0x63, 0x74, 0x2d, 0x72, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x70, 0x69, 0x72, 0x50, 0x63, 0x74, 0x52, 0x65, 0x6d, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x1a, 0xe1, 0x0e, 0x0a, 0x0d, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xf6, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x8f, 0xcd, 0xae, 0xea, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6d, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x2e, 0x54, 0x77, 0x6f, 0x52, 0x61, 0x74, 0x65, 0x54, 0x68, 0x72, 0x65,
	0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x6b, 0x82, 0x41, 0x68,
	0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x74, 0x77,
	0x6f, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x65, 0x2d, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x2f, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0xf1, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x80, 0xb9, 0xdc, 0x43, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x6c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x54, 0x77, 0x6f, 0x52,
	0x61, 0x74, 0x65, 0x54, 0x68, 0x72, 0x65, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x56, 0x69,
	0x6f, 0x6c, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x6a, 0x82, 0x41, 0x67, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x2f, 0x74, 0x77, 0x6f, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x74, 0x68, 0x72,
	0x65, 0x65, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2f, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x65,
	0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x1a, 0xb2, 0x05, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x9c, 0x01, 0x0a, 0x04, 0x64, 0x72, 0x6f, 0x70, 0x18, 0xc9, 0xee, 0xdf, 0x6d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x70, 0x82, 0x41, 0x6d, 0x2f, 0x71, 0x6f, 0x73, 0x2f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x74, 0x77, 0x6f, 0x2d, 0x72, 0x61, 0x74,
	0x65, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x65, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2f, 0x76, 0x69,
	0x6f, 0x6c, 0x61, 0x74, 0x65, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x64, 0x72, 0x6f, 0x70, 0x52, 0x04, 0x64, 0x72, 0x6f, 0x70, 0x12, 0xab,
	0x01, 0x0a, 0x09, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x6f, 0x74, 0x31, 0x70, 0x18, 0xbf, 0xd2, 0xc9,
	0xce, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x75, 0x82, 0x41, 0x72,
	0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x74, 0x77,
	0x6f, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x65, 0x2d, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x2f, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x64, 0x6f, 0x74,
	0x31, 0x70, 0x52, 0x08, 0x73, 0x65, 0x74, 0x44, 0x6f, 0x74, 0x31, 0x70, 0x12, 0xa7, 0x01, 0x0a,
	0x08, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x18, 0xdd, 0xf0, 0x83, 0x25, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x74, 0x82, 0x41, 0x71, 0x2f, 0x71, 0x6f, 0x73,
	0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x74, 0x77, 0x6f, 0x2d, 0x72, 0x61,
	0x74, 0x65, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x65, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2f, 0x76,
	0x69, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x64, 0x73, 0x63, 0x70, 0x52, 0x07, 0x73,
	0x65, 0x74, 0x44, 0x73, 0x63, 0x70, 0x12, 0xb0, 0x01, 0x0a, 0x0b, 0x73, 0x65, 0x74, 0x5f, 0x6d,
	0x70, 0x6c, 0x73, 0x5f, 0x74, 0x63, 0x18, 0xe3, 0xc8, 0xf8, 0xd4, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x77, 0x82, 0x41, 0x74, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x74, 0x77, 0x6f, 0x2d, 0x72, 0x61, 0x74, 0x65,
	0x2d, 0x74, 0x68, 0x72, 0x65, 0x65, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2f, 0x76, 0x69, 0x6f,
	0x6c, 0x61, 0x74, 0x65, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x6d, 0x70, 0x6c, 0x73, 0x2d, 0x74, 0x63, 0x52, 0x09,
	0x73, 0x65, 0x74, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x63, 0x1a, 0xad, 0x05, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x9b, 0x01, 0x0a, 0x04, 0x64, 0x72, 0x6f, 0x70, 0x18, 0x9c, 0xc7, 0xa1,
	0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6f, 0x82, 0x41, 0x6c, 0x2f,
	0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x74, 0x77, 0x6f,
	0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x65, 0x2d, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x2f, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x72, 0x6f, 0x70, 0x52, 0x04, 0x64, 0x72, 0x6f,
	0x70, 0x12, 0xaa, 0x01, 0x0a, 0x09, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x6f, 0x74, 0x31, 0x70, 0x18,
	0xe8, 0xde, 0xbf, 0x94, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x74,
	0x82, 0x41, 0x71, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x2f, 0x74, 0x77, 0x6f, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x65, 0x2d,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2f, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x2d, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x64,
	0x6f, 0x74, 0x31, 0x70, 0x52, 0x08, 0x73, 0x65, 0x74, 0x44, 0x6f, 0x74, 0x31, 0x70, 0x12, 0xa6,
	0x01, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x18, 0x90, 0x99, 0xca, 0x62,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x73, 0x82, 0x41, 0x70, 0x2f, 0x71,
	0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x74, 0x77, 0x6f, 0x2d,
	0x72, 0x61, 0x74, 0x65, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x65, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x2f, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x64, 0x73, 0x63, 0x70, 0x52, 0x07,
	0x73, 0x65, 0x74, 0x44, 0x73, 0x63, 0x70, 0x12, 0xaf, 0x01, 0x0a, 0x0b, 0x73, 0x65, 0x74, 0x5f,
	0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x63, 0x18, 0x9c, 0xe7, 0xdf, 0xca, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x76, 0x82, 0x41, 0x73, 0x2f, 0x71, 0x6f, 0x73, 0x2f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x74, 0x77, 0x6f, 0x2d, 0x72, 0x61, 0x74,
	0x65, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x65, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2f, 0x76, 0x69,
	0x6f, 0x6c, 0x61, 0x74, 0x65, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x6d, 0x70, 0x6c, 0x73, 0x2d, 0x74, 0x63, 0x52, 0x09,
	0x73, 0x65, 0x74, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x63, 0x1a, 0xdb, 0x01, 0x0a, 0x0c, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x65, 0x0a, 0x08, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x49, 0x82, 0x41,
	0x46, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x64, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x52, 0x09, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x1a, 0x6c, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x63, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xd6, 0xd3, 0x5d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x71, 0x6f, 0x73,
	0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0xb8, 0x01, 0x0a, 0x12, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x44, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0x82, 0x41, 0x2d, 0x2f,
	0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x5c, 0x0a, 0x10, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x0f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x1a, 0x07, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x63, 0x6f, 0x6d,
	0x2e, 0x6e, 0x6f, 0x63, 0x73, 0x79, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_openconfig_qos_proto_rawDescOnce sync.Once
	file_openconfig_qos_proto_rawDescData = file_openconfig_qos_proto_rawDesc
)

func file_openconfig_qos_proto_rawDescGZIP() []byte {
	file_openconfig_qos_proto_rawDescOnce.Do(func() {
		file_openconfig_qos_proto_rawDescData = protoimpl.X.CompressGZIP(file_openconfig_qos_proto_rawDescData)
	})
	return file_openconfig_qos_proto_rawDescData
}

var file_openconfig_qos_proto_enumTypes = make([]protoimpl.EnumInfo, 18)
var file_openconfig_qos_proto_msgTypes = make([]protoimpl.MessageInfo, 161)
var file_openconfig_qos_proto_goTypes = []interface{}{
	(Qos_Classifiers_Classifier_Config_Type)(0),                                                   // 0: openconfig.Qos.Classifiers.Classifier.Config.Type
	(Qos_Classifiers_Classifier_State_Type)(0),                                                    // 1: openconfig.Qos.Classifiers.Classifier.State.Type
	(Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort)(0),        // 2: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config.DestinationPort
	(Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort)(0),             // 3: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config.SourcePort
	(Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort)(0),         // 4: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State.DestinationPort
	(Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort)(0),              // 5: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State.SourcePort
	(Qos_Interfaces_Interface_Input_Classifiers_Classifier_Config_Type)(0),                        // 6: openconfig.Qos.Interfaces.Interface.Input.Classifiers.Classifier.Config.Type
	(Qos_Interfaces_Interface_Input_Classifiers_Classifier_State_Type)(0),                         // 7: openconfig.Qos.Interfaces.Interface.Input.Classifiers.Classifier.State.Type
	(Qos_Interfaces_Interface_Input_Classifiers_ClassifierKey_Type)(0),                            // 8: openconfig.Qos.Interfaces.Interface.Input.Classifiers.ClassifierKey.Type
	(Qos_Interfaces_Interface_Output_Classifiers_Classifier_Config_Type)(0),                       // 9: openconfig.Qos.Interfaces.Interface.Output.Classifiers.Classifier.Config.Type
	(Qos_Interfaces_Interface_Output_Classifiers_Classifier_State_Type)(0),                        // 10: openconfig.Qos.Interfaces.Interface.Output.Classifiers.Classifier.State.Type
	(Qos_Interfaces_Interface_Output_Classifiers_ClassifierKey_Type)(0),                           // 11: openconfig.Qos.Interfaces.Interface.Output.Classifiers.ClassifierKey.Type
	(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_Priority)(0),               // 12: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Config.Priority
	(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType)(0), // 13: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.Config.InputType
	(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType)(0),  // 14: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.State.InputType
	(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType)(0),      // 15: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.Config.OutputType
	(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType)(0),       // 16: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.State.OutputType
	(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_Priority)(0),                // 17: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.State.Priority
	(*Qos)(nil),                                                                                               // 18: openconfig.Qos
	(*Qos_Classifiers)(nil),                                                                                   // 19: openconfig.Qos.Classifiers
	(*Qos_Config)(nil),                                                                                        // 20: openconfig.Qos.Config
	(*Qos_ForwardingGroups)(nil),                                                                              // 21: openconfig.Qos.ForwardingGroups
	(*Qos_Interfaces)(nil),                                                                                    // 22: openconfig.Qos.Interfaces
	(*Qos_Queues)(nil),                                                                                        // 23: openconfig.Qos.Queues
	(*Qos_SchedulerPolicies)(nil),                                                                             // 24: openconfig.Qos.SchedulerPolicies
	(*Qos_State)(nil),                                                                                         // 25: openconfig.Qos.State
	(*Qos_Classifiers_Classifier)(nil),                                                                        // 26: openconfig.Qos.Classifiers.Classifier
	(*Qos_Classifiers_ClassifierKey)(nil),                                                                     // 27: openconfig.Qos.Classifiers.ClassifierKey
	(*Qos_Classifiers_Classifier_Config)(nil),                                                                 // 28: openconfig.Qos.Classifiers.Classifier.Config
	(*Qos_Classifiers_Classifier_State)(nil),                                                                  // 29: openconfig.Qos.Classifiers.Classifier.State
	(*Qos_Classifiers_Classifier_Terms)(nil),                                                                  // 30: openconfig.Qos.Classifiers.Classifier.Terms
	(*Qos_Classifiers_Classifier_Terms_Term)(nil),                                                             // 31: openconfig.Qos.Classifiers.Classifier.Terms.Term
	(*Qos_Classifiers_Classifier_Terms_TermKey)(nil),                                                          // 32: openconfig.Qos.Classifiers.Classifier.Terms.TermKey
	(*Qos_Classifiers_Classifier_Terms_Term_Actions)(nil),                                                     // 33: openconfig.Qos.Classifiers.Classifier.Terms.Term.Actions
	(*Qos_Classifiers_Classifier_Terms_Term_Conditions)(nil),                                                  // 34: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions
	(*Qos_Classifiers_Classifier_Terms_Term_Config)(nil),                                                      // 35: openconfig.Qos.Classifiers.Classifier.Terms.Term.Config
	(*Qos_Classifiers_Classifier_Terms_Term_State)(nil),                                                       // 36: openconfig.Qos.Classifiers.Classifier.Terms.Term.State
	(*Qos_Classifiers_Classifier_Terms_Term_Actions_Config)(nil),                                              // 37: openconfig.Qos.Classifiers.Classifier.Terms.Term.Actions.Config
	(*Qos_Classifiers_Classifier_Terms_Term_Actions_Remark)(nil),                                              // 38: openconfig.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark
	(*Qos_Classifiers_Classifier_Terms_Term_Actions_State)(nil),                                               // 39: openconfig.Qos.Classifiers.Classifier.Terms.Term.Actions.State
	(*Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config)(nil),                                       // 40: openconfig.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.Config
	(*Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State)(nil),                                        // 41: openconfig.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.State
	(*Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4)(nil),                                             // 42: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4
	(*Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6)(nil),                                             // 43: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6
	(*Qos_Classifiers_Classifier_Terms_Term_Conditions_L2)(nil),                                               // 44: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2
	(*Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls)(nil),                                             // 45: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls
	(*Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport)(nil),                                        // 46: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport
	(*Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config)(nil),                                      // 47: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.Config
	(*Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State)(nil),                                       // 48: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.State
	(*Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config)(nil),                                      // 49: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.Config
	(*Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State)(nil),                                       // 50: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.State
	(*Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config)(nil),                                        // 51: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.Config
	(*Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State)(nil),                                         // 52: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.State
	(*Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config)(nil),                                      // 53: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.Config
	(*Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State)(nil),                                       // 54: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.State
	(*Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config)(nil),                                 // 55: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config
	(*Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State)(nil),                                  // 56: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State
	(*Qos_ForwardingGroups_ForwardingGroup)(nil),                                                              // 57: openconfig.Qos.ForwardingGroups.ForwardingGroup
	(*Qos_ForwardingGroups_ForwardingGroupKey)(nil),                                                           // 58: openconfig.Qos.ForwardingGroups.ForwardingGroupKey
	(*Qos_ForwardingGroups_ForwardingGroup_Config)(nil),                                                       // 59: openconfig.Qos.ForwardingGroups.ForwardingGroup.Config
	(*Qos_ForwardingGroups_ForwardingGroup_State)(nil),                                                        // 60: openconfig.Qos.ForwardingGroups.ForwardingGroup.State
	(*Qos_Interfaces_Interface)(nil),                                                                          // 61: openconfig.Qos.Interfaces.Interface
	(*Qos_Interfaces_InterfaceKey)(nil),                                                                       // 62: openconfig.Qos.Interfaces.InterfaceKey
	(*Qos_Interfaces_Interface_Config)(nil),                                                                   // 63: openconfig.Qos.Interfaces.Interface.Config
	(*Qos_Interfaces_Interface_Input)(nil),                                                                    // 64: openconfig.Qos.Interfaces.Interface.Input
	(*Qos_Interfaces_Interface_InterfaceRef)(nil),                                                             // 65: openconfig.Qos.Interfaces.Interface.InterfaceRef
	(*Qos_Interfaces_Interface_Output)(nil),                                                                   // 66: openconfig.Qos.Interfaces.Interface.Output
	(*Qos_Interfaces_Interface_State)(nil),                                                                    // 67: openconfig.Qos.Interfaces.Interface.State
	(*Qos_Interfaces_Interface_Input_Classifiers)(nil),                                                        // 68: openconfig.Qos.Interfaces.Interface.Input.Classifiers
	(*Qos_Interfaces_Interface_Input_Config)(nil),                                                             // 69: openconfig.Qos.Interfaces.Interface.Input.Config
	(*Qos_Interfaces_Interface_Input_Queues)(nil),                                                             // 70: openconfig.Qos.Interfaces.Interface.Input.Queues
	(*Qos_Interfaces_Interface_Input_SchedulerPolicy)(nil),                                                    // 71: openconfig.Qos.Interfaces.Interface.Input.SchedulerPolicy
	(*Qos_Interfaces_Interface_Input_State)(nil),                                                              // 72: openconfig.Qos.Interfaces.Interface.Input.State
	(*Qos_Interfaces_Interface_Input_VirtualOutputQueues)(nil),                                                // 73: openconfig.Qos.Interfaces.Interface.Input.VirtualOutputQueues
	(*Qos_Interfaces_Interface_Input_Classifiers_Classifier)(nil),                                             // 74: openconfig.Qos.Interfaces.Interface.Input.Classifiers.Classifier
	(*Qos_Interfaces_Interface_Input_Classifiers_ClassifierKey)(nil),                                          // 75: openconfig.Qos.Interfaces.Interface.Input.Classifiers.ClassifierKey
	(*Qos_Interfaces_Interface_Input_Classifiers_Classifier_Config)(nil),                                      // 76: openconfig.Qos.Interfaces.Interface.Input.Classifiers.Classifier.Config
	(*Qos_Interfaces_Interface_Input_Classifiers_Classifier_State)(nil),                                       // 77: openconfig.Qos.Interfaces.Interface.Input.Classifiers.Classifier.State
	(*Qos_Interfaces_Interface_Input_Classifiers_Classifier_Terms)(nil),                                       // 78: openconfig.Qos.Interfaces.Interface.Input.Classifiers.Classifier.Terms
	(*Qos_Interfaces_Interface_Input_Classifiers_Classifier_Terms_Term)(nil),                                  // 79: openconfig.Qos.Interfaces.Interface.Input.Classifiers.Classifier.Terms.Term
	(*Qos_Interfaces_Interface_Input_Classifiers_Classifier_Terms_TermKey)(nil),                               // 80: openconfig.Qos.Interfaces.Interface.Input.Classifiers.Classifier.Terms.TermKey
	(*Qos_Interfaces_Interface_Input_Classifiers_Classifier_Terms_Term_Config)(nil),                           // 81: openconfig.Qos.Interfaces.Interface.Input.Classifiers.Classifier.Terms.Term.Config
	(*Qos_Interfaces_Interface_Input_Classifiers_Classifier_Terms_Term_State)(nil),                            // 82: openconfig.Qos.Interfaces.Interface.Input.Classifiers.Classifier.Terms.Term.State
	(*Qos_Interfaces_Interface_Input_Queues_Queue)(nil),                                                       // 83: openconfig.Qos.Interfaces.Interface.Input.Queues.Queue
	(*Qos_Interfaces_Interface_Input_Queues_QueueKey)(nil),                                                    // 84: openconfig.Qos.Interfaces.Interface.Input.Queues.QueueKey
	(*Qos_Interfaces_Interface_Input_Queues_Queue_Config)(nil),                                                // 85: openconfig.Qos.Interfaces.Interface.Input.Queues.Queue.Config
	(*Qos_Interfaces_Interface_Input_Queues_Queue_State)(nil),                                                 // 86: openconfig.Qos.Interfaces.Interface.Input.Queues.Queue.State
	(*Qos_Interfaces_Interface_Input_SchedulerPolicy_Config)(nil),                                             // 87: openconfig.Qos.Interfaces.Interface.Input.SchedulerPolicy.Config
	(*Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers)(nil),                                         // 88: openconfig.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers
	(*Qos_Interfaces_Interface_Input_SchedulerPolicy_State)(nil),                                              // 89: openconfig.Qos.Interfaces.Interface.Input.SchedulerPolicy.State
	(*Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler)(nil),                               // 90: openconfig.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler
	(*Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey)(nil),                            // 91: openconfig.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.SchedulerKey
	(*Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State)(nil),                         // 92: openconfig.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler.State
	(*Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface)(nil),                                   // 93: openconfig.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface
	(*Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey)(nil),                                // 94: openconfig.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterfaceKey
	(*Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config)(nil),                            // 95: openconfig.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Config
	(*Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues)(nil),                            // 96: openconfig.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues
	(*Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State)(nil),                             // 97: openconfig.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.State
	(*Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue)(nil),                      // 98: openconfig.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue
	(*Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey)(nil),                   // 99: openconfig.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.QueueKey
	(*Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config)(nil),               // 100: openconfig.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.Config
	(*Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State)(nil),                // 101: openconfig.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.State
	(*Qos_Interfaces_Interface_InterfaceRef_Config)(nil),                                                      // 102: openconfig.Qos.Interfaces.Interface.InterfaceRef.Config
	(*Qos_Interfaces_Interface_InterfaceRef_State)(nil),                                                       // 103: openconfig.Qos.Interfaces.Interface.InterfaceRef.State
	(*Qos_Interfaces_Interface_Output_Classifiers)(nil),                                                       // 104: openconfig.Qos.Interfaces.Interface.Output.Classifiers
	(*Qos_Interfaces_Interface_Output_Config)(nil),                                                            // 105: openconfig.Qos.Interfaces.Interface.Output.Config
	(*Qos_Interfaces_Interface_Output_InterfaceRef)(nil),                                                      // 106: openconfig.Qos.Interfaces.Interface.Output.InterfaceRef
	(*Qos_Interfaces_Interface_Output_Queues)(nil),                                                            // 107: openconfig.Qos.Interfaces.Interface.Output.Queues
	(*Qos_Interfaces_Interface_Output_SchedulerPolicy)(nil),                                                   // 108: openconfig.Qos.Interfaces.Interface.Output.SchedulerPolicy
	(*Qos_Interfaces_Interface_Output_State)(nil),                                                             // 109: openconfig.Qos.Interfaces.Interface.Output.State
	(*Qos_Interfaces_Interface_Output_Classifiers_Classifier)(nil),                                            // 110: openconfig.Qos.Interfaces.Interface.Output.Classifiers.Classifier
	(*Qos_Interfaces_Interface_Output_Classifiers_ClassifierKey)(nil),                                         // 111: openconfig.Qos.Interfaces.Interface.Output.Classifiers.ClassifierKey
	(*Qos_Interfaces_Interface_Output_Classifiers_Classifier_Config)(nil),                                     // 112: openconfig.Qos.Interfaces.Interface.Output.Classifiers.Classifier.Config
	(*Qos_Interfaces_Interface_Output_Classifiers_Classifier_State)(nil),                                      // 113: openconfig.Qos.Interfaces.Interface.Output.Classifiers.Classifier.State
	(*Qos_Interfaces_Interface_Output_Classifiers_Classifier_Terms)(nil),                                      // 114: openconfig.Qos.Interfaces.Interface.Output.Classifiers.Classifier.Terms
	(*Qos_Interfaces_Interface_Output_Classifiers_Classifier_Terms_Term)(nil),                                 // 115: openconfig.Qos.Interfaces.Interface.Output.Classifiers.Classifier.Terms.Term
	(*Qos_Interfaces_Interface_Output_Classifiers_Classifier_Terms_TermKey)(nil),                              // 116: openconfig.Qos.Interfaces.Interface.Output.Classifiers.Classifier.Terms.TermKey
	(*Qos_Interfaces_Interface_Output_Classifiers_Classifier_Terms_Term_Config)(nil),                          // 117: openconfig.Qos.Interfaces.Interface.Output.Classifiers.Classifier.Terms.Term.Config
	(*Qos_Interfaces_Interface_Output_Classifiers_Classifier_Terms_Term_State)(nil),                           // 118: openconfig.Qos.Interfaces.Interface.Output.Classifiers.Classifier.Terms.Term.State
	(*Qos_Interfaces_Interface_Output_InterfaceRef_Config)(nil),                                               // 119: openconfig.Qos.Interfaces.Interface.Output.InterfaceRef.Config
	(*Qos_Interfaces_Interface_Output_InterfaceRef_State)(nil),                                                // 120: openconfig.Qos.Interfaces.Interface.Output.InterfaceRef.State
	(*Qos_Interfaces_Interface_Output_Queues_Queue)(nil),                                                      // 121: openconfig.Qos.Interfaces.Interface.Output.Queues.Queue
	(*Qos_Interfaces_Interface_Output_Queues_QueueKey)(nil),                                                   // 122: openconfig.Qos.Interfaces.Interface.Output.Queues.QueueKey
	(*Qos_Interfaces_Interface_Output_Queues_Queue_Config)(nil),                                               // 123: openconfig.Qos.Interfaces.Interface.Output.Queues.Queue.Config
	(*Qos_Interfaces_Interface_Output_Queues_Queue_State)(nil),                                                // 124: openconfig.Qos.Interfaces.Interface.Output.Queues.Queue.State
	(*Qos_Interfaces_Interface_Output_SchedulerPolicy_Config)(nil),                                            // 125: openconfig.Qos.Interfaces.Interface.Output.SchedulerPolicy.Config
	(*Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers)(nil),                                        // 126: openconfig.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers
	(*Qos_Interfaces_Interface_Output_SchedulerPolicy_State)(nil),                                             // 127: openconfig.Qos.Interfaces.Interface.Output.SchedulerPolicy.State
	(*Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler)(nil),                              // 128: openconfig.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler
	(*Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey)(nil),                           // 129: openconfig.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.SchedulerKey
	(*Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State)(nil),                        // 130: openconfig.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler.State
	(*Qos_Queues_Queue)(nil),                                                                                  // 131: openconfig.Qos.Queues.Queue
	(*Qos_Queues_QueueKey)(nil),                                                                               // 132: openconfig.Qos.Queues.QueueKey
	(*Qos_Queues_Queue_Config)(nil),                                                                           // 133: openconfig.Qos.Queues.Queue.Config
	(*Qos_Queues_Queue_Red)(nil),                                                                              // 134: openconfig.Qos.Queues.Queue.Red
	(*Qos_Queues_Queue_State)(nil),                                                                            // 135: openconfig.Qos.Queues.Queue.State
	(*Qos_Queues_Queue_Wred)(nil),                                                                             // 136: openconfig.Qos.Queues.Queue.Wred
	(*Qos_Queues_Queue_Red_Config)(nil),                                                                       // 137: openconfig.Qos.Queues.Queue.Red.Config
	(*Qos_Queues_Queue_Red_State)(nil),                                                                        // 138: openconfig.Qos.Queues.Queue.Red.State
	(*Qos_Queues_Queue_Wred_Config)(nil),                                                                      // 139: openconfig.Qos.Queues.Queue.Wred.Config
	(*Qos_Queues_Queue_Wred_State)(nil),                                                                       // 140: openconfig.Qos.Queues.Queue.Wred.State
	(*Qos_SchedulerPolicies_SchedulerPolicy)(nil),                                                             // 141: openconfig.Qos.SchedulerPolicies.SchedulerPolicy
	(*Qos_SchedulerPolicies_SchedulerPolicyKey)(nil),                                                          // 142: openconfig.Qos.SchedulerPolicies.SchedulerPolicyKey
	(*Qos_SchedulerPolicies_SchedulerPolicy_Config)(nil),                                                      // 143: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Config
	(*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers)(nil),                                                  // 144: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers
	(*Qos_SchedulerPolicies_SchedulerPolicy_State)(nil),                                                       // 145: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.State
	(*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler)(nil),                                        // 146: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler
	(*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey)(nil),                                     // 147: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.SchedulerKey
	(*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config)(nil),                                 // 148: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Config
	(*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs)(nil),                                 // 149: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs
	(*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor)(nil),                        // 150: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor
	(*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output)(nil),                                 // 151: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output
	(*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State)(nil),                                  // 152: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.State
	(*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor)(nil),                      // 153: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor
	(*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input)(nil),                           // 154: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input
	(*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey)(nil),                        // 155: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.InputKey
	(*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config)(nil),                    // 156: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.Config
	(*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State)(nil),                     // 157: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.State
	(*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config)(nil),                 // 158: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.Config
	(*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction)(nil),          // 159: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction
	(*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction)(nil),           // 160: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction
	(*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State)(nil),                  // 161: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.State
	(*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config)(nil),   // 162: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.Config
	(*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State)(nil),    // 163: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.State
	(*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config)(nil),    // 164: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.Config
	(*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State)(nil),     // 165: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.State
	(*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config)(nil),                          // 166: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.Config
	(*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State)(nil),                           // 167: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.State
	(*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config)(nil),               // 168: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.Config
	(*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction)(nil),        // 169: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction
	(*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction)(nil),         // 170: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction
	(*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State)(nil),                // 171: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.State
	(*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction)(nil),        // 172: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction
	(*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config)(nil), // 173: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.Config
	(*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State)(nil),  // 174: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.State
	(*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config)(nil),  // 175: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.Config
	(*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State)(nil),   // 176: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.State
	(*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config)(nil), // 177: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.Config
	(*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State)(nil),  // 178: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.State
	(*ywrapper.StringValue)(nil),                                                                              // 179: ywrapper.StringValue
	(*ywrapper.UintValue)(nil),                                                                                // 180: ywrapper.UintValue
	(OpenconfigPacketMatchTypesIPPROTOCOL)(0),                                                                 // 181: openconfig.OpenconfigPacketMatchTypesIPPROTOCOL
	(OpenconfigPacketMatchTypesETHERTYPE)(0),                                                                  // 182: openconfig.OpenconfigPacketMatchTypesETHERTYPE
	(OpenconfigPacketMatchTypesTCPFLAGS)(0),                                                                   // 183: openconfig.OpenconfigPacketMatchTypesTCPFLAGS
	(OpenconfigQosTypesQOSQUEUETYPE)(0),                                                                       // 184: openconfig.OpenconfigQosTypesQOSQUEUETYPE
	(OpenconfigQosTypesQOSSCHEDULERTYPE)(0),                                                                   // 185: openconfig.OpenconfigQosTypesQOSSCHEDULERTYPE
	(OpenconfigQosQueueBehavior)(0),                                                                           // 186: openconfig.OpenconfigQosQueueBehavior
	(*ywrapper.BoolValue)(nil),                                                                                // 187: ywrapper.BoolValue
}
var file_openconfig_qos_proto_depIdxs = []int32{
	19,  // 0: openconfig.Qos.classifiers:type_name -> openconfig.Qos.Classifiers
	20,  // 1: openconfig.Qos.config:type_name -> openconfig.Qos.Config
	21,  // 2: openconfig.Qos.forwarding_groups:type_name -> openconfig.Qos.ForwardingGroups
	22,  // 3: openconfig.Qos.interfaces:type_name -> openconfig.Qos.Interfaces
	23,  // 4: openconfig.Qos.queues:type_name -> openconfig.Qos.Queues
	24,  // 5: openconfig.Qos.scheduler_policies:type_name -> openconfig.Qos.SchedulerPolicies
	25,  // 6: openconfig.Qos.state:type_name -> openconfig.Qos.State
	27,  // 7: openconfig.Qos.Classifiers.classifier:type_name -> openconfig.Qos.Classifiers.ClassifierKey
	58,  // 8: openconfig.Qos.ForwardingGroups.forwarding_group:type_name -> openconfig.Qos.ForwardingGroups.ForwardingGroupKey
	62,  // 9: openconfig.Qos.Interfaces.interface:type_name -> openconfig.Qos.Interfaces.InterfaceKey
	132, // 10: openconfig.Qos.Queues.queue:type_name -> openconfig.Qos.Queues.QueueKey
	142, // 11: openconfig.Qos.SchedulerPolicies.scheduler_policy:type_name -> openconfig.Qos.SchedulerPolicies.SchedulerPolicyKey
	28,  // 12: openconfig.Qos.Classifiers.Classifier.config:type_name -> openconfig.Qos.Classifiers.Classifier.Config
	29,  // 13: openconfig.Qos.Classifiers.Classifier.state:type_name -> openconfig.Qos.Classifiers.Classifier.State
	30,  // 14: openconfig.Qos.Classifiers.Classifier.terms:type_name -> openconfig.Qos.Classifiers.Classifier.Terms
	26,  // 15: openconfig.Qos.Classifiers.ClassifierKey.classifier:type_name -> openconfig.Qos.Classifiers.Classifier
	179, // 16: openconfig.Qos.Classifiers.Classifier.Config.name:type_name -> ywrapper.StringValue
	0,   // 17: openconfig.Qos.Classifiers.Classifier.Config.type:type_name -> openconfig.Qos.Classifiers.Classifier.Config.Type
	179, // 18: openconfig.Qos.Classifiers.Classifier.State.name:type_name -> ywrapper.StringValue
	1,   // 19: openconfig.Qos.Classifiers.Classifier.State.type:type_name -> openconfig.Qos.Classifiers.Classifier.State.Type
	32,  // 20: openconfig.Qos.Classifiers.Classifier.Terms.term:type_name -> openconfig.Qos.Classifiers.Classifier.Terms.TermKey
	33,  // 21: openconfig.Qos.Classifiers.Classifier.Terms.Term.actions:type_name -> openconfig.Qos.Classifiers.Classifier.Terms.Term.Actions
	34,  // 22: openconfig.Qos.Classifiers.Classifier.Terms.Term.conditions:type_name -> openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions
	35,  // 23: openconfig.Qos.Classifiers.Classifier.Terms.Term.config:type_name -> openconfig.Qos.Classifiers.Classifier.Terms.Term.Config
	36,  // 24: openconfig.Qos.Classifiers.Classifier.Terms.Term.state:type_name -> openconfig.Qos.Classifiers.Classifier.Terms.Term.State
	31,  // 25: openconfig.Qos.Classifiers.Classifier.Terms.TermKey.term:type_name -> openconfig.Qos.Classifiers.Classifier.Terms.Term
	37,  // 26: openconfig.Qos.Classifiers.Classifier.Terms.Term.Actions.config:type_name -> openconfig.Qos.Classifiers.Classifier.Terms.Term.Actions.Config
	38,  // 27: openconfig.Qos.Classifiers.Classifier.Terms.Term.Actions.remark:type_name -> openconfig.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark
	39,  // 28: openconfig.Qos.Classifiers.Classifier.Terms.Term.Actions.state:type_name -> openconfig.Qos.Classifiers.Classifier.Terms.Term.Actions.State
	42,  // 29: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.ipv4:type_name -> openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4
	43,  // 30: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.ipv6:type_name -> openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6
	44,  // 31: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.l2:type_name -> openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2
	45,  // 32: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.mpls:type_name -> openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls
	46,  // 33: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.transport:type_name -> openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport
	179, // 34: openconfig.Qos.Classifiers.Classifier.Terms.Term.Config.id:type_name -> ywrapper.StringValue
	179, // 35: openconfig.Qos.Classifiers.Classifier.Terms.Term.State.id:type_name -> ywrapper.StringValue
	179, // 36: openconfig.Qos.Classifiers.Classifier.Terms.Term.Actions.Config.target_group:type_name -> ywrapper.StringValue
	40,  // 37: openconfig.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.config:type_name -> openconfig.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.Config
	41,  // 38: openconfig.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.state:type_name -> openconfig.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.State
	179, // 39: openconfig.Qos.Classifiers.Classifier.Terms.Term.Actions.State.target_group:type_name -> ywrapper.StringValue
	180, // 40: openconfig.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.Config.set_dot1p:type_name -> ywrapper.UintValue
	180, // 41: openconfig.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.Config.set_dscp:type_name -> ywrapper.UintValue
	180, // 42: openconfig.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.Config.set_mpls_tc:type_name -> ywrapper.UintValue
	180, // 43: openconfig.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.State.set_dot1p:type_name -> ywrapper.UintValue
	180, // 44: openconfig.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.State.set_dscp:type_name -> ywrapper.UintValue
	180, // 45: openconfig.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.State.set_mpls_tc:type_name -> ywrapper.UintValue
	47,  // 46: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.config:type_name -> openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.Config
	48,  // 47: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.state:type_name -> openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.State
	49,  // 48: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.config:type_name -> openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.Config
	50,  // 49: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.state:type_name -> openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.State
	51,  // 50: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.config:type_name -> openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.Config
	52,  // 51: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.state:type_name -> openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.State
	53,  // 52: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.config:type_name -> openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.Config
	54,  // 53: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.state:type_name -> openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.State
	55,  // 54: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.config:type_name -> openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config
	56,  // 55: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.state:type_name -> openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State
	179, // 56: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.Config.destination_address:type_name -> ywrapper.StringValue
	180, // 57: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.Config.dscp:type_name -> ywrapper.UintValue
	180, // 58: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.Config.hop_limit:type_name -> ywrapper.UintValue
	181, // 59: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.Config.protocol_openconfigpacketmatchtypesipprotocol:type_name -> openconfig.OpenconfigPacketMatchTypesIPPROTOCOL
	179, // 60: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.Config.source_address:type_name -> ywrapper.StringValue
	179, // 61: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.State.destination_address:type_name -> ywrapper.StringValue
	180, // 62: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.State.dscp:type_name -> ywrapper.UintValue
	180, // 63: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.State.hop_limit:type_name -> ywrapper.UintValue
	181, // 64: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.State.protocol_openconfigpacketmatchtypesipprotocol:type_name -> openconfig.OpenconfigPacketMatchTypesIPPROTOCOL
	179, // 65: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.State.source_address:type_name -> ywrapper.StringValue
	179, // 66: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.Config.destination_address:type_name -> ywrapper.StringValue
	180, // 67: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.Config.destination_flow_label:type_name -> ywrapper.UintValue
	180, // 68: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.Config.dscp:type_name -> ywrapper.UintValue
	180, // 69: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.Config.hop_limit:type_name -> ywrapper.UintValue
	181, // 70: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.Config.protocol_openconfigpacketmatchtypesipprotocol:type_name -> openconfig.OpenconfigPacketMatchTypesIPPROTOCOL
	179, // 71: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.Config.source_address:type_name -> ywrapper.StringValue
	180, // 72: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.Config.source_flow_label:type_name -> ywrapper.UintValue
	179, // 73: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.State.destination_address:type_name -> ywrapper.StringValue
	180, // 74: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.State.destination_flow_label:type_name -> ywrapper.UintValue
	180, // 75: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.State.dscp:type_name -> ywrapper.UintValue
	180, // 76: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.State.hop_limit:type_name -> ywrapper.UintValue
	181, // 77: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.State.protocol_openconfigpacketmatchtypesipprotocol:type_name -> openconfig.OpenconfigPacketMatchTypesIPPROTOCOL
	179, // 78: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.State.source_address:type_name -> ywrapper.StringValue
	180, // 79: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.State.source_flow_label:type_name -> ywrapper.UintValue
	179, // 80: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.Config.destination_mac:type_name -> ywrapper.StringValue
	179, // 81: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.Config.destination_mac_mask:type_name -> ywrapper.StringValue
	182, // 82: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.Config.ethertype_openconfigpacketmatchtypesethertype:type_name -> openconfig.OpenconfigPacketMatchTypesETHERTYPE
	179, // 83: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.Config.source_mac:type_name -> ywrapper.StringValue
	179, // 84: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.Config.source_mac_mask:type_name -> ywrapper.StringValue
	179, // 85: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.State.destination_mac:type_name -> ywrapper.StringValue
	179, // 86: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.State.destination_mac_mask:type_name -> ywrapper.StringValue
	182, // 87: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.State.ethertype_openconfigpacketmatchtypesethertype:type_name -> openconfig.OpenconfigPacketMatchTypesETHERTYPE
	179, // 88: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.State.source_mac:type_name -> ywrapper.StringValue
	179, // 89: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.State.source_mac_mask:type_name -> ywrapper.StringValue
	180, // 90: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.Config.traffic_class:type_name -> ywrapper.UintValue
	180, // 91: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.State.traffic_class:type_name -> ywrapper.UintValue
	2,   // 92: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config.destination_port_destinationport:type_name -> openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config.DestinationPort
	3,   // 93: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config.source_port_sourceport:type_name -> openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config.SourcePort
	183, // 94: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config.tcp_flags:type_name -> openconfig.OpenconfigPacketMatchTypesTCPFLAGS
	4,   // 95: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State.destination_port_destinationport:type_name -> openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State.DestinationPort
	5,   // 96: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State.source_port_sourceport:type_name -> openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State.SourcePort
	183, // 97: openconfig.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State.tcp_flags:type_name -> openconfig.OpenconfigPacketMatchTypesTCPFLAGS
	59,  // 98: openconfig.Qos.ForwardingGroups.ForwardingGroup.config:type_name -> openconfig.Qos.ForwardingGroups.ForwardingGroup.Config
	60,  // 99: openconfig.Qos.ForwardingGroups.ForwardingGroup.state:type_name -> openconfig.Qos.ForwardingGroups.ForwardingGroup.State
	57,  // 100: openconfig.Qos.ForwardingGroups.ForwardingGroupKey.forwarding_group:type_name -> openconfig.Qos.ForwardingGroups.ForwardingGroup
	180, // 101: openconfig.Qos.ForwardingGroups.ForwardingGroup.Config.fabric_priority:type_name -> ywrapper.UintValue
	179, // 102: openconfig.Qos.ForwardingGroups.ForwardingGroup.Config.name:type_name -> ywrapper.StringValue
	179, // 103: openconfig.Qos.ForwardingGroups.ForwardingGroup.Config.output_queue:type_name -> ywrapper.StringValue
	180, // 104: openconfig.Qos.ForwardingGroups.ForwardingGroup.State.fabric_priority:type_name -> ywrapper.UintValue
	179, // 105: openconfig.Qos.ForwardingGroups.ForwardingGroup.State.name:type_name -> ywrapper.StringValue
	179, // 106: openconfig.Qos.ForwardingGroups.ForwardingGroup.State.output_queue:type_name -> ywrapper.StringValue
	63,  // 107: openconfig.Qos.Interfaces.Interface.config:type_name -> openconfig.Qos.Interfaces.Interface.Config
	64,  // 108: openconfig.Qos.Interfaces.Interface.input:type_name -> openconfig.Qos.Interfaces.Interface.Input
	65,  // 109: openconfig.Qos.Interfaces.Interface.interface_ref:type_name -> openconfig.Qos.Interfaces.Interface.InterfaceRef
	66,  // 110: openconfig.Qos.Interfaces.Interface.output:type_name -> openconfig.Qos.Interfaces.Interface.Output
	67,  // 111: openconfig.Qos.Interfaces.Interface.state:type_name -> openconfig.Qos.Interfaces.Interface.State
	61,  // 112: openconfig.Qos.Interfaces.InterfaceKey.interface:type_name -> openconfig.Qos.Interfaces.Interface
	179, // 113: openconfig.Qos.Interfaces.Interface.Config.interface_id:type_name -> ywrapper.StringValue
	68,  // 114: openconfig.Qos.Interfaces.Interface.Input.classifiers:type_name -> openconfig.Qos.Interfaces.Interface.Input.Classifiers
	69,  // 115: openconfig.Qos.Interfaces.Interface.Input.config:type_name -> openconfig.Qos.Interfaces.Interface.Input.Config
	70,  // 116: openconfig.Qos.Interfaces.Interface.Input.queues:type_name -> openconfig.Qos.Interfaces.Interface.Input.Queues
	71,  // 117: openconfig.Qos.Interfaces.Interface.Input.scheduler_policy:type_name -> openconfig.Qos.Interfaces.Interface.Input.SchedulerPolicy
	72,  // 118: openconfig.Qos.Interfaces.Interface.Input.state:type_name -> openconfig.Qos.Interfaces.Interface.Input.State
	73,  // 119: openconfig.Qos.Interfaces.Interface.Input.virtual_output_queues:type_name -> openconfig.Qos.Interfaces.Interface.Input.VirtualOutputQueues
	102, // 120: openconfig.Qos.Interfaces.Interface.InterfaceRef.config:type_name -> openconfig.Qos.Interfaces.Interface.InterfaceRef.Config
	103, // 121: openconfig.Qos.Interfaces.Interface.InterfaceRef.state:type_name -> openconfig.Qos.Interfaces.Interface.InterfaceRef.State
	104, // 122: openconfig.Qos.Interfaces.Interface.Output.classifiers:type_name -> openconfig.Qos.Interfaces.Interface.Output.Classifiers
	105, // 123: openconfig.Qos.Interfaces.Interface.Output.config:type_name -> openconfig.Qos.Interfaces.Interface.Output.Config
	106, // 124: openconfig.Qos.Interfaces.Interface.Output.interface_ref:type_name -> openconfig.Qos.Interfaces.Interface.Output.InterfaceRef
	107, // 125: openconfig.Qos.Interfaces.Interface.Output.queues:type_name -> openconfig.Qos.Interfaces.Interface.Output.Queues
	108, // 126: openconfig.Qos.Interfaces.Interface.Output.scheduler_policy:type_name -> openconfig.Qos.Interfaces.Interface.Output.SchedulerPolicy
	109, // 127: openconfig.Qos.Interfaces.Interface.Output.state:type_name -> openconfig.Qos.Interfaces.Interface.Output.State
	179, // 128: openconfig.Qos.Interfaces.Interface.State.interface_id:type_name -> ywrapper.StringValue
	75,  // 129: openconfig.Qos.Interfaces.Interface.Input.Classifiers.classifier:type_name -> openconfig.Qos.Interfaces.Interface.Input.Classifiers.ClassifierKey
	84,  // 130: openconfig.Qos.Interfaces.Interface.Input.Queues.queue:type_name -> openconfig.Qos.Interfaces.Interface.Input.Queues.QueueKey
	87,  // 131: openconfig.Qos.Interfaces.Interface.Input.SchedulerPolicy.config:type_name -> openconfig.Qos.Interfaces.Interface.Input.SchedulerPolicy.Config
	88,  // 132: openconfig.Qos.Interfaces.Interface.Input.SchedulerPolicy.schedulers:type_name -> openconfig.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers
	89,  // 133: openconfig.Qos.Interfaces.Interface.Input.SchedulerPolicy.state:type_name -> openconfig.Qos.Interfaces.Interface.Input.SchedulerPolicy.State
	94,  // 134: openconfig.Qos.Interfaces.Interface.Input.VirtualOutputQueues.voq_interface:type_name -> openconfig.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterfaceKey
	76,  // 135: openconfig.Qos.Interfaces.Interface.Input.Classifiers.Classifier.config:type_name -> openconfig.Qos.Interfaces.Interface.Input.Classifiers.Classifier.Config
	77,  // 136: openconfig.Qos.Interfaces.Interface.Input.Classifiers.Classifier.state:type_name -> openconfig.Qos.Interfaces.Interface.Input.Classifiers.Classifier.State
	78,  // 137: openconfig.Qos.Interfaces.Interface.Input.Classifiers.Classifier.terms:type_name -> openconfig.Qos.Interfaces.Interface.Input.Classifiers.Classifier.Terms
	8,   // 138: openconfig.Qos.Interfaces.Interface.Input.Classifiers.ClassifierKey.type:type_name -> openconfig.Qos.Interfaces.Interface.Input.Classifiers.ClassifierKey.Type
	74,  // 139: openconfig.Qos.Interfaces.Interface.Input.Classifiers.ClassifierKey.classifier:type_name -> openconfig.Qos.Interfaces.Interface.Input.Classifiers.Classifier
	179, // 140: openconfig.Qos.Interfaces.Interface.Input.Classifiers.Classifier.Config.name:type_name -> ywrapper.StringValue
	6,   // 141: openconfig.Qos.Interfaces.Interface.Input.Classifiers.Classifier.Config.type:type_name -> openconfig.Qos.Interfaces.Interface.Input.Classifiers.Classifier.Config.Type
	179, // 142: openconfig.Qos.Interfaces.Interface.Input.Classifiers.Classifier.State.name:type_name -> ywrapper.StringValue
	7,   // 143: openconfig.Qos.Interfaces.Interface.Input.Classifiers.Classifier.State.type:type_name -> openconfig.Qos.Interfaces.Interface.Input.Classifiers.Classifier.State.Type
	80,  // 144: openconfig.Qos.Interfaces.Interface.Input.Classifiers.Classifier.Terms.term:type_name -> openconfig.Qos.Interfaces.Interface.Input.Classifiers.Classifier.Terms.TermKey
	81,  // 145: openconfig.Qos.Interfaces.Interface.Input.Classifiers.Classifier.Terms.Term.config:type_name -> openconfig.Qos.Interfaces.Interface.Input.Classifiers.Classifier.Terms.Term.Config
	82,  // 146: openconfig.Qos.Interfaces.Interface.Input.Classifiers.Classifier.Terms.Term.state:type_name -> openconfig.Qos.Interfaces.Interface.Input.Classifiers.Classifier.Terms.Term.State
	79,  // 147: openconfig.Qos.Interfaces.Interface.Input.Classifiers.Classifier.Terms.TermKey.term:type_name -> openconfig.Qos.Interfaces.Interface.Input.Classifiers.Classifier.Terms.Term
	179, // 148: openconfig.Qos.Interfaces.Interface.Input.Classifiers.Classifier.Terms.Term.Config.id:type_name -> ywrapper.StringValue
	179, // 149: openconfig.Qos.Interfaces.Interface.Input.Classifiers.Classifier.Terms.Term.State.id:type_name -> ywrapper.StringValue
	180, // 150: openconfig.Qos.Interfaces.Interface.Input.Classifiers.Classifier.Terms.Term.State.matched_octets:type_name -> ywrapper.UintValue
	180, // 151: openconfig.Qos.Interfaces.Interface.Input.Classifiers.Classifier.Terms.Term.State.matched_packets:type_name -> ywrapper.UintValue
	85,  // 152: openconfig.Qos.Interfaces.Interface.Input.Queues.Queue.config:type_name -> openconfig.Qos.Interfaces.Interface.Input.Queues.Queue.Config
	86,  // 153: openconfig.Qos.Interfaces.Interface.Input.Queues.Queue.state:type_name -> openconfig.Qos.Interfaces.Interface.Input.Queues.Queue.State
	83,  // 154: openconfig.Qos.Interfaces.Interface.Input.Queues.QueueKey.queue:type_name -> openconfig.Qos.Interfaces.Interface.Input.Queues.Queue
	179, // 155: openconfig.Qos.Interfaces.Interface.Input.Queues.Queue.Config.name:type_name -> ywrapper.StringValue
	180, // 156: openconfig.Qos.Interfaces.Interface.Input.Queues.Queue.State.avg_queue_len:type_name -> ywrapper.UintValue
	180, // 157: openconfig.Qos.Interfaces.Interface.Input.Queues.Queue.State.dropped_pkts:type_name -> ywrapper.UintValue
	180, // 158: openconfig.Qos.Interfaces.Interface.Input.Queues.Queue.State.max_queue_len:type_name -> ywrapper.UintValue
	179, // 159: openconfig.Qos.Interfaces.Interface.Input.Queues.Queue.State.name:type_name -> ywrapper.StringValue
	180, // 160: openconfig.Qos.Interfaces.Interface.Input.Queues.Queue.State.transmit_octets:type_name -> ywrapper.UintValue
	180, // 161: openconfig.Qos.Interfaces.Interface.Input.Queues.Queue.State.transmit_pkts:type_name -> ywrapper.UintValue
	179, // 162: openconfig.Qos.Interfaces.Interface.Input.SchedulerPolicy.Config.name:type_name -> ywrapper.StringValue
	91,  // 163: openconfig.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.scheduler:type_name -> openconfig.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.SchedulerKey
	179, // 164: openconfig.Qos.Interfaces.Interface.Input.SchedulerPolicy.State.name:type_name -> ywrapper.StringValue
	92,  // 165: openconfig.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler.state:type_name -> openconfig.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler.State
	90,  // 166: openconfig.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.SchedulerKey.scheduler:type_name -> openconfig.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler
	180, // 167: openconfig.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler.State.conforming_octets:type_name -> ywrapper.UintValue
	180, // 168: openconfig.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler.State.conforming_pkts:type_name -> ywrapper.UintValue
	180, // 169: openconfig.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler.State.exceeding_octets:type_name -> ywrapper.UintValue
	180, // 170: openconfig.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler.State.exceeding_pkts:type_name -> ywrapper.UintValue
	180, // 171: openconfig.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler.State.sequence:type_name -> ywrapper.UintValue
	180, // 172: openconfig.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler.State.violating_octets:type_name -> ywrapper.UintValue
	180, // 173: openconfig.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler.State.violating_pkts:type_name -> ywrapper.UintValue
	95,  // 174: openconfig.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.config:type_name -> openconfig.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Config
	96,  // 175: openconfig.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.queues:type_name -> openconfig.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues
	97,  // 176: openconfig.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.state:type_name -> openconfig.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.State
	93,  // 177: openconfig.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterfaceKey.voq_interface:type_name -> openconfig.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface
	179, // 178: openconfig.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Config.name:type_name -> ywrapper.StringValue
	99,  // 179: openconfig.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.queue:type_name -> openconfig.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.QueueKey
	179, // 180: openconfig.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.State.name:type_name -> ywrapper.StringValue
	100, // 181: openconfig.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.config:type_name -> openconfig.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.Config
	101, // 182: openconfig.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.state:type_name -> openconfig.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.State
	98,  // 183: openconfig.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.QueueKey.queue:type_name -> openconfig.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue
	179, // 184: openconfig.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.Config.name:type_name -> ywrapper.StringValue
	180, // 185: openconfig.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.State.avg_queue_len:type_name -> ywrapper.UintValue
	180, // 186: openconfig.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.State.dropped_pkts:type_name -> ywrapper.UintValue
	180, // 187: openconfig.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.State.max_queue_len:type_name -> ywrapper.UintValue
	179, // 188: openconfig.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.State.name:type_name -> ywrapper.StringValue
	180, // 189: openconfig.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.State.transmit_octets:type_name -> ywrapper.UintValue
	180, // 190: openconfig.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.State.transmit_pkts:type_name -> ywrapper.UintValue
	179, // 191: openconfig.Qos.Interfaces.Interface.InterfaceRef.Config.interface:type_name -> ywrapper.StringValue
	180, // 192: openconfig.Qos.Interfaces.Interface.InterfaceRef.Config.subinterface:type_name -> ywrapper.UintValue
	179, // 193: openconfig.Qos.Interfaces.Interface.InterfaceRef.State.interface:type_name -> ywrapper.StringValue
	180, // 194: openconfig.Qos.Interfaces.Interface.InterfaceRef.State.subinterface:type_name -> ywrapper.UintValue
	111, // 195: openconfig.Qos.Interfaces.Interface.Output.Classifiers.classifier:type_name -> openconfig.Qos.Interfaces.Interface.Output.Classifiers.ClassifierKey
	119, // 196: openconfig.Qos.Interfaces.Interface.Output.InterfaceRef.config:type_name -> openconfig.Qos.Interfaces.Interface.Output.InterfaceRef.Config
	120, // 197: openconfig.Qos.Interfaces.Interface.Output.InterfaceRef.state:type_name -> openconfig.Qos.Interfaces.Interface.Output.InterfaceRef.State
	122, // 198: openconfig.Qos.Interfaces.Interface.Output.Queues.queue:type_name -> openconfig.Qos.Interfaces.Interface.Output.Queues.QueueKey
	125, // 199: openconfig.Qos.Interfaces.Interface.Output.SchedulerPolicy.config:type_name -> openconfig.Qos.Interfaces.Interface.Output.SchedulerPolicy.Config
	126, // 200: openconfig.Qos.Interfaces.Interface.Output.SchedulerPolicy.schedulers:type_name -> openconfig.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers
	127, // 201: openconfig.Qos.Interfaces.Interface.Output.SchedulerPolicy.state:type_name -> openconfig.Qos.Interfaces.Interface.Output.SchedulerPolicy.State
	112, // 202: openconfig.Qos.Interfaces.Interface.Output.Classifiers.Classifier.config:type_name -> openconfig.Qos.Interfaces.Interface.Output.Classifiers.Classifier.Config
	113, // 203: openconfig.Qos.Interfaces.Interface.Output.Classifiers.Classifier.state:type_name -> openconfig.Qos.Interfaces.Interface.Output.Classifiers.Classifier.State
	114, // 204: openconfig.Qos.Interfaces.Interface.Output.Classifiers.Classifier.terms:type_name -> openconfig.Qos.Interfaces.Interface.Output.Classifiers.Classifier.Terms
	11,  // 205: openconfig.Qos.Interfaces.Interface.Output.Classifiers.ClassifierKey.type:type_name -> openconfig.Qos.Interfaces.Interface.Output.Classifiers.ClassifierKey.Type
	110, // 206: openconfig.Qos.Interfaces.Interface.Output.Classifiers.ClassifierKey.classifier:type_name -> openconfig.Qos.Interfaces.Interface.Output.Classifiers.Classifier
	179, // 207: openconfig.Qos.Interfaces.Interface.Output.Classifiers.Classifier.Config.name:type_name -> ywrapper.StringValue
	9,   // 208: openconfig.Qos.Interfaces.Interface.Output.Classifiers.Classifier.Config.type:type_name -> openconfig.Qos.Interfaces.Interface.Output.Classifiers.Classifier.Config.Type
	179, // 209: openconfig.Qos.Interfaces.Interface.Output.Classifiers.Classifier.State.name:type_name -> ywrapper.StringValue
	10,  // 210: openconfig.Qos.Interfaces.Interface.Output.Classifiers.Classifier.State.type:type_name -> openconfig.Qos.Interfaces.Interface.Output.Classifiers.Classifier.State.Type
	116, // 211: openconfig.Qos.Interfaces.Interface.Output.Classifiers.Classifier.Terms.term:type_name -> openconfig.Qos.Interfaces.Interface.Output.Classifiers.Classifier.Terms.TermKey
	117, // 212: openconfig.Qos.Interfaces.Interface.Output.Classifiers.Classifier.Terms.Term.config:type_name -> openconfig.Qos.Interfaces.Interface.Output.Classifiers.Classifier.Terms.Term.Config
	118, // 213: openconfig.Qos.Interfaces.Interface.Output.Classifiers.Classifier.Terms.Term.state:type_name -> openconfig.Qos.Interfaces.Interface.Output.Classifiers.Classifier.Terms.Term.State
	115, // 214: openconfig.Qos.Interfaces.Interface.Output.Classifiers.Classifier.Terms.TermKey.term:type_name -> openconfig.Qos.Interfaces.Interface.Output.Classifiers.Classifier.Terms.Term
	179, // 215: openconfig.Qos.Interfaces.Interface.Output.Classifiers.Classifier.Terms.Term.Config.id:type_name -> ywrapper.StringValue
	179, // 216: openconfig.Qos.Interfaces.Interface.Output.Classifiers.Classifier.Terms.Term.State.id:type_name -> ywrapper.StringValue
	180, // 217: openconfig.Qos.Interfaces.Interface.Output.Classifiers.Classifier.Terms.Term.State.matched_octets:type_name -> ywrapper.UintValue
	180, // 218: openconfig.Qos.Interfaces.Interface.Output.Classifiers.Classifier.Terms.Term.State.matched_packets:type_name -> ywrapper.UintValue
	179, // 219: openconfig.Qos.Interfaces.Interface.Output.InterfaceRef.Config.interface:type_name -> ywrapper.StringValue
	180, // 220: openconfig.Qos.Interfaces.Interface.Output.InterfaceRef.Config.subinterface:type_name -> ywrapper.UintValue
	179, // 221: openconfig.Qos.Interfaces.Interface.Output.InterfaceRef.State.interface:type_name -> ywrapper.StringValue
	180, // 222: openconfig.Qos.Interfaces.Interface.Output.InterfaceRef.State.subinterface:type_name -> ywrapper.UintValue
	123, // 223: openconfig.Qos.Interfaces.Interface.Output.Queues.Queue.config:type_name -> openconfig.Qos.Interfaces.Interface.Output.Queues.Queue.Config
	124, // 224: openconfig.Qos.Interfaces.Interface.Output.Queues.Queue.state:type_name -> openconfig.Qos.Interfaces.Interface.Output.Queues.Queue.State
	121, // 225: openconfig.Qos.Interfaces.Interface.Output.Queues.QueueKey.queue:type_name -> openconfig.Qos.Interfaces.Interface.Output.Queues.Queue
	179, // 226: openconfig.Qos.Interfaces.Interface.Output.Queues.Queue.Config.name:type_name -> ywrapper.StringValue
	180, // 227: openconfig.Qos.Interfaces.Interface.Output.Queues.Queue.State.avg_queue_len:type_name -> ywrapper.UintValue
	180, // 228: openconfig.Qos.Interfaces.Interface.Output.Queues.Queue.State.dropped_pkts:type_name -> ywrapper.UintValue
	180, // 229: openconfig.Qos.Interfaces.Interface.Output.Queues.Queue.State.max_queue_len:type_name -> ywrapper.UintValue
	179, // 230: openconfig.Qos.Interfaces.Interface.Output.Queues.Queue.State.name:type_name -> ywrapper.StringValue
	180, // 231: openconfig.Qos.Interfaces.Interface.Output.Queues.Queue.State.transmit_octets:type_name -> ywrapper.UintValue
	180, // 232: openconfig.Qos.Interfaces.Interface.Output.Queues.Queue.State.transmit_pkts:type_name -> ywrapper.UintValue
	179, // 233: openconfig.Qos.Interfaces.Interface.Output.SchedulerPolicy.Config.name:type_name -> ywrapper.StringValue
	129, // 234: openconfig.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.scheduler:type_name -> openconfig.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.SchedulerKey
	179, // 235: openconfig.Qos.Interfaces.Interface.Output.SchedulerPolicy.State.name:type_name -> ywrapper.StringValue
	130, // 236: openconfig.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler.state:type_name -> openconfig.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler.State
	128, // 237: openconfig.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.SchedulerKey.scheduler:type_name -> openconfig.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler
	180, // 238: openconfig.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler.State.conforming_octets:type_name -> ywrapper.UintValue
	180, // 239: openconfig.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler.State.conforming_pkts:type_name -> ywrapper.UintValue
	180, // 240: openconfig.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler.State.exceeding_octets:type_name -> ywrapper.UintValue
	180, // 241: openconfig.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler.State.exceeding_pkts:type_name -> ywrapper.UintValue
	180, // 242: openconfig.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler.State.sequence:type_name -> ywrapper.UintValue
	180, // 243: openconfig.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler.State.violating_octets:type_name -> ywrapper.UintValue
	180, // 244: openconfig.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler.State.violating_pkts:type_name -> ywrapper.UintValue
	133, // 245: openconfig.Qos.Queues.Queue.config:type_name -> openconfig.Qos.Queues.Queue.Config
	134, // 246: openconfig.Qos.Queues.Queue.red:type_name -> openconfig.Qos.Queues.Queue.Red
	135, // 247: openconfig.Qos.Queues.Queue.state:type_name -> openconfig.Qos.Queues.Queue.State
	136, // 248: openconfig.Qos.Queues.Queue.wred:type_name -> openconfig.Qos.Queues.Queue.Wred
	131, // 249: openconfig.Qos.Queues.QueueKey.queue:type_name -> openconfig.Qos.Queues.Queue
	179, // 250: openconfig.Qos.Queues.Queue.Config.name:type_name -> ywrapper.StringValue
	184, // 251: openconfig.Qos.Queues.Queue.Config.queue_type:type_name -> openconfig.OpenconfigQosTypesQOSQUEUETYPE
	137, // 252: openconfig.Qos.Queues.Queue.Red.config:type_name -> openconfig.Qos.Queues.Queue.Red.Config
	138, // 253: openconfig.Qos.Queues.Queue.Red.state:type_name -> openconfig.Qos.Queues.Queue.Red.State
	179, // 254: openconfig.Qos.Queues.Queue.State.name:type_name -> ywrapper.StringValue
	184, // 255: openconfig.Qos.Queues.Queue.State.queue_type:type_name -> openconfig.OpenconfigQosTypesQOSQUEUETYPE
	139, // 256: openconfig.Qos.Queues.Queue.Wred.config:type_name -> openconfig.Qos.Queues.Queue.Wred.Config
	140, // 257: openconfig.Qos.Queues.Queue.Wred.state:type_name -> openconfig.Qos.Queues.Queue.Wred.State
	180, // 258: openconfig.Qos.Queues.Queue.Red.Config.maxth:type_name -> ywrapper.UintValue
	180, // 259: openconfig.Qos.Queues.Queue.Red.Config.minth:type_name -> ywrapper.UintValue
	180, // 260: openconfig.Qos.Queues.Queue.Red.State.maxth:type_name -> ywrapper.UintValue
	180, // 261: openconfig.Qos.Queues.Queue.Red.State.minth:type_name -> ywrapper.UintValue
	143, // 262: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.config:type_name -> openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Config
	144, // 263: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.schedulers:type_name -> openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers
	145, // 264: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.state:type_name -> openconfig.Qos.SchedulerPolicies.SchedulerPolicy.State
	141, // 265: openconfig.Qos.SchedulerPolicies.SchedulerPolicyKey.scheduler_policy:type_name -> openconfig.Qos.SchedulerPolicies.SchedulerPolicy
	179, // 266: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Config.name:type_name -> ywrapper.StringValue
	147, // 267: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.scheduler:type_name -> openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.SchedulerKey
	179, // 268: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.State.name:type_name -> ywrapper.StringValue
	148, // 269: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.config:type_name -> openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Config
	149, // 270: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.inputs:type_name -> openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs
	150, // 271: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.one_rate_two_color:type_name -> openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor
	151, // 272: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.output:type_name -> openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output
	152, // 273: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.state:type_name -> openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.State
	153, // 274: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.two_rate_three_color:type_name -> openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor
	146, // 275: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.SchedulerKey.scheduler:type_name -> openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler
	12,  // 276: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Config.priority:type_name -> openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Config.Priority
	180, // 277: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Config.sequence:type_name -> ywrapper.UintValue
	185, // 278: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Config.type:type_name -> openconfig.OpenconfigQosTypesQOSSCHEDULERTYPE
	155, // 279: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.input:type_name -> openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.InputKey
	158, // 280: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.config:type_name -> openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.Config
	159, // 281: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.conform_action:type_name -> openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction
	160, // 282: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.exceed_action:type_name -> openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction
	161, // 283: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.state:type_name -> openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.State
	166, // 284: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.config:type_name -> openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.Config
	167, // 285: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.state:type_name -> openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.State
	17,  // 286: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.State.priority:type_name -> openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.State.Priority
	180, // 287: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.State.sequence:type_name -> ywrapper.UintValue
	185, // 288: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.State.type:type_name -> openconfig.OpenconfigQosTypesQOSSCHEDULERTYPE
	168, // 289: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.config:type_name -> openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.Config
	169, // 290: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.conform_action:type_name -> openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction
	170, // 291: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.exceed_action:type_name -> openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction
	171, // 292: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.state:type_name -> openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.State
	172, // 293: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.violate_action:type_name -> openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction
	156, // 294: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.config:type_name -> openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.Config
	157, // 295: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.state:type_name -> openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.State
	154, // 296: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.InputKey.input:type_name -> openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input
	179, // 297: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.Config.id:type_name -> ywrapper.StringValue
	13,  // 298: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.Config.input_type:type_name -> openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.Config.InputType
	179, // 299: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.Config.queue:type_name -> ywrapper.StringValue
	180, // 300: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.Config.weight:type_name -> ywrapper.UintValue
	179, // 301: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.State.id:type_name -> ywrapper.StringValue
	14,  // 302: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.State.input_type:type_name -> openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.State.InputType
	179, // 303: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.State.queue:type_name -> ywrapper.StringValue
	180, // 304: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.State.weight:type_name -> ywrapper.UintValue
	180, // 305: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.Config.bc:type_name -> ywrapper.UintValue
	180, // 306: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.Config.cir:type_name -> ywrapper.UintValue
	180, // 307: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.Config.cir_pct:type_name -> ywrapper.UintValue
	180, // 308: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.Config.cir_pct_remaining:type_name -> ywrapper.UintValue
	180, // 309: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.Config.max_queue_depth_bytes:type_name -> ywrapper.UintValue
	180, // 310: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.Config.max_queue_depth_packets:type_name -> ywrapper.UintValue
	180, // 311: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.Config.max_queue_depth_percent:type_name -> ywrapper.UintValue
	186, // 312: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.Config.queuing_behavior:type_name -> openconfig.OpenconfigQosQueueBehavior
	162, // 313: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.config:type_name -> openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.Config
	163, // 314: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.state:type_name -> openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.State
	164, // 315: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.config:type_name -> openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.Config
	165, // 316: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.state:type_name -> openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.State
	180, // 317: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.State.bc:type_name -> ywrapper.UintValue
	180, // 318: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.State.cir:type_name -> ywrapper.UintValue
	180, // 319: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.State.cir_pct:type_name -> ywrapper.UintValue
	180, // 320: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.State.cir_pct_remaining:type_name -> ywrapper.UintValue
	180, // 321: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.State.max_queue_depth_bytes:type_name -> ywrapper.UintValue
	180, // 322: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.State.max_queue_depth_packets:type_name -> ywrapper.UintValue
	180, // 323: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.State.max_queue_depth_percent:type_name -> ywrapper.UintValue
	186, // 324: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.State.queuing_behavior:type_name -> openconfig.OpenconfigQosQueueBehavior
	180, // 325: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.Config.set_dot1p:type_name -> ywrapper.UintValue
	180, // 326: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.Config.set_dscp:type_name -> ywrapper.UintValue
	180, // 327: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.Config.set_mpls_tc:type_name -> ywrapper.UintValue
	180, // 328: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.State.set_dot1p:type_name -> ywrapper.UintValue
	180, // 329: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.State.set_dscp:type_name -> ywrapper.UintValue
	180, // 330: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.State.set_mpls_tc:type_name -> ywrapper.UintValue
	187, // 331: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.Config.drop:type_name -> ywrapper.BoolValue
	180, // 332: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.Config.set_dot1p:type_name -> ywrapper.UintValue
	180, // 333: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.Config.set_dscp:type_name -> ywrapper.UintValue
	180, // 334: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.Config.set_mpls_tc:type_name -> ywrapper.UintValue
	187, // 335: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.State.drop:type_name -> ywrapper.BoolValue
	180, // 336: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.State.set_dot1p:type_name -> ywrapper.UintValue
	180, // 337: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.State.set_dscp:type_name -> ywrapper.UintValue
	180, // 338: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.State.set_mpls_tc:type_name -> ywrapper.UintValue
	179, // 339: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.Config.child_scheduler:type_name -> ywrapper.StringValue
	179, // 340: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.Config.output_fwd_group:type_name -> ywrapper.StringValue
	15,  // 341: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.Config.output_type:type_name -> openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.Config.OutputType
	179, // 342: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.State.child_scheduler:type_name -> ywrapper.StringValue
	179, // 343: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.State.output_fwd_group:type_name -> ywrapper.StringValue
	16,  // 344: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.State.output_type:type_name -> openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.State.OutputType
	180, // 345: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.Config.bc:type_name -> ywrapper.UintValue
	180, // 346: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.Config.be:type_name -> ywrapper.UintValue
	180, // 347: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.Config.cir:type_name -> ywrapper.UintValue
	180, // 348: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.Config.cir_pct:type_name -> ywrapper.UintValue
	180, // 349: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.Config.cir_pct_remaining:type_name -> ywrapper.UintValue
	180, // 350: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.Config.pir:type_name -> ywrapper.UintValue
	180, // 351: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.Config.pir_pct:type_name -> ywrapper.UintValue
	180, // 352: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.Config.pir_pct_remaining:type_name -> ywrapper.UintValue
	173, // 353: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.config:type_name -> openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.Config
	174, // 354: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.state:type_name -> openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.State
	175, // 355: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.config:type_name -> openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.Config
	176, // 356: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.state:type_name -> openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.State
	180, // 357: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.State.bc:type_name -> ywrapper.UintValue
	180, // 358: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.State.be:type_name -> ywrapper.UintValue
	180, // 359: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.State.cir:type_name -> ywrapper.UintValue
	180, // 360: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.State.cir_pct:type_name -> ywrapper.UintValue
	180, // 361: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.State.cir_pct_remaining:type_name -> ywrapper.UintValue
	180, // 362: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.State.pir:type_name -> ywrapper.UintValue
	180, // 363: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.State.pir_pct:type_name -> ywrapper.UintValue
	180, // 364: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.State.pir_pct_remaining:type_name -> ywrapper.UintValue
	177, // 365: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.config:type_name -> openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.Config
	178, // 366: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.state:type_name -> openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.State
	180, // 367: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.Config.set_dot1p:type_name -> ywrapper.UintValue
	180, // 368: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.Config.set_dscp:type_name -> ywrapper.UintValue
	180, // 369: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.Config.set_mpls_tc:type_name -> ywrapper.UintValue
	180, // 370: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.State.set_dot1p:type_name -> ywrapper.UintValue
	180, // 371: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.State.set_dscp:type_name -> ywrapper.UintValue
	180, // 372: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.State.set_mpls_tc:type_name -> ywrapper.UintValue
	187, // 373: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.Config.drop:type_name -> ywrapper.BoolValue
	180, // 374: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.Config.set_dot1p:type_name -> ywrapper.UintValue
	180, // 375: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.Config.set_dscp:type_name -> ywrapper.UintValue
	180, // 376: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.Config.set_mpls_tc:type_name -> ywrapper.UintValue
	187, // 377: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.State.drop:type_name -> ywrapper.BoolValue
	180, // 378: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.State.set_dot1p:type_name -> ywrapper.UintValue
	180, // 379: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.State.set_dscp:type_name -> ywrapper.UintValue
	180, // 380: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.State.set_mpls_tc:type_name -> ywrapper.UintValue
	187, // 381: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.Config.drop:type_name -> ywrapper.BoolValue
	180, // 382: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.Config.set_dot1p:type_name -> ywrapper.UintValue
	180, // 383: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.Config.set_dscp:type_name -> ywrapper.UintValue
	180, // 384: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.Config.set_mpls_tc:type_name -> ywrapper.UintValue
	187, // 385: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.State.drop:type_name -> ywrapper.BoolValue
	180, // 386: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.State.set_dot1p:type_name -> ywrapper.UintValue
	180, // 387: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.State.set_dscp:type_name -> ywrapper.UintValue
	180, // 388: openconfig.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.State.set_mpls_tc:type_name -> ywrapper.UintValue
	389, // [389:389] is the sub-list for method output_type
	389, // [389:389] is the sub-list for method input_type
	389, // [389:389] is the sub-list for extension type_name
	389, // [389:389] is the sub-list for extension extendee
	0,   // [0:389] is the sub-list for field type_name
}

func init() { file_openconfig_qos_proto_init() }
func file_openconfig_qos_proto_init() {
	if File_openconfig_qos_proto != nil {
		return
	}
	file_openconfig_enums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_openconfig_qos_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Classifiers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ForwardingGroups); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Interfaces); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Queues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_SchedulerPolicies); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Classifiers_Classifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Classifiers_ClassifierKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Classifiers_Classifier_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Classifiers_Classifier_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Classifiers_Classifier_Terms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Classifiers_Classifier_Terms_Term); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Classifiers_Classifier_Terms_TermKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Classifiers_Classifier_Terms_Term_Actions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Classifiers_Classifier_Terms_Term_Conditions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Classifiers_Classifier_Terms_Term_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Classifiers_Classifier_Terms_Term_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Classifiers_Classifier_Terms_Term_Actions_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Classifiers_Classifier_Terms_Term_Actions_Remark); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Classifiers_Classifier_Terms_Term_Actions_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Classifiers_Classifier_Terms_Term_Conditions_L2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ForwardingGroups_ForwardingGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ForwardingGroups_ForwardingGroupKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ForwardingGroups_ForwardingGroup_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ForwardingGroups_ForwardingGroup_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Interfaces_Interface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Interfaces_InterfaceKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Interfaces_Interface_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Interfaces_Interface_Input); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Interfaces_Interface_InterfaceRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Interfaces_Interface_Output); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Interfaces_Interface_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Interfaces_Interface_Input_Classifiers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Interfaces_Interface_Input_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Interfaces_Interface_Input_Queues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Interfaces_Interface_Input_SchedulerPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Interfaces_Interface_Input_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Interfaces_Interface_Input_VirtualOutputQueues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Interfaces_Interface_Input_Classifiers_Classifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Interfaces_Interface_Input_Classifiers_ClassifierKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Interfaces_Interface_Input_Classifiers_Classifier_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Interfaces_Interface_Input_Classifiers_Classifier_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Interfaces_Interface_Input_Classifiers_Classifier_Terms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Interfaces_Interface_Input_Classifiers_Classifier_Terms_Term); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Interfaces_Interface_Input_Classifiers_Classifier_Terms_TermKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Interfaces_Interface_Input_Classifiers_Classifier_Terms_Term_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Interfaces_Interface_Input_Classifiers_Classifier_Terms_Term_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Interfaces_Interface_Input_Queues_Queue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Interfaces_Interface_Input_Queues_QueueKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Interfaces_Interface_Input_Queues_Queue_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Interfaces_Interface_Input_Queues_Queue_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Interfaces_Interface_Input_SchedulerPolicy_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Interfaces_Interface_Input_SchedulerPolicy_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Interfaces_Interface_InterfaceRef_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Interfaces_Interface_InterfaceRef_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Interfaces_Interface_Output_Classifiers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Interfaces_Interface_Output_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Interfaces_Interface_Output_InterfaceRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Interfaces_Interface_Output_Queues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Interfaces_Interface_Output_SchedulerPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Interfaces_Interface_Output_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Interfaces_Interface_Output_Classifiers_Classifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Interfaces_Interface_Output_Classifiers_ClassifierKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Interfaces_Interface_Output_Classifiers_Classifier_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Interfaces_Interface_Output_Classifiers_Classifier_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Interfaces_Interface_Output_Classifiers_Classifier_Terms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Interfaces_Interface_Output_Classifiers_Classifier_Terms_Term); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Interfaces_Interface_Output_Classifiers_Classifier_Terms_TermKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Interfaces_Interface_Output_Classifiers_Classifier_Terms_Term_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Interfaces_Interface_Output_Classifiers_Classifier_Terms_Term_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Interfaces_Interface_Output_InterfaceRef_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Interfaces_Interface_Output_InterfaceRef_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Interfaces_Interface_Output_Queues_Queue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Interfaces_Interface_Output_Queues_QueueKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Interfaces_Interface_Output_Queues_Queue_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Interfaces_Interface_Output_Queues_Queue_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Interfaces_Interface_Output_SchedulerPolicy_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Interfaces_Interface_Output_SchedulerPolicy_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Queues_Queue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Queues_QueueKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Queues_Queue_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Queues_Queue_Red); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Queues_Queue_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Queues_Queue_Wred); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Queues_Queue_Red_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Queues_Queue_Red_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Queues_Queue_Wred_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Queues_Queue_Wred_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_SchedulerPolicies_SchedulerPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_SchedulerPolicies_SchedulerPolicyKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_SchedulerPolicies_SchedulerPolicy_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_SchedulerPolicies_SchedulerPolicy_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_qos_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_openconfig_qos_proto_msgTypes[29].OneofWrappers = []interface{}{
		(*Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config_ProtocolOpenconfigpacketmatchtypesipprotocol)(nil),
		(*Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config_ProtocolUint64)(nil),
	}
	file_openconfig_qos_proto_msgTypes[30].OneofWrappers = []interface{}{
		(*Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State_ProtocolOpenconfigpacketmatchtypesipprotocol)(nil),
		(*Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State_ProtocolUint64)(nil),
	}
	file_openconfig_qos_proto_msgTypes[31].OneofWrappers = []interface{}{
		(*Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config_ProtocolOpenconfigpacketmatchtypesipprotocol)(nil),
		(*Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config_ProtocolUint64)(nil),
	}
	file_openconfig_qos_proto_msgTypes[32].OneofWrappers = []interface{}{
		(*Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State_ProtocolOpenconfigpacketmatchtypesipprotocol)(nil),
		(*Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State_ProtocolUint64)(nil),
	}
	file_openconfig_qos_proto_msgTypes[33].OneofWrappers = []interface{}{
		(*Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config_EthertypeOpenconfigpacketmatchtypesethertype)(nil),
		(*Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config_EthertypeUint64)(nil),
	}
	file_openconfig_qos_proto_msgTypes[34].OneofWrappers = []interface{}{
		(*Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State_EthertypeOpenconfigpacketmatchtypesethertype)(nil),
		(*Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State_EthertypeUint64)(nil),
	}
	file_openconfig_qos_proto_msgTypes[37].OneofWrappers = []interface{}{
		(*Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPortDestinationport)(nil),
		(*Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPortString)(nil),
		(*Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPortUint64)(nil),
		(*Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePortSourceport)(nil),
		(*Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePortString)(nil),
		(*Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePortUint64)(nil),
	}
	file_openconfig_qos_proto_msgTypes[38].OneofWrappers = []interface{}{
		(*Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPortDestinationport)(nil),
		(*Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPortString)(nil),
		(*Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPortUint64)(nil),
		(*Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePortSourceport)(nil),
		(*Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePortString)(nil),
		(*Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePortUint64)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_openconfig_qos_proto_rawDesc,
			NumEnums:      18,
			NumMessages:   161,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_openconfig_qos_proto_goTypes,
		DependencyIndexes: file_openconfig_qos_proto_depIdxs,
		EnumInfos:         file_openconfig_qos_proto_enumTypes,
		MessageInfos:      file_openconfig_qos_proto_msgTypes,
	}.Build()
	File_openconfig_qos_proto = out.File
	file_openconfig_qos_proto_rawDesc = nil
	file_openconfig_qos_proto_goTypes = nil
	file_openconfig_qos_proto_depIdxs = nil
}
