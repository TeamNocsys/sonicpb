// openconfig.sonic_acl is generated by proto_generator as a protobuf
// representation of a YANG schema.
//
// Input schema modules:
//  - ../api/yang/sonic/sonic-vlan.yang
//  - ../api/yang/sonic/sonic-extension.yang
//  - ../api/yang/sonic/sonic-types.yang
//  - ../api/yang/sonic/sonic-interface.yang
//  - ../api/yang/sonic/sonic-loopback-interface.yang
//  - ../api/yang/sonic/sonic-portchannel.yang
//  - ../api/yang/sonic/sonic-acl.yang
//  - ../api/yang/sonic/sonic-port.yang
//  - ../api/yang/public/third_party/ietf/iana-if-type.yang
//  - ../api/yang/public/third_party/ietf/ietf-interfaces.yang
//  - ../api/yang/public/third_party/ietf/ietf-yang-types.yang
//  - ../api/yang/public/third_party/ietf/ietf-inet-types.yang

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        (unknown)
// source: sonic_acl.proto

package openconfig

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/openconfig/ygot/proto/yext"
	ywrapper "github.com/openconfig/ygot/proto/ywrapper"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type SonicAcl_AclTable_AclTableList_Stage int32

const (
	SonicAcl_AclTable_AclTableList_STAGE_UNSET   SonicAcl_AclTable_AclTableList_Stage = 0
	SonicAcl_AclTable_AclTableList_STAGE_INGRESS SonicAcl_AclTable_AclTableList_Stage = 1
	SonicAcl_AclTable_AclTableList_STAGE_EGRESS  SonicAcl_AclTable_AclTableList_Stage = 2
)

// Enum value maps for SonicAcl_AclTable_AclTableList_Stage.
var (
	SonicAcl_AclTable_AclTableList_Stage_name = map[int32]string{
		0: "STAGE_UNSET",
		1: "STAGE_INGRESS",
		2: "STAGE_EGRESS",
	}
	SonicAcl_AclTable_AclTableList_Stage_value = map[string]int32{
		"STAGE_UNSET":   0,
		"STAGE_INGRESS": 1,
		"STAGE_EGRESS":  2,
	}
)

func (x SonicAcl_AclTable_AclTableList_Stage) Enum() *SonicAcl_AclTable_AclTableList_Stage {
	p := new(SonicAcl_AclTable_AclTableList_Stage)
	*p = x
	return p
}

func (x SonicAcl_AclTable_AclTableList_Stage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SonicAcl_AclTable_AclTableList_Stage) Descriptor() protoreflect.EnumDescriptor {
	return file_sonic_acl_proto_enumTypes[0].Descriptor()
}

func (SonicAcl_AclTable_AclTableList_Stage) Type() protoreflect.EnumType {
	return &file_sonic_acl_proto_enumTypes[0]
}

func (x SonicAcl_AclTable_AclTableList_Stage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SonicAcl_AclTable_AclTableList_Stage.Descriptor instead.
func (SonicAcl_AclTable_AclTableList_Stage) EnumDescriptor() ([]byte, []int) {
	return file_sonic_acl_proto_rawDescGZIP(), []int{0, 1, 0, 0}
}

type SonicAcl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AclRule  *SonicAcl_AclRule  `protobuf:"bytes,534314179,opt,name=acl_rule,json=aclRule,proto3" json:"acl_rule,omitempty"`
	AclTable *SonicAcl_AclTable `protobuf:"bytes,389787203,opt,name=acl_table,json=aclTable,proto3" json:"acl_table,omitempty"`
}

func (x *SonicAcl) Reset() {
	*x = SonicAcl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sonic_acl_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonicAcl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonicAcl) ProtoMessage() {}

func (x *SonicAcl) ProtoReflect() protoreflect.Message {
	mi := &file_sonic_acl_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonicAcl.ProtoReflect.Descriptor instead.
func (*SonicAcl) Descriptor() ([]byte, []int) {
	return file_sonic_acl_proto_rawDescGZIP(), []int{0}
}

func (x *SonicAcl) GetAclRule() *SonicAcl_AclRule {
	if x != nil {
		return x.AclRule
	}
	return nil
}

func (x *SonicAcl) GetAclTable() *SonicAcl_AclTable {
	if x != nil {
		return x.AclTable
	}
	return nil
}

type SonicAcl_AclRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AclRuleList []*SonicAcl_AclRule_AclRuleListKey `protobuf:"bytes,348123086,rep,name=acl_rule_list,json=aclRuleList,proto3" json:"acl_rule_list,omitempty"`
}

func (x *SonicAcl_AclRule) Reset() {
	*x = SonicAcl_AclRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sonic_acl_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonicAcl_AclRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonicAcl_AclRule) ProtoMessage() {}

func (x *SonicAcl_AclRule) ProtoReflect() protoreflect.Message {
	mi := &file_sonic_acl_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonicAcl_AclRule.ProtoReflect.Descriptor instead.
func (*SonicAcl_AclRule) Descriptor() ([]byte, []int) {
	return file_sonic_acl_proto_rawDescGZIP(), []int{0, 0}
}

func (x *SonicAcl_AclRule) GetAclRuleList() []*SonicAcl_AclRule_AclRuleListKey {
	if x != nil {
		return x.AclRuleList
	}
	return nil
}

type SonicAcl_AclTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AclTableList []*SonicAcl_AclTable_AclTableListKey `protobuf:"bytes,373980378,rep,name=acl_table_list,json=aclTableList,proto3" json:"acl_table_list,omitempty"`
}

func (x *SonicAcl_AclTable) Reset() {
	*x = SonicAcl_AclTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sonic_acl_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonicAcl_AclTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonicAcl_AclTable) ProtoMessage() {}

func (x *SonicAcl_AclTable) ProtoReflect() protoreflect.Message {
	mi := &file_sonic_acl_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonicAcl_AclTable.ProtoReflect.Descriptor instead.
func (*SonicAcl_AclTable) Descriptor() ([]byte, []int) {
	return file_sonic_acl_proto_rawDescGZIP(), []int{0, 1}
}

func (x *SonicAcl_AclTable) GetAclTableList() []*SonicAcl_AclTable_AclTableListKey {
	if x != nil {
		return x.AclTableList
	}
	return nil
}

type SonicAcl_AclRule_AclRuleList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	L4_DST_PORT_RANGE *ywrapper.StringValue `protobuf:"bytes,454662846,opt,name=L4_DST_PORT_RANGE,json=l4DSTPORTRANGE,proto3" json:"L4_DST_PORT_RANGE,omitempty"`
	Dscp              *ywrapper.UintValue   `protobuf:"bytes,364632447,opt,name=dscp,proto3" json:"dscp,omitempty"`
	DstIp             *ywrapper.StringValue `protobuf:"bytes,456558486,opt,name=dst_ip,json=dstIp,proto3" json:"dst_ip,omitempty"`
	DstIp6            *ywrapper.StringValue `protobuf:"bytes,123210906,opt,name=dst_ip6,json=dstIp6,proto3" json:"dst_ip6,omitempty"`
	EtherType         *ywrapper.StringValue `protobuf:"bytes,409297744,opt,name=ether_type,json=etherType,proto3" json:"ether_type,omitempty"`
	IcmpCode          *ywrapper.UintValue   `protobuf:"bytes,275034352,opt,name=icmp_code,json=icmpCode,proto3" json:"icmp_code,omitempty"`
	IcmpType          *ywrapper.UintValue   `protobuf:"bytes,45584939,opt,name=icmp_type,json=icmpType,proto3" json:"icmp_type,omitempty"`
	Icmpv6Code        *ywrapper.UintValue   `protobuf:"bytes,131599530,opt,name=icmpv6_code,json=icmpv6Code,proto3" json:"icmpv6_code,omitempty"`
	Icmpv6Type        *ywrapper.UintValue   `protobuf:"bytes,48580813,opt,name=icmpv6_type,json=icmpv6Type,proto3" json:"icmpv6_type,omitempty"`
	InPorts           []*ywrapper.UintValue `protobuf:"bytes,521428743,rep,name=in_ports,json=inPorts,proto3" json:"in_ports,omitempty"`
	InnerEtherType    *ywrapper.StringValue `protobuf:"bytes,328900465,opt,name=inner_ether_type,json=innerEtherType,proto3" json:"inner_ether_type,omitempty"`
	InnerIpProtocol   *ywrapper.UintValue   `protobuf:"bytes,392859308,opt,name=inner_ip_protocol,json=innerIpProtocol,proto3" json:"inner_ip_protocol,omitempty"`
	InnerL4DstPort    *ywrapper.UintValue   `protobuf:"bytes,475273722,opt,name=inner_l4_dst_port,json=innerL4DstPort,proto3" json:"inner_l4_dst_port,omitempty"`
	InnerL4SrcPort    *ywrapper.UintValue   `protobuf:"bytes,226210171,opt,name=inner_l4_src_port,json=innerL4SrcPort,proto3" json:"inner_l4_src_port,omitempty"`
	IpProtocol        *ywrapper.UintValue   `protobuf:"bytes,459470131,opt,name=ip_protocol,json=ipProtocol,proto3" json:"ip_protocol,omitempty"`
	IpType            SonicAclIpType        `protobuf:"varint,63697875,opt,name=ip_type,json=ipType,proto3,enum=openconfig.SonicAclIpType" json:"ip_type,omitempty"`
	L4DstPort         *ywrapper.UintValue   `protobuf:"bytes,300638670,opt,name=l4_dst_port,json=l4DstPort,proto3" json:"l4_dst_port,omitempty"`
	L4SrcPort         *ywrapper.UintValue   `protobuf:"bytes,173889531,opt,name=l4_src_port,json=l4SrcPort,proto3" json:"l4_src_port,omitempty"`
	L4SrcPortRange    *ywrapper.StringValue `protobuf:"bytes,524890999,opt,name=l4_src_port_range,json=l4SrcPortRange,proto3" json:"l4_src_port_range,omitempty"`
	OutPorts          []*ywrapper.UintValue `protobuf:"bytes,536025420,rep,name=out_ports,json=outPorts,proto3" json:"out_ports,omitempty"`
	PacketAction      SonicAclPacketAction  `protobuf:"varint,364835440,opt,name=packet_action,json=packetAction,proto3,enum=openconfig.SonicAclPacketAction" json:"packet_action,omitempty"`
	Priority          *ywrapper.UintValue   `protobuf:"bytes,21130269,opt,name=priority,proto3" json:"priority,omitempty"`
	SrcIp             *ywrapper.StringValue `protobuf:"bytes,399267927,opt,name=src_ip,json=srcIp,proto3" json:"src_ip,omitempty"`
	SrcIp6            *ywrapper.StringValue `protobuf:"bytes,303179295,opt,name=src_ip6,json=srcIp6,proto3" json:"src_ip6,omitempty"`
	Tc                *ywrapper.UintValue   `protobuf:"bytes,238976434,opt,name=tc,proto3" json:"tc,omitempty"`
	TcpFlags          *ywrapper.StringValue `protobuf:"bytes,492166780,opt,name=tcp_flags,json=tcpFlags,proto3" json:"tcp_flags,omitempty"`
}

func (x *SonicAcl_AclRule_AclRuleList) Reset() {
	*x = SonicAcl_AclRule_AclRuleList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sonic_acl_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonicAcl_AclRule_AclRuleList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonicAcl_AclRule_AclRuleList) ProtoMessage() {}

func (x *SonicAcl_AclRule_AclRuleList) ProtoReflect() protoreflect.Message {
	mi := &file_sonic_acl_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonicAcl_AclRule_AclRuleList.ProtoReflect.Descriptor instead.
func (*SonicAcl_AclRule_AclRuleList) Descriptor() ([]byte, []int) {
	return file_sonic_acl_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *SonicAcl_AclRule_AclRuleList) GetL4_DST_PORT_RANGE() *ywrapper.StringValue {
	if x != nil {
		return x.L4_DST_PORT_RANGE
	}
	return nil
}

func (x *SonicAcl_AclRule_AclRuleList) GetDscp() *ywrapper.UintValue {
	if x != nil {
		return x.Dscp
	}
	return nil
}

func (x *SonicAcl_AclRule_AclRuleList) GetDstIp() *ywrapper.StringValue {
	if x != nil {
		return x.DstIp
	}
	return nil
}

func (x *SonicAcl_AclRule_AclRuleList) GetDstIp6() *ywrapper.StringValue {
	if x != nil {
		return x.DstIp6
	}
	return nil
}

func (x *SonicAcl_AclRule_AclRuleList) GetEtherType() *ywrapper.StringValue {
	if x != nil {
		return x.EtherType
	}
	return nil
}

func (x *SonicAcl_AclRule_AclRuleList) GetIcmpCode() *ywrapper.UintValue {
	if x != nil {
		return x.IcmpCode
	}
	return nil
}

func (x *SonicAcl_AclRule_AclRuleList) GetIcmpType() *ywrapper.UintValue {
	if x != nil {
		return x.IcmpType
	}
	return nil
}

func (x *SonicAcl_AclRule_AclRuleList) GetIcmpv6Code() *ywrapper.UintValue {
	if x != nil {
		return x.Icmpv6Code
	}
	return nil
}

func (x *SonicAcl_AclRule_AclRuleList) GetIcmpv6Type() *ywrapper.UintValue {
	if x != nil {
		return x.Icmpv6Type
	}
	return nil
}

func (x *SonicAcl_AclRule_AclRuleList) GetInPorts() []*ywrapper.UintValue {
	if x != nil {
		return x.InPorts
	}
	return nil
}

func (x *SonicAcl_AclRule_AclRuleList) GetInnerEtherType() *ywrapper.StringValue {
	if x != nil {
		return x.InnerEtherType
	}
	return nil
}

func (x *SonicAcl_AclRule_AclRuleList) GetInnerIpProtocol() *ywrapper.UintValue {
	if x != nil {
		return x.InnerIpProtocol
	}
	return nil
}

func (x *SonicAcl_AclRule_AclRuleList) GetInnerL4DstPort() *ywrapper.UintValue {
	if x != nil {
		return x.InnerL4DstPort
	}
	return nil
}

func (x *SonicAcl_AclRule_AclRuleList) GetInnerL4SrcPort() *ywrapper.UintValue {
	if x != nil {
		return x.InnerL4SrcPort
	}
	return nil
}

func (x *SonicAcl_AclRule_AclRuleList) GetIpProtocol() *ywrapper.UintValue {
	if x != nil {
		return x.IpProtocol
	}
	return nil
}

func (x *SonicAcl_AclRule_AclRuleList) GetIpType() SonicAclIpType {
	if x != nil {
		return x.IpType
	}
	return SonicAclIpType_SONICACLIPTYPE_UNSET
}

func (x *SonicAcl_AclRule_AclRuleList) GetL4DstPort() *ywrapper.UintValue {
	if x != nil {
		return x.L4DstPort
	}
	return nil
}

func (x *SonicAcl_AclRule_AclRuleList) GetL4SrcPort() *ywrapper.UintValue {
	if x != nil {
		return x.L4SrcPort
	}
	return nil
}

func (x *SonicAcl_AclRule_AclRuleList) GetL4SrcPortRange() *ywrapper.StringValue {
	if x != nil {
		return x.L4SrcPortRange
	}
	return nil
}

func (x *SonicAcl_AclRule_AclRuleList) GetOutPorts() []*ywrapper.UintValue {
	if x != nil {
		return x.OutPorts
	}
	return nil
}

func (x *SonicAcl_AclRule_AclRuleList) GetPacketAction() SonicAclPacketAction {
	if x != nil {
		return x.PacketAction
	}
	return SonicAclPacketAction_SONICACLPACKETACTION_UNSET
}

func (x *SonicAcl_AclRule_AclRuleList) GetPriority() *ywrapper.UintValue {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *SonicAcl_AclRule_AclRuleList) GetSrcIp() *ywrapper.StringValue {
	if x != nil {
		return x.SrcIp
	}
	return nil
}

func (x *SonicAcl_AclRule_AclRuleList) GetSrcIp6() *ywrapper.StringValue {
	if x != nil {
		return x.SrcIp6
	}
	return nil
}

func (x *SonicAcl_AclRule_AclRuleList) GetTc() *ywrapper.UintValue {
	if x != nil {
		return x.Tc
	}
	return nil
}

func (x *SonicAcl_AclRule_AclRuleList) GetTcpFlags() *ywrapper.StringValue {
	if x != nil {
		return x.TcpFlags
	}
	return nil
}

type SonicAcl_AclRule_AclRuleListKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AclTableName string                        `protobuf:"bytes,1,opt,name=acl_table_name,json=aclTableName,proto3" json:"acl_table_name,omitempty"`
	RuleName     string                        `protobuf:"bytes,2,opt,name=rule_name,json=ruleName,proto3" json:"rule_name,omitempty"`
	AclRuleList  *SonicAcl_AclRule_AclRuleList `protobuf:"bytes,3,opt,name=acl_rule_list,json=aclRuleList,proto3" json:"acl_rule_list,omitempty"`
}

func (x *SonicAcl_AclRule_AclRuleListKey) Reset() {
	*x = SonicAcl_AclRule_AclRuleListKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sonic_acl_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonicAcl_AclRule_AclRuleListKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonicAcl_AclRule_AclRuleListKey) ProtoMessage() {}

func (x *SonicAcl_AclRule_AclRuleListKey) ProtoReflect() protoreflect.Message {
	mi := &file_sonic_acl_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonicAcl_AclRule_AclRuleListKey.ProtoReflect.Descriptor instead.
func (*SonicAcl_AclRule_AclRuleListKey) Descriptor() ([]byte, []int) {
	return file_sonic_acl_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *SonicAcl_AclRule_AclRuleListKey) GetAclTableName() string {
	if x != nil {
		return x.AclTableName
	}
	return ""
}

func (x *SonicAcl_AclRule_AclRuleListKey) GetRuleName() string {
	if x != nil {
		return x.RuleName
	}
	return ""
}

func (x *SonicAcl_AclRule_AclRuleListKey) GetAclRuleList() *SonicAcl_AclRule_AclRuleList {
	if x != nil {
		return x.AclRuleList
	}
	return nil
}

type SonicAcl_AclTable_AclTableList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyDesc *ywrapper.StringValue                `protobuf:"bytes,529240035,opt,name=policy_desc,json=policyDesc,proto3" json:"policy_desc,omitempty"`
	Ports      []*ywrapper.StringValue              `protobuf:"bytes,188591839,rep,name=ports,proto3" json:"ports,omitempty"`
	Stage      SonicAcl_AclTable_AclTableList_Stage `protobuf:"varint,291549669,opt,name=stage,proto3,enum=openconfig.SonicAcl_AclTable_AclTableList_Stage" json:"stage,omitempty"`
	Type       SonicAclAclTableType                 `protobuf:"varint,403132361,opt,name=type,proto3,enum=openconfig.SonicAclAclTableType" json:"type,omitempty"`
}

func (x *SonicAcl_AclTable_AclTableList) Reset() {
	*x = SonicAcl_AclTable_AclTableList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sonic_acl_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonicAcl_AclTable_AclTableList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonicAcl_AclTable_AclTableList) ProtoMessage() {}

func (x *SonicAcl_AclTable_AclTableList) ProtoReflect() protoreflect.Message {
	mi := &file_sonic_acl_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonicAcl_AclTable_AclTableList.ProtoReflect.Descriptor instead.
func (*SonicAcl_AclTable_AclTableList) Descriptor() ([]byte, []int) {
	return file_sonic_acl_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *SonicAcl_AclTable_AclTableList) GetPolicyDesc() *ywrapper.StringValue {
	if x != nil {
		return x.PolicyDesc
	}
	return nil
}

func (x *SonicAcl_AclTable_AclTableList) GetPorts() []*ywrapper.StringValue {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *SonicAcl_AclTable_AclTableList) GetStage() SonicAcl_AclTable_AclTableList_Stage {
	if x != nil {
		return x.Stage
	}
	return SonicAcl_AclTable_AclTableList_STAGE_UNSET
}

func (x *SonicAcl_AclTable_AclTableList) GetType() SonicAclAclTableType {
	if x != nil {
		return x.Type
	}
	return SonicAclAclTableType_SONICACLACLTABLETYPE_UNSET
}

type SonicAcl_AclTable_AclTableListKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AclTableName string                          `protobuf:"bytes,1,opt,name=acl_table_name,json=aclTableName,proto3" json:"acl_table_name,omitempty"`
	AclTableList *SonicAcl_AclTable_AclTableList `protobuf:"bytes,2,opt,name=acl_table_list,json=aclTableList,proto3" json:"acl_table_list,omitempty"`
}

func (x *SonicAcl_AclTable_AclTableListKey) Reset() {
	*x = SonicAcl_AclTable_AclTableListKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sonic_acl_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonicAcl_AclTable_AclTableListKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonicAcl_AclTable_AclTableListKey) ProtoMessage() {}

func (x *SonicAcl_AclTable_AclTableListKey) ProtoReflect() protoreflect.Message {
	mi := &file_sonic_acl_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonicAcl_AclTable_AclTableListKey.ProtoReflect.Descriptor instead.
func (*SonicAcl_AclTable_AclTableListKey) Descriptor() ([]byte, []int) {
	return file_sonic_acl_proto_rawDescGZIP(), []int{0, 1, 1}
}

func (x *SonicAcl_AclTable_AclTableListKey) GetAclTableName() string {
	if x != nil {
		return x.AclTableName
	}
	return ""
}

func (x *SonicAcl_AclTable_AclTableListKey) GetAclTableList() *SonicAcl_AclTable_AclTableList {
	if x != nil {
		return x.AclTableList
	}
	return nil
}

var File_sonic_acl_proto protoreflect.FileDescriptor

var file_sonic_acl_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x5f, 0x61, 0x63, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x0e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x79,
	0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x73, 0x6f, 0x6e, 0x69, 0x63,
	0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9b, 0x21, 0x0a,
	0x08, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x41, 0x63, 0x6c, 0x12, 0x53, 0x0a, 0x08, 0x61, 0x63, 0x6c,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0xc3, 0xf9, 0xe3, 0xfe, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x6f, 0x6e,
	0x69, 0x63, 0x41, 0x63, 0x6c, 0x2e, 0x41, 0x63, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x16, 0x82,
	0x41, 0x13, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c,
	0x2d, 0x72, 0x75, 0x6c, 0x65, 0x52, 0x07, 0x61, 0x63, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x57,
	0x0a, 0x09, 0x61, 0x63, 0x6c, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0xc3, 0xdc, 0xee, 0xb9,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x41, 0x63, 0x6c, 0x2e, 0x41, 0x63, 0x6c, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x42, 0x17, 0x82, 0x41, 0x14, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d,
	0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x08, 0x61,
	0x63, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0xf9, 0x18, 0x0a, 0x07, 0x41, 0x63, 0x6c, 0x52,
	0x75, 0x6c, 0x65, 0x12, 0x79, 0x0a, 0x0d, 0x61, 0x63, 0x6c, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0xce, 0xdf, 0xff, 0xa5, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x6f, 0x6e, 0x69,
	0x63, 0x41, 0x63, 0x6c, 0x2e, 0x41, 0x63, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x63, 0x6c,
	0x52, 0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x42, 0x24, 0x82, 0x41, 0x21,
	0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x72,
	0x75, 0x6c, 0x65, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2d, 0x6c, 0x69, 0x73,
	0x74, 0x52, 0x0b, 0x61, 0x63, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0xe9,
	0x15, 0x0a, 0x0b, 0x41, 0x63, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x7c,
	0x0a, 0x11, 0x4c, 0x34, 0x5f, 0x44, 0x53, 0x54, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x52, 0x41,
	0x4e, 0x47, 0x45, 0x18, 0xbe, 0xb5, 0xe6, 0xd8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d,
	0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2f, 0x61, 0x63, 0x6c,
	0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x4c, 0x34, 0x5f, 0x44, 0x53,
	0x54, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x52, 0x0e, 0x6c, 0x34,
	0x44, 0x53, 0x54, 0x50, 0x4f, 0x52, 0x54, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x12, 0x56, 0x0a, 0x04,
	0x64, 0x73, 0x63, 0x70, 0x18, 0xff, 0xb2, 0xef, 0xad, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x29, 0x82, 0x41, 0x26, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x61,
	0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2f, 0x61, 0x63, 0x6c, 0x2d,
	0x72, 0x75, 0x6c, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x64, 0x73, 0x63, 0x70, 0x52, 0x04,
	0x64, 0x73, 0x63, 0x70, 0x12, 0x5d, 0x0a, 0x06, 0x64, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x96,
	0x8f, 0xda, 0xd9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x2b, 0x82, 0x41, 0x28, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x61, 0x63, 0x6c, 0x2f, 0x61,
	0x63, 0x6c, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x72, 0x75, 0x6c, 0x65,
	0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x64, 0x73, 0x74, 0x2d, 0x69, 0x70, 0x52, 0x05, 0x64, 0x73,
	0x74, 0x49, 0x70, 0x12, 0x5f, 0x0a, 0x07, 0x64, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x36, 0x18, 0x9a,
	0x99, 0xe0, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2c,
	0x82, 0x41, 0x29, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63,
	0x6c, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2d,
	0x6c, 0x69, 0x73, 0x74, 0x2f, 0x64, 0x73, 0x74, 0x2d, 0x69, 0x70, 0x36, 0x52, 0x06, 0x64, 0x73,
	0x74, 0x49, 0x70, 0x36, 0x12, 0x69, 0x0a, 0x0a, 0x65, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0xd0, 0xc6, 0x95, 0xc3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x2f, 0x82, 0x41, 0x2c, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x61,
	0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2f, 0x61, 0x63, 0x6c, 0x2d,
	0x72, 0x75, 0x6c, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x74, 0x68, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x64, 0x0a, 0x09, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0xf0, 0xe1, 0x92,
	0x83, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2e, 0x82, 0x41, 0x2b,
	0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x72,
	0x75, 0x6c, 0x65, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2d, 0x6c, 0x69, 0x73,
	0x74, 0x2f, 0x69, 0x63, 0x6d, 0x70, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x69, 0x63, 0x6d,
	0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x63, 0x0a, 0x09, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0xab, 0xa4, 0xde, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x2e, 0x82, 0x41, 0x2b, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x61, 0x63, 0x6c, 0x2f,
	0x61, 0x63, 0x6c, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x72, 0x75, 0x6c,
	0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x69, 0x63, 0x6d, 0x70, 0x2d, 0x74, 0x79, 0x70, 0x65,
	0x52, 0x08, 0x69, 0x63, 0x6d, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x69, 0x0a, 0x0b, 0x69, 0x63,
	0x6d, 0x70, 0x76, 0x36, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0xaa, 0x99, 0xe0, 0x3e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x30, 0x82, 0x41, 0x2d, 0x2f, 0x73, 0x6f, 0x6e,
	0x69, 0x63, 0x2d, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2f,
	0x61, 0x63, 0x6c, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x69, 0x63,
	0x6d, 0x70, 0x76, 0x36, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x69, 0x63, 0x6d, 0x70, 0x76,
	0x36, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x69, 0x0a, 0x0b, 0x69, 0x63, 0x6d, 0x70, 0x76, 0x36, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0xcd, 0x91, 0x95, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x30, 0x82, 0x41, 0x2d, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x61, 0x63,
	0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x72,
	0x75, 0x6c, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x69, 0x63, 0x6d, 0x70, 0x76, 0x36, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x69, 0x63, 0x6d, 0x70, 0x76, 0x36, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x61, 0x0a, 0x08, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x87, 0xbe, 0xd1,
	0xf8, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2d, 0x82, 0x41, 0x2a,
	0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x72,
	0x75, 0x6c, 0x65, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2d, 0x6c, 0x69, 0x73,
	0x74, 0x2f, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x07, 0x69, 0x6e, 0x50, 0x6f,
	0x72, 0x74, 0x73, 0x12, 0x7a, 0x0a, 0x10, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0xf1, 0xbe, 0xea, 0x9c, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x73, 0x6f,
	0x6e, 0x69, 0x63, 0x2d, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x72, 0x75, 0x6c, 0x65,
	0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x69,
	0x6e, 0x6e, 0x65, 0x72, 0x2d, 0x65, 0x74, 0x68, 0x65, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x0e, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x45, 0x74, 0x68, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x7b, 0x0a, 0x11, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x18, 0xac, 0x9d, 0xaa, 0xbb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x61,
	0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2f, 0x61, 0x63, 0x6c, 0x2d,
	0x72, 0x75, 0x6c, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x2d,
	0x69, 0x70, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x0f, 0x69, 0x6e, 0x6e,
	0x65, 0x72, 0x49, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x7a, 0x0a, 0x11,
	0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x6c, 0x34, 0x5f, 0x64, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0xfa, 0xb3, 0xd0, 0xe2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x61, 0x63, 0x6c, 0x2f,
	0x61, 0x63, 0x6c, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x72, 0x75, 0x6c,
	0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x2d, 0x6c, 0x34, 0x2d,
	0x64, 0x73, 0x74, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0e, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x4c,
	0x34, 0x44, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x79, 0x0a, 0x11, 0x69, 0x6e, 0x6e, 0x65,
	0x72, 0x5f, 0x6c, 0x34, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0xfb, 0xe2,
	0xee, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x36, 0x82, 0x41, 0x33,
	0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x72,
	0x75, 0x6c, 0x65, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2d, 0x6c, 0x69, 0x73,
	0x74, 0x2f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x2d, 0x6c, 0x34, 0x2d, 0x73, 0x72, 0x63, 0x2d, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x0e, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x4c, 0x34, 0x53, 0x72, 0x63, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x6a, 0x0a, 0x0b, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x18, 0xb3, 0xea, 0x8b, 0xdb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x30, 0x82, 0x41, 0x2d, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x61, 0x63, 0x6c,
	0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x72, 0x75,
	0x6c, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x69, 0x70, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x52, 0x0a, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12,
	0x64, 0x0a, 0x07, 0x69, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0xd3, 0xe7, 0xaf, 0x1e, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x41, 0x63, 0x6c, 0x49, 0x70, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x2c, 0x82, 0x41, 0x29, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x61, 0x63, 0x6c, 0x2f, 0x61,
	0x63, 0x6c, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x72, 0x75, 0x6c, 0x65,
	0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x69, 0x70, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x06, 0x69,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x69, 0x0a, 0x0b, 0x6c, 0x34, 0x5f, 0x64, 0x73, 0x74, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0xce, 0xc3, 0xad, 0x8f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x30, 0x82, 0x41, 0x2d, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x61,
	0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2f, 0x61, 0x63, 0x6c, 0x2d,
	0x72, 0x75, 0x6c, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x6c, 0x34, 0x2d, 0x64, 0x73, 0x74,
	0x2d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x09, 0x6c, 0x34, 0x44, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x68, 0x0a, 0x0b, 0x6c, 0x34, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0xfb, 0xaf, 0xf5, 0x52, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x30, 0x82,
	0x41, 0x2d, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c,
	0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2d, 0x6c,
	0x69, 0x73, 0x74, 0x2f, 0x6c, 0x34, 0x2d, 0x73, 0x72, 0x63, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x09, 0x6c, 0x34, 0x53, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x7c, 0x0a, 0x11, 0x6c, 0x34,
	0x5f, 0x73, 0x72, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0xf7, 0xe6, 0xa4, 0xfa, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x61, 0x63, 0x6c, 0x2f,
	0x61, 0x63, 0x6c, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x72, 0x75, 0x6c,
	0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x6c, 0x34, 0x2d, 0x73, 0x72, 0x63, 0x2d, 0x70, 0x6f,
	0x72, 0x74, 0x2d, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0e, 0x6c, 0x34, 0x53, 0x72, 0x63, 0x50,
	0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x64, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0xcc, 0xb2, 0xcc, 0xff, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x2e, 0x82, 0x41, 0x2b, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d,
	0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2f, 0x61, 0x63, 0x6c,
	0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x7d,
	0x0a, 0x0d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0xf0, 0xe4, 0xfb, 0xad, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x41, 0x63, 0x6c, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x32, 0x82, 0x41, 0x2f,
	0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x72,
	0x75, 0x6c, 0x65, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2d, 0x6c, 0x69, 0x73,
	0x74, 0x2f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0c, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x61, 0x0a,
	0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x9d, 0xd8, 0x89, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2d, 0x82, 0x41, 0x2a, 0x2f, 0x73, 0x6f, 0x6e,
	0x69, 0x63, 0x2d, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2f,
	0x61, 0x63, 0x6c, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x5d, 0x0a, 0x06, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x70, 0x18, 0xd7, 0xb0, 0xb1, 0xbe, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2b, 0x82, 0x41, 0x28,
	0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x72,
	0x75, 0x6c, 0x65, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2d, 0x6c, 0x69, 0x73,
	0x74, 0x2f, 0x73, 0x72, 0x63, 0x2d, 0x69, 0x70, 0x52, 0x05, 0x73, 0x72, 0x63, 0x49, 0x70, 0x12,
	0x60, 0x0a, 0x07, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x70, 0x36, 0x18, 0x9f, 0xcc, 0xc8, 0x90, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2c, 0x82, 0x41, 0x29,
	0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x72,
	0x75, 0x6c, 0x65, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2d, 0x6c, 0x69, 0x73,
	0x74, 0x2f, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x70, 0x36, 0x52, 0x06, 0x73, 0x72, 0x63, 0x49, 0x70,
	0x36, 0x12, 0x4f, 0x0a, 0x02, 0x74, 0x63, 0x18, 0xb2, 0xfb, 0xf9, 0x71, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x27, 0x82, 0x41, 0x24, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63,
	0x2d, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2f, 0x61, 0x63,
	0x6c, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x74, 0x63, 0x52, 0x02,
	0x74, 0x63, 0x12, 0x66, 0x0a, 0x09, 0x74, 0x63, 0x70, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18,
	0xfc, 0xbc, 0xd7, 0xea, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x2e, 0x82, 0x41, 0x2b, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x61, 0x63, 0x6c, 0x2f,
	0x61, 0x63, 0x6c, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x72, 0x75, 0x6c,
	0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x74, 0x63, 0x70, 0x2d, 0x66, 0x6c, 0x61, 0x67, 0x73,
	0x52, 0x08, 0x74, 0x63, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x1a, 0x86, 0x02, 0x0a, 0x0e, 0x41,
	0x63, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x59, 0x0a,
	0x0e, 0x61, 0x63, 0x6c, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x33, 0x82, 0x41, 0x30, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63,
	0x2d, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2f, 0x61, 0x63,
	0x6c, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x61, 0x63, 0x6c, 0x2d,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x0c, 0x61, 0x63, 0x6c, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x09, 0x72, 0x75, 0x6c, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0x82, 0x41, 0x2b,
	0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x72,
	0x75, 0x6c, 0x65, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2d, 0x6c, 0x69, 0x73,
	0x74, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x72, 0x75, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x0d, 0x61, 0x63, 0x6c, 0x5f, 0x72, 0x75, 0x6c,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x41,
	0x63, 0x6c, 0x2e, 0x41, 0x63, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x63, 0x6c, 0x52, 0x75,
	0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0b, 0x61, 0x63, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x1a, 0xe4, 0x06, 0x0a, 0x08, 0x41, 0x63, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x7f, 0x0a, 0x0e, 0x61, 0x63, 0x6c, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0xda, 0xf9, 0xa9, 0xb2, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x41,
	0x63, 0x6c, 0x2e, 0x41, 0x63, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x41, 0x63, 0x6c, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x42, 0x26, 0x82, 0x41, 0x23,
	0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x6c,
	0x69, 0x73, 0x74, 0x52, 0x0c, 0x61, 0x63, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x1a, 0x93, 0x04, 0x0a, 0x0c, 0x41, 0x63, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x6e, 0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x18, 0xe3, 0x9f, 0xae, 0xfc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x32, 0x82, 0x41, 0x2f, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x61, 0x63,
	0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2f, 0x61, 0x63, 0x6c, 0x2d,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2d, 0x64, 0x65, 0x73, 0x63, 0x52, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65,
	0x73, 0x63, 0x12, 0x5c, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0xdf, 0xdd, 0xf6, 0x59,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2c, 0x82, 0x41, 0x29,
	0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x6c,
	0x69, 0x73, 0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x12, 0x78, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0xe5, 0xe3, 0x82, 0x8b, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x41, 0x63, 0x6c, 0x2e, 0x41, 0x63, 0x6c, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x2e, 0x41, 0x63, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x2e,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x42, 0x2c, 0x82, 0x41, 0x29, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63,
	0x2d, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2f, 0x61,
	0x63, 0x6c, 0x2d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x65, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0xc9, 0x9f, 0x9d, 0xc0, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x41,
	0x63, 0x6c, 0x41, 0x63, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x2b,
	0x82, 0x41, 0x28, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63,
	0x6c, 0x2d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x22, 0x54, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54,
	0x41, 0x47, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x0d, 0x53,
	0x54, 0x41, 0x47, 0x45, 0x5f, 0x49, 0x4e, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x01, 0x1a, 0x0a,
	0x82, 0x41, 0x07, 0x49, 0x4e, 0x47, 0x52, 0x45, 0x53, 0x53, 0x12, 0x1b, 0x0a, 0x0c, 0x53, 0x54,
	0x41, 0x47, 0x45, 0x5f, 0x45, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x02, 0x1a, 0x09, 0x82, 0x41,
	0x06, 0x45, 0x47, 0x52, 0x45, 0x53, 0x53, 0x1a, 0xc0, 0x01, 0x0a, 0x0f, 0x41, 0x63, 0x6c, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x5b, 0x0a, 0x0e, 0x61,
	0x63, 0x6c, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x61,
	0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2f, 0x61, 0x63, 0x6c,
	0x2d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x61, 0x63, 0x6c, 0x2d,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x0c, 0x61, 0x63, 0x6c, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x0e, 0x61, 0x63, 0x6c, 0x5f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x6f,
	0x6e, 0x69, 0x63, 0x41, 0x63, 0x6c, 0x2e, 0x41, 0x63, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e,
	0x41, 0x63, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0c, 0x61, 0x63,
	0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x17, 0x0a, 0x15, 0x63, 0x6f,
	0x6d, 0x2e, 0x6e, 0x6f, 0x63, 0x73, 0x79, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sonic_acl_proto_rawDescOnce sync.Once
	file_sonic_acl_proto_rawDescData = file_sonic_acl_proto_rawDesc
)

func file_sonic_acl_proto_rawDescGZIP() []byte {
	file_sonic_acl_proto_rawDescOnce.Do(func() {
		file_sonic_acl_proto_rawDescData = protoimpl.X.CompressGZIP(file_sonic_acl_proto_rawDescData)
	})
	return file_sonic_acl_proto_rawDescData
}

var file_sonic_acl_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_sonic_acl_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_sonic_acl_proto_goTypes = []interface{}{
	(SonicAcl_AclTable_AclTableList_Stage)(0), // 0: openconfig.SonicAcl.AclTable.AclTableList.Stage
	(*SonicAcl)(nil),                          // 1: openconfig.SonicAcl
	(*SonicAcl_AclRule)(nil),                  // 2: openconfig.SonicAcl.AclRule
	(*SonicAcl_AclTable)(nil),                 // 3: openconfig.SonicAcl.AclTable
	(*SonicAcl_AclRule_AclRuleList)(nil),      // 4: openconfig.SonicAcl.AclRule.AclRuleList
	(*SonicAcl_AclRule_AclRuleListKey)(nil),   // 5: openconfig.SonicAcl.AclRule.AclRuleListKey
	(*SonicAcl_AclTable_AclTableList)(nil),    // 6: openconfig.SonicAcl.AclTable.AclTableList
	(*SonicAcl_AclTable_AclTableListKey)(nil), // 7: openconfig.SonicAcl.AclTable.AclTableListKey
	(*ywrapper.StringValue)(nil),              // 8: ywrapper.StringValue
	(*ywrapper.UintValue)(nil),                // 9: ywrapper.UintValue
	(SonicAclIpType)(0),                       // 10: openconfig.SonicAclIpType
	(SonicAclPacketAction)(0),                 // 11: openconfig.SonicAclPacketAction
	(SonicAclAclTableType)(0),                 // 12: openconfig.SonicAclAclTableType
}
var file_sonic_acl_proto_depIdxs = []int32{
	2,  // 0: openconfig.SonicAcl.acl_rule:type_name -> openconfig.SonicAcl.AclRule
	3,  // 1: openconfig.SonicAcl.acl_table:type_name -> openconfig.SonicAcl.AclTable
	5,  // 2: openconfig.SonicAcl.AclRule.acl_rule_list:type_name -> openconfig.SonicAcl.AclRule.AclRuleListKey
	7,  // 3: openconfig.SonicAcl.AclTable.acl_table_list:type_name -> openconfig.SonicAcl.AclTable.AclTableListKey
	8,  // 4: openconfig.SonicAcl.AclRule.AclRuleList.L4_DST_PORT_RANGE:type_name -> ywrapper.StringValue
	9,  // 5: openconfig.SonicAcl.AclRule.AclRuleList.dscp:type_name -> ywrapper.UintValue
	8,  // 6: openconfig.SonicAcl.AclRule.AclRuleList.dst_ip:type_name -> ywrapper.StringValue
	8,  // 7: openconfig.SonicAcl.AclRule.AclRuleList.dst_ip6:type_name -> ywrapper.StringValue
	8,  // 8: openconfig.SonicAcl.AclRule.AclRuleList.ether_type:type_name -> ywrapper.StringValue
	9,  // 9: openconfig.SonicAcl.AclRule.AclRuleList.icmp_code:type_name -> ywrapper.UintValue
	9,  // 10: openconfig.SonicAcl.AclRule.AclRuleList.icmp_type:type_name -> ywrapper.UintValue
	9,  // 11: openconfig.SonicAcl.AclRule.AclRuleList.icmpv6_code:type_name -> ywrapper.UintValue
	9,  // 12: openconfig.SonicAcl.AclRule.AclRuleList.icmpv6_type:type_name -> ywrapper.UintValue
	9,  // 13: openconfig.SonicAcl.AclRule.AclRuleList.in_ports:type_name -> ywrapper.UintValue
	8,  // 14: openconfig.SonicAcl.AclRule.AclRuleList.inner_ether_type:type_name -> ywrapper.StringValue
	9,  // 15: openconfig.SonicAcl.AclRule.AclRuleList.inner_ip_protocol:type_name -> ywrapper.UintValue
	9,  // 16: openconfig.SonicAcl.AclRule.AclRuleList.inner_l4_dst_port:type_name -> ywrapper.UintValue
	9,  // 17: openconfig.SonicAcl.AclRule.AclRuleList.inner_l4_src_port:type_name -> ywrapper.UintValue
	9,  // 18: openconfig.SonicAcl.AclRule.AclRuleList.ip_protocol:type_name -> ywrapper.UintValue
	10, // 19: openconfig.SonicAcl.AclRule.AclRuleList.ip_type:type_name -> openconfig.SonicAclIpType
	9,  // 20: openconfig.SonicAcl.AclRule.AclRuleList.l4_dst_port:type_name -> ywrapper.UintValue
	9,  // 21: openconfig.SonicAcl.AclRule.AclRuleList.l4_src_port:type_name -> ywrapper.UintValue
	8,  // 22: openconfig.SonicAcl.AclRule.AclRuleList.l4_src_port_range:type_name -> ywrapper.StringValue
	9,  // 23: openconfig.SonicAcl.AclRule.AclRuleList.out_ports:type_name -> ywrapper.UintValue
	11, // 24: openconfig.SonicAcl.AclRule.AclRuleList.packet_action:type_name -> openconfig.SonicAclPacketAction
	9,  // 25: openconfig.SonicAcl.AclRule.AclRuleList.priority:type_name -> ywrapper.UintValue
	8,  // 26: openconfig.SonicAcl.AclRule.AclRuleList.src_ip:type_name -> ywrapper.StringValue
	8,  // 27: openconfig.SonicAcl.AclRule.AclRuleList.src_ip6:type_name -> ywrapper.StringValue
	9,  // 28: openconfig.SonicAcl.AclRule.AclRuleList.tc:type_name -> ywrapper.UintValue
	8,  // 29: openconfig.SonicAcl.AclRule.AclRuleList.tcp_flags:type_name -> ywrapper.StringValue
	4,  // 30: openconfig.SonicAcl.AclRule.AclRuleListKey.acl_rule_list:type_name -> openconfig.SonicAcl.AclRule.AclRuleList
	8,  // 31: openconfig.SonicAcl.AclTable.AclTableList.policy_desc:type_name -> ywrapper.StringValue
	8,  // 32: openconfig.SonicAcl.AclTable.AclTableList.ports:type_name -> ywrapper.StringValue
	0,  // 33: openconfig.SonicAcl.AclTable.AclTableList.stage:type_name -> openconfig.SonicAcl.AclTable.AclTableList.Stage
	12, // 34: openconfig.SonicAcl.AclTable.AclTableList.type:type_name -> openconfig.SonicAclAclTableType
	6,  // 35: openconfig.SonicAcl.AclTable.AclTableListKey.acl_table_list:type_name -> openconfig.SonicAcl.AclTable.AclTableList
	36, // [36:36] is the sub-list for method output_type
	36, // [36:36] is the sub-list for method input_type
	36, // [36:36] is the sub-list for extension type_name
	36, // [36:36] is the sub-list for extension extendee
	0,  // [0:36] is the sub-list for field type_name
}

func init() { file_sonic_acl_proto_init() }
func file_sonic_acl_proto_init() {
	if File_sonic_acl_proto != nil {
		return
	}
	file_sonic_enums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_sonic_acl_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonicAcl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sonic_acl_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonicAcl_AclRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sonic_acl_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonicAcl_AclTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sonic_acl_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonicAcl_AclRule_AclRuleList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sonic_acl_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonicAcl_AclRule_AclRuleListKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sonic_acl_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonicAcl_AclTable_AclTableList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sonic_acl_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonicAcl_AclTable_AclTableListKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sonic_acl_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sonic_acl_proto_goTypes,
		DependencyIndexes: file_sonic_acl_proto_depIdxs,
		EnumInfos:         file_sonic_acl_proto_enumTypes,
		MessageInfos:      file_sonic_acl_proto_msgTypes,
	}.Build()
	File_sonic_acl_proto = out.File
	file_sonic_acl_proto_rawDesc = nil
	file_sonic_acl_proto_goTypes = nil
	file_sonic_acl_proto_depIdxs = nil
}
