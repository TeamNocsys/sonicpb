// openconfig.openconfig_transport_line_protection is generated by proto_generator as a protobuf
// representation of a YANG schema.
//
// Input schema modules:
//  - ../api/yang/public/doc/openconfig-example.yang
//  - ../api/yang/public/third_party/ietf/iana-if-type.yang
//  - ../api/yang/public/third_party/ietf/ietf-interfaces.yang
//  - ../api/yang/public/third_party/ietf/ietf-yang-types.yang
//  - ../api/yang/public/third_party/ietf/ietf-inet-types.yang
//  - ../api/yang/public/release/models/bfd/openconfig-bfd.yang
//  - ../api/yang/public/release/models/vlan/openconfig-vlan.yang
//  - ../api/yang/public/release/models/vlan/openconfig-vlan-types.yang
//  - ../api/yang/public/release/models/wifi/openconfig-access-points.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-mac.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-types.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-phy.yang
//  - ../api/yang/public/release/models/wifi/openconfig-ap-interfaces.yang
//  - ../api/yang/public/release/models/wifi/openconfig-ap-manager.yang
//  - ../api/yang/public/release/models/macsec/openconfig-macsec.yang
//  - ../api/yang/public/release/models/macsec/openconfig-macsec-types.yang
//  - ../api/yang/public/release/models/stp/openconfig-spanning-tree-types.yang
//  - ../api/yang/public/release/models/stp/openconfig-spanning-tree.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-errors.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-peer-group.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-types.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-global.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-neighbor.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common-structure.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-policy.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common-multiprotocol.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-types.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-port.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-fan.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-linecard.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-ext.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-cpu.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-psu.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-transceiver.yang
//  - ../api/yang/public/release/models/multicast/openconfig-pim-types.yang
//  - ../api/yang/public/release/models/multicast/openconfig-igmp-types.yang
//  - ../api/yang/public/release/models/multicast/openconfig-igmp.yang
//  - ../api/yang/public/release/models/multicast/openconfig-pim.yang
//  - ../api/yang/public/release/models/catalog/openconfig-module-catalog.yang
//  - ../api/yang/public/release/models/catalog/openconfig-catalog-types.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-interfaces.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-8021x.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-types.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-aggregate.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-poe.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-tunnel.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ip.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ethernet.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ethernet-ext.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ip-ext.yang
//  - ../api/yang/public/release/models/acl/openconfig-packet-match-types.yang
//  - ../api/yang/public/release/models/acl/openconfig-packet-match.yang
//  - ../api/yang/public/release/models/acl/openconfig-acl.yang
//  - ../api/yang/public/release/models/system/openconfig-license.yang
//  - ../api/yang/public/release/models/system/openconfig-system.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-radius.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa.yang
//  - ../api/yang/public/release/models/system/openconfig-system-management.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-types.yang
//  - ../api/yang/public/release/models/system/openconfig-procmon.yang
//  - ../api/yang/public/release/models/system/openconfig-messages.yang
//  - ../api/yang/public/release/models/system/openconfig-system-terminal.yang
//  - ../api/yang/public/release/models/system/openconfig-system-logging.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-tacacs.yang
//  - ../api/yang/public/release/models/system/openconfig-alarms.yang
//  - ../api/yang/public/release/models/system/openconfig-alarm-types.yang
//  - ../api/yang/public/release/models/policy/openconfig-policy-types.yang
//  - ../api/yang/public/release/models/policy/openconfig-routing-policy.yang
//  - ../api/yang/public/release/models/lacp/openconfig-lacp.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-wavelength-router.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-optical-amplifier.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-protection.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-channel-monitor.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-connectivity.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-optical-attenuator.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-common.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-types.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-terminal-device.yang
//  - ../api/yang/public/release/models/telemetry/openconfig-telemetry-types.yang
//  - ../api/yang/public/release/models/telemetry/openconfig-telemetry.yang
//  - ../api/yang/public/release/models/openflow/openconfig-openflow.yang
//  - ../api/yang/public/release/models/openflow/openconfig-openflow-types.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-tables.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-ext.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-table-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-shared-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-types.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-types.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-elements.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-interfaces.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-srte.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-forwarding-policies.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-interfaces.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-path-groups.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
//  - ../api/yang/public/release/models/relay-agent/openconfig-relay-agent.yang
//  - ../api/yang/public/release/models/lldp/openconfig-lldp.yang
//  - ../api/yang/public/release/models/lldp/openconfig-lldp-types.yang
//  - ../api/yang/public/release/models/openconfig-extensions.yang
//  - ../api/yang/public/release/models/types/openconfig-yang-types.yang
//  - ../api/yang/public/release/models/types/openconfig-inet-types.yang
//  - ../api/yang/public/release/models/types/openconfig-types.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-srte-policy.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-rsvp-sr-ext.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-segment-routing-types.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-segment-routing.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-types.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-igp.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-te.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-rsvp.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-static.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-sr.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-ldp.yang
//  - ../api/yang/public/release/models/probes/openconfig-probes-types.yang
//  - ../api/yang/public/release/models/probes/openconfig-probes.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-lsp.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-lsdb-types.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-policy.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-types.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-routing.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-area.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospf-policy.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-common.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-global.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-area-interface.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-lsdb.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospf-types.yang
//  - ../api/yang/public/release/models/local-routing/openconfig-local-routing.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-l3.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-l2.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-policy.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-types.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-mpls.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-common.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-types.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ipv6.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-pf.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-network-instance.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ipv4.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ethernet.yang

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        (unknown)
// source: openconfig_transport_line_protection.proto

package openconfig

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/openconfig/ygot/proto/yext"
	ywrapper "github.com/openconfig/ygot/proto/ywrapper"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Aps_ApsModules_ApsModule_Config_ForceToPort int32

const (
	Aps_ApsModules_ApsModule_Config_FORCETOPORT_NONE      Aps_ApsModules_ApsModule_Config_ForceToPort = 0
	Aps_ApsModules_ApsModule_Config_FORCETOPORT_PRIMARY   Aps_ApsModules_ApsModule_Config_ForceToPort = 2
	Aps_ApsModules_ApsModule_Config_FORCETOPORT_SECONDARY Aps_ApsModules_ApsModule_Config_ForceToPort = 3
)

// Enum value maps for Aps_ApsModules_ApsModule_Config_ForceToPort.
var (
	Aps_ApsModules_ApsModule_Config_ForceToPort_name = map[int32]string{
		0: "FORCETOPORT_NONE",
		2: "FORCETOPORT_PRIMARY",
		3: "FORCETOPORT_SECONDARY",
	}
	Aps_ApsModules_ApsModule_Config_ForceToPort_value = map[string]int32{
		"FORCETOPORT_NONE":      0,
		"FORCETOPORT_PRIMARY":   2,
		"FORCETOPORT_SECONDARY": 3,
	}
)

func (x Aps_ApsModules_ApsModule_Config_ForceToPort) Enum() *Aps_ApsModules_ApsModule_Config_ForceToPort {
	p := new(Aps_ApsModules_ApsModule_Config_ForceToPort)
	*p = x
	return p
}

func (x Aps_ApsModules_ApsModule_Config_ForceToPort) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Aps_ApsModules_ApsModule_Config_ForceToPort) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_transport_line_protection_proto_enumTypes[0].Descriptor()
}

func (Aps_ApsModules_ApsModule_Config_ForceToPort) Type() protoreflect.EnumType {
	return &file_openconfig_transport_line_protection_proto_enumTypes[0]
}

func (x Aps_ApsModules_ApsModule_Config_ForceToPort) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Aps_ApsModules_ApsModule_Config_ForceToPort.Descriptor instead.
func (Aps_ApsModules_ApsModule_Config_ForceToPort) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_transport_line_protection_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0}
}

type Aps_ApsModules_ApsModule_State_ForceToPort int32

const (
	Aps_ApsModules_ApsModule_State_FORCETOPORT_NONE      Aps_ApsModules_ApsModule_State_ForceToPort = 0
	Aps_ApsModules_ApsModule_State_FORCETOPORT_PRIMARY   Aps_ApsModules_ApsModule_State_ForceToPort = 2
	Aps_ApsModules_ApsModule_State_FORCETOPORT_SECONDARY Aps_ApsModules_ApsModule_State_ForceToPort = 3
)

// Enum value maps for Aps_ApsModules_ApsModule_State_ForceToPort.
var (
	Aps_ApsModules_ApsModule_State_ForceToPort_name = map[int32]string{
		0: "FORCETOPORT_NONE",
		2: "FORCETOPORT_PRIMARY",
		3: "FORCETOPORT_SECONDARY",
	}
	Aps_ApsModules_ApsModule_State_ForceToPort_value = map[string]int32{
		"FORCETOPORT_NONE":      0,
		"FORCETOPORT_PRIMARY":   2,
		"FORCETOPORT_SECONDARY": 3,
	}
)

func (x Aps_ApsModules_ApsModule_State_ForceToPort) Enum() *Aps_ApsModules_ApsModule_State_ForceToPort {
	p := new(Aps_ApsModules_ApsModule_State_ForceToPort)
	*p = x
	return p
}

func (x Aps_ApsModules_ApsModule_State_ForceToPort) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Aps_ApsModules_ApsModule_State_ForceToPort) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_transport_line_protection_proto_enumTypes[1].Descriptor()
}

func (Aps_ApsModules_ApsModule_State_ForceToPort) Type() protoreflect.EnumType {
	return &file_openconfig_transport_line_protection_proto_enumTypes[1]
}

func (x Aps_ApsModules_ApsModule_State_ForceToPort) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Aps_ApsModules_ApsModule_State_ForceToPort.Descriptor instead.
func (Aps_ApsModules_ApsModule_State_ForceToPort) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_transport_line_protection_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0}
}

type Aps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApsModules *Aps_ApsModules `protobuf:"bytes,404435115,opt,name=aps_modules,json=apsModules,proto3" json:"aps_modules,omitempty"`
}

func (x *Aps) Reset() {
	*x = Aps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_transport_line_protection_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Aps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Aps) ProtoMessage() {}

func (x *Aps) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_transport_line_protection_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Aps.ProtoReflect.Descriptor instead.
func (*Aps) Descriptor() ([]byte, []int) {
	return file_openconfig_transport_line_protection_proto_rawDescGZIP(), []int{0}
}

func (x *Aps) GetApsModules() *Aps_ApsModules {
	if x != nil {
		return x.ApsModules
	}
	return nil
}

type Aps_ApsModules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApsModule []*Aps_ApsModules_ApsModuleKey `protobuf:"bytes,242083953,rep,name=aps_module,json=apsModule,proto3" json:"aps_module,omitempty"`
}

func (x *Aps_ApsModules) Reset() {
	*x = Aps_ApsModules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_transport_line_protection_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Aps_ApsModules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Aps_ApsModules) ProtoMessage() {}

func (x *Aps_ApsModules) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_transport_line_protection_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Aps_ApsModules.ProtoReflect.Descriptor instead.
func (*Aps_ApsModules) Descriptor() ([]byte, []int) {
	return file_openconfig_transport_line_protection_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Aps_ApsModules) GetApsModule() []*Aps_ApsModules_ApsModuleKey {
	if x != nil {
		return x.ApsModule
	}
	return nil
}

type Aps_ApsModules_ApsModule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Aps_ApsModules_ApsModule_Config `protobuf:"bytes,32573590,opt,name=config,proto3" json:"config,omitempty"`
	Ports  *Aps_ApsModules_ApsModule_Ports  `protobuf:"bytes,338390684,opt,name=ports,proto3" json:"ports,omitempty"`
	State  *Aps_ApsModules_ApsModule_State  `protobuf:"bytes,64729923,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Aps_ApsModules_ApsModule) Reset() {
	*x = Aps_ApsModules_ApsModule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_transport_line_protection_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Aps_ApsModules_ApsModule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Aps_ApsModules_ApsModule) ProtoMessage() {}

func (x *Aps_ApsModules_ApsModule) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_transport_line_protection_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Aps_ApsModules_ApsModule.ProtoReflect.Descriptor instead.
func (*Aps_ApsModules_ApsModule) Descriptor() ([]byte, []int) {
	return file_openconfig_transport_line_protection_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *Aps_ApsModules_ApsModule) GetConfig() *Aps_ApsModules_ApsModule_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule) GetPorts() *Aps_ApsModules_ApsModule_Ports {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule) GetState() *Aps_ApsModules_ApsModule_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Aps_ApsModules_ApsModuleKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string                    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ApsModule *Aps_ApsModules_ApsModule `protobuf:"bytes,2,opt,name=aps_module,json=apsModule,proto3" json:"aps_module,omitempty"`
}

func (x *Aps_ApsModules_ApsModuleKey) Reset() {
	*x = Aps_ApsModules_ApsModuleKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_transport_line_protection_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Aps_ApsModules_ApsModuleKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Aps_ApsModules_ApsModuleKey) ProtoMessage() {}

func (x *Aps_ApsModules_ApsModuleKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_transport_line_protection_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Aps_ApsModules_ApsModuleKey.ProtoReflect.Descriptor instead.
func (*Aps_ApsModules_ApsModuleKey) Descriptor() ([]byte, []int) {
	return file_openconfig_transport_line_protection_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *Aps_ApsModules_ApsModuleKey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Aps_ApsModules_ApsModuleKey) GetApsModule() *Aps_ApsModules_ApsModule {
	if x != nil {
		return x.ApsModule
	}
	return nil
}

type Aps_ApsModules_ApsModule_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ForceToPort                   Aps_ApsModules_ApsModule_Config_ForceToPort `protobuf:"varint,33333476,opt,name=force_to_port,json=forceToPort,proto3,enum=openconfig.Aps_ApsModules_ApsModule_Config_ForceToPort" json:"force_to_port,omitempty"`
	HoldOffTime                   *ywrapper.UintValue                         `protobuf:"bytes,416502272,opt,name=hold_off_time,json=holdOffTime,proto3" json:"hold_off_time,omitempty"`
	Name                          *ywrapper.StringValue                       `protobuf:"bytes,338433916,opt,name=name,proto3" json:"name,omitempty"`
	PrimarySwitchHysteresis       *ywrapper.Decimal64Value                    `protobuf:"bytes,108820170,opt,name=primary_switch_hysteresis,json=primarySwitchHysteresis,proto3" json:"primary_switch_hysteresis,omitempty"`
	PrimarySwitchThreshold        *ywrapper.Decimal64Value                    `protobuf:"bytes,487191516,opt,name=primary_switch_threshold,json=primarySwitchThreshold,proto3" json:"primary_switch_threshold,omitempty"`
	RelativeSwitchThreshold       *ywrapper.Decimal64Value                    `protobuf:"bytes,228318604,opt,name=relative_switch_threshold,json=relativeSwitchThreshold,proto3" json:"relative_switch_threshold,omitempty"`
	RelativeSwitchThresholdOffset *ywrapper.Decimal64Value                    `protobuf:"bytes,470414232,opt,name=relative_switch_threshold_offset,json=relativeSwitchThresholdOffset,proto3" json:"relative_switch_threshold_offset,omitempty"`
	Revertive                     *ywrapper.BoolValue                         `protobuf:"bytes,430074495,opt,name=revertive,proto3" json:"revertive,omitempty"`
	SecondarySwitchThreshold      *ywrapper.Decimal64Value                    `protobuf:"bytes,359289280,opt,name=secondary_switch_threshold,json=secondarySwitchThreshold,proto3" json:"secondary_switch_threshold,omitempty"`
	WaitToRestoreTime             *ywrapper.UintValue                         `protobuf:"bytes,337462701,opt,name=wait_to_restore_time,json=waitToRestoreTime,proto3" json:"wait_to_restore_time,omitempty"`
}

func (x *Aps_ApsModules_ApsModule_Config) Reset() {
	*x = Aps_ApsModules_ApsModule_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_transport_line_protection_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Aps_ApsModules_ApsModule_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Aps_ApsModules_ApsModule_Config) ProtoMessage() {}

func (x *Aps_ApsModules_ApsModule_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_transport_line_protection_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Aps_ApsModules_ApsModule_Config.ProtoReflect.Descriptor instead.
func (*Aps_ApsModules_ApsModule_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_transport_line_protection_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (x *Aps_ApsModules_ApsModule_Config) GetForceToPort() Aps_ApsModules_ApsModule_Config_ForceToPort {
	if x != nil {
		return x.ForceToPort
	}
	return Aps_ApsModules_ApsModule_Config_FORCETOPORT_NONE
}

func (x *Aps_ApsModules_ApsModule_Config) GetHoldOffTime() *ywrapper.UintValue {
	if x != nil {
		return x.HoldOffTime
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_Config) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_Config) GetPrimarySwitchHysteresis() *ywrapper.Decimal64Value {
	if x != nil {
		return x.PrimarySwitchHysteresis
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_Config) GetPrimarySwitchThreshold() *ywrapper.Decimal64Value {
	if x != nil {
		return x.PrimarySwitchThreshold
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_Config) GetRelativeSwitchThreshold() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RelativeSwitchThreshold
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_Config) GetRelativeSwitchThresholdOffset() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RelativeSwitchThresholdOffset
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_Config) GetRevertive() *ywrapper.BoolValue {
	if x != nil {
		return x.Revertive
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_Config) GetSecondarySwitchThreshold() *ywrapper.Decimal64Value {
	if x != nil {
		return x.SecondarySwitchThreshold
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_Config) GetWaitToRestoreTime() *ywrapper.UintValue {
	if x != nil {
		return x.WaitToRestoreTime
	}
	return nil
}

type Aps_ApsModules_ApsModule_Ports struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonIn         *Aps_ApsModules_ApsModule_Ports_CommonIn         `protobuf:"bytes,429753852,opt,name=common_in,json=commonIn,proto3" json:"common_in,omitempty"`
	CommonOutput     *Aps_ApsModules_ApsModule_Ports_CommonOutput     `protobuf:"bytes,98424310,opt,name=common_output,json=commonOutput,proto3" json:"common_output,omitempty"`
	LinePrimaryIn    *Aps_ApsModules_ApsModule_Ports_LinePrimaryIn    `protobuf:"bytes,134912760,opt,name=line_primary_in,json=linePrimaryIn,proto3" json:"line_primary_in,omitempty"`
	LinePrimaryOut   *Aps_ApsModules_ApsModule_Ports_LinePrimaryOut   `protobuf:"bytes,397828895,opt,name=line_primary_out,json=linePrimaryOut,proto3" json:"line_primary_out,omitempty"`
	LineSecondaryIn  *Aps_ApsModules_ApsModule_Ports_LineSecondaryIn  `protobuf:"bytes,147604704,opt,name=line_secondary_in,json=lineSecondaryIn,proto3" json:"line_secondary_in,omitempty"`
	LineSecondaryOut *Aps_ApsModules_ApsModule_Ports_LineSecondaryOut `protobuf:"bytes,9761959,opt,name=line_secondary_out,json=lineSecondaryOut,proto3" json:"line_secondary_out,omitempty"`
}

func (x *Aps_ApsModules_ApsModule_Ports) Reset() {
	*x = Aps_ApsModules_ApsModule_Ports{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_transport_line_protection_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Aps_ApsModules_ApsModule_Ports) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Aps_ApsModules_ApsModule_Ports) ProtoMessage() {}

func (x *Aps_ApsModules_ApsModule_Ports) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_transport_line_protection_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Aps_ApsModules_ApsModule_Ports.ProtoReflect.Descriptor instead.
func (*Aps_ApsModules_ApsModule_Ports) Descriptor() ([]byte, []int) {
	return file_openconfig_transport_line_protection_proto_rawDescGZIP(), []int{0, 0, 0, 1}
}

func (x *Aps_ApsModules_ApsModule_Ports) GetCommonIn() *Aps_ApsModules_ApsModule_Ports_CommonIn {
	if x != nil {
		return x.CommonIn
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_Ports) GetCommonOutput() *Aps_ApsModules_ApsModule_Ports_CommonOutput {
	if x != nil {
		return x.CommonOutput
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_Ports) GetLinePrimaryIn() *Aps_ApsModules_ApsModule_Ports_LinePrimaryIn {
	if x != nil {
		return x.LinePrimaryIn
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_Ports) GetLinePrimaryOut() *Aps_ApsModules_ApsModule_Ports_LinePrimaryOut {
	if x != nil {
		return x.LinePrimaryOut
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_Ports) GetLineSecondaryIn() *Aps_ApsModules_ApsModule_Ports_LineSecondaryIn {
	if x != nil {
		return x.LineSecondaryIn
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_Ports) GetLineSecondaryOut() *Aps_ApsModules_ApsModule_Ports_LineSecondaryOut {
	if x != nil {
		return x.LineSecondaryOut
	}
	return nil
}

type Aps_ApsModules_ApsModule_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivePath                    OpenconfigTransportLineProtectionAPSPATHS  `protobuf:"varint,34397044,opt,name=active_path,json=activePath,proto3,enum=openconfig.OpenconfigTransportLineProtectionAPSPATHS" json:"active_path,omitempty"`
	ForceToPort                   Aps_ApsModules_ApsModule_State_ForceToPort `protobuf:"varint,416828849,opt,name=force_to_port,json=forceToPort,proto3,enum=openconfig.Aps_ApsModules_ApsModule_State_ForceToPort" json:"force_to_port,omitempty"`
	HoldOffTime                   *ywrapper.UintValue                        `protobuf:"bytes,294123765,opt,name=hold_off_time,json=holdOffTime,proto3" json:"hold_off_time,omitempty"`
	Name                          *ywrapper.StringValue                      `protobuf:"bytes,38638291,opt,name=name,proto3" json:"name,omitempty"`
	PrimarySwitchHysteresis       *ywrapper.Decimal64Value                   `protobuf:"bytes,188003603,opt,name=primary_switch_hysteresis,json=primarySwitchHysteresis,proto3" json:"primary_switch_hysteresis,omitempty"`
	PrimarySwitchThreshold        *ywrapper.Decimal64Value                   `protobuf:"bytes,186132079,opt,name=primary_switch_threshold,json=primarySwitchThreshold,proto3" json:"primary_switch_threshold,omitempty"`
	RelativeSwitchThreshold       *ywrapper.Decimal64Value                   `protobuf:"bytes,53531973,opt,name=relative_switch_threshold,json=relativeSwitchThreshold,proto3" json:"relative_switch_threshold,omitempty"`
	RelativeSwitchThresholdOffset *ywrapper.Decimal64Value                   `protobuf:"bytes,289687179,opt,name=relative_switch_threshold_offset,json=relativeSwitchThresholdOffset,proto3" json:"relative_switch_threshold_offset,omitempty"`
	Revertive                     *ywrapper.BoolValue                        `protobuf:"bytes,346433622,opt,name=revertive,proto3" json:"revertive,omitempty"`
	SecondarySwitchThreshold      *ywrapper.Decimal64Value                   `protobuf:"bytes,83618599,opt,name=secondary_switch_threshold,json=secondarySwitchThreshold,proto3" json:"secondary_switch_threshold,omitempty"`
	WaitToRestoreTime             *ywrapper.UintValue                        `protobuf:"bytes,356352546,opt,name=wait_to_restore_time,json=waitToRestoreTime,proto3" json:"wait_to_restore_time,omitempty"`
}

func (x *Aps_ApsModules_ApsModule_State) Reset() {
	*x = Aps_ApsModules_ApsModule_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_transport_line_protection_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Aps_ApsModules_ApsModule_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Aps_ApsModules_ApsModule_State) ProtoMessage() {}

func (x *Aps_ApsModules_ApsModule_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_transport_line_protection_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Aps_ApsModules_ApsModule_State.ProtoReflect.Descriptor instead.
func (*Aps_ApsModules_ApsModule_State) Descriptor() ([]byte, []int) {
	return file_openconfig_transport_line_protection_proto_rawDescGZIP(), []int{0, 0, 0, 2}
}

func (x *Aps_ApsModules_ApsModule_State) GetActivePath() OpenconfigTransportLineProtectionAPSPATHS {
	if x != nil {
		return x.ActivePath
	}
	return OpenconfigTransportLineProtectionAPSPATHS_OPENCONFIGTRANSPORTLINEPROTECTIONAPSPATHS_UNSET
}

func (x *Aps_ApsModules_ApsModule_State) GetForceToPort() Aps_ApsModules_ApsModule_State_ForceToPort {
	if x != nil {
		return x.ForceToPort
	}
	return Aps_ApsModules_ApsModule_State_FORCETOPORT_NONE
}

func (x *Aps_ApsModules_ApsModule_State) GetHoldOffTime() *ywrapper.UintValue {
	if x != nil {
		return x.HoldOffTime
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_State) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_State) GetPrimarySwitchHysteresis() *ywrapper.Decimal64Value {
	if x != nil {
		return x.PrimarySwitchHysteresis
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_State) GetPrimarySwitchThreshold() *ywrapper.Decimal64Value {
	if x != nil {
		return x.PrimarySwitchThreshold
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_State) GetRelativeSwitchThreshold() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RelativeSwitchThreshold
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_State) GetRelativeSwitchThresholdOffset() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RelativeSwitchThresholdOffset
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_State) GetRevertive() *ywrapper.BoolValue {
	if x != nil {
		return x.Revertive
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_State) GetSecondarySwitchThreshold() *ywrapper.Decimal64Value {
	if x != nil {
		return x.SecondarySwitchThreshold
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_State) GetWaitToRestoreTime() *ywrapper.UintValue {
	if x != nil {
		return x.WaitToRestoreTime
	}
	return nil
}

type Aps_ApsModules_ApsModule_Ports_CommonIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Aps_ApsModules_ApsModule_Ports_CommonIn_Config `protobuf:"bytes,22856913,opt,name=config,proto3" json:"config,omitempty"`
	State  *Aps_ApsModules_ApsModule_Ports_CommonIn_State  `protobuf:"bytes,35894470,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Aps_ApsModules_ApsModule_Ports_CommonIn) Reset() {
	*x = Aps_ApsModules_ApsModule_Ports_CommonIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_transport_line_protection_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Aps_ApsModules_ApsModule_Ports_CommonIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Aps_ApsModules_ApsModule_Ports_CommonIn) ProtoMessage() {}

func (x *Aps_ApsModules_ApsModule_Ports_CommonIn) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_transport_line_protection_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Aps_ApsModules_ApsModule_Ports_CommonIn.ProtoReflect.Descriptor instead.
func (*Aps_ApsModules_ApsModule_Ports_CommonIn) Descriptor() ([]byte, []int) {
	return file_openconfig_transport_line_protection_proto_rawDescGZIP(), []int{0, 0, 0, 1, 0}
}

func (x *Aps_ApsModules_ApsModule_Ports_CommonIn) GetConfig() *Aps_ApsModules_ApsModule_Ports_CommonIn_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_Ports_CommonIn) GetState() *Aps_ApsModules_ApsModule_Ports_CommonIn_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Aps_ApsModules_ApsModule_Ports_CommonOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Aps_ApsModules_ApsModule_Ports_CommonOutput_Config `protobuf:"bytes,206692439,opt,name=config,proto3" json:"config,omitempty"`
	State  *Aps_ApsModules_ApsModule_Ports_CommonOutput_State  `protobuf:"bytes,38570760,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Aps_ApsModules_ApsModule_Ports_CommonOutput) Reset() {
	*x = Aps_ApsModules_ApsModule_Ports_CommonOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_transport_line_protection_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Aps_ApsModules_ApsModule_Ports_CommonOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Aps_ApsModules_ApsModule_Ports_CommonOutput) ProtoMessage() {}

func (x *Aps_ApsModules_ApsModule_Ports_CommonOutput) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_transport_line_protection_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Aps_ApsModules_ApsModule_Ports_CommonOutput.ProtoReflect.Descriptor instead.
func (*Aps_ApsModules_ApsModule_Ports_CommonOutput) Descriptor() ([]byte, []int) {
	return file_openconfig_transport_line_protection_proto_rawDescGZIP(), []int{0, 0, 0, 1, 1}
}

func (x *Aps_ApsModules_ApsModule_Ports_CommonOutput) GetConfig() *Aps_ApsModules_ApsModule_Ports_CommonOutput_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_Ports_CommonOutput) GetState() *Aps_ApsModules_ApsModule_Ports_CommonOutput_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Aps_ApsModules_ApsModule_Ports_LinePrimaryIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Aps_ApsModules_ApsModule_Ports_LinePrimaryIn_Config `protobuf:"bytes,75325565,opt,name=config,proto3" json:"config,omitempty"`
	State  *Aps_ApsModules_ApsModule_Ports_LinePrimaryIn_State  `protobuf:"bytes,239272178,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Aps_ApsModules_ApsModule_Ports_LinePrimaryIn) Reset() {
	*x = Aps_ApsModules_ApsModule_Ports_LinePrimaryIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_transport_line_protection_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Aps_ApsModules_ApsModule_Ports_LinePrimaryIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Aps_ApsModules_ApsModule_Ports_LinePrimaryIn) ProtoMessage() {}

func (x *Aps_ApsModules_ApsModule_Ports_LinePrimaryIn) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_transport_line_protection_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Aps_ApsModules_ApsModule_Ports_LinePrimaryIn.ProtoReflect.Descriptor instead.
func (*Aps_ApsModules_ApsModule_Ports_LinePrimaryIn) Descriptor() ([]byte, []int) {
	return file_openconfig_transport_line_protection_proto_rawDescGZIP(), []int{0, 0, 0, 1, 2}
}

func (x *Aps_ApsModules_ApsModule_Ports_LinePrimaryIn) GetConfig() *Aps_ApsModules_ApsModule_Ports_LinePrimaryIn_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_Ports_LinePrimaryIn) GetState() *Aps_ApsModules_ApsModule_Ports_LinePrimaryIn_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Aps_ApsModules_ApsModule_Ports_LinePrimaryOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Aps_ApsModules_ApsModule_Ports_LinePrimaryOut_Config `protobuf:"bytes,446253792,opt,name=config,proto3" json:"config,omitempty"`
	State  *Aps_ApsModules_ApsModule_Ports_LinePrimaryOut_State  `protobuf:"bytes,458616665,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Aps_ApsModules_ApsModule_Ports_LinePrimaryOut) Reset() {
	*x = Aps_ApsModules_ApsModule_Ports_LinePrimaryOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_transport_line_protection_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Aps_ApsModules_ApsModule_Ports_LinePrimaryOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Aps_ApsModules_ApsModule_Ports_LinePrimaryOut) ProtoMessage() {}

func (x *Aps_ApsModules_ApsModule_Ports_LinePrimaryOut) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_transport_line_protection_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Aps_ApsModules_ApsModule_Ports_LinePrimaryOut.ProtoReflect.Descriptor instead.
func (*Aps_ApsModules_ApsModule_Ports_LinePrimaryOut) Descriptor() ([]byte, []int) {
	return file_openconfig_transport_line_protection_proto_rawDescGZIP(), []int{0, 0, 0, 1, 3}
}

func (x *Aps_ApsModules_ApsModule_Ports_LinePrimaryOut) GetConfig() *Aps_ApsModules_ApsModule_Ports_LinePrimaryOut_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_Ports_LinePrimaryOut) GetState() *Aps_ApsModules_ApsModule_Ports_LinePrimaryOut_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Aps_ApsModules_ApsModule_Ports_LineSecondaryIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Aps_ApsModules_ApsModule_Ports_LineSecondaryIn_Config `protobuf:"bytes,293706197,opt,name=config,proto3" json:"config,omitempty"`
	State  *Aps_ApsModules_ApsModule_Ports_LineSecondaryIn_State  `protobuf:"bytes,274269002,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Aps_ApsModules_ApsModule_Ports_LineSecondaryIn) Reset() {
	*x = Aps_ApsModules_ApsModule_Ports_LineSecondaryIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_transport_line_protection_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Aps_ApsModules_ApsModule_Ports_LineSecondaryIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Aps_ApsModules_ApsModule_Ports_LineSecondaryIn) ProtoMessage() {}

func (x *Aps_ApsModules_ApsModule_Ports_LineSecondaryIn) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_transport_line_protection_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Aps_ApsModules_ApsModule_Ports_LineSecondaryIn.ProtoReflect.Descriptor instead.
func (*Aps_ApsModules_ApsModule_Ports_LineSecondaryIn) Descriptor() ([]byte, []int) {
	return file_openconfig_transport_line_protection_proto_rawDescGZIP(), []int{0, 0, 0, 1, 4}
}

func (x *Aps_ApsModules_ApsModule_Ports_LineSecondaryIn) GetConfig() *Aps_ApsModules_ApsModule_Ports_LineSecondaryIn_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_Ports_LineSecondaryIn) GetState() *Aps_ApsModules_ApsModule_Ports_LineSecondaryIn_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Aps_ApsModules_ApsModule_Ports_LineSecondaryOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Aps_ApsModules_ApsModule_Ports_LineSecondaryOut_Config `protobuf:"bytes,536483512,opt,name=config,proto3" json:"config,omitempty"`
	State  *Aps_ApsModules_ApsModule_Ports_LineSecondaryOut_State  `protobuf:"bytes,519699153,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Aps_ApsModules_ApsModule_Ports_LineSecondaryOut) Reset() {
	*x = Aps_ApsModules_ApsModule_Ports_LineSecondaryOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_transport_line_protection_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Aps_ApsModules_ApsModule_Ports_LineSecondaryOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Aps_ApsModules_ApsModule_Ports_LineSecondaryOut) ProtoMessage() {}

func (x *Aps_ApsModules_ApsModule_Ports_LineSecondaryOut) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_transport_line_protection_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Aps_ApsModules_ApsModule_Ports_LineSecondaryOut.ProtoReflect.Descriptor instead.
func (*Aps_ApsModules_ApsModule_Ports_LineSecondaryOut) Descriptor() ([]byte, []int) {
	return file_openconfig_transport_line_protection_proto_rawDescGZIP(), []int{0, 0, 0, 1, 5}
}

func (x *Aps_ApsModules_ApsModule_Ports_LineSecondaryOut) GetConfig() *Aps_ApsModules_ApsModule_Ports_LineSecondaryOut_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_Ports_LineSecondaryOut) GetState() *Aps_ApsModules_ApsModule_Ports_LineSecondaryOut_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Aps_ApsModules_ApsModule_Ports_CommonIn_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled           *ywrapper.BoolValue      `protobuf:"bytes,410901767,opt,name=enabled,proto3" json:"enabled,omitempty"`
	TargetAttenuation *ywrapper.Decimal64Value `protobuf:"bytes,127179608,opt,name=target_attenuation,json=targetAttenuation,proto3" json:"target_attenuation,omitempty"`
}

func (x *Aps_ApsModules_ApsModule_Ports_CommonIn_Config) Reset() {
	*x = Aps_ApsModules_ApsModule_Ports_CommonIn_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_transport_line_protection_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Aps_ApsModules_ApsModule_Ports_CommonIn_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Aps_ApsModules_ApsModule_Ports_CommonIn_Config) ProtoMessage() {}

func (x *Aps_ApsModules_ApsModule_Ports_CommonIn_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_transport_line_protection_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Aps_ApsModules_ApsModule_Ports_CommonIn_Config.ProtoReflect.Descriptor instead.
func (*Aps_ApsModules_ApsModule_Ports_CommonIn_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_transport_line_protection_proto_rawDescGZIP(), []int{0, 0, 0, 1, 0, 0}
}

func (x *Aps_ApsModules_ApsModule_Ports_CommonIn_Config) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_Ports_CommonIn_Config) GetTargetAttenuation() *ywrapper.Decimal64Value {
	if x != nil {
		return x.TargetAttenuation
	}
	return nil
}

type Aps_ApsModules_ApsModule_Ports_CommonIn_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attenuation       *ywrapper.Decimal64Value                                    `protobuf:"bytes,235226099,opt,name=attenuation,proto3" json:"attenuation,omitempty"`
	Enabled           *ywrapper.BoolValue                                         `protobuf:"bytes,57970612,opt,name=enabled,proto3" json:"enabled,omitempty"`
	OpticalPower      *Aps_ApsModules_ApsModule_Ports_CommonIn_State_OpticalPower `protobuf:"bytes,476896175,opt,name=optical_power,json=opticalPower,proto3" json:"optical_power,omitempty"`
	TargetAttenuation *ywrapper.Decimal64Value                                    `protobuf:"bytes,481913389,opt,name=target_attenuation,json=targetAttenuation,proto3" json:"target_attenuation,omitempty"`
}

func (x *Aps_ApsModules_ApsModule_Ports_CommonIn_State) Reset() {
	*x = Aps_ApsModules_ApsModule_Ports_CommonIn_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_transport_line_protection_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Aps_ApsModules_ApsModule_Ports_CommonIn_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Aps_ApsModules_ApsModule_Ports_CommonIn_State) ProtoMessage() {}

func (x *Aps_ApsModules_ApsModule_Ports_CommonIn_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_transport_line_protection_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Aps_ApsModules_ApsModule_Ports_CommonIn_State.ProtoReflect.Descriptor instead.
func (*Aps_ApsModules_ApsModule_Ports_CommonIn_State) Descriptor() ([]byte, []int) {
	return file_openconfig_transport_line_protection_proto_rawDescGZIP(), []int{0, 0, 0, 1, 0, 1}
}

func (x *Aps_ApsModules_ApsModule_Ports_CommonIn_State) GetAttenuation() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Attenuation
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_Ports_CommonIn_State) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_Ports_CommonIn_State) GetOpticalPower() *Aps_ApsModules_ApsModule_Ports_CommonIn_State_OpticalPower {
	if x != nil {
		return x.OpticalPower
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_Ports_CommonIn_State) GetTargetAttenuation() *ywrapper.Decimal64Value {
	if x != nil {
		return x.TargetAttenuation
	}
	return nil
}

type Aps_ApsModules_ApsModule_Ports_CommonIn_State_OpticalPower struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avg      *ywrapper.Decimal64Value `protobuf:"bytes,59678078,opt,name=avg,proto3" json:"avg,omitempty"`
	Instant  *ywrapper.Decimal64Value `protobuf:"bytes,37675949,opt,name=instant,proto3" json:"instant,omitempty"`
	Interval *ywrapper.UintValue      `protobuf:"bytes,479877745,opt,name=interval,proto3" json:"interval,omitempty"`
	Max      *ywrapper.Decimal64Value `protobuf:"bytes,211355192,opt,name=max,proto3" json:"max,omitempty"`
	MaxTime  *ywrapper.UintValue      `protobuf:"bytes,306803226,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	Min      *ywrapper.Decimal64Value `protobuf:"bytes,345576118,opt,name=min,proto3" json:"min,omitempty"`
	MinTime  *ywrapper.UintValue      `protobuf:"bytes,66716340,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
}

func (x *Aps_ApsModules_ApsModule_Ports_CommonIn_State_OpticalPower) Reset() {
	*x = Aps_ApsModules_ApsModule_Ports_CommonIn_State_OpticalPower{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_transport_line_protection_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Aps_ApsModules_ApsModule_Ports_CommonIn_State_OpticalPower) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Aps_ApsModules_ApsModule_Ports_CommonIn_State_OpticalPower) ProtoMessage() {}

func (x *Aps_ApsModules_ApsModule_Ports_CommonIn_State_OpticalPower) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_transport_line_protection_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Aps_ApsModules_ApsModule_Ports_CommonIn_State_OpticalPower.ProtoReflect.Descriptor instead.
func (*Aps_ApsModules_ApsModule_Ports_CommonIn_State_OpticalPower) Descriptor() ([]byte, []int) {
	return file_openconfig_transport_line_protection_proto_rawDescGZIP(), []int{0, 0, 0, 1, 0, 1, 0}
}

func (x *Aps_ApsModules_ApsModule_Ports_CommonIn_State_OpticalPower) GetAvg() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Avg
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_Ports_CommonIn_State_OpticalPower) GetInstant() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Instant
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_Ports_CommonIn_State_OpticalPower) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_Ports_CommonIn_State_OpticalPower) GetMax() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_Ports_CommonIn_State_OpticalPower) GetMaxTime() *ywrapper.UintValue {
	if x != nil {
		return x.MaxTime
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_Ports_CommonIn_State_OpticalPower) GetMin() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_Ports_CommonIn_State_OpticalPower) GetMinTime() *ywrapper.UintValue {
	if x != nil {
		return x.MinTime
	}
	return nil
}

type Aps_ApsModules_ApsModule_Ports_CommonOutput_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetAttenuation *ywrapper.Decimal64Value `protobuf:"bytes,470143474,opt,name=target_attenuation,json=targetAttenuation,proto3" json:"target_attenuation,omitempty"`
}

func (x *Aps_ApsModules_ApsModule_Ports_CommonOutput_Config) Reset() {
	*x = Aps_ApsModules_ApsModule_Ports_CommonOutput_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_transport_line_protection_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Aps_ApsModules_ApsModule_Ports_CommonOutput_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Aps_ApsModules_ApsModule_Ports_CommonOutput_Config) ProtoMessage() {}

func (x *Aps_ApsModules_ApsModule_Ports_CommonOutput_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_transport_line_protection_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Aps_ApsModules_ApsModule_Ports_CommonOutput_Config.ProtoReflect.Descriptor instead.
func (*Aps_ApsModules_ApsModule_Ports_CommonOutput_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_transport_line_protection_proto_rawDescGZIP(), []int{0, 0, 0, 1, 1, 0}
}

func (x *Aps_ApsModules_ApsModule_Ports_CommonOutput_Config) GetTargetAttenuation() *ywrapper.Decimal64Value {
	if x != nil {
		return x.TargetAttenuation
	}
	return nil
}

type Aps_ApsModules_ApsModule_Ports_CommonOutput_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attenuation       *ywrapper.Decimal64Value                                        `protobuf:"bytes,439732253,opt,name=attenuation,proto3" json:"attenuation,omitempty"`
	OpticalPower      *Aps_ApsModules_ApsModule_Ports_CommonOutput_State_OpticalPower `protobuf:"bytes,372658617,opt,name=optical_power,json=opticalPower,proto3" json:"optical_power,omitempty"`
	TargetAttenuation *ywrapper.Decimal64Value                                        `protobuf:"bytes,66274907,opt,name=target_attenuation,json=targetAttenuation,proto3" json:"target_attenuation,omitempty"`
}

func (x *Aps_ApsModules_ApsModule_Ports_CommonOutput_State) Reset() {
	*x = Aps_ApsModules_ApsModule_Ports_CommonOutput_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_transport_line_protection_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Aps_ApsModules_ApsModule_Ports_CommonOutput_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Aps_ApsModules_ApsModule_Ports_CommonOutput_State) ProtoMessage() {}

func (x *Aps_ApsModules_ApsModule_Ports_CommonOutput_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_transport_line_protection_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Aps_ApsModules_ApsModule_Ports_CommonOutput_State.ProtoReflect.Descriptor instead.
func (*Aps_ApsModules_ApsModule_Ports_CommonOutput_State) Descriptor() ([]byte, []int) {
	return file_openconfig_transport_line_protection_proto_rawDescGZIP(), []int{0, 0, 0, 1, 1, 1}
}

func (x *Aps_ApsModules_ApsModule_Ports_CommonOutput_State) GetAttenuation() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Attenuation
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_Ports_CommonOutput_State) GetOpticalPower() *Aps_ApsModules_ApsModule_Ports_CommonOutput_State_OpticalPower {
	if x != nil {
		return x.OpticalPower
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_Ports_CommonOutput_State) GetTargetAttenuation() *ywrapper.Decimal64Value {
	if x != nil {
		return x.TargetAttenuation
	}
	return nil
}

type Aps_ApsModules_ApsModule_Ports_CommonOutput_State_OpticalPower struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avg      *ywrapper.Decimal64Value `protobuf:"bytes,225671524,opt,name=avg,proto3" json:"avg,omitempty"`
	Instant  *ywrapper.Decimal64Value `protobuf:"bytes,445436095,opt,name=instant,proto3" json:"instant,omitempty"`
	Interval *ywrapper.UintValue      `protobuf:"bytes,337202943,opt,name=interval,proto3" json:"interval,omitempty"`
	Max      *ywrapper.Decimal64Value `protobuf:"bytes,441796222,opt,name=max,proto3" json:"max,omitempty"`
	MaxTime  *ywrapper.UintValue      `protobuf:"bytes,301803228,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	Min      *ywrapper.Decimal64Value `protobuf:"bytes,39146224,opt,name=min,proto3" json:"min,omitempty"`
	MinTime  *ywrapper.UintValue      `protobuf:"bytes,266973970,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
}

func (x *Aps_ApsModules_ApsModule_Ports_CommonOutput_State_OpticalPower) Reset() {
	*x = Aps_ApsModules_ApsModule_Ports_CommonOutput_State_OpticalPower{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_transport_line_protection_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Aps_ApsModules_ApsModule_Ports_CommonOutput_State_OpticalPower) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Aps_ApsModules_ApsModule_Ports_CommonOutput_State_OpticalPower) ProtoMessage() {}

func (x *Aps_ApsModules_ApsModule_Ports_CommonOutput_State_OpticalPower) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_transport_line_protection_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Aps_ApsModules_ApsModule_Ports_CommonOutput_State_OpticalPower.ProtoReflect.Descriptor instead.
func (*Aps_ApsModules_ApsModule_Ports_CommonOutput_State_OpticalPower) Descriptor() ([]byte, []int) {
	return file_openconfig_transport_line_protection_proto_rawDescGZIP(), []int{0, 0, 0, 1, 1, 1, 0}
}

func (x *Aps_ApsModules_ApsModule_Ports_CommonOutput_State_OpticalPower) GetAvg() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Avg
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_Ports_CommonOutput_State_OpticalPower) GetInstant() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Instant
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_Ports_CommonOutput_State_OpticalPower) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_Ports_CommonOutput_State_OpticalPower) GetMax() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_Ports_CommonOutput_State_OpticalPower) GetMaxTime() *ywrapper.UintValue {
	if x != nil {
		return x.MaxTime
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_Ports_CommonOutput_State_OpticalPower) GetMin() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_Ports_CommonOutput_State_OpticalPower) GetMinTime() *ywrapper.UintValue {
	if x != nil {
		return x.MinTime
	}
	return nil
}

type Aps_ApsModules_ApsModule_Ports_LinePrimaryIn_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled           *ywrapper.BoolValue      `protobuf:"bytes,408456851,opt,name=enabled,proto3" json:"enabled,omitempty"`
	TargetAttenuation *ywrapper.Decimal64Value `protobuf:"bytes,312705020,opt,name=target_attenuation,json=targetAttenuation,proto3" json:"target_attenuation,omitempty"`
}

func (x *Aps_ApsModules_ApsModule_Ports_LinePrimaryIn_Config) Reset() {
	*x = Aps_ApsModules_ApsModule_Ports_LinePrimaryIn_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_transport_line_protection_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Aps_ApsModules_ApsModule_Ports_LinePrimaryIn_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Aps_ApsModules_ApsModule_Ports_LinePrimaryIn_Config) ProtoMessage() {}

func (x *Aps_ApsModules_ApsModule_Ports_LinePrimaryIn_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_transport_line_protection_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Aps_ApsModules_ApsModule_Ports_LinePrimaryIn_Config.ProtoReflect.Descriptor instead.
func (*Aps_ApsModules_ApsModule_Ports_LinePrimaryIn_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_transport_line_protection_proto_rawDescGZIP(), []int{0, 0, 0, 1, 2, 0}
}

func (x *Aps_ApsModules_ApsModule_Ports_LinePrimaryIn_Config) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_Ports_LinePrimaryIn_Config) GetTargetAttenuation() *ywrapper.Decimal64Value {
	if x != nil {
		return x.TargetAttenuation
	}
	return nil
}

type Aps_ApsModules_ApsModule_Ports_LinePrimaryIn_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attenuation       *ywrapper.Decimal64Value                                         `protobuf:"bytes,457232791,opt,name=attenuation,proto3" json:"attenuation,omitempty"`
	Enabled           *ywrapper.BoolValue                                              `protobuf:"bytes,29073024,opt,name=enabled,proto3" json:"enabled,omitempty"`
	OpticalPower      *Aps_ApsModules_ApsModule_Ports_LinePrimaryIn_State_OpticalPower `protobuf:"bytes,366842827,opt,name=optical_power,json=opticalPower,proto3" json:"optical_power,omitempty"`
	TargetAttenuation *ywrapper.Decimal64Value                                         `protobuf:"bytes,348525297,opt,name=target_attenuation,json=targetAttenuation,proto3" json:"target_attenuation,omitempty"`
}

func (x *Aps_ApsModules_ApsModule_Ports_LinePrimaryIn_State) Reset() {
	*x = Aps_ApsModules_ApsModule_Ports_LinePrimaryIn_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_transport_line_protection_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Aps_ApsModules_ApsModule_Ports_LinePrimaryIn_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Aps_ApsModules_ApsModule_Ports_LinePrimaryIn_State) ProtoMessage() {}

func (x *Aps_ApsModules_ApsModule_Ports_LinePrimaryIn_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_transport_line_protection_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Aps_ApsModules_ApsModule_Ports_LinePrimaryIn_State.ProtoReflect.Descriptor instead.
func (*Aps_ApsModules_ApsModule_Ports_LinePrimaryIn_State) Descriptor() ([]byte, []int) {
	return file_openconfig_transport_line_protection_proto_rawDescGZIP(), []int{0, 0, 0, 1, 2, 1}
}

func (x *Aps_ApsModules_ApsModule_Ports_LinePrimaryIn_State) GetAttenuation() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Attenuation
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_Ports_LinePrimaryIn_State) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_Ports_LinePrimaryIn_State) GetOpticalPower() *Aps_ApsModules_ApsModule_Ports_LinePrimaryIn_State_OpticalPower {
	if x != nil {
		return x.OpticalPower
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_Ports_LinePrimaryIn_State) GetTargetAttenuation() *ywrapper.Decimal64Value {
	if x != nil {
		return x.TargetAttenuation
	}
	return nil
}

type Aps_ApsModules_ApsModule_Ports_LinePrimaryIn_State_OpticalPower struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avg      *ywrapper.Decimal64Value `protobuf:"bytes,494403602,opt,name=avg,proto3" json:"avg,omitempty"`
	Instant  *ywrapper.Decimal64Value `protobuf:"bytes,418401985,opt,name=instant,proto3" json:"instant,omitempty"`
	Interval *ywrapper.UintValue      `protobuf:"bytes,88881621,opt,name=interval,proto3" json:"interval,omitempty"`
	Max      *ywrapper.Decimal64Value `protobuf:"bytes,242060708,opt,name=max,proto3" json:"max,omitempty"`
	MaxTime  *ywrapper.UintValue      `protobuf:"bytes,425491598,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	Min      *ywrapper.Decimal64Value `protobuf:"bytes,376281626,opt,name=min,proto3" json:"min,omitempty"`
	MinTime  *ywrapper.UintValue      `protobuf:"bytes,59833104,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
}

func (x *Aps_ApsModules_ApsModule_Ports_LinePrimaryIn_State_OpticalPower) Reset() {
	*x = Aps_ApsModules_ApsModule_Ports_LinePrimaryIn_State_OpticalPower{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_transport_line_protection_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Aps_ApsModules_ApsModule_Ports_LinePrimaryIn_State_OpticalPower) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Aps_ApsModules_ApsModule_Ports_LinePrimaryIn_State_OpticalPower) ProtoMessage() {}

func (x *Aps_ApsModules_ApsModule_Ports_LinePrimaryIn_State_OpticalPower) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_transport_line_protection_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Aps_ApsModules_ApsModule_Ports_LinePrimaryIn_State_OpticalPower.ProtoReflect.Descriptor instead.
func (*Aps_ApsModules_ApsModule_Ports_LinePrimaryIn_State_OpticalPower) Descriptor() ([]byte, []int) {
	return file_openconfig_transport_line_protection_proto_rawDescGZIP(), []int{0, 0, 0, 1, 2, 1, 0}
}

func (x *Aps_ApsModules_ApsModule_Ports_LinePrimaryIn_State_OpticalPower) GetAvg() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Avg
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_Ports_LinePrimaryIn_State_OpticalPower) GetInstant() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Instant
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_Ports_LinePrimaryIn_State_OpticalPower) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_Ports_LinePrimaryIn_State_OpticalPower) GetMax() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_Ports_LinePrimaryIn_State_OpticalPower) GetMaxTime() *ywrapper.UintValue {
	if x != nil {
		return x.MaxTime
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_Ports_LinePrimaryIn_State_OpticalPower) GetMin() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_Ports_LinePrimaryIn_State_OpticalPower) GetMinTime() *ywrapper.UintValue {
	if x != nil {
		return x.MinTime
	}
	return nil
}

type Aps_ApsModules_ApsModule_Ports_LinePrimaryOut_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetAttenuation *ywrapper.Decimal64Value `protobuf:"bytes,206354211,opt,name=target_attenuation,json=targetAttenuation,proto3" json:"target_attenuation,omitempty"`
}

func (x *Aps_ApsModules_ApsModule_Ports_LinePrimaryOut_Config) Reset() {
	*x = Aps_ApsModules_ApsModule_Ports_LinePrimaryOut_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_transport_line_protection_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Aps_ApsModules_ApsModule_Ports_LinePrimaryOut_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Aps_ApsModules_ApsModule_Ports_LinePrimaryOut_Config) ProtoMessage() {}

func (x *Aps_ApsModules_ApsModule_Ports_LinePrimaryOut_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_transport_line_protection_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Aps_ApsModules_ApsModule_Ports_LinePrimaryOut_Config.ProtoReflect.Descriptor instead.
func (*Aps_ApsModules_ApsModule_Ports_LinePrimaryOut_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_transport_line_protection_proto_rawDescGZIP(), []int{0, 0, 0, 1, 3, 0}
}

func (x *Aps_ApsModules_ApsModule_Ports_LinePrimaryOut_Config) GetTargetAttenuation() *ywrapper.Decimal64Value {
	if x != nil {
		return x.TargetAttenuation
	}
	return nil
}

type Aps_ApsModules_ApsModule_Ports_LinePrimaryOut_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attenuation       *ywrapper.Decimal64Value                                          `protobuf:"bytes,504223668,opt,name=attenuation,proto3" json:"attenuation,omitempty"`
	OpticalPower      *Aps_ApsModules_ApsModule_Ports_LinePrimaryOut_State_OpticalPower `protobuf:"bytes,263606976,opt,name=optical_power,json=opticalPower,proto3" json:"optical_power,omitempty"`
	TargetAttenuation *ywrapper.Decimal64Value                                          `protobuf:"bytes,287169232,opt,name=target_attenuation,json=targetAttenuation,proto3" json:"target_attenuation,omitempty"`
}

func (x *Aps_ApsModules_ApsModule_Ports_LinePrimaryOut_State) Reset() {
	*x = Aps_ApsModules_ApsModule_Ports_LinePrimaryOut_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_transport_line_protection_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Aps_ApsModules_ApsModule_Ports_LinePrimaryOut_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Aps_ApsModules_ApsModule_Ports_LinePrimaryOut_State) ProtoMessage() {}

func (x *Aps_ApsModules_ApsModule_Ports_LinePrimaryOut_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_transport_line_protection_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Aps_ApsModules_ApsModule_Ports_LinePrimaryOut_State.ProtoReflect.Descriptor instead.
func (*Aps_ApsModules_ApsModule_Ports_LinePrimaryOut_State) Descriptor() ([]byte, []int) {
	return file_openconfig_transport_line_protection_proto_rawDescGZIP(), []int{0, 0, 0, 1, 3, 1}
}

func (x *Aps_ApsModules_ApsModule_Ports_LinePrimaryOut_State) GetAttenuation() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Attenuation
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_Ports_LinePrimaryOut_State) GetOpticalPower() *Aps_ApsModules_ApsModule_Ports_LinePrimaryOut_State_OpticalPower {
	if x != nil {
		return x.OpticalPower
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_Ports_LinePrimaryOut_State) GetTargetAttenuation() *ywrapper.Decimal64Value {
	if x != nil {
		return x.TargetAttenuation
	}
	return nil
}

type Aps_ApsModules_ApsModule_Ports_LinePrimaryOut_State_OpticalPower struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avg      *ywrapper.Decimal64Value `protobuf:"bytes,387984865,opt,name=avg,proto3" json:"avg,omitempty"`
	Instant  *ywrapper.Decimal64Value `protobuf:"bytes,143166638,opt,name=instant,proto3" json:"instant,omitempty"`
	Interval *ywrapper.UintValue      `protobuf:"bytes,25931648,opt,name=interval,proto3" json:"interval,omitempty"`
	Max      *ywrapper.Decimal64Value `protobuf:"bytes,33696187,opt,name=max,proto3" json:"max,omitempty"`
	MaxTime  *ywrapper.UintValue      `protobuf:"bytes,140736359,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	Min      *ywrapper.Decimal64Value `protobuf:"bytes,167917109,opt,name=min,proto3" json:"min,omitempty"`
	MinTime  *ywrapper.UintValue      `protobuf:"bytes,77082917,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
}

func (x *Aps_ApsModules_ApsModule_Ports_LinePrimaryOut_State_OpticalPower) Reset() {
	*x = Aps_ApsModules_ApsModule_Ports_LinePrimaryOut_State_OpticalPower{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_transport_line_protection_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Aps_ApsModules_ApsModule_Ports_LinePrimaryOut_State_OpticalPower) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Aps_ApsModules_ApsModule_Ports_LinePrimaryOut_State_OpticalPower) ProtoMessage() {}

func (x *Aps_ApsModules_ApsModule_Ports_LinePrimaryOut_State_OpticalPower) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_transport_line_protection_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Aps_ApsModules_ApsModule_Ports_LinePrimaryOut_State_OpticalPower.ProtoReflect.Descriptor instead.
func (*Aps_ApsModules_ApsModule_Ports_LinePrimaryOut_State_OpticalPower) Descriptor() ([]byte, []int) {
	return file_openconfig_transport_line_protection_proto_rawDescGZIP(), []int{0, 0, 0, 1, 3, 1, 0}
}

func (x *Aps_ApsModules_ApsModule_Ports_LinePrimaryOut_State_OpticalPower) GetAvg() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Avg
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_Ports_LinePrimaryOut_State_OpticalPower) GetInstant() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Instant
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_Ports_LinePrimaryOut_State_OpticalPower) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_Ports_LinePrimaryOut_State_OpticalPower) GetMax() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_Ports_LinePrimaryOut_State_OpticalPower) GetMaxTime() *ywrapper.UintValue {
	if x != nil {
		return x.MaxTime
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_Ports_LinePrimaryOut_State_OpticalPower) GetMin() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_Ports_LinePrimaryOut_State_OpticalPower) GetMinTime() *ywrapper.UintValue {
	if x != nil {
		return x.MinTime
	}
	return nil
}

type Aps_ApsModules_ApsModule_Ports_LineSecondaryIn_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled           *ywrapper.BoolValue      `protobuf:"bytes,339894779,opt,name=enabled,proto3" json:"enabled,omitempty"`
	TargetAttenuation *ywrapper.Decimal64Value `protobuf:"bytes,455834596,opt,name=target_attenuation,json=targetAttenuation,proto3" json:"target_attenuation,omitempty"`
}

func (x *Aps_ApsModules_ApsModule_Ports_LineSecondaryIn_Config) Reset() {
	*x = Aps_ApsModules_ApsModule_Ports_LineSecondaryIn_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_transport_line_protection_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Aps_ApsModules_ApsModule_Ports_LineSecondaryIn_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Aps_ApsModules_ApsModule_Ports_LineSecondaryIn_Config) ProtoMessage() {}

func (x *Aps_ApsModules_ApsModule_Ports_LineSecondaryIn_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_transport_line_protection_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Aps_ApsModules_ApsModule_Ports_LineSecondaryIn_Config.ProtoReflect.Descriptor instead.
func (*Aps_ApsModules_ApsModule_Ports_LineSecondaryIn_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_transport_line_protection_proto_rawDescGZIP(), []int{0, 0, 0, 1, 4, 0}
}

func (x *Aps_ApsModules_ApsModule_Ports_LineSecondaryIn_Config) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_Ports_LineSecondaryIn_Config) GetTargetAttenuation() *ywrapper.Decimal64Value {
	if x != nil {
		return x.TargetAttenuation
	}
	return nil
}

type Aps_ApsModules_ApsModule_Ports_LineSecondaryIn_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attenuation       *ywrapper.Decimal64Value                                           `protobuf:"bytes,390117215,opt,name=attenuation,proto3" json:"attenuation,omitempty"`
	Enabled           *ywrapper.BoolValue                                                `protobuf:"bytes,503808424,opt,name=enabled,proto3" json:"enabled,omitempty"`
	OpticalPower      *Aps_ApsModules_ApsModule_Ports_LineSecondaryIn_State_OpticalPower `protobuf:"bytes,413857507,opt,name=optical_power,json=opticalPower,proto3" json:"optical_power,omitempty"`
	TargetAttenuation *ywrapper.Decimal64Value                                           `protobuf:"bytes,122935513,opt,name=target_attenuation,json=targetAttenuation,proto3" json:"target_attenuation,omitempty"`
}

func (x *Aps_ApsModules_ApsModule_Ports_LineSecondaryIn_State) Reset() {
	*x = Aps_ApsModules_ApsModule_Ports_LineSecondaryIn_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_transport_line_protection_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Aps_ApsModules_ApsModule_Ports_LineSecondaryIn_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Aps_ApsModules_ApsModule_Ports_LineSecondaryIn_State) ProtoMessage() {}

func (x *Aps_ApsModules_ApsModule_Ports_LineSecondaryIn_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_transport_line_protection_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Aps_ApsModules_ApsModule_Ports_LineSecondaryIn_State.ProtoReflect.Descriptor instead.
func (*Aps_ApsModules_ApsModule_Ports_LineSecondaryIn_State) Descriptor() ([]byte, []int) {
	return file_openconfig_transport_line_protection_proto_rawDescGZIP(), []int{0, 0, 0, 1, 4, 1}
}

func (x *Aps_ApsModules_ApsModule_Ports_LineSecondaryIn_State) GetAttenuation() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Attenuation
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_Ports_LineSecondaryIn_State) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_Ports_LineSecondaryIn_State) GetOpticalPower() *Aps_ApsModules_ApsModule_Ports_LineSecondaryIn_State_OpticalPower {
	if x != nil {
		return x.OpticalPower
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_Ports_LineSecondaryIn_State) GetTargetAttenuation() *ywrapper.Decimal64Value {
	if x != nil {
		return x.TargetAttenuation
	}
	return nil
}

type Aps_ApsModules_ApsModule_Ports_LineSecondaryIn_State_OpticalPower struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avg      *ywrapper.Decimal64Value `protobuf:"bytes,284575322,opt,name=avg,proto3" json:"avg,omitempty"`
	Instant  *ywrapper.Decimal64Value `protobuf:"bytes,497136345,opt,name=instant,proto3" json:"instant,omitempty"`
	Interval *ywrapper.UintValue      `protobuf:"bytes,298718397,opt,name=interval,proto3" json:"interval,omitempty"`
	Max      *ywrapper.Decimal64Value `protobuf:"bytes,34792300,opt,name=max,proto3" json:"max,omitempty"`
	MaxTime  *ywrapper.UintValue      `protobuf:"bytes,164893078,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	Min      *ywrapper.Decimal64Value `protobuf:"bytes,437442066,opt,name=min,proto3" json:"min,omitempty"`
	MinTime  *ywrapper.UintValue      `protobuf:"bytes,458350024,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
}

func (x *Aps_ApsModules_ApsModule_Ports_LineSecondaryIn_State_OpticalPower) Reset() {
	*x = Aps_ApsModules_ApsModule_Ports_LineSecondaryIn_State_OpticalPower{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_transport_line_protection_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Aps_ApsModules_ApsModule_Ports_LineSecondaryIn_State_OpticalPower) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Aps_ApsModules_ApsModule_Ports_LineSecondaryIn_State_OpticalPower) ProtoMessage() {}

func (x *Aps_ApsModules_ApsModule_Ports_LineSecondaryIn_State_OpticalPower) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_transport_line_protection_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Aps_ApsModules_ApsModule_Ports_LineSecondaryIn_State_OpticalPower.ProtoReflect.Descriptor instead.
func (*Aps_ApsModules_ApsModule_Ports_LineSecondaryIn_State_OpticalPower) Descriptor() ([]byte, []int) {
	return file_openconfig_transport_line_protection_proto_rawDescGZIP(), []int{0, 0, 0, 1, 4, 1, 0}
}

func (x *Aps_ApsModules_ApsModule_Ports_LineSecondaryIn_State_OpticalPower) GetAvg() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Avg
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_Ports_LineSecondaryIn_State_OpticalPower) GetInstant() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Instant
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_Ports_LineSecondaryIn_State_OpticalPower) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_Ports_LineSecondaryIn_State_OpticalPower) GetMax() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_Ports_LineSecondaryIn_State_OpticalPower) GetMaxTime() *ywrapper.UintValue {
	if x != nil {
		return x.MaxTime
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_Ports_LineSecondaryIn_State_OpticalPower) GetMin() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_Ports_LineSecondaryIn_State_OpticalPower) GetMinTime() *ywrapper.UintValue {
	if x != nil {
		return x.MinTime
	}
	return nil
}

type Aps_ApsModules_ApsModule_Ports_LineSecondaryOut_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetAttenuation *ywrapper.Decimal64Value `protobuf:"bytes,352000203,opt,name=target_attenuation,json=targetAttenuation,proto3" json:"target_attenuation,omitempty"`
}

func (x *Aps_ApsModules_ApsModule_Ports_LineSecondaryOut_Config) Reset() {
	*x = Aps_ApsModules_ApsModule_Ports_LineSecondaryOut_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_transport_line_protection_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Aps_ApsModules_ApsModule_Ports_LineSecondaryOut_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Aps_ApsModules_ApsModule_Ports_LineSecondaryOut_Config) ProtoMessage() {}

func (x *Aps_ApsModules_ApsModule_Ports_LineSecondaryOut_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_transport_line_protection_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Aps_ApsModules_ApsModule_Ports_LineSecondaryOut_Config.ProtoReflect.Descriptor instead.
func (*Aps_ApsModules_ApsModule_Ports_LineSecondaryOut_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_transport_line_protection_proto_rawDescGZIP(), []int{0, 0, 0, 1, 5, 0}
}

func (x *Aps_ApsModules_ApsModule_Ports_LineSecondaryOut_Config) GetTargetAttenuation() *ywrapper.Decimal64Value {
	if x != nil {
		return x.TargetAttenuation
	}
	return nil
}

type Aps_ApsModules_ApsModule_Ports_LineSecondaryOut_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attenuation       *ywrapper.Decimal64Value                                            `protobuf:"bytes,341918460,opt,name=attenuation,proto3" json:"attenuation,omitempty"`
	OpticalPower      *Aps_ApsModules_ApsModule_Ports_LineSecondaryOut_State_OpticalPower `protobuf:"bytes,380161272,opt,name=optical_power,json=opticalPower,proto3" json:"optical_power,omitempty"`
	TargetAttenuation *ywrapper.Decimal64Value                                            `protobuf:"bytes,171830616,opt,name=target_attenuation,json=targetAttenuation,proto3" json:"target_attenuation,omitempty"`
}

func (x *Aps_ApsModules_ApsModule_Ports_LineSecondaryOut_State) Reset() {
	*x = Aps_ApsModules_ApsModule_Ports_LineSecondaryOut_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_transport_line_protection_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Aps_ApsModules_ApsModule_Ports_LineSecondaryOut_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Aps_ApsModules_ApsModule_Ports_LineSecondaryOut_State) ProtoMessage() {}

func (x *Aps_ApsModules_ApsModule_Ports_LineSecondaryOut_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_transport_line_protection_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Aps_ApsModules_ApsModule_Ports_LineSecondaryOut_State.ProtoReflect.Descriptor instead.
func (*Aps_ApsModules_ApsModule_Ports_LineSecondaryOut_State) Descriptor() ([]byte, []int) {
	return file_openconfig_transport_line_protection_proto_rawDescGZIP(), []int{0, 0, 0, 1, 5, 1}
}

func (x *Aps_ApsModules_ApsModule_Ports_LineSecondaryOut_State) GetAttenuation() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Attenuation
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_Ports_LineSecondaryOut_State) GetOpticalPower() *Aps_ApsModules_ApsModule_Ports_LineSecondaryOut_State_OpticalPower {
	if x != nil {
		return x.OpticalPower
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_Ports_LineSecondaryOut_State) GetTargetAttenuation() *ywrapper.Decimal64Value {
	if x != nil {
		return x.TargetAttenuation
	}
	return nil
}

type Aps_ApsModules_ApsModule_Ports_LineSecondaryOut_State_OpticalPower struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avg      *ywrapper.Decimal64Value `protobuf:"bytes,305662153,opt,name=avg,proto3" json:"avg,omitempty"`
	Instant  *ywrapper.Decimal64Value `protobuf:"bytes,54136518,opt,name=instant,proto3" json:"instant,omitempty"`
	Interval *ywrapper.UintValue      `protobuf:"bytes,246448040,opt,name=interval,proto3" json:"interval,omitempty"`
	Max      *ywrapper.Decimal64Value `protobuf:"bytes,490804259,opt,name=max,proto3" json:"max,omitempty"`
	MaxTime  *ywrapper.UintValue      `protobuf:"bytes,399238543,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	Min      *ywrapper.Decimal64Value `protobuf:"bytes,356583341,opt,name=min,proto3" json:"min,omitempty"`
	MinTime  *ywrapper.UintValue      `protobuf:"bytes,46259261,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
}

func (x *Aps_ApsModules_ApsModule_Ports_LineSecondaryOut_State_OpticalPower) Reset() {
	*x = Aps_ApsModules_ApsModule_Ports_LineSecondaryOut_State_OpticalPower{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_transport_line_protection_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Aps_ApsModules_ApsModule_Ports_LineSecondaryOut_State_OpticalPower) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Aps_ApsModules_ApsModule_Ports_LineSecondaryOut_State_OpticalPower) ProtoMessage() {}

func (x *Aps_ApsModules_ApsModule_Ports_LineSecondaryOut_State_OpticalPower) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_transport_line_protection_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Aps_ApsModules_ApsModule_Ports_LineSecondaryOut_State_OpticalPower.ProtoReflect.Descriptor instead.
func (*Aps_ApsModules_ApsModule_Ports_LineSecondaryOut_State_OpticalPower) Descriptor() ([]byte, []int) {
	return file_openconfig_transport_line_protection_proto_rawDescGZIP(), []int{0, 0, 0, 1, 5, 1, 0}
}

func (x *Aps_ApsModules_ApsModule_Ports_LineSecondaryOut_State_OpticalPower) GetAvg() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Avg
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_Ports_LineSecondaryOut_State_OpticalPower) GetInstant() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Instant
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_Ports_LineSecondaryOut_State_OpticalPower) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_Ports_LineSecondaryOut_State_OpticalPower) GetMax() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_Ports_LineSecondaryOut_State_OpticalPower) GetMaxTime() *ywrapper.UintValue {
	if x != nil {
		return x.MaxTime
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_Ports_LineSecondaryOut_State_OpticalPower) GetMin() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *Aps_ApsModules_ApsModule_Ports_LineSecondaryOut_State_OpticalPower) GetMinTime() *ywrapper.UintValue {
	if x != nil {
		return x.MinTime
	}
	return nil
}

var File_openconfig_transport_line_protection_proto protoreflect.FileDescriptor

var file_openconfig_transport_line_protection_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x0e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x79, 0x65, 0x78, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xaa, 0x85, 0x01,
	0x0a, 0x03, 0x41, 0x70, 0x73, 0x12, 0x54, 0x0a, 0x0b, 0x61, 0x70, 0x73, 0x5f, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x73, 0x18, 0xab, 0xe1, 0xec, 0xc0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x70, 0x73, 0x2e,
	0x41, 0x70, 0x73, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x42, 0x13, 0x82, 0x41, 0x10, 0x2f,
	0x61, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x52,
	0x0a, 0x61, 0x70, 0x73, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x1a, 0xcb, 0x84, 0x01, 0x0a,
	0x0a, 0x41, 0x70, 0x73, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x69, 0x0a, 0x0a, 0x61,
	0x70, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0xf1, 0xd0, 0xb7, 0x73, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x41, 0x70, 0x73, 0x2e, 0x41, 0x70, 0x73, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x41,
	0x70, 0x73, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x42, 0x1e, 0x82, 0x41, 0x1b,
	0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73,
	0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x09, 0x61, 0x70, 0x73,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x1a, 0xc1, 0x82, 0x01, 0x0a, 0x09, 0x41, 0x70, 0x73, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x6d, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x96, 0x91, 0xc4, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x70, 0x73, 0x2e, 0x41, 0x70, 0x73, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x73, 0x2e, 0x41, 0x70, 0x73, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x25, 0x82, 0x41, 0x22, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61,
	0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x6a, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x9c, 0xdd,
	0xad, 0xa1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x70, 0x73, 0x2e, 0x41, 0x70, 0x73, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x73, 0x2e, 0x41, 0x70, 0x73, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x73, 0x42, 0x24, 0x82, 0x41, 0x21, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x73,
	0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x12, 0x69, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xc3, 0xe6, 0xee, 0x1e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x41, 0x70, 0x73, 0x2e, 0x41, 0x70, 0x73, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x41,
	0x70, 0x73, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x24,
	0x82, 0x41, 0x21, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xf4, 0x0b, 0x0a, 0x06,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x93, 0x01, 0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0xe4, 0xc1, 0xf2, 0x0f, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x37, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41,
	0x70, 0x73, 0x2e, 0x41, 0x70, 0x73, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x41, 0x70,
	0x73, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x46,
	0x6f, 0x72, 0x63, 0x65, 0x54, 0x6f, 0x50, 0x6f, 0x72, 0x74, 0x42, 0x33, 0x82, 0x41, 0x30, 0x2f,
	0x61, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f,
	0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x6f, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x0b, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x54, 0x6f, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x70, 0x0a, 0x0d,
	0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x80, 0xa4,
	0xcd, 0xc6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x33, 0x82, 0x41,
	0x30, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x6f, 0x66, 0x66, 0x2d, 0x74, 0x69, 0x6d,
	0x65, 0x52, 0x0b, 0x68, 0x6f, 0x6c, 0x64, 0x4f, 0x66, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x59,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xfc, 0xae, 0xb0, 0xa1, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2a, 0x82, 0x41, 0x27, 0x2f, 0x61, 0x70, 0x73,
	0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73,
	0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6e,
	0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x98, 0x01, 0x0a, 0x19, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x68, 0x79, 0x73,
	0x74, 0x65, 0x72, 0x65, 0x73, 0x69, 0x73, 0x18, 0xca, 0xed, 0xf1, 0x33, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f,
	0x61, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f,
	0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x2d, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x2d, 0x68, 0x79, 0x73, 0x74, 0x65, 0x72, 0x65, 0x73, 0x69, 0x73, 0x52, 0x17, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x48, 0x79, 0x73, 0x74, 0x65, 0x72,
	0x65, 0x73, 0x69, 0x73, 0x12, 0x96, 0x01, 0x0a, 0x18, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x18, 0xdc, 0xe7, 0xa7, 0xe8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61,
	0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x2d, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2d, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x16, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x98, 0x01,
	0x0a, 0x19, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x8c, 0xbb, 0xef, 0x6c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3f,
	0x82, 0x41, 0x3c, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x2d, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52,
	0x17, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0xad, 0x01, 0x0a, 0x20, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x98, 0xe7,
	0xa7, 0xe0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x2d, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x2d, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x1d, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x66, 0x0a, 0x09, 0x72, 0x65, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x76, 0x65, 0x18, 0xff, 0xd4, 0x89, 0xcd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x2f, 0x82, 0x41, 0x2c, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61, 0x70,
	0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x72, 0x65, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x76, 0x65, 0x52, 0x09, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x9c, 0x01, 0x0a, 0x1a, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18,
	0xc0, 0xa3, 0xa9, 0xab, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x73,
	0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x61, 0x72, 0x79, 0x2d, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2d, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x18, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12,
	0x84, 0x01, 0x0a, 0x14, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xad, 0x8b, 0xf5, 0xa0, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3a, 0x82, 0x41, 0x37, 0x2f, 0x61, 0x70, 0x73,
	0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73,
	0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x77,
	0x61, 0x69, 0x74, 0x2d, 0x74, 0x6f, 0x2d, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2d, 0x74,
	0x69, 0x6d, 0x65, 0x52, 0x11, 0x77, 0x61, 0x69, 0x74, 0x54, 0x6f, 0x52, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x7a, 0x0a, 0x0b, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x54,
	0x6f, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x10, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x54, 0x4f,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x1a, 0x07, 0x82, 0x41, 0x04,
	0x4e, 0x4f, 0x4e, 0x45, 0x12, 0x23, 0x0a, 0x13, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x54, 0x4f, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x10, 0x02, 0x1a, 0x0a, 0x82,
	0x41, 0x07, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x12, 0x27, 0x0a, 0x15, 0x46, 0x4f, 0x52,
	0x43, 0x45, 0x54, 0x4f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x41,
	0x52, 0x59, 0x10, 0x03, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x41,
	0x52, 0x59, 0x1a, 0xff, 0x66, 0x0a, 0x05, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x84, 0x01, 0x0a,
	0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x18, 0xfc, 0x8b, 0xf6, 0xcc, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x41, 0x70, 0x73, 0x2e, 0x41, 0x70, 0x73, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73,
	0x2e, 0x41, 0x70, 0x73, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x49, 0x6e, 0x42, 0x2e, 0x82, 0x41, 0x2b, 0x2f, 0x61,
	0x70, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61,
	0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2d, 0x69, 0x6e, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x49, 0x6e, 0x12, 0x93, 0x01, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0xf6, 0xab, 0xf7, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x70, 0x73, 0x2e,
	0x41, 0x70, 0x73, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x41, 0x70, 0x73, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x32, 0x82, 0x41, 0x2f, 0x2f, 0x61, 0x70, 0x73,
	0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73,
	0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x0c, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x99, 0x01, 0x0a, 0x0f, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x18, 0xf8, 0xb5,
	0xaa, 0x40, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x41, 0x70, 0x73, 0x2e, 0x41, 0x70, 0x73, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x73, 0x2e, 0x41, 0x70, 0x73, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x73, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x6e,
	0x42, 0x34, 0x82, 0x41, 0x31, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x2d, 0x69, 0x6e, 0x52, 0x0d, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x49, 0x6e, 0x12, 0x9e, 0x01, 0x0a, 0x10, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x9f, 0xc6, 0xd9, 0xbd, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x41, 0x70, 0x73, 0x2e, 0x41, 0x70, 0x73, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73,
	0x2e, 0x41, 0x70, 0x73, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73,
	0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4f, 0x75, 0x74, 0x42,
	0x35, 0x82, 0x41, 0x32, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x70, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x2d, 0x6f, 0x75, 0x74, 0x52, 0x0e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x4f, 0x75, 0x74, 0x12, 0xa1, 0x01, 0x0a, 0x11, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x18, 0xe0, 0x89, 0xb1,
	0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x41, 0x70, 0x73, 0x2e, 0x41, 0x70, 0x73, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x73, 0x2e, 0x41, 0x70, 0x73, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x73, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x49,
	0x6e, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x2d, 0x69, 0x6e, 0x52, 0x0f, 0x6c, 0x69, 0x6e, 0x65, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x12, 0xa5, 0x01, 0x0a, 0x12, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x6f, 0x75,
	0x74, 0x18, 0xa7, 0xe9, 0xd3, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x70, 0x73, 0x2e, 0x41, 0x70, 0x73, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x41, 0x70, 0x73, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x61, 0x72, 0x79, 0x4f, 0x75, 0x74, 0x42, 0x37, 0x82, 0x41, 0x34, 0x2f, 0x61, 0x70, 0x73,
	0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73,
	0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x6c, 0x69,
	0x6e, 0x65, 0x2d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x2d, 0x6f, 0x75, 0x74,
	0x52, 0x10, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x4f,
	0x75, 0x74, 0x1a, 0xff, 0x0f, 0x0a, 0x08, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x49, 0x6e, 0x12,
	0x8c, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xd1, 0x89, 0xf3, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x41, 0x70, 0x73, 0x2e, 0x41, 0x70, 0x73, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e,
	0x41, 0x70, 0x73, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x49, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x35, 0x82, 0x41, 0x32, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2d, 0x69, 0x6e, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x88,
	0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xc6, 0xe9, 0x8e, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41,
	0x70, 0x73, 0x2e, 0x41, 0x70, 0x73, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x41, 0x70,
	0x73, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x49, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x34, 0x82, 0x41,
	0x31, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2d, 0x69, 0x6e, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x91, 0x02, 0x0a, 0x06, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x70, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x87, 0xba, 0xf7, 0xc3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3d,
	0x82, 0x41, 0x3a, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2d, 0x69, 0x6e, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x94, 0x01, 0x0a, 0x12, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xd8, 0xb6,
	0xd2, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x48, 0x82, 0x41, 0x45, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2d, 0x69, 0x6e,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2d, 0x61,
	0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xc4, 0x0b,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x7f, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x65, 0x6e,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xf3, 0x87, 0x95, 0x70, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x61,
	0x70, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61,
	0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2d, 0x69, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x74, 0x74,
	0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6e, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0xb4, 0x9f, 0xd2, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x3c, 0x82, 0x41, 0x39, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2d, 0x69,
	0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0xb3, 0x01, 0x0a, 0x0d, 0x6f, 0x70, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0xaf, 0xb7, 0xb3, 0xe3, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x41, 0x70, 0x73, 0x2e, 0x41, 0x70, 0x73, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73,
	0x2e, 0x41, 0x70, 0x73, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x49, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x42, 0x82, 0x41,
	0x3f, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2d, 0x69, 0x6e, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x52, 0x0c, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x94,
	0x01, 0x0a, 0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xad, 0xd4, 0xe5, 0xe5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x47, 0x82, 0x41, 0x44, 0x2f, 0x61,
	0x70, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61,
	0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2d, 0x69, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2d, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xfc, 0x06, 0x0a, 0x0c, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x75, 0x0a, 0x03, 0x61, 0x76, 0x67, 0x18, 0xfe, 0xba,
	0xba, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2d, 0x69, 0x6e,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x2f, 0x61, 0x76, 0x67, 0x52, 0x03, 0x61, 0x76, 0x67, 0x12, 0x81, 0x01,
	0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0xad, 0xc7, 0xfb, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4a, 0x82, 0x41,
	0x47, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2d, 0x69, 0x6e, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x12, 0x80, 0x01, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0xf1,
	0xb4, 0xe9, 0xe4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4b, 0x82,
	0x41, 0x48, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2d, 0x69, 0x6e, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x75, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0xb8, 0x8c, 0xe4, 0x64,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x46,
	0x82, 0x41, 0x43, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2d, 0x69, 0x6e, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x2f, 0x6d, 0x61, 0x78, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x7f, 0x0a, 0x08, 0x6d,
	0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x9a, 0xe4, 0xa5, 0x92, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4b, 0x82, 0x41, 0x48, 0x2f, 0x61, 0x70, 0x73, 0x2f,
	0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2d, 0x69, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x74,
	0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x76, 0x0a, 0x03,
	0x6d, 0x69, 0x6e, 0x18, 0xb6, 0xa5, 0xe4, 0xa4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x61, 0x70, 0x73,
	0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73,
	0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2d, 0x69, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2f, 0x6d, 0x69, 0x6e, 0x52,
	0x03, 0x6d, 0x69, 0x6e, 0x12, 0x7e, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0xb4, 0x85, 0xe8, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4b,
	0x82, 0x41, 0x48, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2d, 0x69, 0x6e, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x2f, 0x6d, 0x69, 0x6e, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x69, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x1a, 0xe6, 0x0e, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x94, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0xd7, 0xc0, 0xc7, 0x62, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x70, 0x73, 0x2e, 0x41, 0x70, 0x73, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x41, 0x70, 0x73, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x61,
	0x70, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61,
	0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x90, 0x01, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x88, 0x96, 0xb2, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x70, 0x73,
	0x2e, 0x41, 0x70, 0x73, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x41, 0x70, 0x73, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x38,
	0x82, 0x41, 0x35, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2d, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a,
	0xa4, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x99, 0x01, 0x0a, 0x12, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0xf2, 0xa3, 0x97, 0xe0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4c, 0x82, 0x41, 0x49, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61,
	0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2d, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6e,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x84, 0x0b, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x84, 0x01, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x9d, 0x90, 0xd7, 0xd1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61, 0x70,
	0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61,
	0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x65,
	0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xbb, 0x01, 0x0a, 0x0d, 0x6f, 0x70, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0xb9, 0xa3, 0xd9, 0xb1, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x41, 0x70, 0x73, 0x2e, 0x41, 0x70, 0x73, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e,
	0x41, 0x70, 0x73, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x42,
	0x46, 0x82, 0x41, 0x43, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2d, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x0c, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x97, 0x01, 0x0a, 0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xdb, 0x8c, 0xcd,
	0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x4b, 0x82, 0x41, 0x48, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2d, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x2d, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x9b, 0x07, 0x0a, 0x0c, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x12, 0x79, 0x0a, 0x03, 0x61, 0x76, 0x67, 0x18, 0xe4, 0xf2, 0xcd, 0x6b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4a, 0x82, 0x41, 0x47, 0x2f,
	0x61, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f,
	0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x2f, 0x61, 0x76, 0x67, 0x52, 0x03, 0x61, 0x76, 0x67, 0x12, 0x86, 0x01, 0x0a, 0x07,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0xbf, 0xa1, 0xb3, 0xd4, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4e, 0x82, 0x41, 0x4b,
	0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73,
	0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x07, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x12, 0x84, 0x01, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0xff, 0x9d, 0xe5, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2d, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x7a, 0x0a, 0x03, 0x6d,
	0x61, 0x78, 0x18, 0xfe, 0x8c, 0xd5, 0xd2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4a, 0x82, 0x41, 0x47, 0x2f, 0x61, 0x70, 0x73, 0x2f,
	0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2f, 0x6d,
	0x61, 0x78, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x83, 0x01, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0xdc, 0xcd, 0xf4, 0x8f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x73,
	0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2f, 0x6d, 0x61, 0x78, 0x2d,
	0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x79, 0x0a,
	0x03, 0x6d, 0x69, 0x6e, 0x18, 0xf0, 0xa5, 0xd5, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4a, 0x82, 0x41, 0x47, 0x2f, 0x61, 0x70, 0x73,
	0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73,
	0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2f,
	0x6d, 0x69, 0x6e, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x82, 0x01, 0x0a, 0x08, 0x6d, 0x69, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x92, 0xe6, 0xa6, 0x7f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x73,
	0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2f, 0x6d, 0x69, 0x6e, 0x2d,
	0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0xf3, 0x10,
	0x0a, 0x0d, 0x4c, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x12,
	0x97, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xfd, 0xc0, 0xf5, 0x23, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x41, 0x70, 0x73, 0x2e, 0x41, 0x70, 0x73, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e,
	0x41, 0x70, 0x73, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e,
	0x4c, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x42, 0x3b, 0x82, 0x41, 0x38, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61, 0x70,
	0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x6c, 0x69, 0x6e, 0x65, 0x2d,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x2d, 0x69, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x93, 0x01, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0xf2, 0x81, 0x8c, 0x72, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x70, 0x73, 0x2e, 0x41, 0x70,
	0x73, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x41, 0x70, 0x73, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x3a, 0x82, 0x41,
	0x37, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x2f, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x2d,
	0x69, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a,
	0x9e, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x76, 0x0a, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x93, 0x9d, 0xe2, 0xc2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x43, 0x82, 0x41, 0x40, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61, 0x70,
	0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x6c, 0x69, 0x6e, 0x65, 0x2d,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x2d, 0x69, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x9b, 0x01, 0x0a, 0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x74,
	0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xfc, 0xff, 0x8d, 0x95, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4e, 0x82,
	0x41, 0x4b, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x2f, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x2d, 0x69, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x2d, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x90, 0x0c, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x0b, 0x61,
	0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x97, 0xa3, 0x83, 0xda, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x46,
	0x82, 0x41, 0x43, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x2f, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x2d, 0x69, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x6e,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x74, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x80,
	0xbd, 0xee, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x42, 0x82, 0x41,
	0x3f, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x2f, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x2d,
	0x69, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0xbe, 0x01, 0x0a, 0x0d, 0x6f, 0x70,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0xcb, 0xa7, 0xf6, 0xae,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x41, 0x70, 0x73, 0x2e, 0x41, 0x70, 0x73, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x73, 0x2e, 0x41, 0x70, 0x73, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x73, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x42, 0x48, 0x82, 0x41, 0x45, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x2d, 0x69, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x0c, 0x6f, 0x70,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x9a, 0x01, 0x0a, 0x12, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0xf1, 0xa5, 0x98, 0xa6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4d, 0x82, 0x41, 0x4a, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61,
	0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x6c, 0x69, 0x6e, 0x65,
	0x2d, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x2d, 0x69, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2d, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x74, 0x74, 0x65,
	0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xa9, 0x07, 0x0a, 0x0c, 0x4f, 0x70, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x7c, 0x0a, 0x03, 0x61, 0x76, 0x67, 0x18,
	0x92, 0x80, 0xe0, 0xeb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x4c, 0x82, 0x41, 0x49, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x73,
	0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x2d, 0x69, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2f, 0x61, 0x76,
	0x67, 0x52, 0x03, 0x61, 0x76, 0x67, 0x12, 0x88, 0x01, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x18, 0xc1, 0x9d, 0xc1, 0xc7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x50, 0x82, 0x41, 0x4d, 0x2f, 0x61, 0x70, 0x73, 0x2f,
	0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x6c, 0x69, 0x6e,
	0x65, 0x2d, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x2d, 0x69, 0x6e, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x12, 0x85, 0x01, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0xd5,
	0xf3, 0xb0, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x51, 0x82, 0x41,
	0x4e, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x2f, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x2d,
	0x69, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52,
	0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x7b, 0x0a, 0x03, 0x6d, 0x61, 0x78,
	0x18, 0xa4, 0x9b, 0xb6, 0x73, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x4c, 0x82, 0x41, 0x49, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x73,
	0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x2d, 0x69, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2f, 0x6d, 0x61,
	0x78, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x85, 0x01, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x8e, 0xf9, 0xf1, 0xca, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x51, 0x82, 0x41, 0x4e, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x2d, 0x69, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2f, 0x6d, 0x61, 0x78,
	0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x7c,
	0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x9a, 0xb4, 0xb6, 0xb3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4c, 0x82, 0x41, 0x49, 0x2f, 0x61,
	0x70, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61,
	0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f,
	0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x2d, 0x69, 0x6e, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x2f, 0x6d, 0x69, 0x6e, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x84, 0x01, 0x0a,
	0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x90, 0xf6, 0xc3, 0x1c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x51, 0x82, 0x41, 0x4e, 0x2f, 0x61, 0x70, 0x73,
	0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73,
	0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x6c, 0x69,
	0x6e, 0x65, 0x2d, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x2d, 0x69, 0x6e, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x2f, 0x6d, 0x69, 0x6e, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x1a, 0x93, 0x0f, 0x0a, 0x0e, 0x4c, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x4f, 0x75, 0x74, 0x12, 0x9a, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0xe0, 0x95, 0xe5, 0xd4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x70, 0x73, 0x2e, 0x41, 0x70, 0x73,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x41, 0x70, 0x73, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x4f, 0x75, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x3c, 0x82,
	0x41, 0x39, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x2f, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x2d, 0x6f, 0x75, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x96, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xd9, 0xde,
	0xd7, 0xda, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x70, 0x73, 0x2e, 0x41, 0x70, 0x73, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x73, 0x2e, 0x41, 0x70, 0x73, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x73, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4f,
	0x75, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x3b, 0x82, 0x41, 0x38, 0x2f, 0x61, 0x70,
	0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70,
	0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x6c,
	0x69, 0x6e, 0x65, 0x2d, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x2d, 0x6f, 0x75, 0x74, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xa6, 0x01, 0x0a,
	0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x9b, 0x01, 0x0a, 0x12, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xa3,
	0xee, 0xb2, 0x62, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x2d, 0x6f, 0x75, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2d, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xa1, 0x0b, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x87, 0x01, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0xb4, 0xaf, 0xb7, 0xf0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x47, 0x82, 0x41, 0x44, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x73,
	0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x2d, 0x6f, 0x75, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x74,
	0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xbf, 0x01, 0x0a, 0x0d, 0x6f, 0x70,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0xc0, 0xa5, 0xd9, 0x7d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x41, 0x70, 0x73, 0x2e, 0x41, 0x70, 0x73, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73,
	0x2e, 0x41, 0x70, 0x73, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73,
	0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4f, 0x75, 0x74, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x42, 0x49, 0x82, 0x41, 0x46, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x2d, 0x6f, 0x75, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x0c, 0x6f,
	0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x9b, 0x01, 0x0a, 0x12,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0xd0, 0xb5, 0xf7, 0x88, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x61, 0x70, 0x73, 0x2f,
	0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x6c, 0x69, 0x6e,
	0x65, 0x2d, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x2d, 0x6f, 0x75, 0x74, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2d, 0x61, 0x74, 0x74, 0x65, 0x6e,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x74,
	0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xad, 0x07, 0x0a, 0x0c, 0x4f, 0x70,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x7d, 0x0a, 0x03, 0x61, 0x76,
	0x67, 0x18, 0xe1, 0xdb, 0x80, 0xb9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4d, 0x82, 0x41, 0x4a, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61,
	0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x6c, 0x69, 0x6e, 0x65,
	0x2d, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x2d, 0x6f, 0x75, 0x74, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x2f, 0x61, 0x76, 0x67, 0x52, 0x03, 0x61, 0x76, 0x67, 0x12, 0x88, 0x01, 0x0a, 0x07, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0xae, 0x99, 0xa2, 0x44, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x51, 0x82, 0x41, 0x4e, 0x2f, 0x61, 0x70,
	0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70,
	0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x6c,
	0x69, 0x6e, 0x65, 0x2d, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x2d, 0x6f, 0x75, 0x74, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x07, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x12, 0x86, 0x01, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x80, 0xdf, 0xae, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x52, 0x82, 0x41, 0x4f, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x70, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x2d, 0x6f, 0x75, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x7c, 0x0a,
	0x03, 0x6d, 0x61, 0x78, 0x18, 0xbb, 0xd3, 0x88, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4d, 0x82, 0x41, 0x4a, 0x2f, 0x61, 0x70, 0x73,
	0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73,
	0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x6c, 0x69,
	0x6e, 0x65, 0x2d, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x2d, 0x6f, 0x75, 0x74, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x2f, 0x6d, 0x61, 0x78, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x85, 0x01, 0x0a, 0x08,
	0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xe7, 0xee, 0x8d, 0x43, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x52, 0x82, 0x41, 0x4f, 0x2f, 0x61, 0x70, 0x73, 0x2f,
	0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x6c, 0x69, 0x6e,
	0x65, 0x2d, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x2d, 0x6f, 0x75, 0x74, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x7c, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0xb5, 0xec, 0x88, 0x50, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4d, 0x82,
	0x41, 0x4a, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x2f, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x2d, 0x6f, 0x75, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2f, 0x6d, 0x69, 0x6e, 0x52, 0x03, 0x6d, 0x69,
	0x6e, 0x12, 0x85, 0x01, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xa5,
	0xe2, 0xe0, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x52, 0x82, 0x41,
	0x4f, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x2f, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x2d,
	0x6f, 0x75, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2f, 0x6d, 0x69, 0x6e, 0x2d, 0x74, 0x69, 0x6d, 0x65,
	0x52, 0x07, 0x6d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x9c, 0x11, 0x0a, 0x0f, 0x4c, 0x69,
	0x6e, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x12, 0x9c, 0x01,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xd5, 0xb3, 0x86, 0x8c, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x41, 0x70, 0x73, 0x2e, 0x41, 0x70, 0x73, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x41,
	0x70, 0x73, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x4c,
	0x69, 0x6e, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x3d, 0x82, 0x41, 0x3a, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61,
	0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x6c, 0x69, 0x6e, 0x65,
	0x2d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x2d, 0x69, 0x6e, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x98, 0x01, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xca, 0x86, 0xe4, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x40, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x70,
	0x73, 0x2e, 0x41, 0x70, 0x73, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x41, 0x70, 0x73,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x4c, 0x69, 0x6e,
	0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x3c, 0x82, 0x41, 0x39, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x2d, 0x69, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xa2, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x78, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xfb, 0xc3,
	0x89, 0xa2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x45, 0x82, 0x41,
	0x42, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x2f, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72,
	0x79, 0x2d, 0x69, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x9d, 0x01, 0x0a,
	0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0xe4, 0xf7, 0xad, 0xd9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x50, 0x82, 0x41, 0x4d, 0x2f, 0x61, 0x70, 0x73,
	0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73,
	0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x6c, 0x69,
	0x6e, 0x65, 0x2d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x2d, 0x69, 0x6e, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2d, 0x61, 0x74,
	0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xa9, 0x0c, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x65, 0x6e,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xdf, 0xee, 0x82, 0xba, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x48, 0x82, 0x41, 0x45, 0x2f,
	0x61, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f,
	0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x2f, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x2d,
	0x69, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x77, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xa8, 0x83, 0x9e,
	0xf0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x44, 0x82, 0x41, 0x41,
	0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73,
	0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x2f, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79,
	0x2d, 0x69, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0xc2, 0x01, 0x0a, 0x0d, 0x6f,
	0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0xe3, 0xed, 0xab,
	0xc5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x41, 0x70, 0x73, 0x2e, 0x41, 0x70, 0x73, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x73, 0x2e, 0x41, 0x70, 0x73, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x73, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79,
	0x49, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x4a, 0x82, 0x41, 0x47, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61,
	0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x6c, 0x69, 0x6e, 0x65,
	0x2d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x2d, 0x69, 0x6e, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x52, 0x0c, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12,
	0x9b, 0x01, 0x0a, 0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6e,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xd9, 0xb1, 0xcf, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x61,
	0x70, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61,
	0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f,
	0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x2d, 0x69,
	0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2d, 0x61,
	0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xb8, 0x07,
	0x0a, 0x0c, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x7e,
	0x0a, 0x03, 0x61, 0x76, 0x67, 0x18, 0xda, 0x8c, 0xd9, 0x87, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x61,
	0x70, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61,
	0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f,
	0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x2d, 0x69,
	0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x2f, 0x61, 0x76, 0x67, 0x52, 0x03, 0x61, 0x76, 0x67, 0x12, 0x8a,
	0x01, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0xd9, 0xe5, 0x86, 0xed, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x52,
	0x82, 0x41, 0x4f, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x2f, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x61, 0x72, 0x79, 0x2d, 0x69, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x88, 0x01, 0x0a, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0xbd, 0xa9, 0xb8, 0x8e, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x53, 0x82, 0x41, 0x50, 0x2f, 0x61, 0x70, 0x73,
	0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73,
	0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x6c, 0x69,
	0x6e, 0x65, 0x2d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x2d, 0x69, 0x6e, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x7d, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0xec, 0xc6,
	0xcb, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x61, 0x72, 0x79, 0x2d, 0x69, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2f, 0x6d, 0x61, 0x78,
	0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x86, 0x01, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x96, 0xa3, 0xd0, 0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x53, 0x82, 0x41, 0x50, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x61, 0x72, 0x79, 0x2d, 0x69, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2f, 0x6d, 0x61, 0x78,
	0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x7e,
	0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x92, 0xac, 0xcb, 0xd0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x61,
	0x70, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61,
	0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f,
	0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x2d, 0x69,
	0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x2f, 0x6d, 0x69, 0x6e, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x87,
	0x01, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xc8, 0xbb, 0xc7, 0xda,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x53, 0x82, 0x41, 0x50, 0x2f,
	0x61, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f,
	0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x2f, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x2d,
	0x69, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2f, 0x6d, 0x69, 0x6e, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52,
	0x07, 0x6d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0xb9, 0x0f, 0x0a, 0x10, 0x4c, 0x69, 0x6e,
	0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x4f, 0x75, 0x74, 0x12, 0x9e, 0x01,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xb8, 0xad, 0xe8, 0xff, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x41, 0x70, 0x73, 0x2e, 0x41, 0x70, 0x73, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x41,
	0x70, 0x73, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x4c,
	0x69, 0x6e, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x4f, 0x75, 0x74, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x61, 0x70, 0x73, 0x2f,
	0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x6c, 0x69, 0x6e,
	0x65, 0x2d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x2d, 0x6f, 0x75, 0x74, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x9a,
	0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xd1, 0xf5, 0xe7, 0xf7, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x41, 0x70, 0x73, 0x2e, 0x41, 0x70, 0x73, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x41,
	0x70, 0x73, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x4c,
	0x69, 0x6e, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x4f, 0x75, 0x74, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x3d, 0x82, 0x41, 0x3a, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61,
	0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x6c, 0x69, 0x6e, 0x65,
	0x2d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x2d, 0x6f, 0x75, 0x74, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xa9, 0x01, 0x0a, 0x06,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x9e, 0x01, 0x0a, 0x12, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xcb, 0xb1,
	0xec, 0xa7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x51, 0x82, 0x41, 0x4e, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x2d, 0x6f, 0x75, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2d, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x74, 0x74, 0x65,
	0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xba, 0x0b, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x89, 0x01, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0xfc, 0x85, 0x85, 0xa3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x49, 0x82, 0x41, 0x46, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61,
	0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x6c, 0x69, 0x6e, 0x65,
	0x2d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x2d, 0x6f, 0x75, 0x74, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0b, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xc4, 0x01,
	0x0a, 0x0d, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18,
	0xf8, 0x99, 0xa3, 0xb5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x70, 0x73, 0x2e, 0x41, 0x70, 0x73, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x41, 0x70, 0x73, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x61, 0x72, 0x79, 0x4f, 0x75, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4f, 0x70, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x4b, 0x82, 0x41, 0x48, 0x2f, 0x61,
	0x70, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61,
	0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f,
	0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x2d, 0x6f,
	0x75, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x0c, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x12, 0x9c, 0x01, 0x0a, 0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xd8, 0xda, 0xf7, 0x51,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x50,
	0x82, 0x41, 0x4d, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x2f, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x61, 0x72, 0x79, 0x2d, 0x6f, 0x75, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x2d, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0xbe, 0x07, 0x0a, 0x0c, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x12, 0x7f, 0x0a, 0x03, 0x61, 0x76, 0x67, 0x18, 0xc9, 0x91, 0xe0, 0x91,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x61, 0x72, 0x79, 0x2d, 0x6f, 0x75, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2f, 0x61, 0x76, 0x67,
	0x52, 0x03, 0x61, 0x76, 0x67, 0x12, 0x8a, 0x01, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x18, 0xc6, 0x9d, 0xe8, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x53, 0x82, 0x41, 0x50, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61, 0x70,
	0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x6c, 0x69, 0x6e, 0x65, 0x2d,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x2d, 0x6f, 0x75, 0x74, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x12, 0x88, 0x01, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0xa8, 0xff, 0xc1, 0x75, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x54, 0x82,
	0x41, 0x51, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x2f, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61,
	0x72, 0x79, 0x2d, 0x6f, 0x75, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x7f, 0x0a,
	0x03, 0x6d, 0x61, 0x78, 0x18, 0xa3, 0xa8, 0x84, 0xea, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x61, 0x70,
	0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70,
	0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x6c,
	0x69, 0x6e, 0x65, 0x2d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x2d, 0x6f, 0x75,
	0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x2f, 0x6d, 0x61, 0x78, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x88,
	0x01, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x8f, 0xcb, 0xaf, 0xbe,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x54, 0x82, 0x41, 0x51, 0x2f,
	0x61, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f,
	0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x2f, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x2d,
	0x6f, 0x75, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x74, 0x69, 0x6d, 0x65,
	0x52, 0x07, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x7f, 0x0a, 0x03, 0x6d, 0x69, 0x6e,
	0x18, 0xad, 0x8f, 0x84, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61, 0x70,
	0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x6c, 0x69, 0x6e, 0x65, 0x2d,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x2d, 0x6f, 0x75, 0x74, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x2f, 0x6d, 0x69, 0x6e, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x87, 0x01, 0x0a, 0x08, 0x6d,
	0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xbd, 0xb8, 0x87, 0x16, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x54, 0x82, 0x41, 0x51, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61,
	0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x6c, 0x69, 0x6e, 0x65,
	0x2d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x2d, 0x6f, 0x75, 0x74, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x2f, 0x6d, 0x69, 0x6e, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x69, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x1a, 0xf4, 0x0c, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x8b,
	0x01, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0xf4,
	0xb6, 0xb3, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x50, 0x53, 0x50, 0x41, 0x54, 0x48, 0x53, 0x42, 0x30,
	0x82, 0x41, 0x2d, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2d, 0x70, 0x61, 0x74, 0x68,
	0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x92, 0x01, 0x0a,
	0x0d, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0xb1,
	0x9b, 0xe1, 0xc6, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x70, 0x73, 0x2e, 0x41, 0x70, 0x73, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x73, 0x2e, 0x41, 0x70, 0x73, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x54, 0x6f, 0x50, 0x6f, 0x72, 0x74,
	0x42, 0x32, 0x82, 0x41, 0x2f, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x6f, 0x2d,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x0b, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x54, 0x6f, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x6f, 0x0a, 0x0d, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0xf5, 0xf1, 0x9f, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x32, 0x82, 0x41, 0x2f, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x6f, 0x66, 0x66,
	0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x0b, 0x68, 0x6f, 0x6c, 0x64, 0x4f, 0x66, 0x66, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x57, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xd3, 0xa5, 0xb6, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x29, 0x82, 0x41, 0x26, 0x2f,
	0x61, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f,
	0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x97, 0x01, 0x0a, 0x19,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x68,
	0x79, 0x73, 0x74, 0x65, 0x72, 0x65, 0x73, 0x69, 0x73, 0x18, 0x93, 0xea, 0xd2, 0x59, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3e, 0x82, 0x41,
	0x3b, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x2d, 0x73, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x2d, 0x68, 0x79, 0x73, 0x74, 0x65, 0x72, 0x65, 0x73, 0x69, 0x73, 0x52, 0x17, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x48, 0x79, 0x73, 0x74, 0x65,
	0x72, 0x65, 0x73, 0x69, 0x73, 0x12, 0x94, 0x01, 0x0a, 0x18, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x18, 0xef, 0xcc, 0xe0, 0x58, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3d, 0x82, 0x41, 0x3a, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61,
	0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x2d, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x52, 0x16, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x97, 0x01, 0x0a,
	0x19, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0xc5, 0xaa, 0xc3, 0x19, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3e, 0x82,
	0x41, 0x3b, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x2d, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x17, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0xac, 0x01, 0x0a, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x8b, 0x8d, 0x91, 0x8a,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x45, 0x82, 0x41, 0x42, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x2d, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2d,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x1d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x65, 0x0a, 0x09, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x76, 0x65, 0x18, 0xd6, 0xd0, 0x98, 0xa5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x2e, 0x82, 0x41, 0x2b, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x69, 0x76,
	0x65, 0x52, 0x09, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x69, 0x76, 0x65, 0x12, 0x9a, 0x01, 0x0a,
	0x1a, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0xa7, 0xd6, 0xef, 0x27,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3f,
	0x82, 0x41, 0x3c, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x2d, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52,
	0x18, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x83, 0x01, 0x0a, 0x14, 0x77, 0x61,
	0x69, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0xa2, 0x84, 0xf6, 0xa9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x61, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x77, 0x61, 0x69, 0x74, 0x2d, 0x74, 0x6f, 0x2d,
	0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x11, 0x77, 0x61,
	0x69, 0x74, 0x54, 0x6f, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x7a, 0x0a, 0x0b, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x54, 0x6f, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1d,
	0x0a, 0x10, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x54, 0x4f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x12, 0x23, 0x0a,
	0x13, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x54, 0x4f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x52, 0x49,
	0x4d, 0x41, 0x52, 0x59, 0x10, 0x02, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x50, 0x52, 0x49, 0x4d, 0x41,
	0x52, 0x59, 0x12, 0x27, 0x0a, 0x15, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x54, 0x4f, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x10, 0x03, 0x1a, 0x0c, 0x82,
	0x41, 0x09, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x1a, 0x8c, 0x01, 0x0a, 0x0c,
	0x41, 0x70, 0x73, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x82, 0x41, 0x20, 0x2f,
	0x61, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f,
	0x61, 0x70, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x61, 0x70, 0x73, 0x5f, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x70, 0x73, 0x2e, 0x41, 0x70, 0x73, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x41, 0x70, 0x73, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52,
	0x09, 0x61, 0x70, 0x73, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x63, 0x6f,
	0x6d, 0x2e, 0x6e, 0x6f, 0x63, 0x73, 0x79, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_openconfig_transport_line_protection_proto_rawDescOnce sync.Once
	file_openconfig_transport_line_protection_proto_rawDescData = file_openconfig_transport_line_protection_proto_rawDesc
)

func file_openconfig_transport_line_protection_proto_rawDescGZIP() []byte {
	file_openconfig_transport_line_protection_proto_rawDescOnce.Do(func() {
		file_openconfig_transport_line_protection_proto_rawDescData = protoimpl.X.CompressGZIP(file_openconfig_transport_line_protection_proto_rawDescData)
	})
	return file_openconfig_transport_line_protection_proto_rawDescData
}

var file_openconfig_transport_line_protection_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_openconfig_transport_line_protection_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_openconfig_transport_line_protection_proto_goTypes = []interface{}{
	(Aps_ApsModules_ApsModule_Config_ForceToPort)(0), // 0: openconfig.Aps.ApsModules.ApsModule.Config.ForceToPort
	(Aps_ApsModules_ApsModule_State_ForceToPort)(0),  // 1: openconfig.Aps.ApsModules.ApsModule.State.ForceToPort
	(*Aps)(nil),                                                                // 2: openconfig.Aps
	(*Aps_ApsModules)(nil),                                                     // 3: openconfig.Aps.ApsModules
	(*Aps_ApsModules_ApsModule)(nil),                                           // 4: openconfig.Aps.ApsModules.ApsModule
	(*Aps_ApsModules_ApsModuleKey)(nil),                                        // 5: openconfig.Aps.ApsModules.ApsModuleKey
	(*Aps_ApsModules_ApsModule_Config)(nil),                                    // 6: openconfig.Aps.ApsModules.ApsModule.Config
	(*Aps_ApsModules_ApsModule_Ports)(nil),                                     // 7: openconfig.Aps.ApsModules.ApsModule.Ports
	(*Aps_ApsModules_ApsModule_State)(nil),                                     // 8: openconfig.Aps.ApsModules.ApsModule.State
	(*Aps_ApsModules_ApsModule_Ports_CommonIn)(nil),                            // 9: openconfig.Aps.ApsModules.ApsModule.Ports.CommonIn
	(*Aps_ApsModules_ApsModule_Ports_CommonOutput)(nil),                        // 10: openconfig.Aps.ApsModules.ApsModule.Ports.CommonOutput
	(*Aps_ApsModules_ApsModule_Ports_LinePrimaryIn)(nil),                       // 11: openconfig.Aps.ApsModules.ApsModule.Ports.LinePrimaryIn
	(*Aps_ApsModules_ApsModule_Ports_LinePrimaryOut)(nil),                      // 12: openconfig.Aps.ApsModules.ApsModule.Ports.LinePrimaryOut
	(*Aps_ApsModules_ApsModule_Ports_LineSecondaryIn)(nil),                     // 13: openconfig.Aps.ApsModules.ApsModule.Ports.LineSecondaryIn
	(*Aps_ApsModules_ApsModule_Ports_LineSecondaryOut)(nil),                    // 14: openconfig.Aps.ApsModules.ApsModule.Ports.LineSecondaryOut
	(*Aps_ApsModules_ApsModule_Ports_CommonIn_Config)(nil),                     // 15: openconfig.Aps.ApsModules.ApsModule.Ports.CommonIn.Config
	(*Aps_ApsModules_ApsModule_Ports_CommonIn_State)(nil),                      // 16: openconfig.Aps.ApsModules.ApsModule.Ports.CommonIn.State
	(*Aps_ApsModules_ApsModule_Ports_CommonIn_State_OpticalPower)(nil),         // 17: openconfig.Aps.ApsModules.ApsModule.Ports.CommonIn.State.OpticalPower
	(*Aps_ApsModules_ApsModule_Ports_CommonOutput_Config)(nil),                 // 18: openconfig.Aps.ApsModules.ApsModule.Ports.CommonOutput.Config
	(*Aps_ApsModules_ApsModule_Ports_CommonOutput_State)(nil),                  // 19: openconfig.Aps.ApsModules.ApsModule.Ports.CommonOutput.State
	(*Aps_ApsModules_ApsModule_Ports_CommonOutput_State_OpticalPower)(nil),     // 20: openconfig.Aps.ApsModules.ApsModule.Ports.CommonOutput.State.OpticalPower
	(*Aps_ApsModules_ApsModule_Ports_LinePrimaryIn_Config)(nil),                // 21: openconfig.Aps.ApsModules.ApsModule.Ports.LinePrimaryIn.Config
	(*Aps_ApsModules_ApsModule_Ports_LinePrimaryIn_State)(nil),                 // 22: openconfig.Aps.ApsModules.ApsModule.Ports.LinePrimaryIn.State
	(*Aps_ApsModules_ApsModule_Ports_LinePrimaryIn_State_OpticalPower)(nil),    // 23: openconfig.Aps.ApsModules.ApsModule.Ports.LinePrimaryIn.State.OpticalPower
	(*Aps_ApsModules_ApsModule_Ports_LinePrimaryOut_Config)(nil),               // 24: openconfig.Aps.ApsModules.ApsModule.Ports.LinePrimaryOut.Config
	(*Aps_ApsModules_ApsModule_Ports_LinePrimaryOut_State)(nil),                // 25: openconfig.Aps.ApsModules.ApsModule.Ports.LinePrimaryOut.State
	(*Aps_ApsModules_ApsModule_Ports_LinePrimaryOut_State_OpticalPower)(nil),   // 26: openconfig.Aps.ApsModules.ApsModule.Ports.LinePrimaryOut.State.OpticalPower
	(*Aps_ApsModules_ApsModule_Ports_LineSecondaryIn_Config)(nil),              // 27: openconfig.Aps.ApsModules.ApsModule.Ports.LineSecondaryIn.Config
	(*Aps_ApsModules_ApsModule_Ports_LineSecondaryIn_State)(nil),               // 28: openconfig.Aps.ApsModules.ApsModule.Ports.LineSecondaryIn.State
	(*Aps_ApsModules_ApsModule_Ports_LineSecondaryIn_State_OpticalPower)(nil),  // 29: openconfig.Aps.ApsModules.ApsModule.Ports.LineSecondaryIn.State.OpticalPower
	(*Aps_ApsModules_ApsModule_Ports_LineSecondaryOut_Config)(nil),             // 30: openconfig.Aps.ApsModules.ApsModule.Ports.LineSecondaryOut.Config
	(*Aps_ApsModules_ApsModule_Ports_LineSecondaryOut_State)(nil),              // 31: openconfig.Aps.ApsModules.ApsModule.Ports.LineSecondaryOut.State
	(*Aps_ApsModules_ApsModule_Ports_LineSecondaryOut_State_OpticalPower)(nil), // 32: openconfig.Aps.ApsModules.ApsModule.Ports.LineSecondaryOut.State.OpticalPower
	(*ywrapper.UintValue)(nil),                                                 // 33: ywrapper.UintValue
	(*ywrapper.StringValue)(nil),                                               // 34: ywrapper.StringValue
	(*ywrapper.Decimal64Value)(nil),                                            // 35: ywrapper.Decimal64Value
	(*ywrapper.BoolValue)(nil),                                                 // 36: ywrapper.BoolValue
	(OpenconfigTransportLineProtectionAPSPATHS)(0),                             // 37: openconfig.OpenconfigTransportLineProtectionAPSPATHS
}
var file_openconfig_transport_line_protection_proto_depIdxs = []int32{
	3,   // 0: openconfig.Aps.aps_modules:type_name -> openconfig.Aps.ApsModules
	5,   // 1: openconfig.Aps.ApsModules.aps_module:type_name -> openconfig.Aps.ApsModules.ApsModuleKey
	6,   // 2: openconfig.Aps.ApsModules.ApsModule.config:type_name -> openconfig.Aps.ApsModules.ApsModule.Config
	7,   // 3: openconfig.Aps.ApsModules.ApsModule.ports:type_name -> openconfig.Aps.ApsModules.ApsModule.Ports
	8,   // 4: openconfig.Aps.ApsModules.ApsModule.state:type_name -> openconfig.Aps.ApsModules.ApsModule.State
	4,   // 5: openconfig.Aps.ApsModules.ApsModuleKey.aps_module:type_name -> openconfig.Aps.ApsModules.ApsModule
	0,   // 6: openconfig.Aps.ApsModules.ApsModule.Config.force_to_port:type_name -> openconfig.Aps.ApsModules.ApsModule.Config.ForceToPort
	33,  // 7: openconfig.Aps.ApsModules.ApsModule.Config.hold_off_time:type_name -> ywrapper.UintValue
	34,  // 8: openconfig.Aps.ApsModules.ApsModule.Config.name:type_name -> ywrapper.StringValue
	35,  // 9: openconfig.Aps.ApsModules.ApsModule.Config.primary_switch_hysteresis:type_name -> ywrapper.Decimal64Value
	35,  // 10: openconfig.Aps.ApsModules.ApsModule.Config.primary_switch_threshold:type_name -> ywrapper.Decimal64Value
	35,  // 11: openconfig.Aps.ApsModules.ApsModule.Config.relative_switch_threshold:type_name -> ywrapper.Decimal64Value
	35,  // 12: openconfig.Aps.ApsModules.ApsModule.Config.relative_switch_threshold_offset:type_name -> ywrapper.Decimal64Value
	36,  // 13: openconfig.Aps.ApsModules.ApsModule.Config.revertive:type_name -> ywrapper.BoolValue
	35,  // 14: openconfig.Aps.ApsModules.ApsModule.Config.secondary_switch_threshold:type_name -> ywrapper.Decimal64Value
	33,  // 15: openconfig.Aps.ApsModules.ApsModule.Config.wait_to_restore_time:type_name -> ywrapper.UintValue
	9,   // 16: openconfig.Aps.ApsModules.ApsModule.Ports.common_in:type_name -> openconfig.Aps.ApsModules.ApsModule.Ports.CommonIn
	10,  // 17: openconfig.Aps.ApsModules.ApsModule.Ports.common_output:type_name -> openconfig.Aps.ApsModules.ApsModule.Ports.CommonOutput
	11,  // 18: openconfig.Aps.ApsModules.ApsModule.Ports.line_primary_in:type_name -> openconfig.Aps.ApsModules.ApsModule.Ports.LinePrimaryIn
	12,  // 19: openconfig.Aps.ApsModules.ApsModule.Ports.line_primary_out:type_name -> openconfig.Aps.ApsModules.ApsModule.Ports.LinePrimaryOut
	13,  // 20: openconfig.Aps.ApsModules.ApsModule.Ports.line_secondary_in:type_name -> openconfig.Aps.ApsModules.ApsModule.Ports.LineSecondaryIn
	14,  // 21: openconfig.Aps.ApsModules.ApsModule.Ports.line_secondary_out:type_name -> openconfig.Aps.ApsModules.ApsModule.Ports.LineSecondaryOut
	37,  // 22: openconfig.Aps.ApsModules.ApsModule.State.active_path:type_name -> openconfig.OpenconfigTransportLineProtectionAPSPATHS
	1,   // 23: openconfig.Aps.ApsModules.ApsModule.State.force_to_port:type_name -> openconfig.Aps.ApsModules.ApsModule.State.ForceToPort
	33,  // 24: openconfig.Aps.ApsModules.ApsModule.State.hold_off_time:type_name -> ywrapper.UintValue
	34,  // 25: openconfig.Aps.ApsModules.ApsModule.State.name:type_name -> ywrapper.StringValue
	35,  // 26: openconfig.Aps.ApsModules.ApsModule.State.primary_switch_hysteresis:type_name -> ywrapper.Decimal64Value
	35,  // 27: openconfig.Aps.ApsModules.ApsModule.State.primary_switch_threshold:type_name -> ywrapper.Decimal64Value
	35,  // 28: openconfig.Aps.ApsModules.ApsModule.State.relative_switch_threshold:type_name -> ywrapper.Decimal64Value
	35,  // 29: openconfig.Aps.ApsModules.ApsModule.State.relative_switch_threshold_offset:type_name -> ywrapper.Decimal64Value
	36,  // 30: openconfig.Aps.ApsModules.ApsModule.State.revertive:type_name -> ywrapper.BoolValue
	35,  // 31: openconfig.Aps.ApsModules.ApsModule.State.secondary_switch_threshold:type_name -> ywrapper.Decimal64Value
	33,  // 32: openconfig.Aps.ApsModules.ApsModule.State.wait_to_restore_time:type_name -> ywrapper.UintValue
	15,  // 33: openconfig.Aps.ApsModules.ApsModule.Ports.CommonIn.config:type_name -> openconfig.Aps.ApsModules.ApsModule.Ports.CommonIn.Config
	16,  // 34: openconfig.Aps.ApsModules.ApsModule.Ports.CommonIn.state:type_name -> openconfig.Aps.ApsModules.ApsModule.Ports.CommonIn.State
	18,  // 35: openconfig.Aps.ApsModules.ApsModule.Ports.CommonOutput.config:type_name -> openconfig.Aps.ApsModules.ApsModule.Ports.CommonOutput.Config
	19,  // 36: openconfig.Aps.ApsModules.ApsModule.Ports.CommonOutput.state:type_name -> openconfig.Aps.ApsModules.ApsModule.Ports.CommonOutput.State
	21,  // 37: openconfig.Aps.ApsModules.ApsModule.Ports.LinePrimaryIn.config:type_name -> openconfig.Aps.ApsModules.ApsModule.Ports.LinePrimaryIn.Config
	22,  // 38: openconfig.Aps.ApsModules.ApsModule.Ports.LinePrimaryIn.state:type_name -> openconfig.Aps.ApsModules.ApsModule.Ports.LinePrimaryIn.State
	24,  // 39: openconfig.Aps.ApsModules.ApsModule.Ports.LinePrimaryOut.config:type_name -> openconfig.Aps.ApsModules.ApsModule.Ports.LinePrimaryOut.Config
	25,  // 40: openconfig.Aps.ApsModules.ApsModule.Ports.LinePrimaryOut.state:type_name -> openconfig.Aps.ApsModules.ApsModule.Ports.LinePrimaryOut.State
	27,  // 41: openconfig.Aps.ApsModules.ApsModule.Ports.LineSecondaryIn.config:type_name -> openconfig.Aps.ApsModules.ApsModule.Ports.LineSecondaryIn.Config
	28,  // 42: openconfig.Aps.ApsModules.ApsModule.Ports.LineSecondaryIn.state:type_name -> openconfig.Aps.ApsModules.ApsModule.Ports.LineSecondaryIn.State
	30,  // 43: openconfig.Aps.ApsModules.ApsModule.Ports.LineSecondaryOut.config:type_name -> openconfig.Aps.ApsModules.ApsModule.Ports.LineSecondaryOut.Config
	31,  // 44: openconfig.Aps.ApsModules.ApsModule.Ports.LineSecondaryOut.state:type_name -> openconfig.Aps.ApsModules.ApsModule.Ports.LineSecondaryOut.State
	36,  // 45: openconfig.Aps.ApsModules.ApsModule.Ports.CommonIn.Config.enabled:type_name -> ywrapper.BoolValue
	35,  // 46: openconfig.Aps.ApsModules.ApsModule.Ports.CommonIn.Config.target_attenuation:type_name -> ywrapper.Decimal64Value
	35,  // 47: openconfig.Aps.ApsModules.ApsModule.Ports.CommonIn.State.attenuation:type_name -> ywrapper.Decimal64Value
	36,  // 48: openconfig.Aps.ApsModules.ApsModule.Ports.CommonIn.State.enabled:type_name -> ywrapper.BoolValue
	17,  // 49: openconfig.Aps.ApsModules.ApsModule.Ports.CommonIn.State.optical_power:type_name -> openconfig.Aps.ApsModules.ApsModule.Ports.CommonIn.State.OpticalPower
	35,  // 50: openconfig.Aps.ApsModules.ApsModule.Ports.CommonIn.State.target_attenuation:type_name -> ywrapper.Decimal64Value
	35,  // 51: openconfig.Aps.ApsModules.ApsModule.Ports.CommonIn.State.OpticalPower.avg:type_name -> ywrapper.Decimal64Value
	35,  // 52: openconfig.Aps.ApsModules.ApsModule.Ports.CommonIn.State.OpticalPower.instant:type_name -> ywrapper.Decimal64Value
	33,  // 53: openconfig.Aps.ApsModules.ApsModule.Ports.CommonIn.State.OpticalPower.interval:type_name -> ywrapper.UintValue
	35,  // 54: openconfig.Aps.ApsModules.ApsModule.Ports.CommonIn.State.OpticalPower.max:type_name -> ywrapper.Decimal64Value
	33,  // 55: openconfig.Aps.ApsModules.ApsModule.Ports.CommonIn.State.OpticalPower.max_time:type_name -> ywrapper.UintValue
	35,  // 56: openconfig.Aps.ApsModules.ApsModule.Ports.CommonIn.State.OpticalPower.min:type_name -> ywrapper.Decimal64Value
	33,  // 57: openconfig.Aps.ApsModules.ApsModule.Ports.CommonIn.State.OpticalPower.min_time:type_name -> ywrapper.UintValue
	35,  // 58: openconfig.Aps.ApsModules.ApsModule.Ports.CommonOutput.Config.target_attenuation:type_name -> ywrapper.Decimal64Value
	35,  // 59: openconfig.Aps.ApsModules.ApsModule.Ports.CommonOutput.State.attenuation:type_name -> ywrapper.Decimal64Value
	20,  // 60: openconfig.Aps.ApsModules.ApsModule.Ports.CommonOutput.State.optical_power:type_name -> openconfig.Aps.ApsModules.ApsModule.Ports.CommonOutput.State.OpticalPower
	35,  // 61: openconfig.Aps.ApsModules.ApsModule.Ports.CommonOutput.State.target_attenuation:type_name -> ywrapper.Decimal64Value
	35,  // 62: openconfig.Aps.ApsModules.ApsModule.Ports.CommonOutput.State.OpticalPower.avg:type_name -> ywrapper.Decimal64Value
	35,  // 63: openconfig.Aps.ApsModules.ApsModule.Ports.CommonOutput.State.OpticalPower.instant:type_name -> ywrapper.Decimal64Value
	33,  // 64: openconfig.Aps.ApsModules.ApsModule.Ports.CommonOutput.State.OpticalPower.interval:type_name -> ywrapper.UintValue
	35,  // 65: openconfig.Aps.ApsModules.ApsModule.Ports.CommonOutput.State.OpticalPower.max:type_name -> ywrapper.Decimal64Value
	33,  // 66: openconfig.Aps.ApsModules.ApsModule.Ports.CommonOutput.State.OpticalPower.max_time:type_name -> ywrapper.UintValue
	35,  // 67: openconfig.Aps.ApsModules.ApsModule.Ports.CommonOutput.State.OpticalPower.min:type_name -> ywrapper.Decimal64Value
	33,  // 68: openconfig.Aps.ApsModules.ApsModule.Ports.CommonOutput.State.OpticalPower.min_time:type_name -> ywrapper.UintValue
	36,  // 69: openconfig.Aps.ApsModules.ApsModule.Ports.LinePrimaryIn.Config.enabled:type_name -> ywrapper.BoolValue
	35,  // 70: openconfig.Aps.ApsModules.ApsModule.Ports.LinePrimaryIn.Config.target_attenuation:type_name -> ywrapper.Decimal64Value
	35,  // 71: openconfig.Aps.ApsModules.ApsModule.Ports.LinePrimaryIn.State.attenuation:type_name -> ywrapper.Decimal64Value
	36,  // 72: openconfig.Aps.ApsModules.ApsModule.Ports.LinePrimaryIn.State.enabled:type_name -> ywrapper.BoolValue
	23,  // 73: openconfig.Aps.ApsModules.ApsModule.Ports.LinePrimaryIn.State.optical_power:type_name -> openconfig.Aps.ApsModules.ApsModule.Ports.LinePrimaryIn.State.OpticalPower
	35,  // 74: openconfig.Aps.ApsModules.ApsModule.Ports.LinePrimaryIn.State.target_attenuation:type_name -> ywrapper.Decimal64Value
	35,  // 75: openconfig.Aps.ApsModules.ApsModule.Ports.LinePrimaryIn.State.OpticalPower.avg:type_name -> ywrapper.Decimal64Value
	35,  // 76: openconfig.Aps.ApsModules.ApsModule.Ports.LinePrimaryIn.State.OpticalPower.instant:type_name -> ywrapper.Decimal64Value
	33,  // 77: openconfig.Aps.ApsModules.ApsModule.Ports.LinePrimaryIn.State.OpticalPower.interval:type_name -> ywrapper.UintValue
	35,  // 78: openconfig.Aps.ApsModules.ApsModule.Ports.LinePrimaryIn.State.OpticalPower.max:type_name -> ywrapper.Decimal64Value
	33,  // 79: openconfig.Aps.ApsModules.ApsModule.Ports.LinePrimaryIn.State.OpticalPower.max_time:type_name -> ywrapper.UintValue
	35,  // 80: openconfig.Aps.ApsModules.ApsModule.Ports.LinePrimaryIn.State.OpticalPower.min:type_name -> ywrapper.Decimal64Value
	33,  // 81: openconfig.Aps.ApsModules.ApsModule.Ports.LinePrimaryIn.State.OpticalPower.min_time:type_name -> ywrapper.UintValue
	35,  // 82: openconfig.Aps.ApsModules.ApsModule.Ports.LinePrimaryOut.Config.target_attenuation:type_name -> ywrapper.Decimal64Value
	35,  // 83: openconfig.Aps.ApsModules.ApsModule.Ports.LinePrimaryOut.State.attenuation:type_name -> ywrapper.Decimal64Value
	26,  // 84: openconfig.Aps.ApsModules.ApsModule.Ports.LinePrimaryOut.State.optical_power:type_name -> openconfig.Aps.ApsModules.ApsModule.Ports.LinePrimaryOut.State.OpticalPower
	35,  // 85: openconfig.Aps.ApsModules.ApsModule.Ports.LinePrimaryOut.State.target_attenuation:type_name -> ywrapper.Decimal64Value
	35,  // 86: openconfig.Aps.ApsModules.ApsModule.Ports.LinePrimaryOut.State.OpticalPower.avg:type_name -> ywrapper.Decimal64Value
	35,  // 87: openconfig.Aps.ApsModules.ApsModule.Ports.LinePrimaryOut.State.OpticalPower.instant:type_name -> ywrapper.Decimal64Value
	33,  // 88: openconfig.Aps.ApsModules.ApsModule.Ports.LinePrimaryOut.State.OpticalPower.interval:type_name -> ywrapper.UintValue
	35,  // 89: openconfig.Aps.ApsModules.ApsModule.Ports.LinePrimaryOut.State.OpticalPower.max:type_name -> ywrapper.Decimal64Value
	33,  // 90: openconfig.Aps.ApsModules.ApsModule.Ports.LinePrimaryOut.State.OpticalPower.max_time:type_name -> ywrapper.UintValue
	35,  // 91: openconfig.Aps.ApsModules.ApsModule.Ports.LinePrimaryOut.State.OpticalPower.min:type_name -> ywrapper.Decimal64Value
	33,  // 92: openconfig.Aps.ApsModules.ApsModule.Ports.LinePrimaryOut.State.OpticalPower.min_time:type_name -> ywrapper.UintValue
	36,  // 93: openconfig.Aps.ApsModules.ApsModule.Ports.LineSecondaryIn.Config.enabled:type_name -> ywrapper.BoolValue
	35,  // 94: openconfig.Aps.ApsModules.ApsModule.Ports.LineSecondaryIn.Config.target_attenuation:type_name -> ywrapper.Decimal64Value
	35,  // 95: openconfig.Aps.ApsModules.ApsModule.Ports.LineSecondaryIn.State.attenuation:type_name -> ywrapper.Decimal64Value
	36,  // 96: openconfig.Aps.ApsModules.ApsModule.Ports.LineSecondaryIn.State.enabled:type_name -> ywrapper.BoolValue
	29,  // 97: openconfig.Aps.ApsModules.ApsModule.Ports.LineSecondaryIn.State.optical_power:type_name -> openconfig.Aps.ApsModules.ApsModule.Ports.LineSecondaryIn.State.OpticalPower
	35,  // 98: openconfig.Aps.ApsModules.ApsModule.Ports.LineSecondaryIn.State.target_attenuation:type_name -> ywrapper.Decimal64Value
	35,  // 99: openconfig.Aps.ApsModules.ApsModule.Ports.LineSecondaryIn.State.OpticalPower.avg:type_name -> ywrapper.Decimal64Value
	35,  // 100: openconfig.Aps.ApsModules.ApsModule.Ports.LineSecondaryIn.State.OpticalPower.instant:type_name -> ywrapper.Decimal64Value
	33,  // 101: openconfig.Aps.ApsModules.ApsModule.Ports.LineSecondaryIn.State.OpticalPower.interval:type_name -> ywrapper.UintValue
	35,  // 102: openconfig.Aps.ApsModules.ApsModule.Ports.LineSecondaryIn.State.OpticalPower.max:type_name -> ywrapper.Decimal64Value
	33,  // 103: openconfig.Aps.ApsModules.ApsModule.Ports.LineSecondaryIn.State.OpticalPower.max_time:type_name -> ywrapper.UintValue
	35,  // 104: openconfig.Aps.ApsModules.ApsModule.Ports.LineSecondaryIn.State.OpticalPower.min:type_name -> ywrapper.Decimal64Value
	33,  // 105: openconfig.Aps.ApsModules.ApsModule.Ports.LineSecondaryIn.State.OpticalPower.min_time:type_name -> ywrapper.UintValue
	35,  // 106: openconfig.Aps.ApsModules.ApsModule.Ports.LineSecondaryOut.Config.target_attenuation:type_name -> ywrapper.Decimal64Value
	35,  // 107: openconfig.Aps.ApsModules.ApsModule.Ports.LineSecondaryOut.State.attenuation:type_name -> ywrapper.Decimal64Value
	32,  // 108: openconfig.Aps.ApsModules.ApsModule.Ports.LineSecondaryOut.State.optical_power:type_name -> openconfig.Aps.ApsModules.ApsModule.Ports.LineSecondaryOut.State.OpticalPower
	35,  // 109: openconfig.Aps.ApsModules.ApsModule.Ports.LineSecondaryOut.State.target_attenuation:type_name -> ywrapper.Decimal64Value
	35,  // 110: openconfig.Aps.ApsModules.ApsModule.Ports.LineSecondaryOut.State.OpticalPower.avg:type_name -> ywrapper.Decimal64Value
	35,  // 111: openconfig.Aps.ApsModules.ApsModule.Ports.LineSecondaryOut.State.OpticalPower.instant:type_name -> ywrapper.Decimal64Value
	33,  // 112: openconfig.Aps.ApsModules.ApsModule.Ports.LineSecondaryOut.State.OpticalPower.interval:type_name -> ywrapper.UintValue
	35,  // 113: openconfig.Aps.ApsModules.ApsModule.Ports.LineSecondaryOut.State.OpticalPower.max:type_name -> ywrapper.Decimal64Value
	33,  // 114: openconfig.Aps.ApsModules.ApsModule.Ports.LineSecondaryOut.State.OpticalPower.max_time:type_name -> ywrapper.UintValue
	35,  // 115: openconfig.Aps.ApsModules.ApsModule.Ports.LineSecondaryOut.State.OpticalPower.min:type_name -> ywrapper.Decimal64Value
	33,  // 116: openconfig.Aps.ApsModules.ApsModule.Ports.LineSecondaryOut.State.OpticalPower.min_time:type_name -> ywrapper.UintValue
	117, // [117:117] is the sub-list for method output_type
	117, // [117:117] is the sub-list for method input_type
	117, // [117:117] is the sub-list for extension type_name
	117, // [117:117] is the sub-list for extension extendee
	0,   // [0:117] is the sub-list for field type_name
}

func init() { file_openconfig_transport_line_protection_proto_init() }
func file_openconfig_transport_line_protection_proto_init() {
	if File_openconfig_transport_line_protection_proto != nil {
		return
	}
	file_openconfig_enums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_openconfig_transport_line_protection_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Aps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_transport_line_protection_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Aps_ApsModules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_transport_line_protection_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Aps_ApsModules_ApsModule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_transport_line_protection_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Aps_ApsModules_ApsModuleKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_transport_line_protection_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Aps_ApsModules_ApsModule_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_transport_line_protection_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Aps_ApsModules_ApsModule_Ports); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_transport_line_protection_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Aps_ApsModules_ApsModule_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_transport_line_protection_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Aps_ApsModules_ApsModule_Ports_CommonIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_transport_line_protection_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Aps_ApsModules_ApsModule_Ports_CommonOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_transport_line_protection_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Aps_ApsModules_ApsModule_Ports_LinePrimaryIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_transport_line_protection_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Aps_ApsModules_ApsModule_Ports_LinePrimaryOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_transport_line_protection_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Aps_ApsModules_ApsModule_Ports_LineSecondaryIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_transport_line_protection_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Aps_ApsModules_ApsModule_Ports_LineSecondaryOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_transport_line_protection_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Aps_ApsModules_ApsModule_Ports_CommonIn_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_transport_line_protection_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Aps_ApsModules_ApsModule_Ports_CommonIn_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_transport_line_protection_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Aps_ApsModules_ApsModule_Ports_CommonIn_State_OpticalPower); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_transport_line_protection_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Aps_ApsModules_ApsModule_Ports_CommonOutput_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_transport_line_protection_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Aps_ApsModules_ApsModule_Ports_CommonOutput_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_transport_line_protection_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Aps_ApsModules_ApsModule_Ports_CommonOutput_State_OpticalPower); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_transport_line_protection_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Aps_ApsModules_ApsModule_Ports_LinePrimaryIn_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_transport_line_protection_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Aps_ApsModules_ApsModule_Ports_LinePrimaryIn_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_transport_line_protection_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Aps_ApsModules_ApsModule_Ports_LinePrimaryIn_State_OpticalPower); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_transport_line_protection_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Aps_ApsModules_ApsModule_Ports_LinePrimaryOut_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_transport_line_protection_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Aps_ApsModules_ApsModule_Ports_LinePrimaryOut_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_transport_line_protection_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Aps_ApsModules_ApsModule_Ports_LinePrimaryOut_State_OpticalPower); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_transport_line_protection_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Aps_ApsModules_ApsModule_Ports_LineSecondaryIn_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_transport_line_protection_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Aps_ApsModules_ApsModule_Ports_LineSecondaryIn_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_transport_line_protection_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Aps_ApsModules_ApsModule_Ports_LineSecondaryIn_State_OpticalPower); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_transport_line_protection_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Aps_ApsModules_ApsModule_Ports_LineSecondaryOut_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_transport_line_protection_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Aps_ApsModules_ApsModule_Ports_LineSecondaryOut_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_transport_line_protection_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Aps_ApsModules_ApsModule_Ports_LineSecondaryOut_State_OpticalPower); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_openconfig_transport_line_protection_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_openconfig_transport_line_protection_proto_goTypes,
		DependencyIndexes: file_openconfig_transport_line_protection_proto_depIdxs,
		EnumInfos:         file_openconfig_transport_line_protection_proto_enumTypes,
		MessageInfos:      file_openconfig_transport_line_protection_proto_msgTypes,
	}.Build()
	File_openconfig_transport_line_protection_proto = out.File
	file_openconfig_transport_line_protection_proto_rawDesc = nil
	file_openconfig_transport_line_protection_proto_goTypes = nil
	file_openconfig_transport_line_protection_proto_depIdxs = nil
}
