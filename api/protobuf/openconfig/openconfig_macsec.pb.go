// openconfig.openconfig_macsec is generated by proto_generator as a protobuf
// representation of a YANG schema.
//
// Input schema modules:
//  - ../api/yang/public/doc/openconfig-example.yang
//  - ../api/yang/public/third_party/ietf/iana-if-type.yang
//  - ../api/yang/public/third_party/ietf/ietf-interfaces.yang
//  - ../api/yang/public/third_party/ietf/ietf-yang-types.yang
//  - ../api/yang/public/third_party/ietf/ietf-inet-types.yang
//  - ../api/yang/public/release/models/bfd/openconfig-bfd.yang
//  - ../api/yang/public/release/models/vlan/openconfig-vlan.yang
//  - ../api/yang/public/release/models/vlan/openconfig-vlan-types.yang
//  - ../api/yang/public/release/models/wifi/openconfig-access-points.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-mac.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-types.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-phy.yang
//  - ../api/yang/public/release/models/wifi/openconfig-ap-interfaces.yang
//  - ../api/yang/public/release/models/wifi/openconfig-ap-manager.yang
//  - ../api/yang/public/release/models/macsec/openconfig-macsec.yang
//  - ../api/yang/public/release/models/macsec/openconfig-macsec-types.yang
//  - ../api/yang/public/release/models/stp/openconfig-spanning-tree-types.yang
//  - ../api/yang/public/release/models/stp/openconfig-spanning-tree.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-errors.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-peer-group.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-types.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-global.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-neighbor.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common-structure.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-policy.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common-multiprotocol.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-types.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-port.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-fan.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-linecard.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-ext.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-cpu.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-psu.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-transceiver.yang
//  - ../api/yang/public/release/models/multicast/openconfig-pim-types.yang
//  - ../api/yang/public/release/models/multicast/openconfig-igmp-types.yang
//  - ../api/yang/public/release/models/multicast/openconfig-igmp.yang
//  - ../api/yang/public/release/models/multicast/openconfig-pim.yang
//  - ../api/yang/public/release/models/catalog/openconfig-module-catalog.yang
//  - ../api/yang/public/release/models/catalog/openconfig-catalog-types.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-interfaces.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-8021x.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-types.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-aggregate.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-poe.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-tunnel.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ip.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ethernet.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ethernet-ext.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ip-ext.yang
//  - ../api/yang/public/release/models/acl/openconfig-packet-match-types.yang
//  - ../api/yang/public/release/models/acl/openconfig-packet-match.yang
//  - ../api/yang/public/release/models/acl/openconfig-acl.yang
//  - ../api/yang/public/release/models/system/openconfig-license.yang
//  - ../api/yang/public/release/models/system/openconfig-system.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-radius.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa.yang
//  - ../api/yang/public/release/models/system/openconfig-system-management.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-types.yang
//  - ../api/yang/public/release/models/system/openconfig-procmon.yang
//  - ../api/yang/public/release/models/system/openconfig-messages.yang
//  - ../api/yang/public/release/models/system/openconfig-system-terminal.yang
//  - ../api/yang/public/release/models/system/openconfig-system-logging.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-tacacs.yang
//  - ../api/yang/public/release/models/system/openconfig-alarms.yang
//  - ../api/yang/public/release/models/system/openconfig-alarm-types.yang
//  - ../api/yang/public/release/models/policy/openconfig-policy-types.yang
//  - ../api/yang/public/release/models/policy/openconfig-routing-policy.yang
//  - ../api/yang/public/release/models/lacp/openconfig-lacp.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-wavelength-router.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-optical-amplifier.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-protection.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-channel-monitor.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-connectivity.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-optical-attenuator.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-common.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-types.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-terminal-device.yang
//  - ../api/yang/public/release/models/telemetry/openconfig-telemetry-types.yang
//  - ../api/yang/public/release/models/telemetry/openconfig-telemetry.yang
//  - ../api/yang/public/release/models/openflow/openconfig-openflow.yang
//  - ../api/yang/public/release/models/openflow/openconfig-openflow-types.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-tables.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-ext.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-table-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-shared-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-types.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-types.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-elements.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-interfaces.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-srte.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-forwarding-policies.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-interfaces.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-path-groups.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
//  - ../api/yang/public/release/models/relay-agent/openconfig-relay-agent.yang
//  - ../api/yang/public/release/models/lldp/openconfig-lldp.yang
//  - ../api/yang/public/release/models/lldp/openconfig-lldp-types.yang
//  - ../api/yang/public/release/models/openconfig-extensions.yang
//  - ../api/yang/public/release/models/types/openconfig-yang-types.yang
//  - ../api/yang/public/release/models/types/openconfig-inet-types.yang
//  - ../api/yang/public/release/models/types/openconfig-types.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-srte-policy.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-rsvp-sr-ext.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-segment-routing-types.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-segment-routing.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-types.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-igp.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-te.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-rsvp.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-static.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-sr.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-ldp.yang
//  - ../api/yang/public/release/models/probes/openconfig-probes-types.yang
//  - ../api/yang/public/release/models/probes/openconfig-probes.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-lsp.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-lsdb-types.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-policy.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-types.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-routing.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-area.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospf-policy.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-common.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-global.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-area-interface.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-lsdb.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospf-types.yang
//  - ../api/yang/public/release/models/local-routing/openconfig-local-routing.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-l3.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-l2.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-policy.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-types.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-mpls.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-common.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-types.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ipv6.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-pf.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-network-instance.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ipv4.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ethernet.yang

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        (unknown)
// source: openconfig_macsec.proto

package openconfig

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/openconfig/ygot/proto/yext"
	ywrapper "github.com/openconfig/ygot/proto/ywrapper"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_CryptographicAlgorithm int32

const (
	Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_CRYPTOGRAPHICALGORITHM_UNSET        Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_CryptographicAlgorithm = 0
	Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_CRYPTOGRAPHICALGORITHM_AES_128_CMAC Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_CryptographicAlgorithm = 1
	Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_CRYPTOGRAPHICALGORITHM_AES_256_CMAC Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_CryptographicAlgorithm = 2
)

// Enum value maps for Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_CryptographicAlgorithm.
var (
	Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_CryptographicAlgorithm_name = map[int32]string{
		0: "CRYPTOGRAPHICALGORITHM_UNSET",
		1: "CRYPTOGRAPHICALGORITHM_AES_128_CMAC",
		2: "CRYPTOGRAPHICALGORITHM_AES_256_CMAC",
	}
	Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_CryptographicAlgorithm_value = map[string]int32{
		"CRYPTOGRAPHICALGORITHM_UNSET":        0,
		"CRYPTOGRAPHICALGORITHM_AES_128_CMAC": 1,
		"CRYPTOGRAPHICALGORITHM_AES_256_CMAC": 2,
	}
)

func (x Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_CryptographicAlgorithm) Enum() *Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_CryptographicAlgorithm {
	p := new(Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_CryptographicAlgorithm)
	*p = x
	return p
}

func (x Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_CryptographicAlgorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_CryptographicAlgorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_macsec_proto_enumTypes[0].Descriptor()
}

func (Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_CryptographicAlgorithm) Type() protoreflect.EnumType {
	return &file_openconfig_macsec_proto_enumTypes[0]
}

func (x Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_CryptographicAlgorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_CryptographicAlgorithm.Descriptor instead.
func (Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_CryptographicAlgorithm) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_macsec_proto_rawDescGZIP(), []int{0, 1, 0, 0, 1, 0, 0, 0}
}

type Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_ExpirationDateTime int32

const (
	Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_EXPIRATIONDATETIME_UNSET         Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_ExpirationDateTime = 0
	Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_EXPIRATIONDATETIME_NO_EXPIRATION Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_ExpirationDateTime = 1
)

// Enum value maps for Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_ExpirationDateTime.
var (
	Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_ExpirationDateTime_name = map[int32]string{
		0: "EXPIRATIONDATETIME_UNSET",
		1: "EXPIRATIONDATETIME_NO_EXPIRATION",
	}
	Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_ExpirationDateTime_value = map[string]int32{
		"EXPIRATIONDATETIME_UNSET":         0,
		"EXPIRATIONDATETIME_NO_EXPIRATION": 1,
	}
)

func (x Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_ExpirationDateTime) Enum() *Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_ExpirationDateTime {
	p := new(Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_ExpirationDateTime)
	*p = x
	return p
}

func (x Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_ExpirationDateTime) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_ExpirationDateTime) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_macsec_proto_enumTypes[1].Descriptor()
}

func (Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_ExpirationDateTime) Type() protoreflect.EnumType {
	return &file_openconfig_macsec_proto_enumTypes[1]
}

func (x Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_ExpirationDateTime) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_ExpirationDateTime.Descriptor instead.
func (Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_ExpirationDateTime) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_macsec_proto_rawDescGZIP(), []int{0, 1, 0, 0, 1, 0, 0, 1}
}

type Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_ValidDateTime int32

const (
	Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_VALIDDATETIME_UNSET             Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_ValidDateTime = 0
	Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_VALIDDATETIME_VALID_IMMEDIATELY Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_ValidDateTime = 1
)

// Enum value maps for Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_ValidDateTime.
var (
	Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_ValidDateTime_name = map[int32]string{
		0: "VALIDDATETIME_UNSET",
		1: "VALIDDATETIME_VALID_IMMEDIATELY",
	}
	Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_ValidDateTime_value = map[string]int32{
		"VALIDDATETIME_UNSET":             0,
		"VALIDDATETIME_VALID_IMMEDIATELY": 1,
	}
)

func (x Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_ValidDateTime) Enum() *Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_ValidDateTime {
	p := new(Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_ValidDateTime)
	*p = x
	return p
}

func (x Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_ValidDateTime) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_ValidDateTime) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_macsec_proto_enumTypes[2].Descriptor()
}

func (Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_ValidDateTime) Type() protoreflect.EnumType {
	return &file_openconfig_macsec_proto_enumTypes[2]
}

func (x Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_ValidDateTime) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_ValidDateTime.Descriptor instead.
func (Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_ValidDateTime) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_macsec_proto_rawDescGZIP(), []int{0, 1, 0, 0, 1, 0, 0, 2}
}

type Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_CryptographicAlgorithm int32

const (
	Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_CRYPTOGRAPHICALGORITHM_UNSET        Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_CryptographicAlgorithm = 0
	Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_CRYPTOGRAPHICALGORITHM_AES_128_CMAC Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_CryptographicAlgorithm = 1
	Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_CRYPTOGRAPHICALGORITHM_AES_256_CMAC Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_CryptographicAlgorithm = 2
)

// Enum value maps for Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_CryptographicAlgorithm.
var (
	Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_CryptographicAlgorithm_name = map[int32]string{
		0: "CRYPTOGRAPHICALGORITHM_UNSET",
		1: "CRYPTOGRAPHICALGORITHM_AES_128_CMAC",
		2: "CRYPTOGRAPHICALGORITHM_AES_256_CMAC",
	}
	Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_CryptographicAlgorithm_value = map[string]int32{
		"CRYPTOGRAPHICALGORITHM_UNSET":        0,
		"CRYPTOGRAPHICALGORITHM_AES_128_CMAC": 1,
		"CRYPTOGRAPHICALGORITHM_AES_256_CMAC": 2,
	}
)

func (x Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_CryptographicAlgorithm) Enum() *Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_CryptographicAlgorithm {
	p := new(Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_CryptographicAlgorithm)
	*p = x
	return p
}

func (x Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_CryptographicAlgorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_CryptographicAlgorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_macsec_proto_enumTypes[3].Descriptor()
}

func (Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_CryptographicAlgorithm) Type() protoreflect.EnumType {
	return &file_openconfig_macsec_proto_enumTypes[3]
}

func (x Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_CryptographicAlgorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_CryptographicAlgorithm.Descriptor instead.
func (Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_CryptographicAlgorithm) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_macsec_proto_rawDescGZIP(), []int{0, 1, 0, 0, 1, 0, 1, 0}
}

type Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_ExpirationDateTime int32

const (
	Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_EXPIRATIONDATETIME_UNSET         Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_ExpirationDateTime = 0
	Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_EXPIRATIONDATETIME_NO_EXPIRATION Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_ExpirationDateTime = 1
)

// Enum value maps for Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_ExpirationDateTime.
var (
	Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_ExpirationDateTime_name = map[int32]string{
		0: "EXPIRATIONDATETIME_UNSET",
		1: "EXPIRATIONDATETIME_NO_EXPIRATION",
	}
	Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_ExpirationDateTime_value = map[string]int32{
		"EXPIRATIONDATETIME_UNSET":         0,
		"EXPIRATIONDATETIME_NO_EXPIRATION": 1,
	}
)

func (x Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_ExpirationDateTime) Enum() *Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_ExpirationDateTime {
	p := new(Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_ExpirationDateTime)
	*p = x
	return p
}

func (x Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_ExpirationDateTime) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_ExpirationDateTime) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_macsec_proto_enumTypes[4].Descriptor()
}

func (Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_ExpirationDateTime) Type() protoreflect.EnumType {
	return &file_openconfig_macsec_proto_enumTypes[4]
}

func (x Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_ExpirationDateTime) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_ExpirationDateTime.Descriptor instead.
func (Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_ExpirationDateTime) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_macsec_proto_rawDescGZIP(), []int{0, 1, 0, 0, 1, 0, 1, 1}
}

type Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_ValidDateTime int32

const (
	Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_VALIDDATETIME_UNSET             Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_ValidDateTime = 0
	Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_VALIDDATETIME_VALID_IMMEDIATELY Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_ValidDateTime = 1
)

// Enum value maps for Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_ValidDateTime.
var (
	Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_ValidDateTime_name = map[int32]string{
		0: "VALIDDATETIME_UNSET",
		1: "VALIDDATETIME_VALID_IMMEDIATELY",
	}
	Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_ValidDateTime_value = map[string]int32{
		"VALIDDATETIME_UNSET":             0,
		"VALIDDATETIME_VALID_IMMEDIATELY": 1,
	}
)

func (x Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_ValidDateTime) Enum() *Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_ValidDateTime {
	p := new(Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_ValidDateTime)
	*p = x
	return p
}

func (x Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_ValidDateTime) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_ValidDateTime) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_macsec_proto_enumTypes[5].Descriptor()
}

func (Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_ValidDateTime) Type() protoreflect.EnumType {
	return &file_openconfig_macsec_proto_enumTypes[5]
}

func (x Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_ValidDateTime) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_ValidDateTime.Descriptor instead.
func (Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_ValidDateTime) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_macsec_proto_rawDescGZIP(), []int{0, 1, 0, 0, 1, 0, 1, 2}
}

type Macsec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interfaces *Macsec_Interfaces `protobuf:"bytes,10354453,opt,name=interfaces,proto3" json:"interfaces,omitempty"`
	Mka        *Macsec_Mka        `protobuf:"bytes,281717758,opt,name=mka,proto3" json:"mka,omitempty"`
}

func (x *Macsec) Reset() {
	*x = Macsec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_macsec_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Macsec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Macsec) ProtoMessage() {}

func (x *Macsec) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_macsec_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Macsec.ProtoReflect.Descriptor instead.
func (*Macsec) Descriptor() ([]byte, []int) {
	return file_openconfig_macsec_proto_rawDescGZIP(), []int{0}
}

func (x *Macsec) GetInterfaces() *Macsec_Interfaces {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

func (x *Macsec) GetMka() *Macsec_Mka {
	if x != nil {
		return x.Mka
	}
	return nil
}

type Macsec_Interfaces struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interface []*Macsec_Interfaces_InterfaceKey `protobuf:"bytes,39379313,rep,name=interface,proto3" json:"interface,omitempty"`
}

func (x *Macsec_Interfaces) Reset() {
	*x = Macsec_Interfaces{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_macsec_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Macsec_Interfaces) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Macsec_Interfaces) ProtoMessage() {}

func (x *Macsec_Interfaces) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_macsec_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Macsec_Interfaces.ProtoReflect.Descriptor instead.
func (*Macsec_Interfaces) Descriptor() ([]byte, []int) {
	return file_openconfig_macsec_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Macsec_Interfaces) GetInterface() []*Macsec_Interfaces_InterfaceKey {
	if x != nil {
		return x.Interface
	}
	return nil
}

type Macsec_Mka struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyChains *Macsec_Mka_KeyChains `protobuf:"bytes,193870273,opt,name=key_chains,json=keyChains,proto3" json:"key_chains,omitempty"`
	Policies  *Macsec_Mka_Policies  `protobuf:"bytes,30117647,opt,name=policies,proto3" json:"policies,omitempty"`
	State     *Macsec_Mka_State     `protobuf:"bytes,34451392,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Macsec_Mka) Reset() {
	*x = Macsec_Mka{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_macsec_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Macsec_Mka) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Macsec_Mka) ProtoMessage() {}

func (x *Macsec_Mka) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_macsec_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Macsec_Mka.ProtoReflect.Descriptor instead.
func (*Macsec_Mka) Descriptor() ([]byte, []int) {
	return file_openconfig_macsec_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Macsec_Mka) GetKeyChains() *Macsec_Mka_KeyChains {
	if x != nil {
		return x.KeyChains
	}
	return nil
}

func (x *Macsec_Mka) GetPolicies() *Macsec_Mka_Policies {
	if x != nil {
		return x.Policies
	}
	return nil
}

func (x *Macsec_Mka) GetState() *Macsec_Mka_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Macsec_Interfaces_Interface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Macsec_Interfaces_Interface_Config `protobuf:"bytes,131017622,opt,name=config,proto3" json:"config,omitempty"`
	Mka    *Macsec_Interfaces_Interface_Mka    `protobuf:"bytes,57586913,opt,name=mka,proto3" json:"mka,omitempty"`
	ScsaRx *Macsec_Interfaces_Interface_ScsaRx `protobuf:"bytes,459770433,opt,name=scsa_rx,json=scsaRx,proto3" json:"scsa_rx,omitempty"`
	ScsaTx *Macsec_Interfaces_Interface_ScsaTx `protobuf:"bytes,493325607,opt,name=scsa_tx,json=scsaTx,proto3" json:"scsa_tx,omitempty"`
	State  *Macsec_Interfaces_Interface_State  `protobuf:"bytes,111600707,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Macsec_Interfaces_Interface) Reset() {
	*x = Macsec_Interfaces_Interface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_macsec_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Macsec_Interfaces_Interface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Macsec_Interfaces_Interface) ProtoMessage() {}

func (x *Macsec_Interfaces_Interface) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_macsec_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Macsec_Interfaces_Interface.ProtoReflect.Descriptor instead.
func (*Macsec_Interfaces_Interface) Descriptor() ([]byte, []int) {
	return file_openconfig_macsec_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *Macsec_Interfaces_Interface) GetConfig() *Macsec_Interfaces_Interface_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Macsec_Interfaces_Interface) GetMka() *Macsec_Interfaces_Interface_Mka {
	if x != nil {
		return x.Mka
	}
	return nil
}

func (x *Macsec_Interfaces_Interface) GetScsaRx() *Macsec_Interfaces_Interface_ScsaRx {
	if x != nil {
		return x.ScsaRx
	}
	return nil
}

func (x *Macsec_Interfaces_Interface) GetScsaTx() *Macsec_Interfaces_Interface_ScsaTx {
	if x != nil {
		return x.ScsaTx
	}
	return nil
}

func (x *Macsec_Interfaces_Interface) GetState() *Macsec_Interfaces_Interface_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Macsec_Interfaces_InterfaceKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string                       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Interface *Macsec_Interfaces_Interface `protobuf:"bytes,2,opt,name=interface,proto3" json:"interface,omitempty"`
}

func (x *Macsec_Interfaces_InterfaceKey) Reset() {
	*x = Macsec_Interfaces_InterfaceKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_macsec_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Macsec_Interfaces_InterfaceKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Macsec_Interfaces_InterfaceKey) ProtoMessage() {}

func (x *Macsec_Interfaces_InterfaceKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_macsec_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Macsec_Interfaces_InterfaceKey.ProtoReflect.Descriptor instead.
func (*Macsec_Interfaces_InterfaceKey) Descriptor() ([]byte, []int) {
	return file_openconfig_macsec_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *Macsec_Interfaces_InterfaceKey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Macsec_Interfaces_InterfaceKey) GetInterface() *Macsec_Interfaces_Interface {
	if x != nil {
		return x.Interface
	}
	return nil
}

type Macsec_Interfaces_Interface_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable           *ywrapper.BoolValue   `protobuf:"bytes,522585376,opt,name=enable,proto3" json:"enable,omitempty"`
	Name             *ywrapper.StringValue `protobuf:"bytes,487964796,opt,name=name,proto3" json:"name,omitempty"`
	ReplayProtection *ywrapper.UintValue   `protobuf:"bytes,412893112,opt,name=replay_protection,json=replayProtection,proto3" json:"replay_protection,omitempty"`
}

func (x *Macsec_Interfaces_Interface_Config) Reset() {
	*x = Macsec_Interfaces_Interface_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_macsec_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Macsec_Interfaces_Interface_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Macsec_Interfaces_Interface_Config) ProtoMessage() {}

func (x *Macsec_Interfaces_Interface_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_macsec_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Macsec_Interfaces_Interface_Config.ProtoReflect.Descriptor instead.
func (*Macsec_Interfaces_Interface_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_macsec_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (x *Macsec_Interfaces_Interface_Config) GetEnable() *ywrapper.BoolValue {
	if x != nil {
		return x.Enable
	}
	return nil
}

func (x *Macsec_Interfaces_Interface_Config) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Macsec_Interfaces_Interface_Config) GetReplayProtection() *ywrapper.UintValue {
	if x != nil {
		return x.ReplayProtection
	}
	return nil
}

type Macsec_Interfaces_Interface_Mka struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Macsec_Interfaces_Interface_Mka_Config `protobuf:"bytes,440024550,opt,name=config,proto3" json:"config,omitempty"`
	State  *Macsec_Interfaces_Interface_Mka_State  `protobuf:"bytes,231416915,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Macsec_Interfaces_Interface_Mka) Reset() {
	*x = Macsec_Interfaces_Interface_Mka{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_macsec_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Macsec_Interfaces_Interface_Mka) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Macsec_Interfaces_Interface_Mka) ProtoMessage() {}

func (x *Macsec_Interfaces_Interface_Mka) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_macsec_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Macsec_Interfaces_Interface_Mka.ProtoReflect.Descriptor instead.
func (*Macsec_Interfaces_Interface_Mka) Descriptor() ([]byte, []int) {
	return file_openconfig_macsec_proto_rawDescGZIP(), []int{0, 0, 0, 1}
}

func (x *Macsec_Interfaces_Interface_Mka) GetConfig() *Macsec_Interfaces_Interface_Mka_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Macsec_Interfaces_Interface_Mka) GetState() *Macsec_Interfaces_Interface_Mka_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Macsec_Interfaces_Interface_ScsaRx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScsaRx []*Macsec_Interfaces_Interface_ScsaRx_ScsaRxKey `protobuf:"bytes,76384977,rep,name=scsa_rx,json=scsaRx,proto3" json:"scsa_rx,omitempty"`
}

func (x *Macsec_Interfaces_Interface_ScsaRx) Reset() {
	*x = Macsec_Interfaces_Interface_ScsaRx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_macsec_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Macsec_Interfaces_Interface_ScsaRx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Macsec_Interfaces_Interface_ScsaRx) ProtoMessage() {}

func (x *Macsec_Interfaces_Interface_ScsaRx) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_macsec_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Macsec_Interfaces_Interface_ScsaRx.ProtoReflect.Descriptor instead.
func (*Macsec_Interfaces_Interface_ScsaRx) Descriptor() ([]byte, []int) {
	return file_openconfig_macsec_proto_rawDescGZIP(), []int{0, 0, 0, 2}
}

func (x *Macsec_Interfaces_Interface_ScsaRx) GetScsaRx() []*Macsec_Interfaces_Interface_ScsaRx_ScsaRxKey {
	if x != nil {
		return x.ScsaRx
	}
	return nil
}

type Macsec_Interfaces_Interface_ScsaTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScsaTx []*Macsec_Interfaces_Interface_ScsaTx_ScsaTxKey `protobuf:"bytes,190850821,rep,name=scsa_tx,json=scsaTx,proto3" json:"scsa_tx,omitempty"`
}

func (x *Macsec_Interfaces_Interface_ScsaTx) Reset() {
	*x = Macsec_Interfaces_Interface_ScsaTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_macsec_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Macsec_Interfaces_Interface_ScsaTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Macsec_Interfaces_Interface_ScsaTx) ProtoMessage() {}

func (x *Macsec_Interfaces_Interface_ScsaTx) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_macsec_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Macsec_Interfaces_Interface_ScsaTx.ProtoReflect.Descriptor instead.
func (*Macsec_Interfaces_Interface_ScsaTx) Descriptor() ([]byte, []int) {
	return file_openconfig_macsec_proto_rawDescGZIP(), []int{0, 0, 0, 3}
}

func (x *Macsec_Interfaces_Interface_ScsaTx) GetScsaTx() []*Macsec_Interfaces_Interface_ScsaTx_ScsaTxKey {
	if x != nil {
		return x.ScsaTx
	}
	return nil
}

type Macsec_Interfaces_Interface_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Counters         *Macsec_Interfaces_Interface_State_Counters `protobuf:"bytes,420105009,opt,name=counters,proto3" json:"counters,omitempty"`
	Enable           *ywrapper.BoolValue                         `protobuf:"bytes,356354411,opt,name=enable,proto3" json:"enable,omitempty"`
	Name             *ywrapper.StringValue                       `protobuf:"bytes,346744275,opt,name=name,proto3" json:"name,omitempty"`
	ReplayProtection *ywrapper.UintValue                         `protobuf:"bytes,522340825,opt,name=replay_protection,json=replayProtection,proto3" json:"replay_protection,omitempty"`
}

func (x *Macsec_Interfaces_Interface_State) Reset() {
	*x = Macsec_Interfaces_Interface_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_macsec_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Macsec_Interfaces_Interface_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Macsec_Interfaces_Interface_State) ProtoMessage() {}

func (x *Macsec_Interfaces_Interface_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_macsec_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Macsec_Interfaces_Interface_State.ProtoReflect.Descriptor instead.
func (*Macsec_Interfaces_Interface_State) Descriptor() ([]byte, []int) {
	return file_openconfig_macsec_proto_rawDescGZIP(), []int{0, 0, 0, 4}
}

func (x *Macsec_Interfaces_Interface_State) GetCounters() *Macsec_Interfaces_Interface_State_Counters {
	if x != nil {
		return x.Counters
	}
	return nil
}

func (x *Macsec_Interfaces_Interface_State) GetEnable() *ywrapper.BoolValue {
	if x != nil {
		return x.Enable
	}
	return nil
}

func (x *Macsec_Interfaces_Interface_State) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Macsec_Interfaces_Interface_State) GetReplayProtection() *ywrapper.UintValue {
	if x != nil {
		return x.ReplayProtection
	}
	return nil
}

type Macsec_Interfaces_Interface_Mka_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyChain  *ywrapper.StringValue `protobuf:"bytes,469250782,opt,name=key_chain,json=keyChain,proto3" json:"key_chain,omitempty"`
	MkaPolicy *ywrapper.StringValue `protobuf:"bytes,47136325,opt,name=mka_policy,json=mkaPolicy,proto3" json:"mka_policy,omitempty"`
}

func (x *Macsec_Interfaces_Interface_Mka_Config) Reset() {
	*x = Macsec_Interfaces_Interface_Mka_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_macsec_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Macsec_Interfaces_Interface_Mka_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Macsec_Interfaces_Interface_Mka_Config) ProtoMessage() {}

func (x *Macsec_Interfaces_Interface_Mka_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_macsec_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Macsec_Interfaces_Interface_Mka_Config.ProtoReflect.Descriptor instead.
func (*Macsec_Interfaces_Interface_Mka_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_macsec_proto_rawDescGZIP(), []int{0, 0, 0, 1, 0}
}

func (x *Macsec_Interfaces_Interface_Mka_Config) GetKeyChain() *ywrapper.StringValue {
	if x != nil {
		return x.KeyChain
	}
	return nil
}

func (x *Macsec_Interfaces_Interface_Mka_Config) GetMkaPolicy() *ywrapper.StringValue {
	if x != nil {
		return x.MkaPolicy
	}
	return nil
}

type Macsec_Interfaces_Interface_Mka_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Counters  *Macsec_Interfaces_Interface_Mka_State_Counters `protobuf:"bytes,399158497,opt,name=counters,proto3" json:"counters,omitempty"`
	KeyChain  *ywrapper.StringValue                           `protobuf:"bytes,322152423,opt,name=key_chain,json=keyChain,proto3" json:"key_chain,omitempty"`
	MkaPolicy *ywrapper.StringValue                           `protobuf:"bytes,222364322,opt,name=mka_policy,json=mkaPolicy,proto3" json:"mka_policy,omitempty"`
}

func (x *Macsec_Interfaces_Interface_Mka_State) Reset() {
	*x = Macsec_Interfaces_Interface_Mka_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_macsec_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Macsec_Interfaces_Interface_Mka_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Macsec_Interfaces_Interface_Mka_State) ProtoMessage() {}

func (x *Macsec_Interfaces_Interface_Mka_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_macsec_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Macsec_Interfaces_Interface_Mka_State.ProtoReflect.Descriptor instead.
func (*Macsec_Interfaces_Interface_Mka_State) Descriptor() ([]byte, []int) {
	return file_openconfig_macsec_proto_rawDescGZIP(), []int{0, 0, 0, 1, 1}
}

func (x *Macsec_Interfaces_Interface_Mka_State) GetCounters() *Macsec_Interfaces_Interface_Mka_State_Counters {
	if x != nil {
		return x.Counters
	}
	return nil
}

func (x *Macsec_Interfaces_Interface_Mka_State) GetKeyChain() *ywrapper.StringValue {
	if x != nil {
		return x.KeyChain
	}
	return nil
}

func (x *Macsec_Interfaces_Interface_Mka_State) GetMkaPolicy() *ywrapper.StringValue {
	if x != nil {
		return x.MkaPolicy
	}
	return nil
}

type Macsec_Interfaces_Interface_Mka_State_Counters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InCakMkpdu  *ywrapper.UintValue `protobuf:"bytes,525550199,opt,name=in_cak_mkpdu,json=inCakMkpdu,proto3" json:"in_cak_mkpdu,omitempty"`
	InMkpdu     *ywrapper.UintValue `protobuf:"bytes,428724307,opt,name=in_mkpdu,json=inMkpdu,proto3" json:"in_mkpdu,omitempty"`
	InSakMkpdu  *ywrapper.UintValue `protobuf:"bytes,373626087,opt,name=in_sak_mkpdu,json=inSakMkpdu,proto3" json:"in_sak_mkpdu,omitempty"`
	OutCakMkpdu *ywrapper.UintValue `protobuf:"bytes,428735378,opt,name=out_cak_mkpdu,json=outCakMkpdu,proto3" json:"out_cak_mkpdu,omitempty"`
	OutMkpdu    *ywrapper.UintValue `protobuf:"bytes,286004678,opt,name=out_mkpdu,json=outMkpdu,proto3" json:"out_mkpdu,omitempty"`
	OutSakMkpdu *ywrapper.UintValue `protobuf:"bytes,18048034,opt,name=out_sak_mkpdu,json=outSakMkpdu,proto3" json:"out_sak_mkpdu,omitempty"`
}

func (x *Macsec_Interfaces_Interface_Mka_State_Counters) Reset() {
	*x = Macsec_Interfaces_Interface_Mka_State_Counters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_macsec_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Macsec_Interfaces_Interface_Mka_State_Counters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Macsec_Interfaces_Interface_Mka_State_Counters) ProtoMessage() {}

func (x *Macsec_Interfaces_Interface_Mka_State_Counters) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_macsec_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Macsec_Interfaces_Interface_Mka_State_Counters.ProtoReflect.Descriptor instead.
func (*Macsec_Interfaces_Interface_Mka_State_Counters) Descriptor() ([]byte, []int) {
	return file_openconfig_macsec_proto_rawDescGZIP(), []int{0, 0, 0, 1, 1, 0}
}

func (x *Macsec_Interfaces_Interface_Mka_State_Counters) GetInCakMkpdu() *ywrapper.UintValue {
	if x != nil {
		return x.InCakMkpdu
	}
	return nil
}

func (x *Macsec_Interfaces_Interface_Mka_State_Counters) GetInMkpdu() *ywrapper.UintValue {
	if x != nil {
		return x.InMkpdu
	}
	return nil
}

func (x *Macsec_Interfaces_Interface_Mka_State_Counters) GetInSakMkpdu() *ywrapper.UintValue {
	if x != nil {
		return x.InSakMkpdu
	}
	return nil
}

func (x *Macsec_Interfaces_Interface_Mka_State_Counters) GetOutCakMkpdu() *ywrapper.UintValue {
	if x != nil {
		return x.OutCakMkpdu
	}
	return nil
}

func (x *Macsec_Interfaces_Interface_Mka_State_Counters) GetOutMkpdu() *ywrapper.UintValue {
	if x != nil {
		return x.OutMkpdu
	}
	return nil
}

func (x *Macsec_Interfaces_Interface_Mka_State_Counters) GetOutSakMkpdu() *ywrapper.UintValue {
	if x != nil {
		return x.OutSakMkpdu
	}
	return nil
}

type Macsec_Interfaces_Interface_ScsaRx_ScsaRx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *Macsec_Interfaces_Interface_ScsaRx_ScsaRx_State `protobuf:"bytes,55999267,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Macsec_Interfaces_Interface_ScsaRx_ScsaRx) Reset() {
	*x = Macsec_Interfaces_Interface_ScsaRx_ScsaRx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_macsec_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Macsec_Interfaces_Interface_ScsaRx_ScsaRx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Macsec_Interfaces_Interface_ScsaRx_ScsaRx) ProtoMessage() {}

func (x *Macsec_Interfaces_Interface_ScsaRx_ScsaRx) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_macsec_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Macsec_Interfaces_Interface_ScsaRx_ScsaRx.ProtoReflect.Descriptor instead.
func (*Macsec_Interfaces_Interface_ScsaRx_ScsaRx) Descriptor() ([]byte, []int) {
	return file_openconfig_macsec_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0}
}

func (x *Macsec_Interfaces_Interface_ScsaRx_ScsaRx) GetState() *Macsec_Interfaces_Interface_ScsaRx_ScsaRx_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Macsec_Interfaces_Interface_ScsaRx_ScsaRxKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SciRx  string                                     `protobuf:"bytes,1,opt,name=sci_rx,json=sciRx,proto3" json:"sci_rx,omitempty"`
	ScsaRx *Macsec_Interfaces_Interface_ScsaRx_ScsaRx `protobuf:"bytes,2,opt,name=scsa_rx,json=scsaRx,proto3" json:"scsa_rx,omitempty"`
}

func (x *Macsec_Interfaces_Interface_ScsaRx_ScsaRxKey) Reset() {
	*x = Macsec_Interfaces_Interface_ScsaRx_ScsaRxKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_macsec_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Macsec_Interfaces_Interface_ScsaRx_ScsaRxKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Macsec_Interfaces_Interface_ScsaRx_ScsaRxKey) ProtoMessage() {}

func (x *Macsec_Interfaces_Interface_ScsaRx_ScsaRxKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_macsec_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Macsec_Interfaces_Interface_ScsaRx_ScsaRxKey.ProtoReflect.Descriptor instead.
func (*Macsec_Interfaces_Interface_ScsaRx_ScsaRxKey) Descriptor() ([]byte, []int) {
	return file_openconfig_macsec_proto_rawDescGZIP(), []int{0, 0, 0, 2, 1}
}

func (x *Macsec_Interfaces_Interface_ScsaRx_ScsaRxKey) GetSciRx() string {
	if x != nil {
		return x.SciRx
	}
	return ""
}

func (x *Macsec_Interfaces_Interface_ScsaRx_ScsaRxKey) GetScsaRx() *Macsec_Interfaces_Interface_ScsaRx_ScsaRx {
	if x != nil {
		return x.ScsaRx
	}
	return nil
}

type Macsec_Interfaces_Interface_ScsaRx_ScsaRx_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Counters *Macsec_Interfaces_Interface_ScsaRx_ScsaRx_State_Counters `protobuf:"bytes,126910737,opt,name=counters,proto3" json:"counters,omitempty"`
	SciRx    *ywrapper.StringValue                                     `protobuf:"bytes,213257816,opt,name=sci_rx,json=sciRx,proto3" json:"sci_rx,omitempty"`
}

func (x *Macsec_Interfaces_Interface_ScsaRx_ScsaRx_State) Reset() {
	*x = Macsec_Interfaces_Interface_ScsaRx_ScsaRx_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_macsec_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Macsec_Interfaces_Interface_ScsaRx_ScsaRx_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Macsec_Interfaces_Interface_ScsaRx_ScsaRx_State) ProtoMessage() {}

func (x *Macsec_Interfaces_Interface_ScsaRx_ScsaRx_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_macsec_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Macsec_Interfaces_Interface_ScsaRx_ScsaRx_State.ProtoReflect.Descriptor instead.
func (*Macsec_Interfaces_Interface_ScsaRx_ScsaRx_State) Descriptor() ([]byte, []int) {
	return file_openconfig_macsec_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0, 0}
}

func (x *Macsec_Interfaces_Interface_ScsaRx_ScsaRx_State) GetCounters() *Macsec_Interfaces_Interface_ScsaRx_ScsaRx_State_Counters {
	if x != nil {
		return x.Counters
	}
	return nil
}

func (x *Macsec_Interfaces_Interface_ScsaRx_ScsaRx_State) GetSciRx() *ywrapper.StringValue {
	if x != nil {
		return x.SciRx
	}
	return nil
}

type Macsec_Interfaces_Interface_ScsaRx_ScsaRx_State_Counters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SaInvalid *ywrapper.UintValue `protobuf:"bytes,227534054,opt,name=sa_invalid,json=saInvalid,proto3" json:"sa_invalid,omitempty"`
	SaValid   *ywrapper.UintValue `protobuf:"bytes,62596517,opt,name=sa_valid,json=saValid,proto3" json:"sa_valid,omitempty"`
	ScInvalid *ywrapper.UintValue `protobuf:"bytes,485292072,opt,name=sc_invalid,json=scInvalid,proto3" json:"sc_invalid,omitempty"`
	ScValid   *ywrapper.UintValue `protobuf:"bytes,55151747,opt,name=sc_valid,json=scValid,proto3" json:"sc_valid,omitempty"`
}

func (x *Macsec_Interfaces_Interface_ScsaRx_ScsaRx_State_Counters) Reset() {
	*x = Macsec_Interfaces_Interface_ScsaRx_ScsaRx_State_Counters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_macsec_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Macsec_Interfaces_Interface_ScsaRx_ScsaRx_State_Counters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Macsec_Interfaces_Interface_ScsaRx_ScsaRx_State_Counters) ProtoMessage() {}

func (x *Macsec_Interfaces_Interface_ScsaRx_ScsaRx_State_Counters) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_macsec_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Macsec_Interfaces_Interface_ScsaRx_ScsaRx_State_Counters.ProtoReflect.Descriptor instead.
func (*Macsec_Interfaces_Interface_ScsaRx_ScsaRx_State_Counters) Descriptor() ([]byte, []int) {
	return file_openconfig_macsec_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0, 0, 0}
}

func (x *Macsec_Interfaces_Interface_ScsaRx_ScsaRx_State_Counters) GetSaInvalid() *ywrapper.UintValue {
	if x != nil {
		return x.SaInvalid
	}
	return nil
}

func (x *Macsec_Interfaces_Interface_ScsaRx_ScsaRx_State_Counters) GetSaValid() *ywrapper.UintValue {
	if x != nil {
		return x.SaValid
	}
	return nil
}

func (x *Macsec_Interfaces_Interface_ScsaRx_ScsaRx_State_Counters) GetScInvalid() *ywrapper.UintValue {
	if x != nil {
		return x.ScInvalid
	}
	return nil
}

func (x *Macsec_Interfaces_Interface_ScsaRx_ScsaRx_State_Counters) GetScValid() *ywrapper.UintValue {
	if x != nil {
		return x.ScValid
	}
	return nil
}

type Macsec_Interfaces_Interface_ScsaTx_ScsaTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *Macsec_Interfaces_Interface_ScsaTx_ScsaTx_State `protobuf:"bytes,46638055,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Macsec_Interfaces_Interface_ScsaTx_ScsaTx) Reset() {
	*x = Macsec_Interfaces_Interface_ScsaTx_ScsaTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_macsec_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Macsec_Interfaces_Interface_ScsaTx_ScsaTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Macsec_Interfaces_Interface_ScsaTx_ScsaTx) ProtoMessage() {}

func (x *Macsec_Interfaces_Interface_ScsaTx_ScsaTx) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_macsec_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Macsec_Interfaces_Interface_ScsaTx_ScsaTx.ProtoReflect.Descriptor instead.
func (*Macsec_Interfaces_Interface_ScsaTx_ScsaTx) Descriptor() ([]byte, []int) {
	return file_openconfig_macsec_proto_rawDescGZIP(), []int{0, 0, 0, 3, 0}
}

func (x *Macsec_Interfaces_Interface_ScsaTx_ScsaTx) GetState() *Macsec_Interfaces_Interface_ScsaTx_ScsaTx_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Macsec_Interfaces_Interface_ScsaTx_ScsaTxKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SciTx  string                                     `protobuf:"bytes,1,opt,name=sci_tx,json=sciTx,proto3" json:"sci_tx,omitempty"`
	ScsaTx *Macsec_Interfaces_Interface_ScsaTx_ScsaTx `protobuf:"bytes,2,opt,name=scsa_tx,json=scsaTx,proto3" json:"scsa_tx,omitempty"`
}

func (x *Macsec_Interfaces_Interface_ScsaTx_ScsaTxKey) Reset() {
	*x = Macsec_Interfaces_Interface_ScsaTx_ScsaTxKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_macsec_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Macsec_Interfaces_Interface_ScsaTx_ScsaTxKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Macsec_Interfaces_Interface_ScsaTx_ScsaTxKey) ProtoMessage() {}

func (x *Macsec_Interfaces_Interface_ScsaTx_ScsaTxKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_macsec_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Macsec_Interfaces_Interface_ScsaTx_ScsaTxKey.ProtoReflect.Descriptor instead.
func (*Macsec_Interfaces_Interface_ScsaTx_ScsaTxKey) Descriptor() ([]byte, []int) {
	return file_openconfig_macsec_proto_rawDescGZIP(), []int{0, 0, 0, 3, 1}
}

func (x *Macsec_Interfaces_Interface_ScsaTx_ScsaTxKey) GetSciTx() string {
	if x != nil {
		return x.SciTx
	}
	return ""
}

func (x *Macsec_Interfaces_Interface_ScsaTx_ScsaTxKey) GetScsaTx() *Macsec_Interfaces_Interface_ScsaTx_ScsaTx {
	if x != nil {
		return x.ScsaTx
	}
	return nil
}

type Macsec_Interfaces_Interface_ScsaTx_ScsaTx_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Counters *Macsec_Interfaces_Interface_ScsaTx_ScsaTx_State_Counters `protobuf:"bytes,160982429,opt,name=counters,proto3" json:"counters,omitempty"`
	SciTx    *ywrapper.StringValue                                     `protobuf:"bytes,248341070,opt,name=sci_tx,json=sciTx,proto3" json:"sci_tx,omitempty"`
}

func (x *Macsec_Interfaces_Interface_ScsaTx_ScsaTx_State) Reset() {
	*x = Macsec_Interfaces_Interface_ScsaTx_ScsaTx_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_macsec_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Macsec_Interfaces_Interface_ScsaTx_ScsaTx_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Macsec_Interfaces_Interface_ScsaTx_ScsaTx_State) ProtoMessage() {}

func (x *Macsec_Interfaces_Interface_ScsaTx_ScsaTx_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_macsec_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Macsec_Interfaces_Interface_ScsaTx_ScsaTx_State.ProtoReflect.Descriptor instead.
func (*Macsec_Interfaces_Interface_ScsaTx_ScsaTx_State) Descriptor() ([]byte, []int) {
	return file_openconfig_macsec_proto_rawDescGZIP(), []int{0, 0, 0, 3, 0, 0}
}

func (x *Macsec_Interfaces_Interface_ScsaTx_ScsaTx_State) GetCounters() *Macsec_Interfaces_Interface_ScsaTx_ScsaTx_State_Counters {
	if x != nil {
		return x.Counters
	}
	return nil
}

func (x *Macsec_Interfaces_Interface_ScsaTx_ScsaTx_State) GetSciTx() *ywrapper.StringValue {
	if x != nil {
		return x.SciTx
	}
	return nil
}

type Macsec_Interfaces_Interface_ScsaTx_ScsaTx_State_Counters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SaAuthOnly  *ywrapper.UintValue `protobuf:"bytes,175400570,opt,name=sa_auth_only,json=saAuthOnly,proto3" json:"sa_auth_only,omitempty"`
	SaEncrypted *ywrapper.UintValue `protobuf:"bytes,112816159,opt,name=sa_encrypted,json=saEncrypted,proto3" json:"sa_encrypted,omitempty"`
	ScAuthOnly  *ywrapper.UintValue `protobuf:"bytes,295256028,opt,name=sc_auth_only,json=scAuthOnly,proto3" json:"sc_auth_only,omitempty"`
	ScEncrypted *ywrapper.UintValue `protobuf:"bytes,223806037,opt,name=sc_encrypted,json=scEncrypted,proto3" json:"sc_encrypted,omitempty"`
}

func (x *Macsec_Interfaces_Interface_ScsaTx_ScsaTx_State_Counters) Reset() {
	*x = Macsec_Interfaces_Interface_ScsaTx_ScsaTx_State_Counters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_macsec_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Macsec_Interfaces_Interface_ScsaTx_ScsaTx_State_Counters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Macsec_Interfaces_Interface_ScsaTx_ScsaTx_State_Counters) ProtoMessage() {}

func (x *Macsec_Interfaces_Interface_ScsaTx_ScsaTx_State_Counters) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_macsec_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Macsec_Interfaces_Interface_ScsaTx_ScsaTx_State_Counters.ProtoReflect.Descriptor instead.
func (*Macsec_Interfaces_Interface_ScsaTx_ScsaTx_State_Counters) Descriptor() ([]byte, []int) {
	return file_openconfig_macsec_proto_rawDescGZIP(), []int{0, 0, 0, 3, 0, 0, 0}
}

func (x *Macsec_Interfaces_Interface_ScsaTx_ScsaTx_State_Counters) GetSaAuthOnly() *ywrapper.UintValue {
	if x != nil {
		return x.SaAuthOnly
	}
	return nil
}

func (x *Macsec_Interfaces_Interface_ScsaTx_ScsaTx_State_Counters) GetSaEncrypted() *ywrapper.UintValue {
	if x != nil {
		return x.SaEncrypted
	}
	return nil
}

func (x *Macsec_Interfaces_Interface_ScsaTx_ScsaTx_State_Counters) GetScAuthOnly() *ywrapper.UintValue {
	if x != nil {
		return x.ScAuthOnly
	}
	return nil
}

func (x *Macsec_Interfaces_Interface_ScsaTx_ScsaTx_State_Counters) GetScEncrypted() *ywrapper.UintValue {
	if x != nil {
		return x.ScEncrypted
	}
	return nil
}

type Macsec_Interfaces_Interface_State_Counters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RxBadtagPkts     *ywrapper.UintValue `protobuf:"bytes,16855021,opt,name=rx_badtag_pkts,json=rxBadtagPkts,proto3" json:"rx_badtag_pkts,omitempty"`
	RxNosciPkts      *ywrapper.UintValue `protobuf:"bytes,67098478,opt,name=rx_nosci_pkts,json=rxNosciPkts,proto3" json:"rx_nosci_pkts,omitempty"`
	RxUnknownsciPkts *ywrapper.UintValue `protobuf:"bytes,241402719,opt,name=rx_unknownsci_pkts,json=rxUnknownsciPkts,proto3" json:"rx_unknownsci_pkts,omitempty"`
	RxUntaggedPkts   *ywrapper.UintValue `protobuf:"bytes,228895179,opt,name=rx_untagged_pkts,json=rxUntaggedPkts,proto3" json:"rx_untagged_pkts,omitempty"`
	TxUntaggedPkts   *ywrapper.UintValue `protobuf:"bytes,86154229,opt,name=tx_untagged_pkts,json=txUntaggedPkts,proto3" json:"tx_untagged_pkts,omitempty"`
}

func (x *Macsec_Interfaces_Interface_State_Counters) Reset() {
	*x = Macsec_Interfaces_Interface_State_Counters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_macsec_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Macsec_Interfaces_Interface_State_Counters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Macsec_Interfaces_Interface_State_Counters) ProtoMessage() {}

func (x *Macsec_Interfaces_Interface_State_Counters) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_macsec_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Macsec_Interfaces_Interface_State_Counters.ProtoReflect.Descriptor instead.
func (*Macsec_Interfaces_Interface_State_Counters) Descriptor() ([]byte, []int) {
	return file_openconfig_macsec_proto_rawDescGZIP(), []int{0, 0, 0, 4, 0}
}

func (x *Macsec_Interfaces_Interface_State_Counters) GetRxBadtagPkts() *ywrapper.UintValue {
	if x != nil {
		return x.RxBadtagPkts
	}
	return nil
}

func (x *Macsec_Interfaces_Interface_State_Counters) GetRxNosciPkts() *ywrapper.UintValue {
	if x != nil {
		return x.RxNosciPkts
	}
	return nil
}

func (x *Macsec_Interfaces_Interface_State_Counters) GetRxUnknownsciPkts() *ywrapper.UintValue {
	if x != nil {
		return x.RxUnknownsciPkts
	}
	return nil
}

func (x *Macsec_Interfaces_Interface_State_Counters) GetRxUntaggedPkts() *ywrapper.UintValue {
	if x != nil {
		return x.RxUntaggedPkts
	}
	return nil
}

func (x *Macsec_Interfaces_Interface_State_Counters) GetTxUntaggedPkts() *ywrapper.UintValue {
	if x != nil {
		return x.TxUntaggedPkts
	}
	return nil
}

type Macsec_Mka_KeyChains struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyChain []*Macsec_Mka_KeyChains_KeyChainKey `protobuf:"bytes,158539213,rep,name=key_chain,json=keyChain,proto3" json:"key_chain,omitempty"`
}

func (x *Macsec_Mka_KeyChains) Reset() {
	*x = Macsec_Mka_KeyChains{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_macsec_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Macsec_Mka_KeyChains) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Macsec_Mka_KeyChains) ProtoMessage() {}

func (x *Macsec_Mka_KeyChains) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_macsec_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Macsec_Mka_KeyChains.ProtoReflect.Descriptor instead.
func (*Macsec_Mka_KeyChains) Descriptor() ([]byte, []int) {
	return file_openconfig_macsec_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *Macsec_Mka_KeyChains) GetKeyChain() []*Macsec_Mka_KeyChains_KeyChainKey {
	if x != nil {
		return x.KeyChain
	}
	return nil
}

type Macsec_Mka_Policies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Policy []*Macsec_Mka_Policies_PolicyKey `protobuf:"bytes,482600808,rep,name=policy,proto3" json:"policy,omitempty"`
}

func (x *Macsec_Mka_Policies) Reset() {
	*x = Macsec_Mka_Policies{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_macsec_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Macsec_Mka_Policies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Macsec_Mka_Policies) ProtoMessage() {}

func (x *Macsec_Mka_Policies) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_macsec_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Macsec_Mka_Policies.ProtoReflect.Descriptor instead.
func (*Macsec_Mka_Policies) Descriptor() ([]byte, []int) {
	return file_openconfig_macsec_proto_rawDescGZIP(), []int{0, 1, 1}
}

func (x *Macsec_Mka_Policies) GetPolicy() []*Macsec_Mka_Policies_PolicyKey {
	if x != nil {
		return x.Policy
	}
	return nil
}

type Macsec_Mka_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Counters *Macsec_Mka_State_Counters `protobuf:"bytes,335570744,opt,name=counters,proto3" json:"counters,omitempty"`
}

func (x *Macsec_Mka_State) Reset() {
	*x = Macsec_Mka_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_macsec_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Macsec_Mka_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Macsec_Mka_State) ProtoMessage() {}

func (x *Macsec_Mka_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_macsec_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Macsec_Mka_State.ProtoReflect.Descriptor instead.
func (*Macsec_Mka_State) Descriptor() ([]byte, []int) {
	return file_openconfig_macsec_proto_rawDescGZIP(), []int{0, 1, 2}
}

func (x *Macsec_Mka_State) GetCounters() *Macsec_Mka_State_Counters {
	if x != nil {
		return x.Counters
	}
	return nil
}

type Macsec_Mka_KeyChains_KeyChain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config  *Macsec_Mka_KeyChains_KeyChain_Config  `protobuf:"bytes,271639522,opt,name=config,proto3" json:"config,omitempty"`
	MkaKeys *Macsec_Mka_KeyChains_KeyChain_MkaKeys `protobuf:"bytes,531424150,opt,name=mka_keys,json=mkaKeys,proto3" json:"mka_keys,omitempty"`
	State   *Macsec_Mka_KeyChains_KeyChain_State   `protobuf:"bytes,364341023,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Macsec_Mka_KeyChains_KeyChain) Reset() {
	*x = Macsec_Mka_KeyChains_KeyChain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_macsec_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Macsec_Mka_KeyChains_KeyChain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Macsec_Mka_KeyChains_KeyChain) ProtoMessage() {}

func (x *Macsec_Mka_KeyChains_KeyChain) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_macsec_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Macsec_Mka_KeyChains_KeyChain.ProtoReflect.Descriptor instead.
func (*Macsec_Mka_KeyChains_KeyChain) Descriptor() ([]byte, []int) {
	return file_openconfig_macsec_proto_rawDescGZIP(), []int{0, 1, 0, 0}
}

func (x *Macsec_Mka_KeyChains_KeyChain) GetConfig() *Macsec_Mka_KeyChains_KeyChain_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Macsec_Mka_KeyChains_KeyChain) GetMkaKeys() *Macsec_Mka_KeyChains_KeyChain_MkaKeys {
	if x != nil {
		return x.MkaKeys
	}
	return nil
}

func (x *Macsec_Mka_KeyChains_KeyChain) GetState() *Macsec_Mka_KeyChains_KeyChain_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Macsec_Mka_KeyChains_KeyChainKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string                         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	KeyChain *Macsec_Mka_KeyChains_KeyChain `protobuf:"bytes,2,opt,name=key_chain,json=keyChain,proto3" json:"key_chain,omitempty"`
}

func (x *Macsec_Mka_KeyChains_KeyChainKey) Reset() {
	*x = Macsec_Mka_KeyChains_KeyChainKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_macsec_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Macsec_Mka_KeyChains_KeyChainKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Macsec_Mka_KeyChains_KeyChainKey) ProtoMessage() {}

func (x *Macsec_Mka_KeyChains_KeyChainKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_macsec_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Macsec_Mka_KeyChains_KeyChainKey.ProtoReflect.Descriptor instead.
func (*Macsec_Mka_KeyChains_KeyChainKey) Descriptor() ([]byte, []int) {
	return file_openconfig_macsec_proto_rawDescGZIP(), []int{0, 1, 0, 1}
}

func (x *Macsec_Mka_KeyChains_KeyChainKey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Macsec_Mka_KeyChains_KeyChainKey) GetKeyChain() *Macsec_Mka_KeyChains_KeyChain {
	if x != nil {
		return x.KeyChain
	}
	return nil
}

type Macsec_Mka_KeyChains_KeyChain_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *ywrapper.StringValue `protobuf:"bytes,268008528,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Macsec_Mka_KeyChains_KeyChain_Config) Reset() {
	*x = Macsec_Mka_KeyChains_KeyChain_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_macsec_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Macsec_Mka_KeyChains_KeyChain_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Macsec_Mka_KeyChains_KeyChain_Config) ProtoMessage() {}

func (x *Macsec_Mka_KeyChains_KeyChain_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_macsec_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Macsec_Mka_KeyChains_KeyChain_Config.ProtoReflect.Descriptor instead.
func (*Macsec_Mka_KeyChains_KeyChain_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_macsec_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0}
}

func (x *Macsec_Mka_KeyChains_KeyChain_Config) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

type Macsec_Mka_KeyChains_KeyChain_MkaKeys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MkaKey []*Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKeyKey `protobuf:"bytes,221123668,rep,name=mka_key,json=mkaKey,proto3" json:"mka_key,omitempty"`
}

func (x *Macsec_Mka_KeyChains_KeyChain_MkaKeys) Reset() {
	*x = Macsec_Mka_KeyChains_KeyChain_MkaKeys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_macsec_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Macsec_Mka_KeyChains_KeyChain_MkaKeys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Macsec_Mka_KeyChains_KeyChain_MkaKeys) ProtoMessage() {}

func (x *Macsec_Mka_KeyChains_KeyChain_MkaKeys) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_macsec_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Macsec_Mka_KeyChains_KeyChain_MkaKeys.ProtoReflect.Descriptor instead.
func (*Macsec_Mka_KeyChains_KeyChain_MkaKeys) Descriptor() ([]byte, []int) {
	return file_openconfig_macsec_proto_rawDescGZIP(), []int{0, 1, 0, 0, 1}
}

func (x *Macsec_Mka_KeyChains_KeyChain_MkaKeys) GetMkaKey() []*Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKeyKey {
	if x != nil {
		return x.MkaKey
	}
	return nil
}

type Macsec_Mka_KeyChains_KeyChain_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *ywrapper.StringValue `protobuf:"bytes,473081959,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Macsec_Mka_KeyChains_KeyChain_State) Reset() {
	*x = Macsec_Mka_KeyChains_KeyChain_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_macsec_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Macsec_Mka_KeyChains_KeyChain_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Macsec_Mka_KeyChains_KeyChain_State) ProtoMessage() {}

func (x *Macsec_Mka_KeyChains_KeyChain_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_macsec_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Macsec_Mka_KeyChains_KeyChain_State.ProtoReflect.Descriptor instead.
func (*Macsec_Mka_KeyChains_KeyChain_State) Descriptor() ([]byte, []int) {
	return file_openconfig_macsec_proto_rawDescGZIP(), []int{0, 1, 0, 0, 2}
}

func (x *Macsec_Mka_KeyChains_KeyChain_State) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

type Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config `protobuf:"bytes,204811865,opt,name=config,proto3" json:"config,omitempty"`
	State  *Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State  `protobuf:"bytes,373494574,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey) Reset() {
	*x = Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_macsec_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey) ProtoMessage() {}

func (x *Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_macsec_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey.ProtoReflect.Descriptor instead.
func (*Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey) Descriptor() ([]byte, []int) {
	return file_openconfig_macsec_proto_rawDescGZIP(), []int{0, 1, 0, 0, 1, 0}
}

func (x *Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey) GetConfig() *Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey) GetState() *Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKeyKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string                                        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	MkaKey *Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey `protobuf:"bytes,2,opt,name=mka_key,json=mkaKey,proto3" json:"mka_key,omitempty"`
}

func (x *Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKeyKey) Reset() {
	*x = Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKeyKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_macsec_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKeyKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKeyKey) ProtoMessage() {}

func (x *Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKeyKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_macsec_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKeyKey.ProtoReflect.Descriptor instead.
func (*Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKeyKey) Descriptor() ([]byte, []int) {
	return file_openconfig_macsec_proto_rawDescGZIP(), []int{0, 1, 0, 0, 1, 1}
}

func (x *Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKeyKey) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKeyKey) GetMkaKey() *Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey {
	if x != nil {
		return x.MkaKey
	}
	return nil
}

type Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CryptographicAlgorithm Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_CryptographicAlgorithm `protobuf:"varint,144928989,opt,name=cryptographic_algorithm,json=cryptographicAlgorithm,proto3,enum=openconfig.Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_CryptographicAlgorithm" json:"cryptographic_algorithm,omitempty"`
	// Types that are assignable to ExpirationDateTime:
	//	*Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_ExpirationDateTimeExpirationdatetime
	//	*Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_ExpirationDateTimeString
	ExpirationDateTime isMacsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_ExpirationDateTime `protobuf_oneof:"expiration_date_time"`
	Id                 *ywrapper.StringValue                                                    `protobuf:"bytes,70288779,opt,name=id,proto3" json:"id,omitempty"`
	KeyClearText       *ywrapper.StringValue                                                    `protobuf:"bytes,107052307,opt,name=key_clear_text,json=keyClearText,proto3" json:"key_clear_text,omitempty"`
	// Types that are assignable to ValidDateTime:
	//	*Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_ValidDateTimeValiddatetime
	//	*Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_ValidDateTimeString
	ValidDateTime isMacsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_ValidDateTime `protobuf_oneof:"valid_date_time"`
}

func (x *Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config) Reset() {
	*x = Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_macsec_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config) ProtoMessage() {}

func (x *Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_macsec_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config.ProtoReflect.Descriptor instead.
func (*Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_macsec_proto_rawDescGZIP(), []int{0, 1, 0, 0, 1, 0, 0}
}

func (x *Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config) GetCryptographicAlgorithm() Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_CryptographicAlgorithm {
	if x != nil {
		return x.CryptographicAlgorithm
	}
	return Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_CRYPTOGRAPHICALGORITHM_UNSET
}

func (m *Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config) GetExpirationDateTime() isMacsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_ExpirationDateTime {
	if m != nil {
		return m.ExpirationDateTime
	}
	return nil
}

func (x *Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config) GetExpirationDateTimeExpirationdatetime() Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_ExpirationDateTime {
	if x, ok := x.GetExpirationDateTime().(*Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_ExpirationDateTimeExpirationdatetime); ok {
		return x.ExpirationDateTimeExpirationdatetime
	}
	return Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_EXPIRATIONDATETIME_UNSET
}

func (x *Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config) GetExpirationDateTimeString() string {
	if x, ok := x.GetExpirationDateTime().(*Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_ExpirationDateTimeString); ok {
		return x.ExpirationDateTimeString
	}
	return ""
}

func (x *Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config) GetId() *ywrapper.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config) GetKeyClearText() *ywrapper.StringValue {
	if x != nil {
		return x.KeyClearText
	}
	return nil
}

func (m *Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config) GetValidDateTime() isMacsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_ValidDateTime {
	if m != nil {
		return m.ValidDateTime
	}
	return nil
}

func (x *Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config) GetValidDateTimeValiddatetime() Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_ValidDateTime {
	if x, ok := x.GetValidDateTime().(*Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_ValidDateTimeValiddatetime); ok {
		return x.ValidDateTimeValiddatetime
	}
	return Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_VALIDDATETIME_UNSET
}

func (x *Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config) GetValidDateTimeString() string {
	if x, ok := x.GetValidDateTime().(*Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_ValidDateTimeString); ok {
		return x.ValidDateTimeString
	}
	return ""
}

type isMacsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_ExpirationDateTime interface {
	isMacsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_ExpirationDateTime()
}

type Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_ExpirationDateTimeExpirationdatetime struct {
	ExpirationDateTimeExpirationdatetime Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_ExpirationDateTime `protobuf:"varint,134439181,opt,name=expiration_date_time_expirationdatetime,json=expirationDateTimeExpirationdatetime,proto3,enum=openconfig.Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_ExpirationDateTime,oneof"`
}

type Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_ExpirationDateTimeString struct {
	ExpirationDateTimeString string `protobuf:"bytes,515741602,opt,name=expiration_date_time_string,json=expirationDateTimeString,proto3,oneof"`
}

func (*Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_ExpirationDateTimeExpirationdatetime) isMacsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_ExpirationDateTime() {
}

func (*Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_ExpirationDateTimeString) isMacsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_ExpirationDateTime() {
}

type isMacsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_ValidDateTime interface {
	isMacsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_ValidDateTime()
}

type Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_ValidDateTimeValiddatetime struct {
	ValidDateTimeValiddatetime Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_ValidDateTime `protobuf:"varint,493366315,opt,name=valid_date_time_validdatetime,json=validDateTimeValiddatetime,proto3,enum=openconfig.Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_ValidDateTime,oneof"`
}

type Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_ValidDateTimeString struct {
	ValidDateTimeString string `protobuf:"bytes,260197521,opt,name=valid_date_time_string,json=validDateTimeString,proto3,oneof"`
}

func (*Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_ValidDateTimeValiddatetime) isMacsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_ValidDateTime() {
}

func (*Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_ValidDateTimeString) isMacsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_ValidDateTime() {
}

type Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CryptographicAlgorithm Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_CryptographicAlgorithm `protobuf:"varint,383495262,opt,name=cryptographic_algorithm,json=cryptographicAlgorithm,proto3,enum=openconfig.Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_CryptographicAlgorithm" json:"cryptographic_algorithm,omitempty"`
	// Types that are assignable to ExpirationDateTime:
	//	*Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_ExpirationDateTimeExpirationdatetime
	//	*Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_ExpirationDateTimeString
	ExpirationDateTime isMacsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_ExpirationDateTime `protobuf_oneof:"expiration_date_time"`
	Id                 *ywrapper.StringValue                                                   `protobuf:"bytes,67674150,opt,name=id,proto3" json:"id,omitempty"`
	KeyClearText       *ywrapper.StringValue                                                   `protobuf:"bytes,108442678,opt,name=key_clear_text,json=keyClearText,proto3" json:"key_clear_text,omitempty"`
	// Types that are assignable to ValidDateTime:
	//	*Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_ValidDateTimeValiddatetime
	//	*Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_ValidDateTimeString
	ValidDateTime isMacsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_ValidDateTime `protobuf_oneof:"valid_date_time"`
}

func (x *Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State) Reset() {
	*x = Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_macsec_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State) ProtoMessage() {}

func (x *Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_macsec_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State.ProtoReflect.Descriptor instead.
func (*Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State) Descriptor() ([]byte, []int) {
	return file_openconfig_macsec_proto_rawDescGZIP(), []int{0, 1, 0, 0, 1, 0, 1}
}

func (x *Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State) GetCryptographicAlgorithm() Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_CryptographicAlgorithm {
	if x != nil {
		return x.CryptographicAlgorithm
	}
	return Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_CRYPTOGRAPHICALGORITHM_UNSET
}

func (m *Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State) GetExpirationDateTime() isMacsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_ExpirationDateTime {
	if m != nil {
		return m.ExpirationDateTime
	}
	return nil
}

func (x *Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State) GetExpirationDateTimeExpirationdatetime() Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_ExpirationDateTime {
	if x, ok := x.GetExpirationDateTime().(*Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_ExpirationDateTimeExpirationdatetime); ok {
		return x.ExpirationDateTimeExpirationdatetime
	}
	return Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_EXPIRATIONDATETIME_UNSET
}

func (x *Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State) GetExpirationDateTimeString() string {
	if x, ok := x.GetExpirationDateTime().(*Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_ExpirationDateTimeString); ok {
		return x.ExpirationDateTimeString
	}
	return ""
}

func (x *Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State) GetId() *ywrapper.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State) GetKeyClearText() *ywrapper.StringValue {
	if x != nil {
		return x.KeyClearText
	}
	return nil
}

func (m *Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State) GetValidDateTime() isMacsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_ValidDateTime {
	if m != nil {
		return m.ValidDateTime
	}
	return nil
}

func (x *Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State) GetValidDateTimeValiddatetime() Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_ValidDateTime {
	if x, ok := x.GetValidDateTime().(*Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_ValidDateTimeValiddatetime); ok {
		return x.ValidDateTimeValiddatetime
	}
	return Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_VALIDDATETIME_UNSET
}

func (x *Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State) GetValidDateTimeString() string {
	if x, ok := x.GetValidDateTime().(*Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_ValidDateTimeString); ok {
		return x.ValidDateTimeString
	}
	return ""
}

type isMacsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_ExpirationDateTime interface {
	isMacsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_ExpirationDateTime()
}

type Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_ExpirationDateTimeExpirationdatetime struct {
	ExpirationDateTimeExpirationdatetime Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_ExpirationDateTime `protobuf:"varint,72534338,opt,name=expiration_date_time_expirationdatetime,json=expirationDateTimeExpirationdatetime,proto3,enum=openconfig.Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_ExpirationDateTime,oneof"`
}

type Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_ExpirationDateTimeString struct {
	ExpirationDateTimeString string `protobuf:"bytes,37860441,opt,name=expiration_date_time_string,json=expirationDateTimeString,proto3,oneof"`
}

func (*Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_ExpirationDateTimeExpirationdatetime) isMacsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_ExpirationDateTime() {
}

func (*Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_ExpirationDateTimeString) isMacsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_ExpirationDateTime() {
}

type isMacsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_ValidDateTime interface {
	isMacsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_ValidDateTime()
}

type Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_ValidDateTimeValiddatetime struct {
	ValidDateTimeValiddatetime Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_ValidDateTime `protobuf:"varint,141297124,opt,name=valid_date_time_validdatetime,json=validDateTimeValiddatetime,proto3,enum=openconfig.Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_ValidDateTime,oneof"`
}

type Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_ValidDateTimeString struct {
	ValidDateTimeString string `protobuf:"bytes,522960136,opt,name=valid_date_time_string,json=validDateTimeString,proto3,oneof"`
}

func (*Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_ValidDateTimeValiddatetime) isMacsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_ValidDateTime() {
}

func (*Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_ValidDateTimeString) isMacsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_ValidDateTime() {
}

type Macsec_Mka_Policies_Policy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Macsec_Mka_Policies_Policy_Config `protobuf:"bytes,9441229,opt,name=config,proto3" json:"config,omitempty"`
	State  *Macsec_Mka_Policies_Policy_State  `protobuf:"bytes,269580034,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Macsec_Mka_Policies_Policy) Reset() {
	*x = Macsec_Mka_Policies_Policy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_macsec_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Macsec_Mka_Policies_Policy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Macsec_Mka_Policies_Policy) ProtoMessage() {}

func (x *Macsec_Mka_Policies_Policy) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_macsec_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Macsec_Mka_Policies_Policy.ProtoReflect.Descriptor instead.
func (*Macsec_Mka_Policies_Policy) Descriptor() ([]byte, []int) {
	return file_openconfig_macsec_proto_rawDescGZIP(), []int{0, 1, 1, 0}
}

func (x *Macsec_Mka_Policies_Policy) GetConfig() *Macsec_Mka_Policies_Policy_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Macsec_Mka_Policies_Policy) GetState() *Macsec_Mka_Policies_Policy_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Macsec_Mka_Policies_PolicyKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string                      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Policy *Macsec_Mka_Policies_Policy `protobuf:"bytes,2,opt,name=policy,proto3" json:"policy,omitempty"`
}

func (x *Macsec_Mka_Policies_PolicyKey) Reset() {
	*x = Macsec_Mka_Policies_PolicyKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_macsec_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Macsec_Mka_Policies_PolicyKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Macsec_Mka_Policies_PolicyKey) ProtoMessage() {}

func (x *Macsec_Mka_Policies_PolicyKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_macsec_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Macsec_Mka_Policies_PolicyKey.ProtoReflect.Descriptor instead.
func (*Macsec_Mka_Policies_PolicyKey) Descriptor() ([]byte, []int) {
	return file_openconfig_macsec_proto_rawDescGZIP(), []int{0, 1, 1, 1}
}

func (x *Macsec_Mka_Policies_PolicyKey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Macsec_Mka_Policies_PolicyKey) GetPolicy() *Macsec_Mka_Policies_Policy {
	if x != nil {
		return x.Policy
	}
	return nil
}

type Macsec_Mka_Policies_Policy_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfidentialityOffset  OpenconfigMacsecConfidentialityOffset `protobuf:"varint,251722058,opt,name=confidentiality_offset,json=confidentialityOffset,proto3,enum=openconfig.OpenconfigMacsecConfidentialityOffset" json:"confidentiality_offset,omitempty"`
	DelayProtection        *ywrapper.BoolValue                   `protobuf:"bytes,304598287,opt,name=delay_protection,json=delayProtection,proto3" json:"delay_protection,omitempty"`
	IncludeIcvIndicator    *ywrapper.BoolValue                   `protobuf:"bytes,173080277,opt,name=include_icv_indicator,json=includeIcvIndicator,proto3" json:"include_icv_indicator,omitempty"`
	KeyServerPriority      *ywrapper.UintValue                   `protobuf:"bytes,46686620,opt,name=key_server_priority,json=keyServerPriority,proto3" json:"key_server_priority,omitempty"`
	MacsecCipherSuite      []OpenconfigMacsecMacsecCipherSuite   `protobuf:"varint,448396587,rep,packed,name=macsec_cipher_suite,json=macsecCipherSuite,proto3,enum=openconfig.OpenconfigMacsecMacsecCipherSuite" json:"macsec_cipher_suite,omitempty"`
	Name                   *ywrapper.StringValue                 `protobuf:"bytes,260858953,opt,name=name,proto3" json:"name,omitempty"`
	SakRekeyInterval       *ywrapper.UintValue                   `protobuf:"bytes,475287918,opt,name=sak_rekey_interval,json=sakRekeyInterval,proto3" json:"sak_rekey_interval,omitempty"`
	SakRekeyOnLivePeerLoss *ywrapper.BoolValue                   `protobuf:"bytes,192433030,opt,name=sak_rekey_on_live_peer_loss,json=sakRekeyOnLivePeerLoss,proto3" json:"sak_rekey_on_live_peer_loss,omitempty"`
	UseUpdatedEthHeader    *ywrapper.BoolValue                   `protobuf:"bytes,17497817,opt,name=use_updated_eth_header,json=useUpdatedEthHeader,proto3" json:"use_updated_eth_header,omitempty"`
}

func (x *Macsec_Mka_Policies_Policy_Config) Reset() {
	*x = Macsec_Mka_Policies_Policy_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_macsec_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Macsec_Mka_Policies_Policy_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Macsec_Mka_Policies_Policy_Config) ProtoMessage() {}

func (x *Macsec_Mka_Policies_Policy_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_macsec_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Macsec_Mka_Policies_Policy_Config.ProtoReflect.Descriptor instead.
func (*Macsec_Mka_Policies_Policy_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_macsec_proto_rawDescGZIP(), []int{0, 1, 1, 0, 0}
}

func (x *Macsec_Mka_Policies_Policy_Config) GetConfidentialityOffset() OpenconfigMacsecConfidentialityOffset {
	if x != nil {
		return x.ConfidentialityOffset
	}
	return OpenconfigMacsecConfidentialityOffset_OPENCONFIGMACSECCONFIDENTIALITYOFFSET_0_BYTES
}

func (x *Macsec_Mka_Policies_Policy_Config) GetDelayProtection() *ywrapper.BoolValue {
	if x != nil {
		return x.DelayProtection
	}
	return nil
}

func (x *Macsec_Mka_Policies_Policy_Config) GetIncludeIcvIndicator() *ywrapper.BoolValue {
	if x != nil {
		return x.IncludeIcvIndicator
	}
	return nil
}

func (x *Macsec_Mka_Policies_Policy_Config) GetKeyServerPriority() *ywrapper.UintValue {
	if x != nil {
		return x.KeyServerPriority
	}
	return nil
}

func (x *Macsec_Mka_Policies_Policy_Config) GetMacsecCipherSuite() []OpenconfigMacsecMacsecCipherSuite {
	if x != nil {
		return x.MacsecCipherSuite
	}
	return nil
}

func (x *Macsec_Mka_Policies_Policy_Config) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Macsec_Mka_Policies_Policy_Config) GetSakRekeyInterval() *ywrapper.UintValue {
	if x != nil {
		return x.SakRekeyInterval
	}
	return nil
}

func (x *Macsec_Mka_Policies_Policy_Config) GetSakRekeyOnLivePeerLoss() *ywrapper.BoolValue {
	if x != nil {
		return x.SakRekeyOnLivePeerLoss
	}
	return nil
}

func (x *Macsec_Mka_Policies_Policy_Config) GetUseUpdatedEthHeader() *ywrapper.BoolValue {
	if x != nil {
		return x.UseUpdatedEthHeader
	}
	return nil
}

type Macsec_Mka_Policies_Policy_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfidentialityOffset  OpenconfigMacsecConfidentialityOffset `protobuf:"varint,530587227,opt,name=confidentiality_offset,json=confidentialityOffset,proto3,enum=openconfig.OpenconfigMacsecConfidentialityOffset" json:"confidentiality_offset,omitempty"`
	DelayProtection        *ywrapper.BoolValue                   `protobuf:"bytes,157429918,opt,name=delay_protection,json=delayProtection,proto3" json:"delay_protection,omitempty"`
	IncludeIcvIndicator    *ywrapper.BoolValue                   `protobuf:"bytes,126604598,opt,name=include_icv_indicator,json=includeIcvIndicator,proto3" json:"include_icv_indicator,omitempty"`
	KeyServerPriority      *ywrapper.UintValue                   `protobuf:"bytes,300946819,opt,name=key_server_priority,json=keyServerPriority,proto3" json:"key_server_priority,omitempty"`
	MacsecCipherSuite      []OpenconfigMacsecMacsecCipherSuite   `protobuf:"varint,185918540,rep,packed,name=macsec_cipher_suite,json=macsecCipherSuite,proto3,enum=openconfig.OpenconfigMacsecMacsecCipherSuite" json:"macsec_cipher_suite,omitempty"`
	Name                   *ywrapper.StringValue                 `protobuf:"bytes,166951792,opt,name=name,proto3" json:"name,omitempty"`
	SakRekeyInterval       *ywrapper.UintValue                   `protobuf:"bytes,449271883,opt,name=sak_rekey_interval,json=sakRekeyInterval,proto3" json:"sak_rekey_interval,omitempty"`
	SakRekeyOnLivePeerLoss *ywrapper.BoolValue                   `protobuf:"bytes,174129701,opt,name=sak_rekey_on_live_peer_loss,json=sakRekeyOnLivePeerLoss,proto3" json:"sak_rekey_on_live_peer_loss,omitempty"`
	UseUpdatedEthHeader    *ywrapper.BoolValue                   `protobuf:"bytes,520944144,opt,name=use_updated_eth_header,json=useUpdatedEthHeader,proto3" json:"use_updated_eth_header,omitempty"`
}

func (x *Macsec_Mka_Policies_Policy_State) Reset() {
	*x = Macsec_Mka_Policies_Policy_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_macsec_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Macsec_Mka_Policies_Policy_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Macsec_Mka_Policies_Policy_State) ProtoMessage() {}

func (x *Macsec_Mka_Policies_Policy_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_macsec_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Macsec_Mka_Policies_Policy_State.ProtoReflect.Descriptor instead.
func (*Macsec_Mka_Policies_Policy_State) Descriptor() ([]byte, []int) {
	return file_openconfig_macsec_proto_rawDescGZIP(), []int{0, 1, 1, 0, 1}
}

func (x *Macsec_Mka_Policies_Policy_State) GetConfidentialityOffset() OpenconfigMacsecConfidentialityOffset {
	if x != nil {
		return x.ConfidentialityOffset
	}
	return OpenconfigMacsecConfidentialityOffset_OPENCONFIGMACSECCONFIDENTIALITYOFFSET_0_BYTES
}

func (x *Macsec_Mka_Policies_Policy_State) GetDelayProtection() *ywrapper.BoolValue {
	if x != nil {
		return x.DelayProtection
	}
	return nil
}

func (x *Macsec_Mka_Policies_Policy_State) GetIncludeIcvIndicator() *ywrapper.BoolValue {
	if x != nil {
		return x.IncludeIcvIndicator
	}
	return nil
}

func (x *Macsec_Mka_Policies_Policy_State) GetKeyServerPriority() *ywrapper.UintValue {
	if x != nil {
		return x.KeyServerPriority
	}
	return nil
}

func (x *Macsec_Mka_Policies_Policy_State) GetMacsecCipherSuite() []OpenconfigMacsecMacsecCipherSuite {
	if x != nil {
		return x.MacsecCipherSuite
	}
	return nil
}

func (x *Macsec_Mka_Policies_Policy_State) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Macsec_Mka_Policies_Policy_State) GetSakRekeyInterval() *ywrapper.UintValue {
	if x != nil {
		return x.SakRekeyInterval
	}
	return nil
}

func (x *Macsec_Mka_Policies_Policy_State) GetSakRekeyOnLivePeerLoss() *ywrapper.BoolValue {
	if x != nil {
		return x.SakRekeyOnLivePeerLoss
	}
	return nil
}

func (x *Macsec_Mka_Policies_Policy_State) GetUseUpdatedEthHeader() *ywrapper.BoolValue {
	if x != nil {
		return x.UseUpdatedEthHeader
	}
	return nil
}

type Macsec_Mka_State_Counters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InMkpduBadPeerErrors         *ywrapper.UintValue `protobuf:"bytes,175566877,opt,name=in_mkpdu_bad_peer_errors,json=inMkpduBadPeerErrors,proto3" json:"in_mkpdu_bad_peer_errors,omitempty"`
	InMkpduIcvVerificationErrors *ywrapper.UintValue `protobuf:"bytes,62490773,opt,name=in_mkpdu_icv_verification_errors,json=inMkpduIcvVerificationErrors,proto3" json:"in_mkpdu_icv_verification_errors,omitempty"`
	InMkpduPeerListErrors        *ywrapper.UintValue `protobuf:"bytes,11823846,opt,name=in_mkpdu_peer_list_errors,json=inMkpduPeerListErrors,proto3" json:"in_mkpdu_peer_list_errors,omitempty"`
	InMkpduValidationErrors      *ywrapper.UintValue `protobuf:"bytes,203881168,opt,name=in_mkpdu_validation_errors,json=inMkpduValidationErrors,proto3" json:"in_mkpdu_validation_errors,omitempty"`
	OutMkpduErrors               *ywrapper.UintValue `protobuf:"bytes,510239285,opt,name=out_mkpdu_errors,json=outMkpduErrors,proto3" json:"out_mkpdu_errors,omitempty"`
	SakCipherMismatchErrors      *ywrapper.UintValue `protobuf:"bytes,303744741,opt,name=sak_cipher_mismatch_errors,json=sakCipherMismatchErrors,proto3" json:"sak_cipher_mismatch_errors,omitempty"`
	SakDecryptionErrors          *ywrapper.UintValue `protobuf:"bytes,94317900,opt,name=sak_decryption_errors,json=sakDecryptionErrors,proto3" json:"sak_decryption_errors,omitempty"`
	SakEncryptionErrors          *ywrapper.UintValue `protobuf:"bytes,137031460,opt,name=sak_encryption_errors,json=sakEncryptionErrors,proto3" json:"sak_encryption_errors,omitempty"`
	SakGenerationErrors          *ywrapper.UintValue `protobuf:"bytes,148125543,opt,name=sak_generation_errors,json=sakGenerationErrors,proto3" json:"sak_generation_errors,omitempty"`
	SakHashErrors                *ywrapper.UintValue `protobuf:"bytes,291701429,opt,name=sak_hash_errors,json=sakHashErrors,proto3" json:"sak_hash_errors,omitempty"`
}

func (x *Macsec_Mka_State_Counters) Reset() {
	*x = Macsec_Mka_State_Counters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_macsec_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Macsec_Mka_State_Counters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Macsec_Mka_State_Counters) ProtoMessage() {}

func (x *Macsec_Mka_State_Counters) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_macsec_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Macsec_Mka_State_Counters.ProtoReflect.Descriptor instead.
func (*Macsec_Mka_State_Counters) Descriptor() ([]byte, []int) {
	return file_openconfig_macsec_proto_rawDescGZIP(), []int{0, 1, 2, 0}
}

func (x *Macsec_Mka_State_Counters) GetInMkpduBadPeerErrors() *ywrapper.UintValue {
	if x != nil {
		return x.InMkpduBadPeerErrors
	}
	return nil
}

func (x *Macsec_Mka_State_Counters) GetInMkpduIcvVerificationErrors() *ywrapper.UintValue {
	if x != nil {
		return x.InMkpduIcvVerificationErrors
	}
	return nil
}

func (x *Macsec_Mka_State_Counters) GetInMkpduPeerListErrors() *ywrapper.UintValue {
	if x != nil {
		return x.InMkpduPeerListErrors
	}
	return nil
}

func (x *Macsec_Mka_State_Counters) GetInMkpduValidationErrors() *ywrapper.UintValue {
	if x != nil {
		return x.InMkpduValidationErrors
	}
	return nil
}

func (x *Macsec_Mka_State_Counters) GetOutMkpduErrors() *ywrapper.UintValue {
	if x != nil {
		return x.OutMkpduErrors
	}
	return nil
}

func (x *Macsec_Mka_State_Counters) GetSakCipherMismatchErrors() *ywrapper.UintValue {
	if x != nil {
		return x.SakCipherMismatchErrors
	}
	return nil
}

func (x *Macsec_Mka_State_Counters) GetSakDecryptionErrors() *ywrapper.UintValue {
	if x != nil {
		return x.SakDecryptionErrors
	}
	return nil
}

func (x *Macsec_Mka_State_Counters) GetSakEncryptionErrors() *ywrapper.UintValue {
	if x != nil {
		return x.SakEncryptionErrors
	}
	return nil
}

func (x *Macsec_Mka_State_Counters) GetSakGenerationErrors() *ywrapper.UintValue {
	if x != nil {
		return x.SakGenerationErrors
	}
	return nil
}

func (x *Macsec_Mka_State_Counters) GetSakHashErrors() *ywrapper.UintValue {
	if x != nil {
		return x.SakHashErrors
	}
	return nil
}

var File_openconfig_macsec_proto protoreflect.FileDescriptor

var file_openconfig_macsec_proto_rawDesc = []byte{
	0x0a, 0x17, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6d, 0x61, 0x63,
	0x73, 0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x0e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x79, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x16, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8f, 0x7a, 0x0a, 0x06, 0x4d, 0x61,
	0x63, 0x73, 0x65, 0x63, 0x12, 0x57, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x18, 0x95, 0xfe, 0xf7, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x42, 0x15, 0x82, 0x41, 0x12, 0x2f,
	0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x3c, 0x0a,
	0x03, 0x6d, 0x6b, 0x61, 0x18, 0xfe, 0xd7, 0xaa, 0x86, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x61, 0x63, 0x73,
	0x65, 0x63, 0x2e, 0x4d, 0x6b, 0x61, 0x42, 0x0e, 0x82, 0x41, 0x0b, 0x2f, 0x6d, 0x61, 0x63, 0x73,
	0x65, 0x63, 0x2f, 0x6d, 0x6b, 0x61, 0x52, 0x03, 0x6d, 0x6b, 0x61, 0x1a, 0xe6, 0x32, 0x0a, 0x0a,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x6c, 0x0a, 0x09, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0xf1, 0xc2, 0xe3, 0x12, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x61,
	0x63, 0x73, 0x65, 0x63, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x42, 0x1f, 0x82, 0x41,
	0x1c, 0x2f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x09, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x1a, 0xd7, 0x30, 0x0a, 0x09, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x71, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x96, 0xd7, 0xbc, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x26, 0x82, 0x41, 0x23, 0x2f, 0x6d,
	0x61, 0x63, 0x73, 0x65, 0x63, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x65, 0x0a, 0x03, 0x6d, 0x6b, 0x61,
	0x18, 0xe1, 0xe9, 0xba, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x4d, 0x6b, 0x61, 0x42, 0x23, 0x82, 0x41, 0x20, 0x2f, 0x6d, 0x61, 0x63, 0x73,
	0x65, 0x63, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6d, 0x6b, 0x61, 0x52, 0x03, 0x6d, 0x6b, 0x61,
	0x12, 0x74, 0x0a, 0x07, 0x73, 0x63, 0x73, 0x61, 0x5f, 0x72, 0x78, 0x18, 0xc1, 0x94, 0x9e, 0xdb,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53,
	0x63, 0x73, 0x61, 0x52, 0x78, 0x42, 0x27, 0x82, 0x41, 0x24, 0x2f, 0x6d, 0x61, 0x63, 0x73, 0x65,
	0x63, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x63, 0x73, 0x61, 0x2d, 0x72, 0x78, 0x52, 0x06,
	0x73, 0x63, 0x73, 0x61, 0x52, 0x78, 0x12, 0x74, 0x0a, 0x07, 0x73, 0x63, 0x73, 0x61, 0x5f, 0x74,
	0x78, 0x18, 0xa7, 0x9a, 0x9e, 0xeb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x63, 0x73, 0x61, 0x54, 0x78, 0x42, 0x27, 0x82, 0x41, 0x24,
	0x2f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x63, 0x73,
	0x61, 0x2d, 0x74, 0x78, 0x52, 0x06, 0x73, 0x63, 0x73, 0x61, 0x54, 0x78, 0x12, 0x6d, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xc3, 0xc8, 0x9b, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x61, 0x63, 0x73,
	0x65, 0x63, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x25, 0x82,
	0x41, 0x22, 0x2f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xc4, 0x02, 0x0a, 0x06,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x5e, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0xa0, 0x8a, 0x98, 0xf9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x2d, 0x82, 0x41, 0x2a, 0x2f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x06,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x5a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xfc,
	0x80, 0xd7, 0xe8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x2b, 0x82, 0x41, 0x28, 0x2f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x7e, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xb8, 0xff, 0xf0, 0xc4, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x38, 0x82, 0x41, 0x35, 0x2f, 0x6d, 0x61, 0x63, 0x73,
	0x65, 0x63, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x72,
	0x65, 0x70, 0x6c, 0x61, 0x79, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0xbf, 0x0c, 0x0a, 0x03, 0x4d, 0x6b, 0x61, 0x12, 0x7a, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0xe6, 0xfb, 0xe8, 0xd1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x61, 0x63, 0x73,
	0x65, 0x63, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4d, 0x6b, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x2a, 0x82, 0x41, 0x27, 0x2f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x6d, 0x6b, 0x61, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x75, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0xd3, 0xc8, 0xac, 0x6e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x4d, 0x6b, 0x61, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x29, 0x82, 0x41, 0x26,
	0x2f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6d, 0x6b, 0x61,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xe6, 0x01,
	0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6c, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0xde, 0xe5, 0xe0, 0xdf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x34, 0x82, 0x41, 0x31, 0x2f, 0x6d, 0x61, 0x63, 0x73,
	0x65, 0x63, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6d, 0x6b, 0x61, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x6b, 0x65, 0x79, 0x2d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x08, 0x6b, 0x65,
	0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x6e, 0x0a, 0x0a, 0x6d, 0x6b, 0x61, 0x5f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x18, 0xc5, 0xfc, 0xbc, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6d, 0x6b, 0x61, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x6d, 0x6b, 0x61, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x09, 0x6d, 0x6b, 0x61,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x1a, 0xdb, 0x08, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x8e, 0x01, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0xe1, 0xd9,
	0xaa, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x4d, 0x6b, 0x61, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x42, 0x32, 0x82, 0x41, 0x2f, 0x2f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x6d, 0x6b, 0x61, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x6b, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0xe7,
	0xcf, 0xce, 0x99, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x33, 0x82, 0x41, 0x30, 0x2f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x6d, 0x6b, 0x61, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6b, 0x65, 0x79, 0x2d, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x6d,
	0x0a, 0x0a, 0x6d, 0x6b, 0x61, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0xa2, 0x85, 0x84,
	0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x34, 0x82, 0x41,
	0x31, 0x2f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6d, 0x6b,
	0x61, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x6b, 0x61, 0x2d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x09, 0x6d, 0x6b, 0x61, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x1a, 0xe4, 0x05,
	0x0a, 0x08, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x7a, 0x0a, 0x0c, 0x69, 0x6e,
	0x5f, 0x63, 0x61, 0x6b, 0x5f, 0x6d, 0x6b, 0x70, 0x64, 0x75, 0x18, 0xf7, 0x84, 0xcd, 0xfa, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x6d,
	0x61, 0x63, 0x73, 0x65, 0x63, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6d, 0x6b, 0x61, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e,
	0x2d, 0x63, 0x61, 0x6b, 0x2d, 0x6d, 0x6b, 0x70, 0x64, 0x75, 0x52, 0x0a, 0x69, 0x6e, 0x43, 0x61,
	0x6b, 0x4d, 0x6b, 0x70, 0x64, 0x75, 0x12, 0x6f, 0x0a, 0x08, 0x69, 0x6e, 0x5f, 0x6d, 0x6b, 0x70,
	0x64, 0x75, 0x18, 0xd3, 0xa0, 0xb7, 0xcc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x3b, 0x82, 0x41, 0x38, 0x2f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x6d, 0x6b, 0x61, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x6d, 0x6b, 0x70, 0x64, 0x75, 0x52, 0x07,
	0x69, 0x6e, 0x4d, 0x6b, 0x70, 0x64, 0x75, 0x12, 0x7a, 0x0a, 0x0c, 0x69, 0x6e, 0x5f, 0x73, 0x61,
	0x6b, 0x5f, 0x6d, 0x6b, 0x70, 0x64, 0x75, 0x18, 0xe7, 0xa9, 0x94, 0xb2, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x6d, 0x61, 0x63, 0x73,
	0x65, 0x63, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6d, 0x6b, 0x61, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x73, 0x61,
	0x6b, 0x2d, 0x6d, 0x6b, 0x70, 0x64, 0x75, 0x52, 0x0a, 0x69, 0x6e, 0x53, 0x61, 0x6b, 0x4d, 0x6b,
	0x70, 0x64, 0x75, 0x12, 0x7d, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x61, 0x6b, 0x5f, 0x6d,
	0x6b, 0x70, 0x64, 0x75, 0x18, 0x92, 0xf7, 0xb7, 0xcc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x6d, 0x6b, 0x61, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x63, 0x61, 0x6b, 0x2d,
	0x6d, 0x6b, 0x70, 0x64, 0x75, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x43, 0x61, 0x6b, 0x4d, 0x6b, 0x70,
	0x64, 0x75, 0x12, 0x72, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x6b, 0x70, 0x64, 0x75, 0x18,
	0xc6, 0xab, 0xb0, 0x88, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3c,
	0x82, 0x41, 0x39, 0x2f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x6d, 0x6b, 0x61, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x6d, 0x6b, 0x70, 0x64, 0x75, 0x52, 0x08, 0x6f, 0x75,
	0x74, 0x4d, 0x6b, 0x70, 0x64, 0x75, 0x12, 0x7c, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x61,
	0x6b, 0x5f, 0x6d, 0x6b, 0x70, 0x64, 0x75, 0x18, 0xa2, 0xc8, 0xcd, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x6d, 0x61, 0x63, 0x73, 0x65,
	0x63, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6d, 0x6b, 0x61, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x73, 0x61,
	0x6b, 0x2d, 0x6d, 0x6b, 0x70, 0x64, 0x75, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x53, 0x61, 0x6b, 0x4d,
	0x6b, 0x70, 0x64, 0x75, 0x1a, 0x81, 0x0a, 0x0a, 0x06, 0x53, 0x63, 0x73, 0x61, 0x52, 0x78, 0x12,
	0x85, 0x01, 0x0a, 0x07, 0x73, 0x63, 0x73, 0x61, 0x5f, 0x72, 0x78, 0x18, 0xd1, 0x95, 0xb6, 0x24,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x63,
	0x73, 0x61, 0x52, 0x78, 0x2e, 0x53, 0x63, 0x73, 0x61, 0x52, 0x78, 0x4b, 0x65, 0x79, 0x42, 0x2f,
	0x82, 0x41, 0x2c, 0x2f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x73, 0x63, 0x73, 0x61, 0x2d, 0x72, 0x78, 0x2f, 0x73, 0x63, 0x73, 0x61, 0x2d, 0x72, 0x78, 0x52,
	0x06, 0x73, 0x63, 0x73, 0x61, 0x52, 0x78, 0x1a, 0xc1, 0x07, 0x0a, 0x06, 0x53, 0x63, 0x73, 0x61,
	0x52, 0x78, 0x12, 0x8b, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xa3, 0xf6, 0xd9,
	0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53,
	0x63, 0x73, 0x61, 0x52, 0x78, 0x2e, 0x53, 0x63, 0x73, 0x61, 0x52, 0x78, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x73, 0x63, 0x73, 0x61, 0x2d, 0x72, 0x78, 0x2f, 0x73, 0x63, 0x73, 0x61,
	0x2d, 0x72, 0x78, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x1a, 0xa8, 0x06, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xa3, 0x01, 0x0a, 0x08, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x91, 0x82, 0xc2, 0x3c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x44, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x61,
	0x63, 0x73, 0x65, 0x63, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x63, 0x73, 0x61, 0x52, 0x78,
	0x2e, 0x53, 0x63, 0x73, 0x61, 0x52, 0x78, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x6d, 0x61, 0x63, 0x73,
	0x65, 0x63, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x63, 0x73, 0x61, 0x2d, 0x72, 0x78, 0x2f,
	0x73, 0x63, 0x73, 0x61, 0x2d, 0x72, 0x78, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x6d, 0x0a, 0x06, 0x73, 0x63, 0x69, 0x5f, 0x72, 0x78, 0x18, 0xd8, 0x9c, 0xd8, 0x65, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3c, 0x82, 0x41, 0x39, 0x2f,
	0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x63, 0x73, 0x61,
	0x2d, 0x72, 0x78, 0x2f, 0x73, 0x63, 0x73, 0x61, 0x2d, 0x72, 0x78, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x73, 0x63, 0x69, 0x2d, 0x72, 0x78, 0x52, 0x05, 0x73, 0x63, 0x69, 0x52, 0x78, 0x1a,
	0x89, 0x04, 0x0a, 0x08, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x80, 0x01, 0x0a,
	0x0a, 0x73, 0x61, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0xe6, 0xc9, 0xbf, 0x6c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x49, 0x82, 0x41, 0x46, 0x2f, 0x6d,
	0x61, 0x63, 0x73, 0x65, 0x63, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x63, 0x73, 0x61, 0x2d,
	0x72, 0x78, 0x2f, 0x73, 0x63, 0x73, 0x61, 0x2d, 0x72, 0x78, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x61, 0x2d, 0x69, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x52, 0x09, 0x73, 0x61, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12,
	0x7a, 0x0a, 0x08, 0x73, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0xa5, 0xcb, 0xec, 0x1d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x47, 0x82, 0x41, 0x44, 0x2f, 0x6d,
	0x61, 0x63, 0x73, 0x65, 0x63, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x63, 0x73, 0x61, 0x2d,
	0x72, 0x78, 0x2f, 0x73, 0x63, 0x73, 0x61, 0x2d, 0x72, 0x78, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x61, 0x2d, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x52, 0x07, 0x73, 0x61, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x81, 0x01, 0x0a, 0x0a,
	0x73, 0x63, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0xa8, 0xf0, 0xb3, 0xe7, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x49, 0x82, 0x41, 0x46, 0x2f, 0x6d,
	0x61, 0x63, 0x73, 0x65, 0x63, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x63, 0x73, 0x61, 0x2d,
	0x72, 0x78, 0x2f, 0x73, 0x63, 0x73, 0x61, 0x2d, 0x72, 0x78, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x2d, 0x69, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x52, 0x09, 0x73, 0x63, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12,
	0x7a, 0x0a, 0x08, 0x73, 0x63, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x83, 0x99, 0xa6, 0x1a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x47, 0x82, 0x41, 0x44, 0x2f, 0x6d,
	0x61, 0x63, 0x73, 0x65, 0x63, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x63, 0x73, 0x61, 0x2d,
	0x72, 0x78, 0x2f, 0x73, 0x63, 0x73, 0x61, 0x2d, 0x72, 0x78, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x2d, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x52, 0x07, 0x73, 0x63, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x1a, 0xaa, 0x01, 0x0a, 0x09,
	0x53, 0x63, 0x73, 0x61, 0x52, 0x78, 0x4b, 0x65, 0x79, 0x12, 0x4d, 0x0a, 0x06, 0x73, 0x63, 0x69,
	0x5f, 0x72, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x6d,
	0x61, 0x63, 0x73, 0x65, 0x63, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x63, 0x73, 0x61, 0x2d,
	0x72, 0x78, 0x2f, 0x73, 0x63, 0x73, 0x61, 0x2d, 0x72, 0x78, 0x2f, 0x73, 0x63, 0x69, 0x2d, 0x72,
	0x78, 0x52, 0x05, 0x73, 0x63, 0x69, 0x52, 0x78, 0x12, 0x4e, 0x0a, 0x07, 0x73, 0x63, 0x73, 0x61,
	0x5f, 0x72, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x53, 0x63, 0x73, 0x61, 0x52, 0x78, 0x2e, 0x53, 0x63, 0x73, 0x61, 0x52, 0x78,
	0x52, 0x06, 0x73, 0x63, 0x73, 0x61, 0x52, 0x78, 0x1a, 0xa5, 0x0a, 0x0a, 0x06, 0x53, 0x63, 0x73,
	0x61, 0x54, 0x78, 0x12, 0x85, 0x01, 0x0a, 0x07, 0x73, 0x63, 0x73, 0x61, 0x5f, 0x74, 0x78, 0x18,
	0x85, 0xce, 0x80, 0x5b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x53, 0x63, 0x73, 0x61, 0x54, 0x78, 0x2e, 0x53, 0x63, 0x73, 0x61, 0x54, 0x78, 0x4b,
	0x65, 0x79, 0x42, 0x2f, 0x82, 0x41, 0x2c, 0x2f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x73, 0x63, 0x73, 0x61, 0x2d, 0x74, 0x78, 0x2f, 0x73, 0x63, 0x73, 0x61,
	0x2d, 0x74, 0x78, 0x52, 0x06, 0x73, 0x63, 0x73, 0x61, 0x54, 0x78, 0x1a, 0xe5, 0x07, 0x0a, 0x06,
	0x53, 0x63, 0x73, 0x61, 0x54, 0x78, 0x12, 0x8b, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0xe7, 0xc7, 0x9e, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x53, 0x63, 0x73, 0x61, 0x54, 0x78, 0x2e, 0x53, 0x63, 0x73, 0x61, 0x54, 0x78,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x6d, 0x61, 0x63, 0x73,
	0x65, 0x63, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x63, 0x73, 0x61, 0x2d, 0x74, 0x78, 0x2f,
	0x73, 0x63, 0x73, 0x61, 0x2d, 0x74, 0x78, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x1a, 0xcc, 0x06, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xa3,
	0x01, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x9d, 0xcb, 0xe1, 0x4c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x63,
	0x73, 0x61, 0x54, 0x78, 0x2e, 0x53, 0x63, 0x73, 0x61, 0x54, 0x78, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f,
	0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x63, 0x73, 0x61,
	0x2d, 0x74, 0x78, 0x2f, 0x73, 0x63, 0x73, 0x61, 0x2d, 0x74, 0x78, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x6d, 0x0a, 0x06, 0x73, 0x63, 0x69, 0x5f, 0x74, 0x78, 0x18, 0xce,
	0xc4, 0xb5, 0x76, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3c,
	0x82, 0x41, 0x39, 0x2f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x73, 0x63, 0x73, 0x61, 0x2d, 0x74, 0x78, 0x2f, 0x73, 0x63, 0x73, 0x61, 0x2d, 0x74, 0x78, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x63, 0x69, 0x2d, 0x74, 0x78, 0x52, 0x05, 0x73, 0x63,
	0x69, 0x54, 0x78, 0x1a, 0xad, 0x04, 0x0a, 0x08, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x85, 0x01, 0x0a, 0x0c, 0x73, 0x61, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6f, 0x6e, 0x6c,
	0x79, 0x18, 0xfa, 0xcc, 0xd1, 0x53, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x4b, 0x82, 0x41, 0x48, 0x2f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x73, 0x63, 0x73, 0x61, 0x2d, 0x74, 0x78, 0x2f, 0x73, 0x63, 0x73, 0x61, 0x2d, 0x74, 0x78,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f,
	0x73, 0x61, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x6f, 0x6e, 0x6c, 0x79, 0x52, 0x0a, 0x73, 0x61,
	0x41, 0x75, 0x74, 0x68, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x86, 0x01, 0x0a, 0x0c, 0x73, 0x61, 0x5f,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x18, 0x9f, 0xe0, 0xe5, 0x35, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4b, 0x82, 0x41, 0x48, 0x2f, 0x6d, 0x61, 0x63,
	0x73, 0x65, 0x63, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x63, 0x73, 0x61, 0x2d, 0x74, 0x78,
	0x2f, 0x73, 0x63, 0x73, 0x61, 0x2d, 0x74, 0x78, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x61, 0x2d, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x65, 0x64, 0x52, 0x0b, 0x73, 0x61, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x12, 0x86, 0x01, 0x0a, 0x0c, 0x73, 0x63, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6f, 0x6e,
	0x6c, 0x79, 0x18, 0xdc, 0xff, 0xe4, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x4b, 0x82, 0x41, 0x48, 0x2f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x73, 0x63, 0x73, 0x61, 0x2d, 0x74, 0x78, 0x2f, 0x73, 0x63, 0x73, 0x61, 0x2d,
	0x74, 0x78, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x2f, 0x73, 0x63, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x6f, 0x6e, 0x6c, 0x79, 0x52, 0x0a,
	0x73, 0x63, 0x41, 0x75, 0x74, 0x68, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x86, 0x01, 0x0a, 0x0c, 0x73,
	0x63, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x18, 0xd5, 0x84, 0xdc, 0x6a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4b, 0x82, 0x41, 0x48, 0x2f, 0x6d,
	0x61, 0x63, 0x73, 0x65, 0x63, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x63, 0x73, 0x61, 0x2d,
	0x74, 0x78, 0x2f, 0x73, 0x63, 0x73, 0x61, 0x2d, 0x74, 0x78, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x2d, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x52, 0x0b, 0x73, 0x63, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x1a, 0xaa, 0x01, 0x0a, 0x09, 0x53, 0x63, 0x73, 0x61, 0x54, 0x78, 0x4b, 0x65,
	0x79, 0x12, 0x4d, 0x0a, 0x06, 0x73, 0x63, 0x69, 0x5f, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x73, 0x63, 0x73, 0x61, 0x2d, 0x74, 0x78, 0x2f, 0x73, 0x63, 0x73, 0x61, 0x2d,
	0x74, 0x78, 0x2f, 0x73, 0x63, 0x69, 0x2d, 0x74, 0x78, 0x52, 0x05, 0x73, 0x63, 0x69, 0x54, 0x78,
	0x12, 0x4e, 0x0a, 0x07, 0x73, 0x63, 0x73, 0x61, 0x5f, 0x74, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d,
	0x61, 0x63, 0x73, 0x65, 0x63, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x63, 0x73, 0x61, 0x54,
	0x78, 0x2e, 0x53, 0x63, 0x73, 0x61, 0x54, 0x78, 0x52, 0x06, 0x73, 0x63, 0x73, 0x61, 0x54, 0x78,
	0x1a, 0xdf, 0x08, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x08, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0xb1, 0x96, 0xa9, 0xc8, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d,
	0x61, 0x63, 0x73, 0x65, 0x63, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x42, 0x2e, 0x82, 0x41, 0x2b, 0x2f, 0x6d,
	0x61, 0x63, 0x73, 0x65, 0x63, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x5d, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0xeb, 0x92,
	0xf6, 0xa9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2c, 0x82, 0x41,
	0x29, 0x2f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x59, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xd3, 0xcb, 0xab, 0xa5, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2a, 0x82, 0x41, 0x27,
	0x2f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x7d, 0x0a,
	0x11, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0xd9, 0x93, 0x89, 0xf9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x37, 0x82, 0x41, 0x34, 0x2f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x2d,
	0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x72, 0x65, 0x70, 0x6c,
	0x61, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x93, 0x05, 0x0a,
	0x08, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x7b, 0x0a, 0x0e, 0x72, 0x78, 0x5f,
	0x62, 0x61, 0x64, 0x74, 0x61, 0x67, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0xed, 0xdf, 0x84, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3d, 0x82, 0x41, 0x3a, 0x2f, 0x6d,
	0x61, 0x63, 0x73, 0x65, 0x63, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x78, 0x2d, 0x62, 0x61, 0x64,
	0x74, 0x61, 0x67, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x0c, 0x72, 0x78, 0x42, 0x61, 0x64, 0x74,
	0x61, 0x67, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x78, 0x0a, 0x0d, 0x72, 0x78, 0x5f, 0x6e, 0x6f, 0x73,
	0x63, 0x69, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0xee, 0xae, 0xff, 0x1f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3c, 0x82, 0x41, 0x39, 0x2f, 0x6d, 0x61, 0x63, 0x73, 0x65,
	0x63, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x78, 0x2d, 0x6e, 0x6f, 0x73, 0x63, 0x69, 0x2d, 0x70,
	0x6b, 0x74, 0x73, 0x52, 0x0b, 0x72, 0x78, 0x4e, 0x6f, 0x73, 0x63, 0x69, 0x50, 0x6b, 0x74, 0x73,
	0x12, 0x87, 0x01, 0x0a, 0x12, 0x72, 0x78, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x73,
	0x63, 0x69, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0xdf, 0x86, 0x8e, 0x73, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f, 0x6d, 0x61, 0x63, 0x73, 0x65,
	0x63, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x78, 0x2d, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x73, 0x63, 0x69, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x10, 0x72, 0x78, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x73, 0x63, 0x69, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x81, 0x01, 0x0a, 0x10, 0x72,
	0x78, 0x5f, 0x75, 0x6e, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18,
	0xcb, 0xd3, 0x92, 0x6d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3f, 0x82,
	0x41, 0x3c, 0x2f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x78,
	0x2d, 0x75, 0x6e, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x0e,
	0x72, 0x78, 0x55, 0x6e, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x81,
	0x01, 0x0a, 0x10, 0x74, 0x78, 0x5f, 0x75, 0x6e, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x5f, 0x70,
	0x6b, 0x74, 0x73, 0x18, 0xf5, 0xb7, 0x8a, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x2f, 0x74, 0x78, 0x2d, 0x75, 0x6e, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x2d, 0x70, 0x6b,
	0x74, 0x73, 0x52, 0x0e, 0x74, 0x78, 0x55, 0x6e, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x50, 0x6b,
	0x74, 0x73, 0x1a, 0x8f, 0x01, 0x0a, 0x0c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x4b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x24, 0x82, 0x41, 0x21, 0x2f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a,
	0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x61,
	0x63, 0x73, 0x65, 0x63, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x1a, 0x84, 0x46, 0x0a, 0x03, 0x4d, 0x6b, 0x61, 0x12, 0x5d, 0x0a, 0x0a,
	0x6b, 0x65, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x18, 0xc1, 0xf3, 0xb8, 0x5c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2e, 0x4d, 0x6b, 0x61, 0x2e, 0x4b, 0x65, 0x79, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x73, 0x42, 0x19, 0x82, 0x41, 0x16, 0x2f, 0x6d, 0x61, 0x63, 0x73, 0x65,
	0x63, 0x2f, 0x6d, 0x6b, 0x61, 0x2f, 0x6b, 0x65, 0x79, 0x2d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73,
	0x52, 0x09, 0x6b, 0x65, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x57, 0x0a, 0x08, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x8f, 0x9e, 0xae, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x61,
	0x63, 0x73, 0x65, 0x63, 0x2e, 0x4d, 0x6b, 0x61, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x42, 0x17, 0x82, 0x41, 0x14, 0x2f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2f, 0x6d, 0x6b,
	0x61, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xc0, 0xdf,
	0xb6, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2e, 0x4d, 0x6b, 0x61, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x14, 0x82, 0x41, 0x11, 0x2f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63,
	0x2f, 0x6d, 0x6b, 0x61, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x1a, 0xa1, 0x21, 0x0a, 0x09, 0x4b, 0x65, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x12,
	0x71, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0xcd, 0xbb, 0xcc,
	0x4b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2e, 0x4d, 0x6b, 0x61, 0x2e, 0x4b, 0x65,
	0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x2e, 0x4b, 0x65, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x4b, 0x65, 0x79, 0x42, 0x23, 0x82, 0x41, 0x20, 0x2f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2f,
	0x6d, 0x6b, 0x61, 0x2f, 0x6b, 0x65, 0x79, 0x2d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x2f, 0x6b,
	0x65, 0x79, 0x2d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x1a, 0x8a, 0x1f, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12,
	0x78, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xe2, 0xc7, 0xc3, 0x81, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2e, 0x4d, 0x6b, 0x61, 0x2e, 0x4b, 0x65, 0x79, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x73, 0x2e, 0x4b, 0x65, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x2a, 0x82, 0x41, 0x27, 0x2f, 0x6d, 0x61, 0x63, 0x73, 0x65,
	0x63, 0x2f, 0x6d, 0x6b, 0x61, 0x2f, 0x6b, 0x65, 0x79, 0x2d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73,
	0x2f, 0x6b, 0x65, 0x79, 0x2d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x7e, 0x0a, 0x08, 0x6d, 0x6b, 0x61,
	0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x96, 0xc7, 0xb3, 0xfd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x61, 0x63,
	0x73, 0x65, 0x63, 0x2e, 0x4d, 0x6b, 0x61, 0x2e, 0x4b, 0x65, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x73, 0x2e, 0x4b, 0x65, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x4d, 0x6b, 0x61, 0x4b, 0x65,
	0x79, 0x73, 0x42, 0x2c, 0x82, 0x41, 0x29, 0x2f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2f, 0x6d,
	0x6b, 0x61, 0x2f, 0x6b, 0x65, 0x79, 0x2d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x2f, 0x6b, 0x65,
	0x79, 0x2d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x6d, 0x6b, 0x61, 0x2d, 0x6b, 0x65, 0x79, 0x73,
	0x52, 0x07, 0x6d, 0x6b, 0x61, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x74, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x9f, 0xce, 0xdd, 0xad, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63,
	0x2e, 0x4d, 0x6b, 0x61, 0x2e, 0x4b, 0x65, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x2e, 0x4b,
	0x65, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x29, 0x82,
	0x41, 0x26, 0x2f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2f, 0x6d, 0x6b, 0x61, 0x2f, 0x6b, 0x65,
	0x79, 0x2d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x2f, 0x6b, 0x65, 0x79, 0x2d, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a,
	0x67, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x5d, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0xd0, 0xf8, 0xe5, 0x7f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x2f, 0x82, 0x41, 0x2c, 0x2f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2f, 0x6d, 0x6b,
	0x61, 0x2f, 0x6b, 0x65, 0x79, 0x2d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x2f, 0x6b, 0x65, 0x79,
	0x2d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6e, 0x61,
	0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0xbc, 0x1a, 0x0a, 0x07, 0x4d, 0x6b, 0x61,
	0x4b, 0x65, 0x79, 0x73, 0x12, 0x8d, 0x01, 0x0a, 0x07, 0x6d, 0x6b, 0x61, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0xd4, 0xa8, 0xb8, 0x69, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2e, 0x4d, 0x6b,
	0x61, 0x2e, 0x4b, 0x65, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x2e, 0x4b, 0x65, 0x79, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x2e, 0x4d, 0x6b, 0x61, 0x4b, 0x65, 0x79, 0x73, 0x2e, 0x4d, 0x6b, 0x61,
	0x4b, 0x65, 0x79, 0x4b, 0x65, 0x79, 0x42, 0x34, 0x82, 0x41, 0x31, 0x2f, 0x6d, 0x61, 0x63, 0x73,
	0x65, 0x63, 0x2f, 0x6d, 0x6b, 0x61, 0x2f, 0x6b, 0x65, 0x79, 0x2d, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x73, 0x2f, 0x6b, 0x65, 0x79, 0x2d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x6d, 0x6b, 0x61, 0x2d,
	0x6b, 0x65, 0x79, 0x73, 0x2f, 0x6d, 0x6b, 0x61, 0x2d, 0x6b, 0x65, 0x79, 0x52, 0x06, 0x6d, 0x6b,
	0x61, 0x4b, 0x65, 0x79, 0x1a, 0xf6, 0x17, 0x0a, 0x06, 0x4d, 0x6b, 0x61, 0x4b, 0x65, 0x79, 0x12,
	0x97, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xd9, 0xdc, 0xd4, 0x61, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2e, 0x4d, 0x6b, 0x61, 0x2e, 0x4b, 0x65, 0x79, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x73, 0x2e, 0x4b, 0x65, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x4d,
	0x6b, 0x61, 0x4b, 0x65, 0x79, 0x73, 0x2e, 0x4d, 0x6b, 0x61, 0x4b, 0x65, 0x79, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x42, 0x3b, 0x82, 0x41, 0x38, 0x2f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63,
	0x2f, 0x6d, 0x6b, 0x61, 0x2f, 0x6b, 0x65, 0x79, 0x2d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x2f,
	0x6b, 0x65, 0x79, 0x2d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x6d, 0x6b, 0x61, 0x2d, 0x6b, 0x65,
	0x79, 0x73, 0x2f, 0x6d, 0x6b, 0x61, 0x2d, 0x6b, 0x65, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x94, 0x01, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0xae, 0xa6, 0x8c, 0xb2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65,
	0x63, 0x2e, 0x4d, 0x6b, 0x61, 0x2e, 0x4b, 0x65, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x2e,
	0x4b, 0x65, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x4d, 0x6b, 0x61, 0x4b, 0x65, 0x79, 0x73,
	0x2e, 0x4d, 0x6b, 0x61, 0x4b, 0x65, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x3a, 0x82,
	0x41, 0x37, 0x2f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2f, 0x6d, 0x6b, 0x61, 0x2f, 0x6b, 0x65,
	0x79, 0x2d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x2f, 0x6b, 0x65, 0x79, 0x2d, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2f, 0x6d, 0x6b, 0x61, 0x2d, 0x6b, 0x65, 0x79, 0x73, 0x2f, 0x6d, 0x6b, 0x61, 0x2d,
	0x6b, 0x65, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x1a, 0xdf, 0x0a, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xe7, 0x01, 0x0a, 0x17,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x5f, 0x61, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0xdd, 0xe1, 0x8d, 0x45, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x56, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x61,
	0x63, 0x73, 0x65, 0x63, 0x2e, 0x4d, 0x6b, 0x61, 0x2e, 0x4b, 0x65, 0x79, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x73, 0x2e, 0x4b, 0x65, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x4d, 0x6b, 0x61, 0x4b,
	0x65, 0x79, 0x73, 0x2e, 0x4d, 0x6b, 0x61, 0x4b, 0x65, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x41,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x42, 0x53, 0x82, 0x41, 0x50, 0x2f, 0x6d, 0x61,
	0x63, 0x73, 0x65, 0x63, 0x2f, 0x6d, 0x6b, 0x61, 0x2f, 0x6b, 0x65, 0x79, 0x2d, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x73, 0x2f, 0x6b, 0x65, 0x79, 0x2d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x6d, 0x6b,
	0x61, 0x2d, 0x6b, 0x65, 0x79, 0x73, 0x2f, 0x6d, 0x6b, 0x61, 0x2d, 0x6b, 0x65, 0x79, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x69, 0x63, 0x2d, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x16, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x41, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0xae, 0x01, 0x0a, 0x27, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x8d, 0xc2, 0x8d, 0x40, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x52, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2e, 0x4d,
	0x6b, 0x61, 0x2e, 0x4b, 0x65, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x2e, 0x4b, 0x65, 0x79,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x4d, 0x6b, 0x61, 0x4b, 0x65, 0x79, 0x73, 0x2e, 0x4d, 0x6b,
	0x61, 0x4b, 0x65, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x78, 0x70, 0x69,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00,
	0x52, 0x24, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x61,
	0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x1b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0xa2, 0xaf, 0xf6, 0xf5, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x18, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x68, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x8b, 0x8b, 0xc2, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2f, 0x6d, 0x6b,
	0x61, 0x2f, 0x6b, 0x65, 0x79, 0x2d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x2f, 0x6b, 0x65, 0x79,
	0x2d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x6d, 0x6b, 0x61, 0x2d, 0x6b, 0x65, 0x79, 0x73, 0x2f,
	0x6d, 0x6b, 0x61, 0x2d, 0x6b, 0x65, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69,
	0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x8a, 0x01, 0x0a, 0x0e, 0x6b, 0x65, 0x79, 0x5f, 0x63, 0x6c,
	0x65, 0x61, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x93, 0xfa, 0x85, 0x33, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4a, 0x82, 0x41, 0x47, 0x2f, 0x6d, 0x61,
	0x63, 0x73, 0x65, 0x63, 0x2f, 0x6d, 0x6b, 0x61, 0x2f, 0x6b, 0x65, 0x79, 0x2d, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x73, 0x2f, 0x6b, 0x65, 0x79, 0x2d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x6d, 0x6b,
	0x61, 0x2d, 0x6b, 0x65, 0x79, 0x73, 0x2f, 0x6d, 0x6b, 0x61, 0x2d, 0x6b, 0x65, 0x79, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6b, 0x65, 0x79, 0x2d, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x2d,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x0c, 0x6b, 0x65, 0x79, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x54, 0x65,
	0x78, 0x74, 0x12, 0x96, 0x01, 0x0a, 0x1d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x64, 0x61, 0x74, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0xab, 0xd8, 0xa0, 0xeb, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4d,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x61, 0x63, 0x73,
	0x65, 0x63, 0x2e, 0x4d, 0x6b, 0x61, 0x2e, 0x4b, 0x65, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x73,
	0x2e, 0x4b, 0x65, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x4d, 0x6b, 0x61, 0x4b, 0x65, 0x79,
	0x73, 0x2e, 0x4d, 0x6b, 0x61, 0x4b, 0x65, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x01, 0x52,
	0x1a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x16, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x91, 0x99, 0x89, 0x7c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x13, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0xae, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x12, 0x20, 0x0a, 0x1c, 0x43, 0x52, 0x59, 0x50, 0x54, 0x4f, 0x47, 0x52, 0x41, 0x50, 0x48, 0x49,
	0x43, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54,
	0x10, 0x00, 0x12, 0x38, 0x0a, 0x23, 0x43, 0x52, 0x59, 0x50, 0x54, 0x4f, 0x47, 0x52, 0x41, 0x50,
	0x48, 0x49, 0x43, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x41, 0x45, 0x53,
	0x5f, 0x31, 0x32, 0x38, 0x5f, 0x43, 0x4d, 0x41, 0x43, 0x10, 0x01, 0x1a, 0x0f, 0x82, 0x41, 0x0c,
	0x41, 0x45, 0x53, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x43, 0x4d, 0x41, 0x43, 0x12, 0x38, 0x0a, 0x23,
	0x43, 0x52, 0x59, 0x50, 0x54, 0x4f, 0x47, 0x52, 0x41, 0x50, 0x48, 0x49, 0x43, 0x41, 0x4c, 0x47,
	0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x43,
	0x4d, 0x41, 0x43, 0x10, 0x02, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x41, 0x45, 0x53, 0x5f, 0x32, 0x35,
	0x36, 0x5f, 0x43, 0x4d, 0x41, 0x43, 0x22, 0x6a, 0x0a, 0x12, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x18,
	0x45, 0x58, 0x50, 0x49, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x44, 0x41, 0x54, 0x45, 0x54, 0x49,
	0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x36, 0x0a, 0x20, 0x45, 0x58,
	0x50, 0x49, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x44, 0x41, 0x54, 0x45, 0x54, 0x49, 0x4d, 0x45,
	0x5f, 0x4e, 0x4f, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01,
	0x1a, 0x10, 0x82, 0x41, 0x0d, 0x4e, 0x4f, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x22, 0x63, 0x0a, 0x0d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x44, 0x41, 0x54, 0x45,
	0x54, 0x49, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x39, 0x0a, 0x1f,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x44, 0x41, 0x54, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x49, 0x4d, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x45, 0x4c, 0x59, 0x10,
	0x01, 0x1a, 0x14, 0x82, 0x41, 0x11, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x49, 0x4d, 0x4d, 0x45,
	0x44, 0x49, 0x41, 0x54, 0x45, 0x4c, 0x59, 0x42, 0x16, 0x0a, 0x14, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42,
	0x11, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x1a, 0xd8, 0x0a, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xe6, 0x01, 0x0a,
	0x17, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x5f, 0x61,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0xde, 0xd8, 0xee, 0xb6, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x55, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2e, 0x4d, 0x6b, 0x61, 0x2e, 0x4b, 0x65, 0x79, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x73, 0x2e, 0x4b, 0x65, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x4d, 0x6b,
	0x61, 0x4b, 0x65, 0x79, 0x73, 0x2e, 0x4d, 0x6b, 0x61, 0x4b, 0x65, 0x79, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63,
	0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x42, 0x52, 0x82, 0x41, 0x4f, 0x2f, 0x6d,
	0x61, 0x63, 0x73, 0x65, 0x63, 0x2f, 0x6d, 0x6b, 0x61, 0x2f, 0x6b, 0x65, 0x79, 0x2d, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x73, 0x2f, 0x6b, 0x65, 0x79, 0x2d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x6d,
	0x6b, 0x61, 0x2d, 0x6b, 0x65, 0x79, 0x73, 0x2f, 0x6d, 0x6b, 0x61, 0x2d, 0x6b, 0x65, 0x79, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x69, 0x63, 0x2d, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x16, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x41, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0xad, 0x01, 0x0a, 0x27, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0xc2, 0x92, 0xcb, 0x22, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x51, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2e, 0x4d,
	0x6b, 0x61, 0x2e, 0x4b, 0x65, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x2e, 0x4b, 0x65, 0x79,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x4d, 0x6b, 0x61, 0x4b, 0x65, 0x79, 0x73, 0x2e, 0x4d, 0x6b,
	0x61, 0x4b, 0x65, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52,
	0x24, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x61, 0x74,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x1b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0xd9, 0xe8, 0x86, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x18, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x67, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0xa6, 0xc0, 0xa2, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x3d, 0x82, 0x41, 0x3a, 0x2f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2f, 0x6d, 0x6b, 0x61, 0x2f,
	0x6b, 0x65, 0x79, 0x2d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x2f, 0x6b, 0x65, 0x79, 0x2d, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x2f, 0x6d, 0x6b, 0x61, 0x2d, 0x6b, 0x65, 0x79, 0x73, 0x2f, 0x6d, 0x6b,
	0x61, 0x2d, 0x6b, 0x65, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x64, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x89, 0x01, 0x0a, 0x0e, 0x6b, 0x65, 0x79, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0xb6, 0xe8, 0xda, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x49, 0x82, 0x41, 0x46, 0x2f, 0x6d, 0x61, 0x63, 0x73, 0x65,
	0x63, 0x2f, 0x6d, 0x6b, 0x61, 0x2f, 0x6b, 0x65, 0x79, 0x2d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73,
	0x2f, 0x6b, 0x65, 0x79, 0x2d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x6d, 0x6b, 0x61, 0x2d, 0x6b,
	0x65, 0x79, 0x73, 0x2f, 0x6d, 0x6b, 0x61, 0x2d, 0x6b, 0x65, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x6b, 0x65, 0x79, 0x2d, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x2d, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x0c, 0x6b, 0x65, 0x79, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x54, 0x65, 0x78, 0x74, 0x12, 0x94,
	0x01, 0x0a, 0x1d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0xe4, 0x8b, 0xb0, 0x43, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4c, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2e, 0x4d, 0x6b,
	0x61, 0x2e, 0x4b, 0x65, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x2e, 0x4b, 0x65, 0x79, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x2e, 0x4d, 0x6b, 0x61, 0x4b, 0x65, 0x79, 0x73, 0x2e, 0x4d, 0x6b, 0x61,
	0x4b, 0x65, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x01, 0x52, 0x1a, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x64, 0x61, 0x74,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x16, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x88, 0xfa, 0xae, 0xf9, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x13, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x22, 0xae, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x69, 0x63, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x20, 0x0a, 0x1c, 0x43,
	0x52, 0x59, 0x50, 0x54, 0x4f, 0x47, 0x52, 0x41, 0x50, 0x48, 0x49, 0x43, 0x41, 0x4c, 0x47, 0x4f,
	0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x38, 0x0a,
	0x23, 0x43, 0x52, 0x59, 0x50, 0x54, 0x4f, 0x47, 0x52, 0x41, 0x50, 0x48, 0x49, 0x43, 0x41, 0x4c,
	0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x31, 0x32, 0x38, 0x5f,
	0x43, 0x4d, 0x41, 0x43, 0x10, 0x01, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x41, 0x45, 0x53, 0x5f, 0x31,
	0x32, 0x38, 0x5f, 0x43, 0x4d, 0x41, 0x43, 0x12, 0x38, 0x0a, 0x23, 0x43, 0x52, 0x59, 0x50, 0x54,
	0x4f, 0x47, 0x52, 0x41, 0x50, 0x48, 0x49, 0x43, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48,
	0x4d, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x43, 0x4d, 0x41, 0x43, 0x10, 0x02,
	0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x41, 0x45, 0x53, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x43, 0x4d, 0x41,
	0x43, 0x22, 0x6a, 0x0a, 0x12, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x58, 0x50, 0x49, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x44, 0x41, 0x54, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x36, 0x0a, 0x20, 0x45, 0x58, 0x50, 0x49, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x44, 0x41, 0x54, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x45,
	0x58, 0x50, 0x49, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x1a, 0x10, 0x82, 0x41, 0x0d,
	0x4e, 0x4f, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x22, 0x63, 0x0a,
	0x0d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17,
	0x0a, 0x13, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x44, 0x41, 0x54, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x39, 0x0a, 0x1f, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x44, 0x41, 0x54, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x49,
	0x4d, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x45, 0x4c, 0x59, 0x10, 0x01, 0x1a, 0x14, 0x82, 0x41,
	0x11, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x49, 0x4d, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x45,
	0x4c, 0x59, 0x42, 0x16, 0x0a, 0x14, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x1a, 0xa7, 0x01,
	0x0a, 0x09, 0x4d, 0x6b, 0x61, 0x4b, 0x65, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x47, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x37, 0x82, 0x41, 0x34, 0x2f, 0x6d, 0x61, 0x63,
	0x73, 0x65, 0x63, 0x2f, 0x6d, 0x6b, 0x61, 0x2f, 0x6b, 0x65, 0x79, 0x2d, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x73, 0x2f, 0x6b, 0x65, 0x79, 0x2d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x6d, 0x6b, 0x61,
	0x2d, 0x6b, 0x65, 0x79, 0x73, 0x2f, 0x6d, 0x6b, 0x61, 0x2d, 0x6b, 0x65, 0x79, 0x2f, 0x69, 0x64,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x51, 0x0a, 0x07, 0x6d, 0x6b, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2e, 0x4d, 0x6b, 0x61, 0x2e, 0x4b, 0x65,
	0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x2e, 0x4b, 0x65, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x2e, 0x4d, 0x6b, 0x61, 0x4b, 0x65, 0x79, 0x73, 0x2e, 0x4d, 0x6b, 0x61, 0x4b, 0x65, 0x79, 0x52,
	0x06, 0x6d, 0x6b, 0x61, 0x4b, 0x65, 0x79, 0x1a, 0x66, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x5d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xe7, 0xd0, 0xca, 0xe1, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2e, 0x82, 0x41, 0x2b, 0x2f, 0x6d,
	0x61, 0x63, 0x73, 0x65, 0x63, 0x2f, 0x6d, 0x6b, 0x61, 0x2f, 0x6b, 0x65, 0x79, 0x2d, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x73, 0x2f, 0x6b, 0x65, 0x79, 0x2d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a,
	0x93, 0x01, 0x0a, 0x0b, 0x4b, 0x65, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x12,
	0x3c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0x82,
	0x41, 0x25, 0x2f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2f, 0x6d, 0x6b, 0x61, 0x2f, 0x6b, 0x65,
	0x79, 0x2d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x2f, 0x6b, 0x65, 0x79, 0x2d, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a,
	0x09, 0x6b, 0x65, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x61,
	0x63, 0x73, 0x65, 0x63, 0x2e, 0x4d, 0x6b, 0x61, 0x2e, 0x4b, 0x65, 0x79, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x73, 0x2e, 0x4b, 0x65, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x08, 0x6b, 0x65, 0x79,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x1a, 0x99, 0x17, 0x0a, 0x08, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x12, 0x65, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0xe8, 0xce, 0x8f,
	0xe6, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2e, 0x4d, 0x6b, 0x61, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4b, 0x65,
	0x79, 0x42, 0x1e, 0x82, 0x41, 0x1b, 0x2f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2f, 0x6d, 0x6b,
	0x61, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x1a, 0x9e, 0x15, 0x0a, 0x06, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x6f, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xcd,
	0x9f, 0xc0, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2e, 0x4d, 0x6b, 0x61, 0x2e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x25, 0x82, 0x41, 0x22, 0x2f, 0x6d, 0x61, 0x63, 0x73,
	0x65, 0x63, 0x2f, 0x6d, 0x6b, 0x61, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x82,
	0xee, 0xc5, 0x80, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2e, 0x4d, 0x6b, 0x61,
	0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x24, 0x82, 0x41, 0x21, 0x2f, 0x6d, 0x61, 0x63, 0x73,
	0x65, 0x63, 0x2f, 0x6d, 0x6b, 0x61, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x1a, 0xdd, 0x09, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xa9,
	0x01, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0xca, 0xf2, 0x83, 0x78, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x3c, 0x82, 0x41, 0x39, 0x2f, 0x6d, 0x61, 0x63, 0x73, 0x65,
	0x63, 0x2f, 0x6d, 0x6b, 0x61, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x2d, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x7a, 0x0a, 0x10, 0x64, 0x65,
	0x6c, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x8f,
	0x9a, 0x9f, 0x91, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x36, 0x82,
	0x41, 0x33, 0x2f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2f, 0x6d, 0x6b, 0x61, 0x2f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x74,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x87, 0x01, 0x0a, 0x15, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x5f, 0x69, 0x63, 0x76, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0xd5, 0xfd, 0xc3, 0x52, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3b,
	0x82, 0x41, 0x38, 0x2f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2f, 0x6d, 0x6b, 0x61, 0x2f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2d, 0x69, 0x63,
	0x76, 0x2d, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x13, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x49, 0x63, 0x76, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x81, 0x01, 0x0a, 0x13, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x9c, 0xc3, 0xa1, 0x16, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x6d, 0x61, 0x63, 0x73,
	0x65, 0x63, 0x2f, 0x6d, 0x6b, 0x61, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6b, 0x65,
	0x79, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x52, 0x11, 0x6b, 0x65, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x9c, 0x01, 0x0a, 0x13, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x5f,
	0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x69, 0x74, 0x65, 0x18, 0xab, 0xfa, 0xe7,
	0xd5, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61,
	0x63, 0x73, 0x65, 0x63, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72,
	0x53, 0x75, 0x69, 0x74, 0x65, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x6d, 0x61, 0x63, 0x73, 0x65,
	0x63, 0x2f, 0x6d, 0x6b, 0x61, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x61, 0x63,
	0x73, 0x65, 0x63, 0x2d, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x2d, 0x73, 0x75, 0x69, 0x74, 0x65,
	0x52, 0x11, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x53, 0x75,
	0x69, 0x74, 0x65, 0x12, 0x58, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xc9, 0xc8, 0xb1, 0x7c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2a, 0x82, 0x41, 0x27,
	0x2f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2f, 0x6d, 0x6b, 0x61, 0x2f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x7f, 0x0a,
	0x12, 0x73, 0x61, 0x6b, 0x5f, 0x72, 0x65, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0xee, 0xa2, 0xd1, 0xe2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x38, 0x82, 0x41, 0x35, 0x2f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2f, 0x6d,
	0x6b, 0x61, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x61, 0x6b, 0x2d, 0x72, 0x65,
	0x6b, 0x65, 0x79, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x10, 0x73, 0x61,
	0x6b, 0x52, 0x65, 0x6b, 0x65, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x96,
	0x01, 0x0a, 0x1b, 0x73, 0x61, 0x6b, 0x5f, 0x72, 0x65, 0x6b, 0x65, 0x79, 0x5f, 0x6f, 0x6e, 0x5f,
	0x6c, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x18, 0x86,
	0x97, 0xe1, 0x5b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x41, 0x82, 0x41,
	0x3e, 0x2f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2f, 0x6d, 0x6b, 0x61, 0x2f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x73, 0x61, 0x6b, 0x2d, 0x72, 0x65, 0x6b, 0x65, 0x79, 0x2d, 0x6f, 0x6e,
	0x2d, 0x6c, 0x69, 0x76, 0x65, 0x2d, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x6c, 0x6f, 0x73, 0x73, 0x52,
	0x16, 0x73, 0x61, 0x6b, 0x52, 0x65, 0x6b, 0x65, 0x79, 0x4f, 0x6e, 0x4c, 0x69, 0x76, 0x65, 0x50,
	0x65, 0x65, 0x72, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x89, 0x01, 0x0a, 0x16, 0x75, 0x73, 0x65, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0xd9, 0xfd, 0xab, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x3c, 0x82, 0x41, 0x39, 0x2f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2f, 0x6d, 0x6b, 0x61,
	0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x75, 0x73, 0x65, 0x2d, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x2d, 0x65, 0x74, 0x68, 0x2d, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x13,
	0x75, 0x73, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x45, 0x74, 0x68, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x1a, 0xd4, 0x09, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xa9, 0x01,
	0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0xdb, 0xbc, 0x80, 0xfd, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x3b, 0x82, 0x41, 0x38, 0x2f, 0x6d, 0x61, 0x63, 0x73, 0x65,
	0x63, 0x2f, 0x6d, 0x6b, 0x61, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x2d, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x78, 0x0a, 0x10, 0x64, 0x65, 0x6c,
	0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x9e, 0xe1,
	0x88, 0x4b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x35, 0x82, 0x41, 0x32,
	0x2f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2f, 0x6d, 0x6b, 0x61, 0x2f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x86, 0x01, 0x0a, 0x15, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f,
	0x69, 0x63, 0x76, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0xb6, 0xaa,
	0xaf, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3a, 0x82, 0x41, 0x37,
	0x2f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2f, 0x6d, 0x6b, 0x61, 0x2f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2d, 0x69, 0x63, 0x76, 0x2d, 0x69, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x13, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x49, 0x63, 0x76, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x81, 0x01, 0x0a,
	0x13, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x83, 0xab, 0xc0, 0x8f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x38, 0x82, 0x41, 0x35, 0x2f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2f,
	0x6d, 0x6b, 0x61, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6b, 0x65, 0x79, 0x2d, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x11, 0x6b,
	0x65, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x9a, 0x01, 0x0a, 0x13, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x5f, 0x63, 0x69, 0x70, 0x68,
	0x65, 0x72, 0x5f, 0x73, 0x75, 0x69, 0x74, 0x65, 0x18, 0xcc, 0xc8, 0xd3, 0x58, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x4d,
	0x61, 0x63, 0x73, 0x65, 0x63, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x53, 0x75, 0x69, 0x74, 0x65,
	0x42, 0x38, 0x82, 0x41, 0x35, 0x2f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2f, 0x6d, 0x6b, 0x61,
	0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2d, 0x63, 0x69,
	0x70, 0x68, 0x65, 0x72, 0x2d, 0x73, 0x75, 0x69, 0x74, 0x65, 0x52, 0x11, 0x6d, 0x61, 0x63, 0x73,
	0x65, 0x63, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x53, 0x75, 0x69, 0x74, 0x65, 0x12, 0x57, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xf0, 0xf6, 0xcd, 0x4f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x29, 0x82, 0x41, 0x26, 0x2f, 0x6d, 0x61, 0x63, 0x73, 0x65,
	0x63, 0x2f, 0x6d, 0x6b, 0x61, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x61, 0x6d, 0x65,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x7e, 0x0a, 0x12, 0x73, 0x61, 0x6b, 0x5f, 0x72, 0x65,
	0x6b, 0x65, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0xcb, 0xb0, 0x9d,
	0xd6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x37, 0x82, 0x41, 0x34,
	0x2f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2f, 0x6d, 0x6b, 0x61, 0x2f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x73, 0x61, 0x6b, 0x2d, 0x72, 0x65, 0x6b, 0x65, 0x79, 0x2d, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x52, 0x10, 0x73, 0x61, 0x6b, 0x52, 0x65, 0x6b, 0x65, 0x79, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x95, 0x01, 0x0a, 0x1b, 0x73, 0x61, 0x6b, 0x5f, 0x72,
	0x65, 0x6b, 0x65, 0x79, 0x5f, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x65, 0x65,
	0x72, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x18, 0xa5, 0x84, 0x84, 0x53, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63,
	0x2f, 0x6d, 0x6b, 0x61, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x61, 0x6b, 0x2d, 0x72,
	0x65, 0x6b, 0x65, 0x79, 0x2d, 0x6f, 0x6e, 0x2d, 0x6c, 0x69, 0x76, 0x65, 0x2d, 0x70, 0x65, 0x65,
	0x72, 0x2d, 0x6c, 0x6f, 0x73, 0x73, 0x52, 0x16, 0x73, 0x61, 0x6b, 0x52, 0x65, 0x6b, 0x65, 0x79,
	0x4f, 0x6e, 0x4c, 0x69, 0x76, 0x65, 0x50, 0x65, 0x65, 0x72, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x89,
	0x01, 0x0a, 0x16, 0x75, 0x73, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x65,
	0x74, 0x68, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x90, 0xf4, 0xb3, 0xf8, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3b, 0x82, 0x41, 0x38, 0x2f, 0x6d, 0x61,
	0x63, 0x73, 0x65, 0x63, 0x2f, 0x6d, 0x6b, 0x61, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x75,
	0x73, 0x65, 0x2d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x65, 0x74, 0x68, 0x2d, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x13, 0x75, 0x73, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x45, 0x74, 0x68, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x1a, 0x84, 0x01, 0x0a, 0x09, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x82, 0x41, 0x20, 0x2f, 0x6d, 0x61, 0x63, 0x73,
	0x65, 0x63, 0x2f, 0x6d, 0x6b, 0x61, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x3e, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d,
	0x61, 0x63, 0x73, 0x65, 0x63, 0x2e, 0x4d, 0x6b, 0x61, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x1a, 0xb7, 0x0b, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x64, 0x0a, 0x08, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0xb8, 0xce, 0x81, 0xa0, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d,
	0x61, 0x63, 0x73, 0x65, 0x63, 0x2e, 0x4d, 0x6b, 0x61, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x42, 0x1d, 0x82, 0x41, 0x1a, 0x2f, 0x6d, 0x61,
	0x63, 0x73, 0x65, 0x63, 0x2f, 0x6d, 0x6b, 0x61, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x1a, 0xc7, 0x0a, 0x0a, 0x08, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x86,
	0x01, 0x0a, 0x18, 0x69, 0x6e, 0x5f, 0x6d, 0x6b, 0x70, 0x64, 0x75, 0x5f, 0x62, 0x61, 0x64, 0x5f,
	0x70, 0x65, 0x65, 0x72, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x9d, 0xe0, 0xdb, 0x53,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x6d,
	0x61, 0x63, 0x73, 0x65, 0x63, 0x2f, 0x6d, 0x6b, 0x61, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x6d, 0x6b, 0x70, 0x64,
	0x75, 0x2d, 0x62, 0x61, 0x64, 0x2d, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x52, 0x14, 0x69, 0x6e, 0x4d, 0x6b, 0x70, 0x64, 0x75, 0x42, 0x61, 0x64, 0x50, 0x65, 0x65,
	0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x9e, 0x01, 0x0a, 0x20, 0x69, 0x6e, 0x5f, 0x6d,
	0x6b, 0x70, 0x64, 0x75, 0x5f, 0x69, 0x63, 0x76, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x95, 0x91, 0xe6,
	0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f,
	0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2f, 0x6d, 0x6b, 0x61, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x6d, 0x6b, 0x70,
	0x64, 0x75, 0x2d, 0x69, 0x63, 0x76, 0x2d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x1c, 0x69, 0x6e, 0x4d, 0x6b,
	0x70, 0x64, 0x75, 0x49, 0x63, 0x76, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x89, 0x01, 0x0a, 0x19, 0x69, 0x6e, 0x5f,
	0x6d, 0x6b, 0x70, 0x64, 0x75, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0xe6, 0xd5, 0xd1, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x37, 0x82, 0x41, 0x34, 0x2f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63,
	0x2f, 0x6d, 0x6b, 0x61, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x6d, 0x6b, 0x70, 0x64, 0x75, 0x2d, 0x70, 0x65, 0x65,
	0x72, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x15, 0x69,
	0x6e, 0x4d, 0x6b, 0x70, 0x64, 0x75, 0x50, 0x65, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x12, 0x8d, 0x01, 0x0a, 0x1a, 0x69, 0x6e, 0x5f, 0x6d, 0x6b, 0x70, 0x64,
	0x75, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0xd0, 0xf5, 0x9b, 0x61, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x38, 0x82, 0x41, 0x35, 0x2f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2f, 0x6d, 0x6b,
	0x61, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x2f, 0x69, 0x6e, 0x2d, 0x6d, 0x6b, 0x70, 0x64, 0x75, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x17, 0x69, 0x6e, 0x4d,
	0x6b, 0x70, 0x64, 0x75, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x12, 0x71, 0x0a, 0x10, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x6b, 0x70, 0x64,
	0x75, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0xb5, 0xc4, 0xa6, 0xf3, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2e, 0x82, 0x41, 0x2b, 0x2f, 0x6d, 0x61, 0x63,
	0x73, 0x65, 0x63, 0x2f, 0x6d, 0x6b, 0x61, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x6d, 0x6b, 0x70, 0x64, 0x75,
	0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x0e, 0x6f, 0x75, 0x74, 0x4d, 0x6b, 0x70, 0x64,
	0x75, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x8e, 0x01, 0x0a, 0x1a, 0x73, 0x61, 0x6b, 0x5f,
	0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0xe5, 0x8d, 0xeb, 0x90, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x38, 0x82, 0x41, 0x35, 0x2f, 0x6d, 0x61, 0x63, 0x73, 0x65,
	0x63, 0x2f, 0x6d, 0x6b, 0x61, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x61, 0x6b, 0x2d, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x2d,
	0x6d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x52,
	0x17, 0x73, 0x61, 0x6b, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x7f, 0x0a, 0x15, 0x73, 0x61, 0x6b, 0x5f,
	0x64, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x18, 0xcc, 0xda, 0xfc, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x33, 0x82, 0x41, 0x30, 0x2f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2f, 0x6d, 0x6b, 0x61, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x73,
	0x61, 0x6b, 0x2d, 0x64, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x52, 0x13, 0x73, 0x61, 0x6b, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x7f, 0x0a, 0x15, 0x73, 0x61, 0x6b,
	0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x18, 0xa4, 0xde, 0xab, 0x41, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x33, 0x82, 0x41, 0x30, 0x2f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2f, 0x6d, 0x6b, 0x61,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f,
	0x73, 0x61, 0x6b, 0x2d, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x13, 0x73, 0x61, 0x6b, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x7f, 0x0a, 0x15, 0x73, 0x61,
	0x6b, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0xe7, 0xee, 0xd0, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x33, 0x82, 0x41, 0x30, 0x2f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2f, 0x6d, 0x6b,
	0x61, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x2f, 0x73, 0x61, 0x6b, 0x2d, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x13, 0x73, 0x61, 0x6b, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x6e, 0x0a, 0x0f, 0x73,
	0x61, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0xb5,
	0x85, 0x8c, 0x8b, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2d, 0x82,
	0x41, 0x2a, 0x2f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2f, 0x6d, 0x6b, 0x61, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x61, 0x6b,
	0x2d, 0x68, 0x61, 0x73, 0x68, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x0d, 0x73, 0x61,
	0x6b, 0x48, 0x61, 0x73, 0x68, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x42, 0x17, 0x0a, 0x15, 0x63,
	0x6f, 0x6d, 0x2e, 0x6e, 0x6f, 0x63, 0x73, 0x79, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_openconfig_macsec_proto_rawDescOnce sync.Once
	file_openconfig_macsec_proto_rawDescData = file_openconfig_macsec_proto_rawDesc
)

func file_openconfig_macsec_proto_rawDescGZIP() []byte {
	file_openconfig_macsec_proto_rawDescOnce.Do(func() {
		file_openconfig_macsec_proto_rawDescData = protoimpl.X.CompressGZIP(file_openconfig_macsec_proto_rawDescData)
	})
	return file_openconfig_macsec_proto_rawDescData
}

var file_openconfig_macsec_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_openconfig_macsec_proto_msgTypes = make([]protoimpl.MessageInfo, 39)
var file_openconfig_macsec_proto_goTypes = []interface{}{
	(Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_CryptographicAlgorithm)(0), // 0: openconfig.Macsec.Mka.KeyChains.KeyChain.MkaKeys.MkaKey.Config.CryptographicAlgorithm
	(Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_ExpirationDateTime)(0),     // 1: openconfig.Macsec.Mka.KeyChains.KeyChain.MkaKeys.MkaKey.Config.ExpirationDateTime
	(Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_ValidDateTime)(0),          // 2: openconfig.Macsec.Mka.KeyChains.KeyChain.MkaKeys.MkaKey.Config.ValidDateTime
	(Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_CryptographicAlgorithm)(0),  // 3: openconfig.Macsec.Mka.KeyChains.KeyChain.MkaKeys.MkaKey.State.CryptographicAlgorithm
	(Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_ExpirationDateTime)(0),      // 4: openconfig.Macsec.Mka.KeyChains.KeyChain.MkaKeys.MkaKey.State.ExpirationDateTime
	(Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_ValidDateTime)(0),           // 5: openconfig.Macsec.Mka.KeyChains.KeyChain.MkaKeys.MkaKey.State.ValidDateTime
	(*Macsec)(nil),                                                   // 6: openconfig.Macsec
	(*Macsec_Interfaces)(nil),                                        // 7: openconfig.Macsec.Interfaces
	(*Macsec_Mka)(nil),                                               // 8: openconfig.Macsec.Mka
	(*Macsec_Interfaces_Interface)(nil),                              // 9: openconfig.Macsec.Interfaces.Interface
	(*Macsec_Interfaces_InterfaceKey)(nil),                           // 10: openconfig.Macsec.Interfaces.InterfaceKey
	(*Macsec_Interfaces_Interface_Config)(nil),                       // 11: openconfig.Macsec.Interfaces.Interface.Config
	(*Macsec_Interfaces_Interface_Mka)(nil),                          // 12: openconfig.Macsec.Interfaces.Interface.Mka
	(*Macsec_Interfaces_Interface_ScsaRx)(nil),                       // 13: openconfig.Macsec.Interfaces.Interface.ScsaRx
	(*Macsec_Interfaces_Interface_ScsaTx)(nil),                       // 14: openconfig.Macsec.Interfaces.Interface.ScsaTx
	(*Macsec_Interfaces_Interface_State)(nil),                        // 15: openconfig.Macsec.Interfaces.Interface.State
	(*Macsec_Interfaces_Interface_Mka_Config)(nil),                   // 16: openconfig.Macsec.Interfaces.Interface.Mka.Config
	(*Macsec_Interfaces_Interface_Mka_State)(nil),                    // 17: openconfig.Macsec.Interfaces.Interface.Mka.State
	(*Macsec_Interfaces_Interface_Mka_State_Counters)(nil),           // 18: openconfig.Macsec.Interfaces.Interface.Mka.State.Counters
	(*Macsec_Interfaces_Interface_ScsaRx_ScsaRx)(nil),                // 19: openconfig.Macsec.Interfaces.Interface.ScsaRx.ScsaRx
	(*Macsec_Interfaces_Interface_ScsaRx_ScsaRxKey)(nil),             // 20: openconfig.Macsec.Interfaces.Interface.ScsaRx.ScsaRxKey
	(*Macsec_Interfaces_Interface_ScsaRx_ScsaRx_State)(nil),          // 21: openconfig.Macsec.Interfaces.Interface.ScsaRx.ScsaRx.State
	(*Macsec_Interfaces_Interface_ScsaRx_ScsaRx_State_Counters)(nil), // 22: openconfig.Macsec.Interfaces.Interface.ScsaRx.ScsaRx.State.Counters
	(*Macsec_Interfaces_Interface_ScsaTx_ScsaTx)(nil),                // 23: openconfig.Macsec.Interfaces.Interface.ScsaTx.ScsaTx
	(*Macsec_Interfaces_Interface_ScsaTx_ScsaTxKey)(nil),             // 24: openconfig.Macsec.Interfaces.Interface.ScsaTx.ScsaTxKey
	(*Macsec_Interfaces_Interface_ScsaTx_ScsaTx_State)(nil),          // 25: openconfig.Macsec.Interfaces.Interface.ScsaTx.ScsaTx.State
	(*Macsec_Interfaces_Interface_ScsaTx_ScsaTx_State_Counters)(nil), // 26: openconfig.Macsec.Interfaces.Interface.ScsaTx.ScsaTx.State.Counters
	(*Macsec_Interfaces_Interface_State_Counters)(nil),               // 27: openconfig.Macsec.Interfaces.Interface.State.Counters
	(*Macsec_Mka_KeyChains)(nil),                                     // 28: openconfig.Macsec.Mka.KeyChains
	(*Macsec_Mka_Policies)(nil),                                      // 29: openconfig.Macsec.Mka.Policies
	(*Macsec_Mka_State)(nil),                                         // 30: openconfig.Macsec.Mka.State
	(*Macsec_Mka_KeyChains_KeyChain)(nil),                            // 31: openconfig.Macsec.Mka.KeyChains.KeyChain
	(*Macsec_Mka_KeyChains_KeyChainKey)(nil),                         // 32: openconfig.Macsec.Mka.KeyChains.KeyChainKey
	(*Macsec_Mka_KeyChains_KeyChain_Config)(nil),                     // 33: openconfig.Macsec.Mka.KeyChains.KeyChain.Config
	(*Macsec_Mka_KeyChains_KeyChain_MkaKeys)(nil),                    // 34: openconfig.Macsec.Mka.KeyChains.KeyChain.MkaKeys
	(*Macsec_Mka_KeyChains_KeyChain_State)(nil),                      // 35: openconfig.Macsec.Mka.KeyChains.KeyChain.State
	(*Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey)(nil),             // 36: openconfig.Macsec.Mka.KeyChains.KeyChain.MkaKeys.MkaKey
	(*Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKeyKey)(nil),          // 37: openconfig.Macsec.Mka.KeyChains.KeyChain.MkaKeys.MkaKeyKey
	(*Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config)(nil),      // 38: openconfig.Macsec.Mka.KeyChains.KeyChain.MkaKeys.MkaKey.Config
	(*Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State)(nil),       // 39: openconfig.Macsec.Mka.KeyChains.KeyChain.MkaKeys.MkaKey.State
	(*Macsec_Mka_Policies_Policy)(nil),                               // 40: openconfig.Macsec.Mka.Policies.Policy
	(*Macsec_Mka_Policies_PolicyKey)(nil),                            // 41: openconfig.Macsec.Mka.Policies.PolicyKey
	(*Macsec_Mka_Policies_Policy_Config)(nil),                        // 42: openconfig.Macsec.Mka.Policies.Policy.Config
	(*Macsec_Mka_Policies_Policy_State)(nil),                         // 43: openconfig.Macsec.Mka.Policies.Policy.State
	(*Macsec_Mka_State_Counters)(nil),                                // 44: openconfig.Macsec.Mka.State.Counters
	(*ywrapper.BoolValue)(nil),                                       // 45: ywrapper.BoolValue
	(*ywrapper.StringValue)(nil),                                     // 46: ywrapper.StringValue
	(*ywrapper.UintValue)(nil),                                       // 47: ywrapper.UintValue
	(OpenconfigMacsecConfidentialityOffset)(0),                       // 48: openconfig.OpenconfigMacsecConfidentialityOffset
	(OpenconfigMacsecMacsecCipherSuite)(0),                           // 49: openconfig.OpenconfigMacsecMacsecCipherSuite
}
var file_openconfig_macsec_proto_depIdxs = []int32{
	7,   // 0: openconfig.Macsec.interfaces:type_name -> openconfig.Macsec.Interfaces
	8,   // 1: openconfig.Macsec.mka:type_name -> openconfig.Macsec.Mka
	10,  // 2: openconfig.Macsec.Interfaces.interface:type_name -> openconfig.Macsec.Interfaces.InterfaceKey
	28,  // 3: openconfig.Macsec.Mka.key_chains:type_name -> openconfig.Macsec.Mka.KeyChains
	29,  // 4: openconfig.Macsec.Mka.policies:type_name -> openconfig.Macsec.Mka.Policies
	30,  // 5: openconfig.Macsec.Mka.state:type_name -> openconfig.Macsec.Mka.State
	11,  // 6: openconfig.Macsec.Interfaces.Interface.config:type_name -> openconfig.Macsec.Interfaces.Interface.Config
	12,  // 7: openconfig.Macsec.Interfaces.Interface.mka:type_name -> openconfig.Macsec.Interfaces.Interface.Mka
	13,  // 8: openconfig.Macsec.Interfaces.Interface.scsa_rx:type_name -> openconfig.Macsec.Interfaces.Interface.ScsaRx
	14,  // 9: openconfig.Macsec.Interfaces.Interface.scsa_tx:type_name -> openconfig.Macsec.Interfaces.Interface.ScsaTx
	15,  // 10: openconfig.Macsec.Interfaces.Interface.state:type_name -> openconfig.Macsec.Interfaces.Interface.State
	9,   // 11: openconfig.Macsec.Interfaces.InterfaceKey.interface:type_name -> openconfig.Macsec.Interfaces.Interface
	45,  // 12: openconfig.Macsec.Interfaces.Interface.Config.enable:type_name -> ywrapper.BoolValue
	46,  // 13: openconfig.Macsec.Interfaces.Interface.Config.name:type_name -> ywrapper.StringValue
	47,  // 14: openconfig.Macsec.Interfaces.Interface.Config.replay_protection:type_name -> ywrapper.UintValue
	16,  // 15: openconfig.Macsec.Interfaces.Interface.Mka.config:type_name -> openconfig.Macsec.Interfaces.Interface.Mka.Config
	17,  // 16: openconfig.Macsec.Interfaces.Interface.Mka.state:type_name -> openconfig.Macsec.Interfaces.Interface.Mka.State
	20,  // 17: openconfig.Macsec.Interfaces.Interface.ScsaRx.scsa_rx:type_name -> openconfig.Macsec.Interfaces.Interface.ScsaRx.ScsaRxKey
	24,  // 18: openconfig.Macsec.Interfaces.Interface.ScsaTx.scsa_tx:type_name -> openconfig.Macsec.Interfaces.Interface.ScsaTx.ScsaTxKey
	27,  // 19: openconfig.Macsec.Interfaces.Interface.State.counters:type_name -> openconfig.Macsec.Interfaces.Interface.State.Counters
	45,  // 20: openconfig.Macsec.Interfaces.Interface.State.enable:type_name -> ywrapper.BoolValue
	46,  // 21: openconfig.Macsec.Interfaces.Interface.State.name:type_name -> ywrapper.StringValue
	47,  // 22: openconfig.Macsec.Interfaces.Interface.State.replay_protection:type_name -> ywrapper.UintValue
	46,  // 23: openconfig.Macsec.Interfaces.Interface.Mka.Config.key_chain:type_name -> ywrapper.StringValue
	46,  // 24: openconfig.Macsec.Interfaces.Interface.Mka.Config.mka_policy:type_name -> ywrapper.StringValue
	18,  // 25: openconfig.Macsec.Interfaces.Interface.Mka.State.counters:type_name -> openconfig.Macsec.Interfaces.Interface.Mka.State.Counters
	46,  // 26: openconfig.Macsec.Interfaces.Interface.Mka.State.key_chain:type_name -> ywrapper.StringValue
	46,  // 27: openconfig.Macsec.Interfaces.Interface.Mka.State.mka_policy:type_name -> ywrapper.StringValue
	47,  // 28: openconfig.Macsec.Interfaces.Interface.Mka.State.Counters.in_cak_mkpdu:type_name -> ywrapper.UintValue
	47,  // 29: openconfig.Macsec.Interfaces.Interface.Mka.State.Counters.in_mkpdu:type_name -> ywrapper.UintValue
	47,  // 30: openconfig.Macsec.Interfaces.Interface.Mka.State.Counters.in_sak_mkpdu:type_name -> ywrapper.UintValue
	47,  // 31: openconfig.Macsec.Interfaces.Interface.Mka.State.Counters.out_cak_mkpdu:type_name -> ywrapper.UintValue
	47,  // 32: openconfig.Macsec.Interfaces.Interface.Mka.State.Counters.out_mkpdu:type_name -> ywrapper.UintValue
	47,  // 33: openconfig.Macsec.Interfaces.Interface.Mka.State.Counters.out_sak_mkpdu:type_name -> ywrapper.UintValue
	21,  // 34: openconfig.Macsec.Interfaces.Interface.ScsaRx.ScsaRx.state:type_name -> openconfig.Macsec.Interfaces.Interface.ScsaRx.ScsaRx.State
	19,  // 35: openconfig.Macsec.Interfaces.Interface.ScsaRx.ScsaRxKey.scsa_rx:type_name -> openconfig.Macsec.Interfaces.Interface.ScsaRx.ScsaRx
	22,  // 36: openconfig.Macsec.Interfaces.Interface.ScsaRx.ScsaRx.State.counters:type_name -> openconfig.Macsec.Interfaces.Interface.ScsaRx.ScsaRx.State.Counters
	46,  // 37: openconfig.Macsec.Interfaces.Interface.ScsaRx.ScsaRx.State.sci_rx:type_name -> ywrapper.StringValue
	47,  // 38: openconfig.Macsec.Interfaces.Interface.ScsaRx.ScsaRx.State.Counters.sa_invalid:type_name -> ywrapper.UintValue
	47,  // 39: openconfig.Macsec.Interfaces.Interface.ScsaRx.ScsaRx.State.Counters.sa_valid:type_name -> ywrapper.UintValue
	47,  // 40: openconfig.Macsec.Interfaces.Interface.ScsaRx.ScsaRx.State.Counters.sc_invalid:type_name -> ywrapper.UintValue
	47,  // 41: openconfig.Macsec.Interfaces.Interface.ScsaRx.ScsaRx.State.Counters.sc_valid:type_name -> ywrapper.UintValue
	25,  // 42: openconfig.Macsec.Interfaces.Interface.ScsaTx.ScsaTx.state:type_name -> openconfig.Macsec.Interfaces.Interface.ScsaTx.ScsaTx.State
	23,  // 43: openconfig.Macsec.Interfaces.Interface.ScsaTx.ScsaTxKey.scsa_tx:type_name -> openconfig.Macsec.Interfaces.Interface.ScsaTx.ScsaTx
	26,  // 44: openconfig.Macsec.Interfaces.Interface.ScsaTx.ScsaTx.State.counters:type_name -> openconfig.Macsec.Interfaces.Interface.ScsaTx.ScsaTx.State.Counters
	46,  // 45: openconfig.Macsec.Interfaces.Interface.ScsaTx.ScsaTx.State.sci_tx:type_name -> ywrapper.StringValue
	47,  // 46: openconfig.Macsec.Interfaces.Interface.ScsaTx.ScsaTx.State.Counters.sa_auth_only:type_name -> ywrapper.UintValue
	47,  // 47: openconfig.Macsec.Interfaces.Interface.ScsaTx.ScsaTx.State.Counters.sa_encrypted:type_name -> ywrapper.UintValue
	47,  // 48: openconfig.Macsec.Interfaces.Interface.ScsaTx.ScsaTx.State.Counters.sc_auth_only:type_name -> ywrapper.UintValue
	47,  // 49: openconfig.Macsec.Interfaces.Interface.ScsaTx.ScsaTx.State.Counters.sc_encrypted:type_name -> ywrapper.UintValue
	47,  // 50: openconfig.Macsec.Interfaces.Interface.State.Counters.rx_badtag_pkts:type_name -> ywrapper.UintValue
	47,  // 51: openconfig.Macsec.Interfaces.Interface.State.Counters.rx_nosci_pkts:type_name -> ywrapper.UintValue
	47,  // 52: openconfig.Macsec.Interfaces.Interface.State.Counters.rx_unknownsci_pkts:type_name -> ywrapper.UintValue
	47,  // 53: openconfig.Macsec.Interfaces.Interface.State.Counters.rx_untagged_pkts:type_name -> ywrapper.UintValue
	47,  // 54: openconfig.Macsec.Interfaces.Interface.State.Counters.tx_untagged_pkts:type_name -> ywrapper.UintValue
	32,  // 55: openconfig.Macsec.Mka.KeyChains.key_chain:type_name -> openconfig.Macsec.Mka.KeyChains.KeyChainKey
	41,  // 56: openconfig.Macsec.Mka.Policies.policy:type_name -> openconfig.Macsec.Mka.Policies.PolicyKey
	44,  // 57: openconfig.Macsec.Mka.State.counters:type_name -> openconfig.Macsec.Mka.State.Counters
	33,  // 58: openconfig.Macsec.Mka.KeyChains.KeyChain.config:type_name -> openconfig.Macsec.Mka.KeyChains.KeyChain.Config
	34,  // 59: openconfig.Macsec.Mka.KeyChains.KeyChain.mka_keys:type_name -> openconfig.Macsec.Mka.KeyChains.KeyChain.MkaKeys
	35,  // 60: openconfig.Macsec.Mka.KeyChains.KeyChain.state:type_name -> openconfig.Macsec.Mka.KeyChains.KeyChain.State
	31,  // 61: openconfig.Macsec.Mka.KeyChains.KeyChainKey.key_chain:type_name -> openconfig.Macsec.Mka.KeyChains.KeyChain
	46,  // 62: openconfig.Macsec.Mka.KeyChains.KeyChain.Config.name:type_name -> ywrapper.StringValue
	37,  // 63: openconfig.Macsec.Mka.KeyChains.KeyChain.MkaKeys.mka_key:type_name -> openconfig.Macsec.Mka.KeyChains.KeyChain.MkaKeys.MkaKeyKey
	46,  // 64: openconfig.Macsec.Mka.KeyChains.KeyChain.State.name:type_name -> ywrapper.StringValue
	38,  // 65: openconfig.Macsec.Mka.KeyChains.KeyChain.MkaKeys.MkaKey.config:type_name -> openconfig.Macsec.Mka.KeyChains.KeyChain.MkaKeys.MkaKey.Config
	39,  // 66: openconfig.Macsec.Mka.KeyChains.KeyChain.MkaKeys.MkaKey.state:type_name -> openconfig.Macsec.Mka.KeyChains.KeyChain.MkaKeys.MkaKey.State
	36,  // 67: openconfig.Macsec.Mka.KeyChains.KeyChain.MkaKeys.MkaKeyKey.mka_key:type_name -> openconfig.Macsec.Mka.KeyChains.KeyChain.MkaKeys.MkaKey
	0,   // 68: openconfig.Macsec.Mka.KeyChains.KeyChain.MkaKeys.MkaKey.Config.cryptographic_algorithm:type_name -> openconfig.Macsec.Mka.KeyChains.KeyChain.MkaKeys.MkaKey.Config.CryptographicAlgorithm
	1,   // 69: openconfig.Macsec.Mka.KeyChains.KeyChain.MkaKeys.MkaKey.Config.expiration_date_time_expirationdatetime:type_name -> openconfig.Macsec.Mka.KeyChains.KeyChain.MkaKeys.MkaKey.Config.ExpirationDateTime
	46,  // 70: openconfig.Macsec.Mka.KeyChains.KeyChain.MkaKeys.MkaKey.Config.id:type_name -> ywrapper.StringValue
	46,  // 71: openconfig.Macsec.Mka.KeyChains.KeyChain.MkaKeys.MkaKey.Config.key_clear_text:type_name -> ywrapper.StringValue
	2,   // 72: openconfig.Macsec.Mka.KeyChains.KeyChain.MkaKeys.MkaKey.Config.valid_date_time_validdatetime:type_name -> openconfig.Macsec.Mka.KeyChains.KeyChain.MkaKeys.MkaKey.Config.ValidDateTime
	3,   // 73: openconfig.Macsec.Mka.KeyChains.KeyChain.MkaKeys.MkaKey.State.cryptographic_algorithm:type_name -> openconfig.Macsec.Mka.KeyChains.KeyChain.MkaKeys.MkaKey.State.CryptographicAlgorithm
	4,   // 74: openconfig.Macsec.Mka.KeyChains.KeyChain.MkaKeys.MkaKey.State.expiration_date_time_expirationdatetime:type_name -> openconfig.Macsec.Mka.KeyChains.KeyChain.MkaKeys.MkaKey.State.ExpirationDateTime
	46,  // 75: openconfig.Macsec.Mka.KeyChains.KeyChain.MkaKeys.MkaKey.State.id:type_name -> ywrapper.StringValue
	46,  // 76: openconfig.Macsec.Mka.KeyChains.KeyChain.MkaKeys.MkaKey.State.key_clear_text:type_name -> ywrapper.StringValue
	5,   // 77: openconfig.Macsec.Mka.KeyChains.KeyChain.MkaKeys.MkaKey.State.valid_date_time_validdatetime:type_name -> openconfig.Macsec.Mka.KeyChains.KeyChain.MkaKeys.MkaKey.State.ValidDateTime
	42,  // 78: openconfig.Macsec.Mka.Policies.Policy.config:type_name -> openconfig.Macsec.Mka.Policies.Policy.Config
	43,  // 79: openconfig.Macsec.Mka.Policies.Policy.state:type_name -> openconfig.Macsec.Mka.Policies.Policy.State
	40,  // 80: openconfig.Macsec.Mka.Policies.PolicyKey.policy:type_name -> openconfig.Macsec.Mka.Policies.Policy
	48,  // 81: openconfig.Macsec.Mka.Policies.Policy.Config.confidentiality_offset:type_name -> openconfig.OpenconfigMacsecConfidentialityOffset
	45,  // 82: openconfig.Macsec.Mka.Policies.Policy.Config.delay_protection:type_name -> ywrapper.BoolValue
	45,  // 83: openconfig.Macsec.Mka.Policies.Policy.Config.include_icv_indicator:type_name -> ywrapper.BoolValue
	47,  // 84: openconfig.Macsec.Mka.Policies.Policy.Config.key_server_priority:type_name -> ywrapper.UintValue
	49,  // 85: openconfig.Macsec.Mka.Policies.Policy.Config.macsec_cipher_suite:type_name -> openconfig.OpenconfigMacsecMacsecCipherSuite
	46,  // 86: openconfig.Macsec.Mka.Policies.Policy.Config.name:type_name -> ywrapper.StringValue
	47,  // 87: openconfig.Macsec.Mka.Policies.Policy.Config.sak_rekey_interval:type_name -> ywrapper.UintValue
	45,  // 88: openconfig.Macsec.Mka.Policies.Policy.Config.sak_rekey_on_live_peer_loss:type_name -> ywrapper.BoolValue
	45,  // 89: openconfig.Macsec.Mka.Policies.Policy.Config.use_updated_eth_header:type_name -> ywrapper.BoolValue
	48,  // 90: openconfig.Macsec.Mka.Policies.Policy.State.confidentiality_offset:type_name -> openconfig.OpenconfigMacsecConfidentialityOffset
	45,  // 91: openconfig.Macsec.Mka.Policies.Policy.State.delay_protection:type_name -> ywrapper.BoolValue
	45,  // 92: openconfig.Macsec.Mka.Policies.Policy.State.include_icv_indicator:type_name -> ywrapper.BoolValue
	47,  // 93: openconfig.Macsec.Mka.Policies.Policy.State.key_server_priority:type_name -> ywrapper.UintValue
	49,  // 94: openconfig.Macsec.Mka.Policies.Policy.State.macsec_cipher_suite:type_name -> openconfig.OpenconfigMacsecMacsecCipherSuite
	46,  // 95: openconfig.Macsec.Mka.Policies.Policy.State.name:type_name -> ywrapper.StringValue
	47,  // 96: openconfig.Macsec.Mka.Policies.Policy.State.sak_rekey_interval:type_name -> ywrapper.UintValue
	45,  // 97: openconfig.Macsec.Mka.Policies.Policy.State.sak_rekey_on_live_peer_loss:type_name -> ywrapper.BoolValue
	45,  // 98: openconfig.Macsec.Mka.Policies.Policy.State.use_updated_eth_header:type_name -> ywrapper.BoolValue
	47,  // 99: openconfig.Macsec.Mka.State.Counters.in_mkpdu_bad_peer_errors:type_name -> ywrapper.UintValue
	47,  // 100: openconfig.Macsec.Mka.State.Counters.in_mkpdu_icv_verification_errors:type_name -> ywrapper.UintValue
	47,  // 101: openconfig.Macsec.Mka.State.Counters.in_mkpdu_peer_list_errors:type_name -> ywrapper.UintValue
	47,  // 102: openconfig.Macsec.Mka.State.Counters.in_mkpdu_validation_errors:type_name -> ywrapper.UintValue
	47,  // 103: openconfig.Macsec.Mka.State.Counters.out_mkpdu_errors:type_name -> ywrapper.UintValue
	47,  // 104: openconfig.Macsec.Mka.State.Counters.sak_cipher_mismatch_errors:type_name -> ywrapper.UintValue
	47,  // 105: openconfig.Macsec.Mka.State.Counters.sak_decryption_errors:type_name -> ywrapper.UintValue
	47,  // 106: openconfig.Macsec.Mka.State.Counters.sak_encryption_errors:type_name -> ywrapper.UintValue
	47,  // 107: openconfig.Macsec.Mka.State.Counters.sak_generation_errors:type_name -> ywrapper.UintValue
	47,  // 108: openconfig.Macsec.Mka.State.Counters.sak_hash_errors:type_name -> ywrapper.UintValue
	109, // [109:109] is the sub-list for method output_type
	109, // [109:109] is the sub-list for method input_type
	109, // [109:109] is the sub-list for extension type_name
	109, // [109:109] is the sub-list for extension extendee
	0,   // [0:109] is the sub-list for field type_name
}

func init() { file_openconfig_macsec_proto_init() }
func file_openconfig_macsec_proto_init() {
	if File_openconfig_macsec_proto != nil {
		return
	}
	file_openconfig_enums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_openconfig_macsec_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Macsec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_macsec_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Macsec_Interfaces); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_macsec_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Macsec_Mka); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_macsec_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Macsec_Interfaces_Interface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_macsec_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Macsec_Interfaces_InterfaceKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_macsec_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Macsec_Interfaces_Interface_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_macsec_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Macsec_Interfaces_Interface_Mka); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_macsec_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Macsec_Interfaces_Interface_ScsaRx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_macsec_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Macsec_Interfaces_Interface_ScsaTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_macsec_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Macsec_Interfaces_Interface_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_macsec_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Macsec_Interfaces_Interface_Mka_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_macsec_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Macsec_Interfaces_Interface_Mka_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_macsec_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Macsec_Interfaces_Interface_Mka_State_Counters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_macsec_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Macsec_Interfaces_Interface_ScsaRx_ScsaRx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_macsec_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Macsec_Interfaces_Interface_ScsaRx_ScsaRxKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_macsec_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Macsec_Interfaces_Interface_ScsaRx_ScsaRx_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_macsec_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Macsec_Interfaces_Interface_ScsaRx_ScsaRx_State_Counters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_macsec_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Macsec_Interfaces_Interface_ScsaTx_ScsaTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_macsec_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Macsec_Interfaces_Interface_ScsaTx_ScsaTxKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_macsec_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Macsec_Interfaces_Interface_ScsaTx_ScsaTx_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_macsec_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Macsec_Interfaces_Interface_ScsaTx_ScsaTx_State_Counters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_macsec_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Macsec_Interfaces_Interface_State_Counters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_macsec_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Macsec_Mka_KeyChains); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_macsec_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Macsec_Mka_Policies); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_macsec_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Macsec_Mka_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_macsec_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Macsec_Mka_KeyChains_KeyChain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_macsec_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Macsec_Mka_KeyChains_KeyChainKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_macsec_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Macsec_Mka_KeyChains_KeyChain_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_macsec_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Macsec_Mka_KeyChains_KeyChain_MkaKeys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_macsec_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Macsec_Mka_KeyChains_KeyChain_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_macsec_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_macsec_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKeyKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_macsec_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_macsec_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_macsec_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Macsec_Mka_Policies_Policy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_macsec_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Macsec_Mka_Policies_PolicyKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_macsec_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Macsec_Mka_Policies_Policy_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_macsec_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Macsec_Mka_Policies_Policy_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_macsec_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Macsec_Mka_State_Counters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_openconfig_macsec_proto_msgTypes[32].OneofWrappers = []interface{}{
		(*Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_ExpirationDateTimeExpirationdatetime)(nil),
		(*Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_ExpirationDateTimeString)(nil),
		(*Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_ValidDateTimeValiddatetime)(nil),
		(*Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_Config_ValidDateTimeString)(nil),
	}
	file_openconfig_macsec_proto_msgTypes[33].OneofWrappers = []interface{}{
		(*Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_ExpirationDateTimeExpirationdatetime)(nil),
		(*Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_ExpirationDateTimeString)(nil),
		(*Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_ValidDateTimeValiddatetime)(nil),
		(*Macsec_Mka_KeyChains_KeyChain_MkaKeys_MkaKey_State_ValidDateTimeString)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_openconfig_macsec_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   39,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_openconfig_macsec_proto_goTypes,
		DependencyIndexes: file_openconfig_macsec_proto_depIdxs,
		EnumInfos:         file_openconfig_macsec_proto_enumTypes,
		MessageInfos:      file_openconfig_macsec_proto_msgTypes,
	}.Build()
	File_openconfig_macsec_proto = out.File
	file_openconfig_macsec_proto_rawDesc = nil
	file_openconfig_macsec_proto_goTypes = nil
	file_openconfig_macsec_proto_depIdxs = nil
}
