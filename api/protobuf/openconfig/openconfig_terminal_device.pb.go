// openconfig.openconfig_terminal_device is generated by proto_generator as a protobuf
// representation of a YANG schema.
//
// Input schema modules:
//  - ../api/yang/public/doc/openconfig-example.yang
//  - ../api/yang/public/third_party/ietf/iana-if-type.yang
//  - ../api/yang/public/third_party/ietf/ietf-interfaces.yang
//  - ../api/yang/public/third_party/ietf/ietf-yang-types.yang
//  - ../api/yang/public/third_party/ietf/ietf-inet-types.yang
//  - ../api/yang/public/release/models/bfd/openconfig-bfd.yang
//  - ../api/yang/public/release/models/vlan/openconfig-vlan.yang
//  - ../api/yang/public/release/models/vlan/openconfig-vlan-types.yang
//  - ../api/yang/public/release/models/wifi/openconfig-access-points.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-mac.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-types.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-phy.yang
//  - ../api/yang/public/release/models/wifi/openconfig-ap-interfaces.yang
//  - ../api/yang/public/release/models/wifi/openconfig-ap-manager.yang
//  - ../api/yang/public/release/models/macsec/openconfig-macsec.yang
//  - ../api/yang/public/release/models/macsec/openconfig-macsec-types.yang
//  - ../api/yang/public/release/models/stp/openconfig-spanning-tree-types.yang
//  - ../api/yang/public/release/models/stp/openconfig-spanning-tree.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-errors.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-peer-group.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-types.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-global.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-neighbor.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common-structure.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-policy.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common-multiprotocol.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-types.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-port.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-fan.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-linecard.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-ext.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-cpu.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-psu.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-transceiver.yang
//  - ../api/yang/public/release/models/multicast/openconfig-pim-types.yang
//  - ../api/yang/public/release/models/multicast/openconfig-igmp-types.yang
//  - ../api/yang/public/release/models/multicast/openconfig-igmp.yang
//  - ../api/yang/public/release/models/multicast/openconfig-pim.yang
//  - ../api/yang/public/release/models/catalog/openconfig-module-catalog.yang
//  - ../api/yang/public/release/models/catalog/openconfig-catalog-types.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-interfaces.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-8021x.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-types.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-aggregate.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-poe.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-tunnel.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ip.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ethernet.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ethernet-ext.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ip-ext.yang
//  - ../api/yang/public/release/models/acl/openconfig-packet-match-types.yang
//  - ../api/yang/public/release/models/acl/openconfig-packet-match.yang
//  - ../api/yang/public/release/models/acl/openconfig-acl.yang
//  - ../api/yang/public/release/models/system/openconfig-license.yang
//  - ../api/yang/public/release/models/system/openconfig-system.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-radius.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa.yang
//  - ../api/yang/public/release/models/system/openconfig-system-management.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-types.yang
//  - ../api/yang/public/release/models/system/openconfig-procmon.yang
//  - ../api/yang/public/release/models/system/openconfig-messages.yang
//  - ../api/yang/public/release/models/system/openconfig-system-terminal.yang
//  - ../api/yang/public/release/models/system/openconfig-system-logging.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-tacacs.yang
//  - ../api/yang/public/release/models/system/openconfig-alarms.yang
//  - ../api/yang/public/release/models/system/openconfig-alarm-types.yang
//  - ../api/yang/public/release/models/policy/openconfig-policy-types.yang
//  - ../api/yang/public/release/models/policy/openconfig-routing-policy.yang
//  - ../api/yang/public/release/models/lacp/openconfig-lacp.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-wavelength-router.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-optical-amplifier.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-protection.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-channel-monitor.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-connectivity.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-optical-attenuator.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-common.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-types.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-terminal-device.yang
//  - ../api/yang/public/release/models/telemetry/openconfig-telemetry-types.yang
//  - ../api/yang/public/release/models/telemetry/openconfig-telemetry.yang
//  - ../api/yang/public/release/models/openflow/openconfig-openflow.yang
//  - ../api/yang/public/release/models/openflow/openconfig-openflow-types.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-tables.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-ext.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-table-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-shared-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-types.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-types.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-elements.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-interfaces.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-srte.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-forwarding-policies.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-interfaces.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-path-groups.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
//  - ../api/yang/public/release/models/relay-agent/openconfig-relay-agent.yang
//  - ../api/yang/public/release/models/lldp/openconfig-lldp.yang
//  - ../api/yang/public/release/models/lldp/openconfig-lldp-types.yang
//  - ../api/yang/public/release/models/openconfig-extensions.yang
//  - ../api/yang/public/release/models/types/openconfig-yang-types.yang
//  - ../api/yang/public/release/models/types/openconfig-inet-types.yang
//  - ../api/yang/public/release/models/types/openconfig-types.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-srte-policy.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-rsvp-sr-ext.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-segment-routing-types.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-segment-routing.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-types.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-igp.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-te.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-rsvp.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-static.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-sr.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-ldp.yang
//  - ../api/yang/public/release/models/probes/openconfig-probes-types.yang
//  - ../api/yang/public/release/models/probes/openconfig-probes.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-lsp.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-lsdb-types.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-policy.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-types.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-routing.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-area.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospf-policy.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-common.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-global.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-area-interface.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-lsdb.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospf-types.yang
//  - ../api/yang/public/release/models/local-routing/openconfig-local-routing.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-l3.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-l2.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-policy.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-types.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-mpls.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-common.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-types.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ipv6.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-pf.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-network-instance.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ipv4.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ethernet.yang

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        (unknown)
// source: openconfig_terminal_device.proto

package openconfig

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/openconfig/ygot/proto/yext"
	ywrapper "github.com/openconfig/ygot/proto/ywrapper"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type TerminalDevice_LogicalChannels_Channel_Ethernet_Config_ClientAls int32

const (
	TerminalDevice_LogicalChannels_Channel_Ethernet_Config_CLIENTALS_ETHERNET       TerminalDevice_LogicalChannels_Channel_Ethernet_Config_ClientAls = 0
	TerminalDevice_LogicalChannels_Channel_Ethernet_Config_CLIENTALS_NONE           TerminalDevice_LogicalChannels_Channel_Ethernet_Config_ClientAls = 1
	TerminalDevice_LogicalChannels_Channel_Ethernet_Config_CLIENTALS_LASER_SHUTDOWN TerminalDevice_LogicalChannels_Channel_Ethernet_Config_ClientAls = 2
)

// Enum value maps for TerminalDevice_LogicalChannels_Channel_Ethernet_Config_ClientAls.
var (
	TerminalDevice_LogicalChannels_Channel_Ethernet_Config_ClientAls_name = map[int32]string{
		0: "CLIENTALS_ETHERNET",
		1: "CLIENTALS_NONE",
		2: "CLIENTALS_LASER_SHUTDOWN",
	}
	TerminalDevice_LogicalChannels_Channel_Ethernet_Config_ClientAls_value = map[string]int32{
		"CLIENTALS_ETHERNET":       0,
		"CLIENTALS_NONE":           1,
		"CLIENTALS_LASER_SHUTDOWN": 2,
	}
)

func (x TerminalDevice_LogicalChannels_Channel_Ethernet_Config_ClientAls) Enum() *TerminalDevice_LogicalChannels_Channel_Ethernet_Config_ClientAls {
	p := new(TerminalDevice_LogicalChannels_Channel_Ethernet_Config_ClientAls)
	*p = x
	return p
}

func (x TerminalDevice_LogicalChannels_Channel_Ethernet_Config_ClientAls) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TerminalDevice_LogicalChannels_Channel_Ethernet_Config_ClientAls) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_terminal_device_proto_enumTypes[0].Descriptor()
}

func (TerminalDevice_LogicalChannels_Channel_Ethernet_Config_ClientAls) Type() protoreflect.EnumType {
	return &file_openconfig_terminal_device_proto_enumTypes[0]
}

func (x TerminalDevice_LogicalChannels_Channel_Ethernet_Config_ClientAls) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TerminalDevice_LogicalChannels_Channel_Ethernet_Config_ClientAls.Descriptor instead.
func (TerminalDevice_LogicalChannels_Channel_Ethernet_Config_ClientAls) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_terminal_device_proto_rawDescGZIP(), []int{0, 1, 0, 1, 0, 0}
}

type TerminalDevice_LogicalChannels_Channel_Ethernet_State_ClientAls int32

const (
	TerminalDevice_LogicalChannels_Channel_Ethernet_State_CLIENTALS_ETHERNET       TerminalDevice_LogicalChannels_Channel_Ethernet_State_ClientAls = 0
	TerminalDevice_LogicalChannels_Channel_Ethernet_State_CLIENTALS_NONE           TerminalDevice_LogicalChannels_Channel_Ethernet_State_ClientAls = 1
	TerminalDevice_LogicalChannels_Channel_Ethernet_State_CLIENTALS_LASER_SHUTDOWN TerminalDevice_LogicalChannels_Channel_Ethernet_State_ClientAls = 2
)

// Enum value maps for TerminalDevice_LogicalChannels_Channel_Ethernet_State_ClientAls.
var (
	TerminalDevice_LogicalChannels_Channel_Ethernet_State_ClientAls_name = map[int32]string{
		0: "CLIENTALS_ETHERNET",
		1: "CLIENTALS_NONE",
		2: "CLIENTALS_LASER_SHUTDOWN",
	}
	TerminalDevice_LogicalChannels_Channel_Ethernet_State_ClientAls_value = map[string]int32{
		"CLIENTALS_ETHERNET":       0,
		"CLIENTALS_NONE":           1,
		"CLIENTALS_LASER_SHUTDOWN": 2,
	}
)

func (x TerminalDevice_LogicalChannels_Channel_Ethernet_State_ClientAls) Enum() *TerminalDevice_LogicalChannels_Channel_Ethernet_State_ClientAls {
	p := new(TerminalDevice_LogicalChannels_Channel_Ethernet_State_ClientAls)
	*p = x
	return p
}

func (x TerminalDevice_LogicalChannels_Channel_Ethernet_State_ClientAls) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TerminalDevice_LogicalChannels_Channel_Ethernet_State_ClientAls) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_terminal_device_proto_enumTypes[1].Descriptor()
}

func (TerminalDevice_LogicalChannels_Channel_Ethernet_State_ClientAls) Type() protoreflect.EnumType {
	return &file_openconfig_terminal_device_proto_enumTypes[1]
}

func (x TerminalDevice_LogicalChannels_Channel_Ethernet_State_ClientAls) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TerminalDevice_LogicalChannels_Channel_Ethernet_State_ClientAls.Descriptor instead.
func (TerminalDevice_LogicalChannels_Channel_Ethernet_State_ClientAls) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_terminal_device_proto_rawDescGZIP(), []int{0, 1, 0, 1, 2, 0}
}

type TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config_AssignmentType int32

const (
	TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config_ASSIGNMENTTYPE_UNSET           TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config_AssignmentType = 0
	TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config_ASSIGNMENTTYPE_LOGICAL_CHANNEL TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config_AssignmentType = 1
	TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config_ASSIGNMENTTYPE_OPTICAL_CHANNEL TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config_AssignmentType = 2
)

// Enum value maps for TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config_AssignmentType.
var (
	TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config_AssignmentType_name = map[int32]string{
		0: "ASSIGNMENTTYPE_UNSET",
		1: "ASSIGNMENTTYPE_LOGICAL_CHANNEL",
		2: "ASSIGNMENTTYPE_OPTICAL_CHANNEL",
	}
	TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config_AssignmentType_value = map[string]int32{
		"ASSIGNMENTTYPE_UNSET":           0,
		"ASSIGNMENTTYPE_LOGICAL_CHANNEL": 1,
		"ASSIGNMENTTYPE_OPTICAL_CHANNEL": 2,
	}
)

func (x TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config_AssignmentType) Enum() *TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config_AssignmentType {
	p := new(TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config_AssignmentType)
	*p = x
	return p
}

func (x TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config_AssignmentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config_AssignmentType) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_terminal_device_proto_enumTypes[2].Descriptor()
}

func (TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config_AssignmentType) Type() protoreflect.EnumType {
	return &file_openconfig_terminal_device_proto_enumTypes[2]
}

func (x TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config_AssignmentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config_AssignmentType.Descriptor instead.
func (TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config_AssignmentType) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_terminal_device_proto_rawDescGZIP(), []int{0, 1, 0, 3, 0, 0, 0}
}

type TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_State_AssignmentType int32

const (
	TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_State_ASSIGNMENTTYPE_UNSET           TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_State_AssignmentType = 0
	TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_State_ASSIGNMENTTYPE_LOGICAL_CHANNEL TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_State_AssignmentType = 1
	TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_State_ASSIGNMENTTYPE_OPTICAL_CHANNEL TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_State_AssignmentType = 2
)

// Enum value maps for TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_State_AssignmentType.
var (
	TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_State_AssignmentType_name = map[int32]string{
		0: "ASSIGNMENTTYPE_UNSET",
		1: "ASSIGNMENTTYPE_LOGICAL_CHANNEL",
		2: "ASSIGNMENTTYPE_OPTICAL_CHANNEL",
	}
	TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_State_AssignmentType_value = map[string]int32{
		"ASSIGNMENTTYPE_UNSET":           0,
		"ASSIGNMENTTYPE_LOGICAL_CHANNEL": 1,
		"ASSIGNMENTTYPE_OPTICAL_CHANNEL": 2,
	}
)

func (x TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_State_AssignmentType) Enum() *TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_State_AssignmentType {
	p := new(TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_State_AssignmentType)
	*p = x
	return p
}

func (x TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_State_AssignmentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_State_AssignmentType) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_terminal_device_proto_enumTypes[3].Descriptor()
}

func (TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_State_AssignmentType) Type() protoreflect.EnumType {
	return &file_openconfig_terminal_device_proto_enumTypes[3]
}

func (x TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_State_AssignmentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_State_AssignmentType.Descriptor instead.
func (TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_State_AssignmentType) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_terminal_device_proto_rawDescGZIP(), []int{0, 1, 0, 3, 0, 1, 0}
}

type TerminalDevice_LogicalChannels_Channel_State_LinkState int32

const (
	TerminalDevice_LogicalChannels_Channel_State_LINKSTATE_UNSET   TerminalDevice_LogicalChannels_Channel_State_LinkState = 0
	TerminalDevice_LogicalChannels_Channel_State_LINKSTATE_UP      TerminalDevice_LogicalChannels_Channel_State_LinkState = 1
	TerminalDevice_LogicalChannels_Channel_State_LINKSTATE_DOWN    TerminalDevice_LogicalChannels_Channel_State_LinkState = 2
	TerminalDevice_LogicalChannels_Channel_State_LINKSTATE_TESTING TerminalDevice_LogicalChannels_Channel_State_LinkState = 3
)

// Enum value maps for TerminalDevice_LogicalChannels_Channel_State_LinkState.
var (
	TerminalDevice_LogicalChannels_Channel_State_LinkState_name = map[int32]string{
		0: "LINKSTATE_UNSET",
		1: "LINKSTATE_UP",
		2: "LINKSTATE_DOWN",
		3: "LINKSTATE_TESTING",
	}
	TerminalDevice_LogicalChannels_Channel_State_LinkState_value = map[string]int32{
		"LINKSTATE_UNSET":   0,
		"LINKSTATE_UP":      1,
		"LINKSTATE_DOWN":    2,
		"LINKSTATE_TESTING": 3,
	}
)

func (x TerminalDevice_LogicalChannels_Channel_State_LinkState) Enum() *TerminalDevice_LogicalChannels_Channel_State_LinkState {
	p := new(TerminalDevice_LogicalChannels_Channel_State_LinkState)
	*p = x
	return p
}

func (x TerminalDevice_LogicalChannels_Channel_State_LinkState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TerminalDevice_LogicalChannels_Channel_State_LinkState) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_terminal_device_proto_enumTypes[4].Descriptor()
}

func (TerminalDevice_LogicalChannels_Channel_State_LinkState) Type() protoreflect.EnumType {
	return &file_openconfig_terminal_device_proto_enumTypes[4]
}

func (x TerminalDevice_LogicalChannels_Channel_State_LinkState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TerminalDevice_LogicalChannels_Channel_State_LinkState.Descriptor instead.
func (TerminalDevice_LogicalChannels_Channel_State_LinkState) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_terminal_device_proto_rawDescGZIP(), []int{0, 1, 0, 5, 0}
}

type TerminalDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config           *TerminalDevice_Config           `protobuf:"bytes,4498449,opt,name=config,proto3" json:"config,omitempty"`
	LogicalChannels  *TerminalDevice_LogicalChannels  `protobuf:"bytes,495167037,opt,name=logical_channels,json=logicalChannels,proto3" json:"logical_channels,omitempty"`
	OperationalModes *TerminalDevice_OperationalModes `protobuf:"bytes,54138558,opt,name=operational_modes,json=operationalModes,proto3" json:"operational_modes,omitempty"`
	State            *TerminalDevice_State            `protobuf:"bytes,150416646,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *TerminalDevice) Reset() {
	*x = TerminalDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_terminal_device_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminalDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminalDevice) ProtoMessage() {}

func (x *TerminalDevice) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_terminal_device_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminalDevice.ProtoReflect.Descriptor instead.
func (*TerminalDevice) Descriptor() ([]byte, []int) {
	return file_openconfig_terminal_device_proto_rawDescGZIP(), []int{0}
}

func (x *TerminalDevice) GetConfig() *TerminalDevice_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *TerminalDevice) GetLogicalChannels() *TerminalDevice_LogicalChannels {
	if x != nil {
		return x.LogicalChannels
	}
	return nil
}

func (x *TerminalDevice) GetOperationalModes() *TerminalDevice_OperationalModes {
	if x != nil {
		return x.OperationalModes
	}
	return nil
}

func (x *TerminalDevice) GetState() *TerminalDevice_State {
	if x != nil {
		return x.State
	}
	return nil
}

type TerminalDevice_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TerminalDevice_Config) Reset() {
	*x = TerminalDevice_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_terminal_device_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminalDevice_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminalDevice_Config) ProtoMessage() {}

func (x *TerminalDevice_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_terminal_device_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminalDevice_Config.ProtoReflect.Descriptor instead.
func (*TerminalDevice_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_terminal_device_proto_rawDescGZIP(), []int{0, 0}
}

type TerminalDevice_LogicalChannels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel []*TerminalDevice_LogicalChannels_ChannelKey `protobuf:"bytes,528903937,rep,name=channel,proto3" json:"channel,omitempty"`
}

func (x *TerminalDevice_LogicalChannels) Reset() {
	*x = TerminalDevice_LogicalChannels{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_terminal_device_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminalDevice_LogicalChannels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminalDevice_LogicalChannels) ProtoMessage() {}

func (x *TerminalDevice_LogicalChannels) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_terminal_device_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminalDevice_LogicalChannels.ProtoReflect.Descriptor instead.
func (*TerminalDevice_LogicalChannels) Descriptor() ([]byte, []int) {
	return file_openconfig_terminal_device_proto_rawDescGZIP(), []int{0, 1}
}

func (x *TerminalDevice_LogicalChannels) GetChannel() []*TerminalDevice_LogicalChannels_ChannelKey {
	if x != nil {
		return x.Channel
	}
	return nil
}

type TerminalDevice_OperationalModes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode []*TerminalDevice_OperationalModes_ModeKey `protobuf:"bytes,507936888,rep,name=mode,proto3" json:"mode,omitempty"`
}

func (x *TerminalDevice_OperationalModes) Reset() {
	*x = TerminalDevice_OperationalModes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_terminal_device_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminalDevice_OperationalModes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminalDevice_OperationalModes) ProtoMessage() {}

func (x *TerminalDevice_OperationalModes) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_terminal_device_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminalDevice_OperationalModes.ProtoReflect.Descriptor instead.
func (*TerminalDevice_OperationalModes) Descriptor() ([]byte, []int) {
	return file_openconfig_terminal_device_proto_rawDescGZIP(), []int{0, 2}
}

func (x *TerminalDevice_OperationalModes) GetMode() []*TerminalDevice_OperationalModes_ModeKey {
	if x != nil {
		return x.Mode
	}
	return nil
}

type TerminalDevice_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TerminalDevice_State) Reset() {
	*x = TerminalDevice_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_terminal_device_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminalDevice_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminalDevice_State) ProtoMessage() {}

func (x *TerminalDevice_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_terminal_device_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminalDevice_State.ProtoReflect.Descriptor instead.
func (*TerminalDevice_State) Descriptor() ([]byte, []int) {
	return file_openconfig_terminal_device_proto_rawDescGZIP(), []int{0, 3}
}

type TerminalDevice_LogicalChannels_Channel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config                    *TerminalDevice_LogicalChannels_Channel_Config                    `protobuf:"bytes,375716998,opt,name=config,proto3" json:"config,omitempty"`
	Ethernet                  *TerminalDevice_LogicalChannels_Channel_Ethernet                  `protobuf:"bytes,53959837,opt,name=ethernet,proto3" json:"ethernet,omitempty"`
	Ingress                   *TerminalDevice_LogicalChannels_Channel_Ingress                   `protobuf:"bytes,121136753,opt,name=ingress,proto3" json:"ingress,omitempty"`
	LogicalChannelAssignments *TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments `protobuf:"bytes,383032150,opt,name=logical_channel_assignments,json=logicalChannelAssignments,proto3" json:"logical_channel_assignments,omitempty"`
	Otn                       *TerminalDevice_LogicalChannels_Channel_Otn                       `protobuf:"bytes,25263425,opt,name=otn,proto3" json:"otn,omitempty"`
	State                     *TerminalDevice_LogicalChannels_Channel_State                     `protobuf:"bytes,310909555,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *TerminalDevice_LogicalChannels_Channel) Reset() {
	*x = TerminalDevice_LogicalChannels_Channel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_terminal_device_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminalDevice_LogicalChannels_Channel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminalDevice_LogicalChannels_Channel) ProtoMessage() {}

func (x *TerminalDevice_LogicalChannels_Channel) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_terminal_device_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminalDevice_LogicalChannels_Channel.ProtoReflect.Descriptor instead.
func (*TerminalDevice_LogicalChannels_Channel) Descriptor() ([]byte, []int) {
	return file_openconfig_terminal_device_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *TerminalDevice_LogicalChannels_Channel) GetConfig() *TerminalDevice_LogicalChannels_Channel_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel) GetEthernet() *TerminalDevice_LogicalChannels_Channel_Ethernet {
	if x != nil {
		return x.Ethernet
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel) GetIngress() *TerminalDevice_LogicalChannels_Channel_Ingress {
	if x != nil {
		return x.Ingress
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel) GetLogicalChannelAssignments() *TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments {
	if x != nil {
		return x.LogicalChannelAssignments
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel) GetOtn() *TerminalDevice_LogicalChannels_Channel_Otn {
	if x != nil {
		return x.Otn
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel) GetState() *TerminalDevice_LogicalChannels_Channel_State {
	if x != nil {
		return x.State
	}
	return nil
}

type TerminalDevice_LogicalChannels_ChannelKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index   uint64                                  `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Channel *TerminalDevice_LogicalChannels_Channel `protobuf:"bytes,2,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (x *TerminalDevice_LogicalChannels_ChannelKey) Reset() {
	*x = TerminalDevice_LogicalChannels_ChannelKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_terminal_device_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminalDevice_LogicalChannels_ChannelKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminalDevice_LogicalChannels_ChannelKey) ProtoMessage() {}

func (x *TerminalDevice_LogicalChannels_ChannelKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_terminal_device_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminalDevice_LogicalChannels_ChannelKey.ProtoReflect.Descriptor instead.
func (*TerminalDevice_LogicalChannels_ChannelKey) Descriptor() ([]byte, []int) {
	return file_openconfig_terminal_device_proto_rawDescGZIP(), []int{0, 1, 1}
}

func (x *TerminalDevice_LogicalChannels_ChannelKey) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *TerminalDevice_LogicalChannels_ChannelKey) GetChannel() *TerminalDevice_LogicalChannels_Channel {
	if x != nil {
		return x.Channel
	}
	return nil
}

type TerminalDevice_LogicalChannels_Channel_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminState         OpenconfigTerminalDeviceAdminStateType             `protobuf:"varint,419524166,opt,name=admin_state,json=adminState,proto3,enum=openconfig.OpenconfigTerminalDeviceAdminStateType" json:"admin_state,omitempty"`
	Description        *ywrapper.StringValue                              `protobuf:"bytes,463402281,opt,name=description,proto3" json:"description,omitempty"`
	Index              *ywrapper.UintValue                                `protobuf:"bytes,375779007,opt,name=index,proto3" json:"index,omitempty"`
	LogicalChannelType OpenconfigTransportTypesLOGICALELEMENTPROTOCOLTYPE `protobuf:"varint,9398845,opt,name=logical_channel_type,json=logicalChannelType,proto3,enum=openconfig.OpenconfigTransportTypesLOGICALELEMENTPROTOCOLTYPE" json:"logical_channel_type,omitempty"`
	LoopbackMode       OpenconfigTerminalDeviceLoopbackModeType           `protobuf:"varint,369824790,opt,name=loopback_mode,json=loopbackMode,proto3,enum=openconfig.OpenconfigTerminalDeviceLoopbackModeType" json:"loopback_mode,omitempty"`
	RateClass          OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE     `protobuf:"varint,487395304,opt,name=rate_class,json=rateClass,proto3,enum=openconfig.OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE" json:"rate_class,omitempty"`
	TestSignal         *ywrapper.BoolValue                                `protobuf:"bytes,244958558,opt,name=test_signal,json=testSignal,proto3" json:"test_signal,omitempty"`
	TribProtocol       OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE      `protobuf:"varint,138398619,opt,name=trib_protocol,json=tribProtocol,proto3,enum=openconfig.OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE" json:"trib_protocol,omitempty"`
}

func (x *TerminalDevice_LogicalChannels_Channel_Config) Reset() {
	*x = TerminalDevice_LogicalChannels_Channel_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_terminal_device_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminalDevice_LogicalChannels_Channel_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminalDevice_LogicalChannels_Channel_Config) ProtoMessage() {}

func (x *TerminalDevice_LogicalChannels_Channel_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_terminal_device_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminalDevice_LogicalChannels_Channel_Config.ProtoReflect.Descriptor instead.
func (*TerminalDevice_LogicalChannels_Channel_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_terminal_device_proto_rawDescGZIP(), []int{0, 1, 0, 0}
}

func (x *TerminalDevice_LogicalChannels_Channel_Config) GetAdminState() OpenconfigTerminalDeviceAdminStateType {
	if x != nil {
		return x.AdminState
	}
	return OpenconfigTerminalDeviceAdminStateType_OPENCONFIGTERMINALDEVICEADMINSTATETYPE_UNSET
}

func (x *TerminalDevice_LogicalChannels_Channel_Config) GetDescription() *ywrapper.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Config) GetIndex() *ywrapper.UintValue {
	if x != nil {
		return x.Index
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Config) GetLogicalChannelType() OpenconfigTransportTypesLOGICALELEMENTPROTOCOLTYPE {
	if x != nil {
		return x.LogicalChannelType
	}
	return OpenconfigTransportTypesLOGICALELEMENTPROTOCOLTYPE_OPENCONFIGTRANSPORTTYPESLOGICALELEMENTPROTOCOLTYPE_UNSET
}

func (x *TerminalDevice_LogicalChannels_Channel_Config) GetLoopbackMode() OpenconfigTerminalDeviceLoopbackModeType {
	if x != nil {
		return x.LoopbackMode
	}
	return OpenconfigTerminalDeviceLoopbackModeType_OPENCONFIGTERMINALDEVICELOOPBACKMODETYPE_NONE
}

func (x *TerminalDevice_LogicalChannels_Channel_Config) GetRateClass() OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE {
	if x != nil {
		return x.RateClass
	}
	return OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE_OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_UNSET
}

func (x *TerminalDevice_LogicalChannels_Channel_Config) GetTestSignal() *ywrapper.BoolValue {
	if x != nil {
		return x.TestSignal
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Config) GetTribProtocol() OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE {
	if x != nil {
		return x.TribProtocol
	}
	return OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE_OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_UNSET
}

type TerminalDevice_LogicalChannels_Channel_Ethernet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *TerminalDevice_LogicalChannels_Channel_Ethernet_Config `protobuf:"bytes,63644242,opt,name=config,proto3" json:"config,omitempty"`
	Lldp   *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp   `protobuf:"bytes,144892076,opt,name=lldp,proto3" json:"lldp,omitempty"`
	State  *TerminalDevice_LogicalChannels_Channel_Ethernet_State  `protobuf:"bytes,197618383,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet) Reset() {
	*x = TerminalDevice_LogicalChannels_Channel_Ethernet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_terminal_device_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminalDevice_LogicalChannels_Channel_Ethernet) ProtoMessage() {}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_terminal_device_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminalDevice_LogicalChannels_Channel_Ethernet.ProtoReflect.Descriptor instead.
func (*TerminalDevice_LogicalChannels_Channel_Ethernet) Descriptor() ([]byte, []int) {
	return file_openconfig_terminal_device_proto_rawDescGZIP(), []int{0, 1, 0, 1}
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet) GetConfig() *TerminalDevice_LogicalChannels_Channel_Ethernet_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet) GetLldp() *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp {
	if x != nil {
		return x.Lldp
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet) GetState() *TerminalDevice_LogicalChannels_Channel_Ethernet_State {
	if x != nil {
		return x.State
	}
	return nil
}

type TerminalDevice_LogicalChannels_Channel_Ingress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *TerminalDevice_LogicalChannels_Channel_Ingress_Config `protobuf:"bytes,197300886,opt,name=config,proto3" json:"config,omitempty"`
	State  *TerminalDevice_LogicalChannels_Channel_Ingress_State  `protobuf:"bytes,375537987,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *TerminalDevice_LogicalChannels_Channel_Ingress) Reset() {
	*x = TerminalDevice_LogicalChannels_Channel_Ingress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_terminal_device_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminalDevice_LogicalChannels_Channel_Ingress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminalDevice_LogicalChannels_Channel_Ingress) ProtoMessage() {}

func (x *TerminalDevice_LogicalChannels_Channel_Ingress) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_terminal_device_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminalDevice_LogicalChannels_Channel_Ingress.ProtoReflect.Descriptor instead.
func (*TerminalDevice_LogicalChannels_Channel_Ingress) Descriptor() ([]byte, []int) {
	return file_openconfig_terminal_device_proto_rawDescGZIP(), []int{0, 1, 0, 2}
}

func (x *TerminalDevice_LogicalChannels_Channel_Ingress) GetConfig() *TerminalDevice_LogicalChannels_Channel_Ingress_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Ingress) GetState() *TerminalDevice_LogicalChannels_Channel_Ingress_State {
	if x != nil {
		return x.State
	}
	return nil
}

type TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Assignment []*TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_AssignmentKey `protobuf:"bytes,520668442,rep,name=assignment,proto3" json:"assignment,omitempty"`
}

func (x *TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments) Reset() {
	*x = TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_terminal_device_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments) ProtoMessage() {}

func (x *TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_terminal_device_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments.ProtoReflect.Descriptor instead.
func (*TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments) Descriptor() ([]byte, []int) {
	return file_openconfig_terminal_device_proto_rawDescGZIP(), []int{0, 1, 0, 3}
}

func (x *TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments) GetAssignment() []*TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_AssignmentKey {
	if x != nil {
		return x.Assignment
	}
	return nil
}

type TerminalDevice_LogicalChannels_Channel_Otn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *TerminalDevice_LogicalChannels_Channel_Otn_Config `protobuf:"bytes,122922822,opt,name=config,proto3" json:"config,omitempty"`
	State  *TerminalDevice_LogicalChannels_Channel_Otn_State  `protobuf:"bytes,431686707,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *TerminalDevice_LogicalChannels_Channel_Otn) Reset() {
	*x = TerminalDevice_LogicalChannels_Channel_Otn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_terminal_device_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminalDevice_LogicalChannels_Channel_Otn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminalDevice_LogicalChannels_Channel_Otn) ProtoMessage() {}

func (x *TerminalDevice_LogicalChannels_Channel_Otn) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_terminal_device_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminalDevice_LogicalChannels_Channel_Otn.ProtoReflect.Descriptor instead.
func (*TerminalDevice_LogicalChannels_Channel_Otn) Descriptor() ([]byte, []int) {
	return file_openconfig_terminal_device_proto_rawDescGZIP(), []int{0, 1, 0, 4}
}

func (x *TerminalDevice_LogicalChannels_Channel_Otn) GetConfig() *TerminalDevice_LogicalChannels_Channel_Otn_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Otn) GetState() *TerminalDevice_LogicalChannels_Channel_Otn_State {
	if x != nil {
		return x.State
	}
	return nil
}

type TerminalDevice_LogicalChannels_Channel_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminState         OpenconfigTerminalDeviceAdminStateType                 `protobuf:"varint,126844211,opt,name=admin_state,json=adminState,proto3,enum=openconfig.OpenconfigTerminalDeviceAdminStateType" json:"admin_state,omitempty"`
	Description        *ywrapper.StringValue                                  `protobuf:"bytes,272041836,opt,name=description,proto3" json:"description,omitempty"`
	Index              *ywrapper.UintValue                                    `protobuf:"bytes,118301378,opt,name=index,proto3" json:"index,omitempty"`
	LinkState          TerminalDevice_LogicalChannels_Channel_State_LinkState `protobuf:"varint,264729618,opt,name=link_state,json=linkState,proto3,enum=openconfig.TerminalDevice_LogicalChannels_Channel_State_LinkState" json:"link_state,omitempty"`
	LogicalChannelType OpenconfigTransportTypesLOGICALELEMENTPROTOCOLTYPE     `protobuf:"varint,81142,opt,name=logical_channel_type,json=logicalChannelType,proto3,enum=openconfig.OpenconfigTransportTypesLOGICALELEMENTPROTOCOLTYPE" json:"logical_channel_type,omitempty"`
	LoopbackMode       OpenconfigTerminalDeviceLoopbackModeType               `protobuf:"varint,525273123,opt,name=loopback_mode,json=loopbackMode,proto3,enum=openconfig.OpenconfigTerminalDeviceLoopbackModeType" json:"loopback_mode,omitempty"`
	RateClass          OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE         `protobuf:"varint,232587011,opt,name=rate_class,json=rateClass,proto3,enum=openconfig.OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE" json:"rate_class,omitempty"`
	TestSignal         *ywrapper.BoolValue                                    `protobuf:"bytes,412085659,opt,name=test_signal,json=testSignal,proto3" json:"test_signal,omitempty"`
	TribProtocol       OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE          `protobuf:"varint,455160550,opt,name=trib_protocol,json=tribProtocol,proto3,enum=openconfig.OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE" json:"trib_protocol,omitempty"`
}

func (x *TerminalDevice_LogicalChannels_Channel_State) Reset() {
	*x = TerminalDevice_LogicalChannels_Channel_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_terminal_device_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminalDevice_LogicalChannels_Channel_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminalDevice_LogicalChannels_Channel_State) ProtoMessage() {}

func (x *TerminalDevice_LogicalChannels_Channel_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_terminal_device_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminalDevice_LogicalChannels_Channel_State.ProtoReflect.Descriptor instead.
func (*TerminalDevice_LogicalChannels_Channel_State) Descriptor() ([]byte, []int) {
	return file_openconfig_terminal_device_proto_rawDescGZIP(), []int{0, 1, 0, 5}
}

func (x *TerminalDevice_LogicalChannels_Channel_State) GetAdminState() OpenconfigTerminalDeviceAdminStateType {
	if x != nil {
		return x.AdminState
	}
	return OpenconfigTerminalDeviceAdminStateType_OPENCONFIGTERMINALDEVICEADMINSTATETYPE_UNSET
}

func (x *TerminalDevice_LogicalChannels_Channel_State) GetDescription() *ywrapper.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_State) GetIndex() *ywrapper.UintValue {
	if x != nil {
		return x.Index
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_State) GetLinkState() TerminalDevice_LogicalChannels_Channel_State_LinkState {
	if x != nil {
		return x.LinkState
	}
	return TerminalDevice_LogicalChannels_Channel_State_LINKSTATE_UNSET
}

func (x *TerminalDevice_LogicalChannels_Channel_State) GetLogicalChannelType() OpenconfigTransportTypesLOGICALELEMENTPROTOCOLTYPE {
	if x != nil {
		return x.LogicalChannelType
	}
	return OpenconfigTransportTypesLOGICALELEMENTPROTOCOLTYPE_OPENCONFIGTRANSPORTTYPESLOGICALELEMENTPROTOCOLTYPE_UNSET
}

func (x *TerminalDevice_LogicalChannels_Channel_State) GetLoopbackMode() OpenconfigTerminalDeviceLoopbackModeType {
	if x != nil {
		return x.LoopbackMode
	}
	return OpenconfigTerminalDeviceLoopbackModeType_OPENCONFIGTERMINALDEVICELOOPBACKMODETYPE_NONE
}

func (x *TerminalDevice_LogicalChannels_Channel_State) GetRateClass() OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE {
	if x != nil {
		return x.RateClass
	}
	return OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE_OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_UNSET
}

func (x *TerminalDevice_LogicalChannels_Channel_State) GetTestSignal() *ywrapper.BoolValue {
	if x != nil {
		return x.TestSignal
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_State) GetTribProtocol() OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE {
	if x != nil {
		return x.TribProtocol
	}
	return OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE_OPENCONFIGTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_UNSET
}

type TerminalDevice_LogicalChannels_Channel_Ethernet_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlsDelay  *ywrapper.UintValue                                              `protobuf:"bytes,206280371,opt,name=als_delay,json=alsDelay,proto3" json:"als_delay,omitempty"`
	ClientAls TerminalDevice_LogicalChannels_Channel_Ethernet_Config_ClientAls `protobuf:"varint,526285933,opt,name=client_als,json=clientAls,proto3,enum=openconfig.TerminalDevice_LogicalChannels_Channel_Ethernet_Config_ClientAls" json:"client_als,omitempty"`
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Config) Reset() {
	*x = TerminalDevice_LogicalChannels_Channel_Ethernet_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_terminal_device_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminalDevice_LogicalChannels_Channel_Ethernet_Config) ProtoMessage() {}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_terminal_device_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminalDevice_LogicalChannels_Channel_Ethernet_Config.ProtoReflect.Descriptor instead.
func (*TerminalDevice_LogicalChannels_Channel_Ethernet_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_terminal_device_proto_rawDescGZIP(), []int{0, 1, 0, 1, 0}
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Config) GetAlsDelay() *ywrapper.UintValue {
	if x != nil {
		return x.AlsDelay
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Config) GetClientAls() TerminalDevice_LogicalChannels_Channel_Ethernet_Config_ClientAls {
	if x != nil {
		return x.ClientAls
	}
	return TerminalDevice_LogicalChannels_Channel_Ethernet_Config_CLIENTALS_ETHERNET
}

type TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config    *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Config    `protobuf:"bytes,60730401,opt,name=config,proto3" json:"config,omitempty"`
	Neighbors *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors `protobuf:"bytes,151902948,opt,name=neighbors,proto3" json:"neighbors,omitempty"`
	State     *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_State     `protobuf:"bytes,422703638,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp) Reset() {
	*x = TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_terminal_device_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp) ProtoMessage() {}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_terminal_device_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp.ProtoReflect.Descriptor instead.
func (*TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp) Descriptor() ([]byte, []int) {
	return file_openconfig_terminal_device_proto_rawDescGZIP(), []int{0, 1, 0, 1, 1}
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp) GetConfig() *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp) GetNeighbors() *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors {
	if x != nil {
		return x.Neighbors
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp) GetState() *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_State {
	if x != nil {
		return x.State
	}
	return nil
}

type TerminalDevice_LogicalChannels_Channel_Ethernet_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlsDelay                    *ywrapper.UintValue                                             `protobuf:"bytes,84296442,opt,name=als_delay,json=alsDelay,proto3" json:"als_delay,omitempty"`
	ClientAls                   TerminalDevice_LogicalChannels_Channel_Ethernet_State_ClientAls `protobuf:"varint,177087110,opt,name=client_als,json=clientAls,proto3,enum=openconfig.TerminalDevice_LogicalChannels_Channel_Ethernet_State_ClientAls" json:"client_als,omitempty"`
	In_8021QFrames              *ywrapper.UintValue                                             `protobuf:"bytes,144594791,opt,name=in_8021q_frames,json=in8021qFrames,proto3" json:"in_8021q_frames,omitempty"`
	InBlockErrors               *ywrapper.UintValue                                             `protobuf:"bytes,194194973,opt,name=in_block_errors,json=inBlockErrors,proto3" json:"in_block_errors,omitempty"`
	InCrcErrors                 *ywrapper.UintValue                                             `protobuf:"bytes,397283042,opt,name=in_crc_errors,json=inCrcErrors,proto3" json:"in_crc_errors,omitempty"`
	InFragmentFrames            *ywrapper.UintValue                                             `protobuf:"bytes,40398731,opt,name=in_fragment_frames,json=inFragmentFrames,proto3" json:"in_fragment_frames,omitempty"`
	InJabberFrames              *ywrapper.UintValue                                             `protobuf:"bytes,447323069,opt,name=in_jabber_frames,json=inJabberFrames,proto3" json:"in_jabber_frames,omitempty"`
	InMacControlFrames          *ywrapper.UintValue                                             `protobuf:"bytes,339653696,opt,name=in_mac_control_frames,json=inMacControlFrames,proto3" json:"in_mac_control_frames,omitempty"`
	InMacPauseFrames            *ywrapper.UintValue                                             `protobuf:"bytes,429314703,opt,name=in_mac_pause_frames,json=inMacPauseFrames,proto3" json:"in_mac_pause_frames,omitempty"`
	InOversizeFrames            *ywrapper.UintValue                                             `protobuf:"bytes,499149204,opt,name=in_oversize_frames,json=inOversizeFrames,proto3" json:"in_oversize_frames,omitempty"`
	InPcsBipErrors              *ywrapper.UintValue                                             `protobuf:"bytes,507663376,opt,name=in_pcs_bip_errors,json=inPcsBipErrors,proto3" json:"in_pcs_bip_errors,omitempty"`
	InPcsErroredSeconds         *ywrapper.UintValue                                             `protobuf:"bytes,452995564,opt,name=in_pcs_errored_seconds,json=inPcsErroredSeconds,proto3" json:"in_pcs_errored_seconds,omitempty"`
	InPcsSeverelyErroredSeconds *ywrapper.UintValue                                             `protobuf:"bytes,66168736,opt,name=in_pcs_severely_errored_seconds,json=inPcsSeverelyErroredSeconds,proto3" json:"in_pcs_severely_errored_seconds,omitempty"`
	InPcsUnavailableSeconds     *ywrapper.UintValue                                             `protobuf:"bytes,508697779,opt,name=in_pcs_unavailable_seconds,json=inPcsUnavailableSeconds,proto3" json:"in_pcs_unavailable_seconds,omitempty"`
	InUndersizeFrames           *ywrapper.UintValue                                             `protobuf:"bytes,196779272,opt,name=in_undersize_frames,json=inUndersizeFrames,proto3" json:"in_undersize_frames,omitempty"`
	Out_8021QFrames             *ywrapper.UintValue                                             `protobuf:"bytes,198455804,opt,name=out_8021q_frames,json=out8021qFrames,proto3" json:"out_8021q_frames,omitempty"`
	OutBlockErrors              *ywrapper.UintValue                                             `protobuf:"bytes,422313002,opt,name=out_block_errors,json=outBlockErrors,proto3" json:"out_block_errors,omitempty"`
	OutCrcErrors                *ywrapper.UintValue                                             `protobuf:"bytes,132392105,opt,name=out_crc_errors,json=outCrcErrors,proto3" json:"out_crc_errors,omitempty"`
	OutMacControlFrames         *ywrapper.UintValue                                             `protobuf:"bytes,31760815,opt,name=out_mac_control_frames,json=outMacControlFrames,proto3" json:"out_mac_control_frames,omitempty"`
	OutMacPauseFrames           *ywrapper.UintValue                                             `protobuf:"bytes,440130020,opt,name=out_mac_pause_frames,json=outMacPauseFrames,proto3" json:"out_mac_pause_frames,omitempty"`
	OutPcsBipErrors             *ywrapper.UintValue                                             `protobuf:"bytes,207692963,opt,name=out_pcs_bip_errors,json=outPcsBipErrors,proto3" json:"out_pcs_bip_errors,omitempty"`
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_State) Reset() {
	*x = TerminalDevice_LogicalChannels_Channel_Ethernet_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_terminal_device_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminalDevice_LogicalChannels_Channel_Ethernet_State) ProtoMessage() {}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_terminal_device_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminalDevice_LogicalChannels_Channel_Ethernet_State.ProtoReflect.Descriptor instead.
func (*TerminalDevice_LogicalChannels_Channel_Ethernet_State) Descriptor() ([]byte, []int) {
	return file_openconfig_terminal_device_proto_rawDescGZIP(), []int{0, 1, 0, 1, 2}
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_State) GetAlsDelay() *ywrapper.UintValue {
	if x != nil {
		return x.AlsDelay
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_State) GetClientAls() TerminalDevice_LogicalChannels_Channel_Ethernet_State_ClientAls {
	if x != nil {
		return x.ClientAls
	}
	return TerminalDevice_LogicalChannels_Channel_Ethernet_State_CLIENTALS_ETHERNET
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_State) GetIn_8021QFrames() *ywrapper.UintValue {
	if x != nil {
		return x.In_8021QFrames
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_State) GetInBlockErrors() *ywrapper.UintValue {
	if x != nil {
		return x.InBlockErrors
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_State) GetInCrcErrors() *ywrapper.UintValue {
	if x != nil {
		return x.InCrcErrors
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_State) GetInFragmentFrames() *ywrapper.UintValue {
	if x != nil {
		return x.InFragmentFrames
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_State) GetInJabberFrames() *ywrapper.UintValue {
	if x != nil {
		return x.InJabberFrames
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_State) GetInMacControlFrames() *ywrapper.UintValue {
	if x != nil {
		return x.InMacControlFrames
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_State) GetInMacPauseFrames() *ywrapper.UintValue {
	if x != nil {
		return x.InMacPauseFrames
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_State) GetInOversizeFrames() *ywrapper.UintValue {
	if x != nil {
		return x.InOversizeFrames
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_State) GetInPcsBipErrors() *ywrapper.UintValue {
	if x != nil {
		return x.InPcsBipErrors
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_State) GetInPcsErroredSeconds() *ywrapper.UintValue {
	if x != nil {
		return x.InPcsErroredSeconds
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_State) GetInPcsSeverelyErroredSeconds() *ywrapper.UintValue {
	if x != nil {
		return x.InPcsSeverelyErroredSeconds
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_State) GetInPcsUnavailableSeconds() *ywrapper.UintValue {
	if x != nil {
		return x.InPcsUnavailableSeconds
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_State) GetInUndersizeFrames() *ywrapper.UintValue {
	if x != nil {
		return x.InUndersizeFrames
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_State) GetOut_8021QFrames() *ywrapper.UintValue {
	if x != nil {
		return x.Out_8021QFrames
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_State) GetOutBlockErrors() *ywrapper.UintValue {
	if x != nil {
		return x.OutBlockErrors
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_State) GetOutCrcErrors() *ywrapper.UintValue {
	if x != nil {
		return x.OutCrcErrors
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_State) GetOutMacControlFrames() *ywrapper.UintValue {
	if x != nil {
		return x.OutMacControlFrames
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_State) GetOutMacPauseFrames() *ywrapper.UintValue {
	if x != nil {
		return x.OutMacPauseFrames
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_State) GetOutPcsBipErrors() *ywrapper.UintValue {
	if x != nil {
		return x.OutPcsBipErrors
	}
	return nil
}

type TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled  *ywrapper.BoolValue `protobuf:"bytes,435301079,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Snooping *ywrapper.BoolValue `protobuf:"bytes,460110401,opt,name=snooping,proto3" json:"snooping,omitempty"`
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Config) Reset() {
	*x = TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_terminal_device_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Config) ProtoMessage() {}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_terminal_device_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Config.ProtoReflect.Descriptor instead.
func (*TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_terminal_device_proto_rawDescGZIP(), []int{0, 1, 0, 1, 1, 0}
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Config) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Config) GetSnooping() *ywrapper.BoolValue {
	if x != nil {
		return x.Snooping
	}
	return nil
}

type TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Neighbor []*TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_NeighborKey `protobuf:"bytes,279784485,rep,name=neighbor,proto3" json:"neighbor,omitempty"`
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors) Reset() {
	*x = TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_terminal_device_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors) ProtoMessage() {}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_terminal_device_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors.ProtoReflect.Descriptor instead.
func (*TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors) Descriptor() ([]byte, []int) {
	return file_openconfig_terminal_device_proto_rawDescGZIP(), []int{0, 1, 0, 1, 1, 1}
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors) GetNeighbor() []*TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_NeighborKey {
	if x != nil {
		return x.Neighbor
	}
	return nil
}

type TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Counters *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_State_Counters `protobuf:"bytes,40946890,opt,name=counters,proto3" json:"counters,omitempty"`
	Enabled  *ywrapper.BoolValue                                                  `protobuf:"bytes,79636356,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Snooping *ywrapper.BoolValue                                                  `protobuf:"bytes,431318828,opt,name=snooping,proto3" json:"snooping,omitempty"`
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_State) Reset() {
	*x = TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_terminal_device_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_State) ProtoMessage() {}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_terminal_device_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_State.ProtoReflect.Descriptor instead.
func (*TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_State) Descriptor() ([]byte, []int) {
	return file_openconfig_terminal_device_proto_rawDescGZIP(), []int{0, 1, 0, 1, 1, 2}
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_State) GetCounters() *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_State_Counters {
	if x != nil {
		return x.Counters
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_State) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_State) GetSnooping() *ywrapper.BoolValue {
	if x != nil {
		return x.Snooping
	}
	return nil
}

type TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config     *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_Config     `protobuf:"bytes,445606762,opt,name=config,proto3" json:"config,omitempty"`
	CustomTlvs *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_CustomTlvs `protobuf:"bytes,43480311,opt,name=custom_tlvs,json=customTlvs,proto3" json:"custom_tlvs,omitempty"`
	State      *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_State      `protobuf:"bytes,10449031,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor) Reset() {
	*x = TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_terminal_device_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor) ProtoMessage() {}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_terminal_device_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor.ProtoReflect.Descriptor instead.
func (*TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor) Descriptor() ([]byte, []int) {
	return file_openconfig_terminal_device_proto_rawDescGZIP(), []int{0, 1, 0, 1, 1, 1, 0}
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor) GetConfig() *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor) GetCustomTlvs() *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_CustomTlvs {
	if x != nil {
		return x.CustomTlvs
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor) GetState() *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_State {
	if x != nil {
		return x.State
	}
	return nil
}

type TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_NeighborKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string                                                                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Neighbor *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor `protobuf:"bytes,2,opt,name=neighbor,proto3" json:"neighbor,omitempty"`
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_NeighborKey) Reset() {
	*x = TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_NeighborKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_terminal_device_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_NeighborKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_NeighborKey) ProtoMessage() {}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_NeighborKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_terminal_device_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_NeighborKey.ProtoReflect.Descriptor instead.
func (*TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_NeighborKey) Descriptor() ([]byte, []int) {
	return file_openconfig_terminal_device_proto_rawDescGZIP(), []int{0, 1, 0, 1, 1, 1, 1}
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_NeighborKey) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_NeighborKey) GetNeighbor() *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor {
	if x != nil {
		return x.Neighbor
	}
	return nil
}

type TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_Config) Reset() {
	*x = TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_terminal_device_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_Config) ProtoMessage() {
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_terminal_device_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_Config.ProtoReflect.Descriptor instead.
func (*TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_terminal_device_proto_rawDescGZIP(), []int{0, 1, 0, 1, 1, 1, 0, 0}
}

type TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_CustomTlvs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tlv []*TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_CustomTlvs_TlvKey `protobuf:"bytes,279945136,rep,name=tlv,proto3" json:"tlv,omitempty"`
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_CustomTlvs) Reset() {
	*x = TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_CustomTlvs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_terminal_device_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_CustomTlvs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_CustomTlvs) ProtoMessage() {
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_CustomTlvs) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_terminal_device_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_CustomTlvs.ProtoReflect.Descriptor instead.
func (*TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_CustomTlvs) Descriptor() ([]byte, []int) {
	return file_openconfig_terminal_device_proto_rawDescGZIP(), []int{0, 1, 0, 1, 1, 1, 0, 1}
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_CustomTlvs) GetTlv() []*TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_CustomTlvs_TlvKey {
	if x != nil {
		return x.Tlv
	}
	return nil
}

type TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Age                   *ywrapper.UintValue         `protobuf:"bytes,163799515,opt,name=age,proto3" json:"age,omitempty"`
	ChassisId             *ywrapper.StringValue       `protobuf:"bytes,171964012,opt,name=chassis_id,json=chassisId,proto3" json:"chassis_id,omitempty"`
	ChassisIdType         OpenconfigLldpChassisIdType `protobuf:"varint,76924033,opt,name=chassis_id_type,json=chassisIdType,proto3,enum=openconfig.OpenconfigLldpChassisIdType" json:"chassis_id_type,omitempty"`
	Id                    *ywrapper.StringValue       `protobuf:"bytes,218798513,opt,name=id,proto3" json:"id,omitempty"`
	LastUpdate            *ywrapper.IntValue          `protobuf:"bytes,169034804,opt,name=last_update,json=lastUpdate,proto3" json:"last_update,omitempty"`
	ManagementAddress     *ywrapper.StringValue       `protobuf:"bytes,142552680,opt,name=management_address,json=managementAddress,proto3" json:"management_address,omitempty"`
	ManagementAddressType *ywrapper.StringValue       `protobuf:"bytes,40317453,opt,name=management_address_type,json=managementAddressType,proto3" json:"management_address_type,omitempty"`
	PortDescription       *ywrapper.StringValue       `protobuf:"bytes,131440210,opt,name=port_description,json=portDescription,proto3" json:"port_description,omitempty"`
	PortId                *ywrapper.StringValue       `protobuf:"bytes,25886923,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	PortIdType            OpenconfigLldpPortIdType    `protobuf:"varint,513240244,opt,name=port_id_type,json=portIdType,proto3,enum=openconfig.OpenconfigLldpPortIdType" json:"port_id_type,omitempty"`
	SystemDescription     *ywrapper.StringValue       `protobuf:"bytes,289662424,opt,name=system_description,json=systemDescription,proto3" json:"system_description,omitempty"`
	SystemName            *ywrapper.StringValue       `protobuf:"bytes,488334167,opt,name=system_name,json=systemName,proto3" json:"system_name,omitempty"`
	Ttl                   *ywrapper.UintValue         `protobuf:"bytes,445620594,opt,name=ttl,proto3" json:"ttl,omitempty"`
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_State) Reset() {
	*x = TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_terminal_device_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_State) ProtoMessage() {
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_terminal_device_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_State.ProtoReflect.Descriptor instead.
func (*TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_State) Descriptor() ([]byte, []int) {
	return file_openconfig_terminal_device_proto_rawDescGZIP(), []int{0, 1, 0, 1, 1, 1, 0, 2}
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_State) GetAge() *ywrapper.UintValue {
	if x != nil {
		return x.Age
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_State) GetChassisId() *ywrapper.StringValue {
	if x != nil {
		return x.ChassisId
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_State) GetChassisIdType() OpenconfigLldpChassisIdType {
	if x != nil {
		return x.ChassisIdType
	}
	return OpenconfigLldpChassisIdType_OPENCONFIGLLDPCHASSISIDTYPE_UNSET
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_State) GetId() *ywrapper.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_State) GetLastUpdate() *ywrapper.IntValue {
	if x != nil {
		return x.LastUpdate
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_State) GetManagementAddress() *ywrapper.StringValue {
	if x != nil {
		return x.ManagementAddress
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_State) GetManagementAddressType() *ywrapper.StringValue {
	if x != nil {
		return x.ManagementAddressType
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_State) GetPortDescription() *ywrapper.StringValue {
	if x != nil {
		return x.PortDescription
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_State) GetPortId() *ywrapper.StringValue {
	if x != nil {
		return x.PortId
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_State) GetPortIdType() OpenconfigLldpPortIdType {
	if x != nil {
		return x.PortIdType
	}
	return OpenconfigLldpPortIdType_OPENCONFIGLLDPPORTIDTYPE_UNSET
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_State) GetSystemDescription() *ywrapper.StringValue {
	if x != nil {
		return x.SystemDescription
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_State) GetSystemName() *ywrapper.StringValue {
	if x != nil {
		return x.SystemName
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_State) GetTtl() *ywrapper.UintValue {
	if x != nil {
		return x.Ttl
	}
	return nil
}

type TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_CustomTlvs_Tlv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_CustomTlvs_Tlv_Config `protobuf:"bytes,136531269,opt,name=config,proto3" json:"config,omitempty"`
	State  *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_CustomTlvs_Tlv_State  `protobuf:"bytes,371160378,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_CustomTlvs_Tlv) Reset() {
	*x = TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_CustomTlvs_Tlv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_terminal_device_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_CustomTlvs_Tlv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_CustomTlvs_Tlv) ProtoMessage() {
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_CustomTlvs_Tlv) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_terminal_device_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_CustomTlvs_Tlv.ProtoReflect.Descriptor instead.
func (*TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_CustomTlvs_Tlv) Descriptor() ([]byte, []int) {
	return file_openconfig_terminal_device_proto_rawDescGZIP(), []int{0, 1, 0, 1, 1, 1, 0, 1, 0}
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_CustomTlvs_Tlv) GetConfig() *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_CustomTlvs_Tlv_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_CustomTlvs_Tlv) GetState() *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_CustomTlvs_Tlv_State {
	if x != nil {
		return x.State
	}
	return nil
}

type TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_CustomTlvs_TlvKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       int64                                                                                   `protobuf:"zigzag64,1,opt,name=type,proto3" json:"type,omitempty"`
	Oui        string                                                                                  `protobuf:"bytes,2,opt,name=oui,proto3" json:"oui,omitempty"`
	OuiSubtype string                                                                                  `protobuf:"bytes,3,opt,name=oui_subtype,json=ouiSubtype,proto3" json:"oui_subtype,omitempty"`
	Tlv        *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_CustomTlvs_Tlv `protobuf:"bytes,4,opt,name=tlv,proto3" json:"tlv,omitempty"`
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_CustomTlvs_TlvKey) Reset() {
	*x = TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_CustomTlvs_TlvKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_terminal_device_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_CustomTlvs_TlvKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_CustomTlvs_TlvKey) ProtoMessage() {
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_CustomTlvs_TlvKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_terminal_device_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_CustomTlvs_TlvKey.ProtoReflect.Descriptor instead.
func (*TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_CustomTlvs_TlvKey) Descriptor() ([]byte, []int) {
	return file_openconfig_terminal_device_proto_rawDescGZIP(), []int{0, 1, 0, 1, 1, 1, 0, 1, 1}
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_CustomTlvs_TlvKey) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_CustomTlvs_TlvKey) GetOui() string {
	if x != nil {
		return x.Oui
	}
	return ""
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_CustomTlvs_TlvKey) GetOuiSubtype() string {
	if x != nil {
		return x.OuiSubtype
	}
	return ""
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_CustomTlvs_TlvKey) GetTlv() *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_CustomTlvs_Tlv {
	if x != nil {
		return x.Tlv
	}
	return nil
}

type TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_CustomTlvs_Tlv_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_CustomTlvs_Tlv_Config) Reset() {
	*x = TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_CustomTlvs_Tlv_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_terminal_device_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_CustomTlvs_Tlv_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_CustomTlvs_Tlv_Config) ProtoMessage() {
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_CustomTlvs_Tlv_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_terminal_device_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_CustomTlvs_Tlv_Config.ProtoReflect.Descriptor instead.
func (*TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_CustomTlvs_Tlv_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_terminal_device_proto_rawDescGZIP(), []int{0, 1, 0, 1, 1, 1, 0, 1, 0, 0}
}

type TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_CustomTlvs_Tlv_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oui        *ywrapper.StringValue `protobuf:"bytes,174892954,opt,name=oui,proto3" json:"oui,omitempty"`
	OuiSubtype *ywrapper.StringValue `protobuf:"bytes,198366523,opt,name=oui_subtype,json=ouiSubtype,proto3" json:"oui_subtype,omitempty"`
	Type       *ywrapper.IntValue    `protobuf:"bytes,528945961,opt,name=type,proto3" json:"type,omitempty"`
	Value      *ywrapper.BytesValue  `protobuf:"bytes,415287344,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_CustomTlvs_Tlv_State) Reset() {
	*x = TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_CustomTlvs_Tlv_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_terminal_device_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_CustomTlvs_Tlv_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_CustomTlvs_Tlv_State) ProtoMessage() {
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_CustomTlvs_Tlv_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_terminal_device_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_CustomTlvs_Tlv_State.ProtoReflect.Descriptor instead.
func (*TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_CustomTlvs_Tlv_State) Descriptor() ([]byte, []int) {
	return file_openconfig_terminal_device_proto_rawDescGZIP(), []int{0, 1, 0, 1, 1, 1, 0, 1, 0, 1}
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_CustomTlvs_Tlv_State) GetOui() *ywrapper.StringValue {
	if x != nil {
		return x.Oui
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_CustomTlvs_Tlv_State) GetOuiSubtype() *ywrapper.StringValue {
	if x != nil {
		return x.OuiSubtype
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_CustomTlvs_Tlv_State) GetType() *ywrapper.IntValue {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_CustomTlvs_Tlv_State) GetValue() *ywrapper.BytesValue {
	if x != nil {
		return x.Value
	}
	return nil
}

type TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_State_Counters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FrameDiscard  *ywrapper.UintValue   `protobuf:"bytes,51964481,opt,name=frame_discard,json=frameDiscard,proto3" json:"frame_discard,omitempty"`
	FrameErrorIn  *ywrapper.UintValue   `protobuf:"bytes,69207827,opt,name=frame_error_in,json=frameErrorIn,proto3" json:"frame_error_in,omitempty"`
	FrameErrorOut *ywrapper.UintValue   `protobuf:"bytes,173908014,opt,name=frame_error_out,json=frameErrorOut,proto3" json:"frame_error_out,omitempty"`
	FrameIn       *ywrapper.UintValue   `protobuf:"bytes,225924332,opt,name=frame_in,json=frameIn,proto3" json:"frame_in,omitempty"`
	FrameOut      *ywrapper.UintValue   `protobuf:"bytes,97234827,opt,name=frame_out,json=frameOut,proto3" json:"frame_out,omitempty"`
	LastClear     *ywrapper.StringValue `protobuf:"bytes,144968481,opt,name=last_clear,json=lastClear,proto3" json:"last_clear,omitempty"`
	TlvDiscard    *ywrapper.UintValue   `protobuf:"bytes,18759160,opt,name=tlv_discard,json=tlvDiscard,proto3" json:"tlv_discard,omitempty"`
	TlvUnknown    *ywrapper.UintValue   `protobuf:"bytes,440272444,opt,name=tlv_unknown,json=tlvUnknown,proto3" json:"tlv_unknown,omitempty"`
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_State_Counters) Reset() {
	*x = TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_State_Counters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_terminal_device_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_State_Counters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_State_Counters) ProtoMessage() {}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_State_Counters) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_terminal_device_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_State_Counters.ProtoReflect.Descriptor instead.
func (*TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_State_Counters) Descriptor() ([]byte, []int) {
	return file_openconfig_terminal_device_proto_rawDescGZIP(), []int{0, 1, 0, 1, 1, 2, 0}
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_State_Counters) GetFrameDiscard() *ywrapper.UintValue {
	if x != nil {
		return x.FrameDiscard
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_State_Counters) GetFrameErrorIn() *ywrapper.UintValue {
	if x != nil {
		return x.FrameErrorIn
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_State_Counters) GetFrameErrorOut() *ywrapper.UintValue {
	if x != nil {
		return x.FrameErrorOut
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_State_Counters) GetFrameIn() *ywrapper.UintValue {
	if x != nil {
		return x.FrameIn
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_State_Counters) GetFrameOut() *ywrapper.UintValue {
	if x != nil {
		return x.FrameOut
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_State_Counters) GetLastClear() *ywrapper.StringValue {
	if x != nil {
		return x.LastClear
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_State_Counters) GetTlvDiscard() *ywrapper.UintValue {
	if x != nil {
		return x.TlvDiscard
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_State_Counters) GetTlvUnknown() *ywrapper.UintValue {
	if x != nil {
		return x.TlvUnknown
	}
	return nil
}

type TerminalDevice_LogicalChannels_Channel_Ingress_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhysicalChannel []*ywrapper.UintValue `protobuf:"bytes,116250452,rep,name=physical_channel,json=physicalChannel,proto3" json:"physical_channel,omitempty"`
	Transceiver     *ywrapper.StringValue `protobuf:"bytes,110176305,opt,name=transceiver,proto3" json:"transceiver,omitempty"`
}

func (x *TerminalDevice_LogicalChannels_Channel_Ingress_Config) Reset() {
	*x = TerminalDevice_LogicalChannels_Channel_Ingress_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_terminal_device_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminalDevice_LogicalChannels_Channel_Ingress_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminalDevice_LogicalChannels_Channel_Ingress_Config) ProtoMessage() {}

func (x *TerminalDevice_LogicalChannels_Channel_Ingress_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_terminal_device_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminalDevice_LogicalChannels_Channel_Ingress_Config.ProtoReflect.Descriptor instead.
func (*TerminalDevice_LogicalChannels_Channel_Ingress_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_terminal_device_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0}
}

func (x *TerminalDevice_LogicalChannels_Channel_Ingress_Config) GetPhysicalChannel() []*ywrapper.UintValue {
	if x != nil {
		return x.PhysicalChannel
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Ingress_Config) GetTransceiver() *ywrapper.StringValue {
	if x != nil {
		return x.Transceiver
	}
	return nil
}

type TerminalDevice_LogicalChannels_Channel_Ingress_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhysicalChannel []*ywrapper.UintValue `protobuf:"bytes,494740411,rep,name=physical_channel,json=physicalChannel,proto3" json:"physical_channel,omitempty"`
	Transceiver     *ywrapper.StringValue `protobuf:"bytes,160140636,opt,name=transceiver,proto3" json:"transceiver,omitempty"`
}

func (x *TerminalDevice_LogicalChannels_Channel_Ingress_State) Reset() {
	*x = TerminalDevice_LogicalChannels_Channel_Ingress_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_terminal_device_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminalDevice_LogicalChannels_Channel_Ingress_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminalDevice_LogicalChannels_Channel_Ingress_State) ProtoMessage() {}

func (x *TerminalDevice_LogicalChannels_Channel_Ingress_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_terminal_device_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminalDevice_LogicalChannels_Channel_Ingress_State.ProtoReflect.Descriptor instead.
func (*TerminalDevice_LogicalChannels_Channel_Ingress_State) Descriptor() ([]byte, []int) {
	return file_openconfig_terminal_device_proto_rawDescGZIP(), []int{0, 1, 0, 2, 1}
}

func (x *TerminalDevice_LogicalChannels_Channel_Ingress_State) GetPhysicalChannel() []*ywrapper.UintValue {
	if x != nil {
		return x.PhysicalChannel
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Ingress_State) GetTransceiver() *ywrapper.StringValue {
	if x != nil {
		return x.Transceiver
	}
	return nil
}

type TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config `protobuf:"bytes,488440203,opt,name=config,proto3" json:"config,omitempty"`
	State  *TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_State  `protobuf:"bytes,263535820,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment) Reset() {
	*x = TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_terminal_device_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment) ProtoMessage() {}

func (x *TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_terminal_device_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment.ProtoReflect.Descriptor instead.
func (*TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment) Descriptor() ([]byte, []int) {
	return file_openconfig_terminal_device_proto_rawDescGZIP(), []int{0, 1, 0, 3, 0}
}

func (x *TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment) GetConfig() *TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment) GetState() *TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_State {
	if x != nil {
		return x.State
	}
	return nil
}

type TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_AssignmentKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index      uint64                                                                       `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Assignment *TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment `protobuf:"bytes,2,opt,name=assignment,proto3" json:"assignment,omitempty"`
}

func (x *TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_AssignmentKey) Reset() {
	*x = TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_AssignmentKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_terminal_device_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_AssignmentKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_AssignmentKey) ProtoMessage() {
}

func (x *TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_AssignmentKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_terminal_device_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_AssignmentKey.ProtoReflect.Descriptor instead.
func (*TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_AssignmentKey) Descriptor() ([]byte, []int) {
	return file_openconfig_terminal_device_proto_rawDescGZIP(), []int{0, 1, 0, 3, 1}
}

func (x *TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_AssignmentKey) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_AssignmentKey) GetAssignment() *TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment {
	if x != nil {
		return x.Assignment
	}
	return nil
}

type TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Allocation         *ywrapper.Decimal64Value                                                                          `protobuf:"bytes,314188864,opt,name=allocation,proto3" json:"allocation,omitempty"`
	AssignmentType     TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config_AssignmentType `protobuf:"varint,456756042,opt,name=assignment_type,json=assignmentType,proto3,enum=openconfig.TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config_AssignmentType" json:"assignment_type,omitempty"`
	Description        *ywrapper.StringValue                                                                             `protobuf:"bytes,125024468,opt,name=description,proto3" json:"description,omitempty"`
	Index              *ywrapper.UintValue                                                                               `protobuf:"bytes,149526970,opt,name=index,proto3" json:"index,omitempty"`
	LogicalChannel     *ywrapper.UintValue                                                                               `protobuf:"bytes,92447393,opt,name=logical_channel,json=logicalChannel,proto3" json:"logical_channel,omitempty"`
	Mapping            OpenconfigTransportTypesFRAMEMAPPINGPROTOCOL                                                      `protobuf:"varint,535669556,opt,name=mapping,proto3,enum=openconfig.OpenconfigTransportTypesFRAMEMAPPINGPROTOCOL" json:"mapping,omitempty"`
	OpticalChannel     *ywrapper.StringValue                                                                             `protobuf:"bytes,175286324,opt,name=optical_channel,json=opticalChannel,proto3" json:"optical_channel,omitempty"`
	TributarySlotIndex *ywrapper.IntValue                                                                                `protobuf:"bytes,380679626,opt,name=tributary_slot_index,json=tributarySlotIndex,proto3" json:"tributary_slot_index,omitempty"`
}

func (x *TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config) Reset() {
	*x = TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_terminal_device_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config) ProtoMessage() {
}

func (x *TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_terminal_device_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config.ProtoReflect.Descriptor instead.
func (*TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_terminal_device_proto_rawDescGZIP(), []int{0, 1, 0, 3, 0, 0}
}

func (x *TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config) GetAllocation() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Allocation
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config) GetAssignmentType() TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config_AssignmentType {
	if x != nil {
		return x.AssignmentType
	}
	return TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config_ASSIGNMENTTYPE_UNSET
}

func (x *TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config) GetDescription() *ywrapper.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config) GetIndex() *ywrapper.UintValue {
	if x != nil {
		return x.Index
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config) GetLogicalChannel() *ywrapper.UintValue {
	if x != nil {
		return x.LogicalChannel
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config) GetMapping() OpenconfigTransportTypesFRAMEMAPPINGPROTOCOL {
	if x != nil {
		return x.Mapping
	}
	return OpenconfigTransportTypesFRAMEMAPPINGPROTOCOL_OPENCONFIGTRANSPORTTYPESFRAMEMAPPINGPROTOCOL_UNSET
}

func (x *TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config) GetOpticalChannel() *ywrapper.StringValue {
	if x != nil {
		return x.OpticalChannel
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config) GetTributarySlotIndex() *ywrapper.IntValue {
	if x != nil {
		return x.TributarySlotIndex
	}
	return nil
}

type TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Allocation         *ywrapper.Decimal64Value                                                                         `protobuf:"bytes,36320529,opt,name=allocation,proto3" json:"allocation,omitempty"`
	AssignmentType     TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_State_AssignmentType `protobuf:"varint,280777113,opt,name=assignment_type,json=assignmentType,proto3,enum=openconfig.TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_State_AssignmentType" json:"assignment_type,omitempty"`
	Description        *ywrapper.StringValue                                                                            `protobuf:"bytes,355583159,opt,name=description,proto3" json:"description,omitempty"`
	Index              *ywrapper.UintValue                                                                              `protobuf:"bytes,107378301,opt,name=index,proto3" json:"index,omitempty"`
	LogicalChannel     *ywrapper.UintValue                                                                              `protobuf:"bytes,106910794,opt,name=logical_channel,json=logicalChannel,proto3" json:"logical_channel,omitempty"`
	Mapping            OpenconfigTransportTypesFRAMEMAPPINGPROTOCOL                                                     `protobuf:"varint,358971211,opt,name=mapping,proto3,enum=openconfig.OpenconfigTransportTypesFRAMEMAPPINGPROTOCOL" json:"mapping,omitempty"`
	OpticalChannel     *ywrapper.StringValue                                                                            `protobuf:"bytes,413714875,opt,name=optical_channel,json=opticalChannel,proto3" json:"optical_channel,omitempty"`
	TributarySlotIndex *ywrapper.IntValue                                                                               `protobuf:"bytes,519348987,opt,name=tributary_slot_index,json=tributarySlotIndex,proto3" json:"tributary_slot_index,omitempty"`
}

func (x *TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_State) Reset() {
	*x = TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_terminal_device_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_State) ProtoMessage() {
}

func (x *TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_terminal_device_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_State.ProtoReflect.Descriptor instead.
func (*TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_State) Descriptor() ([]byte, []int) {
	return file_openconfig_terminal_device_proto_rawDescGZIP(), []int{0, 1, 0, 3, 0, 1}
}

func (x *TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_State) GetAllocation() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Allocation
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_State) GetAssignmentType() TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_State_AssignmentType {
	if x != nil {
		return x.AssignmentType
	}
	return TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_State_ASSIGNMENTTYPE_UNSET
}

func (x *TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_State) GetDescription() *ywrapper.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_State) GetIndex() *ywrapper.UintValue {
	if x != nil {
		return x.Index
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_State) GetLogicalChannel() *ywrapper.UintValue {
	if x != nil {
		return x.LogicalChannel
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_State) GetMapping() OpenconfigTransportTypesFRAMEMAPPINGPROTOCOL {
	if x != nil {
		return x.Mapping
	}
	return OpenconfigTransportTypesFRAMEMAPPINGPROTOCOL_OPENCONFIGTRANSPORTTYPESFRAMEMAPPINGPROTOCOL_UNSET
}

func (x *TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_State) GetOpticalChannel() *ywrapper.StringValue {
	if x != nil {
		return x.OpticalChannel
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_State) GetTributarySlotIndex() *ywrapper.IntValue {
	if x != nil {
		return x.TributarySlotIndex
	}
	return nil
}

type TerminalDevice_LogicalChannels_Channel_Otn_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TributarySlotGranularity OpenconfigTransportTypesTRIBUTARYSLOTGRANULARITY `protobuf:"varint,529684665,opt,name=tributary_slot_granularity,json=tributarySlotGranularity,proto3,enum=openconfig.OpenconfigTransportTypesTRIBUTARYSLOTGRANULARITY" json:"tributary_slot_granularity,omitempty"`
	TtiMsgAuto               *ywrapper.BoolValue                              `protobuf:"bytes,143356042,opt,name=tti_msg_auto,json=ttiMsgAuto,proto3" json:"tti_msg_auto,omitempty"`
	TtiMsgExpected           *ywrapper.StringValue                            `protobuf:"bytes,22126267,opt,name=tti_msg_expected,json=ttiMsgExpected,proto3" json:"tti_msg_expected,omitempty"`
	TtiMsgTransmit           *ywrapper.StringValue                            `protobuf:"bytes,129219947,opt,name=tti_msg_transmit,json=ttiMsgTransmit,proto3" json:"tti_msg_transmit,omitempty"`
}

func (x *TerminalDevice_LogicalChannels_Channel_Otn_Config) Reset() {
	*x = TerminalDevice_LogicalChannels_Channel_Otn_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_terminal_device_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminalDevice_LogicalChannels_Channel_Otn_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminalDevice_LogicalChannels_Channel_Otn_Config) ProtoMessage() {}

func (x *TerminalDevice_LogicalChannels_Channel_Otn_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_terminal_device_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminalDevice_LogicalChannels_Channel_Otn_Config.ProtoReflect.Descriptor instead.
func (*TerminalDevice_LogicalChannels_Channel_Otn_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_terminal_device_proto_rawDescGZIP(), []int{0, 1, 0, 4, 0}
}

func (x *TerminalDevice_LogicalChannels_Channel_Otn_Config) GetTributarySlotGranularity() OpenconfigTransportTypesTRIBUTARYSLOTGRANULARITY {
	if x != nil {
		return x.TributarySlotGranularity
	}
	return OpenconfigTransportTypesTRIBUTARYSLOTGRANULARITY_OPENCONFIGTRANSPORTTYPESTRIBUTARYSLOTGRANULARITY_UNSET
}

func (x *TerminalDevice_LogicalChannels_Channel_Otn_Config) GetTtiMsgAuto() *ywrapper.BoolValue {
	if x != nil {
		return x.TtiMsgAuto
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Otn_Config) GetTtiMsgExpected() *ywrapper.StringValue {
	if x != nil {
		return x.TtiMsgExpected
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Otn_Config) GetTtiMsgTransmit() *ywrapper.StringValue {
	if x != nil {
		return x.TtiMsgTransmit
	}
	return nil
}

type TerminalDevice_LogicalChannels_Channel_Otn_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BackgroundBlockErrors    *ywrapper.UintValue                                          `protobuf:"bytes,225465906,opt,name=background_block_errors,json=backgroundBlockErrors,proto3" json:"background_block_errors,omitempty"`
	CodeViolations           *ywrapper.UintValue                                          `protobuf:"bytes,15333406,opt,name=code_violations,json=codeViolations,proto3" json:"code_violations,omitempty"`
	ErroredBlocks            *ywrapper.UintValue                                          `protobuf:"bytes,480383674,opt,name=errored_blocks,json=erroredBlocks,proto3" json:"errored_blocks,omitempty"`
	ErroredSeconds           *ywrapper.UintValue                                          `protobuf:"bytes,101254023,opt,name=errored_seconds,json=erroredSeconds,proto3" json:"errored_seconds,omitempty"`
	Esnr                     *TerminalDevice_LogicalChannels_Channel_Otn_State_Esnr       `protobuf:"bytes,477535494,opt,name=esnr,proto3" json:"esnr,omitempty"`
	FecCorrectedBits         *ywrapper.UintValue                                          `protobuf:"bytes,347445731,opt,name=fec_corrected_bits,json=fecCorrectedBits,proto3" json:"fec_corrected_bits,omitempty"`
	FecCorrectedBytes        *ywrapper.UintValue                                          `protobuf:"bytes,475965836,opt,name=fec_corrected_bytes,json=fecCorrectedBytes,proto3" json:"fec_corrected_bytes,omitempty"`
	FecUncorrectableBlocks   *ywrapper.UintValue                                          `protobuf:"bytes,61441497,opt,name=fec_uncorrectable_blocks,json=fecUncorrectableBlocks,proto3" json:"fec_uncorrectable_blocks,omitempty"`
	FecUncorrectableWords    *ywrapper.UintValue                                          `protobuf:"bytes,189812742,opt,name=fec_uncorrectable_words,json=fecUncorrectableWords,proto3" json:"fec_uncorrectable_words,omitempty"`
	PostFecBer               *TerminalDevice_LogicalChannels_Channel_Otn_State_PostFecBer `protobuf:"bytes,512618601,opt,name=post_fec_ber,json=postFecBer,proto3" json:"post_fec_ber,omitempty"`
	PreFecBer                *TerminalDevice_LogicalChannels_Channel_Otn_State_PreFecBer  `protobuf:"bytes,24995908,opt,name=pre_fec_ber,json=preFecBer,proto3" json:"pre_fec_ber,omitempty"`
	QValue                   *TerminalDevice_LogicalChannels_Channel_Otn_State_QValue     `protobuf:"bytes,155046327,opt,name=q_value,json=qValue,proto3" json:"q_value,omitempty"`
	RdiMsg                   *ywrapper.StringValue                                        `protobuf:"bytes,372221681,opt,name=rdi_msg,json=rdiMsg,proto3" json:"rdi_msg,omitempty"`
	SeverelyErroredSeconds   *ywrapper.UintValue                                          `protobuf:"bytes,17854709,opt,name=severely_errored_seconds,json=severelyErroredSeconds,proto3" json:"severely_errored_seconds,omitempty"`
	TributarySlotGranularity OpenconfigTransportTypesTRIBUTARYSLOTGRANULARITY             `protobuf:"varint,248499014,opt,name=tributary_slot_granularity,json=tributarySlotGranularity,proto3,enum=openconfig.OpenconfigTransportTypesTRIBUTARYSLOTGRANULARITY" json:"tributary_slot_granularity,omitempty"`
	TtiMsgAuto               *ywrapper.BoolValue                                          `protobuf:"bytes,195236077,opt,name=tti_msg_auto,json=ttiMsgAuto,proto3" json:"tti_msg_auto,omitempty"`
	TtiMsgExpected           *ywrapper.StringValue                                        `protobuf:"bytes,50568880,opt,name=tti_msg_expected,json=ttiMsgExpected,proto3" json:"tti_msg_expected,omitempty"`
	TtiMsgRecv               *ywrapper.StringValue                                        `protobuf:"bytes,51151448,opt,name=tti_msg_recv,json=ttiMsgRecv,proto3" json:"tti_msg_recv,omitempty"`
	TtiMsgTransmit           *ywrapper.StringValue                                        `protobuf:"bytes,138432560,opt,name=tti_msg_transmit,json=ttiMsgTransmit,proto3" json:"tti_msg_transmit,omitempty"`
	UnavailableSeconds       *ywrapper.UintValue                                          `protobuf:"bytes,60512408,opt,name=unavailable_seconds,json=unavailableSeconds,proto3" json:"unavailable_seconds,omitempty"`
}

func (x *TerminalDevice_LogicalChannels_Channel_Otn_State) Reset() {
	*x = TerminalDevice_LogicalChannels_Channel_Otn_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_terminal_device_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminalDevice_LogicalChannels_Channel_Otn_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminalDevice_LogicalChannels_Channel_Otn_State) ProtoMessage() {}

func (x *TerminalDevice_LogicalChannels_Channel_Otn_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_terminal_device_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminalDevice_LogicalChannels_Channel_Otn_State.ProtoReflect.Descriptor instead.
func (*TerminalDevice_LogicalChannels_Channel_Otn_State) Descriptor() ([]byte, []int) {
	return file_openconfig_terminal_device_proto_rawDescGZIP(), []int{0, 1, 0, 4, 1}
}

func (x *TerminalDevice_LogicalChannels_Channel_Otn_State) GetBackgroundBlockErrors() *ywrapper.UintValue {
	if x != nil {
		return x.BackgroundBlockErrors
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Otn_State) GetCodeViolations() *ywrapper.UintValue {
	if x != nil {
		return x.CodeViolations
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Otn_State) GetErroredBlocks() *ywrapper.UintValue {
	if x != nil {
		return x.ErroredBlocks
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Otn_State) GetErroredSeconds() *ywrapper.UintValue {
	if x != nil {
		return x.ErroredSeconds
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Otn_State) GetEsnr() *TerminalDevice_LogicalChannels_Channel_Otn_State_Esnr {
	if x != nil {
		return x.Esnr
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Otn_State) GetFecCorrectedBits() *ywrapper.UintValue {
	if x != nil {
		return x.FecCorrectedBits
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Otn_State) GetFecCorrectedBytes() *ywrapper.UintValue {
	if x != nil {
		return x.FecCorrectedBytes
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Otn_State) GetFecUncorrectableBlocks() *ywrapper.UintValue {
	if x != nil {
		return x.FecUncorrectableBlocks
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Otn_State) GetFecUncorrectableWords() *ywrapper.UintValue {
	if x != nil {
		return x.FecUncorrectableWords
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Otn_State) GetPostFecBer() *TerminalDevice_LogicalChannels_Channel_Otn_State_PostFecBer {
	if x != nil {
		return x.PostFecBer
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Otn_State) GetPreFecBer() *TerminalDevice_LogicalChannels_Channel_Otn_State_PreFecBer {
	if x != nil {
		return x.PreFecBer
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Otn_State) GetQValue() *TerminalDevice_LogicalChannels_Channel_Otn_State_QValue {
	if x != nil {
		return x.QValue
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Otn_State) GetRdiMsg() *ywrapper.StringValue {
	if x != nil {
		return x.RdiMsg
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Otn_State) GetSeverelyErroredSeconds() *ywrapper.UintValue {
	if x != nil {
		return x.SeverelyErroredSeconds
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Otn_State) GetTributarySlotGranularity() OpenconfigTransportTypesTRIBUTARYSLOTGRANULARITY {
	if x != nil {
		return x.TributarySlotGranularity
	}
	return OpenconfigTransportTypesTRIBUTARYSLOTGRANULARITY_OPENCONFIGTRANSPORTTYPESTRIBUTARYSLOTGRANULARITY_UNSET
}

func (x *TerminalDevice_LogicalChannels_Channel_Otn_State) GetTtiMsgAuto() *ywrapper.BoolValue {
	if x != nil {
		return x.TtiMsgAuto
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Otn_State) GetTtiMsgExpected() *ywrapper.StringValue {
	if x != nil {
		return x.TtiMsgExpected
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Otn_State) GetTtiMsgRecv() *ywrapper.StringValue {
	if x != nil {
		return x.TtiMsgRecv
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Otn_State) GetTtiMsgTransmit() *ywrapper.StringValue {
	if x != nil {
		return x.TtiMsgTransmit
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Otn_State) GetUnavailableSeconds() *ywrapper.UintValue {
	if x != nil {
		return x.UnavailableSeconds
	}
	return nil
}

type TerminalDevice_LogicalChannels_Channel_Otn_State_Esnr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avg      *ywrapper.Decimal64Value `protobuf:"bytes,330244907,opt,name=avg,proto3" json:"avg,omitempty"`
	Instant  *ywrapper.Decimal64Value `protobuf:"bytes,330879284,opt,name=instant,proto3" json:"instant,omitempty"`
	Interval *ywrapper.UintValue      `protobuf:"bytes,336957778,opt,name=interval,proto3" json:"interval,omitempty"`
	Max      *ywrapper.Decimal64Value `protobuf:"bytes,448392821,opt,name=max,proto3" json:"max,omitempty"`
	MaxTime  *ywrapper.UintValue      `protobuf:"bytes,452549349,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	Min      *ywrapper.Decimal64Value `protobuf:"bytes,314171675,opt,name=min,proto3" json:"min,omitempty"`
	MinTime  *ywrapper.UintValue      `protobuf:"bytes,185475271,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
}

func (x *TerminalDevice_LogicalChannels_Channel_Otn_State_Esnr) Reset() {
	*x = TerminalDevice_LogicalChannels_Channel_Otn_State_Esnr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_terminal_device_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminalDevice_LogicalChannels_Channel_Otn_State_Esnr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminalDevice_LogicalChannels_Channel_Otn_State_Esnr) ProtoMessage() {}

func (x *TerminalDevice_LogicalChannels_Channel_Otn_State_Esnr) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_terminal_device_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminalDevice_LogicalChannels_Channel_Otn_State_Esnr.ProtoReflect.Descriptor instead.
func (*TerminalDevice_LogicalChannels_Channel_Otn_State_Esnr) Descriptor() ([]byte, []int) {
	return file_openconfig_terminal_device_proto_rawDescGZIP(), []int{0, 1, 0, 4, 1, 0}
}

func (x *TerminalDevice_LogicalChannels_Channel_Otn_State_Esnr) GetAvg() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Avg
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Otn_State_Esnr) GetInstant() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Instant
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Otn_State_Esnr) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Otn_State_Esnr) GetMax() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Otn_State_Esnr) GetMaxTime() *ywrapper.UintValue {
	if x != nil {
		return x.MaxTime
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Otn_State_Esnr) GetMin() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Otn_State_Esnr) GetMinTime() *ywrapper.UintValue {
	if x != nil {
		return x.MinTime
	}
	return nil
}

type TerminalDevice_LogicalChannels_Channel_Otn_State_PostFecBer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avg      *ywrapper.Decimal64Value `protobuf:"bytes,188623348,opt,name=avg,proto3" json:"avg,omitempty"`
	Instant  *ywrapper.Decimal64Value `protobuf:"bytes,321048399,opt,name=instant,proto3" json:"instant,omitempty"`
	Interval *ywrapper.UintValue      `protobuf:"bytes,355641455,opt,name=interval,proto3" json:"interval,omitempty"`
	Max      *ywrapper.Decimal64Value `protobuf:"bytes,404863886,opt,name=max,proto3" json:"max,omitempty"`
	MaxTime  *ywrapper.UintValue      `protobuf:"bytes,443228524,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	Min      *ywrapper.Decimal64Value `protobuf:"bytes,2214112,opt,name=min,proto3" json:"min,omitempty"`
	MinTime  *ywrapper.UintValue      `protobuf:"bytes,100184898,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
}

func (x *TerminalDevice_LogicalChannels_Channel_Otn_State_PostFecBer) Reset() {
	*x = TerminalDevice_LogicalChannels_Channel_Otn_State_PostFecBer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_terminal_device_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminalDevice_LogicalChannels_Channel_Otn_State_PostFecBer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminalDevice_LogicalChannels_Channel_Otn_State_PostFecBer) ProtoMessage() {}

func (x *TerminalDevice_LogicalChannels_Channel_Otn_State_PostFecBer) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_terminal_device_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminalDevice_LogicalChannels_Channel_Otn_State_PostFecBer.ProtoReflect.Descriptor instead.
func (*TerminalDevice_LogicalChannels_Channel_Otn_State_PostFecBer) Descriptor() ([]byte, []int) {
	return file_openconfig_terminal_device_proto_rawDescGZIP(), []int{0, 1, 0, 4, 1, 1}
}

func (x *TerminalDevice_LogicalChannels_Channel_Otn_State_PostFecBer) GetAvg() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Avg
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Otn_State_PostFecBer) GetInstant() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Instant
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Otn_State_PostFecBer) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Otn_State_PostFecBer) GetMax() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Otn_State_PostFecBer) GetMaxTime() *ywrapper.UintValue {
	if x != nil {
		return x.MaxTime
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Otn_State_PostFecBer) GetMin() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Otn_State_PostFecBer) GetMinTime() *ywrapper.UintValue {
	if x != nil {
		return x.MinTime
	}
	return nil
}

type TerminalDevice_LogicalChannels_Channel_Otn_State_PreFecBer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avg      *ywrapper.Decimal64Value `protobuf:"bytes,424787165,opt,name=avg,proto3" json:"avg,omitempty"`
	Instant  *ywrapper.Decimal64Value `protobuf:"bytes,417553930,opt,name=instant,proto3" json:"instant,omitempty"`
	Interval *ywrapper.UintValue      `protobuf:"bytes,130902524,opt,name=interval,proto3" json:"interval,omitempty"`
	Max      *ywrapper.Decimal64Value `protobuf:"bytes,206102591,opt,name=max,proto3" json:"max,omitempty"`
	MaxTime  *ywrapper.UintValue      `protobuf:"bytes,124525827,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	Min      *ywrapper.Decimal64Value `protobuf:"bytes,71881665,opt,name=min,proto3" json:"min,omitempty"`
	MinTime  *ywrapper.UintValue      `protobuf:"bytes,384009305,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
}

func (x *TerminalDevice_LogicalChannels_Channel_Otn_State_PreFecBer) Reset() {
	*x = TerminalDevice_LogicalChannels_Channel_Otn_State_PreFecBer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_terminal_device_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminalDevice_LogicalChannels_Channel_Otn_State_PreFecBer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminalDevice_LogicalChannels_Channel_Otn_State_PreFecBer) ProtoMessage() {}

func (x *TerminalDevice_LogicalChannels_Channel_Otn_State_PreFecBer) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_terminal_device_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminalDevice_LogicalChannels_Channel_Otn_State_PreFecBer.ProtoReflect.Descriptor instead.
func (*TerminalDevice_LogicalChannels_Channel_Otn_State_PreFecBer) Descriptor() ([]byte, []int) {
	return file_openconfig_terminal_device_proto_rawDescGZIP(), []int{0, 1, 0, 4, 1, 2}
}

func (x *TerminalDevice_LogicalChannels_Channel_Otn_State_PreFecBer) GetAvg() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Avg
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Otn_State_PreFecBer) GetInstant() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Instant
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Otn_State_PreFecBer) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Otn_State_PreFecBer) GetMax() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Otn_State_PreFecBer) GetMaxTime() *ywrapper.UintValue {
	if x != nil {
		return x.MaxTime
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Otn_State_PreFecBer) GetMin() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Otn_State_PreFecBer) GetMinTime() *ywrapper.UintValue {
	if x != nil {
		return x.MinTime
	}
	return nil
}

type TerminalDevice_LogicalChannels_Channel_Otn_State_QValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avg      *ywrapper.Decimal64Value `protobuf:"bytes,439703990,opt,name=avg,proto3" json:"avg,omitempty"`
	Instant  *ywrapper.Decimal64Value `protobuf:"bytes,400113333,opt,name=instant,proto3" json:"instant,omitempty"`
	Interval *ywrapper.UintValue      `protobuf:"bytes,388690377,opt,name=interval,proto3" json:"interval,omitempty"`
	Max      *ywrapper.Decimal64Value `protobuf:"bytes,51963280,opt,name=max,proto3" json:"max,omitempty"`
	MaxTime  *ywrapper.UintValue      `protobuf:"bytes,405328050,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	Min      *ywrapper.Decimal64Value `protobuf:"bytes,454613310,opt,name=min,proto3" json:"min,omitempty"`
	MinTime  *ywrapper.UintValue      `protobuf:"bytes,343986716,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
}

func (x *TerminalDevice_LogicalChannels_Channel_Otn_State_QValue) Reset() {
	*x = TerminalDevice_LogicalChannels_Channel_Otn_State_QValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_terminal_device_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminalDevice_LogicalChannels_Channel_Otn_State_QValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminalDevice_LogicalChannels_Channel_Otn_State_QValue) ProtoMessage() {}

func (x *TerminalDevice_LogicalChannels_Channel_Otn_State_QValue) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_terminal_device_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminalDevice_LogicalChannels_Channel_Otn_State_QValue.ProtoReflect.Descriptor instead.
func (*TerminalDevice_LogicalChannels_Channel_Otn_State_QValue) Descriptor() ([]byte, []int) {
	return file_openconfig_terminal_device_proto_rawDescGZIP(), []int{0, 1, 0, 4, 1, 3}
}

func (x *TerminalDevice_LogicalChannels_Channel_Otn_State_QValue) GetAvg() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Avg
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Otn_State_QValue) GetInstant() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Instant
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Otn_State_QValue) GetInterval() *ywrapper.UintValue {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Otn_State_QValue) GetMax() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Otn_State_QValue) GetMaxTime() *ywrapper.UintValue {
	if x != nil {
		return x.MaxTime
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Otn_State_QValue) GetMin() *ywrapper.Decimal64Value {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *TerminalDevice_LogicalChannels_Channel_Otn_State_QValue) GetMinTime() *ywrapper.UintValue {
	if x != nil {
		return x.MinTime
	}
	return nil
}

type TerminalDevice_OperationalModes_Mode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *TerminalDevice_OperationalModes_Mode_Config `protobuf:"bytes,187786493,opt,name=config,proto3" json:"config,omitempty"`
	State  *TerminalDevice_OperationalModes_Mode_State  `protobuf:"bytes,208910962,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *TerminalDevice_OperationalModes_Mode) Reset() {
	*x = TerminalDevice_OperationalModes_Mode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_terminal_device_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminalDevice_OperationalModes_Mode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminalDevice_OperationalModes_Mode) ProtoMessage() {}

func (x *TerminalDevice_OperationalModes_Mode) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_terminal_device_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminalDevice_OperationalModes_Mode.ProtoReflect.Descriptor instead.
func (*TerminalDevice_OperationalModes_Mode) Descriptor() ([]byte, []int) {
	return file_openconfig_terminal_device_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *TerminalDevice_OperationalModes_Mode) GetConfig() *TerminalDevice_OperationalModes_Mode_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *TerminalDevice_OperationalModes_Mode) GetState() *TerminalDevice_OperationalModes_Mode_State {
	if x != nil {
		return x.State
	}
	return nil
}

type TerminalDevice_OperationalModes_ModeKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModeId uint64                                `protobuf:"varint,1,opt,name=mode_id,json=modeId,proto3" json:"mode_id,omitempty"`
	Mode   *TerminalDevice_OperationalModes_Mode `protobuf:"bytes,2,opt,name=mode,proto3" json:"mode,omitempty"`
}

func (x *TerminalDevice_OperationalModes_ModeKey) Reset() {
	*x = TerminalDevice_OperationalModes_ModeKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_terminal_device_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminalDevice_OperationalModes_ModeKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminalDevice_OperationalModes_ModeKey) ProtoMessage() {}

func (x *TerminalDevice_OperationalModes_ModeKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_terminal_device_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminalDevice_OperationalModes_ModeKey.ProtoReflect.Descriptor instead.
func (*TerminalDevice_OperationalModes_ModeKey) Descriptor() ([]byte, []int) {
	return file_openconfig_terminal_device_proto_rawDescGZIP(), []int{0, 2, 1}
}

func (x *TerminalDevice_OperationalModes_ModeKey) GetModeId() uint64 {
	if x != nil {
		return x.ModeId
	}
	return 0
}

func (x *TerminalDevice_OperationalModes_ModeKey) GetMode() *TerminalDevice_OperationalModes_Mode {
	if x != nil {
		return x.Mode
	}
	return nil
}

type TerminalDevice_OperationalModes_Mode_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TerminalDevice_OperationalModes_Mode_Config) Reset() {
	*x = TerminalDevice_OperationalModes_Mode_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_terminal_device_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminalDevice_OperationalModes_Mode_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminalDevice_OperationalModes_Mode_Config) ProtoMessage() {}

func (x *TerminalDevice_OperationalModes_Mode_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_terminal_device_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminalDevice_OperationalModes_Mode_Config.ProtoReflect.Descriptor instead.
func (*TerminalDevice_OperationalModes_Mode_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_terminal_device_proto_rawDescGZIP(), []int{0, 2, 0, 0}
}

type TerminalDevice_OperationalModes_Mode_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description *ywrapper.StringValue `protobuf:"bytes,107447685,opt,name=description,proto3" json:"description,omitempty"`
	ModeId      *ywrapper.UintValue   `protobuf:"bytes,74994658,opt,name=mode_id,json=modeId,proto3" json:"mode_id,omitempty"`
	VendorId    *ywrapper.StringValue `protobuf:"bytes,526782251,opt,name=vendor_id,json=vendorId,proto3" json:"vendor_id,omitempty"`
}

func (x *TerminalDevice_OperationalModes_Mode_State) Reset() {
	*x = TerminalDevice_OperationalModes_Mode_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_terminal_device_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminalDevice_OperationalModes_Mode_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminalDevice_OperationalModes_Mode_State) ProtoMessage() {}

func (x *TerminalDevice_OperationalModes_Mode_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_terminal_device_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminalDevice_OperationalModes_Mode_State.ProtoReflect.Descriptor instead.
func (*TerminalDevice_OperationalModes_Mode_State) Descriptor() ([]byte, []int) {
	return file_openconfig_terminal_device_proto_rawDescGZIP(), []int{0, 2, 0, 1}
}

func (x *TerminalDevice_OperationalModes_Mode_State) GetDescription() *ywrapper.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *TerminalDevice_OperationalModes_Mode_State) GetModeId() *ywrapper.UintValue {
	if x != nil {
		return x.ModeId
	}
	return nil
}

func (x *TerminalDevice_OperationalModes_Mode_State) GetVendorId() *ywrapper.StringValue {
	if x != nil {
		return x.VendorId
	}
	return nil
}

var File_openconfig_terminal_device_proto protoreflect.FileDescriptor

var file_openconfig_terminal_device_proto_rawDesc = []byte{
	0x0a, 0x20, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x0e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a,
	0x79, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x94, 0xe8, 0x01, 0x0a, 0x0e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x58, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x91, 0xc8, 0x92, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x1a, 0x82, 0x41,
	0x17, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x7f, 0x0a, 0x10, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x18, 0xbd, 0xcc, 0x8e, 0xec, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63,
	0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x42, 0x24, 0x82, 0x41, 0x21, 0x2f,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x52, 0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x12, 0x82, 0x01, 0x0a, 0x11, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x73, 0x18, 0xbe, 0xad, 0xe8, 0x19, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x42, 0x25, 0x82,
	0x41, 0x22, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2d, 0x6d,
	0x6f, 0x64, 0x65, 0x73, 0x52, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x86, 0xda, 0xdc, 0x47, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x19, 0x82, 0x41, 0x16, 0x2f,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x08, 0x0a, 0x06,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x88, 0xdd, 0x01, 0x0a, 0x0f, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x81, 0x01, 0x0a, 0x07,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x81, 0xde, 0x99, 0xfc, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4b, 0x65, 0x79, 0x42, 0x2c, 0x82, 0x41, 0x29, 0x2f, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x1a,
	0xc8, 0xda, 0x01, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x8a, 0x01, 0x0a,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x86, 0xf9, 0x93, 0xb3, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x33, 0x82, 0x41,
	0x30, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x91, 0x01, 0x0a, 0x08, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x18, 0x9d, 0xb9, 0xdd, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x42, 0x35, 0x82, 0x41,
	0x32, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x52, 0x08, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x12, 0x8d, 0x01,
	0x0a, 0x07, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0xf1, 0xcc, 0xe1, 0x39, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c,
	0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x42, 0x34,
	0x82, 0x41, 0x31, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x6e, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0xda, 0x01,
	0x0a, 0x1b, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0xd6, 0xb6,
	0xd2, 0xb6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x48, 0x82, 0x41, 0x45, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63,
	0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x2d, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x19, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x7d, 0x0a, 0x03, 0x6f, 0x74,
	0x6e, 0x18, 0xc1, 0xfa, 0x85, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x4f,
	0x74, 0x6e, 0x42, 0x30, 0x82, 0x41, 0x2d, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c,
	0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x2f, 0x6f, 0x74, 0x6e, 0x52, 0x03, 0x6f, 0x74, 0x6e, 0x12, 0x86, 0x01, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0xf3, 0xb4, 0xa0, 0x94, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x32, 0x82, 0x41, 0x2f, 0x2f, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67,
	0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x1a, 0xaf, 0x09, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x98, 0x01,
	0x0a, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xc6, 0xdc,
	0x85, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x3f, 0x82, 0x41, 0x3c,
	0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x7c, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xa9, 0xea, 0xfb, 0xdc, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x68, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0xbf, 0xdd, 0x97, 0xb3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x39,
	0x82, 0x41, 0x36, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0xbd, 0x01, 0x0a, 0x14, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0xbd, 0xd4, 0xbd, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x41, 0x4c, 0x45,
	0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x54, 0x59,
	0x50, 0x45, 0x42, 0x48, 0x82, 0x41, 0x45, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c,
	0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x12, 0x6c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x12, 0xa0, 0x01, 0x0a, 0x0d, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x96, 0xa8, 0xac, 0xb0, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c,
	0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b,
	0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x9d, 0x01, 0x0a, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x18, 0xe8, 0x9f, 0xb4, 0xe8, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x41, 0x52, 0x59, 0x52, 0x41, 0x54, 0x45, 0x43,
	0x4c, 0x41, 0x53, 0x53, 0x54, 0x59, 0x50, 0x45, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x72, 0x61,
	0x74, 0x65, 0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x09, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x12, 0x78, 0x0a, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x18, 0xde, 0x8a, 0xe7, 0x74, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x52, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0xa4, 0x01,
	0x0a, 0x0d, 0x74, 0x72, 0x69, 0x62, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18,
	0x9b, 0x97, 0xff, 0x41, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x54, 0x52,
	0x49, 0x42, 0x55, 0x54, 0x41, 0x52, 0x59, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x54,
	0x59, 0x50, 0x45, 0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x74, 0x72, 0x69, 0x62, 0x2d, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x0c, 0x74, 0x72, 0x69, 0x62, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x1a, 0xf9, 0x5b, 0x0a, 0x08, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x12, 0x9b, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xd2, 0xc4, 0xac,
	0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x3c, 0x82, 0x41, 0x39, 0x2f, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c,
	0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x93, 0x01, 0x0a, 0x04, 0x6c, 0x6c, 0x64, 0x70, 0x18, 0xac, 0xc1, 0x8b, 0x45, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x40, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4c,
	0x6c, 0x64, 0x70, 0x42, 0x3a, 0x82, 0x41, 0x37, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x52,
	0x04, 0x6c, 0x6c, 0x64, 0x70, 0x12, 0x97, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0xcf, 0xd5, 0x9d, 0x5e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x45, 0x74, 0x68,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x3b, 0x82, 0x41, 0x38,
	0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a,
	0xc0, 0x03, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x7b, 0x0a, 0x09, 0x61, 0x6c,
	0x73, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0xb3, 0xad, 0xae, 0x62, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63,
	0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x61, 0x6c, 0x73, 0x2d, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x52, 0x08, 0x61,
	0x6c, 0x73, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0xb8, 0x01, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x61, 0x6c, 0x73, 0x18, 0xed, 0xf8, 0xf9, 0xfa, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x4c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x67,
	0x69, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x6c, 0x73, 0x42, 0x47,
	0x82, 0x41, 0x44, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2d, 0x61, 0x6c, 0x73, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41,
	0x6c, 0x73, 0x22, 0x7e, 0x0a, 0x09, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x6c, 0x73, 0x12,
	0x23, 0x0a, 0x12, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x41, 0x4c, 0x53, 0x5f, 0x45, 0x54, 0x48,
	0x45, 0x52, 0x4e, 0x45, 0x54, 0x10, 0x00, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x45, 0x54, 0x48, 0x45,
	0x52, 0x4e, 0x45, 0x54, 0x12, 0x1b, 0x0a, 0x0e, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x41, 0x4c,
	0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x4e, 0x4f, 0x4e,
	0x45, 0x12, 0x2f, 0x0a, 0x18, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x41, 0x4c, 0x53, 0x5f, 0x4c,
	0x41, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x48, 0x55, 0x54, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x02, 0x1a,
	0x11, 0x82, 0x41, 0x0e, 0x4c, 0x41, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x48, 0x55, 0x54, 0x44, 0x4f,
	0x57, 0x4e, 0x1a, 0xbe, 0x3a, 0x0a, 0x04, 0x4c, 0x6c, 0x64, 0x70, 0x12, 0xa5, 0x01, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xa1, 0xd8, 0xfa, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x47, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4c, 0x6c, 0x64,
	0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f,
	0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0xb1, 0x01, 0x0a, 0x09, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x18, 0xe4, 0xb5, 0xb7, 0x48, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x45,
	0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x2e, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69,
	0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x6c, 0x6c,
	0x64, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x52, 0x09, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x12, 0xa2, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x96, 0xe4, 0xc7, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e,
	0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x87, 0x02, 0x0a,
	0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x7c, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0xd7, 0xd5, 0xc8, 0xcf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x49, 0x82, 0x41, 0x46, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f,
	0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x7f, 0x0a, 0x08, 0x73, 0x6e, 0x6f, 0x6f, 0x70, 0x69, 0x6e,
	0x67, 0x18, 0xc1, 0xf4, 0xb2, 0xdb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x4a, 0x82, 0x41, 0x47, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x65,
	0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x73, 0x6e, 0x6f, 0x6f, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x73, 0x6e,
	0x6f, 0x6f, 0x70, 0x69, 0x6e, 0x67, 0x1a, 0xc9, 0x27, 0x0a, 0x09, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x12, 0xc5, 0x01, 0x0a, 0x08, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x18, 0xa5, 0xd8, 0xb4, 0x85, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e,
	0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x2e, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x4b, 0x65, 0x79, 0x42, 0x4d, 0x82, 0x41, 0x4a, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x52, 0x08, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x1a, 0x90, 0x24, 0x0a,
	0x08, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x12, 0xcc, 0x01, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0xea, 0xd6, 0xbd, 0xd4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5a,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63,
	0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4c, 0x6c, 0x64, 0x70,
	0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x54, 0x82, 0x41, 0x51, 0x2f,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xdd, 0x01, 0x0a, 0x0b, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x6c, 0x76, 0x73, 0x18, 0xf7, 0xe9, 0xdd, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x5e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4c,
	0x6c, 0x64, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x6c, 0x76,
	0x73, 0x42, 0x59, 0x82, 0x41, 0x56, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f,
	0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2d, 0x74, 0x6c, 0x76, 0x73, 0x52, 0x0a, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x54, 0x6c, 0x76, 0x73, 0x12, 0xc7, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x87, 0xe1, 0xfd, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e,
	0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x2e, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x53, 0x82, 0x41, 0x50, 0x2f, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69,
	0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x6c, 0x6c,
	0x64, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x1a, 0x08, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0xcd, 0x0e, 0x0a,
	0x0a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x6c, 0x76, 0x73, 0x12, 0xda, 0x01, 0x0a, 0x03,
	0x74, 0x6c, 0x76, 0x18, 0xb0, 0xbf, 0xbe, 0x85, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x65, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x2e,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x6c, 0x76, 0x73, 0x2e, 0x54, 0x6c,
	0x76, 0x4b, 0x65, 0x79, 0x42, 0x5d, 0x82, 0x41, 0x5a, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x6c, 0x6c, 0x64, 0x70,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2d, 0x74, 0x6c, 0x76, 0x73, 0x2f,
	0x74, 0x6c, 0x76, 0x52, 0x03, 0x74, 0x6c, 0x76, 0x1a, 0xe6, 0x08, 0x0a, 0x03, 0x54, 0x6c, 0x76,
	0x12, 0xea, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xc5, 0x9a, 0x8d, 0x41,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x69, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x54, 0x6c, 0x76, 0x73, 0x2e, 0x54, 0x6c, 0x76, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x64, 0x82, 0x41, 0x61, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2d, 0x74, 0x6c, 0x76, 0x73, 0x2f, 0x74, 0x6c, 0x76, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xe7, 0x01,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xba, 0xea, 0xfd, 0xb0, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x68, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4c,
	0x6c, 0x64, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x6c, 0x76,
	0x73, 0x2e, 0x54, 0x6c, 0x76, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x63, 0x82, 0x41, 0x60,
	0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x2d, 0x74, 0x6c, 0x76, 0x73, 0x2f, 0x74, 0x6c, 0x76, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x08, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x1a, 0xfd, 0x04, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x93, 0x01, 0x0a, 0x03,
	0x6f, 0x75, 0x69, 0x18, 0x9a, 0xcf, 0xb2, 0x53, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x67, 0x82, 0x41, 0x64, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2d, 0x74, 0x6c, 0x76, 0x73, 0x2f, 0x74,
	0x6c, 0x76, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x75, 0x69, 0x52, 0x03, 0x6f, 0x75,
	0x69, 0x12, 0xaa, 0x01, 0x0a, 0x0b, 0x6f, 0x75, 0x69, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70,
	0x65, 0x18, 0xbb, 0xaa, 0xcb, 0x5e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x6f, 0x82, 0x41, 0x6c, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f,
	0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2d, 0x74, 0x6c, 0x76, 0x73, 0x2f, 0x74, 0x6c, 0x76,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x75, 0x69, 0x2d, 0x73, 0x75, 0x62, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x6f, 0x75, 0x69, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x12, 0x94,
	0x01, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0xa9, 0xa6, 0x9c, 0xfc, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x68, 0x82, 0x41, 0x65, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63,
	0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x6c, 0x6c, 0x64,
	0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2d, 0x74, 0x6c, 0x76, 0x73,
	0x2f, 0x74, 0x6c, 0x76, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x99, 0x01, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0xb0, 0x90, 0x83, 0xc6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x69, 0x82, 0x41, 0x66, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2d, 0x74, 0x6c, 0x76, 0x73, 0x2f, 0x74, 0x6c, 0x76, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x1a, 0xf8, 0x03, 0x0a, 0x06, 0x54, 0x6c, 0x76, 0x4b, 0x65, 0x79, 0x12, 0x76, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x12, 0x42, 0x62, 0x82, 0x41, 0x5f, 0x2f,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x2d, 0x74, 0x6c, 0x76, 0x73, 0x2f, 0x74, 0x6c, 0x76, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x73, 0x0a, 0x03, 0x6f, 0x75, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x61, 0x82, 0x41, 0x5e, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f,
	0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2d, 0x74, 0x6c, 0x76, 0x73, 0x2f, 0x74, 0x6c, 0x76,
	0x2f, 0x6f, 0x75, 0x69, 0x52, 0x03, 0x6f, 0x75, 0x69, 0x12, 0x8a, 0x01, 0x0a, 0x0b, 0x6f, 0x75,
	0x69, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x69, 0x82, 0x41, 0x66, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2d, 0x74, 0x6c, 0x76, 0x73, 0x2f, 0x74, 0x6c, 0x76, 0x2f, 0x6f,
	0x75, 0x69, 0x2d, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6f, 0x75, 0x69, 0x53,
	0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x12, 0x74, 0x0a, 0x03, 0x74, 0x6c, 0x76, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x62, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54,
	0x6c, 0x76, 0x73, 0x2e, 0x54, 0x6c, 0x76, 0x52, 0x03, 0x74, 0x6c, 0x76, 0x1a, 0xb0, 0x10, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0xdb,
	0xc3, 0x8d, 0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x57, 0x82, 0x41,
	0x54, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x61, 0x67, 0x65, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x97, 0x01, 0x0a, 0x0a, 0x63,
	0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x5f, 0x69, 0x64, 0x18, 0xec, 0xec, 0xff, 0x51, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5e, 0x82, 0x41, 0x5b, 0x2f, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c,
	0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63,
	0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x2d, 0x69, 0x64, 0x52, 0x09, 0x63, 0x68, 0x61, 0x73, 0x73,
	0x69, 0x73, 0x49, 0x64, 0x12, 0xb7, 0x01, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x5f, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x81, 0x89, 0xd7, 0x24, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x6c, 0x64, 0x70, 0x43, 0x68, 0x61,
	0x73, 0x73, 0x69, 0x73, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x42, 0x63, 0x82, 0x41, 0x60, 0x2f,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x2d, 0x69, 0x64, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x0d, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x80,
	0x01, 0x0a, 0x02, 0x69, 0x64, 0x18, 0xb1, 0xb3, 0xaa, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x56, 0x82, 0x41, 0x53, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63,
	0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x6c, 0x6c, 0x64,
	0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x97, 0x01, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x18, 0xb4, 0x88, 0xcd, 0x50, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5f,
	0x82, 0x41, 0x5c, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x6c, 0x61, 0x73, 0x74, 0x2d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0xaf, 0x01, 0x0a, 0x12,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0xe8, 0xdc, 0xfc, 0x43, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x66, 0x82, 0x41, 0x63, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c,
	0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x11, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0xbd, 0x01,
	0x0a, 0x17, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x8d, 0xe4, 0x9c, 0x13, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6b, 0x82, 0x41, 0x68, 0x2f, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c,
	0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x15, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0xa9, 0x01,
	0x0a, 0x10, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0xd2, 0xbc, 0xd6, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x64, 0x82, 0x41, 0x61, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c,
	0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x8e, 0x01, 0x0a, 0x07, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0xcb, 0x81, 0xac, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5b, 0x82, 0x41, 0x58, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63,
	0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x6c, 0x6c, 0x64,
	0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2d,
	0x69, 0x64, 0x52, 0x06, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0xac, 0x01, 0x0a, 0x0c, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0xb4, 0xd9, 0xdd, 0xf4,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x6c, 0x64,
	0x70, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x42, 0x60, 0x82, 0x41, 0x5d,
	0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x69, 0x64, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x70,
	0x6f, 0x72, 0x74, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0xb0, 0x01, 0x0a, 0x12, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0xd8, 0xcb, 0x8f, 0x8a, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x66, 0x82, 0x41, 0x63, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f,
	0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x9b, 0x01, 0x0a,
	0x0b, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xd7, 0xc6, 0xed,
	0xe8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5f, 0x82,
	0x41, 0x5c, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x65, 0x74, 0x68, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x0a,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x03, 0x74,
	0x74, 0x6c, 0x18, 0xf2, 0xc2, 0xbe, 0xd4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x57, 0x82, 0x41, 0x54, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f,
	0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x74, 0x6c, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x1a,
	0xe0, 0x01, 0x0a, 0x0b, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x12,
	0x60, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x50, 0x82, 0x41, 0x4d,
	0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x69, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x6f, 0x0a, 0x08, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x52, 0x08, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x1a, 0xde, 0x0c, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xb9, 0x01, 0x0a,
	0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0xca, 0x99, 0xc3, 0x13, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c,
	0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e,
	0x4c, 0x6c, 0x64, 0x70, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x42, 0x49, 0x82, 0x41, 0x46, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x08,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x7a, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x84, 0xcf, 0xfc, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x48, 0x82, 0x41, 0x45, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f,
	0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x7e, 0x0a, 0x08, 0x73, 0x6e, 0x6f, 0x6f, 0x70, 0x69, 0x6e, 0x67,
	0x18, 0xac, 0xce, 0xd5, 0xcd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x49, 0x82, 0x41, 0x46, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x73, 0x6e, 0x6f, 0x6f, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x73, 0x6e, 0x6f, 0x6f,
	0x70, 0x69, 0x6e, 0x67, 0x1a, 0x9c, 0x09, 0x0a, 0x08, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x94, 0x01, 0x0a, 0x0d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63,
	0x61, 0x72, 0x64, 0x18, 0xc1, 0xd4, 0xe3, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x57, 0x82, 0x41, 0x54, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f,
	0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x2d, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x52, 0x0c, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x12, 0x96, 0x01, 0x0a, 0x0e, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x18, 0x93, 0x8e, 0x80, 0x21,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x58, 0x82, 0x41, 0x55, 0x2f, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c,
	0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x2f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x2d, 0x69, 0x6e, 0x52, 0x0c, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49,
	0x6e, 0x12, 0x99, 0x01, 0x0a, 0x0f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0xae, 0xc0, 0xf6, 0x52, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x59, 0x82, 0x41, 0x56, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x6f, 0x75, 0x74, 0x52, 0x0d,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4f, 0x75, 0x74, 0x12, 0x85, 0x01,
	0x0a, 0x08, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x18, 0xec, 0xa9, 0xdd, 0x6b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x52, 0x82, 0x41, 0x4f, 0x2f, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f,
	0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2d, 0x69, 0x6e, 0x52, 0x07, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x49, 0x6e, 0x12, 0x88, 0x01, 0x0a, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f,
	0x6f, 0x75, 0x74, 0x18, 0x8b, 0xdf, 0xae, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x53, 0x82, 0x41, 0x50, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f,
	0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x2d, 0x6f, 0x75, 0x74, 0x52, 0x08, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x4f, 0x75, 0x74,
	0x12, 0x8d, 0x01, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x18,
	0xa1, 0x96, 0x90, 0x45, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x54, 0x82, 0x41, 0x51, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x6c, 0x61, 0x73, 0x74, 0x2d,
	0x63, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6c, 0x65, 0x61, 0x72,
	0x12, 0x8e, 0x01, 0x0a, 0x0b, 0x74, 0x6c, 0x76, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64,
	0x18, 0xf8, 0xfb, 0xf8, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x55,
	0x82, 0x41, 0x52, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x74, 0x6c, 0x76, 0x2d, 0x64, 0x69,
	0x73, 0x63, 0x61, 0x72, 0x64, 0x52, 0x0a, 0x74, 0x6c, 0x76, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72,
	0x64, 0x12, 0x8f, 0x01, 0x0a, 0x0b, 0x74, 0x6c, 0x76, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x18, 0xbc, 0x8c, 0xf8, 0xd1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x55, 0x82, 0x41, 0x52, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x65,
	0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x74, 0x6c, 0x76, 0x2d,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x52, 0x0a, 0x74, 0x6c, 0x76, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x1a, 0x9a, 0x1a, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x7a, 0x0a,
	0x09, 0x61, 0x6c, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0xfa, 0x85, 0x99, 0x28, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x6c, 0x73, 0x2d, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x52,
	0x08, 0x61, 0x6c, 0x73, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0xb5, 0x01, 0x0a, 0x0a, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6c, 0x73, 0x18, 0x86, 0xc5, 0xb8, 0x54, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x4b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x6c, 0x73, 0x42, 0x46,
	0x82, 0x41, 0x43, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2d, 0x61, 0x6c, 0x73, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x6c,
	0x73, 0x12, 0x8b, 0x01, 0x0a, 0x0f, 0x69, 0x6e, 0x5f, 0x38, 0x30, 0x32, 0x31, 0x71, 0x5f, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0xe7, 0xae, 0xf9, 0x44, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x4b, 0x82, 0x41, 0x48, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x69, 0x6e, 0x2d, 0x38, 0x30, 0x32, 0x31, 0x71, 0x2d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73,
	0x52, 0x0d, 0x69, 0x6e, 0x38, 0x30, 0x32, 0x31, 0x71, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x8b, 0x01, 0x0a, 0x0f, 0x69, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0x9d, 0xdc, 0xcc, 0x5c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x4b, 0x82, 0x41, 0x48, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f,
	0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69,
	0x6e, 0x2d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x0d,
	0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x86, 0x01,
	0x0a, 0x0d, 0x69, 0x6e, 0x5f, 0x63, 0x72, 0x63, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18,
	0xe2, 0x9d, 0xb8, 0xbd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x49,
	0x82, 0x41, 0x46, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x2d, 0x63,
	0x72, 0x63, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x0b, 0x69, 0x6e, 0x43, 0x72, 0x63,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x94, 0x01, 0x0a, 0x12, 0x69, 0x6e, 0x5f, 0x66, 0x72,
	0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x8b, 0xdf,
	0xa1, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4e, 0x82, 0x41, 0x4b,
	0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x2d, 0x66, 0x72, 0x61, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x10, 0x69, 0x6e, 0x46,
	0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x8f, 0x01,
	0x0a, 0x10, 0x69, 0x6e, 0x5f, 0x6a, 0x61, 0x62, 0x62, 0x65, 0x72, 0x5f, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0xbd, 0xb7, 0xa6, 0xd5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x4c, 0x82, 0x41, 0x49, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f,
	0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69,
	0x6e, 0x2d, 0x6a, 0x61, 0x62, 0x62, 0x65, 0x72, 0x2d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x52,
	0x0e, 0x69, 0x6e, 0x4a, 0x61, 0x62, 0x62, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x9d, 0x01, 0x0a, 0x15, 0x69, 0x6e, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0xc0, 0xe8, 0xfa, 0xa1, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x51, 0x82, 0x41, 0x4e, 0x2f, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x2d, 0x6d, 0x61, 0x63, 0x2d, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x2d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x12, 0x69, 0x6e, 0x4d,
	0x61, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x97, 0x01, 0x0a, 0x13, 0x69, 0x6e, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65,
	0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x8f, 0xa5, 0xdb, 0xcc, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69,
	0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x2d, 0x6d, 0x61, 0x63, 0x2d, 0x70, 0x61, 0x75, 0x73, 0x65,
	0x2d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x10, 0x69, 0x6e, 0x4d, 0x61, 0x63, 0x50, 0x61,
	0x75, 0x73, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x95, 0x01, 0x0a, 0x12, 0x69, 0x6e,
	0x5f, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x94, 0xd3, 0x81, 0xee, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x2d,
	0x6f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x7a, 0x65, 0x2d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x52,
	0x10, 0x69, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x7a, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x73, 0x12, 0x91, 0x01, 0x0a, 0x11, 0x69, 0x6e, 0x5f, 0x70, 0x63, 0x73, 0x5f, 0x62, 0x69, 0x70,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x90, 0xa8, 0x89, 0xf2, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4d, 0x82, 0x41, 0x4a, 0x2f, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69,
	0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x2d, 0x70, 0x63, 0x73, 0x2d, 0x62, 0x69, 0x70, 0x2d, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x0e, 0x69, 0x6e, 0x50, 0x63, 0x73, 0x42, 0x69, 0x70, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0xa0, 0x01, 0x0a, 0x16, 0x69, 0x6e, 0x5f, 0x70, 0x63, 0x73,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x18, 0xec, 0xd3, 0x80, 0xd8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x52, 0x82, 0x41, 0x4f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x2d,
	0x70, 0x63, 0x73, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x52, 0x13, 0x69, 0x6e, 0x50, 0x63, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x65,
	0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0xb9, 0x01, 0x0a, 0x1f, 0x69, 0x6e, 0x5f,
	0x70, 0x63, 0x73, 0x5f, 0x73, 0x65, 0x76, 0x65, 0x72, 0x65, 0x6c, 0x79, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0xa0, 0xcf, 0xc6,
	0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5b, 0x82, 0x41, 0x58, 0x2f,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x2d, 0x70, 0x63, 0x73, 0x2d, 0x73,
	0x65, 0x76, 0x65, 0x72, 0x65, 0x6c, 0x79, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x65, 0x64, 0x2d,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x1b, 0x69, 0x6e, 0x50, 0x63, 0x73, 0x53, 0x65,
	0x76, 0x65, 0x72, 0x65, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x65, 0x64, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x12, 0xac, 0x01, 0x0a, 0x1a, 0x69, 0x6e, 0x5f, 0x70, 0x63, 0x73, 0x5f,
	0x75, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x18, 0xb3, 0xb9, 0xc8, 0xf2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x56, 0x82, 0x41, 0x53, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c,
	0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x69, 0x6e, 0x2d, 0x70, 0x63, 0x73, 0x2d, 0x75, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x2d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x17, 0x69, 0x6e, 0x50, 0x63,
	0x73, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x97, 0x01, 0x0a, 0x13, 0x69, 0x6e, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72,
	0x73, 0x69, 0x7a, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x88, 0xba, 0xea, 0x5d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c,
	0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x2d, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x73,
	0x69, 0x7a, 0x65, 0x2d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x11, 0x69, 0x6e, 0x55, 0x6e,
	0x64, 0x65, 0x72, 0x73, 0x69, 0x7a, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x8e, 0x01,
	0x0a, 0x10, 0x6f, 0x75, 0x74, 0x5f, 0x38, 0x30, 0x32, 0x31, 0x71, 0x5f, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0xfc, 0xe3, 0xd0, 0x5e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x4c, 0x82, 0x41, 0x49, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x65,
	0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x75,
	0x74, 0x2d, 0x38, 0x30, 0x32, 0x31, 0x71, 0x2d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x0e,
	0x6f, 0x75, 0x74, 0x38, 0x30, 0x32, 0x31, 0x71, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x8f,
	0x01, 0x0a, 0x10, 0x6f, 0x75, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0xaa, 0xf8, 0xaf, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x4c, 0x82, 0x41, 0x49, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c,
	0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x6f, 0x75, 0x74, 0x2d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x52, 0x0e, 0x6f, 0x75, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x12, 0x88, 0x01, 0x0a, 0x0e, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x72, 0x63, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0xa9, 0xc9, 0x90, 0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x4a, 0x82, 0x41, 0x47, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f,
	0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f,
	0x75, 0x74, 0x2d, 0x63, 0x72, 0x63, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x0c, 0x6f,
	0x75, 0x74, 0x43, 0x72, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x9f, 0x01, 0x0a, 0x16,
	0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0xaf, 0xc3, 0x92, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x52, 0x82, 0x41, 0x4f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x6d, 0x61, 0x63, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x2d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x13, 0x6f, 0x75, 0x74, 0x4d, 0x61, 0x63,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x9a, 0x01,
	0x0a, 0x14, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0xe4, 0xb3, 0xef, 0xd1, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x50, 0x82, 0x41, 0x4d, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63,
	0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x2d, 0x6d, 0x61, 0x63, 0x2d, 0x70, 0x61, 0x75, 0x73, 0x65,
	0x2d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x11, 0x6f, 0x75, 0x74, 0x4d, 0x61, 0x63, 0x50,
	0x61, 0x75, 0x73, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x93, 0x01, 0x0a, 0x12, 0x6f,
	0x75, 0x74, 0x5f, 0x70, 0x63, 0x73, 0x5f, 0x62, 0x69, 0x70, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x18, 0xa3, 0xc9, 0x84, 0x63, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x75, 0x74,
	0x2d, 0x70, 0x63, 0x73, 0x2d, 0x62, 0x69, 0x70, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x52,
	0x0f, 0x6f, 0x75, 0x74, 0x50, 0x63, 0x73, 0x42, 0x69, 0x70, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x22, 0x7e, 0x0a, 0x09, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x6c, 0x73, 0x12, 0x23, 0x0a,
	0x12, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x41, 0x4c, 0x53, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52,
	0x4e, 0x45, 0x54, 0x10, 0x00, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e,
	0x45, 0x54, 0x12, 0x1b, 0x0a, 0x0e, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x41, 0x4c, 0x53, 0x5f,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x12,
	0x2f, 0x0a, 0x18, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x41, 0x4c, 0x53, 0x5f, 0x4c, 0x41, 0x53,
	0x45, 0x52, 0x5f, 0x53, 0x48, 0x55, 0x54, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x02, 0x1a, 0x11, 0x82,
	0x41, 0x0e, 0x4c, 0x41, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x48, 0x55, 0x54, 0x44, 0x4f, 0x57, 0x4e,
	0x1a, 0x82, 0x07, 0x0a, 0x07, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x99, 0x01, 0x0a,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x96, 0xa5, 0x8a, 0x5e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x41, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x67,
	0x69, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x3b, 0x82, 0x41, 0x38, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x96, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0xc3, 0x82, 0x89, 0xb3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x3a,
	0x82, 0x41, 0x37, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x6e, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x1a, 0xa0, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x8f, 0x01, 0x0a,
	0x10, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x18, 0xd4, 0xae, 0xb7, 0x37, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x4c, 0x82, 0x41, 0x49, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x6e,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x68, 0x79,
	0x73, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x0f, 0x70,
	0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x83,
	0x01, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x18, 0xb1,
	0xd0, 0xc4, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x47,
	0x82, 0x41, 0x44, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x6e, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x1a, 0x9e, 0x02, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x8f,
	0x01, 0x0a, 0x10, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x18, 0xbb, 0xc7, 0xf4, 0xeb, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x4b, 0x82, 0x41, 0x48, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c,
	0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x2f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70,
	0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52,
	0x0f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0x82, 0x01, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x18, 0xdc, 0x9a, 0xae, 0x4c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69,
	0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x1a, 0xe8, 0x20, 0x0a, 0x19, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0xd3, 0x01, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x9a, 0x8a, 0xa3, 0xf8, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x42, 0x53, 0x82, 0x41, 0x50, 0x2f, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0xf8, 0x1c, 0x0a, 0x0a, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0xd6, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x8b, 0x83, 0xf4, 0xe8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5e, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x5a, 0x82,
	0x41, 0x57, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x6c, 0x6f, 0x67, 0x69,
	0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0xd1, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xcc, 0xf9, 0xd4, 0x7d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x59, 0x82, 0x41, 0x56, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2d, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xe1, 0x0c, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0xa3, 0x01, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0xc0, 0xc8, 0xe8, 0x95, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x65, 0x82, 0x41, 0x62, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2d, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x86, 0x02, 0x0a, 0x0f, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0xca, 0x96, 0xe6, 0xd9, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x6a, 0x82, 0x41, 0x67, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2d, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x0e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0xa2, 0x01, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0xd4, 0xf1, 0xce, 0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x66, 0x82, 0x41, 0x63, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x6c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x8e, 0x01, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0xba,
	0xb3, 0xa6, 0x47, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x60, 0x82, 0x41,
	0x5d, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63,
	0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0xab, 0x01, 0x0a, 0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0xa1, 0xc5, 0x8a, 0x2c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6a, 0x82, 0x41, 0x67, 0x2f, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67,
	0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0xba, 0x01, 0x0a, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18,
	0xb4, 0xd6, 0xb6, 0xff, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x46,
	0x52, 0x41, 0x4d, 0x45, 0x4d, 0x41, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4f, 0x4c, 0x42, 0x62, 0x82, 0x41, 0x5f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2d, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x12, 0xad, 0x01, 0x0a, 0x0f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x18, 0xb4, 0xd0, 0xca, 0x53, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x6a, 0x82, 0x41, 0x67, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x2d, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x0e, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0xb9, 0x01, 0x0a, 0x14, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x61, 0x72, 0x79, 0x5f, 0x73,
	0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0xca, 0xeb, 0xc2, 0xb5, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x49,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6f, 0x82, 0x41, 0x6c, 0x2f, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67,
	0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x61, 0x72, 0x79, 0x2d, 0x73, 0x6c,
	0x6f, 0x74, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x12, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x61, 0x72, 0x79, 0x53, 0x6c, 0x6f, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x9a, 0x01, 0x0a,
	0x0e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x14, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x36, 0x0a, 0x1e, 0x41, 0x53, 0x53,
	0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x47, 0x49,
	0x43, 0x41, 0x4c, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x01, 0x1a, 0x12, 0x82,
	0x41, 0x0f, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45,
	0x4c, 0x12, 0x36, 0x0a, 0x1e, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x4e, 0x45, 0x4c, 0x10, 0x02, 0x1a, 0x12, 0x82, 0x41, 0x0f, 0x4f, 0x50, 0x54, 0x49, 0x43, 0x41,
	0x4c, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x1a, 0xd8, 0x0c, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0xa1, 0x01, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x91, 0xea, 0xa8, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x64, 0x82, 0x41, 0x61, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63,
	0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x2d, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x84, 0x02, 0x0a, 0x0f, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x99, 0xa3, 0xf1, 0x85,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x6c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x69, 0x82, 0x41, 0x66, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2d, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0e,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0xa2,
	0x01, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xb7,
	0x89, 0xc7, 0xa9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x65, 0x82, 0x41, 0x62, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x6c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x8d, 0x01, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0xfd, 0xec,
	0x99, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5f, 0x82, 0x41, 0x5c,
	0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0xaa, 0x01, 0x0a, 0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0xca, 0xa8, 0xfd, 0x32, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x69, 0x82, 0x41, 0x66, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63,
	0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x2d, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0xb9, 0x01, 0x0a, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0xcb, 0xee, 0x95,
	0xab, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x46, 0x52, 0x41, 0x4d,
	0x45, 0x4d, 0x41, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c,
	0x42, 0x61, 0x82, 0x41, 0x5e, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x6c,
	0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0xad, 0x01, 0x0a,
	0x0f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x18, 0xbb, 0x93, 0xa3, 0xc5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x69, 0x82, 0x41, 0x66, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f,
	0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x0e, 0x6f, 0x70,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0xb8, 0x01, 0x0a,
	0x14, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0xfb, 0xc5, 0xd2, 0xf7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x6e, 0x82, 0x41, 0x6b, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2d, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x61, 0x72, 0x79, 0x2d, 0x73, 0x6c, 0x6f, 0x74, 0x2d, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x12, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x61, 0x72, 0x79, 0x53, 0x6c,
	0x6f, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x9a, 0x01, 0x0a, 0x0e, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x53,
	0x53, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x45, 0x54, 0x10, 0x00, 0x12, 0x36, 0x0a, 0x1e, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x4d, 0x45,
	0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x01, 0x1a, 0x12, 0x82, 0x41, 0x0f, 0x4c, 0x4f, 0x47,
	0x49, 0x43, 0x41, 0x4c, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x12, 0x36, 0x0a, 0x1e,
	0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f,
	0x50, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x02,
	0x1a, 0x12, 0x82, 0x41, 0x0f, 0x4f, 0x50, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x43, 0x48, 0x41,
	0x4e, 0x4e, 0x45, 0x4c, 0x1a, 0xf9, 0x01, 0x0a, 0x0d, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x6f, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x59, 0x82, 0x41, 0x56, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63,
	0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x2d, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x77, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e,
	0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x1a, 0xc0, 0x3a, 0x0a, 0x03, 0x4f, 0x74, 0x6e, 0x12, 0x91, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0xc6, 0xce, 0xce, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x2e, 0x4f, 0x74, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x37, 0x82, 0x41, 0x34,
	0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x6f, 0x74, 0x6e, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x8e, 0x01, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xb3, 0x88, 0xec, 0xcd, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x67,
	0x69, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x4f, 0x74, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x36,
	0x82, 0x41, 0x33, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x6f, 0x74, 0x6e,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xfb, 0x04,
	0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xd2, 0x01, 0x0a, 0x1a, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x67, 0x72, 0x61, 0x6e,
	0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0xb9, 0xb1, 0xc9, 0xfc, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x41, 0x52, 0x59,
	0x53, 0x4c, 0x4f, 0x54, 0x47, 0x52, 0x41, 0x4e, 0x55, 0x4c, 0x41, 0x52, 0x49, 0x54, 0x59, 0x42,
	0x52, 0x82, 0x41, 0x4f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x6f, 0x74,
	0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x61,
	0x72, 0x79, 0x2d, 0x73, 0x6c, 0x6f, 0x74, 0x2d, 0x67, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72,
	0x69, 0x74, 0x79, 0x52, 0x18, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x61, 0x72, 0x79, 0x53, 0x6c,
	0x6f, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x7e, 0x0a,
	0x0c, 0x74, 0x74, 0x69, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x18, 0x8a, 0xe1,
	0xad, 0x44, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x44, 0x82, 0x41, 0x41,
	0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x6f, 0x74, 0x6e, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x74, 0x74, 0x69, 0x2d, 0x6d, 0x73, 0x67, 0x2d, 0x61, 0x75, 0x74,
	0x6f, 0x52, 0x0a, 0x74, 0x74, 0x69, 0x4d, 0x73, 0x67, 0x41, 0x75, 0x74, 0x6f, 0x12, 0x8c, 0x01,
	0x0a, 0x10, 0x74, 0x74, 0x69, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x18, 0xbb, 0xbd, 0xc6, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x48, 0x82, 0x41, 0x45, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c,
	0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x2f, 0x6f, 0x74, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x74, 0x74, 0x69, 0x2d,
	0x6d, 0x73, 0x67, 0x2d, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x0e, 0x74, 0x74,
	0x69, 0x4d, 0x73, 0x67, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x8c, 0x01, 0x0a,
	0x10, 0x74, 0x74, 0x69, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69,
	0x74, 0x18, 0xeb, 0xfa, 0xce, 0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x48, 0x82, 0x41, 0x45, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f,
	0x6f, 0x74, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x74, 0x74, 0x69, 0x2d, 0x6d,
	0x73, 0x67, 0x2d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x52, 0x0e, 0x74, 0x74, 0x69,
	0x4d, 0x73, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x1a, 0x95, 0x33, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x9e, 0x01, 0x0a, 0x17, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x18, 0xb2, 0xac, 0xc1, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x6f, 0x74,
	0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x2d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x52,
	0x15, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x87, 0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x9e, 0xf0, 0xa7, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x6f, 0x74, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x63, 0x6f, 0x64, 0x65, 0x2d, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x0e, 0x63, 0x6f, 0x64, 0x65, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x85, 0x01, 0x0a, 0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x18, 0xba, 0xa5, 0x88, 0xe5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c,
	0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x2f, 0x6f, 0x74, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x65, 0x64, 0x2d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x87, 0x01, 0x0a, 0x0f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x87, 0x87, 0xa4,
	0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x46, 0x82, 0x41, 0x43, 0x2f,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x6f, 0x74, 0x6e, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x52, 0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x65, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x12, 0x96, 0x01, 0x0a, 0x04, 0x65, 0x73, 0x6e, 0x72, 0x18, 0x86, 0xba, 0xda, 0xe3,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x4f, 0x74, 0x6e, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x45, 0x73, 0x6e, 0x72, 0x42, 0x3b, 0x82, 0x41, 0x38, 0x2f, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x6f, 0x74, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x65, 0x73, 0x6e, 0x72, 0x52, 0x04, 0x65, 0x73, 0x6e, 0x72, 0x12, 0x90, 0x01, 0x0a, 0x12,
	0x66, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x69,
	0x74, 0x73, 0x18, 0xe3, 0xb3, 0xd6, 0xa5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x49, 0x82, 0x41, 0x46, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f,
	0x6f, 0x74, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x66, 0x65, 0x63, 0x2d, 0x63, 0x6f,
	0x72, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x2d, 0x62, 0x69, 0x74, 0x73, 0x52, 0x10, 0x66, 0x65,
	0x63, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x69, 0x74, 0x73, 0x12, 0x93,
	0x01, 0x0a, 0x13, 0x66, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x8c, 0xd3, 0xfa, 0xe2, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4a, 0x82, 0x41, 0x47, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63,
	0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x2f, 0x6f, 0x74, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x66, 0x65,
	0x63, 0x2d, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x2d, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x52, 0x11, 0x66, 0x65, 0x63, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x12, 0xa1, 0x01, 0x0a, 0x18, 0x66, 0x65, 0x63, 0x5f, 0x75, 0x6e, 0x63,
	0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x18, 0xd9, 0x8b, 0xa6, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x6f, 0x74,
	0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x66, 0x65, 0x63, 0x2d, 0x75, 0x6e, 0x63, 0x6f,
	0x72, 0x72, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x52, 0x16, 0x66, 0x65, 0x63, 0x55, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x9e, 0x01, 0x0a, 0x17, 0x66, 0x65, 0x63,
	0x5f, 0x75, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x77,
	0x6f, 0x72, 0x64, 0x73, 0x18, 0x86, 0xa0, 0xc1, 0x5a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c,
	0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x2f, 0x6f, 0x74, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x66, 0x65, 0x63, 0x2d, 0x75,
	0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x77, 0x6f, 0x72,
	0x64, 0x73, 0x52, 0x15, 0x66, 0x65, 0x63, 0x55, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x57, 0x6f, 0x72, 0x64, 0x73, 0x12, 0xb2, 0x01, 0x0a, 0x0c, 0x70, 0x6f,
	0x73, 0x74, 0x5f, 0x66, 0x65, 0x63, 0x5f, 0x62, 0x65, 0x72, 0x18, 0xe9, 0xe0, 0xb7, 0xf4, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x4f, 0x74, 0x6e, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x46, 0x65, 0x63, 0x42, 0x65, 0x72, 0x42, 0x43, 0x82,
	0x41, 0x40, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x6f, 0x74, 0x6e, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x6f, 0x73, 0x74, 0x2d, 0x66, 0x65, 0x63, 0x2d, 0x62,
	0x65, 0x72, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x46, 0x65, 0x63, 0x42, 0x65, 0x72, 0x12, 0xad,
	0x01, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x5f, 0x66, 0x65, 0x63, 0x5f, 0x62, 0x65, 0x72, 0x18, 0xc4,
	0xd0, 0xf5, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x4f, 0x74, 0x6e, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x65, 0x46, 0x65, 0x63, 0x42, 0x65, 0x72, 0x42,
	0x42, 0x82, 0x41, 0x3f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x6f, 0x74,
	0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x2d, 0x66, 0x65, 0x63, 0x2d,
	0x62, 0x65, 0x72, 0x52, 0x09, 0x70, 0x72, 0x65, 0x46, 0x65, 0x63, 0x42, 0x65, 0x72, 0x12, 0x9f,
	0x01, 0x0a, 0x07, 0x71, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0xb7, 0xa3, 0xf7, 0x49, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x4f, 0x74, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x51, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x6f, 0x74, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x71, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x71, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x72, 0x0a, 0x07, 0x72, 0x64, 0x69, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0xf1, 0xcd, 0xbe, 0xb1,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3e, 0x82, 0x41,
	0x3b, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x6f, 0x74, 0x6e, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x64, 0x69, 0x2d, 0x6d, 0x73, 0x67, 0x52, 0x06, 0x72, 0x64,
	0x69, 0x4d, 0x73, 0x67, 0x12, 0xa1, 0x01, 0x0a, 0x18, 0x73, 0x65, 0x76, 0x65, 0x72, 0x65, 0x6c,
	0x79, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x18, 0xf5, 0xe1, 0xc1, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x6f, 0x74,
	0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x65, 0x76, 0x65, 0x72, 0x65, 0x6c, 0x79,
	0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x52, 0x16, 0x73, 0x65, 0x76, 0x65, 0x72, 0x65, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x65,
	0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0xd0, 0x01, 0x0a, 0x1a, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x67, 0x72, 0x61, 0x6e,
	0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0xc6, 0x96, 0xbf, 0x76, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x41, 0x52, 0x59, 0x53,
	0x4c, 0x4f, 0x54, 0x47, 0x52, 0x41, 0x4e, 0x55, 0x4c, 0x41, 0x52, 0x49, 0x54, 0x59, 0x42, 0x51,
	0x82, 0x41, 0x4e, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x6f, 0x74, 0x6e,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x61, 0x72, 0x79,
	0x2d, 0x73, 0x6c, 0x6f, 0x74, 0x2d, 0x67, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74,
	0x79, 0x52, 0x18, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x61, 0x72, 0x79, 0x53, 0x6c, 0x6f, 0x74,
	0x47, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x7d, 0x0a, 0x0c, 0x74,
	0x74, 0x69, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x18, 0xed, 0xa1, 0x8c, 0x5d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x43, 0x82, 0x41, 0x40, 0x2f, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c,
	0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x6f, 0x74, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x74, 0x74, 0x69, 0x2d, 0x6d, 0x73, 0x67, 0x2d, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x0a,
	0x74, 0x74, 0x69, 0x4d, 0x73, 0x67, 0x41, 0x75, 0x74, 0x6f, 0x12, 0x8b, 0x01, 0x0a, 0x10, 0x74,
	0x74, 0x69, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18,
	0xb0, 0xbd, 0x8e, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x47, 0x82, 0x41, 0x44, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x6f, 0x74,
	0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x74, 0x69, 0x2d, 0x6d, 0x73, 0x67, 0x2d,
	0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x0e, 0x74, 0x74, 0x69, 0x4d, 0x73, 0x67,
	0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x7f, 0x0a, 0x0c, 0x74, 0x74, 0x69, 0x5f,
	0x6d, 0x73, 0x67, 0x5f, 0x72, 0x65, 0x63, 0x76, 0x18, 0xd8, 0x84, 0xb2, 0x18, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x43, 0x82, 0x41, 0x40, 0x2f, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x6f, 0x74, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x74, 0x74, 0x69, 0x2d, 0x6d, 0x73, 0x67, 0x2d, 0x72, 0x65, 0x63, 0x76, 0x52, 0x0a, 0x74,
	0x74, 0x69, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x63, 0x76, 0x12, 0x8b, 0x01, 0x0a, 0x10, 0x74, 0x74,
	0x69, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x18, 0xb0,
	0xa0, 0x81, 0x42, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x47,
	0x82, 0x41, 0x44, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x6f, 0x74, 0x6e,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x74, 0x69, 0x2d, 0x6d, 0x73, 0x67, 0x2d, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x52, 0x0e, 0x74, 0x74, 0x69, 0x4d, 0x73, 0x67, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x12, 0x93, 0x01, 0x0a, 0x13, 0x75, 0x6e, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x98, 0xb1, 0xed, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4a, 0x82,
	0x41, 0x47, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x6f, 0x74, 0x6e, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x2d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x12, 0x75, 0x6e, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x1a, 0xc4, 0x06,
	0x0a, 0x04, 0x45, 0x73, 0x6e, 0x72, 0x12, 0x6f, 0x0a, 0x03, 0x61, 0x76, 0x67, 0x18, 0xab, 0xc6,
	0xbc, 0x9d, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f,
	0x6f, 0x74, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x73, 0x6e, 0x72, 0x2f, 0x61,
	0x76, 0x67, 0x52, 0x03, 0x61, 0x76, 0x67, 0x12, 0x7b, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x18, 0xb4, 0xa2, 0xe3, 0x9d, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x43, 0x82, 0x41, 0x40, 0x2f, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69,
	0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x6f, 0x74, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65,
	0x73, 0x6e, 0x72, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x07, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x12, 0x79, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0xd2, 0xa2, 0xd6, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x44, 0x82, 0x41, 0x41, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x6f, 0x74,
	0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x73, 0x6e, 0x72, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0x6f, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0xf5, 0xdc, 0xe7, 0xd5, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x6f, 0x74, 0x6e, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x65, 0x73, 0x6e, 0x72, 0x2f, 0x6d, 0x61, 0x78, 0x52, 0x03, 0x6d, 0x61, 0x78,
	0x12, 0x78, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xe5, 0xb5, 0xe5,
	0xd7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x44, 0x82, 0x41, 0x41,
	0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x6f, 0x74, 0x6e, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x65, 0x73, 0x6e, 0x72, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x74, 0x69, 0x6d,
	0x65, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x6f, 0x0a, 0x03, 0x6d, 0x69,
	0x6e, 0x18, 0x9b, 0xc2, 0xe7, 0x95, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63,
	0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x2f, 0x6f, 0x74, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x73,
	0x6e, 0x72, 0x2f, 0x6d, 0x69, 0x6e, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x77, 0x0a, 0x08, 0x6d,
	0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xc7, 0xc1, 0xb8, 0x58, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63,
	0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x2f, 0x6f, 0x74, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x73,
	0x6e, 0x72, 0x2f, 0x6d, 0x69, 0x6e, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x69, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x1a, 0x83, 0x07, 0x0a, 0x0a, 0x50, 0x6f, 0x73, 0x74, 0x46, 0x65, 0x63,
	0x42, 0x65, 0x72, 0x12, 0x76, 0x0a, 0x03, 0x61, 0x76, 0x67, 0x18, 0xf4, 0xd3, 0xf8, 0x59, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x47, 0x82,
	0x41, 0x44, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x6f, 0x74, 0x6e, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x6f, 0x73, 0x74, 0x2d, 0x66, 0x65, 0x63, 0x2d, 0x62,
	0x65, 0x72, 0x2f, 0x61, 0x76, 0x67, 0x52, 0x03, 0x61, 0x76, 0x67, 0x12, 0x83, 0x01, 0x0a, 0x07,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0xcf, 0x9e, 0x8b, 0x99, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4b, 0x82, 0x41, 0x48,
	0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x6f, 0x74, 0x6e, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x70, 0x6f, 0x73, 0x74, 0x2d, 0x66, 0x65, 0x63, 0x2d, 0x62, 0x65, 0x72,
	0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x12, 0x81, 0x01, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0xef,
	0xd0, 0xca, 0xa9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4c, 0x82,
	0x41, 0x49, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x6f, 0x74, 0x6e, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x6f, 0x73, 0x74, 0x2d, 0x66, 0x65, 0x63, 0x2d, 0x62,
	0x65, 0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x77, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x8e, 0xf7, 0x86,
	0xc1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x47, 0x82, 0x41, 0x44, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x6f,
	0x74, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x6f, 0x73, 0x74, 0x2d, 0x66, 0x65,
	0x63, 0x2d, 0x62, 0x65, 0x72, 0x2f, 0x6d, 0x61, 0x78, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x80,
	0x01, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xec, 0xc2, 0xac, 0xd3,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4c, 0x82, 0x41, 0x49, 0x2f,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x6f, 0x74, 0x6e, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x70, 0x6f, 0x73, 0x74, 0x2d, 0x66, 0x65, 0x63, 0x2d, 0x62, 0x65, 0x72, 0x2f,
	0x6d, 0x61, 0x78, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x76, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0xe0, 0x91, 0x87, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x47, 0x82, 0x41, 0x44,
	0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x6f, 0x74, 0x6e, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x70, 0x6f, 0x73, 0x74, 0x2d, 0x66, 0x65, 0x63, 0x2d, 0x62, 0x65, 0x72,
	0x2f, 0x6d, 0x69, 0x6e, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x7f, 0x0a, 0x08, 0x6d, 0x69, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xc2, 0xe6, 0xe2, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x4c, 0x82, 0x41, 0x49, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2f, 0x6f, 0x74, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x6f, 0x73, 0x74,
	0x2d, 0x66, 0x65, 0x63, 0x2d, 0x62, 0x65, 0x72, 0x2f, 0x6d, 0x69, 0x6e, 0x2d, 0x74, 0x69, 0x6d,
	0x65, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0xf8, 0x06, 0x0a, 0x09, 0x50,
	0x72, 0x65, 0x46, 0x65, 0x63, 0x42, 0x65, 0x72, 0x12, 0x76, 0x0a, 0x03, 0x61, 0x76, 0x67, 0x18,
	0xdd, 0xf9, 0xc6, 0xca, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2f, 0x6f, 0x74, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x2d,
	0x66, 0x65, 0x63, 0x2d, 0x62, 0x65, 0x72, 0x2f, 0x61, 0x76, 0x67, 0x52, 0x03, 0x61, 0x76, 0x67,
	0x12, 0x82, 0x01, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x8a, 0xbc, 0x8d,
	0xc7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x4a, 0x82, 0x41, 0x47, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x6f,
	0x74, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x2d, 0x66, 0x65, 0x63,
	0x2d, 0x62, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x07, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x7f, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0xfc, 0xd3, 0xb5, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x4b, 0x82, 0x41, 0x48, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x6f, 0x74,
	0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x2d, 0x66, 0x65, 0x63, 0x2d,
	0x62, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x75, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0xbf, 0xc0,
	0xa3, 0x62, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x6f,
	0x74, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x2d, 0x66, 0x65, 0x63,
	0x2d, 0x62, 0x65, 0x72, 0x2f, 0x6d, 0x61, 0x78, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x7e, 0x0a,
	0x08, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x83, 0xba, 0xb0, 0x3b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4b, 0x82, 0x41, 0x48, 0x2f, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67,
	0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x6f, 0x74, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x70, 0x72, 0x65, 0x2d, 0x66, 0x65, 0x63, 0x2d, 0x62, 0x65, 0x72, 0x2f, 0x6d, 0x61, 0x78, 0x2d,
	0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x75, 0x0a,
	0x03, 0x6d, 0x69, 0x6e, 0x18, 0xc1, 0xa7, 0xa3, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67,
	0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x6f, 0x74, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x70, 0x72, 0x65, 0x2d, 0x66, 0x65, 0x63, 0x2d, 0x62, 0x65, 0x72, 0x2f, 0x6d, 0x69, 0x6e, 0x52,
	0x03, 0x6d, 0x69, 0x6e, 0x12, 0x7f, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0xd9, 0x88, 0x8e, 0xb7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x4b, 0x82, 0x41, 0x48, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x6f, 0x74,
	0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x2d, 0x66, 0x65, 0x63, 0x2d,
	0x62, 0x65, 0x72, 0x2f, 0x6d, 0x69, 0x6e, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x69,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0xdb, 0x06, 0x0a, 0x06, 0x51, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x72, 0x0a, 0x03, 0x61, 0x76, 0x67, 0x18, 0xb6, 0xb3, 0xd5, 0xd1, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x42, 0x82, 0x41, 0x3f,
	0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x6f, 0x74, 0x6e, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x71, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2f, 0x61, 0x76, 0x67, 0x52,
	0x03, 0x61, 0x76, 0x67, 0x12, 0x7e, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18,
	0xb5, 0xfd, 0xe4, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2f, 0x6f, 0x74, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x71, 0x2d, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x07, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x12, 0x7c, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0xc9, 0xe3, 0xab, 0xb9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x47, 0x82, 0x41, 0x44, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x6f, 0x74,
	0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x71, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x71, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x90, 0xcb, 0xe3, 0x18, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x42, 0x82, 0x41,
	0x3f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x6f, 0x74, 0x6e, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x71, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2f, 0x6d, 0x61, 0x78,
	0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x7b, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0xb2, 0xa1, 0xa3, 0xc1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x47, 0x82, 0x41, 0x44, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x6f,
	0x74, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x71, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x72, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0xbe, 0xb2, 0xe3, 0xd8, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x42, 0x82,
	0x41, 0x3f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x6f, 0x74, 0x6e, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x71, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2f, 0x6d, 0x69,
	0x6e, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x7b, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x9c, 0xa4, 0x83, 0xa4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x47, 0x82, 0x41, 0x44, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f,
	0x6f, 0x74, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x71, 0x2d, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x2f, 0x6d, 0x69, 0x6e, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x1a, 0xc5, 0x0b, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x96, 0x01,
	0x0a, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xb3, 0xfa,
	0xbd, 0x3c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x7b, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xec, 0x8e, 0xdc, 0x81, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69,
	0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x66, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0xc2, 0xc5, 0xb4,
	0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x38, 0x82, 0x41, 0x35, 0x2f,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0xa3, 0x01, 0x0a, 0x0a,
	0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x92, 0xe8, 0x9d, 0x7e, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4c, 0x69,
	0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x3d, 0x82, 0x41, 0x3a, 0x2f, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67,
	0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x69, 0x6e, 0x6b,
	0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0xbb, 0x01, 0x0a, 0x14, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0xf6, 0xf9, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x41, 0x4c, 0x45,
	0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x54, 0x59,
	0x50, 0x45, 0x42, 0x47, 0x82, 0x41, 0x44, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c,
	0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x12, 0x6c, 0x6f, 0x67,
	0x69, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x9f, 0x01, 0x0a, 0x0d, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0xa3, 0x90, 0xbc, 0xfa, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x2d, 0x6d,
	0x6f, 0x64, 0x65, 0x52, 0x0c, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x9b, 0x01, 0x0a, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x18, 0x83, 0xfe, 0xf3, 0x6e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x54,
	0x52, 0x49, 0x42, 0x55, 0x54, 0x41, 0x52, 0x59, 0x52, 0x41, 0x54, 0x45, 0x43, 0x4c, 0x41, 0x53,
	0x53, 0x54, 0x59, 0x50, 0x45, 0x42, 0x3d, 0x82, 0x41, 0x3a, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63,
	0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x52, 0x09, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12,
	0x78, 0x0a, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x9b,
	0xdb, 0xbf, 0xc4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3e, 0x82,
	0x41, 0x3b, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x0a, 0x74,
	0x65, 0x73, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0xa4, 0x01, 0x0a, 0x0d, 0x74, 0x72,
	0x69, 0x62, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0xe6, 0xe5, 0x84, 0xd9,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x54, 0x52, 0x49, 0x42, 0x55,
	0x54, 0x41, 0x52, 0x59, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x54, 0x59, 0x50, 0x45,
	0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x72, 0x69, 0x62, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x52, 0x0c, 0x74, 0x72, 0x69, 0x62, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x22, 0x79, 0x0a, 0x09, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x13, 0x0a,
	0x0f, 0x4c, 0x49, 0x4e, 0x4b, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54,
	0x10, 0x00, 0x12, 0x17, 0x0a, 0x0c, 0x4c, 0x49, 0x4e, 0x4b, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x55, 0x50, 0x10, 0x01, 0x1a, 0x05, 0x82, 0x41, 0x02, 0x55, 0x50, 0x12, 0x1b, 0x0a, 0x0e, 0x4c,
	0x49, 0x4e, 0x4b, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x02, 0x1a,
	0x07, 0x82, 0x41, 0x04, 0x44, 0x4f, 0x57, 0x4e, 0x12, 0x21, 0x0a, 0x11, 0x4c, 0x49, 0x4e, 0x4b,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x1a,
	0x0a, 0x82, 0x41, 0x07, 0x54, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x1a, 0xa4, 0x01, 0x0a, 0x0a,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4b, 0x65, 0x79, 0x12, 0x48, 0x0a, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x32, 0x82, 0x41, 0x2f, 0x2f, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c,
	0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x4c, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x1a, 0xac, 0x07, 0x0a, 0x10, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x77, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0xf8, 0x80, 0x9a, 0xf2, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x65, 0x79, 0x42, 0x2a,
	0x82, 0x41, 0x27, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2d,
	0x6d, 0x6f, 0x64, 0x65, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x1a, 0xff, 0x04, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0xfd, 0xc9, 0xc5, 0x59, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x31, 0x82, 0x41, 0x2e, 0x2f, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x73, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x81, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xf2, 0xf4, 0xce, 0x63,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65,
	0x73, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x30, 0x82, 0x41,
	0x2d, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2d, 0x6d, 0x6f,
	0x64, 0x65, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x08, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a,
	0xe0, 0x02, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x78, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x85, 0x8b, 0x9e, 0x33, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3c, 0x82, 0x41, 0x39, 0x2f, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x73, 0x2f,
	0x6d, 0x6f, 0x64, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x69, 0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0xe2,
	0xa7, 0xe1, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x38, 0x82, 0x41,
	0x35, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2d, 0x6d, 0x6f,
	0x64, 0x65, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d,
	0x6f, 0x64, 0x65, 0x2d, 0x69, 0x64, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x72,
	0x0a, 0x09, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0xab, 0x9e, 0x98, 0xfb,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3a, 0x82, 0x41,
	0x37, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2d, 0x6d, 0x6f,
	0x64, 0x65, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x2d, 0x69, 0x64, 0x52, 0x08, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x49, 0x64, 0x1a, 0x9c, 0x01, 0x0a, 0x07, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x4b,
	0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x32, 0x82, 0x41, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x2f, 0x6d, 0x6f, 0x64, 0x65,
	0x2d, 0x69, 0x64, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x1a, 0x07, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x63, 0x6f,
	0x6d, 0x2e, 0x6e, 0x6f, 0x63, 0x73, 0x79, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_openconfig_terminal_device_proto_rawDescOnce sync.Once
	file_openconfig_terminal_device_proto_rawDescData = file_openconfig_terminal_device_proto_rawDesc
)

func file_openconfig_terminal_device_proto_rawDescGZIP() []byte {
	file_openconfig_terminal_device_proto_rawDescOnce.Do(func() {
		file_openconfig_terminal_device_proto_rawDescData = protoimpl.X.CompressGZIP(file_openconfig_terminal_device_proto_rawDescData)
	})
	return file_openconfig_terminal_device_proto_rawDescData
}

var file_openconfig_terminal_device_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_openconfig_terminal_device_proto_msgTypes = make([]protoimpl.MessageInfo, 45)
var file_openconfig_terminal_device_proto_goTypes = []interface{}{
	(TerminalDevice_LogicalChannels_Channel_Ethernet_Config_ClientAls)(0),                                  // 0: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Config.ClientAls
	(TerminalDevice_LogicalChannels_Channel_Ethernet_State_ClientAls)(0),                                   // 1: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.State.ClientAls
	(TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config_AssignmentType)(0), // 2: openconfig.TerminalDevice.LogicalChannels.Channel.LogicalChannelAssignments.Assignment.Config.AssignmentType
	(TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_State_AssignmentType)(0),  // 3: openconfig.TerminalDevice.LogicalChannels.Channel.LogicalChannelAssignments.Assignment.State.AssignmentType
	(TerminalDevice_LogicalChannels_Channel_State_LinkState)(0),                                            // 4: openconfig.TerminalDevice.LogicalChannels.Channel.State.LinkState
	(*TerminalDevice)(nil),                                                                                // 5: openconfig.TerminalDevice
	(*TerminalDevice_Config)(nil),                                                                         // 6: openconfig.TerminalDevice.Config
	(*TerminalDevice_LogicalChannels)(nil),                                                                // 7: openconfig.TerminalDevice.LogicalChannels
	(*TerminalDevice_OperationalModes)(nil),                                                               // 8: openconfig.TerminalDevice.OperationalModes
	(*TerminalDevice_State)(nil),                                                                          // 9: openconfig.TerminalDevice.State
	(*TerminalDevice_LogicalChannels_Channel)(nil),                                                        // 10: openconfig.TerminalDevice.LogicalChannels.Channel
	(*TerminalDevice_LogicalChannels_ChannelKey)(nil),                                                     // 11: openconfig.TerminalDevice.LogicalChannels.ChannelKey
	(*TerminalDevice_LogicalChannels_Channel_Config)(nil),                                                 // 12: openconfig.TerminalDevice.LogicalChannels.Channel.Config
	(*TerminalDevice_LogicalChannels_Channel_Ethernet)(nil),                                               // 13: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet
	(*TerminalDevice_LogicalChannels_Channel_Ingress)(nil),                                                // 14: openconfig.TerminalDevice.LogicalChannels.Channel.Ingress
	(*TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments)(nil),                              // 15: openconfig.TerminalDevice.LogicalChannels.Channel.LogicalChannelAssignments
	(*TerminalDevice_LogicalChannels_Channel_Otn)(nil),                                                    // 16: openconfig.TerminalDevice.LogicalChannels.Channel.Otn
	(*TerminalDevice_LogicalChannels_Channel_State)(nil),                                                  // 17: openconfig.TerminalDevice.LogicalChannels.Channel.State
	(*TerminalDevice_LogicalChannels_Channel_Ethernet_Config)(nil),                                        // 18: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Config
	(*TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp)(nil),                                          // 19: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Lldp
	(*TerminalDevice_LogicalChannels_Channel_Ethernet_State)(nil),                                         // 20: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.State
	(*TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Config)(nil),                                   // 21: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Lldp.Config
	(*TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors)(nil),                                // 22: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Lldp.Neighbors
	(*TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_State)(nil),                                    // 23: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Lldp.State
	(*TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor)(nil),                       // 24: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Lldp.Neighbors.Neighbor
	(*TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_NeighborKey)(nil),                    // 25: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Lldp.Neighbors.NeighborKey
	(*TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_Config)(nil),                // 26: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Lldp.Neighbors.Neighbor.Config
	(*TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_CustomTlvs)(nil),            // 27: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Lldp.Neighbors.Neighbor.CustomTlvs
	(*TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_State)(nil),                 // 28: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Lldp.Neighbors.Neighbor.State
	(*TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_CustomTlvs_Tlv)(nil),        // 29: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Lldp.Neighbors.Neighbor.CustomTlvs.Tlv
	(*TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_CustomTlvs_TlvKey)(nil),     // 30: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Lldp.Neighbors.Neighbor.CustomTlvs.TlvKey
	(*TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_CustomTlvs_Tlv_Config)(nil), // 31: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Lldp.Neighbors.Neighbor.CustomTlvs.Tlv.Config
	(*TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_CustomTlvs_Tlv_State)(nil),  // 32: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Lldp.Neighbors.Neighbor.CustomTlvs.Tlv.State
	(*TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_State_Counters)(nil),                           // 33: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Lldp.State.Counters
	(*TerminalDevice_LogicalChannels_Channel_Ingress_Config)(nil),                                         // 34: openconfig.TerminalDevice.LogicalChannels.Channel.Ingress.Config
	(*TerminalDevice_LogicalChannels_Channel_Ingress_State)(nil),                                          // 35: openconfig.TerminalDevice.LogicalChannels.Channel.Ingress.State
	(*TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment)(nil),                   // 36: openconfig.TerminalDevice.LogicalChannels.Channel.LogicalChannelAssignments.Assignment
	(*TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_AssignmentKey)(nil),                // 37: openconfig.TerminalDevice.LogicalChannels.Channel.LogicalChannelAssignments.AssignmentKey
	(*TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config)(nil),            // 38: openconfig.TerminalDevice.LogicalChannels.Channel.LogicalChannelAssignments.Assignment.Config
	(*TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_State)(nil),             // 39: openconfig.TerminalDevice.LogicalChannels.Channel.LogicalChannelAssignments.Assignment.State
	(*TerminalDevice_LogicalChannels_Channel_Otn_Config)(nil),                                             // 40: openconfig.TerminalDevice.LogicalChannels.Channel.Otn.Config
	(*TerminalDevice_LogicalChannels_Channel_Otn_State)(nil),                                              // 41: openconfig.TerminalDevice.LogicalChannels.Channel.Otn.State
	(*TerminalDevice_LogicalChannels_Channel_Otn_State_Esnr)(nil),                                         // 42: openconfig.TerminalDevice.LogicalChannels.Channel.Otn.State.Esnr
	(*TerminalDevice_LogicalChannels_Channel_Otn_State_PostFecBer)(nil),                                   // 43: openconfig.TerminalDevice.LogicalChannels.Channel.Otn.State.PostFecBer
	(*TerminalDevice_LogicalChannels_Channel_Otn_State_PreFecBer)(nil),                                    // 44: openconfig.TerminalDevice.LogicalChannels.Channel.Otn.State.PreFecBer
	(*TerminalDevice_LogicalChannels_Channel_Otn_State_QValue)(nil),                                       // 45: openconfig.TerminalDevice.LogicalChannels.Channel.Otn.State.QValue
	(*TerminalDevice_OperationalModes_Mode)(nil),                                                          // 46: openconfig.TerminalDevice.OperationalModes.Mode
	(*TerminalDevice_OperationalModes_ModeKey)(nil),                                                       // 47: openconfig.TerminalDevice.OperationalModes.ModeKey
	(*TerminalDevice_OperationalModes_Mode_Config)(nil),                                                   // 48: openconfig.TerminalDevice.OperationalModes.Mode.Config
	(*TerminalDevice_OperationalModes_Mode_State)(nil),                                                    // 49: openconfig.TerminalDevice.OperationalModes.Mode.State
	(OpenconfigTerminalDeviceAdminStateType)(0),                                                           // 50: openconfig.OpenconfigTerminalDeviceAdminStateType
	(*ywrapper.StringValue)(nil),                                                                          // 51: ywrapper.StringValue
	(*ywrapper.UintValue)(nil),                                                                            // 52: ywrapper.UintValue
	(OpenconfigTransportTypesLOGICALELEMENTPROTOCOLTYPE)(0),                                               // 53: openconfig.OpenconfigTransportTypesLOGICALELEMENTPROTOCOLTYPE
	(OpenconfigTerminalDeviceLoopbackModeType)(0),                                                         // 54: openconfig.OpenconfigTerminalDeviceLoopbackModeType
	(OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE)(0),                                                   // 55: openconfig.OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE
	(*ywrapper.BoolValue)(nil),                                                                            // 56: ywrapper.BoolValue
	(OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE)(0),                                                    // 57: openconfig.OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE
	(OpenconfigLldpChassisIdType)(0),                                                                      // 58: openconfig.OpenconfigLldpChassisIdType
	(*ywrapper.IntValue)(nil),                                                                             // 59: ywrapper.IntValue
	(OpenconfigLldpPortIdType)(0),                                                                         // 60: openconfig.OpenconfigLldpPortIdType
	(*ywrapper.BytesValue)(nil),                                                                           // 61: ywrapper.BytesValue
	(*ywrapper.Decimal64Value)(nil),                                                                       // 62: ywrapper.Decimal64Value
	(OpenconfigTransportTypesFRAMEMAPPINGPROTOCOL)(0),                                                     // 63: openconfig.OpenconfigTransportTypesFRAMEMAPPINGPROTOCOL
	(OpenconfigTransportTypesTRIBUTARYSLOTGRANULARITY)(0),                                                 // 64: openconfig.OpenconfigTransportTypesTRIBUTARYSLOTGRANULARITY
}
var file_openconfig_terminal_device_proto_depIdxs = []int32{
	6,   // 0: openconfig.TerminalDevice.config:type_name -> openconfig.TerminalDevice.Config
	7,   // 1: openconfig.TerminalDevice.logical_channels:type_name -> openconfig.TerminalDevice.LogicalChannels
	8,   // 2: openconfig.TerminalDevice.operational_modes:type_name -> openconfig.TerminalDevice.OperationalModes
	9,   // 3: openconfig.TerminalDevice.state:type_name -> openconfig.TerminalDevice.State
	11,  // 4: openconfig.TerminalDevice.LogicalChannels.channel:type_name -> openconfig.TerminalDevice.LogicalChannels.ChannelKey
	47,  // 5: openconfig.TerminalDevice.OperationalModes.mode:type_name -> openconfig.TerminalDevice.OperationalModes.ModeKey
	12,  // 6: openconfig.TerminalDevice.LogicalChannels.Channel.config:type_name -> openconfig.TerminalDevice.LogicalChannels.Channel.Config
	13,  // 7: openconfig.TerminalDevice.LogicalChannels.Channel.ethernet:type_name -> openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet
	14,  // 8: openconfig.TerminalDevice.LogicalChannels.Channel.ingress:type_name -> openconfig.TerminalDevice.LogicalChannels.Channel.Ingress
	15,  // 9: openconfig.TerminalDevice.LogicalChannels.Channel.logical_channel_assignments:type_name -> openconfig.TerminalDevice.LogicalChannels.Channel.LogicalChannelAssignments
	16,  // 10: openconfig.TerminalDevice.LogicalChannels.Channel.otn:type_name -> openconfig.TerminalDevice.LogicalChannels.Channel.Otn
	17,  // 11: openconfig.TerminalDevice.LogicalChannels.Channel.state:type_name -> openconfig.TerminalDevice.LogicalChannels.Channel.State
	10,  // 12: openconfig.TerminalDevice.LogicalChannels.ChannelKey.channel:type_name -> openconfig.TerminalDevice.LogicalChannels.Channel
	50,  // 13: openconfig.TerminalDevice.LogicalChannels.Channel.Config.admin_state:type_name -> openconfig.OpenconfigTerminalDeviceAdminStateType
	51,  // 14: openconfig.TerminalDevice.LogicalChannels.Channel.Config.description:type_name -> ywrapper.StringValue
	52,  // 15: openconfig.TerminalDevice.LogicalChannels.Channel.Config.index:type_name -> ywrapper.UintValue
	53,  // 16: openconfig.TerminalDevice.LogicalChannels.Channel.Config.logical_channel_type:type_name -> openconfig.OpenconfigTransportTypesLOGICALELEMENTPROTOCOLTYPE
	54,  // 17: openconfig.TerminalDevice.LogicalChannels.Channel.Config.loopback_mode:type_name -> openconfig.OpenconfigTerminalDeviceLoopbackModeType
	55,  // 18: openconfig.TerminalDevice.LogicalChannels.Channel.Config.rate_class:type_name -> openconfig.OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE
	56,  // 19: openconfig.TerminalDevice.LogicalChannels.Channel.Config.test_signal:type_name -> ywrapper.BoolValue
	57,  // 20: openconfig.TerminalDevice.LogicalChannels.Channel.Config.trib_protocol:type_name -> openconfig.OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE
	18,  // 21: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.config:type_name -> openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Config
	19,  // 22: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.lldp:type_name -> openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Lldp
	20,  // 23: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.state:type_name -> openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.State
	34,  // 24: openconfig.TerminalDevice.LogicalChannels.Channel.Ingress.config:type_name -> openconfig.TerminalDevice.LogicalChannels.Channel.Ingress.Config
	35,  // 25: openconfig.TerminalDevice.LogicalChannels.Channel.Ingress.state:type_name -> openconfig.TerminalDevice.LogicalChannels.Channel.Ingress.State
	37,  // 26: openconfig.TerminalDevice.LogicalChannels.Channel.LogicalChannelAssignments.assignment:type_name -> openconfig.TerminalDevice.LogicalChannels.Channel.LogicalChannelAssignments.AssignmentKey
	40,  // 27: openconfig.TerminalDevice.LogicalChannels.Channel.Otn.config:type_name -> openconfig.TerminalDevice.LogicalChannels.Channel.Otn.Config
	41,  // 28: openconfig.TerminalDevice.LogicalChannels.Channel.Otn.state:type_name -> openconfig.TerminalDevice.LogicalChannels.Channel.Otn.State
	50,  // 29: openconfig.TerminalDevice.LogicalChannels.Channel.State.admin_state:type_name -> openconfig.OpenconfigTerminalDeviceAdminStateType
	51,  // 30: openconfig.TerminalDevice.LogicalChannels.Channel.State.description:type_name -> ywrapper.StringValue
	52,  // 31: openconfig.TerminalDevice.LogicalChannels.Channel.State.index:type_name -> ywrapper.UintValue
	4,   // 32: openconfig.TerminalDevice.LogicalChannels.Channel.State.link_state:type_name -> openconfig.TerminalDevice.LogicalChannels.Channel.State.LinkState
	53,  // 33: openconfig.TerminalDevice.LogicalChannels.Channel.State.logical_channel_type:type_name -> openconfig.OpenconfigTransportTypesLOGICALELEMENTPROTOCOLTYPE
	54,  // 34: openconfig.TerminalDevice.LogicalChannels.Channel.State.loopback_mode:type_name -> openconfig.OpenconfigTerminalDeviceLoopbackModeType
	55,  // 35: openconfig.TerminalDevice.LogicalChannels.Channel.State.rate_class:type_name -> openconfig.OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE
	56,  // 36: openconfig.TerminalDevice.LogicalChannels.Channel.State.test_signal:type_name -> ywrapper.BoolValue
	57,  // 37: openconfig.TerminalDevice.LogicalChannels.Channel.State.trib_protocol:type_name -> openconfig.OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE
	52,  // 38: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Config.als_delay:type_name -> ywrapper.UintValue
	0,   // 39: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Config.client_als:type_name -> openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Config.ClientAls
	21,  // 40: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Lldp.config:type_name -> openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Lldp.Config
	22,  // 41: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Lldp.neighbors:type_name -> openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Lldp.Neighbors
	23,  // 42: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Lldp.state:type_name -> openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Lldp.State
	52,  // 43: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.State.als_delay:type_name -> ywrapper.UintValue
	1,   // 44: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.State.client_als:type_name -> openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.State.ClientAls
	52,  // 45: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.State.in_8021q_frames:type_name -> ywrapper.UintValue
	52,  // 46: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.State.in_block_errors:type_name -> ywrapper.UintValue
	52,  // 47: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.State.in_crc_errors:type_name -> ywrapper.UintValue
	52,  // 48: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.State.in_fragment_frames:type_name -> ywrapper.UintValue
	52,  // 49: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.State.in_jabber_frames:type_name -> ywrapper.UintValue
	52,  // 50: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.State.in_mac_control_frames:type_name -> ywrapper.UintValue
	52,  // 51: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.State.in_mac_pause_frames:type_name -> ywrapper.UintValue
	52,  // 52: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.State.in_oversize_frames:type_name -> ywrapper.UintValue
	52,  // 53: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.State.in_pcs_bip_errors:type_name -> ywrapper.UintValue
	52,  // 54: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.State.in_pcs_errored_seconds:type_name -> ywrapper.UintValue
	52,  // 55: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.State.in_pcs_severely_errored_seconds:type_name -> ywrapper.UintValue
	52,  // 56: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.State.in_pcs_unavailable_seconds:type_name -> ywrapper.UintValue
	52,  // 57: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.State.in_undersize_frames:type_name -> ywrapper.UintValue
	52,  // 58: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.State.out_8021q_frames:type_name -> ywrapper.UintValue
	52,  // 59: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.State.out_block_errors:type_name -> ywrapper.UintValue
	52,  // 60: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.State.out_crc_errors:type_name -> ywrapper.UintValue
	52,  // 61: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.State.out_mac_control_frames:type_name -> ywrapper.UintValue
	52,  // 62: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.State.out_mac_pause_frames:type_name -> ywrapper.UintValue
	52,  // 63: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.State.out_pcs_bip_errors:type_name -> ywrapper.UintValue
	56,  // 64: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Lldp.Config.enabled:type_name -> ywrapper.BoolValue
	56,  // 65: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Lldp.Config.snooping:type_name -> ywrapper.BoolValue
	25,  // 66: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Lldp.Neighbors.neighbor:type_name -> openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Lldp.Neighbors.NeighborKey
	33,  // 67: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Lldp.State.counters:type_name -> openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Lldp.State.Counters
	56,  // 68: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Lldp.State.enabled:type_name -> ywrapper.BoolValue
	56,  // 69: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Lldp.State.snooping:type_name -> ywrapper.BoolValue
	26,  // 70: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Lldp.Neighbors.Neighbor.config:type_name -> openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Lldp.Neighbors.Neighbor.Config
	27,  // 71: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Lldp.Neighbors.Neighbor.custom_tlvs:type_name -> openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Lldp.Neighbors.Neighbor.CustomTlvs
	28,  // 72: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Lldp.Neighbors.Neighbor.state:type_name -> openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Lldp.Neighbors.Neighbor.State
	24,  // 73: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Lldp.Neighbors.NeighborKey.neighbor:type_name -> openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Lldp.Neighbors.Neighbor
	30,  // 74: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Lldp.Neighbors.Neighbor.CustomTlvs.tlv:type_name -> openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Lldp.Neighbors.Neighbor.CustomTlvs.TlvKey
	52,  // 75: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Lldp.Neighbors.Neighbor.State.age:type_name -> ywrapper.UintValue
	51,  // 76: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Lldp.Neighbors.Neighbor.State.chassis_id:type_name -> ywrapper.StringValue
	58,  // 77: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Lldp.Neighbors.Neighbor.State.chassis_id_type:type_name -> openconfig.OpenconfigLldpChassisIdType
	51,  // 78: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Lldp.Neighbors.Neighbor.State.id:type_name -> ywrapper.StringValue
	59,  // 79: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Lldp.Neighbors.Neighbor.State.last_update:type_name -> ywrapper.IntValue
	51,  // 80: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Lldp.Neighbors.Neighbor.State.management_address:type_name -> ywrapper.StringValue
	51,  // 81: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Lldp.Neighbors.Neighbor.State.management_address_type:type_name -> ywrapper.StringValue
	51,  // 82: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Lldp.Neighbors.Neighbor.State.port_description:type_name -> ywrapper.StringValue
	51,  // 83: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Lldp.Neighbors.Neighbor.State.port_id:type_name -> ywrapper.StringValue
	60,  // 84: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Lldp.Neighbors.Neighbor.State.port_id_type:type_name -> openconfig.OpenconfigLldpPortIdType
	51,  // 85: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Lldp.Neighbors.Neighbor.State.system_description:type_name -> ywrapper.StringValue
	51,  // 86: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Lldp.Neighbors.Neighbor.State.system_name:type_name -> ywrapper.StringValue
	52,  // 87: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Lldp.Neighbors.Neighbor.State.ttl:type_name -> ywrapper.UintValue
	31,  // 88: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Lldp.Neighbors.Neighbor.CustomTlvs.Tlv.config:type_name -> openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Lldp.Neighbors.Neighbor.CustomTlvs.Tlv.Config
	32,  // 89: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Lldp.Neighbors.Neighbor.CustomTlvs.Tlv.state:type_name -> openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Lldp.Neighbors.Neighbor.CustomTlvs.Tlv.State
	29,  // 90: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Lldp.Neighbors.Neighbor.CustomTlvs.TlvKey.tlv:type_name -> openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Lldp.Neighbors.Neighbor.CustomTlvs.Tlv
	51,  // 91: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Lldp.Neighbors.Neighbor.CustomTlvs.Tlv.State.oui:type_name -> ywrapper.StringValue
	51,  // 92: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Lldp.Neighbors.Neighbor.CustomTlvs.Tlv.State.oui_subtype:type_name -> ywrapper.StringValue
	59,  // 93: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Lldp.Neighbors.Neighbor.CustomTlvs.Tlv.State.type:type_name -> ywrapper.IntValue
	61,  // 94: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Lldp.Neighbors.Neighbor.CustomTlvs.Tlv.State.value:type_name -> ywrapper.BytesValue
	52,  // 95: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Lldp.State.Counters.frame_discard:type_name -> ywrapper.UintValue
	52,  // 96: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Lldp.State.Counters.frame_error_in:type_name -> ywrapper.UintValue
	52,  // 97: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Lldp.State.Counters.frame_error_out:type_name -> ywrapper.UintValue
	52,  // 98: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Lldp.State.Counters.frame_in:type_name -> ywrapper.UintValue
	52,  // 99: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Lldp.State.Counters.frame_out:type_name -> ywrapper.UintValue
	51,  // 100: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Lldp.State.Counters.last_clear:type_name -> ywrapper.StringValue
	52,  // 101: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Lldp.State.Counters.tlv_discard:type_name -> ywrapper.UintValue
	52,  // 102: openconfig.TerminalDevice.LogicalChannels.Channel.Ethernet.Lldp.State.Counters.tlv_unknown:type_name -> ywrapper.UintValue
	52,  // 103: openconfig.TerminalDevice.LogicalChannels.Channel.Ingress.Config.physical_channel:type_name -> ywrapper.UintValue
	51,  // 104: openconfig.TerminalDevice.LogicalChannels.Channel.Ingress.Config.transceiver:type_name -> ywrapper.StringValue
	52,  // 105: openconfig.TerminalDevice.LogicalChannels.Channel.Ingress.State.physical_channel:type_name -> ywrapper.UintValue
	51,  // 106: openconfig.TerminalDevice.LogicalChannels.Channel.Ingress.State.transceiver:type_name -> ywrapper.StringValue
	38,  // 107: openconfig.TerminalDevice.LogicalChannels.Channel.LogicalChannelAssignments.Assignment.config:type_name -> openconfig.TerminalDevice.LogicalChannels.Channel.LogicalChannelAssignments.Assignment.Config
	39,  // 108: openconfig.TerminalDevice.LogicalChannels.Channel.LogicalChannelAssignments.Assignment.state:type_name -> openconfig.TerminalDevice.LogicalChannels.Channel.LogicalChannelAssignments.Assignment.State
	36,  // 109: openconfig.TerminalDevice.LogicalChannels.Channel.LogicalChannelAssignments.AssignmentKey.assignment:type_name -> openconfig.TerminalDevice.LogicalChannels.Channel.LogicalChannelAssignments.Assignment
	62,  // 110: openconfig.TerminalDevice.LogicalChannels.Channel.LogicalChannelAssignments.Assignment.Config.allocation:type_name -> ywrapper.Decimal64Value
	2,   // 111: openconfig.TerminalDevice.LogicalChannels.Channel.LogicalChannelAssignments.Assignment.Config.assignment_type:type_name -> openconfig.TerminalDevice.LogicalChannels.Channel.LogicalChannelAssignments.Assignment.Config.AssignmentType
	51,  // 112: openconfig.TerminalDevice.LogicalChannels.Channel.LogicalChannelAssignments.Assignment.Config.description:type_name -> ywrapper.StringValue
	52,  // 113: openconfig.TerminalDevice.LogicalChannels.Channel.LogicalChannelAssignments.Assignment.Config.index:type_name -> ywrapper.UintValue
	52,  // 114: openconfig.TerminalDevice.LogicalChannels.Channel.LogicalChannelAssignments.Assignment.Config.logical_channel:type_name -> ywrapper.UintValue
	63,  // 115: openconfig.TerminalDevice.LogicalChannels.Channel.LogicalChannelAssignments.Assignment.Config.mapping:type_name -> openconfig.OpenconfigTransportTypesFRAMEMAPPINGPROTOCOL
	51,  // 116: openconfig.TerminalDevice.LogicalChannels.Channel.LogicalChannelAssignments.Assignment.Config.optical_channel:type_name -> ywrapper.StringValue
	59,  // 117: openconfig.TerminalDevice.LogicalChannels.Channel.LogicalChannelAssignments.Assignment.Config.tributary_slot_index:type_name -> ywrapper.IntValue
	62,  // 118: openconfig.TerminalDevice.LogicalChannels.Channel.LogicalChannelAssignments.Assignment.State.allocation:type_name -> ywrapper.Decimal64Value
	3,   // 119: openconfig.TerminalDevice.LogicalChannels.Channel.LogicalChannelAssignments.Assignment.State.assignment_type:type_name -> openconfig.TerminalDevice.LogicalChannels.Channel.LogicalChannelAssignments.Assignment.State.AssignmentType
	51,  // 120: openconfig.TerminalDevice.LogicalChannels.Channel.LogicalChannelAssignments.Assignment.State.description:type_name -> ywrapper.StringValue
	52,  // 121: openconfig.TerminalDevice.LogicalChannels.Channel.LogicalChannelAssignments.Assignment.State.index:type_name -> ywrapper.UintValue
	52,  // 122: openconfig.TerminalDevice.LogicalChannels.Channel.LogicalChannelAssignments.Assignment.State.logical_channel:type_name -> ywrapper.UintValue
	63,  // 123: openconfig.TerminalDevice.LogicalChannels.Channel.LogicalChannelAssignments.Assignment.State.mapping:type_name -> openconfig.OpenconfigTransportTypesFRAMEMAPPINGPROTOCOL
	51,  // 124: openconfig.TerminalDevice.LogicalChannels.Channel.LogicalChannelAssignments.Assignment.State.optical_channel:type_name -> ywrapper.StringValue
	59,  // 125: openconfig.TerminalDevice.LogicalChannels.Channel.LogicalChannelAssignments.Assignment.State.tributary_slot_index:type_name -> ywrapper.IntValue
	64,  // 126: openconfig.TerminalDevice.LogicalChannels.Channel.Otn.Config.tributary_slot_granularity:type_name -> openconfig.OpenconfigTransportTypesTRIBUTARYSLOTGRANULARITY
	56,  // 127: openconfig.TerminalDevice.LogicalChannels.Channel.Otn.Config.tti_msg_auto:type_name -> ywrapper.BoolValue
	51,  // 128: openconfig.TerminalDevice.LogicalChannels.Channel.Otn.Config.tti_msg_expected:type_name -> ywrapper.StringValue
	51,  // 129: openconfig.TerminalDevice.LogicalChannels.Channel.Otn.Config.tti_msg_transmit:type_name -> ywrapper.StringValue
	52,  // 130: openconfig.TerminalDevice.LogicalChannels.Channel.Otn.State.background_block_errors:type_name -> ywrapper.UintValue
	52,  // 131: openconfig.TerminalDevice.LogicalChannels.Channel.Otn.State.code_violations:type_name -> ywrapper.UintValue
	52,  // 132: openconfig.TerminalDevice.LogicalChannels.Channel.Otn.State.errored_blocks:type_name -> ywrapper.UintValue
	52,  // 133: openconfig.TerminalDevice.LogicalChannels.Channel.Otn.State.errored_seconds:type_name -> ywrapper.UintValue
	42,  // 134: openconfig.TerminalDevice.LogicalChannels.Channel.Otn.State.esnr:type_name -> openconfig.TerminalDevice.LogicalChannels.Channel.Otn.State.Esnr
	52,  // 135: openconfig.TerminalDevice.LogicalChannels.Channel.Otn.State.fec_corrected_bits:type_name -> ywrapper.UintValue
	52,  // 136: openconfig.TerminalDevice.LogicalChannels.Channel.Otn.State.fec_corrected_bytes:type_name -> ywrapper.UintValue
	52,  // 137: openconfig.TerminalDevice.LogicalChannels.Channel.Otn.State.fec_uncorrectable_blocks:type_name -> ywrapper.UintValue
	52,  // 138: openconfig.TerminalDevice.LogicalChannels.Channel.Otn.State.fec_uncorrectable_words:type_name -> ywrapper.UintValue
	43,  // 139: openconfig.TerminalDevice.LogicalChannels.Channel.Otn.State.post_fec_ber:type_name -> openconfig.TerminalDevice.LogicalChannels.Channel.Otn.State.PostFecBer
	44,  // 140: openconfig.TerminalDevice.LogicalChannels.Channel.Otn.State.pre_fec_ber:type_name -> openconfig.TerminalDevice.LogicalChannels.Channel.Otn.State.PreFecBer
	45,  // 141: openconfig.TerminalDevice.LogicalChannels.Channel.Otn.State.q_value:type_name -> openconfig.TerminalDevice.LogicalChannels.Channel.Otn.State.QValue
	51,  // 142: openconfig.TerminalDevice.LogicalChannels.Channel.Otn.State.rdi_msg:type_name -> ywrapper.StringValue
	52,  // 143: openconfig.TerminalDevice.LogicalChannels.Channel.Otn.State.severely_errored_seconds:type_name -> ywrapper.UintValue
	64,  // 144: openconfig.TerminalDevice.LogicalChannels.Channel.Otn.State.tributary_slot_granularity:type_name -> openconfig.OpenconfigTransportTypesTRIBUTARYSLOTGRANULARITY
	56,  // 145: openconfig.TerminalDevice.LogicalChannels.Channel.Otn.State.tti_msg_auto:type_name -> ywrapper.BoolValue
	51,  // 146: openconfig.TerminalDevice.LogicalChannels.Channel.Otn.State.tti_msg_expected:type_name -> ywrapper.StringValue
	51,  // 147: openconfig.TerminalDevice.LogicalChannels.Channel.Otn.State.tti_msg_recv:type_name -> ywrapper.StringValue
	51,  // 148: openconfig.TerminalDevice.LogicalChannels.Channel.Otn.State.tti_msg_transmit:type_name -> ywrapper.StringValue
	52,  // 149: openconfig.TerminalDevice.LogicalChannels.Channel.Otn.State.unavailable_seconds:type_name -> ywrapper.UintValue
	62,  // 150: openconfig.TerminalDevice.LogicalChannels.Channel.Otn.State.Esnr.avg:type_name -> ywrapper.Decimal64Value
	62,  // 151: openconfig.TerminalDevice.LogicalChannels.Channel.Otn.State.Esnr.instant:type_name -> ywrapper.Decimal64Value
	52,  // 152: openconfig.TerminalDevice.LogicalChannels.Channel.Otn.State.Esnr.interval:type_name -> ywrapper.UintValue
	62,  // 153: openconfig.TerminalDevice.LogicalChannels.Channel.Otn.State.Esnr.max:type_name -> ywrapper.Decimal64Value
	52,  // 154: openconfig.TerminalDevice.LogicalChannels.Channel.Otn.State.Esnr.max_time:type_name -> ywrapper.UintValue
	62,  // 155: openconfig.TerminalDevice.LogicalChannels.Channel.Otn.State.Esnr.min:type_name -> ywrapper.Decimal64Value
	52,  // 156: openconfig.TerminalDevice.LogicalChannels.Channel.Otn.State.Esnr.min_time:type_name -> ywrapper.UintValue
	62,  // 157: openconfig.TerminalDevice.LogicalChannels.Channel.Otn.State.PostFecBer.avg:type_name -> ywrapper.Decimal64Value
	62,  // 158: openconfig.TerminalDevice.LogicalChannels.Channel.Otn.State.PostFecBer.instant:type_name -> ywrapper.Decimal64Value
	52,  // 159: openconfig.TerminalDevice.LogicalChannels.Channel.Otn.State.PostFecBer.interval:type_name -> ywrapper.UintValue
	62,  // 160: openconfig.TerminalDevice.LogicalChannels.Channel.Otn.State.PostFecBer.max:type_name -> ywrapper.Decimal64Value
	52,  // 161: openconfig.TerminalDevice.LogicalChannels.Channel.Otn.State.PostFecBer.max_time:type_name -> ywrapper.UintValue
	62,  // 162: openconfig.TerminalDevice.LogicalChannels.Channel.Otn.State.PostFecBer.min:type_name -> ywrapper.Decimal64Value
	52,  // 163: openconfig.TerminalDevice.LogicalChannels.Channel.Otn.State.PostFecBer.min_time:type_name -> ywrapper.UintValue
	62,  // 164: openconfig.TerminalDevice.LogicalChannels.Channel.Otn.State.PreFecBer.avg:type_name -> ywrapper.Decimal64Value
	62,  // 165: openconfig.TerminalDevice.LogicalChannels.Channel.Otn.State.PreFecBer.instant:type_name -> ywrapper.Decimal64Value
	52,  // 166: openconfig.TerminalDevice.LogicalChannels.Channel.Otn.State.PreFecBer.interval:type_name -> ywrapper.UintValue
	62,  // 167: openconfig.TerminalDevice.LogicalChannels.Channel.Otn.State.PreFecBer.max:type_name -> ywrapper.Decimal64Value
	52,  // 168: openconfig.TerminalDevice.LogicalChannels.Channel.Otn.State.PreFecBer.max_time:type_name -> ywrapper.UintValue
	62,  // 169: openconfig.TerminalDevice.LogicalChannels.Channel.Otn.State.PreFecBer.min:type_name -> ywrapper.Decimal64Value
	52,  // 170: openconfig.TerminalDevice.LogicalChannels.Channel.Otn.State.PreFecBer.min_time:type_name -> ywrapper.UintValue
	62,  // 171: openconfig.TerminalDevice.LogicalChannels.Channel.Otn.State.QValue.avg:type_name -> ywrapper.Decimal64Value
	62,  // 172: openconfig.TerminalDevice.LogicalChannels.Channel.Otn.State.QValue.instant:type_name -> ywrapper.Decimal64Value
	52,  // 173: openconfig.TerminalDevice.LogicalChannels.Channel.Otn.State.QValue.interval:type_name -> ywrapper.UintValue
	62,  // 174: openconfig.TerminalDevice.LogicalChannels.Channel.Otn.State.QValue.max:type_name -> ywrapper.Decimal64Value
	52,  // 175: openconfig.TerminalDevice.LogicalChannels.Channel.Otn.State.QValue.max_time:type_name -> ywrapper.UintValue
	62,  // 176: openconfig.TerminalDevice.LogicalChannels.Channel.Otn.State.QValue.min:type_name -> ywrapper.Decimal64Value
	52,  // 177: openconfig.TerminalDevice.LogicalChannels.Channel.Otn.State.QValue.min_time:type_name -> ywrapper.UintValue
	48,  // 178: openconfig.TerminalDevice.OperationalModes.Mode.config:type_name -> openconfig.TerminalDevice.OperationalModes.Mode.Config
	49,  // 179: openconfig.TerminalDevice.OperationalModes.Mode.state:type_name -> openconfig.TerminalDevice.OperationalModes.Mode.State
	46,  // 180: openconfig.TerminalDevice.OperationalModes.ModeKey.mode:type_name -> openconfig.TerminalDevice.OperationalModes.Mode
	51,  // 181: openconfig.TerminalDevice.OperationalModes.Mode.State.description:type_name -> ywrapper.StringValue
	52,  // 182: openconfig.TerminalDevice.OperationalModes.Mode.State.mode_id:type_name -> ywrapper.UintValue
	51,  // 183: openconfig.TerminalDevice.OperationalModes.Mode.State.vendor_id:type_name -> ywrapper.StringValue
	184, // [184:184] is the sub-list for method output_type
	184, // [184:184] is the sub-list for method input_type
	184, // [184:184] is the sub-list for extension type_name
	184, // [184:184] is the sub-list for extension extendee
	0,   // [0:184] is the sub-list for field type_name
}

func init() { file_openconfig_terminal_device_proto_init() }
func file_openconfig_terminal_device_proto_init() {
	if File_openconfig_terminal_device_proto != nil {
		return
	}
	file_openconfig_enums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_openconfig_terminal_device_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminalDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_terminal_device_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminalDevice_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_terminal_device_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminalDevice_LogicalChannels); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_terminal_device_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminalDevice_OperationalModes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_terminal_device_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminalDevice_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_terminal_device_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminalDevice_LogicalChannels_Channel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_terminal_device_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminalDevice_LogicalChannels_ChannelKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_terminal_device_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminalDevice_LogicalChannels_Channel_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_terminal_device_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminalDevice_LogicalChannels_Channel_Ethernet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_terminal_device_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminalDevice_LogicalChannels_Channel_Ingress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_terminal_device_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_terminal_device_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminalDevice_LogicalChannels_Channel_Otn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_terminal_device_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminalDevice_LogicalChannels_Channel_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_terminal_device_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminalDevice_LogicalChannels_Channel_Ethernet_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_terminal_device_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_terminal_device_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminalDevice_LogicalChannels_Channel_Ethernet_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_terminal_device_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_terminal_device_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_terminal_device_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_terminal_device_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_terminal_device_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_NeighborKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_terminal_device_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_terminal_device_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_CustomTlvs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_terminal_device_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_terminal_device_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_CustomTlvs_Tlv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_terminal_device_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_CustomTlvs_TlvKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_terminal_device_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_CustomTlvs_Tlv_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_terminal_device_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_Neighbors_Neighbor_CustomTlvs_Tlv_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_terminal_device_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminalDevice_LogicalChannels_Channel_Ethernet_Lldp_State_Counters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_terminal_device_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminalDevice_LogicalChannels_Channel_Ingress_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_terminal_device_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminalDevice_LogicalChannels_Channel_Ingress_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_terminal_device_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_terminal_device_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_AssignmentKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_terminal_device_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_terminal_device_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_terminal_device_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminalDevice_LogicalChannels_Channel_Otn_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_terminal_device_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminalDevice_LogicalChannels_Channel_Otn_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_terminal_device_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminalDevice_LogicalChannels_Channel_Otn_State_Esnr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_terminal_device_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminalDevice_LogicalChannels_Channel_Otn_State_PostFecBer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_terminal_device_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminalDevice_LogicalChannels_Channel_Otn_State_PreFecBer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_terminal_device_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminalDevice_LogicalChannels_Channel_Otn_State_QValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_terminal_device_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminalDevice_OperationalModes_Mode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_terminal_device_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminalDevice_OperationalModes_ModeKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_terminal_device_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminalDevice_OperationalModes_Mode_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_terminal_device_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminalDevice_OperationalModes_Mode_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_openconfig_terminal_device_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   45,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_openconfig_terminal_device_proto_goTypes,
		DependencyIndexes: file_openconfig_terminal_device_proto_depIdxs,
		EnumInfos:         file_openconfig_terminal_device_proto_enumTypes,
		MessageInfos:      file_openconfig_terminal_device_proto_msgTypes,
	}.Build()
	File_openconfig_terminal_device_proto = out.File
	file_openconfig_terminal_device_proto_rawDesc = nil
	file_openconfig_terminal_device_proto_goTypes = nil
	file_openconfig_terminal_device_proto_depIdxs = nil
}
