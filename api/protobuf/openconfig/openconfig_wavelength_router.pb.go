// openconfig.openconfig_wavelength_router is generated by proto_generator as a protobuf
// representation of a YANG schema.
//
// Input schema modules:
//  - ../api/yang/public/doc/openconfig-example.yang
//  - ../api/yang/public/third_party/ietf/iana-if-type.yang
//  - ../api/yang/public/third_party/ietf/ietf-interfaces.yang
//  - ../api/yang/public/third_party/ietf/ietf-yang-types.yang
//  - ../api/yang/public/third_party/ietf/ietf-inet-types.yang
//  - ../api/yang/public/release/models/bfd/openconfig-bfd.yang
//  - ../api/yang/public/release/models/vlan/openconfig-vlan.yang
//  - ../api/yang/public/release/models/vlan/openconfig-vlan-types.yang
//  - ../api/yang/public/release/models/wifi/openconfig-access-points.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-mac.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-types.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-phy.yang
//  - ../api/yang/public/release/models/wifi/openconfig-ap-interfaces.yang
//  - ../api/yang/public/release/models/wifi/openconfig-ap-manager.yang
//  - ../api/yang/public/release/models/macsec/openconfig-macsec.yang
//  - ../api/yang/public/release/models/macsec/openconfig-macsec-types.yang
//  - ../api/yang/public/release/models/stp/openconfig-spanning-tree-types.yang
//  - ../api/yang/public/release/models/stp/openconfig-spanning-tree.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-errors.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-peer-group.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-types.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-global.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-neighbor.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common-structure.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-policy.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common-multiprotocol.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-types.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-port.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-fan.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-linecard.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-ext.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-cpu.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-psu.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-transceiver.yang
//  - ../api/yang/public/release/models/multicast/openconfig-pim-types.yang
//  - ../api/yang/public/release/models/multicast/openconfig-igmp-types.yang
//  - ../api/yang/public/release/models/multicast/openconfig-igmp.yang
//  - ../api/yang/public/release/models/multicast/openconfig-pim.yang
//  - ../api/yang/public/release/models/catalog/openconfig-module-catalog.yang
//  - ../api/yang/public/release/models/catalog/openconfig-catalog-types.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-interfaces.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-8021x.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-types.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-aggregate.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-poe.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-tunnel.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ip.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ethernet.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ethernet-ext.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ip-ext.yang
//  - ../api/yang/public/release/models/acl/openconfig-packet-match-types.yang
//  - ../api/yang/public/release/models/acl/openconfig-packet-match.yang
//  - ../api/yang/public/release/models/acl/openconfig-acl.yang
//  - ../api/yang/public/release/models/system/openconfig-license.yang
//  - ../api/yang/public/release/models/system/openconfig-system.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-radius.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa.yang
//  - ../api/yang/public/release/models/system/openconfig-system-management.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-types.yang
//  - ../api/yang/public/release/models/system/openconfig-procmon.yang
//  - ../api/yang/public/release/models/system/openconfig-messages.yang
//  - ../api/yang/public/release/models/system/openconfig-system-terminal.yang
//  - ../api/yang/public/release/models/system/openconfig-system-logging.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-tacacs.yang
//  - ../api/yang/public/release/models/system/openconfig-alarms.yang
//  - ../api/yang/public/release/models/system/openconfig-alarm-types.yang
//  - ../api/yang/public/release/models/policy/openconfig-policy-types.yang
//  - ../api/yang/public/release/models/policy/openconfig-routing-policy.yang
//  - ../api/yang/public/release/models/lacp/openconfig-lacp.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-wavelength-router.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-optical-amplifier.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-protection.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-channel-monitor.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-connectivity.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-optical-attenuator.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-common.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-types.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-terminal-device.yang
//  - ../api/yang/public/release/models/telemetry/openconfig-telemetry-types.yang
//  - ../api/yang/public/release/models/telemetry/openconfig-telemetry.yang
//  - ../api/yang/public/release/models/openflow/openconfig-openflow.yang
//  - ../api/yang/public/release/models/openflow/openconfig-openflow-types.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-tables.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-ext.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-table-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-shared-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-types.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-types.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-elements.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-interfaces.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-srte.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-forwarding-policies.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-interfaces.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-path-groups.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
//  - ../api/yang/public/release/models/relay-agent/openconfig-relay-agent.yang
//  - ../api/yang/public/release/models/lldp/openconfig-lldp.yang
//  - ../api/yang/public/release/models/lldp/openconfig-lldp-types.yang
//  - ../api/yang/public/release/models/openconfig-extensions.yang
//  - ../api/yang/public/release/models/types/openconfig-yang-types.yang
//  - ../api/yang/public/release/models/types/openconfig-inet-types.yang
//  - ../api/yang/public/release/models/types/openconfig-types.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-srte-policy.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-rsvp-sr-ext.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-segment-routing-types.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-segment-routing.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-types.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-igp.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-te.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-rsvp.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-static.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-sr.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-ldp.yang
//  - ../api/yang/public/release/models/probes/openconfig-probes-types.yang
//  - ../api/yang/public/release/models/probes/openconfig-probes.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-lsp.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-lsdb-types.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-policy.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-types.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-routing.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-area.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospf-policy.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-common.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-global.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-area-interface.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-lsdb.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospf-types.yang
//  - ../api/yang/public/release/models/local-routing/openconfig-local-routing.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-l3.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-l2.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-policy.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-types.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-mpls.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-common.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-types.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ipv6.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-pf.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-network-instance.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ipv4.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ethernet.yang

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        (unknown)
// source: openconfig_wavelength_router.proto

package openconfig

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/openconfig/ygot/proto/yext"
	ywrapper "github.com/openconfig/ygot/proto/ywrapper"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type WavelengthRouter_MediaChannels_Channel_State_AseStatus int32

const (
	WavelengthRouter_MediaChannels_Channel_State_ASESTATUS_UNSET       WavelengthRouter_MediaChannels_Channel_State_AseStatus = 0
	WavelengthRouter_MediaChannels_Channel_State_ASESTATUS_PRESENT     WavelengthRouter_MediaChannels_Channel_State_AseStatus = 1
	WavelengthRouter_MediaChannels_Channel_State_ASESTATUS_NOT_PRESENT WavelengthRouter_MediaChannels_Channel_State_AseStatus = 2
)

// Enum value maps for WavelengthRouter_MediaChannels_Channel_State_AseStatus.
var (
	WavelengthRouter_MediaChannels_Channel_State_AseStatus_name = map[int32]string{
		0: "ASESTATUS_UNSET",
		1: "ASESTATUS_PRESENT",
		2: "ASESTATUS_NOT_PRESENT",
	}
	WavelengthRouter_MediaChannels_Channel_State_AseStatus_value = map[string]int32{
		"ASESTATUS_UNSET":       0,
		"ASESTATUS_PRESENT":     1,
		"ASESTATUS_NOT_PRESENT": 2,
	}
)

func (x WavelengthRouter_MediaChannels_Channel_State_AseStatus) Enum() *WavelengthRouter_MediaChannels_Channel_State_AseStatus {
	p := new(WavelengthRouter_MediaChannels_Channel_State_AseStatus)
	*p = x
	return p
}

func (x WavelengthRouter_MediaChannels_Channel_State_AseStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WavelengthRouter_MediaChannels_Channel_State_AseStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_wavelength_router_proto_enumTypes[0].Descriptor()
}

func (WavelengthRouter_MediaChannels_Channel_State_AseStatus) Type() protoreflect.EnumType {
	return &file_openconfig_wavelength_router_proto_enumTypes[0]
}

func (x WavelengthRouter_MediaChannels_Channel_State_AseStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WavelengthRouter_MediaChannels_Channel_State_AseStatus.Descriptor instead.
func (WavelengthRouter_MediaChannels_Channel_State_AseStatus) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_wavelength_router_proto_rawDescGZIP(), []int{0, 0, 0, 4, 0}
}

type WavelengthRouter_MediaChannels_Channel_State_OperStatus int32

const (
	WavelengthRouter_MediaChannels_Channel_State_OPERSTATUS_UNSET WavelengthRouter_MediaChannels_Channel_State_OperStatus = 0
	WavelengthRouter_MediaChannels_Channel_State_OPERSTATUS_UP    WavelengthRouter_MediaChannels_Channel_State_OperStatus = 1
	WavelengthRouter_MediaChannels_Channel_State_OPERSTATUS_DOWN  WavelengthRouter_MediaChannels_Channel_State_OperStatus = 2
)

// Enum value maps for WavelengthRouter_MediaChannels_Channel_State_OperStatus.
var (
	WavelengthRouter_MediaChannels_Channel_State_OperStatus_name = map[int32]string{
		0: "OPERSTATUS_UNSET",
		1: "OPERSTATUS_UP",
		2: "OPERSTATUS_DOWN",
	}
	WavelengthRouter_MediaChannels_Channel_State_OperStatus_value = map[string]int32{
		"OPERSTATUS_UNSET": 0,
		"OPERSTATUS_UP":    1,
		"OPERSTATUS_DOWN":  2,
	}
)

func (x WavelengthRouter_MediaChannels_Channel_State_OperStatus) Enum() *WavelengthRouter_MediaChannels_Channel_State_OperStatus {
	p := new(WavelengthRouter_MediaChannels_Channel_State_OperStatus)
	*p = x
	return p
}

func (x WavelengthRouter_MediaChannels_Channel_State_OperStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WavelengthRouter_MediaChannels_Channel_State_OperStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_wavelength_router_proto_enumTypes[1].Descriptor()
}

func (WavelengthRouter_MediaChannels_Channel_State_OperStatus) Type() protoreflect.EnumType {
	return &file_openconfig_wavelength_router_proto_enumTypes[1]
}

func (x WavelengthRouter_MediaChannels_Channel_State_OperStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WavelengthRouter_MediaChannels_Channel_State_OperStatus.Descriptor instead.
func (WavelengthRouter_MediaChannels_Channel_State_OperStatus) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_wavelength_router_proto_rawDescGZIP(), []int{0, 0, 0, 4, 1}
}

type WavelengthRouter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaChannels             *WavelengthRouter_MediaChannels             `protobuf:"bytes,127507142,opt,name=media_channels,json=mediaChannels,proto3" json:"media_channels,omitempty"`
	PortSpectrumPowerProfiles *WavelengthRouter_PortSpectrumPowerProfiles `protobuf:"bytes,165431837,opt,name=port_spectrum_power_profiles,json=portSpectrumPowerProfiles,proto3" json:"port_spectrum_power_profiles,omitempty"`
}

func (x *WavelengthRouter) Reset() {
	*x = WavelengthRouter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wavelength_router_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WavelengthRouter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WavelengthRouter) ProtoMessage() {}

func (x *WavelengthRouter) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wavelength_router_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WavelengthRouter.ProtoReflect.Descriptor instead.
func (*WavelengthRouter) Descriptor() ([]byte, []int) {
	return file_openconfig_wavelength_router_proto_rawDescGZIP(), []int{0}
}

func (x *WavelengthRouter) GetMediaChannels() *WavelengthRouter_MediaChannels {
	if x != nil {
		return x.MediaChannels
	}
	return nil
}

func (x *WavelengthRouter) GetPortSpectrumPowerProfiles() *WavelengthRouter_PortSpectrumPowerProfiles {
	if x != nil {
		return x.PortSpectrumPowerProfiles
	}
	return nil
}

type WavelengthRouter_MediaChannels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel []*WavelengthRouter_MediaChannels_ChannelKey `protobuf:"bytes,536840146,rep,name=channel,proto3" json:"channel,omitempty"`
}

func (x *WavelengthRouter_MediaChannels) Reset() {
	*x = WavelengthRouter_MediaChannels{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wavelength_router_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WavelengthRouter_MediaChannels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WavelengthRouter_MediaChannels) ProtoMessage() {}

func (x *WavelengthRouter_MediaChannels) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wavelength_router_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WavelengthRouter_MediaChannels.ProtoReflect.Descriptor instead.
func (*WavelengthRouter_MediaChannels) Descriptor() ([]byte, []int) {
	return file_openconfig_wavelength_router_proto_rawDescGZIP(), []int{0, 0}
}

func (x *WavelengthRouter_MediaChannels) GetChannel() []*WavelengthRouter_MediaChannels_ChannelKey {
	if x != nil {
		return x.Channel
	}
	return nil
}

type WavelengthRouter_PortSpectrumPowerProfiles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port []*WavelengthRouter_PortSpectrumPowerProfiles_PortKey `protobuf:"bytes,21891441,rep,name=port,proto3" json:"port,omitempty"`
}

func (x *WavelengthRouter_PortSpectrumPowerProfiles) Reset() {
	*x = WavelengthRouter_PortSpectrumPowerProfiles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wavelength_router_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WavelengthRouter_PortSpectrumPowerProfiles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WavelengthRouter_PortSpectrumPowerProfiles) ProtoMessage() {}

func (x *WavelengthRouter_PortSpectrumPowerProfiles) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wavelength_router_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WavelengthRouter_PortSpectrumPowerProfiles.ProtoReflect.Descriptor instead.
func (*WavelengthRouter_PortSpectrumPowerProfiles) Descriptor() ([]byte, []int) {
	return file_openconfig_wavelength_router_proto_rawDescGZIP(), []int{0, 1}
}

func (x *WavelengthRouter_PortSpectrumPowerProfiles) GetPort() []*WavelengthRouter_PortSpectrumPowerProfiles_PortKey {
	if x != nil {
		return x.Port
	}
	return nil
}

type WavelengthRouter_MediaChannels_Channel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config               *WavelengthRouter_MediaChannels_Channel_Config               `protobuf:"bytes,409882003,opt,name=config,proto3" json:"config,omitempty"`
	Dest                 *WavelengthRouter_MediaChannels_Channel_Dest                 `protobuf:"bytes,145566309,opt,name=dest,proto3" json:"dest,omitempty"`
	Source               *WavelengthRouter_MediaChannels_Channel_Source               `protobuf:"bytes,246551242,opt,name=source,proto3" json:"source,omitempty"`
	SpectrumPowerProfile *WavelengthRouter_MediaChannels_Channel_SpectrumPowerProfile `protobuf:"bytes,447350948,opt,name=spectrum_power_profile,json=spectrumPowerProfile,proto3" json:"spectrum_power_profile,omitempty"`
	State                *WavelengthRouter_MediaChannels_Channel_State                `protobuf:"bytes,427502708,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *WavelengthRouter_MediaChannels_Channel) Reset() {
	*x = WavelengthRouter_MediaChannels_Channel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wavelength_router_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WavelengthRouter_MediaChannels_Channel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WavelengthRouter_MediaChannels_Channel) ProtoMessage() {}

func (x *WavelengthRouter_MediaChannels_Channel) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wavelength_router_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WavelengthRouter_MediaChannels_Channel.ProtoReflect.Descriptor instead.
func (*WavelengthRouter_MediaChannels_Channel) Descriptor() ([]byte, []int) {
	return file_openconfig_wavelength_router_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *WavelengthRouter_MediaChannels_Channel) GetConfig() *WavelengthRouter_MediaChannels_Channel_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *WavelengthRouter_MediaChannels_Channel) GetDest() *WavelengthRouter_MediaChannels_Channel_Dest {
	if x != nil {
		return x.Dest
	}
	return nil
}

func (x *WavelengthRouter_MediaChannels_Channel) GetSource() *WavelengthRouter_MediaChannels_Channel_Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *WavelengthRouter_MediaChannels_Channel) GetSpectrumPowerProfile() *WavelengthRouter_MediaChannels_Channel_SpectrumPowerProfile {
	if x != nil {
		return x.SpectrumPowerProfile
	}
	return nil
}

func (x *WavelengthRouter_MediaChannels_Channel) GetState() *WavelengthRouter_MediaChannels_Channel_State {
	if x != nil {
		return x.State
	}
	return nil
}

type WavelengthRouter_MediaChannels_ChannelKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index   uint64                                  `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Channel *WavelengthRouter_MediaChannels_Channel `protobuf:"bytes,2,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (x *WavelengthRouter_MediaChannels_ChannelKey) Reset() {
	*x = WavelengthRouter_MediaChannels_ChannelKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wavelength_router_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WavelengthRouter_MediaChannels_ChannelKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WavelengthRouter_MediaChannels_ChannelKey) ProtoMessage() {}

func (x *WavelengthRouter_MediaChannels_ChannelKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wavelength_router_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WavelengthRouter_MediaChannels_ChannelKey.ProtoReflect.Descriptor instead.
func (*WavelengthRouter_MediaChannels_ChannelKey) Descriptor() ([]byte, []int) {
	return file_openconfig_wavelength_router_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *WavelengthRouter_MediaChannels_ChannelKey) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *WavelengthRouter_MediaChannels_ChannelKey) GetChannel() *WavelengthRouter_MediaChannels_Channel {
	if x != nil {
		return x.Channel
	}
	return nil
}

type WavelengthRouter_MediaChannels_Channel_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminStatus            OpenconfigWavelengthRouterAdminStateType         `protobuf:"varint,148137994,opt,name=admin_status,json=adminStatus,proto3,enum=openconfig.OpenconfigWavelengthRouterAdminStateType" json:"admin_status,omitempty"`
	AseControlMode         OpenconfigWavelengthRouterASECONTROLMODE         `protobuf:"varint,424952341,opt,name=ase_control_mode,json=aseControlMode,proto3,enum=openconfig.OpenconfigWavelengthRouterASECONTROLMODE" json:"ase_control_mode,omitempty"`
	AseInjectionThreshold  *ywrapper.Decimal64Value                         `protobuf:"bytes,514454209,opt,name=ase_injection_threshold,json=aseInjectionThreshold,proto3" json:"ase_injection_threshold,omitempty"`
	AttenuationControlMode OpenconfigWavelengthRouterATTENUATIONCONTROLMODE `protobuf:"varint,430331826,opt,name=attenuation_control_mode,json=attenuationControlMode,proto3,enum=openconfig.OpenconfigWavelengthRouterATTENUATIONCONTROLMODE" json:"attenuation_control_mode,omitempty"`
	Index                  *ywrapper.UintValue                              `protobuf:"bytes,301463906,opt,name=index,proto3" json:"index,omitempty"`
	LowerFrequency         *ywrapper.UintValue                              `protobuf:"bytes,534173960,opt,name=lower_frequency,json=lowerFrequency,proto3" json:"lower_frequency,omitempty"`
	Name                   *ywrapper.StringValue                            `protobuf:"bytes,351086787,opt,name=name,proto3" json:"name,omitempty"`
	SuperChannel           *ywrapper.BoolValue                              `protobuf:"bytes,49543293,opt,name=super_channel,json=superChannel,proto3" json:"super_channel,omitempty"`
	SuperChannelParent     *ywrapper.UintValue                              `protobuf:"bytes,58455258,opt,name=super_channel_parent,json=superChannelParent,proto3" json:"super_channel_parent,omitempty"`
	UpperFrequency         *ywrapper.UintValue                              `protobuf:"bytes,431960071,opt,name=upper_frequency,json=upperFrequency,proto3" json:"upper_frequency,omitempty"`
}

func (x *WavelengthRouter_MediaChannels_Channel_Config) Reset() {
	*x = WavelengthRouter_MediaChannels_Channel_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wavelength_router_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WavelengthRouter_MediaChannels_Channel_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WavelengthRouter_MediaChannels_Channel_Config) ProtoMessage() {}

func (x *WavelengthRouter_MediaChannels_Channel_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wavelength_router_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WavelengthRouter_MediaChannels_Channel_Config.ProtoReflect.Descriptor instead.
func (*WavelengthRouter_MediaChannels_Channel_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_wavelength_router_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (x *WavelengthRouter_MediaChannels_Channel_Config) GetAdminStatus() OpenconfigWavelengthRouterAdminStateType {
	if x != nil {
		return x.AdminStatus
	}
	return OpenconfigWavelengthRouterAdminStateType_OPENCONFIGWAVELENGTHROUTERADMINSTATETYPE_UNSET
}

func (x *WavelengthRouter_MediaChannels_Channel_Config) GetAseControlMode() OpenconfigWavelengthRouterASECONTROLMODE {
	if x != nil {
		return x.AseControlMode
	}
	return OpenconfigWavelengthRouterASECONTROLMODE_OPENCONFIGWAVELENGTHROUTERASECONTROLMODE_UNSET
}

func (x *WavelengthRouter_MediaChannels_Channel_Config) GetAseInjectionThreshold() *ywrapper.Decimal64Value {
	if x != nil {
		return x.AseInjectionThreshold
	}
	return nil
}

func (x *WavelengthRouter_MediaChannels_Channel_Config) GetAttenuationControlMode() OpenconfigWavelengthRouterATTENUATIONCONTROLMODE {
	if x != nil {
		return x.AttenuationControlMode
	}
	return OpenconfigWavelengthRouterATTENUATIONCONTROLMODE_OPENCONFIGWAVELENGTHROUTERATTENUATIONCONTROLMODE_UNSET
}

func (x *WavelengthRouter_MediaChannels_Channel_Config) GetIndex() *ywrapper.UintValue {
	if x != nil {
		return x.Index
	}
	return nil
}

func (x *WavelengthRouter_MediaChannels_Channel_Config) GetLowerFrequency() *ywrapper.UintValue {
	if x != nil {
		return x.LowerFrequency
	}
	return nil
}

func (x *WavelengthRouter_MediaChannels_Channel_Config) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *WavelengthRouter_MediaChannels_Channel_Config) GetSuperChannel() *ywrapper.BoolValue {
	if x != nil {
		return x.SuperChannel
	}
	return nil
}

func (x *WavelengthRouter_MediaChannels_Channel_Config) GetSuperChannelParent() *ywrapper.UintValue {
	if x != nil {
		return x.SuperChannelParent
	}
	return nil
}

func (x *WavelengthRouter_MediaChannels_Channel_Config) GetUpperFrequency() *ywrapper.UintValue {
	if x != nil {
		return x.UpperFrequency
	}
	return nil
}

type WavelengthRouter_MediaChannels_Channel_Dest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *WavelengthRouter_MediaChannels_Channel_Dest_Config `protobuf:"bytes,290197290,opt,name=config,proto3" json:"config,omitempty"`
	State  *WavelengthRouter_MediaChannels_Channel_Dest_State  `protobuf:"bytes,10749255,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *WavelengthRouter_MediaChannels_Channel_Dest) Reset() {
	*x = WavelengthRouter_MediaChannels_Channel_Dest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wavelength_router_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WavelengthRouter_MediaChannels_Channel_Dest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WavelengthRouter_MediaChannels_Channel_Dest) ProtoMessage() {}

func (x *WavelengthRouter_MediaChannels_Channel_Dest) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wavelength_router_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WavelengthRouter_MediaChannels_Channel_Dest.ProtoReflect.Descriptor instead.
func (*WavelengthRouter_MediaChannels_Channel_Dest) Descriptor() ([]byte, []int) {
	return file_openconfig_wavelength_router_proto_rawDescGZIP(), []int{0, 0, 0, 1}
}

func (x *WavelengthRouter_MediaChannels_Channel_Dest) GetConfig() *WavelengthRouter_MediaChannels_Channel_Dest_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *WavelengthRouter_MediaChannels_Channel_Dest) GetState() *WavelengthRouter_MediaChannels_Channel_Dest_State {
	if x != nil {
		return x.State
	}
	return nil
}

type WavelengthRouter_MediaChannels_Channel_Source struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *WavelengthRouter_MediaChannels_Channel_Source_Config `protobuf:"bytes,488150171,opt,name=config,proto3" json:"config,omitempty"`
	State  *WavelengthRouter_MediaChannels_Channel_Source_State  `protobuf:"bytes,176255644,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *WavelengthRouter_MediaChannels_Channel_Source) Reset() {
	*x = WavelengthRouter_MediaChannels_Channel_Source{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wavelength_router_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WavelengthRouter_MediaChannels_Channel_Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WavelengthRouter_MediaChannels_Channel_Source) ProtoMessage() {}

func (x *WavelengthRouter_MediaChannels_Channel_Source) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wavelength_router_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WavelengthRouter_MediaChannels_Channel_Source.ProtoReflect.Descriptor instead.
func (*WavelengthRouter_MediaChannels_Channel_Source) Descriptor() ([]byte, []int) {
	return file_openconfig_wavelength_router_proto_rawDescGZIP(), []int{0, 0, 0, 2}
}

func (x *WavelengthRouter_MediaChannels_Channel_Source) GetConfig() *WavelengthRouter_MediaChannels_Channel_Source_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *WavelengthRouter_MediaChannels_Channel_Source) GetState() *WavelengthRouter_MediaChannels_Channel_Source_State {
	if x != nil {
		return x.State
	}
	return nil
}

type WavelengthRouter_MediaChannels_Channel_SpectrumPowerProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Distribution []*WavelengthRouter_MediaChannels_Channel_SpectrumPowerProfile_DistributionKey `protobuf:"bytes,250119973,rep,name=distribution,proto3" json:"distribution,omitempty"`
}

func (x *WavelengthRouter_MediaChannels_Channel_SpectrumPowerProfile) Reset() {
	*x = WavelengthRouter_MediaChannels_Channel_SpectrumPowerProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wavelength_router_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WavelengthRouter_MediaChannels_Channel_SpectrumPowerProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WavelengthRouter_MediaChannels_Channel_SpectrumPowerProfile) ProtoMessage() {}

func (x *WavelengthRouter_MediaChannels_Channel_SpectrumPowerProfile) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wavelength_router_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WavelengthRouter_MediaChannels_Channel_SpectrumPowerProfile.ProtoReflect.Descriptor instead.
func (*WavelengthRouter_MediaChannels_Channel_SpectrumPowerProfile) Descriptor() ([]byte, []int) {
	return file_openconfig_wavelength_router_proto_rawDescGZIP(), []int{0, 0, 0, 3}
}

func (x *WavelengthRouter_MediaChannels_Channel_SpectrumPowerProfile) GetDistribution() []*WavelengthRouter_MediaChannels_Channel_SpectrumPowerProfile_DistributionKey {
	if x != nil {
		return x.Distribution
	}
	return nil
}

type WavelengthRouter_MediaChannels_Channel_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminStatus            OpenconfigWavelengthRouterAdminStateType                `protobuf:"varint,320367411,opt,name=admin_status,json=adminStatus,proto3,enum=openconfig.OpenconfigWavelengthRouterAdminStateType" json:"admin_status,omitempty"`
	AseControlMode         OpenconfigWavelengthRouterASECONTROLMODE                `protobuf:"varint,512417372,opt,name=ase_control_mode,json=aseControlMode,proto3,enum=openconfig.OpenconfigWavelengthRouterASECONTROLMODE" json:"ase_control_mode,omitempty"`
	AseInjectionThreshold  *ywrapper.Decimal64Value                                `protobuf:"bytes,132242398,opt,name=ase_injection_threshold,json=aseInjectionThreshold,proto3" json:"ase_injection_threshold,omitempty"`
	AseStatus              WavelengthRouter_MediaChannels_Channel_State_AseStatus  `protobuf:"varint,452729655,opt,name=ase_status,json=aseStatus,proto3,enum=openconfig.WavelengthRouter_MediaChannels_Channel_State_AseStatus" json:"ase_status,omitempty"`
	AttenuationControlMode OpenconfigWavelengthRouterATTENUATIONCONTROLMODE        `protobuf:"varint,213701055,opt,name=attenuation_control_mode,json=attenuationControlMode,proto3,enum=openconfig.OpenconfigWavelengthRouterATTENUATIONCONTROLMODE" json:"attenuation_control_mode,omitempty"`
	Index                  *ywrapper.UintValue                                     `protobuf:"bytes,221912741,opt,name=index,proto3" json:"index,omitempty"`
	LowerFrequency         *ywrapper.UintValue                                     `protobuf:"bytes,62283199,opt,name=lower_frequency,json=lowerFrequency,proto3" json:"lower_frequency,omitempty"`
	Name                   *ywrapper.StringValue                                   `protobuf:"bytes,288898326,opt,name=name,proto3" json:"name,omitempty"`
	OperStatus             WavelengthRouter_MediaChannels_Channel_State_OperStatus `protobuf:"varint,526805130,opt,name=oper_status,json=operStatus,proto3,enum=openconfig.WavelengthRouter_MediaChannels_Channel_State_OperStatus" json:"oper_status,omitempty"`
	SuperChannel           *ywrapper.BoolValue                                     `protobuf:"bytes,412796130,opt,name=super_channel,json=superChannel,proto3" json:"super_channel,omitempty"`
	SuperChannelParent     *ywrapper.UintValue                                     `protobuf:"bytes,438375435,opt,name=super_channel_parent,json=superChannelParent,proto3" json:"super_channel_parent,omitempty"`
	UpperFrequency         *ywrapper.UintValue                                     `protobuf:"bytes,422717604,opt,name=upper_frequency,json=upperFrequency,proto3" json:"upper_frequency,omitempty"`
}

func (x *WavelengthRouter_MediaChannels_Channel_State) Reset() {
	*x = WavelengthRouter_MediaChannels_Channel_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wavelength_router_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WavelengthRouter_MediaChannels_Channel_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WavelengthRouter_MediaChannels_Channel_State) ProtoMessage() {}

func (x *WavelengthRouter_MediaChannels_Channel_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wavelength_router_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WavelengthRouter_MediaChannels_Channel_State.ProtoReflect.Descriptor instead.
func (*WavelengthRouter_MediaChannels_Channel_State) Descriptor() ([]byte, []int) {
	return file_openconfig_wavelength_router_proto_rawDescGZIP(), []int{0, 0, 0, 4}
}

func (x *WavelengthRouter_MediaChannels_Channel_State) GetAdminStatus() OpenconfigWavelengthRouterAdminStateType {
	if x != nil {
		return x.AdminStatus
	}
	return OpenconfigWavelengthRouterAdminStateType_OPENCONFIGWAVELENGTHROUTERADMINSTATETYPE_UNSET
}

func (x *WavelengthRouter_MediaChannels_Channel_State) GetAseControlMode() OpenconfigWavelengthRouterASECONTROLMODE {
	if x != nil {
		return x.AseControlMode
	}
	return OpenconfigWavelengthRouterASECONTROLMODE_OPENCONFIGWAVELENGTHROUTERASECONTROLMODE_UNSET
}

func (x *WavelengthRouter_MediaChannels_Channel_State) GetAseInjectionThreshold() *ywrapper.Decimal64Value {
	if x != nil {
		return x.AseInjectionThreshold
	}
	return nil
}

func (x *WavelengthRouter_MediaChannels_Channel_State) GetAseStatus() WavelengthRouter_MediaChannels_Channel_State_AseStatus {
	if x != nil {
		return x.AseStatus
	}
	return WavelengthRouter_MediaChannels_Channel_State_ASESTATUS_UNSET
}

func (x *WavelengthRouter_MediaChannels_Channel_State) GetAttenuationControlMode() OpenconfigWavelengthRouterATTENUATIONCONTROLMODE {
	if x != nil {
		return x.AttenuationControlMode
	}
	return OpenconfigWavelengthRouterATTENUATIONCONTROLMODE_OPENCONFIGWAVELENGTHROUTERATTENUATIONCONTROLMODE_UNSET
}

func (x *WavelengthRouter_MediaChannels_Channel_State) GetIndex() *ywrapper.UintValue {
	if x != nil {
		return x.Index
	}
	return nil
}

func (x *WavelengthRouter_MediaChannels_Channel_State) GetLowerFrequency() *ywrapper.UintValue {
	if x != nil {
		return x.LowerFrequency
	}
	return nil
}

func (x *WavelengthRouter_MediaChannels_Channel_State) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *WavelengthRouter_MediaChannels_Channel_State) GetOperStatus() WavelengthRouter_MediaChannels_Channel_State_OperStatus {
	if x != nil {
		return x.OperStatus
	}
	return WavelengthRouter_MediaChannels_Channel_State_OPERSTATUS_UNSET
}

func (x *WavelengthRouter_MediaChannels_Channel_State) GetSuperChannel() *ywrapper.BoolValue {
	if x != nil {
		return x.SuperChannel
	}
	return nil
}

func (x *WavelengthRouter_MediaChannels_Channel_State) GetSuperChannelParent() *ywrapper.UintValue {
	if x != nil {
		return x.SuperChannelParent
	}
	return nil
}

func (x *WavelengthRouter_MediaChannels_Channel_State) GetUpperFrequency() *ywrapper.UintValue {
	if x != nil {
		return x.UpperFrequency
	}
	return nil
}

type WavelengthRouter_MediaChannels_Channel_Dest_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortName *ywrapper.StringValue `protobuf:"bytes,24904376,opt,name=port_name,json=portName,proto3" json:"port_name,omitempty"`
}

func (x *WavelengthRouter_MediaChannels_Channel_Dest_Config) Reset() {
	*x = WavelengthRouter_MediaChannels_Channel_Dest_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wavelength_router_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WavelengthRouter_MediaChannels_Channel_Dest_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WavelengthRouter_MediaChannels_Channel_Dest_Config) ProtoMessage() {}

func (x *WavelengthRouter_MediaChannels_Channel_Dest_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wavelength_router_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WavelengthRouter_MediaChannels_Channel_Dest_Config.ProtoReflect.Descriptor instead.
func (*WavelengthRouter_MediaChannels_Channel_Dest_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_wavelength_router_proto_rawDescGZIP(), []int{0, 0, 0, 1, 0}
}

func (x *WavelengthRouter_MediaChannels_Channel_Dest_Config) GetPortName() *ywrapper.StringValue {
	if x != nil {
		return x.PortName
	}
	return nil
}

type WavelengthRouter_MediaChannels_Channel_Dest_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortName *ywrapper.StringValue `protobuf:"bytes,353653293,opt,name=port_name,json=portName,proto3" json:"port_name,omitempty"`
}

func (x *WavelengthRouter_MediaChannels_Channel_Dest_State) Reset() {
	*x = WavelengthRouter_MediaChannels_Channel_Dest_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wavelength_router_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WavelengthRouter_MediaChannels_Channel_Dest_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WavelengthRouter_MediaChannels_Channel_Dest_State) ProtoMessage() {}

func (x *WavelengthRouter_MediaChannels_Channel_Dest_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wavelength_router_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WavelengthRouter_MediaChannels_Channel_Dest_State.ProtoReflect.Descriptor instead.
func (*WavelengthRouter_MediaChannels_Channel_Dest_State) Descriptor() ([]byte, []int) {
	return file_openconfig_wavelength_router_proto_rawDescGZIP(), []int{0, 0, 0, 1, 1}
}

func (x *WavelengthRouter_MediaChannels_Channel_Dest_State) GetPortName() *ywrapper.StringValue {
	if x != nil {
		return x.PortName
	}
	return nil
}

type WavelengthRouter_MediaChannels_Channel_Source_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortName *ywrapper.StringValue `protobuf:"bytes,362853209,opt,name=port_name,json=portName,proto3" json:"port_name,omitempty"`
}

func (x *WavelengthRouter_MediaChannels_Channel_Source_Config) Reset() {
	*x = WavelengthRouter_MediaChannels_Channel_Source_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wavelength_router_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WavelengthRouter_MediaChannels_Channel_Source_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WavelengthRouter_MediaChannels_Channel_Source_Config) ProtoMessage() {}

func (x *WavelengthRouter_MediaChannels_Channel_Source_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wavelength_router_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WavelengthRouter_MediaChannels_Channel_Source_Config.ProtoReflect.Descriptor instead.
func (*WavelengthRouter_MediaChannels_Channel_Source_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_wavelength_router_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0}
}

func (x *WavelengthRouter_MediaChannels_Channel_Source_Config) GetPortName() *ywrapper.StringValue {
	if x != nil {
		return x.PortName
	}
	return nil
}

type WavelengthRouter_MediaChannels_Channel_Source_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortName *ywrapper.StringValue `protobuf:"bytes,9862154,opt,name=port_name,json=portName,proto3" json:"port_name,omitempty"`
}

func (x *WavelengthRouter_MediaChannels_Channel_Source_State) Reset() {
	*x = WavelengthRouter_MediaChannels_Channel_Source_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wavelength_router_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WavelengthRouter_MediaChannels_Channel_Source_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WavelengthRouter_MediaChannels_Channel_Source_State) ProtoMessage() {}

func (x *WavelengthRouter_MediaChannels_Channel_Source_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wavelength_router_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WavelengthRouter_MediaChannels_Channel_Source_State.ProtoReflect.Descriptor instead.
func (*WavelengthRouter_MediaChannels_Channel_Source_State) Descriptor() ([]byte, []int) {
	return file_openconfig_wavelength_router_proto_rawDescGZIP(), []int{0, 0, 0, 2, 1}
}

func (x *WavelengthRouter_MediaChannels_Channel_Source_State) GetPortName() *ywrapper.StringValue {
	if x != nil {
		return x.PortName
	}
	return nil
}

type WavelengthRouter_MediaChannels_Channel_SpectrumPowerProfile_Distribution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *WavelengthRouter_MediaChannels_Channel_SpectrumPowerProfile_Distribution_Config `protobuf:"bytes,175481962,opt,name=config,proto3" json:"config,omitempty"`
	State  *WavelengthRouter_MediaChannels_Channel_SpectrumPowerProfile_Distribution_State  `protobuf:"bytes,69727111,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *WavelengthRouter_MediaChannels_Channel_SpectrumPowerProfile_Distribution) Reset() {
	*x = WavelengthRouter_MediaChannels_Channel_SpectrumPowerProfile_Distribution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wavelength_router_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WavelengthRouter_MediaChannels_Channel_SpectrumPowerProfile_Distribution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WavelengthRouter_MediaChannels_Channel_SpectrumPowerProfile_Distribution) ProtoMessage() {}

func (x *WavelengthRouter_MediaChannels_Channel_SpectrumPowerProfile_Distribution) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wavelength_router_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WavelengthRouter_MediaChannels_Channel_SpectrumPowerProfile_Distribution.ProtoReflect.Descriptor instead.
func (*WavelengthRouter_MediaChannels_Channel_SpectrumPowerProfile_Distribution) Descriptor() ([]byte, []int) {
	return file_openconfig_wavelength_router_proto_rawDescGZIP(), []int{0, 0, 0, 3, 0}
}

func (x *WavelengthRouter_MediaChannels_Channel_SpectrumPowerProfile_Distribution) GetConfig() *WavelengthRouter_MediaChannels_Channel_SpectrumPowerProfile_Distribution_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *WavelengthRouter_MediaChannels_Channel_SpectrumPowerProfile_Distribution) GetState() *WavelengthRouter_MediaChannels_Channel_SpectrumPowerProfile_Distribution_State {
	if x != nil {
		return x.State
	}
	return nil
}

type WavelengthRouter_MediaChannels_Channel_SpectrumPowerProfile_DistributionKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LowerFrequency uint64                                                                    `protobuf:"varint,1,opt,name=lower_frequency,json=lowerFrequency,proto3" json:"lower_frequency,omitempty"`
	UpperFrequency uint64                                                                    `protobuf:"varint,2,opt,name=upper_frequency,json=upperFrequency,proto3" json:"upper_frequency,omitempty"`
	Distribution   *WavelengthRouter_MediaChannels_Channel_SpectrumPowerProfile_Distribution `protobuf:"bytes,3,opt,name=distribution,proto3" json:"distribution,omitempty"`
}

func (x *WavelengthRouter_MediaChannels_Channel_SpectrumPowerProfile_DistributionKey) Reset() {
	*x = WavelengthRouter_MediaChannels_Channel_SpectrumPowerProfile_DistributionKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wavelength_router_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WavelengthRouter_MediaChannels_Channel_SpectrumPowerProfile_DistributionKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WavelengthRouter_MediaChannels_Channel_SpectrumPowerProfile_DistributionKey) ProtoMessage() {}

func (x *WavelengthRouter_MediaChannels_Channel_SpectrumPowerProfile_DistributionKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wavelength_router_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WavelengthRouter_MediaChannels_Channel_SpectrumPowerProfile_DistributionKey.ProtoReflect.Descriptor instead.
func (*WavelengthRouter_MediaChannels_Channel_SpectrumPowerProfile_DistributionKey) Descriptor() ([]byte, []int) {
	return file_openconfig_wavelength_router_proto_rawDescGZIP(), []int{0, 0, 0, 3, 1}
}

func (x *WavelengthRouter_MediaChannels_Channel_SpectrumPowerProfile_DistributionKey) GetLowerFrequency() uint64 {
	if x != nil {
		return x.LowerFrequency
	}
	return 0
}

func (x *WavelengthRouter_MediaChannels_Channel_SpectrumPowerProfile_DistributionKey) GetUpperFrequency() uint64 {
	if x != nil {
		return x.UpperFrequency
	}
	return 0
}

func (x *WavelengthRouter_MediaChannels_Channel_SpectrumPowerProfile_DistributionKey) GetDistribution() *WavelengthRouter_MediaChannels_Channel_SpectrumPowerProfile_Distribution {
	if x != nil {
		return x.Distribution
	}
	return nil
}

type WavelengthRouter_MediaChannels_Channel_SpectrumPowerProfile_Distribution_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LowerFrequency *ywrapper.UintValue      `protobuf:"bytes,20451429,opt,name=lower_frequency,json=lowerFrequency,proto3" json:"lower_frequency,omitempty"`
	TargetPower    *ywrapper.Decimal64Value `protobuf:"bytes,301409862,opt,name=target_power,json=targetPower,proto3" json:"target_power,omitempty"`
	UpperFrequency *ywrapper.UintValue      `protobuf:"bytes,119671458,opt,name=upper_frequency,json=upperFrequency,proto3" json:"upper_frequency,omitempty"`
}

func (x *WavelengthRouter_MediaChannels_Channel_SpectrumPowerProfile_Distribution_Config) Reset() {
	*x = WavelengthRouter_MediaChannels_Channel_SpectrumPowerProfile_Distribution_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wavelength_router_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WavelengthRouter_MediaChannels_Channel_SpectrumPowerProfile_Distribution_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WavelengthRouter_MediaChannels_Channel_SpectrumPowerProfile_Distribution_Config) ProtoMessage() {
}

func (x *WavelengthRouter_MediaChannels_Channel_SpectrumPowerProfile_Distribution_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wavelength_router_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WavelengthRouter_MediaChannels_Channel_SpectrumPowerProfile_Distribution_Config.ProtoReflect.Descriptor instead.
func (*WavelengthRouter_MediaChannels_Channel_SpectrumPowerProfile_Distribution_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_wavelength_router_proto_rawDescGZIP(), []int{0, 0, 0, 3, 0, 0}
}

func (x *WavelengthRouter_MediaChannels_Channel_SpectrumPowerProfile_Distribution_Config) GetLowerFrequency() *ywrapper.UintValue {
	if x != nil {
		return x.LowerFrequency
	}
	return nil
}

func (x *WavelengthRouter_MediaChannels_Channel_SpectrumPowerProfile_Distribution_Config) GetTargetPower() *ywrapper.Decimal64Value {
	if x != nil {
		return x.TargetPower
	}
	return nil
}

func (x *WavelengthRouter_MediaChannels_Channel_SpectrumPowerProfile_Distribution_Config) GetUpperFrequency() *ywrapper.UintValue {
	if x != nil {
		return x.UpperFrequency
	}
	return nil
}

type WavelengthRouter_MediaChannels_Channel_SpectrumPowerProfile_Distribution_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LowerFrequency *ywrapper.UintValue      `protobuf:"bytes,13469492,opt,name=lower_frequency,json=lowerFrequency,proto3" json:"lower_frequency,omitempty"`
	TargetPower    *ywrapper.Decimal64Value `protobuf:"bytes,259276205,opt,name=target_power,json=targetPower,proto3" json:"target_power,omitempty"`
	UpperFrequency *ywrapper.UintValue      `protobuf:"bytes,455877251,opt,name=upper_frequency,json=upperFrequency,proto3" json:"upper_frequency,omitempty"`
}

func (x *WavelengthRouter_MediaChannels_Channel_SpectrumPowerProfile_Distribution_State) Reset() {
	*x = WavelengthRouter_MediaChannels_Channel_SpectrumPowerProfile_Distribution_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wavelength_router_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WavelengthRouter_MediaChannels_Channel_SpectrumPowerProfile_Distribution_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WavelengthRouter_MediaChannels_Channel_SpectrumPowerProfile_Distribution_State) ProtoMessage() {
}

func (x *WavelengthRouter_MediaChannels_Channel_SpectrumPowerProfile_Distribution_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wavelength_router_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WavelengthRouter_MediaChannels_Channel_SpectrumPowerProfile_Distribution_State.ProtoReflect.Descriptor instead.
func (*WavelengthRouter_MediaChannels_Channel_SpectrumPowerProfile_Distribution_State) Descriptor() ([]byte, []int) {
	return file_openconfig_wavelength_router_proto_rawDescGZIP(), []int{0, 0, 0, 3, 0, 1}
}

func (x *WavelengthRouter_MediaChannels_Channel_SpectrumPowerProfile_Distribution_State) GetLowerFrequency() *ywrapper.UintValue {
	if x != nil {
		return x.LowerFrequency
	}
	return nil
}

func (x *WavelengthRouter_MediaChannels_Channel_SpectrumPowerProfile_Distribution_State) GetTargetPower() *ywrapper.Decimal64Value {
	if x != nil {
		return x.TargetPower
	}
	return nil
}

func (x *WavelengthRouter_MediaChannels_Channel_SpectrumPowerProfile_Distribution_State) GetUpperFrequency() *ywrapper.UintValue {
	if x != nil {
		return x.UpperFrequency
	}
	return nil
}

type WavelengthRouter_PortSpectrumPowerProfiles_Port struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config               *WavelengthRouter_PortSpectrumPowerProfiles_Port_Config               `protobuf:"bytes,76374934,opt,name=config,proto3" json:"config,omitempty"`
	SpectrumPowerProfile *WavelengthRouter_PortSpectrumPowerProfiles_Port_SpectrumPowerProfile `protobuf:"bytes,168084213,opt,name=spectrum_power_profile,json=spectrumPowerProfile,proto3" json:"spectrum_power_profile,omitempty"`
	State                *WavelengthRouter_PortSpectrumPowerProfiles_Port_State                `protobuf:"bytes,347262019,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *WavelengthRouter_PortSpectrumPowerProfiles_Port) Reset() {
	*x = WavelengthRouter_PortSpectrumPowerProfiles_Port{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wavelength_router_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WavelengthRouter_PortSpectrumPowerProfiles_Port) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WavelengthRouter_PortSpectrumPowerProfiles_Port) ProtoMessage() {}

func (x *WavelengthRouter_PortSpectrumPowerProfiles_Port) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wavelength_router_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WavelengthRouter_PortSpectrumPowerProfiles_Port.ProtoReflect.Descriptor instead.
func (*WavelengthRouter_PortSpectrumPowerProfiles_Port) Descriptor() ([]byte, []int) {
	return file_openconfig_wavelength_router_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *WavelengthRouter_PortSpectrumPowerProfiles_Port) GetConfig() *WavelengthRouter_PortSpectrumPowerProfiles_Port_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *WavelengthRouter_PortSpectrumPowerProfiles_Port) GetSpectrumPowerProfile() *WavelengthRouter_PortSpectrumPowerProfiles_Port_SpectrumPowerProfile {
	if x != nil {
		return x.SpectrumPowerProfile
	}
	return nil
}

func (x *WavelengthRouter_PortSpectrumPowerProfiles_Port) GetState() *WavelengthRouter_PortSpectrumPowerProfiles_Port_State {
	if x != nil {
		return x.State
	}
	return nil
}

type WavelengthRouter_PortSpectrumPowerProfiles_PortKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string                                           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Port *WavelengthRouter_PortSpectrumPowerProfiles_Port `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *WavelengthRouter_PortSpectrumPowerProfiles_PortKey) Reset() {
	*x = WavelengthRouter_PortSpectrumPowerProfiles_PortKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wavelength_router_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WavelengthRouter_PortSpectrumPowerProfiles_PortKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WavelengthRouter_PortSpectrumPowerProfiles_PortKey) ProtoMessage() {}

func (x *WavelengthRouter_PortSpectrumPowerProfiles_PortKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wavelength_router_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WavelengthRouter_PortSpectrumPowerProfiles_PortKey.ProtoReflect.Descriptor instead.
func (*WavelengthRouter_PortSpectrumPowerProfiles_PortKey) Descriptor() ([]byte, []int) {
	return file_openconfig_wavelength_router_proto_rawDescGZIP(), []int{0, 1, 1}
}

func (x *WavelengthRouter_PortSpectrumPowerProfiles_PortKey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WavelengthRouter_PortSpectrumPowerProfiles_PortKey) GetPort() *WavelengthRouter_PortSpectrumPowerProfiles_Port {
	if x != nil {
		return x.Port
	}
	return nil
}

type WavelengthRouter_PortSpectrumPowerProfiles_Port_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *ywrapper.StringValue `protobuf:"bytes,193095804,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *WavelengthRouter_PortSpectrumPowerProfiles_Port_Config) Reset() {
	*x = WavelengthRouter_PortSpectrumPowerProfiles_Port_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wavelength_router_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WavelengthRouter_PortSpectrumPowerProfiles_Port_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WavelengthRouter_PortSpectrumPowerProfiles_Port_Config) ProtoMessage() {}

func (x *WavelengthRouter_PortSpectrumPowerProfiles_Port_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wavelength_router_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WavelengthRouter_PortSpectrumPowerProfiles_Port_Config.ProtoReflect.Descriptor instead.
func (*WavelengthRouter_PortSpectrumPowerProfiles_Port_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_wavelength_router_proto_rawDescGZIP(), []int{0, 1, 0, 0}
}

func (x *WavelengthRouter_PortSpectrumPowerProfiles_Port_Config) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

type WavelengthRouter_PortSpectrumPowerProfiles_Port_SpectrumPowerProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Distribution []*WavelengthRouter_PortSpectrumPowerProfiles_Port_SpectrumPowerProfile_DistributionKey `protobuf:"bytes,321793494,rep,name=distribution,proto3" json:"distribution,omitempty"`
}

func (x *WavelengthRouter_PortSpectrumPowerProfiles_Port_SpectrumPowerProfile) Reset() {
	*x = WavelengthRouter_PortSpectrumPowerProfiles_Port_SpectrumPowerProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wavelength_router_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WavelengthRouter_PortSpectrumPowerProfiles_Port_SpectrumPowerProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WavelengthRouter_PortSpectrumPowerProfiles_Port_SpectrumPowerProfile) ProtoMessage() {}

func (x *WavelengthRouter_PortSpectrumPowerProfiles_Port_SpectrumPowerProfile) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wavelength_router_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WavelengthRouter_PortSpectrumPowerProfiles_Port_SpectrumPowerProfile.ProtoReflect.Descriptor instead.
func (*WavelengthRouter_PortSpectrumPowerProfiles_Port_SpectrumPowerProfile) Descriptor() ([]byte, []int) {
	return file_openconfig_wavelength_router_proto_rawDescGZIP(), []int{0, 1, 0, 1}
}

func (x *WavelengthRouter_PortSpectrumPowerProfiles_Port_SpectrumPowerProfile) GetDistribution() []*WavelengthRouter_PortSpectrumPowerProfiles_Port_SpectrumPowerProfile_DistributionKey {
	if x != nil {
		return x.Distribution
	}
	return nil
}

type WavelengthRouter_PortSpectrumPowerProfiles_Port_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *ywrapper.StringValue `protobuf:"bytes,219454931,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *WavelengthRouter_PortSpectrumPowerProfiles_Port_State) Reset() {
	*x = WavelengthRouter_PortSpectrumPowerProfiles_Port_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wavelength_router_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WavelengthRouter_PortSpectrumPowerProfiles_Port_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WavelengthRouter_PortSpectrumPowerProfiles_Port_State) ProtoMessage() {}

func (x *WavelengthRouter_PortSpectrumPowerProfiles_Port_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wavelength_router_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WavelengthRouter_PortSpectrumPowerProfiles_Port_State.ProtoReflect.Descriptor instead.
func (*WavelengthRouter_PortSpectrumPowerProfiles_Port_State) Descriptor() ([]byte, []int) {
	return file_openconfig_wavelength_router_proto_rawDescGZIP(), []int{0, 1, 0, 2}
}

func (x *WavelengthRouter_PortSpectrumPowerProfiles_Port_State) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

type WavelengthRouter_PortSpectrumPowerProfiles_Port_SpectrumPowerProfile_Distribution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *WavelengthRouter_PortSpectrumPowerProfiles_Port_SpectrumPowerProfile_Distribution_Config `protobuf:"bytes,40015543,opt,name=config,proto3" json:"config,omitempty"`
	State  *WavelengthRouter_PortSpectrumPowerProfiles_Port_SpectrumPowerProfile_Distribution_State  `protobuf:"bytes,522250472,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *WavelengthRouter_PortSpectrumPowerProfiles_Port_SpectrumPowerProfile_Distribution) Reset() {
	*x = WavelengthRouter_PortSpectrumPowerProfiles_Port_SpectrumPowerProfile_Distribution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wavelength_router_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WavelengthRouter_PortSpectrumPowerProfiles_Port_SpectrumPowerProfile_Distribution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WavelengthRouter_PortSpectrumPowerProfiles_Port_SpectrumPowerProfile_Distribution) ProtoMessage() {
}

func (x *WavelengthRouter_PortSpectrumPowerProfiles_Port_SpectrumPowerProfile_Distribution) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wavelength_router_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WavelengthRouter_PortSpectrumPowerProfiles_Port_SpectrumPowerProfile_Distribution.ProtoReflect.Descriptor instead.
func (*WavelengthRouter_PortSpectrumPowerProfiles_Port_SpectrumPowerProfile_Distribution) Descriptor() ([]byte, []int) {
	return file_openconfig_wavelength_router_proto_rawDescGZIP(), []int{0, 1, 0, 1, 0}
}

func (x *WavelengthRouter_PortSpectrumPowerProfiles_Port_SpectrumPowerProfile_Distribution) GetConfig() *WavelengthRouter_PortSpectrumPowerProfiles_Port_SpectrumPowerProfile_Distribution_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *WavelengthRouter_PortSpectrumPowerProfiles_Port_SpectrumPowerProfile_Distribution) GetState() *WavelengthRouter_PortSpectrumPowerProfiles_Port_SpectrumPowerProfile_Distribution_State {
	if x != nil {
		return x.State
	}
	return nil
}

type WavelengthRouter_PortSpectrumPowerProfiles_Port_SpectrumPowerProfile_DistributionKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LowerFrequency uint64                                                                             `protobuf:"varint,1,opt,name=lower_frequency,json=lowerFrequency,proto3" json:"lower_frequency,omitempty"`
	UpperFrequency uint64                                                                             `protobuf:"varint,2,opt,name=upper_frequency,json=upperFrequency,proto3" json:"upper_frequency,omitempty"`
	Distribution   *WavelengthRouter_PortSpectrumPowerProfiles_Port_SpectrumPowerProfile_Distribution `protobuf:"bytes,3,opt,name=distribution,proto3" json:"distribution,omitempty"`
}

func (x *WavelengthRouter_PortSpectrumPowerProfiles_Port_SpectrumPowerProfile_DistributionKey) Reset() {
	*x = WavelengthRouter_PortSpectrumPowerProfiles_Port_SpectrumPowerProfile_DistributionKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wavelength_router_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WavelengthRouter_PortSpectrumPowerProfiles_Port_SpectrumPowerProfile_DistributionKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WavelengthRouter_PortSpectrumPowerProfiles_Port_SpectrumPowerProfile_DistributionKey) ProtoMessage() {
}

func (x *WavelengthRouter_PortSpectrumPowerProfiles_Port_SpectrumPowerProfile_DistributionKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wavelength_router_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WavelengthRouter_PortSpectrumPowerProfiles_Port_SpectrumPowerProfile_DistributionKey.ProtoReflect.Descriptor instead.
func (*WavelengthRouter_PortSpectrumPowerProfiles_Port_SpectrumPowerProfile_DistributionKey) Descriptor() ([]byte, []int) {
	return file_openconfig_wavelength_router_proto_rawDescGZIP(), []int{0, 1, 0, 1, 1}
}

func (x *WavelengthRouter_PortSpectrumPowerProfiles_Port_SpectrumPowerProfile_DistributionKey) GetLowerFrequency() uint64 {
	if x != nil {
		return x.LowerFrequency
	}
	return 0
}

func (x *WavelengthRouter_PortSpectrumPowerProfiles_Port_SpectrumPowerProfile_DistributionKey) GetUpperFrequency() uint64 {
	if x != nil {
		return x.UpperFrequency
	}
	return 0
}

func (x *WavelengthRouter_PortSpectrumPowerProfiles_Port_SpectrumPowerProfile_DistributionKey) GetDistribution() *WavelengthRouter_PortSpectrumPowerProfiles_Port_SpectrumPowerProfile_Distribution {
	if x != nil {
		return x.Distribution
	}
	return nil
}

type WavelengthRouter_PortSpectrumPowerProfiles_Port_SpectrumPowerProfile_Distribution_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LowerFrequency *ywrapper.UintValue      `protobuf:"bytes,31755172,opt,name=lower_frequency,json=lowerFrequency,proto3" json:"lower_frequency,omitempty"`
	TargetPower    *ywrapper.Decimal64Value `protobuf:"bytes,133376509,opt,name=target_power,json=targetPower,proto3" json:"target_power,omitempty"`
	UpperFrequency *ywrapper.UintValue      `protobuf:"bytes,290554995,opt,name=upper_frequency,json=upperFrequency,proto3" json:"upper_frequency,omitempty"`
}

func (x *WavelengthRouter_PortSpectrumPowerProfiles_Port_SpectrumPowerProfile_Distribution_Config) Reset() {
	*x = WavelengthRouter_PortSpectrumPowerProfiles_Port_SpectrumPowerProfile_Distribution_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wavelength_router_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WavelengthRouter_PortSpectrumPowerProfiles_Port_SpectrumPowerProfile_Distribution_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WavelengthRouter_PortSpectrumPowerProfiles_Port_SpectrumPowerProfile_Distribution_Config) ProtoMessage() {
}

func (x *WavelengthRouter_PortSpectrumPowerProfiles_Port_SpectrumPowerProfile_Distribution_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wavelength_router_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WavelengthRouter_PortSpectrumPowerProfiles_Port_SpectrumPowerProfile_Distribution_Config.ProtoReflect.Descriptor instead.
func (*WavelengthRouter_PortSpectrumPowerProfiles_Port_SpectrumPowerProfile_Distribution_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_wavelength_router_proto_rawDescGZIP(), []int{0, 1, 0, 1, 0, 0}
}

func (x *WavelengthRouter_PortSpectrumPowerProfiles_Port_SpectrumPowerProfile_Distribution_Config) GetLowerFrequency() *ywrapper.UintValue {
	if x != nil {
		return x.LowerFrequency
	}
	return nil
}

func (x *WavelengthRouter_PortSpectrumPowerProfiles_Port_SpectrumPowerProfile_Distribution_Config) GetTargetPower() *ywrapper.Decimal64Value {
	if x != nil {
		return x.TargetPower
	}
	return nil
}

func (x *WavelengthRouter_PortSpectrumPowerProfiles_Port_SpectrumPowerProfile_Distribution_Config) GetUpperFrequency() *ywrapper.UintValue {
	if x != nil {
		return x.UpperFrequency
	}
	return nil
}

type WavelengthRouter_PortSpectrumPowerProfiles_Port_SpectrumPowerProfile_Distribution_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LowerFrequency *ywrapper.UintValue      `protobuf:"bytes,24102267,opt,name=lower_frequency,json=lowerFrequency,proto3" json:"lower_frequency,omitempty"`
	TargetPower    *ywrapper.Decimal64Value `protobuf:"bytes,62196096,opt,name=target_power,json=targetPower,proto3" json:"target_power,omitempty"`
	UpperFrequency *ywrapper.UintValue      `protobuf:"bytes,442679840,opt,name=upper_frequency,json=upperFrequency,proto3" json:"upper_frequency,omitempty"`
}

func (x *WavelengthRouter_PortSpectrumPowerProfiles_Port_SpectrumPowerProfile_Distribution_State) Reset() {
	*x = WavelengthRouter_PortSpectrumPowerProfiles_Port_SpectrumPowerProfile_Distribution_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wavelength_router_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WavelengthRouter_PortSpectrumPowerProfiles_Port_SpectrumPowerProfile_Distribution_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WavelengthRouter_PortSpectrumPowerProfiles_Port_SpectrumPowerProfile_Distribution_State) ProtoMessage() {
}

func (x *WavelengthRouter_PortSpectrumPowerProfiles_Port_SpectrumPowerProfile_Distribution_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wavelength_router_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WavelengthRouter_PortSpectrumPowerProfiles_Port_SpectrumPowerProfile_Distribution_State.ProtoReflect.Descriptor instead.
func (*WavelengthRouter_PortSpectrumPowerProfiles_Port_SpectrumPowerProfile_Distribution_State) Descriptor() ([]byte, []int) {
	return file_openconfig_wavelength_router_proto_rawDescGZIP(), []int{0, 1, 0, 1, 0, 1}
}

func (x *WavelengthRouter_PortSpectrumPowerProfiles_Port_SpectrumPowerProfile_Distribution_State) GetLowerFrequency() *ywrapper.UintValue {
	if x != nil {
		return x.LowerFrequency
	}
	return nil
}

func (x *WavelengthRouter_PortSpectrumPowerProfiles_Port_SpectrumPowerProfile_Distribution_State) GetTargetPower() *ywrapper.Decimal64Value {
	if x != nil {
		return x.TargetPower
	}
	return nil
}

func (x *WavelengthRouter_PortSpectrumPowerProfiles_Port_SpectrumPowerProfile_Distribution_State) GetUpperFrequency() *ywrapper.UintValue {
	if x != nil {
		return x.UpperFrequency
	}
	return nil
}

var File_openconfig_wavelength_router_proto protoreflect.FileDescriptor

var file_openconfig_wavelength_router_proto_rawDesc = []byte{
	0x0a, 0x22, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x77, 0x61, 0x76,
	0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x1a, 0x0e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0a, 0x79, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc3, 0x5a, 0x0a, 0x10, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x7a, 0x0a, 0x0e, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0xc6, 0xb5, 0xe6, 0x3c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x42, 0x24, 0x82, 0x41, 0x21, 0x2f, 0x77, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2d, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0xae, 0x01, 0x0a, 0x1c, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x9d, 0x94, 0xf1, 0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x57, 0x61, 0x76,
	0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x53, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x42, 0x32, 0x82, 0x41, 0x2f, 0x2f, 0x77, 0x61, 0x76,
	0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2f, 0x70,
	0x6f, 0x72, 0x74, 0x2d, 0x73, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x2d, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x19, 0x70, 0x6f, 0x72,
	0x74, 0x53, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x1a, 0x98, 0x3d, 0x0a, 0x0d, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x81, 0x01, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x18, 0xd2, 0x8f, 0xfe, 0xff, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x57, 0x61, 0x76, 0x65,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4b, 0x65, 0x79, 0x42, 0x2c, 0x82, 0x41, 0x29, 0x2f, 0x77, 0x61, 0x76, 0x65, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2f, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x1a, 0xdb, 0x3a, 0x0a,
	0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x8a, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x93, 0x9b, 0xb9, 0xc3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x57, 0x61, 0x76, 0x65, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x33, 0x82, 0x41, 0x30, 0x2f, 0x77, 0x61,
	0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2f,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x81, 0x01, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x74, 0x18, 0xe5,
	0xd4, 0xb4, 0x45, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x44, 0x65, 0x73, 0x74,
	0x42, 0x31, 0x82, 0x41, 0x2e, 0x2f, 0x77, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2d, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x64,
	0x65, 0x73, 0x74, 0x52, 0x04, 0x64, 0x65, 0x73, 0x74, 0x12, 0x89, 0x01, 0x0a, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0xca, 0xa5, 0xc8, 0x75, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x57, 0x61, 0x76, 0x65, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x33, 0x82, 0x41, 0x30, 0x2f, 0x77, 0x61,
	0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2f,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0xc6, 0x01, 0x0a, 0x16, 0x73, 0x70, 0x65, 0x63, 0x74, 0x72,
	0x75, 0x6d, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0xa4, 0x91, 0xa8, 0xd5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53,
	0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x42, 0x43, 0x82, 0x41, 0x40, 0x2f, 0x77, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x2d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x14, 0x73, 0x70, 0x65, 0x63, 0x74, 0x72,
	0x75, 0x6d, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x86,
	0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xf4, 0xd8, 0xec, 0xcb, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x32, 0x82, 0x41,
	0x2f, 0x2f, 0x77, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2d, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xb9, 0x0b, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x9c, 0x01, 0x0a, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x8a, 0xd0, 0xd1, 0x46, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x77, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2d,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2d, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0xa8, 0x01, 0x0a, 0x10, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x95, 0x84, 0xd1, 0xca, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x41, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x54, 0x52,
	0x4f, 0x4c, 0x4d, 0x4f, 0x44, 0x45, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x77, 0x61, 0x76, 0x65,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2f, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x73, 0x65, 0x2d,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x52, 0x0e, 0x61, 0x73,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0xa1, 0x01, 0x0a,
	0x17, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0xc1, 0xe5, 0xa7, 0xf5, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4b, 0x82, 0x41,
	0x48, 0x2f, 0x77, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2d, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x61, 0x73, 0x65, 0x2d, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x15, 0x61, 0x73, 0x65, 0x49, 0x6e,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x12, 0xc8, 0x01, 0x0a, 0x18, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0xb2, 0xaf,
	0x99, 0xcd, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x57,
	0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x41,
	0x54, 0x54, 0x45, 0x4e, 0x55, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f,
	0x4c, 0x4d, 0x4f, 0x44, 0x45, 0x42, 0x4c, 0x82, 0x41, 0x49, 0x2f, 0x77, 0x61, 0x76, 0x65, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2f, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x6e,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2d, 0x6d,
	0x6f, 0x64, 0x65, 0x52, 0x16, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x68, 0x0a, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0xe2, 0xf2, 0xdf, 0x8f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x77, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x85, 0x01, 0x0a, 0x0f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f,
	0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x88, 0xb2, 0xdb, 0xfe, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x43, 0x82, 0x41, 0x40, 0x2f, 0x77, 0x61,
	0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2f,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6c, 0x6f,
	0x77, 0x65, 0x72, 0x2d, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0e, 0x6c,
	0x6f, 0x77, 0x65, 0x72, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x67, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xc3, 0xd1, 0xb4, 0xa7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x38, 0x82, 0x41, 0x35, 0x2f, 0x77, 0x61, 0x76, 0x65,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2f, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6e, 0x61, 0x6d, 0x65,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x7e, 0x0a, 0x0d, 0x73, 0x75, 0x70, 0x65, 0x72, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0xfd, 0xf0, 0xcf, 0x17, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f, 0x77, 0x61, 0x76, 0x65, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2f, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x0c, 0x73, 0x75, 0x70, 0x65, 0x72, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x92, 0x01, 0x0a, 0x14, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0xda, 0xe9, 0xef, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x48, 0x82,
	0x41, 0x45, 0x2f, 0x77, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2d, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x2d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x12, 0x73, 0x75, 0x70, 0x65, 0x72, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x85, 0x01, 0x0a, 0x0f,
	0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x87, 0xe0, 0xfc, 0xcd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x43,
	0x82, 0x41, 0x40, 0x2f, 0x77, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2d, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2d, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x2d, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x52, 0x0e, 0x75, 0x70, 0x70, 0x65, 0x72, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x1a, 0xba, 0x04, 0x0a, 0x04, 0x44, 0x65, 0x73, 0x74, 0x12, 0x94, 0x01, 0x0a,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xaa, 0x9e, 0xb0, 0x8a, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x57,
	0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x38, 0x82, 0x41, 0x35, 0x2f, 0x77, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2d, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f,
	0x64, 0x65, 0x73, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x8f, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xc7, 0x8a,
	0x90, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x37, 0x82, 0x41, 0x34, 0x2f, 0x77, 0x61, 0x76, 0x65, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2f, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x83, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x79, 0x0a, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xb8, 0x85,
	0xf0, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x42, 0x82,
	0x41, 0x3f, 0x2f, 0x77, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2d, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x64, 0x65, 0x73, 0x74,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x6e, 0x61, 0x6d,
	0x65, 0x52, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x82, 0x01, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x79, 0x0a, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0xad, 0xa4, 0xd1, 0xa8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f, 0x77, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x6f, 0x72,
	0x74, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x1a, 0xc8, 0x04, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x98, 0x01, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x9b, 0xa9, 0xe2, 0xe8, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x40, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x57, 0x61,
	0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x3a, 0x82, 0x41, 0x37, 0x2f, 0x77, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2d,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x93, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x9c, 0xe5, 0x85, 0x54, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f,
	0x77, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x86, 0x01, 0x0a,
	0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x7c, 0x0a, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0xd9, 0xe6, 0x82, 0xad, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x77, 0x61, 0x76, 0x65, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2f, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x70, 0x6f, 0x72,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x83, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x7a, 0x0a, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x8a, 0xf8, 0xd9,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x43, 0x82, 0x41,
	0x40, 0x2f, 0x77, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2d, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x6e, 0x61, 0x6d,
	0x65, 0x52, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0xce, 0x10, 0x0a, 0x14,
	0x53, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x12, 0xd0, 0x01, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xa5, 0x8e, 0xa2, 0x77, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x57,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x57, 0x61, 0x76, 0x65,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x42, 0x50, 0x82, 0x41, 0x4d, 0x2f, 0x77, 0x61, 0x76,
	0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2f, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x2d, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xbc, 0x0b, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xcf, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0xea, 0xc8, 0xd6, 0x53, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x2e, 0x53, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x57, 0x82, 0x41, 0x54, 0x2f, 0x77,
	0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d,
	0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xcb, 0x01, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x87, 0xe7, 0x9f, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5a, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x57, 0x61, 0x76, 0x65, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x56, 0x82, 0x41, 0x53, 0x2f, 0x77,
	0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d,
	0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x86, 0x04, 0x0a, 0x06, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0xa8, 0x01, 0x0a, 0x0f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x66, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0xe5, 0xa0, 0xe0, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x67, 0x82, 0x41, 0x64, 0x2f, 0x77, 0x61, 0x76, 0x65, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2f, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x2d, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6c,
	0x6f, 0x77, 0x65, 0x72, 0x2d, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0e,
	0x6c, 0x6f, 0x77, 0x65, 0x72, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0xa5,
	0x01, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18,
	0xc6, 0xcc, 0xdc, 0x8f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x64, 0x82, 0x41, 0x61, 0x2f, 0x77, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x2d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0xa8, 0x01, 0x0a, 0x0f, 0x75, 0x70, 0x70, 0x65, 0x72,
	0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0xa2, 0x95, 0x88, 0x39, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x67, 0x82, 0x41, 0x64, 0x2f, 0x77, 0x61,
	0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2f,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x2d,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x2d, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x52, 0x0e, 0x75, 0x70, 0x70, 0x65, 0x72, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x1a, 0x82, 0x04, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xa7, 0x01, 0x0a, 0x0f,
	0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0xb4, 0x8e, 0xb6, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x66, 0x82,
	0x41, 0x63, 0x2f, 0x77, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2d, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x72, 0x75, 0x6d, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x2f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x66, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0e, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x46, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0xa3, 0x01, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0xad, 0xfb, 0xd0, 0x7b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x63, 0x82, 0x41, 0x60, 0x2f, 0x77,
	0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d,
	0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x0b,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0xa8, 0x01, 0x0a, 0x0f,
	0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x83, 0xc5, 0xb0, 0xd9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x66,
	0x82, 0x41, 0x63, 0x2f, 0x77, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2d, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2d, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x72, 0x75, 0x6d, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x2f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x2d, 0x66, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0e, 0x75, 0x70, 0x70, 0x65, 0x72, 0x46, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x1a, 0xa3, 0x03, 0x0a, 0x0f, 0x44, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x89, 0x01, 0x0a, 0x0f, 0x6c,
	0x6f, 0x77, 0x65, 0x72, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x60, 0x82, 0x41, 0x5d, 0x2f, 0x77, 0x61, 0x76, 0x65, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2f, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x2d, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x2d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x66, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0e, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x46, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x89, 0x01, 0x0a, 0x0f, 0x75, 0x70, 0x70, 0x65, 0x72,
	0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x60, 0x82, 0x41, 0x5d, 0x2f, 0x77, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2d, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x2d, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x52, 0x0e, 0x75, 0x70, 0x70, 0x65, 0x72, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x78, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x70, 0x65,
	0x63, 0x74, 0x72, 0x75, 0x6d, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xcb, 0x0f, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x9c, 0x01, 0x0a, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0xb3, 0xd6, 0xe1, 0x98, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x77, 0x61, 0x76,
	0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2f, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0xa7, 0x01, 0x0a, 0x10, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0xdc, 0xbc, 0xab, 0xf4, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x57, 0x61, 0x76, 0x65,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x41, 0x53, 0x45, 0x43,
	0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x4d, 0x4f, 0x44, 0x45, 0x42, 0x43, 0x82, 0x41, 0x40, 0x2f,
	0x77, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61,
	0x73, 0x65, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x52,
	0x0e, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x9f, 0x01, 0x0a, 0x17, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0xde, 0xb7, 0x87, 0x3f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4a,
	0x82, 0x41, 0x47, 0x2f, 0x77, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2d, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2d, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x61, 0x73, 0x65, 0x2d, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x15, 0x61, 0x73, 0x65, 0x49,
	0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x12, 0xa4, 0x01, 0x0a, 0x0a, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0xb7, 0xb6, 0xf0, 0xd7, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x3d,
	0x82, 0x41, 0x3a, 0x2f, 0x77, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2d, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2d, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x61, 0x73, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x61,
	0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0xc6, 0x01, 0x0a, 0x18, 0x61, 0x74, 0x74,
	0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0xbf, 0xa3, 0xf3, 0x65, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x41, 0x54, 0x54, 0x45, 0x4e, 0x55, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x4d, 0x4f, 0x44, 0x45, 0x42, 0x4b, 0x82, 0x41,
	0x48, 0x2f, 0x77, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2d, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x52, 0x16, 0x61, 0x74, 0x74, 0x65, 0x6e,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x66, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0xa5, 0xbd, 0xe8, 0x69, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x38, 0x82, 0x41, 0x35, 0x2f, 0x77, 0x61,
	0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2f,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x83, 0x01, 0x0a, 0x0f, 0x6c, 0x6f,
	0x77, 0x65, 0x72, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0xbf, 0xbb,
	0xd9, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x42, 0x82, 0x41, 0x3f,
	0x2f, 0x77, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2d, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x6c, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52,
	0x0e, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x66, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x96, 0xfa, 0xe0, 0x89, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x37, 0x82, 0x41, 0x34, 0x2f, 0x77, 0x61,
	0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2f,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x61, 0x6d,
	0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0xa8, 0x01, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x8a, 0xd1, 0x99, 0xfb, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x43, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x57,
	0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x77, 0x61, 0x76, 0x65,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2f, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x2d,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x7e, 0x0a, 0x0d, 0x73, 0x75, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x18, 0xe2, 0x89, 0xeb, 0xc4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x77, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2d,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x2d, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x0c, 0x73, 0x75, 0x70, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x12, 0x92, 0x01, 0x0a, 0x14, 0x73, 0x75, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x8b, 0xa8, 0x84, 0xd1,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x47, 0x82, 0x41, 0x44, 0x2f,
	0x77, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x52, 0x12, 0x73, 0x75, 0x70, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x84, 0x01, 0x0a, 0x0f, 0x75, 0x70, 0x70, 0x65,
	0x72, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0xa4, 0xd1, 0xc8, 0xc9,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f,
	0x77, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x75,
	0x70, 0x70, 0x65, 0x72, 0x2d, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0e,
	0x75, 0x70, 0x70, 0x65, 0x72, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x6e,
	0x0a, 0x09, 0x41, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x41,
	0x53, 0x45, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00,
	0x12, 0x21, 0x0a, 0x11, 0x41, 0x53, 0x45, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x52,
	0x45, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x50, 0x52, 0x45, 0x53,
	0x45, 0x4e, 0x54, 0x12, 0x29, 0x0a, 0x15, 0x41, 0x53, 0x45, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x1a, 0x0e,
	0x82, 0x41, 0x0b, 0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x22, 0x5a,
	0x0a, 0x0a, 0x4f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x10,
	0x4f, 0x50, 0x45, 0x52, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54,
	0x10, 0x00, 0x12, 0x18, 0x0a, 0x0d, 0x4f, 0x50, 0x45, 0x52, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x55, 0x50, 0x10, 0x01, 0x1a, 0x05, 0x82, 0x41, 0x02, 0x55, 0x50, 0x12, 0x1c, 0x0a, 0x0f,
	0x4f, 0x50, 0x45, 0x52, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10,
	0x02, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x44, 0x4f, 0x57, 0x4e, 0x1a, 0xa4, 0x01, 0x0a, 0x0a, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4b, 0x65, 0x79, 0x12, 0x48, 0x0a, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x32, 0x82, 0x41, 0x2f, 0x2f, 0x77, 0x61,
	0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2f,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x4c, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x1a, 0xe6, 0x1a, 0x0a, 0x19, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x70, 0x65, 0x63, 0x74, 0x72,
	0x75, 0x6d, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12,
	0x8e, 0x01, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0xf1, 0x92, 0xb8, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x57,
	0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x53, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x4b, 0x65,
	0x79, 0x42, 0x37, 0x82, 0x41, 0x34, 0x2f, 0x77, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x1a, 0x88, 0x18, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x9d, 0x01, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x96, 0xc7, 0xb5, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x57, 0x61, 0x76, 0x65, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x53, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x77, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xd9, 0x01, 0x0a, 0x16, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x18, 0xf5, 0x85, 0x93, 0x50, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x57, 0x61, 0x76, 0x65, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x53, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x74,
	0x72, 0x75, 0x6d, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42,
	0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x77, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2d,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x72, 0x75, 0x6d, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75,
	0x6d, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52,
	0x14, 0x73, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x9a, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0xc3, 0x98, 0xcb, 0xa5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x70, 0x65, 0x63,
	0x74, 0x72, 0x75, 0x6d, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x3d, 0x82, 0x41,
	0x3a, 0x2f, 0x77, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2d, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x73, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75,
	0x6d, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x1a, 0x7b, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x71, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0xfc, 0xd0, 0x89, 0x5c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x43, 0x82, 0x41, 0x40, 0x2f, 0x77, 0x61, 0x76, 0x65, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2f, 0x70, 0x6f, 0x72, 0x74,
	0x2d, 0x73, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a,
	0xee, 0x11, 0x0a, 0x14, 0x53, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0xe5, 0x01, 0x0a, 0x0c, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xd6, 0xdb, 0xb8, 0x99, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x60, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x2e, 0x53, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x42, 0x5b, 0x82, 0x41, 0x58, 0x2f, 0x77, 0x61, 0x76, 0x65, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2f, 0x70, 0x6f, 0x72,
	0x74, 0x2d, 0x73, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x2d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0xa7, 0x0c, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0xe3, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xb7, 0xad, 0x8a,
	0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x64, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x62, 0x82, 0x41, 0x5f,
	0x2f, 0x77, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2d, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x73, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d,
	0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f,
	0x70, 0x6f, 0x72, 0x74, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x2d, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x64, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xe0, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0xe8, 0xd1, 0x83, 0xf9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x63, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x70,
	0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75,
	0x6d, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x44, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x61, 0x82, 0x41, 0x5e, 0x2f, 0x77, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x72, 0x75, 0x6d, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x72,
	0x75, 0x6d, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x2f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xa7, 0x04, 0x0a, 0x06, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xb3, 0x01, 0x0a, 0x0f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f,
	0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0xa4, 0x97, 0x92, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x72, 0x82, 0x41, 0x6f, 0x2f, 0x77, 0x61, 0x76,
	0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2f, 0x70,
	0x6f, 0x72, 0x74, 0x2d, 0x73, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x2d, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x70, 0x6f, 0x72, 0x74,
	0x2f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6c, 0x6f, 0x77, 0x65,
	0x72, 0x2d, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0e, 0x6c, 0x6f, 0x77,
	0x65, 0x72, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0xaf, 0x01, 0x0a, 0x0c,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0xfd, 0xd3, 0xcc,
	0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x6f, 0x82, 0x41, 0x6c, 0x2f, 0x77, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2d,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x72, 0x75, 0x6d, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75,
	0x6d, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2f,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0xb4, 0x01,
	0x0a, 0x0f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0xf3, 0x88, 0xc6, 0x8a, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x72, 0x82, 0x41, 0x6f, 0x2f, 0x77, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x72, 0x75, 0x6d, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x72,
	0x75, 0x6d, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x2f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x2d, 0x66, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x52, 0x0e, 0x75, 0x70, 0x70, 0x65, 0x72, 0x46, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x1a, 0xa3, 0x04, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xb2,
	0x01, 0x0a, 0x0f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0xfb, 0x8a, 0xbf, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x71, 0x82, 0x41, 0x6e, 0x2f, 0x77, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x72, 0x75, 0x6d, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x72,
	0x75, 0x6d, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x2f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x52, 0x0e, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0xae, 0x01, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x18, 0x80, 0x93, 0xd4, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6e, 0x82, 0x41, 0x6b, 0x2f, 0x77, 0x61, 0x76,
	0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2f, 0x70,
	0x6f, 0x72, 0x74, 0x2d, 0x73, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x2d, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x70, 0x6f, 0x72, 0x74,
	0x2f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x12, 0xb3, 0x01, 0x0a, 0x0f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x66,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0xa0, 0x84, 0x8b, 0xd3, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x71, 0x82, 0x41, 0x6e, 0x2f, 0x77, 0x61, 0x76,
	0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2f, 0x70,
	0x6f, 0x72, 0x74, 0x2d, 0x73, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x2d, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x70, 0x6f, 0x72, 0x74,
	0x2f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x75, 0x70, 0x70, 0x65, 0x72,
	0x2d, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0e, 0x75, 0x70, 0x70, 0x65,
	0x72, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x1a, 0xc3, 0x03, 0x0a, 0x0f, 0x44,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x94,
	0x01, 0x0a, 0x0f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x6b, 0x82, 0x41, 0x68, 0x2f, 0x77, 0x61,
	0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2f,
	0x70, 0x6f, 0x72, 0x74, 0x2d, 0x73, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x2d, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x70, 0x6f, 0x72,
	0x74, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x2d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x66, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0e, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x46, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x94, 0x01, 0x0a, 0x0f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f,
	0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x6b, 0x82, 0x41, 0x68, 0x2f, 0x77, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2d,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x72, 0x75, 0x6d, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75,
	0x6d, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2f,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x70, 0x70,
	0x65, 0x72, 0x2d, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0e, 0x75, 0x70,
	0x70, 0x65, 0x72, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x81, 0x01, 0x0a,
	0x0c, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x2e, 0x53, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x79, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x70, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0xd3, 0xbb, 0xd2, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x77, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0xac, 0x01, 0x0a, 0x07,
	0x50, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x50, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3c, 0x82, 0x41, 0x39, 0x2f, 0x77, 0x61, 0x76, 0x65, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2f, 0x70, 0x6f, 0x72,
	0x74, 0x2d, 0x73, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x2d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x6e,
	0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4f, 0x0a, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x70, 0x65, 0x63, 0x74, 0x72,
	0x75, 0x6d, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x17, 0x0a, 0x15, 0x63, 0x6f,
	0x6d, 0x2e, 0x6e, 0x6f, 0x63, 0x73, 0x79, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_openconfig_wavelength_router_proto_rawDescOnce sync.Once
	file_openconfig_wavelength_router_proto_rawDescData = file_openconfig_wavelength_router_proto_rawDesc
)

func file_openconfig_wavelength_router_proto_rawDescGZIP() []byte {
	file_openconfig_wavelength_router_proto_rawDescOnce.Do(func() {
		file_openconfig_wavelength_router_proto_rawDescData = protoimpl.X.CompressGZIP(file_openconfig_wavelength_router_proto_rawDescData)
	})
	return file_openconfig_wavelength_router_proto_rawDescData
}

var file_openconfig_wavelength_router_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_openconfig_wavelength_router_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_openconfig_wavelength_router_proto_goTypes = []interface{}{
	(WavelengthRouter_MediaChannels_Channel_State_AseStatus)(0),                                      // 0: openconfig.WavelengthRouter.MediaChannels.Channel.State.AseStatus
	(WavelengthRouter_MediaChannels_Channel_State_OperStatus)(0),                                     // 1: openconfig.WavelengthRouter.MediaChannels.Channel.State.OperStatus
	(*WavelengthRouter)(nil),                                                                         // 2: openconfig.WavelengthRouter
	(*WavelengthRouter_MediaChannels)(nil),                                                           // 3: openconfig.WavelengthRouter.MediaChannels
	(*WavelengthRouter_PortSpectrumPowerProfiles)(nil),                                               // 4: openconfig.WavelengthRouter.PortSpectrumPowerProfiles
	(*WavelengthRouter_MediaChannels_Channel)(nil),                                                   // 5: openconfig.WavelengthRouter.MediaChannels.Channel
	(*WavelengthRouter_MediaChannels_ChannelKey)(nil),                                                // 6: openconfig.WavelengthRouter.MediaChannels.ChannelKey
	(*WavelengthRouter_MediaChannels_Channel_Config)(nil),                                            // 7: openconfig.WavelengthRouter.MediaChannels.Channel.Config
	(*WavelengthRouter_MediaChannels_Channel_Dest)(nil),                                              // 8: openconfig.WavelengthRouter.MediaChannels.Channel.Dest
	(*WavelengthRouter_MediaChannels_Channel_Source)(nil),                                            // 9: openconfig.WavelengthRouter.MediaChannels.Channel.Source
	(*WavelengthRouter_MediaChannels_Channel_SpectrumPowerProfile)(nil),                              // 10: openconfig.WavelengthRouter.MediaChannels.Channel.SpectrumPowerProfile
	(*WavelengthRouter_MediaChannels_Channel_State)(nil),                                             // 11: openconfig.WavelengthRouter.MediaChannels.Channel.State
	(*WavelengthRouter_MediaChannels_Channel_Dest_Config)(nil),                                       // 12: openconfig.WavelengthRouter.MediaChannels.Channel.Dest.Config
	(*WavelengthRouter_MediaChannels_Channel_Dest_State)(nil),                                        // 13: openconfig.WavelengthRouter.MediaChannels.Channel.Dest.State
	(*WavelengthRouter_MediaChannels_Channel_Source_Config)(nil),                                     // 14: openconfig.WavelengthRouter.MediaChannels.Channel.Source.Config
	(*WavelengthRouter_MediaChannels_Channel_Source_State)(nil),                                      // 15: openconfig.WavelengthRouter.MediaChannels.Channel.Source.State
	(*WavelengthRouter_MediaChannels_Channel_SpectrumPowerProfile_Distribution)(nil),                 // 16: openconfig.WavelengthRouter.MediaChannels.Channel.SpectrumPowerProfile.Distribution
	(*WavelengthRouter_MediaChannels_Channel_SpectrumPowerProfile_DistributionKey)(nil),              // 17: openconfig.WavelengthRouter.MediaChannels.Channel.SpectrumPowerProfile.DistributionKey
	(*WavelengthRouter_MediaChannels_Channel_SpectrumPowerProfile_Distribution_Config)(nil),          // 18: openconfig.WavelengthRouter.MediaChannels.Channel.SpectrumPowerProfile.Distribution.Config
	(*WavelengthRouter_MediaChannels_Channel_SpectrumPowerProfile_Distribution_State)(nil),           // 19: openconfig.WavelengthRouter.MediaChannels.Channel.SpectrumPowerProfile.Distribution.State
	(*WavelengthRouter_PortSpectrumPowerProfiles_Port)(nil),                                          // 20: openconfig.WavelengthRouter.PortSpectrumPowerProfiles.Port
	(*WavelengthRouter_PortSpectrumPowerProfiles_PortKey)(nil),                                       // 21: openconfig.WavelengthRouter.PortSpectrumPowerProfiles.PortKey
	(*WavelengthRouter_PortSpectrumPowerProfiles_Port_Config)(nil),                                   // 22: openconfig.WavelengthRouter.PortSpectrumPowerProfiles.Port.Config
	(*WavelengthRouter_PortSpectrumPowerProfiles_Port_SpectrumPowerProfile)(nil),                     // 23: openconfig.WavelengthRouter.PortSpectrumPowerProfiles.Port.SpectrumPowerProfile
	(*WavelengthRouter_PortSpectrumPowerProfiles_Port_State)(nil),                                    // 24: openconfig.WavelengthRouter.PortSpectrumPowerProfiles.Port.State
	(*WavelengthRouter_PortSpectrumPowerProfiles_Port_SpectrumPowerProfile_Distribution)(nil),        // 25: openconfig.WavelengthRouter.PortSpectrumPowerProfiles.Port.SpectrumPowerProfile.Distribution
	(*WavelengthRouter_PortSpectrumPowerProfiles_Port_SpectrumPowerProfile_DistributionKey)(nil),     // 26: openconfig.WavelengthRouter.PortSpectrumPowerProfiles.Port.SpectrumPowerProfile.DistributionKey
	(*WavelengthRouter_PortSpectrumPowerProfiles_Port_SpectrumPowerProfile_Distribution_Config)(nil), // 27: openconfig.WavelengthRouter.PortSpectrumPowerProfiles.Port.SpectrumPowerProfile.Distribution.Config
	(*WavelengthRouter_PortSpectrumPowerProfiles_Port_SpectrumPowerProfile_Distribution_State)(nil),  // 28: openconfig.WavelengthRouter.PortSpectrumPowerProfiles.Port.SpectrumPowerProfile.Distribution.State
	(OpenconfigWavelengthRouterAdminStateType)(0),                                                    // 29: openconfig.OpenconfigWavelengthRouterAdminStateType
	(OpenconfigWavelengthRouterASECONTROLMODE)(0),                                                    // 30: openconfig.OpenconfigWavelengthRouterASECONTROLMODE
	(*ywrapper.Decimal64Value)(nil),                                                                  // 31: ywrapper.Decimal64Value
	(OpenconfigWavelengthRouterATTENUATIONCONTROLMODE)(0),                                            // 32: openconfig.OpenconfigWavelengthRouterATTENUATIONCONTROLMODE
	(*ywrapper.UintValue)(nil),                                                                       // 33: ywrapper.UintValue
	(*ywrapper.StringValue)(nil),                                                                     // 34: ywrapper.StringValue
	(*ywrapper.BoolValue)(nil),                                                                       // 35: ywrapper.BoolValue
}
var file_openconfig_wavelength_router_proto_depIdxs = []int32{
	3,  // 0: openconfig.WavelengthRouter.media_channels:type_name -> openconfig.WavelengthRouter.MediaChannels
	4,  // 1: openconfig.WavelengthRouter.port_spectrum_power_profiles:type_name -> openconfig.WavelengthRouter.PortSpectrumPowerProfiles
	6,  // 2: openconfig.WavelengthRouter.MediaChannels.channel:type_name -> openconfig.WavelengthRouter.MediaChannels.ChannelKey
	21, // 3: openconfig.WavelengthRouter.PortSpectrumPowerProfiles.port:type_name -> openconfig.WavelengthRouter.PortSpectrumPowerProfiles.PortKey
	7,  // 4: openconfig.WavelengthRouter.MediaChannels.Channel.config:type_name -> openconfig.WavelengthRouter.MediaChannels.Channel.Config
	8,  // 5: openconfig.WavelengthRouter.MediaChannels.Channel.dest:type_name -> openconfig.WavelengthRouter.MediaChannels.Channel.Dest
	9,  // 6: openconfig.WavelengthRouter.MediaChannels.Channel.source:type_name -> openconfig.WavelengthRouter.MediaChannels.Channel.Source
	10, // 7: openconfig.WavelengthRouter.MediaChannels.Channel.spectrum_power_profile:type_name -> openconfig.WavelengthRouter.MediaChannels.Channel.SpectrumPowerProfile
	11, // 8: openconfig.WavelengthRouter.MediaChannels.Channel.state:type_name -> openconfig.WavelengthRouter.MediaChannels.Channel.State
	5,  // 9: openconfig.WavelengthRouter.MediaChannels.ChannelKey.channel:type_name -> openconfig.WavelengthRouter.MediaChannels.Channel
	29, // 10: openconfig.WavelengthRouter.MediaChannels.Channel.Config.admin_status:type_name -> openconfig.OpenconfigWavelengthRouterAdminStateType
	30, // 11: openconfig.WavelengthRouter.MediaChannels.Channel.Config.ase_control_mode:type_name -> openconfig.OpenconfigWavelengthRouterASECONTROLMODE
	31, // 12: openconfig.WavelengthRouter.MediaChannels.Channel.Config.ase_injection_threshold:type_name -> ywrapper.Decimal64Value
	32, // 13: openconfig.WavelengthRouter.MediaChannels.Channel.Config.attenuation_control_mode:type_name -> openconfig.OpenconfigWavelengthRouterATTENUATIONCONTROLMODE
	33, // 14: openconfig.WavelengthRouter.MediaChannels.Channel.Config.index:type_name -> ywrapper.UintValue
	33, // 15: openconfig.WavelengthRouter.MediaChannels.Channel.Config.lower_frequency:type_name -> ywrapper.UintValue
	34, // 16: openconfig.WavelengthRouter.MediaChannels.Channel.Config.name:type_name -> ywrapper.StringValue
	35, // 17: openconfig.WavelengthRouter.MediaChannels.Channel.Config.super_channel:type_name -> ywrapper.BoolValue
	33, // 18: openconfig.WavelengthRouter.MediaChannels.Channel.Config.super_channel_parent:type_name -> ywrapper.UintValue
	33, // 19: openconfig.WavelengthRouter.MediaChannels.Channel.Config.upper_frequency:type_name -> ywrapper.UintValue
	12, // 20: openconfig.WavelengthRouter.MediaChannels.Channel.Dest.config:type_name -> openconfig.WavelengthRouter.MediaChannels.Channel.Dest.Config
	13, // 21: openconfig.WavelengthRouter.MediaChannels.Channel.Dest.state:type_name -> openconfig.WavelengthRouter.MediaChannels.Channel.Dest.State
	14, // 22: openconfig.WavelengthRouter.MediaChannels.Channel.Source.config:type_name -> openconfig.WavelengthRouter.MediaChannels.Channel.Source.Config
	15, // 23: openconfig.WavelengthRouter.MediaChannels.Channel.Source.state:type_name -> openconfig.WavelengthRouter.MediaChannels.Channel.Source.State
	17, // 24: openconfig.WavelengthRouter.MediaChannels.Channel.SpectrumPowerProfile.distribution:type_name -> openconfig.WavelengthRouter.MediaChannels.Channel.SpectrumPowerProfile.DistributionKey
	29, // 25: openconfig.WavelengthRouter.MediaChannels.Channel.State.admin_status:type_name -> openconfig.OpenconfigWavelengthRouterAdminStateType
	30, // 26: openconfig.WavelengthRouter.MediaChannels.Channel.State.ase_control_mode:type_name -> openconfig.OpenconfigWavelengthRouterASECONTROLMODE
	31, // 27: openconfig.WavelengthRouter.MediaChannels.Channel.State.ase_injection_threshold:type_name -> ywrapper.Decimal64Value
	0,  // 28: openconfig.WavelengthRouter.MediaChannels.Channel.State.ase_status:type_name -> openconfig.WavelengthRouter.MediaChannels.Channel.State.AseStatus
	32, // 29: openconfig.WavelengthRouter.MediaChannels.Channel.State.attenuation_control_mode:type_name -> openconfig.OpenconfigWavelengthRouterATTENUATIONCONTROLMODE
	33, // 30: openconfig.WavelengthRouter.MediaChannels.Channel.State.index:type_name -> ywrapper.UintValue
	33, // 31: openconfig.WavelengthRouter.MediaChannels.Channel.State.lower_frequency:type_name -> ywrapper.UintValue
	34, // 32: openconfig.WavelengthRouter.MediaChannels.Channel.State.name:type_name -> ywrapper.StringValue
	1,  // 33: openconfig.WavelengthRouter.MediaChannels.Channel.State.oper_status:type_name -> openconfig.WavelengthRouter.MediaChannels.Channel.State.OperStatus
	35, // 34: openconfig.WavelengthRouter.MediaChannels.Channel.State.super_channel:type_name -> ywrapper.BoolValue
	33, // 35: openconfig.WavelengthRouter.MediaChannels.Channel.State.super_channel_parent:type_name -> ywrapper.UintValue
	33, // 36: openconfig.WavelengthRouter.MediaChannels.Channel.State.upper_frequency:type_name -> ywrapper.UintValue
	34, // 37: openconfig.WavelengthRouter.MediaChannels.Channel.Dest.Config.port_name:type_name -> ywrapper.StringValue
	34, // 38: openconfig.WavelengthRouter.MediaChannels.Channel.Dest.State.port_name:type_name -> ywrapper.StringValue
	34, // 39: openconfig.WavelengthRouter.MediaChannels.Channel.Source.Config.port_name:type_name -> ywrapper.StringValue
	34, // 40: openconfig.WavelengthRouter.MediaChannels.Channel.Source.State.port_name:type_name -> ywrapper.StringValue
	18, // 41: openconfig.WavelengthRouter.MediaChannels.Channel.SpectrumPowerProfile.Distribution.config:type_name -> openconfig.WavelengthRouter.MediaChannels.Channel.SpectrumPowerProfile.Distribution.Config
	19, // 42: openconfig.WavelengthRouter.MediaChannels.Channel.SpectrumPowerProfile.Distribution.state:type_name -> openconfig.WavelengthRouter.MediaChannels.Channel.SpectrumPowerProfile.Distribution.State
	16, // 43: openconfig.WavelengthRouter.MediaChannels.Channel.SpectrumPowerProfile.DistributionKey.distribution:type_name -> openconfig.WavelengthRouter.MediaChannels.Channel.SpectrumPowerProfile.Distribution
	33, // 44: openconfig.WavelengthRouter.MediaChannels.Channel.SpectrumPowerProfile.Distribution.Config.lower_frequency:type_name -> ywrapper.UintValue
	31, // 45: openconfig.WavelengthRouter.MediaChannels.Channel.SpectrumPowerProfile.Distribution.Config.target_power:type_name -> ywrapper.Decimal64Value
	33, // 46: openconfig.WavelengthRouter.MediaChannels.Channel.SpectrumPowerProfile.Distribution.Config.upper_frequency:type_name -> ywrapper.UintValue
	33, // 47: openconfig.WavelengthRouter.MediaChannels.Channel.SpectrumPowerProfile.Distribution.State.lower_frequency:type_name -> ywrapper.UintValue
	31, // 48: openconfig.WavelengthRouter.MediaChannels.Channel.SpectrumPowerProfile.Distribution.State.target_power:type_name -> ywrapper.Decimal64Value
	33, // 49: openconfig.WavelengthRouter.MediaChannels.Channel.SpectrumPowerProfile.Distribution.State.upper_frequency:type_name -> ywrapper.UintValue
	22, // 50: openconfig.WavelengthRouter.PortSpectrumPowerProfiles.Port.config:type_name -> openconfig.WavelengthRouter.PortSpectrumPowerProfiles.Port.Config
	23, // 51: openconfig.WavelengthRouter.PortSpectrumPowerProfiles.Port.spectrum_power_profile:type_name -> openconfig.WavelengthRouter.PortSpectrumPowerProfiles.Port.SpectrumPowerProfile
	24, // 52: openconfig.WavelengthRouter.PortSpectrumPowerProfiles.Port.state:type_name -> openconfig.WavelengthRouter.PortSpectrumPowerProfiles.Port.State
	20, // 53: openconfig.WavelengthRouter.PortSpectrumPowerProfiles.PortKey.port:type_name -> openconfig.WavelengthRouter.PortSpectrumPowerProfiles.Port
	34, // 54: openconfig.WavelengthRouter.PortSpectrumPowerProfiles.Port.Config.name:type_name -> ywrapper.StringValue
	26, // 55: openconfig.WavelengthRouter.PortSpectrumPowerProfiles.Port.SpectrumPowerProfile.distribution:type_name -> openconfig.WavelengthRouter.PortSpectrumPowerProfiles.Port.SpectrumPowerProfile.DistributionKey
	34, // 56: openconfig.WavelengthRouter.PortSpectrumPowerProfiles.Port.State.name:type_name -> ywrapper.StringValue
	27, // 57: openconfig.WavelengthRouter.PortSpectrumPowerProfiles.Port.SpectrumPowerProfile.Distribution.config:type_name -> openconfig.WavelengthRouter.PortSpectrumPowerProfiles.Port.SpectrumPowerProfile.Distribution.Config
	28, // 58: openconfig.WavelengthRouter.PortSpectrumPowerProfiles.Port.SpectrumPowerProfile.Distribution.state:type_name -> openconfig.WavelengthRouter.PortSpectrumPowerProfiles.Port.SpectrumPowerProfile.Distribution.State
	25, // 59: openconfig.WavelengthRouter.PortSpectrumPowerProfiles.Port.SpectrumPowerProfile.DistributionKey.distribution:type_name -> openconfig.WavelengthRouter.PortSpectrumPowerProfiles.Port.SpectrumPowerProfile.Distribution
	33, // 60: openconfig.WavelengthRouter.PortSpectrumPowerProfiles.Port.SpectrumPowerProfile.Distribution.Config.lower_frequency:type_name -> ywrapper.UintValue
	31, // 61: openconfig.WavelengthRouter.PortSpectrumPowerProfiles.Port.SpectrumPowerProfile.Distribution.Config.target_power:type_name -> ywrapper.Decimal64Value
	33, // 62: openconfig.WavelengthRouter.PortSpectrumPowerProfiles.Port.SpectrumPowerProfile.Distribution.Config.upper_frequency:type_name -> ywrapper.UintValue
	33, // 63: openconfig.WavelengthRouter.PortSpectrumPowerProfiles.Port.SpectrumPowerProfile.Distribution.State.lower_frequency:type_name -> ywrapper.UintValue
	31, // 64: openconfig.WavelengthRouter.PortSpectrumPowerProfiles.Port.SpectrumPowerProfile.Distribution.State.target_power:type_name -> ywrapper.Decimal64Value
	33, // 65: openconfig.WavelengthRouter.PortSpectrumPowerProfiles.Port.SpectrumPowerProfile.Distribution.State.upper_frequency:type_name -> ywrapper.UintValue
	66, // [66:66] is the sub-list for method output_type
	66, // [66:66] is the sub-list for method input_type
	66, // [66:66] is the sub-list for extension type_name
	66, // [66:66] is the sub-list for extension extendee
	0,  // [0:66] is the sub-list for field type_name
}

func init() { file_openconfig_wavelength_router_proto_init() }
func file_openconfig_wavelength_router_proto_init() {
	if File_openconfig_wavelength_router_proto != nil {
		return
	}
	file_openconfig_enums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_openconfig_wavelength_router_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WavelengthRouter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wavelength_router_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WavelengthRouter_MediaChannels); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wavelength_router_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WavelengthRouter_PortSpectrumPowerProfiles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wavelength_router_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WavelengthRouter_MediaChannels_Channel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wavelength_router_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WavelengthRouter_MediaChannels_ChannelKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wavelength_router_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WavelengthRouter_MediaChannels_Channel_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wavelength_router_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WavelengthRouter_MediaChannels_Channel_Dest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wavelength_router_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WavelengthRouter_MediaChannels_Channel_Source); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wavelength_router_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WavelengthRouter_MediaChannels_Channel_SpectrumPowerProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wavelength_router_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WavelengthRouter_MediaChannels_Channel_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wavelength_router_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WavelengthRouter_MediaChannels_Channel_Dest_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wavelength_router_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WavelengthRouter_MediaChannels_Channel_Dest_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wavelength_router_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WavelengthRouter_MediaChannels_Channel_Source_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wavelength_router_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WavelengthRouter_MediaChannels_Channel_Source_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wavelength_router_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WavelengthRouter_MediaChannels_Channel_SpectrumPowerProfile_Distribution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wavelength_router_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WavelengthRouter_MediaChannels_Channel_SpectrumPowerProfile_DistributionKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wavelength_router_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WavelengthRouter_MediaChannels_Channel_SpectrumPowerProfile_Distribution_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wavelength_router_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WavelengthRouter_MediaChannels_Channel_SpectrumPowerProfile_Distribution_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wavelength_router_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WavelengthRouter_PortSpectrumPowerProfiles_Port); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wavelength_router_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WavelengthRouter_PortSpectrumPowerProfiles_PortKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wavelength_router_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WavelengthRouter_PortSpectrumPowerProfiles_Port_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wavelength_router_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WavelengthRouter_PortSpectrumPowerProfiles_Port_SpectrumPowerProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wavelength_router_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WavelengthRouter_PortSpectrumPowerProfiles_Port_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wavelength_router_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WavelengthRouter_PortSpectrumPowerProfiles_Port_SpectrumPowerProfile_Distribution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wavelength_router_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WavelengthRouter_PortSpectrumPowerProfiles_Port_SpectrumPowerProfile_DistributionKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wavelength_router_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WavelengthRouter_PortSpectrumPowerProfiles_Port_SpectrumPowerProfile_Distribution_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wavelength_router_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WavelengthRouter_PortSpectrumPowerProfiles_Port_SpectrumPowerProfile_Distribution_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_openconfig_wavelength_router_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_openconfig_wavelength_router_proto_goTypes,
		DependencyIndexes: file_openconfig_wavelength_router_proto_depIdxs,
		EnumInfos:         file_openconfig_wavelength_router_proto_enumTypes,
		MessageInfos:      file_openconfig_wavelength_router_proto_msgTypes,
	}.Build()
	File_openconfig_wavelength_router_proto = out.File
	file_openconfig_wavelength_router_proto_rawDesc = nil
	file_openconfig_wavelength_router_proto_goTypes = nil
	file_openconfig_wavelength_router_proto_depIdxs = nil
}
