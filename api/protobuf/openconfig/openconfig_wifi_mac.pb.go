// openconfig.openconfig_wifi_mac is generated by proto_generator as a protobuf
// representation of a YANG schema.
//
// Input schema modules:
//  - ../api/yang/public/doc/openconfig-example.yang
//  - ../api/yang/public/third_party/ietf/iana-if-type.yang
//  - ../api/yang/public/third_party/ietf/ietf-interfaces.yang
//  - ../api/yang/public/third_party/ietf/ietf-yang-types.yang
//  - ../api/yang/public/third_party/ietf/ietf-inet-types.yang
//  - ../api/yang/public/release/models/bfd/openconfig-bfd.yang
//  - ../api/yang/public/release/models/vlan/openconfig-vlan.yang
//  - ../api/yang/public/release/models/vlan/openconfig-vlan-types.yang
//  - ../api/yang/public/release/models/wifi/openconfig-access-points.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-mac.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-types.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-phy.yang
//  - ../api/yang/public/release/models/wifi/openconfig-ap-interfaces.yang
//  - ../api/yang/public/release/models/wifi/openconfig-ap-manager.yang
//  - ../api/yang/public/release/models/macsec/openconfig-macsec.yang
//  - ../api/yang/public/release/models/macsec/openconfig-macsec-types.yang
//  - ../api/yang/public/release/models/stp/openconfig-spanning-tree-types.yang
//  - ../api/yang/public/release/models/stp/openconfig-spanning-tree.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-errors.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-peer-group.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-types.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-global.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-neighbor.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common-structure.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-policy.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common-multiprotocol.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-types.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-port.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-fan.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-linecard.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-ext.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-cpu.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-psu.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-transceiver.yang
//  - ../api/yang/public/release/models/multicast/openconfig-pim-types.yang
//  - ../api/yang/public/release/models/multicast/openconfig-igmp-types.yang
//  - ../api/yang/public/release/models/multicast/openconfig-igmp.yang
//  - ../api/yang/public/release/models/multicast/openconfig-pim.yang
//  - ../api/yang/public/release/models/catalog/openconfig-module-catalog.yang
//  - ../api/yang/public/release/models/catalog/openconfig-catalog-types.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-interfaces.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-8021x.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-types.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-aggregate.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-poe.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-tunnel.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ip.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ethernet.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ethernet-ext.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ip-ext.yang
//  - ../api/yang/public/release/models/acl/openconfig-packet-match-types.yang
//  - ../api/yang/public/release/models/acl/openconfig-packet-match.yang
//  - ../api/yang/public/release/models/acl/openconfig-acl.yang
//  - ../api/yang/public/release/models/system/openconfig-license.yang
//  - ../api/yang/public/release/models/system/openconfig-system.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-radius.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa.yang
//  - ../api/yang/public/release/models/system/openconfig-system-management.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-types.yang
//  - ../api/yang/public/release/models/system/openconfig-procmon.yang
//  - ../api/yang/public/release/models/system/openconfig-messages.yang
//  - ../api/yang/public/release/models/system/openconfig-system-terminal.yang
//  - ../api/yang/public/release/models/system/openconfig-system-logging.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-tacacs.yang
//  - ../api/yang/public/release/models/system/openconfig-alarms.yang
//  - ../api/yang/public/release/models/system/openconfig-alarm-types.yang
//  - ../api/yang/public/release/models/policy/openconfig-policy-types.yang
//  - ../api/yang/public/release/models/policy/openconfig-routing-policy.yang
//  - ../api/yang/public/release/models/lacp/openconfig-lacp.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-wavelength-router.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-optical-amplifier.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-protection.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-channel-monitor.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-connectivity.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-optical-attenuator.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-common.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-types.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-terminal-device.yang
//  - ../api/yang/public/release/models/telemetry/openconfig-telemetry-types.yang
//  - ../api/yang/public/release/models/telemetry/openconfig-telemetry.yang
//  - ../api/yang/public/release/models/openflow/openconfig-openflow.yang
//  - ../api/yang/public/release/models/openflow/openconfig-openflow-types.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-tables.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-ext.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-table-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-shared-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-types.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-types.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-elements.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-interfaces.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-srte.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-forwarding-policies.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-interfaces.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-path-groups.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
//  - ../api/yang/public/release/models/relay-agent/openconfig-relay-agent.yang
//  - ../api/yang/public/release/models/lldp/openconfig-lldp.yang
//  - ../api/yang/public/release/models/lldp/openconfig-lldp-types.yang
//  - ../api/yang/public/release/models/openconfig-extensions.yang
//  - ../api/yang/public/release/models/types/openconfig-yang-types.yang
//  - ../api/yang/public/release/models/types/openconfig-inet-types.yang
//  - ../api/yang/public/release/models/types/openconfig-types.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-srte-policy.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-rsvp-sr-ext.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-segment-routing-types.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-segment-routing.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-types.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-igp.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-te.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-rsvp.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-static.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-sr.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-ldp.yang
//  - ../api/yang/public/release/models/probes/openconfig-probes-types.yang
//  - ../api/yang/public/release/models/probes/openconfig-probes.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-lsp.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-lsdb-types.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-policy.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-types.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-routing.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-area.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospf-policy.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-common.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-global.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-area-interface.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-lsdb.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospf-types.yang
//  - ../api/yang/public/release/models/local-routing/openconfig-local-routing.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-l3.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-l2.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-policy.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-types.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-mpls.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-common.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-types.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ipv6.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-pf.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-network-instance.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ipv4.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ethernet.yang

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        (unknown)
// source: openconfig_wifi_mac.proto

package openconfig

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/openconfig/ygot/proto/yext"
	ywrapper "github.com/openconfig/ygot/proto/ywrapper"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode int32

const (
	Ssids_Ssid_Clients_Client_ClientRf_State_CONNECTIONMODE_UNSET Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode = 0
	Ssids_Ssid_Clients_Client_ClientRf_State_CONNECTIONMODE_A     Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode = 1
	Ssids_Ssid_Clients_Client_ClientRf_State_CONNECTIONMODE_B     Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode = 2
	Ssids_Ssid_Clients_Client_ClientRf_State_CONNECTIONMODE_G     Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode = 3
	Ssids_Ssid_Clients_Client_ClientRf_State_CONNECTIONMODE_N     Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode = 4
	Ssids_Ssid_Clients_Client_ClientRf_State_CONNECTIONMODE_AC    Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode = 5
)

// Enum value maps for Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode.
var (
	Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_name = map[int32]string{
		0: "CONNECTIONMODE_UNSET",
		1: "CONNECTIONMODE_A",
		2: "CONNECTIONMODE_B",
		3: "CONNECTIONMODE_G",
		4: "CONNECTIONMODE_N",
		5: "CONNECTIONMODE_AC",
	}
	Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_value = map[string]int32{
		"CONNECTIONMODE_UNSET": 0,
		"CONNECTIONMODE_A":     1,
		"CONNECTIONMODE_B":     2,
		"CONNECTIONMODE_G":     3,
		"CONNECTIONMODE_N":     4,
		"CONNECTIONMODE_AC":    5,
	}
)

func (x Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode) Enum() *Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode {
	p := new(Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode)
	*p = x
	return p
}

func (x Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_wifi_mac_proto_enumTypes[0].Descriptor()
}

func (Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode) Type() protoreflect.EnumType {
	return &file_openconfig_wifi_mac_proto_enumTypes[0]
}

func (x Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode.Descriptor instead.
func (Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_wifi_mac_proto_rawDescGZIP(), []int{0, 0, 2, 0, 2, 0, 0}
}

type Ssids_Ssid_Config_Opmode int32

const (
	Ssids_Ssid_Config_OPMODE_OPEN            Ssids_Ssid_Config_Opmode = 0
	Ssids_Ssid_Config_OPMODE_WPA2_PERSONAL   Ssids_Ssid_Config_Opmode = 2
	Ssids_Ssid_Config_OPMODE_WPA2_ENTERPRISE Ssids_Ssid_Config_Opmode = 3
)

// Enum value maps for Ssids_Ssid_Config_Opmode.
var (
	Ssids_Ssid_Config_Opmode_name = map[int32]string{
		0: "OPMODE_OPEN",
		2: "OPMODE_WPA2_PERSONAL",
		3: "OPMODE_WPA2_ENTERPRISE",
	}
	Ssids_Ssid_Config_Opmode_value = map[string]int32{
		"OPMODE_OPEN":            0,
		"OPMODE_WPA2_PERSONAL":   2,
		"OPMODE_WPA2_ENTERPRISE": 3,
	}
)

func (x Ssids_Ssid_Config_Opmode) Enum() *Ssids_Ssid_Config_Opmode {
	p := new(Ssids_Ssid_Config_Opmode)
	*p = x
	return p
}

func (x Ssids_Ssid_Config_Opmode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ssids_Ssid_Config_Opmode) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_wifi_mac_proto_enumTypes[1].Descriptor()
}

func (Ssids_Ssid_Config_Opmode) Type() protoreflect.EnumType {
	return &file_openconfig_wifi_mac_proto_enumTypes[1]
}

func (x Ssids_Ssid_Config_Opmode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ssids_Ssid_Config_Opmode.Descriptor instead.
func (Ssids_Ssid_Config_Opmode) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_wifi_mac_proto_rawDescGZIP(), []int{0, 0, 3, 0}
}

type Ssids_Ssid_Dot11R_Config_Dot11RMethod int32

const (
	Ssids_Ssid_Dot11R_Config_DOT11RMETHOD_OVA Ssids_Ssid_Dot11R_Config_Dot11RMethod = 0
	Ssids_Ssid_Dot11R_Config_DOT11RMETHOD_ODS Ssids_Ssid_Dot11R_Config_Dot11RMethod = 2
)

// Enum value maps for Ssids_Ssid_Dot11R_Config_Dot11RMethod.
var (
	Ssids_Ssid_Dot11R_Config_Dot11RMethod_name = map[int32]string{
		0: "DOT11RMETHOD_OVA",
		2: "DOT11RMETHOD_ODS",
	}
	Ssids_Ssid_Dot11R_Config_Dot11RMethod_value = map[string]int32{
		"DOT11RMETHOD_OVA": 0,
		"DOT11RMETHOD_ODS": 2,
	}
)

func (x Ssids_Ssid_Dot11R_Config_Dot11RMethod) Enum() *Ssids_Ssid_Dot11R_Config_Dot11RMethod {
	p := new(Ssids_Ssid_Dot11R_Config_Dot11RMethod)
	*p = x
	return p
}

func (x Ssids_Ssid_Dot11R_Config_Dot11RMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ssids_Ssid_Dot11R_Config_Dot11RMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_wifi_mac_proto_enumTypes[2].Descriptor()
}

func (Ssids_Ssid_Dot11R_Config_Dot11RMethod) Type() protoreflect.EnumType {
	return &file_openconfig_wifi_mac_proto_enumTypes[2]
}

func (x Ssids_Ssid_Dot11R_Config_Dot11RMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ssids_Ssid_Dot11R_Config_Dot11RMethod.Descriptor instead.
func (Ssids_Ssid_Dot11R_Config_Dot11RMethod) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_wifi_mac_proto_rawDescGZIP(), []int{0, 0, 4, 0, 0}
}

type Ssids_Ssid_Dot11R_State_Dot11RMethod int32

const (
	Ssids_Ssid_Dot11R_State_DOT11RMETHOD_OVA Ssids_Ssid_Dot11R_State_Dot11RMethod = 0
	Ssids_Ssid_Dot11R_State_DOT11RMETHOD_ODS Ssids_Ssid_Dot11R_State_Dot11RMethod = 2
)

// Enum value maps for Ssids_Ssid_Dot11R_State_Dot11RMethod.
var (
	Ssids_Ssid_Dot11R_State_Dot11RMethod_name = map[int32]string{
		0: "DOT11RMETHOD_OVA",
		2: "DOT11RMETHOD_ODS",
	}
	Ssids_Ssid_Dot11R_State_Dot11RMethod_value = map[string]int32{
		"DOT11RMETHOD_OVA": 0,
		"DOT11RMETHOD_ODS": 2,
	}
)

func (x Ssids_Ssid_Dot11R_State_Dot11RMethod) Enum() *Ssids_Ssid_Dot11R_State_Dot11RMethod {
	p := new(Ssids_Ssid_Dot11R_State_Dot11RMethod)
	*p = x
	return p
}

func (x Ssids_Ssid_Dot11R_State_Dot11RMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ssids_Ssid_Dot11R_State_Dot11RMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_wifi_mac_proto_enumTypes[3].Descriptor()
}

func (Ssids_Ssid_Dot11R_State_Dot11RMethod) Type() protoreflect.EnumType {
	return &file_openconfig_wifi_mac_proto_enumTypes[3]
}

func (x Ssids_Ssid_Dot11R_State_Dot11RMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ssids_Ssid_Dot11R_State_Dot11RMethod.Descriptor instead.
func (Ssids_Ssid_Dot11R_State_Dot11RMethod) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_wifi_mac_proto_rawDescGZIP(), []int{0, 0, 4, 1, 0}
}

type Ssids_Ssid_State_Opmode int32

const (
	Ssids_Ssid_State_OPMODE_OPEN            Ssids_Ssid_State_Opmode = 0
	Ssids_Ssid_State_OPMODE_WPA2_PERSONAL   Ssids_Ssid_State_Opmode = 2
	Ssids_Ssid_State_OPMODE_WPA2_ENTERPRISE Ssids_Ssid_State_Opmode = 3
)

// Enum value maps for Ssids_Ssid_State_Opmode.
var (
	Ssids_Ssid_State_Opmode_name = map[int32]string{
		0: "OPMODE_OPEN",
		2: "OPMODE_WPA2_PERSONAL",
		3: "OPMODE_WPA2_ENTERPRISE",
	}
	Ssids_Ssid_State_Opmode_value = map[string]int32{
		"OPMODE_OPEN":            0,
		"OPMODE_WPA2_PERSONAL":   2,
		"OPMODE_WPA2_ENTERPRISE": 3,
	}
)

func (x Ssids_Ssid_State_Opmode) Enum() *Ssids_Ssid_State_Opmode {
	p := new(Ssids_Ssid_State_Opmode)
	*p = x
	return p
}

func (x Ssids_Ssid_State_Opmode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ssids_Ssid_State_Opmode) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_wifi_mac_proto_enumTypes[4].Descriptor()
}

func (Ssids_Ssid_State_Opmode) Type() protoreflect.EnumType {
	return &file_openconfig_wifi_mac_proto_enumTypes[4]
}

func (x Ssids_Ssid_State_Opmode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ssids_Ssid_State_Opmode.Descriptor instead.
func (Ssids_Ssid_State_Opmode) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_wifi_mac_proto_rawDescGZIP(), []int{0, 0, 7, 0}
}

type Ssids struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ssid []*Ssids_SsidKey `protobuf:"bytes,442132483,rep,name=ssid,proto3" json:"ssid,omitempty"`
}

func (x *Ssids) Reset() {
	*x = Ssids{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wifi_mac_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ssids) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ssids) ProtoMessage() {}

func (x *Ssids) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wifi_mac_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ssids.ProtoReflect.Descriptor instead.
func (*Ssids) Descriptor() ([]byte, []int) {
	return file_openconfig_wifi_mac_proto_rawDescGZIP(), []int{0}
}

func (x *Ssids) GetSsid() []*Ssids_SsidKey {
	if x != nil {
		return x.Ssid
	}
	return nil
}

type Ssids_Ssid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BandSteering *Ssids_Ssid_BandSteering `protobuf:"bytes,475616177,opt,name=band_steering,json=bandSteering,proto3" json:"band_steering,omitempty"`
	Bssids       *Ssids_Ssid_Bssids       `protobuf:"bytes,280533088,opt,name=bssids,proto3" json:"bssids,omitempty"`
	Clients      *Ssids_Ssid_Clients      `protobuf:"bytes,158986082,opt,name=clients,proto3" json:"clients,omitempty"`
	Config       *Ssids_Ssid_Config       `protobuf:"bytes,175369092,opt,name=config,proto3" json:"config,omitempty"`
	Dot11R       *Ssids_Ssid_Dot11R       `protobuf:"bytes,123416265,opt,name=dot11r,proto3" json:"dot11r,omitempty"`
	Dot11V       *Ssids_Ssid_Dot11V       `protobuf:"bytes,123416269,opt,name=dot11v,proto3" json:"dot11v,omitempty"`
	Dot1XTimers  *Ssids_Ssid_Dot1XTimers  `protobuf:"bytes,23265631,opt,name=dot1x_timers,json=dot1xTimers,proto3" json:"dot1x_timers,omitempty"`
	State        *Ssids_Ssid_State        `protobuf:"bytes,247527581,opt,name=state,proto3" json:"state,omitempty"`
	Wmm          *Ssids_Ssid_Wmm          `protobuf:"bytes,470892139,opt,name=wmm,proto3" json:"wmm,omitempty"`
}

func (x *Ssids_Ssid) Reset() {
	*x = Ssids_Ssid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wifi_mac_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ssids_Ssid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ssids_Ssid) ProtoMessage() {}

func (x *Ssids_Ssid) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wifi_mac_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ssids_Ssid.ProtoReflect.Descriptor instead.
func (*Ssids_Ssid) Descriptor() ([]byte, []int) {
	return file_openconfig_wifi_mac_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Ssids_Ssid) GetBandSteering() *Ssids_Ssid_BandSteering {
	if x != nil {
		return x.BandSteering
	}
	return nil
}

func (x *Ssids_Ssid) GetBssids() *Ssids_Ssid_Bssids {
	if x != nil {
		return x.Bssids
	}
	return nil
}

func (x *Ssids_Ssid) GetClients() *Ssids_Ssid_Clients {
	if x != nil {
		return x.Clients
	}
	return nil
}

func (x *Ssids_Ssid) GetConfig() *Ssids_Ssid_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Ssids_Ssid) GetDot11R() *Ssids_Ssid_Dot11R {
	if x != nil {
		return x.Dot11R
	}
	return nil
}

func (x *Ssids_Ssid) GetDot11V() *Ssids_Ssid_Dot11V {
	if x != nil {
		return x.Dot11V
	}
	return nil
}

func (x *Ssids_Ssid) GetDot1XTimers() *Ssids_Ssid_Dot1XTimers {
	if x != nil {
		return x.Dot1XTimers
	}
	return nil
}

func (x *Ssids_Ssid) GetState() *Ssids_Ssid_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Ssids_Ssid) GetWmm() *Ssids_Ssid_Wmm {
	if x != nil {
		return x.Wmm
	}
	return nil
}

type Ssids_SsidKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Ssid *Ssids_Ssid `protobuf:"bytes,2,opt,name=ssid,proto3" json:"ssid,omitempty"`
}

func (x *Ssids_SsidKey) Reset() {
	*x = Ssids_SsidKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wifi_mac_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ssids_SsidKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ssids_SsidKey) ProtoMessage() {}

func (x *Ssids_SsidKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wifi_mac_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ssids_SsidKey.ProtoReflect.Descriptor instead.
func (*Ssids_SsidKey) Descriptor() ([]byte, []int) {
	return file_openconfig_wifi_mac_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Ssids_SsidKey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Ssids_SsidKey) GetSsid() *Ssids_Ssid {
	if x != nil {
		return x.Ssid
	}
	return nil
}

type Ssids_Ssid_BandSteering struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Ssids_Ssid_BandSteering_Config `protobuf:"bytes,250387798,opt,name=config,proto3" json:"config,omitempty"`
	State  *Ssids_Ssid_BandSteering_State  `protobuf:"bytes,177174019,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Ssids_Ssid_BandSteering) Reset() {
	*x = Ssids_Ssid_BandSteering{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wifi_mac_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ssids_Ssid_BandSteering) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ssids_Ssid_BandSteering) ProtoMessage() {}

func (x *Ssids_Ssid_BandSteering) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wifi_mac_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ssids_Ssid_BandSteering.ProtoReflect.Descriptor instead.
func (*Ssids_Ssid_BandSteering) Descriptor() ([]byte, []int) {
	return file_openconfig_wifi_mac_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *Ssids_Ssid_BandSteering) GetConfig() *Ssids_Ssid_BandSteering_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Ssids_Ssid_BandSteering) GetState() *Ssids_Ssid_BandSteering_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Ssids_Ssid_Bssids struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bssid []*Ssids_Ssid_Bssids_BssidKey `protobuf:"bytes,507013314,rep,name=bssid,proto3" json:"bssid,omitempty"`
}

func (x *Ssids_Ssid_Bssids) Reset() {
	*x = Ssids_Ssid_Bssids{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wifi_mac_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ssids_Ssid_Bssids) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ssids_Ssid_Bssids) ProtoMessage() {}

func (x *Ssids_Ssid_Bssids) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wifi_mac_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ssids_Ssid_Bssids.ProtoReflect.Descriptor instead.
func (*Ssids_Ssid_Bssids) Descriptor() ([]byte, []int) {
	return file_openconfig_wifi_mac_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *Ssids_Ssid_Bssids) GetBssid() []*Ssids_Ssid_Bssids_BssidKey {
	if x != nil {
		return x.Bssid
	}
	return nil
}

type Ssids_Ssid_Clients struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Client []*Ssids_Ssid_Clients_ClientKey `protobuf:"bytes,197622244,rep,name=client,proto3" json:"client,omitempty"`
}

func (x *Ssids_Ssid_Clients) Reset() {
	*x = Ssids_Ssid_Clients{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wifi_mac_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ssids_Ssid_Clients) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ssids_Ssid_Clients) ProtoMessage() {}

func (x *Ssids_Ssid_Clients) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wifi_mac_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ssids_Ssid_Clients.ProtoReflect.Descriptor instead.
func (*Ssids_Ssid_Clients) Descriptor() ([]byte, []int) {
	return file_openconfig_wifi_mac_proto_rawDescGZIP(), []int{0, 0, 2}
}

func (x *Ssids_Ssid_Clients) GetClient() []*Ssids_Ssid_Clients_ClientKey {
	if x != nil {
		return x.Client
	}
	return nil
}

type Ssids_Ssid_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdvertiseApname       *ywrapper.BoolValue                   `protobuf:"bytes,192650365,opt,name=advertise_apname,json=advertiseApname,proto3" json:"advertise_apname,omitempty"`
	BasicDataRates_2G     []OpenconfigWifiTypesDATARATE         `protobuf:"varint,342460478,rep,packed,name=basic_data_rates_2g,json=basicDataRates2g,proto3,enum=openconfig.OpenconfigWifiTypesDATARATE" json:"basic_data_rates_2g,omitempty"`
	BasicDataRates_5G     []OpenconfigWifiTypesDATARATE         `protobuf:"varint,359238027,rep,packed,name=basic_data_rates_5g,json=basicDataRates5g,proto3,enum=openconfig.OpenconfigWifiTypesDATARATE" json:"basic_data_rates_5g,omitempty"`
	BroadcastFilter       *ywrapper.BoolValue                   `protobuf:"bytes,291022387,opt,name=broadcast_filter,json=broadcastFilter,proto3" json:"broadcast_filter,omitempty"`
	Csa                   *ywrapper.BoolValue                   `protobuf:"bytes,247811686,opt,name=csa,proto3" json:"csa,omitempty"`
	DefaultVlan           *ywrapper.UintValue                   `protobuf:"bytes,432128532,opt,name=default_vlan,json=defaultVlan,proto3" json:"default_vlan,omitempty"`
	DhcpRequired          *ywrapper.BoolValue                   `protobuf:"bytes,330477468,opt,name=dhcp_required,json=dhcpRequired,proto3" json:"dhcp_required,omitempty"`
	Dot11K                *ywrapper.BoolValue                   `protobuf:"bytes,473026033,opt,name=dot11k,proto3" json:"dot11k,omitempty"`
	Dva                   *ywrapper.BoolValue                   `protobuf:"bytes,466452098,opt,name=dva,proto3" json:"dva,omitempty"`
	Enabled               *ywrapper.BoolValue                   `protobuf:"bytes,55874470,opt,name=enabled,proto3" json:"enabled,omitempty"`
	GtkTimeout            *ywrapper.UintValue                   `protobuf:"bytes,428436415,opt,name=gtk_timeout,json=gtkTimeout,proto3" json:"gtk_timeout,omitempty"`
	Hidden                *ywrapper.BoolValue                   `protobuf:"bytes,358439471,opt,name=hidden,proto3" json:"hidden,omitempty"`
	Ipv6NdpFilter         *ywrapper.BoolValue                   `protobuf:"bytes,318985876,opt,name=ipv6_ndp_filter,json=ipv6NdpFilter,proto3" json:"ipv6_ndp_filter,omitempty"`
	Ipv6NdpFilterTimer    *ywrapper.UintValue                   `protobuf:"bytes,393630952,opt,name=ipv6_ndp_filter_timer,json=ipv6NdpFilterTimer,proto3" json:"ipv6_ndp_filter_timer,omitempty"`
	MulticastFilter       *ywrapper.BoolValue                   `protobuf:"bytes,477942606,opt,name=multicast_filter,json=multicastFilter,proto3" json:"multicast_filter,omitempty"`
	Name                  *ywrapper.StringValue                 `protobuf:"bytes,16502406,opt,name=name,proto3" json:"name,omitempty"`
	Okc                   *ywrapper.BoolValue                   `protobuf:"bytes,247210280,opt,name=okc,proto3" json:"okc,omitempty"`
	OperatingFrequency    OpenconfigWifiTypesOPERATINGFREQUENCY `protobuf:"varint,481955913,opt,name=operating_frequency,json=operatingFrequency,proto3,enum=openconfig.OpenconfigWifiTypesOPERATINGFREQUENCY" json:"operating_frequency,omitempty"`
	Opmode                Ssids_Ssid_Config_Opmode              `protobuf:"varint,409077039,opt,name=opmode,proto3,enum=openconfig.Ssids_Ssid_Config_Opmode" json:"opmode,omitempty"`
	PtkTimeout            *ywrapper.UintValue                   `protobuf:"bytes,404316016,opt,name=ptk_timeout,json=ptkTimeout,proto3" json:"ptk_timeout,omitempty"`
	QbssLoad              *ywrapper.BoolValue                   `protobuf:"bytes,179646833,opt,name=qbss_load,json=qbssLoad,proto3" json:"qbss_load,omitempty"`
	ServerGroup           *ywrapper.StringValue                 `protobuf:"bytes,344881248,opt,name=server_group,json=serverGroup,proto3" json:"server_group,omitempty"`
	StationIsolation      *ywrapper.BoolValue                   `protobuf:"bytes,87616742,opt,name=station_isolation,json=stationIsolation,proto3" json:"station_isolation,omitempty"`
	SupportedDataRates_2G []OpenconfigWifiTypesDATARATE         `protobuf:"varint,338534890,rep,packed,name=supported_data_rates_2g,json=supportedDataRates2g,proto3,enum=openconfig.OpenconfigWifiTypesDATARATE" json:"supported_data_rates_2g,omitempty"`
	SupportedDataRates_5G []OpenconfigWifiTypesDATARATE         `protobuf:"varint,221091567,rep,packed,name=supported_data_rates_5g,json=supportedDataRates5g,proto3,enum=openconfig.OpenconfigWifiTypesDATARATE" json:"supported_data_rates_5g,omitempty"`
	VlanList              []*ywrapper.UintValue                 `protobuf:"bytes,439558317,rep,name=vlan_list,json=vlanList,proto3" json:"vlan_list,omitempty"`
	Wpa2Psk               *ywrapper.StringValue                 `protobuf:"bytes,180186978,opt,name=wpa2_psk,json=wpa2Psk,proto3" json:"wpa2_psk,omitempty"`
}

func (x *Ssids_Ssid_Config) Reset() {
	*x = Ssids_Ssid_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wifi_mac_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ssids_Ssid_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ssids_Ssid_Config) ProtoMessage() {}

func (x *Ssids_Ssid_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wifi_mac_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ssids_Ssid_Config.ProtoReflect.Descriptor instead.
func (*Ssids_Ssid_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_wifi_mac_proto_rawDescGZIP(), []int{0, 0, 3}
}

func (x *Ssids_Ssid_Config) GetAdvertiseApname() *ywrapper.BoolValue {
	if x != nil {
		return x.AdvertiseApname
	}
	return nil
}

func (x *Ssids_Ssid_Config) GetBasicDataRates_2G() []OpenconfigWifiTypesDATARATE {
	if x != nil {
		return x.BasicDataRates_2G
	}
	return nil
}

func (x *Ssids_Ssid_Config) GetBasicDataRates_5G() []OpenconfigWifiTypesDATARATE {
	if x != nil {
		return x.BasicDataRates_5G
	}
	return nil
}

func (x *Ssids_Ssid_Config) GetBroadcastFilter() *ywrapper.BoolValue {
	if x != nil {
		return x.BroadcastFilter
	}
	return nil
}

func (x *Ssids_Ssid_Config) GetCsa() *ywrapper.BoolValue {
	if x != nil {
		return x.Csa
	}
	return nil
}

func (x *Ssids_Ssid_Config) GetDefaultVlan() *ywrapper.UintValue {
	if x != nil {
		return x.DefaultVlan
	}
	return nil
}

func (x *Ssids_Ssid_Config) GetDhcpRequired() *ywrapper.BoolValue {
	if x != nil {
		return x.DhcpRequired
	}
	return nil
}

func (x *Ssids_Ssid_Config) GetDot11K() *ywrapper.BoolValue {
	if x != nil {
		return x.Dot11K
	}
	return nil
}

func (x *Ssids_Ssid_Config) GetDva() *ywrapper.BoolValue {
	if x != nil {
		return x.Dva
	}
	return nil
}

func (x *Ssids_Ssid_Config) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *Ssids_Ssid_Config) GetGtkTimeout() *ywrapper.UintValue {
	if x != nil {
		return x.GtkTimeout
	}
	return nil
}

func (x *Ssids_Ssid_Config) GetHidden() *ywrapper.BoolValue {
	if x != nil {
		return x.Hidden
	}
	return nil
}

func (x *Ssids_Ssid_Config) GetIpv6NdpFilter() *ywrapper.BoolValue {
	if x != nil {
		return x.Ipv6NdpFilter
	}
	return nil
}

func (x *Ssids_Ssid_Config) GetIpv6NdpFilterTimer() *ywrapper.UintValue {
	if x != nil {
		return x.Ipv6NdpFilterTimer
	}
	return nil
}

func (x *Ssids_Ssid_Config) GetMulticastFilter() *ywrapper.BoolValue {
	if x != nil {
		return x.MulticastFilter
	}
	return nil
}

func (x *Ssids_Ssid_Config) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Ssids_Ssid_Config) GetOkc() *ywrapper.BoolValue {
	if x != nil {
		return x.Okc
	}
	return nil
}

func (x *Ssids_Ssid_Config) GetOperatingFrequency() OpenconfigWifiTypesOPERATINGFREQUENCY {
	if x != nil {
		return x.OperatingFrequency
	}
	return OpenconfigWifiTypesOPERATINGFREQUENCY_OPENCONFIGWIFITYPESOPERATINGFREQUENCY_UNSET
}

func (x *Ssids_Ssid_Config) GetOpmode() Ssids_Ssid_Config_Opmode {
	if x != nil {
		return x.Opmode
	}
	return Ssids_Ssid_Config_OPMODE_OPEN
}

func (x *Ssids_Ssid_Config) GetPtkTimeout() *ywrapper.UintValue {
	if x != nil {
		return x.PtkTimeout
	}
	return nil
}

func (x *Ssids_Ssid_Config) GetQbssLoad() *ywrapper.BoolValue {
	if x != nil {
		return x.QbssLoad
	}
	return nil
}

func (x *Ssids_Ssid_Config) GetServerGroup() *ywrapper.StringValue {
	if x != nil {
		return x.ServerGroup
	}
	return nil
}

func (x *Ssids_Ssid_Config) GetStationIsolation() *ywrapper.BoolValue {
	if x != nil {
		return x.StationIsolation
	}
	return nil
}

func (x *Ssids_Ssid_Config) GetSupportedDataRates_2G() []OpenconfigWifiTypesDATARATE {
	if x != nil {
		return x.SupportedDataRates_2G
	}
	return nil
}

func (x *Ssids_Ssid_Config) GetSupportedDataRates_5G() []OpenconfigWifiTypesDATARATE {
	if x != nil {
		return x.SupportedDataRates_5G
	}
	return nil
}

func (x *Ssids_Ssid_Config) GetVlanList() []*ywrapper.UintValue {
	if x != nil {
		return x.VlanList
	}
	return nil
}

func (x *Ssids_Ssid_Config) GetWpa2Psk() *ywrapper.StringValue {
	if x != nil {
		return x.Wpa2Psk
	}
	return nil
}

type Ssids_Ssid_Dot11R struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Ssids_Ssid_Dot11R_Config `protobuf:"bytes,496985790,opt,name=config,proto3" json:"config,omitempty"`
	State  *Ssids_Ssid_Dot11R_State  `protobuf:"bytes,150018731,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Ssids_Ssid_Dot11R) Reset() {
	*x = Ssids_Ssid_Dot11R{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wifi_mac_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ssids_Ssid_Dot11R) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ssids_Ssid_Dot11R) ProtoMessage() {}

func (x *Ssids_Ssid_Dot11R) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wifi_mac_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ssids_Ssid_Dot11R.ProtoReflect.Descriptor instead.
func (*Ssids_Ssid_Dot11R) Descriptor() ([]byte, []int) {
	return file_openconfig_wifi_mac_proto_rawDescGZIP(), []int{0, 0, 4}
}

func (x *Ssids_Ssid_Dot11R) GetConfig() *Ssids_Ssid_Dot11R_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Ssids_Ssid_Dot11R) GetState() *Ssids_Ssid_Dot11R_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Ssids_Ssid_Dot11V struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Ssids_Ssid_Dot11V_Config `protobuf:"bytes,232099554,opt,name=config,proto3" json:"config,omitempty"`
	State  *Ssids_Ssid_Dot11V_State  `protobuf:"bytes,433516575,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Ssids_Ssid_Dot11V) Reset() {
	*x = Ssids_Ssid_Dot11V{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wifi_mac_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ssids_Ssid_Dot11V) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ssids_Ssid_Dot11V) ProtoMessage() {}

func (x *Ssids_Ssid_Dot11V) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wifi_mac_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ssids_Ssid_Dot11V.ProtoReflect.Descriptor instead.
func (*Ssids_Ssid_Dot11V) Descriptor() ([]byte, []int) {
	return file_openconfig_wifi_mac_proto_rawDescGZIP(), []int{0, 0, 5}
}

func (x *Ssids_Ssid_Dot11V) GetConfig() *Ssids_Ssid_Dot11V_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Ssids_Ssid_Dot11V) GetState() *Ssids_Ssid_Dot11V_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Ssids_Ssid_Dot1XTimers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Ssids_Ssid_Dot1XTimers_Config `protobuf:"bytes,446236320,opt,name=config,proto3" json:"config,omitempty"`
	State  *Ssids_Ssid_Dot1XTimers_State  `protobuf:"bytes,73845529,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Ssids_Ssid_Dot1XTimers) Reset() {
	*x = Ssids_Ssid_Dot1XTimers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wifi_mac_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ssids_Ssid_Dot1XTimers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ssids_Ssid_Dot1XTimers) ProtoMessage() {}

func (x *Ssids_Ssid_Dot1XTimers) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wifi_mac_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ssids_Ssid_Dot1XTimers.ProtoReflect.Descriptor instead.
func (*Ssids_Ssid_Dot1XTimers) Descriptor() ([]byte, []int) {
	return file_openconfig_wifi_mac_proto_rawDescGZIP(), []int{0, 0, 6}
}

func (x *Ssids_Ssid_Dot1XTimers) GetConfig() *Ssids_Ssid_Dot1XTimers_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Ssids_Ssid_Dot1XTimers) GetState() *Ssids_Ssid_Dot1XTimers_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Ssids_Ssid_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdvertiseApname       *ywrapper.BoolValue                   `protobuf:"bytes,178502058,opt,name=advertise_apname,json=advertiseApname,proto3" json:"advertise_apname,omitempty"`
	BasicDataRates_2G     []OpenconfigWifiTypesDATARATE         `protobuf:"varint,201952435,rep,packed,name=basic_data_rates_2g,json=basicDataRates2g,proto3,enum=openconfig.OpenconfigWifiTypesDATARATE" json:"basic_data_rates_2g,omitempty"`
	BasicDataRates_5G     []OpenconfigWifiTypesDATARATE         `protobuf:"varint,185174822,rep,packed,name=basic_data_rates_5g,json=basicDataRates5g,proto3,enum=openconfig.OpenconfigWifiTypesDATARATE" json:"basic_data_rates_5g,omitempty"`
	BroadcastFilter       *ywrapper.BoolValue                   `protobuf:"bytes,476264332,opt,name=broadcast_filter,json=broadcastFilter,proto3" json:"broadcast_filter,omitempty"`
	Csa                   *ywrapper.BoolValue                   `protobuf:"bytes,151065463,opt,name=csa,proto3" json:"csa,omitempty"`
	DefaultVlan           *ywrapper.UintValue                   `protobuf:"bytes,515896631,opt,name=default_vlan,json=defaultVlan,proto3" json:"default_vlan,omitempty"`
	DhcpRequired          *ywrapper.BoolValue                   `protobuf:"bytes,462568869,opt,name=dhcp_required,json=dhcpRequired,proto3" json:"dhcp_required,omitempty"`
	Dot11K                *ywrapper.BoolValue                   `protobuf:"bytes,442431610,opt,name=dot11k,proto3" json:"dot11k,omitempty"`
	Dva                   *ywrapper.BoolValue                   `protobuf:"bytes,201545223,opt,name=dva,proto3" json:"dva,omitempty"`
	Enabled               *ywrapper.BoolValue                   `protobuf:"bytes,293398579,opt,name=enabled,proto3" json:"enabled,omitempty"`
	GtkTimeout            *ywrapper.UintValue                   `protobuf:"bytes,448160766,opt,name=gtk_timeout,json=gtkTimeout,proto3" json:"gtk_timeout,omitempty"`
	Hidden                *ywrapper.BoolValue                   `protobuf:"bytes,203435396,opt,name=hidden,proto3" json:"hidden,omitempty"`
	Ipv6NdpFilter         *ywrapper.BoolValue                   `protobuf:"bytes,340044189,opt,name=ipv6_ndp_filter,json=ipv6NdpFilter,proto3" json:"ipv6_ndp_filter,omitempty"`
	Ipv6NdpFilterTimer    *ywrapper.UintValue                   `protobuf:"bytes,490045669,opt,name=ipv6_ndp_filter_timer,json=ipv6NdpFilterTimer,proto3" json:"ipv6_ndp_filter_timer,omitempty"`
	MulticastFilter       *ywrapper.BoolValue                   `protobuf:"bytes,127752161,opt,name=multicast_filter,json=multicastFilter,proto3" json:"multicast_filter,omitempty"`
	Name                  *ywrapper.StringValue                 `protobuf:"bytes,40491513,opt,name=name,proto3" json:"name,omitempty"`
	Okc                   *ywrapper.BoolValue                   `protobuf:"bytes,150386809,opt,name=okc,proto3" json:"okc,omitempty"`
	OperatingFrequency    OpenconfigWifiTypesOPERATINGFREQUENCY `protobuf:"varint,231498376,opt,name=operating_frequency,json=operatingFrequency,proto3,enum=openconfig.OpenconfigWifiTypesOPERATINGFREQUENCY" json:"operating_frequency,omitempty"`
	Opmode                Ssids_Ssid_State_Opmode               `protobuf:"varint,69208360,opt,name=opmode,proto3,enum=openconfig.Ssids_Ssid_State_Opmode" json:"opmode,omitempty"`
	PtkTimeout            *ywrapper.UintValue                   `protobuf:"bytes,396952177,opt,name=ptk_timeout,json=ptkTimeout,proto3" json:"ptk_timeout,omitempty"`
	QbssLoad              *ywrapper.BoolValue                   `protobuf:"bytes,533380824,opt,name=qbss_load,json=qbssLoad,proto3" json:"qbss_load,omitempty"`
	ServerGroup           *ywrapper.StringValue                 `protobuf:"bytes,473876655,opt,name=server_group,json=serverGroup,proto3" json:"server_group,omitempty"`
	StationIsolation      *ywrapper.BoolValue                   `protobuf:"bytes,28685195,opt,name=station_isolation,json=stationIsolation,proto3" json:"station_isolation,omitempty"`
	SupportedDataRates_2G []OpenconfigWifiTypesDATARATE         `protobuf:"varint,190436291,rep,packed,name=supported_data_rates_2g,json=supportedDataRates2g,proto3,enum=openconfig.OpenconfigWifiTypesDATARATE" json:"supported_data_rates_2g,omitempty"`
	SupportedDataRates_5G []OpenconfigWifiTypesDATARATE         `protobuf:"varint,173658742,rep,packed,name=supported_data_rates_5g,json=supportedDataRates5g,proto3,enum=openconfig.OpenconfigWifiTypesDATARATE" json:"supported_data_rates_5g,omitempty"`
	VlanList              []*ywrapper.UintValue                 `protobuf:"bytes,168216192,rep,name=vlan_list,json=vlanList,proto3" json:"vlan_list,omitempty"`
	Wpa2Psk               *ywrapper.StringValue                 `protobuf:"bytes,346103257,opt,name=wpa2_psk,json=wpa2Psk,proto3" json:"wpa2_psk,omitempty"`
}

func (x *Ssids_Ssid_State) Reset() {
	*x = Ssids_Ssid_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wifi_mac_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ssids_Ssid_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ssids_Ssid_State) ProtoMessage() {}

func (x *Ssids_Ssid_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wifi_mac_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ssids_Ssid_State.ProtoReflect.Descriptor instead.
func (*Ssids_Ssid_State) Descriptor() ([]byte, []int) {
	return file_openconfig_wifi_mac_proto_rawDescGZIP(), []int{0, 0, 7}
}

func (x *Ssids_Ssid_State) GetAdvertiseApname() *ywrapper.BoolValue {
	if x != nil {
		return x.AdvertiseApname
	}
	return nil
}

func (x *Ssids_Ssid_State) GetBasicDataRates_2G() []OpenconfigWifiTypesDATARATE {
	if x != nil {
		return x.BasicDataRates_2G
	}
	return nil
}

func (x *Ssids_Ssid_State) GetBasicDataRates_5G() []OpenconfigWifiTypesDATARATE {
	if x != nil {
		return x.BasicDataRates_5G
	}
	return nil
}

func (x *Ssids_Ssid_State) GetBroadcastFilter() *ywrapper.BoolValue {
	if x != nil {
		return x.BroadcastFilter
	}
	return nil
}

func (x *Ssids_Ssid_State) GetCsa() *ywrapper.BoolValue {
	if x != nil {
		return x.Csa
	}
	return nil
}

func (x *Ssids_Ssid_State) GetDefaultVlan() *ywrapper.UintValue {
	if x != nil {
		return x.DefaultVlan
	}
	return nil
}

func (x *Ssids_Ssid_State) GetDhcpRequired() *ywrapper.BoolValue {
	if x != nil {
		return x.DhcpRequired
	}
	return nil
}

func (x *Ssids_Ssid_State) GetDot11K() *ywrapper.BoolValue {
	if x != nil {
		return x.Dot11K
	}
	return nil
}

func (x *Ssids_Ssid_State) GetDva() *ywrapper.BoolValue {
	if x != nil {
		return x.Dva
	}
	return nil
}

func (x *Ssids_Ssid_State) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *Ssids_Ssid_State) GetGtkTimeout() *ywrapper.UintValue {
	if x != nil {
		return x.GtkTimeout
	}
	return nil
}

func (x *Ssids_Ssid_State) GetHidden() *ywrapper.BoolValue {
	if x != nil {
		return x.Hidden
	}
	return nil
}

func (x *Ssids_Ssid_State) GetIpv6NdpFilter() *ywrapper.BoolValue {
	if x != nil {
		return x.Ipv6NdpFilter
	}
	return nil
}

func (x *Ssids_Ssid_State) GetIpv6NdpFilterTimer() *ywrapper.UintValue {
	if x != nil {
		return x.Ipv6NdpFilterTimer
	}
	return nil
}

func (x *Ssids_Ssid_State) GetMulticastFilter() *ywrapper.BoolValue {
	if x != nil {
		return x.MulticastFilter
	}
	return nil
}

func (x *Ssids_Ssid_State) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Ssids_Ssid_State) GetOkc() *ywrapper.BoolValue {
	if x != nil {
		return x.Okc
	}
	return nil
}

func (x *Ssids_Ssid_State) GetOperatingFrequency() OpenconfigWifiTypesOPERATINGFREQUENCY {
	if x != nil {
		return x.OperatingFrequency
	}
	return OpenconfigWifiTypesOPERATINGFREQUENCY_OPENCONFIGWIFITYPESOPERATINGFREQUENCY_UNSET
}

func (x *Ssids_Ssid_State) GetOpmode() Ssids_Ssid_State_Opmode {
	if x != nil {
		return x.Opmode
	}
	return Ssids_Ssid_State_OPMODE_OPEN
}

func (x *Ssids_Ssid_State) GetPtkTimeout() *ywrapper.UintValue {
	if x != nil {
		return x.PtkTimeout
	}
	return nil
}

func (x *Ssids_Ssid_State) GetQbssLoad() *ywrapper.BoolValue {
	if x != nil {
		return x.QbssLoad
	}
	return nil
}

func (x *Ssids_Ssid_State) GetServerGroup() *ywrapper.StringValue {
	if x != nil {
		return x.ServerGroup
	}
	return nil
}

func (x *Ssids_Ssid_State) GetStationIsolation() *ywrapper.BoolValue {
	if x != nil {
		return x.StationIsolation
	}
	return nil
}

func (x *Ssids_Ssid_State) GetSupportedDataRates_2G() []OpenconfigWifiTypesDATARATE {
	if x != nil {
		return x.SupportedDataRates_2G
	}
	return nil
}

func (x *Ssids_Ssid_State) GetSupportedDataRates_5G() []OpenconfigWifiTypesDATARATE {
	if x != nil {
		return x.SupportedDataRates_5G
	}
	return nil
}

func (x *Ssids_Ssid_State) GetVlanList() []*ywrapper.UintValue {
	if x != nil {
		return x.VlanList
	}
	return nil
}

func (x *Ssids_Ssid_State) GetWpa2Psk() *ywrapper.StringValue {
	if x != nil {
		return x.Wpa2Psk
	}
	return nil
}

type Ssids_Ssid_Wmm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Ssids_Ssid_Wmm_Config `protobuf:"bytes,163769916,opt,name=config,proto3" json:"config,omitempty"`
	State  *Ssids_Ssid_Wmm_State  `protobuf:"bytes,157043509,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Ssids_Ssid_Wmm) Reset() {
	*x = Ssids_Ssid_Wmm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wifi_mac_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ssids_Ssid_Wmm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ssids_Ssid_Wmm) ProtoMessage() {}

func (x *Ssids_Ssid_Wmm) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wifi_mac_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ssids_Ssid_Wmm.ProtoReflect.Descriptor instead.
func (*Ssids_Ssid_Wmm) Descriptor() ([]byte, []int) {
	return file_openconfig_wifi_mac_proto_rawDescGZIP(), []int{0, 0, 8}
}

func (x *Ssids_Ssid_Wmm) GetConfig() *Ssids_Ssid_Wmm_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Ssids_Ssid_Wmm) GetState() *Ssids_Ssid_Wmm_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Ssids_Ssid_BandSteering_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BandSteering *ywrapper.BoolValue `protobuf:"bytes,490062060,opt,name=band_steering,json=bandSteering,proto3" json:"band_steering,omitempty"`
	SteeringRssi *ywrapper.IntValue  `protobuf:"bytes,103564288,opt,name=steering_rssi,json=steeringRssi,proto3" json:"steering_rssi,omitempty"`
}

func (x *Ssids_Ssid_BandSteering_Config) Reset() {
	*x = Ssids_Ssid_BandSteering_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wifi_mac_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ssids_Ssid_BandSteering_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ssids_Ssid_BandSteering_Config) ProtoMessage() {}

func (x *Ssids_Ssid_BandSteering_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wifi_mac_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ssids_Ssid_BandSteering_Config.ProtoReflect.Descriptor instead.
func (*Ssids_Ssid_BandSteering_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_wifi_mac_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (x *Ssids_Ssid_BandSteering_Config) GetBandSteering() *ywrapper.BoolValue {
	if x != nil {
		return x.BandSteering
	}
	return nil
}

func (x *Ssids_Ssid_BandSteering_Config) GetSteeringRssi() *ywrapper.IntValue {
	if x != nil {
		return x.SteeringRssi
	}
	return nil
}

type Ssids_Ssid_BandSteering_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BandSteering *ywrapper.BoolValue `protobuf:"bytes,380350897,opt,name=band_steering,json=bandSteering,proto3" json:"band_steering,omitempty"`
	SteeringRssi *ywrapper.IntValue  `protobuf:"bytes,526361865,opt,name=steering_rssi,json=steeringRssi,proto3" json:"steering_rssi,omitempty"`
}

func (x *Ssids_Ssid_BandSteering_State) Reset() {
	*x = Ssids_Ssid_BandSteering_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wifi_mac_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ssids_Ssid_BandSteering_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ssids_Ssid_BandSteering_State) ProtoMessage() {}

func (x *Ssids_Ssid_BandSteering_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wifi_mac_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ssids_Ssid_BandSteering_State.ProtoReflect.Descriptor instead.
func (*Ssids_Ssid_BandSteering_State) Descriptor() ([]byte, []int) {
	return file_openconfig_wifi_mac_proto_rawDescGZIP(), []int{0, 0, 0, 1}
}

func (x *Ssids_Ssid_BandSteering_State) GetBandSteering() *ywrapper.BoolValue {
	if x != nil {
		return x.BandSteering
	}
	return nil
}

func (x *Ssids_Ssid_BandSteering_State) GetSteeringRssi() *ywrapper.IntValue {
	if x != nil {
		return x.SteeringRssi
	}
	return nil
}

type Ssids_Ssid_Bssids_Bssid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *Ssids_Ssid_Bssids_Bssid_State `protobuf:"bytes,290739396,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Ssids_Ssid_Bssids_Bssid) Reset() {
	*x = Ssids_Ssid_Bssids_Bssid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wifi_mac_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ssids_Ssid_Bssids_Bssid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ssids_Ssid_Bssids_Bssid) ProtoMessage() {}

func (x *Ssids_Ssid_Bssids_Bssid) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wifi_mac_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ssids_Ssid_Bssids_Bssid.ProtoReflect.Descriptor instead.
func (*Ssids_Ssid_Bssids_Bssid) Descriptor() ([]byte, []int) {
	return file_openconfig_wifi_mac_proto_rawDescGZIP(), []int{0, 0, 1, 0}
}

func (x *Ssids_Ssid_Bssids_Bssid) GetState() *Ssids_Ssid_Bssids_Bssid_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Ssids_Ssid_Bssids_BssidKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RadioId  uint64                   `protobuf:"varint,1,opt,name=radio_id,json=radioId,proto3" json:"radio_id,omitempty"`
	BssidKey string                   `protobuf:"bytes,2,opt,name=bssid_key,json=bssidKey,proto3" json:"bssid_key,omitempty"`
	Bssid    *Ssids_Ssid_Bssids_Bssid `protobuf:"bytes,3,opt,name=bssid,proto3" json:"bssid,omitempty"`
}

func (x *Ssids_Ssid_Bssids_BssidKey) Reset() {
	*x = Ssids_Ssid_Bssids_BssidKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wifi_mac_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ssids_Ssid_Bssids_BssidKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ssids_Ssid_Bssids_BssidKey) ProtoMessage() {}

func (x *Ssids_Ssid_Bssids_BssidKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wifi_mac_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ssids_Ssid_Bssids_BssidKey.ProtoReflect.Descriptor instead.
func (*Ssids_Ssid_Bssids_BssidKey) Descriptor() ([]byte, []int) {
	return file_openconfig_wifi_mac_proto_rawDescGZIP(), []int{0, 0, 1, 1}
}

func (x *Ssids_Ssid_Bssids_BssidKey) GetRadioId() uint64 {
	if x != nil {
		return x.RadioId
	}
	return 0
}

func (x *Ssids_Ssid_Bssids_BssidKey) GetBssidKey() string {
	if x != nil {
		return x.BssidKey
	}
	return ""
}

func (x *Ssids_Ssid_Bssids_BssidKey) GetBssid() *Ssids_Ssid_Bssids_Bssid {
	if x != nil {
		return x.Bssid
	}
	return nil
}

type Ssids_Ssid_Bssids_Bssid_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bssid                *ywrapper.StringValue                   `protobuf:"bytes,331782214,opt,name=bssid,proto3" json:"bssid,omitempty"`
	Counters             *Ssids_Ssid_Bssids_Bssid_State_Counters `protobuf:"bytes,530911652,opt,name=counters,proto3" json:"counters,omitempty"`
	NumAssociatedClients *ywrapper.UintValue                     `protobuf:"bytes,281883963,opt,name=num_associated_clients,json=numAssociatedClients,proto3" json:"num_associated_clients,omitempty"`
	RadioId              *ywrapper.UintValue                     `protobuf:"bytes,76698014,opt,name=radio_id,json=radioId,proto3" json:"radio_id,omitempty"`
}

func (x *Ssids_Ssid_Bssids_Bssid_State) Reset() {
	*x = Ssids_Ssid_Bssids_Bssid_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wifi_mac_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ssids_Ssid_Bssids_Bssid_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ssids_Ssid_Bssids_Bssid_State) ProtoMessage() {}

func (x *Ssids_Ssid_Bssids_Bssid_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wifi_mac_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ssids_Ssid_Bssids_Bssid_State.ProtoReflect.Descriptor instead.
func (*Ssids_Ssid_Bssids_Bssid_State) Descriptor() ([]byte, []int) {
	return file_openconfig_wifi_mac_proto_rawDescGZIP(), []int{0, 0, 1, 0, 0}
}

func (x *Ssids_Ssid_Bssids_Bssid_State) GetBssid() *ywrapper.StringValue {
	if x != nil {
		return x.Bssid
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State) GetCounters() *Ssids_Ssid_Bssids_Bssid_State_Counters {
	if x != nil {
		return x.Counters
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State) GetNumAssociatedClients() *ywrapper.UintValue {
	if x != nil {
		return x.NumAssociatedClients
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State) GetRadioId() *ywrapper.UintValue {
	if x != nil {
		return x.RadioId
	}
	return nil
}

type Ssids_Ssid_Bssids_Bssid_State_Counters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BssChannelUtilization        *ywrapper.UintValue                                `protobuf:"bytes,54354896,opt,name=bss_channel_utilization,json=bssChannelUtilization,proto3" json:"bss_channel_utilization,omitempty"`
	RxBssDot11ChannelUtilization *ywrapper.UintValue                                `protobuf:"bytes,450586823,opt,name=rx_bss_dot11_channel_utilization,json=rxBssDot11ChannelUtilization,proto3" json:"rx_bss_dot11_channel_utilization,omitempty"`
	RxBytesData                  *ywrapper.UintValue                                `protobuf:"bytes,263866452,opt,name=rx_bytes_data,json=rxBytesData,proto3" json:"rx_bytes_data,omitempty"`
	RxControl                    *ywrapper.UintValue                                `protobuf:"bytes,128748093,opt,name=rx_control,json=rxControl,proto3" json:"rx_control,omitempty"`
	RxDataDist                   *Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataDist `protobuf:"bytes,256990123,opt,name=rx_data_dist,json=rxDataDist,proto3" json:"rx_data_dist,omitempty"`
	RxDataWmm                    *Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataWmm  `protobuf:"bytes,224886404,opt,name=rx_data_wmm,json=rxDataWmm,proto3" json:"rx_data_wmm,omitempty"`
	RxMcs                        *Ssids_Ssid_Bssids_Bssid_State_Counters_RxMcs      `protobuf:"bytes,339325177,opt,name=rx_mcs,json=rxMcs,proto3" json:"rx_mcs,omitempty"`
	RxMgmt                       *ywrapper.UintValue                                `protobuf:"bytes,499589341,opt,name=rx_mgmt,json=rxMgmt,proto3" json:"rx_mgmt,omitempty"`
	RxRetries                    *ywrapper.UintValue                                `protobuf:"bytes,386975740,opt,name=rx_retries,json=rxRetries,proto3" json:"rx_retries,omitempty"`
	RxRetriesData                *ywrapper.UintValue                                `protobuf:"bytes,118099345,opt,name=rx_retries_data,json=rxRetriesData,proto3" json:"rx_retries_data,omitempty"`
	RxRetriesSubframe            *ywrapper.UintValue                                `protobuf:"bytes,506375196,opt,name=rx_retries_subframe,json=rxRetriesSubframe,proto3" json:"rx_retries_subframe,omitempty"`
	TxBssDot11ChannelUtilization *ywrapper.UintValue                                `protobuf:"bytes,7536981,opt,name=tx_bss_dot11_channel_utilization,json=txBssDot11ChannelUtilization,proto3" json:"tx_bss_dot11_channel_utilization,omitempty"`
	TxBytesData                  *ywrapper.UintValue                                `protobuf:"bytes,233700262,opt,name=tx_bytes_data,json=txBytesData,proto3" json:"tx_bytes_data,omitempty"`
	TxControl                    *ywrapper.UintValue                                `protobuf:"bytes,506326327,opt,name=tx_control,json=txControl,proto3" json:"tx_control,omitempty"`
	TxDataDist                   *Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataDist `protobuf:"bytes,369284757,opt,name=tx_data_dist,json=txDataDist,proto3" json:"tx_data_dist,omitempty"`
	TxDataWmm                    *Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataWmm  `protobuf:"bytes,520619442,opt,name=tx_data_wmm,json=txDataWmm,proto3" json:"tx_data_wmm,omitempty"`
	TxMcs                        *Ssids_Ssid_Bssids_Bssid_State_Counters_TxMcs      `protobuf:"bytes,436655263,opt,name=tx_mcs,json=txMcs,proto3" json:"tx_mcs,omitempty"`
	TxMgmt                       *ywrapper.UintValue                                `protobuf:"bytes,431459523,opt,name=tx_mgmt,json=txMgmt,proto3" json:"tx_mgmt,omitempty"`
	TxRetries                    *ywrapper.UintValue                                `protobuf:"bytes,48735606,opt,name=tx_retries,json=txRetries,proto3" json:"tx_retries,omitempty"`
	TxRetriesData                *ywrapper.UintValue                                `protobuf:"bytes,155159663,opt,name=tx_retries_data,json=txRetriesData,proto3" json:"tx_retries_data,omitempty"`
	TxRetriesSubframe            *ywrapper.UintValue                                `protobuf:"bytes,291406922,opt,name=tx_retries_subframe,json=txRetriesSubframe,proto3" json:"tx_retries_subframe,omitempty"`
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters) Reset() {
	*x = Ssids_Ssid_Bssids_Bssid_State_Counters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wifi_mac_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ssids_Ssid_Bssids_Bssid_State_Counters) ProtoMessage() {}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wifi_mac_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ssids_Ssid_Bssids_Bssid_State_Counters.ProtoReflect.Descriptor instead.
func (*Ssids_Ssid_Bssids_Bssid_State_Counters) Descriptor() ([]byte, []int) {
	return file_openconfig_wifi_mac_proto_rawDescGZIP(), []int{0, 0, 1, 0, 0, 0}
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters) GetBssChannelUtilization() *ywrapper.UintValue {
	if x != nil {
		return x.BssChannelUtilization
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters) GetRxBssDot11ChannelUtilization() *ywrapper.UintValue {
	if x != nil {
		return x.RxBssDot11ChannelUtilization
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters) GetRxBytesData() *ywrapper.UintValue {
	if x != nil {
		return x.RxBytesData
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters) GetRxControl() *ywrapper.UintValue {
	if x != nil {
		return x.RxControl
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters) GetRxDataDist() *Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataDist {
	if x != nil {
		return x.RxDataDist
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters) GetRxDataWmm() *Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataWmm {
	if x != nil {
		return x.RxDataWmm
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters) GetRxMcs() *Ssids_Ssid_Bssids_Bssid_State_Counters_RxMcs {
	if x != nil {
		return x.RxMcs
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters) GetRxMgmt() *ywrapper.UintValue {
	if x != nil {
		return x.RxMgmt
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters) GetRxRetries() *ywrapper.UintValue {
	if x != nil {
		return x.RxRetries
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters) GetRxRetriesData() *ywrapper.UintValue {
	if x != nil {
		return x.RxRetriesData
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters) GetRxRetriesSubframe() *ywrapper.UintValue {
	if x != nil {
		return x.RxRetriesSubframe
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters) GetTxBssDot11ChannelUtilization() *ywrapper.UintValue {
	if x != nil {
		return x.TxBssDot11ChannelUtilization
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters) GetTxBytesData() *ywrapper.UintValue {
	if x != nil {
		return x.TxBytesData
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters) GetTxControl() *ywrapper.UintValue {
	if x != nil {
		return x.TxControl
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters) GetTxDataDist() *Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataDist {
	if x != nil {
		return x.TxDataDist
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters) GetTxDataWmm() *Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataWmm {
	if x != nil {
		return x.TxDataWmm
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters) GetTxMcs() *Ssids_Ssid_Bssids_Bssid_State_Counters_TxMcs {
	if x != nil {
		return x.TxMcs
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters) GetTxMgmt() *ywrapper.UintValue {
	if x != nil {
		return x.TxMgmt
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters) GetTxRetries() *ywrapper.UintValue {
	if x != nil {
		return x.TxRetries
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters) GetTxRetriesData() *ywrapper.UintValue {
	if x != nil {
		return x.TxRetriesData
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters) GetTxRetriesSubframe() *ywrapper.UintValue {
	if x != nil {
		return x.TxRetriesSubframe
	}
	return nil
}

type Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataDist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rx_0_64           *ywrapper.UintValue `protobuf:"bytes,81685118,opt,name=rx_0_64,json=rx064,proto3" json:"rx_0_64,omitempty"`
	Rx_1025_2048      *ywrapper.UintValue `protobuf:"bytes,198958164,opt,name=rx_1025_2048,json=rx10252048,proto3" json:"rx_1025_2048,omitempty"`
	Rx_129_256        *ywrapper.UintValue `protobuf:"bytes,481145001,opt,name=rx_129_256,json=rx129256,proto3" json:"rx_129_256,omitempty"`
	Rx_131073_262144  *ywrapper.UintValue `protobuf:"bytes,260680798,opt,name=rx_131073_262144,json=rx131073262144,proto3" json:"rx_131073_262144,omitempty"`
	Rx_16385_32768    *ywrapper.UintValue `protobuf:"bytes,215298261,opt,name=rx_16385_32768,json=rx1638532768,proto3" json:"rx_16385_32768,omitempty"`
	Rx_2049_4096      *ywrapper.UintValue `protobuf:"bytes,57452490,opt,name=rx_2049_4096,json=rx20494096,proto3" json:"rx_2049_4096,omitempty"`
	Rx_257_512        *ywrapper.UintValue `protobuf:"bytes,206446222,opt,name=rx_257_512,json=rx257512,proto3" json:"rx_257_512,omitempty"`
	Rx_262145_524288  *ywrapper.UintValue `protobuf:"bytes,9940335,opt,name=rx_262145_524288,json=rx262145524288,proto3" json:"rx_262145_524288,omitempty"`
	Rx_32769_65536    *ywrapper.UintValue `protobuf:"bytes,236498826,opt,name=rx_32769_65536,json=rx3276965536,proto3" json:"rx_32769_65536,omitempty"`
	Rx_4097_8192      *ywrapper.UintValue `protobuf:"bytes,463508950,opt,name=rx_4097_8192,json=rx40978192,proto3" json:"rx_4097_8192,omitempty"`
	Rx_513_1024       *ywrapper.UintValue `protobuf:"bytes,243742254,opt,name=rx_513_1024,json=rx5131024,proto3" json:"rx_513_1024,omitempty"`
	Rx_524289_1048576 *ywrapper.UintValue `protobuf:"bytes,433338639,opt,name=rx_524289_1048576,json=rx5242891048576,proto3" json:"rx_524289_1048576,omitempty"`
	Rx_65_128         *ywrapper.UintValue `protobuf:"bytes,268576426,opt,name=rx_65_128,json=rx65128,proto3" json:"rx_65_128,omitempty"`
	Rx_65537_131072   *ywrapper.UintValue `protobuf:"bytes,53671558,opt,name=rx_65537_131072,json=rx65537131072,proto3" json:"rx_65537_131072,omitempty"`
	Rx_8193_16384     *ywrapper.UintValue `protobuf:"bytes,367674295,opt,name=rx_8193_16384,json=rx819316384,proto3" json:"rx_8193_16384,omitempty"`
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataDist) Reset() {
	*x = Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataDist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wifi_mac_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataDist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataDist) ProtoMessage() {}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataDist) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wifi_mac_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataDist.ProtoReflect.Descriptor instead.
func (*Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataDist) Descriptor() ([]byte, []int) {
	return file_openconfig_wifi_mac_proto_rawDescGZIP(), []int{0, 0, 1, 0, 0, 0, 0}
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataDist) GetRx_0_64() *ywrapper.UintValue {
	if x != nil {
		return x.Rx_0_64
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataDist) GetRx_1025_2048() *ywrapper.UintValue {
	if x != nil {
		return x.Rx_1025_2048
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataDist) GetRx_129_256() *ywrapper.UintValue {
	if x != nil {
		return x.Rx_129_256
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataDist) GetRx_131073_262144() *ywrapper.UintValue {
	if x != nil {
		return x.Rx_131073_262144
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataDist) GetRx_16385_32768() *ywrapper.UintValue {
	if x != nil {
		return x.Rx_16385_32768
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataDist) GetRx_2049_4096() *ywrapper.UintValue {
	if x != nil {
		return x.Rx_2049_4096
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataDist) GetRx_257_512() *ywrapper.UintValue {
	if x != nil {
		return x.Rx_257_512
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataDist) GetRx_262145_524288() *ywrapper.UintValue {
	if x != nil {
		return x.Rx_262145_524288
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataDist) GetRx_32769_65536() *ywrapper.UintValue {
	if x != nil {
		return x.Rx_32769_65536
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataDist) GetRx_4097_8192() *ywrapper.UintValue {
	if x != nil {
		return x.Rx_4097_8192
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataDist) GetRx_513_1024() *ywrapper.UintValue {
	if x != nil {
		return x.Rx_513_1024
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataDist) GetRx_524289_1048576() *ywrapper.UintValue {
	if x != nil {
		return x.Rx_524289_1048576
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataDist) GetRx_65_128() *ywrapper.UintValue {
	if x != nil {
		return x.Rx_65_128
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataDist) GetRx_65537_131072() *ywrapper.UintValue {
	if x != nil {
		return x.Rx_65537_131072
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataDist) GetRx_8193_16384() *ywrapper.UintValue {
	if x != nil {
		return x.Rx_8193_16384
	}
	return nil
}

type Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataWmm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Be *ywrapper.UintValue `protobuf:"bytes,429468804,opt,name=be,proto3" json:"be,omitempty"`
	Bk *ywrapper.UintValue `protobuf:"bytes,429468810,opt,name=bk,proto3" json:"bk,omitempty"`
	Vi *ywrapper.UintValue `protobuf:"bytes,228137364,opt,name=vi,proto3" json:"vi,omitempty"`
	Vo *ywrapper.UintValue `protobuf:"bytes,228137362,opt,name=vo,proto3" json:"vo,omitempty"`
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataWmm) Reset() {
	*x = Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataWmm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wifi_mac_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataWmm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataWmm) ProtoMessage() {}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataWmm) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wifi_mac_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataWmm.ProtoReflect.Descriptor instead.
func (*Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataWmm) Descriptor() ([]byte, []int) {
	return file_openconfig_wifi_mac_proto_rawDescGZIP(), []int{0, 0, 1, 0, 0, 0, 1}
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataWmm) GetBe() *ywrapper.UintValue {
	if x != nil {
		return x.Be
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataWmm) GetBk() *ywrapper.UintValue {
	if x != nil {
		return x.Bk
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataWmm) GetVi() *ywrapper.UintValue {
	if x != nil {
		return x.Vi
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataWmm) GetVo() *ywrapper.UintValue {
	if x != nil {
		return x.Vo
	}
	return nil
}

type Ssids_Ssid_Bssids_Bssid_State_Counters_RxMcs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mcs0 *ywrapper.UintValue `protobuf:"bytes,76267161,opt,name=mcs0,proto3" json:"mcs0,omitempty"`
	Mcs1 *ywrapper.UintValue `protobuf:"bytes,76267160,opt,name=mcs1,proto3" json:"mcs1,omitempty"`
	Mcs2 *ywrapper.UintValue `protobuf:"bytes,76267163,opt,name=mcs2,proto3" json:"mcs2,omitempty"`
	Mcs3 *ywrapper.UintValue `protobuf:"bytes,76267162,opt,name=mcs3,proto3" json:"mcs3,omitempty"`
	Mcs4 *ywrapper.UintValue `protobuf:"bytes,76267165,opt,name=mcs4,proto3" json:"mcs4,omitempty"`
	Mcs5 *ywrapper.UintValue `protobuf:"bytes,76267164,opt,name=mcs5,proto3" json:"mcs5,omitempty"`
	Mcs6 *ywrapper.UintValue `protobuf:"bytes,76267167,opt,name=mcs6,proto3" json:"mcs6,omitempty"`
	Mcs7 *ywrapper.UintValue `protobuf:"bytes,76267166,opt,name=mcs7,proto3" json:"mcs7,omitempty"`
	Mcs8 *ywrapper.UintValue `protobuf:"bytes,76267153,opt,name=mcs8,proto3" json:"mcs8,omitempty"`
	Mcs9 *ywrapper.UintValue `protobuf:"bytes,76267152,opt,name=mcs9,proto3" json:"mcs9,omitempty"`
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_RxMcs) Reset() {
	*x = Ssids_Ssid_Bssids_Bssid_State_Counters_RxMcs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wifi_mac_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_RxMcs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ssids_Ssid_Bssids_Bssid_State_Counters_RxMcs) ProtoMessage() {}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_RxMcs) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wifi_mac_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ssids_Ssid_Bssids_Bssid_State_Counters_RxMcs.ProtoReflect.Descriptor instead.
func (*Ssids_Ssid_Bssids_Bssid_State_Counters_RxMcs) Descriptor() ([]byte, []int) {
	return file_openconfig_wifi_mac_proto_rawDescGZIP(), []int{0, 0, 1, 0, 0, 0, 2}
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_RxMcs) GetMcs0() *ywrapper.UintValue {
	if x != nil {
		return x.Mcs0
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_RxMcs) GetMcs1() *ywrapper.UintValue {
	if x != nil {
		return x.Mcs1
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_RxMcs) GetMcs2() *ywrapper.UintValue {
	if x != nil {
		return x.Mcs2
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_RxMcs) GetMcs3() *ywrapper.UintValue {
	if x != nil {
		return x.Mcs3
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_RxMcs) GetMcs4() *ywrapper.UintValue {
	if x != nil {
		return x.Mcs4
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_RxMcs) GetMcs5() *ywrapper.UintValue {
	if x != nil {
		return x.Mcs5
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_RxMcs) GetMcs6() *ywrapper.UintValue {
	if x != nil {
		return x.Mcs6
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_RxMcs) GetMcs7() *ywrapper.UintValue {
	if x != nil {
		return x.Mcs7
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_RxMcs) GetMcs8() *ywrapper.UintValue {
	if x != nil {
		return x.Mcs8
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_RxMcs) GetMcs9() *ywrapper.UintValue {
	if x != nil {
		return x.Mcs9
	}
	return nil
}

type Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataDist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tx_0_64           *ywrapper.UintValue `protobuf:"bytes,489909706,opt,name=tx_0_64,json=tx064,proto3" json:"tx_0_64,omitempty"`
	Tx_1025_2048      *ywrapper.UintValue `protobuf:"bytes,123058424,opt,name=tx_1025_2048,json=tx10252048,proto3" json:"tx_1025_2048,omitempty"`
	Tx_129_256        *ywrapper.UintValue `protobuf:"bytes,386441293,opt,name=tx_129_256,json=tx129256,proto3" json:"tx_129_256,omitempty"`
	Tx_131073_262144  *ywrapper.UintValue `protobuf:"bytes,476574146,opt,name=tx_131073_262144,json=tx131073262144,proto3" json:"tx_131073_262144,omitempty"`
	Tx_16385_32768    *ywrapper.UintValue `protobuf:"bytes,396047209,opt,name=tx_16385_32768,json=tx1638532768,proto3" json:"tx_16385_32768,omitempty"`
	Tx_2049_4096      *ywrapper.UintValue `protobuf:"bytes,172318790,opt,name=tx_2049_4096,json=tx20494096,proto3" json:"tx_2049_4096,omitempty"`
	Tx_257_512        *ywrapper.UintValue `protobuf:"bytes,10051658,opt,name=tx_257_512,json=tx257512,proto3" json:"tx_257_512,omitempty"`
	Tx_262145_524288  *ywrapper.UintValue `protobuf:"bytes,168601003,opt,name=tx_262145_524288,json=tx262145524288,proto3" json:"tx_262145_524288,omitempty"`
	Tx_32769_65536    *ywrapper.UintValue `protobuf:"bytes,427299582,opt,name=tx_32769_65536,json=tx3276965536,proto3" json:"tx_32769_65536,omitempty"`
	Tx_4097_8192      *ywrapper.UintValue `protobuf:"bytes,219017194,opt,name=tx_4097_8192,json=tx40978192,proto3" json:"tx_4097_8192,omitempty"`
	Tx_513_1024       *ywrapper.UintValue `protobuf:"bytes,57961498,opt,name=tx_513_1024,json=tx5131024,proto3" json:"tx_513_1024,omitempty"`
	Tx_524289_1048576 *ywrapper.UintValue `protobuf:"bytes,221220619,opt,name=tx_524289_1048576,json=tx5242891048576,proto3" json:"tx_524289_1048576,omitempty"`
	Tx_65_128         *ywrapper.UintValue `protobuf:"bytes,9021654,opt,name=tx_65_128,json=tx65128,proto3" json:"tx_65_128,omitempty"`
	Tx_65537_131072   *ywrapper.UintValue `protobuf:"bytes,147053178,opt,name=tx_65537_131072,json=tx65537131072,proto3" json:"tx_65537_131072,omitempty"`
	Tx_8193_16384     *ywrapper.UintValue `protobuf:"bytes,372606627,opt,name=tx_8193_16384,json=tx819316384,proto3" json:"tx_8193_16384,omitempty"`
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataDist) Reset() {
	*x = Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataDist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wifi_mac_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataDist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataDist) ProtoMessage() {}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataDist) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wifi_mac_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataDist.ProtoReflect.Descriptor instead.
func (*Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataDist) Descriptor() ([]byte, []int) {
	return file_openconfig_wifi_mac_proto_rawDescGZIP(), []int{0, 0, 1, 0, 0, 0, 3}
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataDist) GetTx_0_64() *ywrapper.UintValue {
	if x != nil {
		return x.Tx_0_64
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataDist) GetTx_1025_2048() *ywrapper.UintValue {
	if x != nil {
		return x.Tx_1025_2048
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataDist) GetTx_129_256() *ywrapper.UintValue {
	if x != nil {
		return x.Tx_129_256
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataDist) GetTx_131073_262144() *ywrapper.UintValue {
	if x != nil {
		return x.Tx_131073_262144
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataDist) GetTx_16385_32768() *ywrapper.UintValue {
	if x != nil {
		return x.Tx_16385_32768
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataDist) GetTx_2049_4096() *ywrapper.UintValue {
	if x != nil {
		return x.Tx_2049_4096
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataDist) GetTx_257_512() *ywrapper.UintValue {
	if x != nil {
		return x.Tx_257_512
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataDist) GetTx_262145_524288() *ywrapper.UintValue {
	if x != nil {
		return x.Tx_262145_524288
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataDist) GetTx_32769_65536() *ywrapper.UintValue {
	if x != nil {
		return x.Tx_32769_65536
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataDist) GetTx_4097_8192() *ywrapper.UintValue {
	if x != nil {
		return x.Tx_4097_8192
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataDist) GetTx_513_1024() *ywrapper.UintValue {
	if x != nil {
		return x.Tx_513_1024
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataDist) GetTx_524289_1048576() *ywrapper.UintValue {
	if x != nil {
		return x.Tx_524289_1048576
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataDist) GetTx_65_128() *ywrapper.UintValue {
	if x != nil {
		return x.Tx_65_128
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataDist) GetTx_65537_131072() *ywrapper.UintValue {
	if x != nil {
		return x.Tx_65537_131072
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataDist) GetTx_8193_16384() *ywrapper.UintValue {
	if x != nil {
		return x.Tx_8193_16384
	}
	return nil
}

type Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataWmm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Be *ywrapper.UintValue `protobuf:"bytes,486084062,opt,name=be,proto3" json:"be,omitempty"`
	Bk *ywrapper.UintValue `protobuf:"bytes,486084048,opt,name=bk,proto3" json:"bk,omitempty"`
	Vi *ywrapper.UintValue `protobuf:"bytes,284752574,opt,name=vi,proto3" json:"vi,omitempty"`
	Vo *ywrapper.UintValue `protobuf:"bytes,284752568,opt,name=vo,proto3" json:"vo,omitempty"`
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataWmm) Reset() {
	*x = Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataWmm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wifi_mac_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataWmm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataWmm) ProtoMessage() {}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataWmm) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wifi_mac_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataWmm.ProtoReflect.Descriptor instead.
func (*Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataWmm) Descriptor() ([]byte, []int) {
	return file_openconfig_wifi_mac_proto_rawDescGZIP(), []int{0, 0, 1, 0, 0, 0, 4}
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataWmm) GetBe() *ywrapper.UintValue {
	if x != nil {
		return x.Be
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataWmm) GetBk() *ywrapper.UintValue {
	if x != nil {
		return x.Bk
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataWmm) GetVi() *ywrapper.UintValue {
	if x != nil {
		return x.Vi
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataWmm) GetVo() *ywrapper.UintValue {
	if x != nil {
		return x.Vo
	}
	return nil
}

type Ssids_Ssid_Bssids_Bssid_State_Counters_TxMcs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mcs0 *ywrapper.UintValue `protobuf:"bytes,209950031,opt,name=mcs0,proto3" json:"mcs0,omitempty"`
	Mcs1 *ywrapper.UintValue `protobuf:"bytes,209950030,opt,name=mcs1,proto3" json:"mcs1,omitempty"`
	Mcs2 *ywrapper.UintValue `protobuf:"bytes,209950029,opt,name=mcs2,proto3" json:"mcs2,omitempty"`
	Mcs3 *ywrapper.UintValue `protobuf:"bytes,209950028,opt,name=mcs3,proto3" json:"mcs3,omitempty"`
	Mcs4 *ywrapper.UintValue `protobuf:"bytes,209950027,opt,name=mcs4,proto3" json:"mcs4,omitempty"`
	Mcs5 *ywrapper.UintValue `protobuf:"bytes,209950026,opt,name=mcs5,proto3" json:"mcs5,omitempty"`
	Mcs6 *ywrapper.UintValue `protobuf:"bytes,209950025,opt,name=mcs6,proto3" json:"mcs6,omitempty"`
	Mcs7 *ywrapper.UintValue `protobuf:"bytes,209950024,opt,name=mcs7,proto3" json:"mcs7,omitempty"`
	Mcs8 *ywrapper.UintValue `protobuf:"bytes,209950023,opt,name=mcs8,proto3" json:"mcs8,omitempty"`
	Mcs9 *ywrapper.UintValue `protobuf:"bytes,209950022,opt,name=mcs9,proto3" json:"mcs9,omitempty"`
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_TxMcs) Reset() {
	*x = Ssids_Ssid_Bssids_Bssid_State_Counters_TxMcs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wifi_mac_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_TxMcs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ssids_Ssid_Bssids_Bssid_State_Counters_TxMcs) ProtoMessage() {}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_TxMcs) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wifi_mac_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ssids_Ssid_Bssids_Bssid_State_Counters_TxMcs.ProtoReflect.Descriptor instead.
func (*Ssids_Ssid_Bssids_Bssid_State_Counters_TxMcs) Descriptor() ([]byte, []int) {
	return file_openconfig_wifi_mac_proto_rawDescGZIP(), []int{0, 0, 1, 0, 0, 0, 5}
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_TxMcs) GetMcs0() *ywrapper.UintValue {
	if x != nil {
		return x.Mcs0
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_TxMcs) GetMcs1() *ywrapper.UintValue {
	if x != nil {
		return x.Mcs1
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_TxMcs) GetMcs2() *ywrapper.UintValue {
	if x != nil {
		return x.Mcs2
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_TxMcs) GetMcs3() *ywrapper.UintValue {
	if x != nil {
		return x.Mcs3
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_TxMcs) GetMcs4() *ywrapper.UintValue {
	if x != nil {
		return x.Mcs4
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_TxMcs) GetMcs5() *ywrapper.UintValue {
	if x != nil {
		return x.Mcs5
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_TxMcs) GetMcs6() *ywrapper.UintValue {
	if x != nil {
		return x.Mcs6
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_TxMcs) GetMcs7() *ywrapper.UintValue {
	if x != nil {
		return x.Mcs7
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_TxMcs) GetMcs8() *ywrapper.UintValue {
	if x != nil {
		return x.Mcs8
	}
	return nil
}

func (x *Ssids_Ssid_Bssids_Bssid_State_Counters_TxMcs) GetMcs9() *ywrapper.UintValue {
	if x != nil {
		return x.Mcs9
	}
	return nil
}

type Ssids_Ssid_Clients_Client struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientCapabilities *Ssids_Ssid_Clients_Client_ClientCapabilities `protobuf:"bytes,174011229,opt,name=client_capabilities,json=clientCapabilities,proto3" json:"client_capabilities,omitempty"`
	ClientConnection   *Ssids_Ssid_Clients_Client_ClientConnection   `protobuf:"bytes,525041115,opt,name=client_connection,json=clientConnection,proto3" json:"client_connection,omitempty"`
	ClientRf           *Ssids_Ssid_Clients_Client_ClientRf           `protobuf:"bytes,340039371,opt,name=client_rf,json=clientRf,proto3" json:"client_rf,omitempty"`
	Dot11KNeighbors    *Ssids_Ssid_Clients_Client_Dot11KNeighbors    `protobuf:"bytes,485662115,opt,name=dot11k_neighbors,json=dot11kNeighbors,proto3" json:"dot11k_neighbors,omitempty"`
	State              *Ssids_Ssid_Clients_Client_State              `protobuf:"bytes,71274334,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Ssids_Ssid_Clients_Client) Reset() {
	*x = Ssids_Ssid_Clients_Client{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wifi_mac_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ssids_Ssid_Clients_Client) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ssids_Ssid_Clients_Client) ProtoMessage() {}

func (x *Ssids_Ssid_Clients_Client) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wifi_mac_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ssids_Ssid_Clients_Client.ProtoReflect.Descriptor instead.
func (*Ssids_Ssid_Clients_Client) Descriptor() ([]byte, []int) {
	return file_openconfig_wifi_mac_proto_rawDescGZIP(), []int{0, 0, 2, 0}
}

func (x *Ssids_Ssid_Clients_Client) GetClientCapabilities() *Ssids_Ssid_Clients_Client_ClientCapabilities {
	if x != nil {
		return x.ClientCapabilities
	}
	return nil
}

func (x *Ssids_Ssid_Clients_Client) GetClientConnection() *Ssids_Ssid_Clients_Client_ClientConnection {
	if x != nil {
		return x.ClientConnection
	}
	return nil
}

func (x *Ssids_Ssid_Clients_Client) GetClientRf() *Ssids_Ssid_Clients_Client_ClientRf {
	if x != nil {
		return x.ClientRf
	}
	return nil
}

func (x *Ssids_Ssid_Clients_Client) GetDot11KNeighbors() *Ssids_Ssid_Clients_Client_Dot11KNeighbors {
	if x != nil {
		return x.Dot11KNeighbors
	}
	return nil
}

func (x *Ssids_Ssid_Clients_Client) GetState() *Ssids_Ssid_Clients_Client_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Ssids_Ssid_Clients_ClientKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mac    string                     `protobuf:"bytes,1,opt,name=mac,proto3" json:"mac,omitempty"`
	Client *Ssids_Ssid_Clients_Client `protobuf:"bytes,2,opt,name=client,proto3" json:"client,omitempty"`
}

func (x *Ssids_Ssid_Clients_ClientKey) Reset() {
	*x = Ssids_Ssid_Clients_ClientKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wifi_mac_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ssids_Ssid_Clients_ClientKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ssids_Ssid_Clients_ClientKey) ProtoMessage() {}

func (x *Ssids_Ssid_Clients_ClientKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wifi_mac_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ssids_Ssid_Clients_ClientKey.ProtoReflect.Descriptor instead.
func (*Ssids_Ssid_Clients_ClientKey) Descriptor() ([]byte, []int) {
	return file_openconfig_wifi_mac_proto_rawDescGZIP(), []int{0, 0, 2, 1}
}

func (x *Ssids_Ssid_Clients_ClientKey) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *Ssids_Ssid_Clients_ClientKey) GetClient() *Ssids_Ssid_Clients_Client {
	if x != nil {
		return x.Client
	}
	return nil
}

type Ssids_Ssid_Clients_Client_ClientCapabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *Ssids_Ssid_Clients_Client_ClientCapabilities_State `protobuf:"bytes,502338319,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Ssids_Ssid_Clients_Client_ClientCapabilities) Reset() {
	*x = Ssids_Ssid_Clients_Client_ClientCapabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wifi_mac_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ssids_Ssid_Clients_Client_ClientCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ssids_Ssid_Clients_Client_ClientCapabilities) ProtoMessage() {}

func (x *Ssids_Ssid_Clients_Client_ClientCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wifi_mac_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ssids_Ssid_Clients_Client_ClientCapabilities.ProtoReflect.Descriptor instead.
func (*Ssids_Ssid_Clients_Client_ClientCapabilities) Descriptor() ([]byte, []int) {
	return file_openconfig_wifi_mac_proto_rawDescGZIP(), []int{0, 0, 2, 0, 0}
}

func (x *Ssids_Ssid_Clients_Client_ClientCapabilities) GetState() *Ssids_Ssid_Clients_Client_ClientCapabilities_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Ssids_Ssid_Clients_Client_ClientConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *Ssids_Ssid_Clients_Client_ClientConnection_State `protobuf:"bytes,303644037,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Ssids_Ssid_Clients_Client_ClientConnection) Reset() {
	*x = Ssids_Ssid_Clients_Client_ClientConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wifi_mac_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ssids_Ssid_Clients_Client_ClientConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ssids_Ssid_Clients_Client_ClientConnection) ProtoMessage() {}

func (x *Ssids_Ssid_Clients_Client_ClientConnection) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wifi_mac_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ssids_Ssid_Clients_Client_ClientConnection.ProtoReflect.Descriptor instead.
func (*Ssids_Ssid_Clients_Client_ClientConnection) Descriptor() ([]byte, []int) {
	return file_openconfig_wifi_mac_proto_rawDescGZIP(), []int{0, 0, 2, 0, 1}
}

func (x *Ssids_Ssid_Clients_Client_ClientConnection) GetState() *Ssids_Ssid_Clients_Client_ClientConnection_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Ssids_Ssid_Clients_Client_ClientRf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *Ssids_Ssid_Clients_Client_ClientRf_State `protobuf:"bytes,103238677,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Ssids_Ssid_Clients_Client_ClientRf) Reset() {
	*x = Ssids_Ssid_Clients_Client_ClientRf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wifi_mac_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ssids_Ssid_Clients_Client_ClientRf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ssids_Ssid_Clients_Client_ClientRf) ProtoMessage() {}

func (x *Ssids_Ssid_Clients_Client_ClientRf) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wifi_mac_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ssids_Ssid_Clients_Client_ClientRf.ProtoReflect.Descriptor instead.
func (*Ssids_Ssid_Clients_Client_ClientRf) Descriptor() ([]byte, []int) {
	return file_openconfig_wifi_mac_proto_rawDescGZIP(), []int{0, 0, 2, 0, 2}
}

func (x *Ssids_Ssid_Clients_Client_ClientRf) GetState() *Ssids_Ssid_Clients_Client_ClientRf_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Ssids_Ssid_Clients_Client_Dot11KNeighbors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *Ssids_Ssid_Clients_Client_Dot11KNeighbors_State `protobuf:"bytes,119848253,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Ssids_Ssid_Clients_Client_Dot11KNeighbors) Reset() {
	*x = Ssids_Ssid_Clients_Client_Dot11KNeighbors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wifi_mac_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ssids_Ssid_Clients_Client_Dot11KNeighbors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ssids_Ssid_Clients_Client_Dot11KNeighbors) ProtoMessage() {}

func (x *Ssids_Ssid_Clients_Client_Dot11KNeighbors) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wifi_mac_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ssids_Ssid_Clients_Client_Dot11KNeighbors.ProtoReflect.Descriptor instead.
func (*Ssids_Ssid_Clients_Client_Dot11KNeighbors) Descriptor() ([]byte, []int) {
	return file_openconfig_wifi_mac_proto_rawDescGZIP(), []int{0, 0, 2, 0, 3}
}

func (x *Ssids_Ssid_Clients_Client_Dot11KNeighbors) GetState() *Ssids_Ssid_Clients_Client_Dot11KNeighbors_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Ssids_Ssid_Clients_Client_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Counters *Ssids_Ssid_Clients_Client_State_Counters `protobuf:"bytes,481400498,opt,name=counters,proto3" json:"counters,omitempty"`
	Mac      *ywrapper.StringValue                     `protobuf:"bytes,199348678,opt,name=mac,proto3" json:"mac,omitempty"`
}

func (x *Ssids_Ssid_Clients_Client_State) Reset() {
	*x = Ssids_Ssid_Clients_Client_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wifi_mac_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ssids_Ssid_Clients_Client_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ssids_Ssid_Clients_Client_State) ProtoMessage() {}

func (x *Ssids_Ssid_Clients_Client_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wifi_mac_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ssids_Ssid_Clients_Client_State.ProtoReflect.Descriptor instead.
func (*Ssids_Ssid_Clients_Client_State) Descriptor() ([]byte, []int) {
	return file_openconfig_wifi_mac_proto_rawDescGZIP(), []int{0, 0, 2, 0, 4}
}

func (x *Ssids_Ssid_Clients_Client_State) GetCounters() *Ssids_Ssid_Clients_Client_State_Counters {
	if x != nil {
		return x.Counters
	}
	return nil
}

func (x *Ssids_Ssid_Clients_Client_State) GetMac() *ywrapper.StringValue {
	if x != nil {
		return x.Mac
	}
	return nil
}

type Ssids_Ssid_Clients_Client_ClientCapabilities_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelSupport     []*ywrapper.UintValue                   `protobuf:"bytes,241576153,rep,name=channel_support,json=channelSupport,proto3" json:"channel_support,omitempty"`
	ClientCapabilities []OpenconfigWifiTypesCLIENTCAPABILITIES `protobuf:"varint,280277706,rep,packed,name=client_capabilities,json=clientCapabilities,proto3,enum=openconfig.OpenconfigWifiTypesCLIENTCAPABILITIES" json:"client_capabilities,omitempty"`
}

func (x *Ssids_Ssid_Clients_Client_ClientCapabilities_State) Reset() {
	*x = Ssids_Ssid_Clients_Client_ClientCapabilities_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wifi_mac_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ssids_Ssid_Clients_Client_ClientCapabilities_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ssids_Ssid_Clients_Client_ClientCapabilities_State) ProtoMessage() {}

func (x *Ssids_Ssid_Clients_Client_ClientCapabilities_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wifi_mac_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ssids_Ssid_Clients_Client_ClientCapabilities_State.ProtoReflect.Descriptor instead.
func (*Ssids_Ssid_Clients_Client_ClientCapabilities_State) Descriptor() ([]byte, []int) {
	return file_openconfig_wifi_mac_proto_rawDescGZIP(), []int{0, 0, 2, 0, 0, 0}
}

func (x *Ssids_Ssid_Clients_Client_ClientCapabilities_State) GetChannelSupport() []*ywrapper.UintValue {
	if x != nil {
		return x.ChannelSupport
	}
	return nil
}

func (x *Ssids_Ssid_Clients_Client_ClientCapabilities_State) GetClientCapabilities() []OpenconfigWifiTypesCLIENTCAPABILITIES {
	if x != nil {
		return x.ClientCapabilities
	}
	return nil
}

type Ssids_Ssid_Clients_Client_ClientConnection_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientState     OpenconfigWifiTypesCLIENTSTATE `protobuf:"varint,12611625,opt,name=client_state,json=clientState,proto3,enum=openconfig.OpenconfigWifiTypesCLIENTSTATE" json:"client_state,omitempty"`
	ConnectionTime  *ywrapper.UintValue            `protobuf:"bytes,483233146,opt,name=connection_time,json=connectionTime,proto3" json:"connection_time,omitempty"`
	Hostname        *ywrapper.StringValue          `protobuf:"bytes,159385715,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Ipv4Address     []*ywrapper.StringValue        `protobuf:"bytes,227044086,rep,name=ipv4_address,json=ipv4Address,proto3" json:"ipv4_address,omitempty"`
	Ipv6Addresses   []*ywrapper.StringValue        `protobuf:"bytes,9131240,rep,name=ipv6_addresses,json=ipv6Addresses,proto3" json:"ipv6_addresses,omitempty"`
	OperatingSystem *ywrapper.StringValue          `protobuf:"bytes,204114517,opt,name=operating_system,json=operatingSystem,proto3" json:"operating_system,omitempty"`
	Username        *ywrapper.StringValue          `protobuf:"bytes,102440552,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *Ssids_Ssid_Clients_Client_ClientConnection_State) Reset() {
	*x = Ssids_Ssid_Clients_Client_ClientConnection_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wifi_mac_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ssids_Ssid_Clients_Client_ClientConnection_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ssids_Ssid_Clients_Client_ClientConnection_State) ProtoMessage() {}

func (x *Ssids_Ssid_Clients_Client_ClientConnection_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wifi_mac_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ssids_Ssid_Clients_Client_ClientConnection_State.ProtoReflect.Descriptor instead.
func (*Ssids_Ssid_Clients_Client_ClientConnection_State) Descriptor() ([]byte, []int) {
	return file_openconfig_wifi_mac_proto_rawDescGZIP(), []int{0, 0, 2, 0, 1, 0}
}

func (x *Ssids_Ssid_Clients_Client_ClientConnection_State) GetClientState() OpenconfigWifiTypesCLIENTSTATE {
	if x != nil {
		return x.ClientState
	}
	return OpenconfigWifiTypesCLIENTSTATE_OPENCONFIGWIFITYPESCLIENTSTATE_UNSET
}

func (x *Ssids_Ssid_Clients_Client_ClientConnection_State) GetConnectionTime() *ywrapper.UintValue {
	if x != nil {
		return x.ConnectionTime
	}
	return nil
}

func (x *Ssids_Ssid_Clients_Client_ClientConnection_State) GetHostname() *ywrapper.StringValue {
	if x != nil {
		return x.Hostname
	}
	return nil
}

func (x *Ssids_Ssid_Clients_Client_ClientConnection_State) GetIpv4Address() []*ywrapper.StringValue {
	if x != nil {
		return x.Ipv4Address
	}
	return nil
}

func (x *Ssids_Ssid_Clients_Client_ClientConnection_State) GetIpv6Addresses() []*ywrapper.StringValue {
	if x != nil {
		return x.Ipv6Addresses
	}
	return nil
}

func (x *Ssids_Ssid_Clients_Client_ClientConnection_State) GetOperatingSystem() *ywrapper.StringValue {
	if x != nil {
		return x.OperatingSystem
	}
	return nil
}

func (x *Ssids_Ssid_Clients_Client_ClientConnection_State) GetUsername() *ywrapper.StringValue {
	if x != nil {
		return x.Username
	}
	return nil
}

type Ssids_Ssid_Clients_Client_ClientRf_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionMode Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode `protobuf:"varint,239140312,opt,name=connection_mode,json=connectionMode,proto3,enum=openconfig.Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode" json:"connection_mode,omitempty"`
	Frequency      *ywrapper.UintValue                                     `protobuf:"bytes,89735306,opt,name=frequency,proto3" json:"frequency,omitempty"`
	PhyRate        *ywrapper.UintValue                                     `protobuf:"bytes,110227624,opt,name=phy_rate,json=phyRate,proto3" json:"phy_rate,omitempty"`
	Rssi           *ywrapper.IntValue                                      `protobuf:"bytes,82312397,opt,name=rssi,proto3" json:"rssi,omitempty"`
	Snr            *ywrapper.UintValue                                     `protobuf:"bytes,344175863,opt,name=snr,proto3" json:"snr,omitempty"`
	Ss             *ywrapper.UintValue                                     `protobuf:"bytes,297640090,opt,name=ss,proto3" json:"ss,omitempty"`
}

func (x *Ssids_Ssid_Clients_Client_ClientRf_State) Reset() {
	*x = Ssids_Ssid_Clients_Client_ClientRf_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wifi_mac_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ssids_Ssid_Clients_Client_ClientRf_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ssids_Ssid_Clients_Client_ClientRf_State) ProtoMessage() {}

func (x *Ssids_Ssid_Clients_Client_ClientRf_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wifi_mac_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ssids_Ssid_Clients_Client_ClientRf_State.ProtoReflect.Descriptor instead.
func (*Ssids_Ssid_Clients_Client_ClientRf_State) Descriptor() ([]byte, []int) {
	return file_openconfig_wifi_mac_proto_rawDescGZIP(), []int{0, 0, 2, 0, 2, 0}
}

func (x *Ssids_Ssid_Clients_Client_ClientRf_State) GetConnectionMode() Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode {
	if x != nil {
		return x.ConnectionMode
	}
	return Ssids_Ssid_Clients_Client_ClientRf_State_CONNECTIONMODE_UNSET
}

func (x *Ssids_Ssid_Clients_Client_ClientRf_State) GetFrequency() *ywrapper.UintValue {
	if x != nil {
		return x.Frequency
	}
	return nil
}

func (x *Ssids_Ssid_Clients_Client_ClientRf_State) GetPhyRate() *ywrapper.UintValue {
	if x != nil {
		return x.PhyRate
	}
	return nil
}

func (x *Ssids_Ssid_Clients_Client_ClientRf_State) GetRssi() *ywrapper.IntValue {
	if x != nil {
		return x.Rssi
	}
	return nil
}

func (x *Ssids_Ssid_Clients_Client_ClientRf_State) GetSnr() *ywrapper.UintValue {
	if x != nil {
		return x.Snr
	}
	return nil
}

func (x *Ssids_Ssid_Clients_Client_ClientRf_State) GetSs() *ywrapper.UintValue {
	if x != nil {
		return x.Ss
	}
	return nil
}

type Ssids_Ssid_Clients_Client_Dot11KNeighbors_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelLoadReport *ywrapper.UintValue   `protobuf:"bytes,177485393,opt,name=channel_load_report,json=channelLoadReport,proto3" json:"channel_load_report,omitempty"`
	NeighborAntenna   *ywrapper.UintValue   `protobuf:"bytes,490954216,opt,name=neighbor_antenna,json=neighborAntenna,proto3" json:"neighbor_antenna,omitempty"`
	NeighborBssid     *ywrapper.StringValue `protobuf:"bytes,362323378,opt,name=neighbor_bssid,json=neighborBssid,proto3" json:"neighbor_bssid,omitempty"`
	NeighborChannel   *ywrapper.UintValue   `protobuf:"bytes,333603412,opt,name=neighbor_channel,json=neighborChannel,proto3" json:"neighbor_channel,omitempty"`
	NeighborRssi      *ywrapper.IntValue    `protobuf:"bytes,162709186,opt,name=neighbor_rssi,json=neighborRssi,proto3" json:"neighbor_rssi,omitempty"`
}

func (x *Ssids_Ssid_Clients_Client_Dot11KNeighbors_State) Reset() {
	*x = Ssids_Ssid_Clients_Client_Dot11KNeighbors_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wifi_mac_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ssids_Ssid_Clients_Client_Dot11KNeighbors_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ssids_Ssid_Clients_Client_Dot11KNeighbors_State) ProtoMessage() {}

func (x *Ssids_Ssid_Clients_Client_Dot11KNeighbors_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wifi_mac_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ssids_Ssid_Clients_Client_Dot11KNeighbors_State.ProtoReflect.Descriptor instead.
func (*Ssids_Ssid_Clients_Client_Dot11KNeighbors_State) Descriptor() ([]byte, []int) {
	return file_openconfig_wifi_mac_proto_rawDescGZIP(), []int{0, 0, 2, 0, 3, 0}
}

func (x *Ssids_Ssid_Clients_Client_Dot11KNeighbors_State) GetChannelLoadReport() *ywrapper.UintValue {
	if x != nil {
		return x.ChannelLoadReport
	}
	return nil
}

func (x *Ssids_Ssid_Clients_Client_Dot11KNeighbors_State) GetNeighborAntenna() *ywrapper.UintValue {
	if x != nil {
		return x.NeighborAntenna
	}
	return nil
}

func (x *Ssids_Ssid_Clients_Client_Dot11KNeighbors_State) GetNeighborBssid() *ywrapper.StringValue {
	if x != nil {
		return x.NeighborBssid
	}
	return nil
}

func (x *Ssids_Ssid_Clients_Client_Dot11KNeighbors_State) GetNeighborChannel() *ywrapper.UintValue {
	if x != nil {
		return x.NeighborChannel
	}
	return nil
}

func (x *Ssids_Ssid_Clients_Client_Dot11KNeighbors_State) GetNeighborRssi() *ywrapper.IntValue {
	if x != nil {
		return x.NeighborRssi
	}
	return nil
}

type Ssids_Ssid_Clients_Client_State_Counters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RxBytes   *ywrapper.UintValue `protobuf:"bytes,495845557,opt,name=rx_bytes,json=rxBytes,proto3" json:"rx_bytes,omitempty"`
	RxRetries *ywrapper.UintValue `protobuf:"bytes,189738762,opt,name=rx_retries,json=rxRetries,proto3" json:"rx_retries,omitempty"`
	TxBytes   *ywrapper.UintValue `protobuf:"bytes,23313743,opt,name=tx_bytes,json=txBytes,proto3" json:"tx_bytes,omitempty"`
	TxRetries *ywrapper.UintValue `protobuf:"bytes,98702232,opt,name=tx_retries,json=txRetries,proto3" json:"tx_retries,omitempty"`
}

func (x *Ssids_Ssid_Clients_Client_State_Counters) Reset() {
	*x = Ssids_Ssid_Clients_Client_State_Counters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wifi_mac_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ssids_Ssid_Clients_Client_State_Counters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ssids_Ssid_Clients_Client_State_Counters) ProtoMessage() {}

func (x *Ssids_Ssid_Clients_Client_State_Counters) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wifi_mac_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ssids_Ssid_Clients_Client_State_Counters.ProtoReflect.Descriptor instead.
func (*Ssids_Ssid_Clients_Client_State_Counters) Descriptor() ([]byte, []int) {
	return file_openconfig_wifi_mac_proto_rawDescGZIP(), []int{0, 0, 2, 0, 4, 0}
}

func (x *Ssids_Ssid_Clients_Client_State_Counters) GetRxBytes() *ywrapper.UintValue {
	if x != nil {
		return x.RxBytes
	}
	return nil
}

func (x *Ssids_Ssid_Clients_Client_State_Counters) GetRxRetries() *ywrapper.UintValue {
	if x != nil {
		return x.RxRetries
	}
	return nil
}

func (x *Ssids_Ssid_Clients_Client_State_Counters) GetTxBytes() *ywrapper.UintValue {
	if x != nil {
		return x.TxBytes
	}
	return nil
}

func (x *Ssids_Ssid_Clients_Client_State_Counters) GetTxRetries() *ywrapper.UintValue {
	if x != nil {
		return x.TxRetries
	}
	return nil
}

type Ssids_Ssid_Dot11R_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dot11R             *ywrapper.BoolValue                   `protobuf:"bytes,306866146,opt,name=dot11r,proto3" json:"dot11r,omitempty"`
	Dot11RDomainid     *ywrapper.UintValue                   `protobuf:"bytes,383959528,opt,name=dot11r_domainid,json=dot11rDomainid,proto3" json:"dot11r_domainid,omitempty"`
	Dot11RMethod       Ssids_Ssid_Dot11R_Config_Dot11RMethod `protobuf:"varint,439177212,opt,name=dot11r_method,json=dot11rMethod,proto3,enum=openconfig.Ssids_Ssid_Dot11R_Config_Dot11RMethod" json:"dot11r_method,omitempty"`
	Dot11RR1KeyTimeout *ywrapper.UintValue                   `protobuf:"bytes,203505331,opt,name=dot11r_r1key_timeout,json=dot11rR1keyTimeout,proto3" json:"dot11r_r1key_timeout,omitempty"`
}

func (x *Ssids_Ssid_Dot11R_Config) Reset() {
	*x = Ssids_Ssid_Dot11R_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wifi_mac_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ssids_Ssid_Dot11R_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ssids_Ssid_Dot11R_Config) ProtoMessage() {}

func (x *Ssids_Ssid_Dot11R_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wifi_mac_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ssids_Ssid_Dot11R_Config.ProtoReflect.Descriptor instead.
func (*Ssids_Ssid_Dot11R_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_wifi_mac_proto_rawDescGZIP(), []int{0, 0, 4, 0}
}

func (x *Ssids_Ssid_Dot11R_Config) GetDot11R() *ywrapper.BoolValue {
	if x != nil {
		return x.Dot11R
	}
	return nil
}

func (x *Ssids_Ssid_Dot11R_Config) GetDot11RDomainid() *ywrapper.UintValue {
	if x != nil {
		return x.Dot11RDomainid
	}
	return nil
}

func (x *Ssids_Ssid_Dot11R_Config) GetDot11RMethod() Ssids_Ssid_Dot11R_Config_Dot11RMethod {
	if x != nil {
		return x.Dot11RMethod
	}
	return Ssids_Ssid_Dot11R_Config_DOT11RMETHOD_OVA
}

func (x *Ssids_Ssid_Dot11R_Config) GetDot11RR1KeyTimeout() *ywrapper.UintValue {
	if x != nil {
		return x.Dot11RR1KeyTimeout
	}
	return nil
}

type Ssids_Ssid_Dot11R_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dot11R             *ywrapper.BoolValue                  `protobuf:"bytes,144351457,opt,name=dot11r,proto3" json:"dot11r,omitempty"`
	Dot11RDomainid     *ywrapper.UintValue                  `protobuf:"bytes,429805585,opt,name=dot11r_domainid,json=dot11rDomainid,proto3" json:"dot11r_domainid,omitempty"`
	Dot11RMethod       Ssids_Ssid_Dot11R_State_Dot11RMethod `protobuf:"varint,510783837,opt,name=dot11r_method,json=dot11rMethod,proto3,enum=openconfig.Ssids_Ssid_Dot11R_State_Dot11RMethod" json:"dot11r_method,omitempty"`
	Dot11RR1KeyTimeout *ywrapper.UintValue                  `protobuf:"bytes,86079248,opt,name=dot11r_r1key_timeout,json=dot11rR1keyTimeout,proto3" json:"dot11r_r1key_timeout,omitempty"`
}

func (x *Ssids_Ssid_Dot11R_State) Reset() {
	*x = Ssids_Ssid_Dot11R_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wifi_mac_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ssids_Ssid_Dot11R_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ssids_Ssid_Dot11R_State) ProtoMessage() {}

func (x *Ssids_Ssid_Dot11R_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wifi_mac_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ssids_Ssid_Dot11R_State.ProtoReflect.Descriptor instead.
func (*Ssids_Ssid_Dot11R_State) Descriptor() ([]byte, []int) {
	return file_openconfig_wifi_mac_proto_rawDescGZIP(), []int{0, 0, 4, 1}
}

func (x *Ssids_Ssid_Dot11R_State) GetDot11R() *ywrapper.BoolValue {
	if x != nil {
		return x.Dot11R
	}
	return nil
}

func (x *Ssids_Ssid_Dot11R_State) GetDot11RDomainid() *ywrapper.UintValue {
	if x != nil {
		return x.Dot11RDomainid
	}
	return nil
}

func (x *Ssids_Ssid_Dot11R_State) GetDot11RMethod() Ssids_Ssid_Dot11R_State_Dot11RMethod {
	if x != nil {
		return x.Dot11RMethod
	}
	return Ssids_Ssid_Dot11R_State_DOT11RMETHOD_OVA
}

func (x *Ssids_Ssid_Dot11R_State) GetDot11RR1KeyTimeout() *ywrapper.UintValue {
	if x != nil {
		return x.Dot11RR1KeyTimeout
	}
	return nil
}

type Ssids_Ssid_Dot11V_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dot11VBssidle        *ywrapper.BoolValue `protobuf:"bytes,26064767,opt,name=dot11v_bssidle,json=dot11vBssidle,proto3" json:"dot11v_bssidle,omitempty"`
	Dot11VBssidleTimeout *ywrapper.UintValue `protobuf:"bytes,156062593,opt,name=dot11v_bssidle_timeout,json=dot11vBssidleTimeout,proto3" json:"dot11v_bssidle_timeout,omitempty"`
	Dot11VBsstransition  *ywrapper.BoolValue `protobuf:"bytes,245783152,opt,name=dot11v_bsstransition,json=dot11vBsstransition,proto3" json:"dot11v_bsstransition,omitempty"`
	Dot11VDms            *ywrapper.BoolValue `protobuf:"bytes,15140429,opt,name=dot11v_dms,json=dot11vDms,proto3" json:"dot11v_dms,omitempty"`
}

func (x *Ssids_Ssid_Dot11V_Config) Reset() {
	*x = Ssids_Ssid_Dot11V_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wifi_mac_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ssids_Ssid_Dot11V_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ssids_Ssid_Dot11V_Config) ProtoMessage() {}

func (x *Ssids_Ssid_Dot11V_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wifi_mac_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ssids_Ssid_Dot11V_Config.ProtoReflect.Descriptor instead.
func (*Ssids_Ssid_Dot11V_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_wifi_mac_proto_rawDescGZIP(), []int{0, 0, 5, 0}
}

func (x *Ssids_Ssid_Dot11V_Config) GetDot11VBssidle() *ywrapper.BoolValue {
	if x != nil {
		return x.Dot11VBssidle
	}
	return nil
}

func (x *Ssids_Ssid_Dot11V_Config) GetDot11VBssidleTimeout() *ywrapper.UintValue {
	if x != nil {
		return x.Dot11VBssidleTimeout
	}
	return nil
}

func (x *Ssids_Ssid_Dot11V_Config) GetDot11VBsstransition() *ywrapper.BoolValue {
	if x != nil {
		return x.Dot11VBsstransition
	}
	return nil
}

func (x *Ssids_Ssid_Dot11V_Config) GetDot11VDms() *ywrapper.BoolValue {
	if x != nil {
		return x.Dot11VDms
	}
	return nil
}

type Ssids_Ssid_Dot11V_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dot11VBssidle        *ywrapper.BoolValue `protobuf:"bytes,309924824,opt,name=dot11v_bssidle,json=dot11vBssidle,proto3" json:"dot11v_bssidle,omitempty"`
	Dot11VBssidleTimeout *ywrapper.UintValue `protobuf:"bytes,132989062,opt,name=dot11v_bssidle_timeout,json=dot11vBssidleTimeout,proto3" json:"dot11v_bssidle_timeout,omitempty"`
	Dot11VBsstransition  *ywrapper.BoolValue `protobuf:"bytes,165186503,opt,name=dot11v_bsstransition,json=dot11vBsstransition,proto3" json:"dot11v_bsstransition,omitempty"`
	Dot11VDms            *ywrapper.BoolValue `protobuf:"bytes,111152750,opt,name=dot11v_dms,json=dot11vDms,proto3" json:"dot11v_dms,omitempty"`
}

func (x *Ssids_Ssid_Dot11V_State) Reset() {
	*x = Ssids_Ssid_Dot11V_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wifi_mac_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ssids_Ssid_Dot11V_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ssids_Ssid_Dot11V_State) ProtoMessage() {}

func (x *Ssids_Ssid_Dot11V_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wifi_mac_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ssids_Ssid_Dot11V_State.ProtoReflect.Descriptor instead.
func (*Ssids_Ssid_Dot11V_State) Descriptor() ([]byte, []int) {
	return file_openconfig_wifi_mac_proto_rawDescGZIP(), []int{0, 0, 5, 1}
}

func (x *Ssids_Ssid_Dot11V_State) GetDot11VBssidle() *ywrapper.BoolValue {
	if x != nil {
		return x.Dot11VBssidle
	}
	return nil
}

func (x *Ssids_Ssid_Dot11V_State) GetDot11VBssidleTimeout() *ywrapper.UintValue {
	if x != nil {
		return x.Dot11VBssidleTimeout
	}
	return nil
}

func (x *Ssids_Ssid_Dot11V_State) GetDot11VBsstransition() *ywrapper.BoolValue {
	if x != nil {
		return x.Dot11VBsstransition
	}
	return nil
}

func (x *Ssids_Ssid_Dot11V_State) GetDot11VDms() *ywrapper.BoolValue {
	if x != nil {
		return x.Dot11VDms
	}
	return nil
}

type Ssids_Ssid_Dot1XTimers_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlacklistTime   *ywrapper.UintValue `protobuf:"bytes,60044230,opt,name=blacklist_time,json=blacklistTime,proto3" json:"blacklist_time,omitempty"`
	MaxAuthFailures *ywrapper.UintValue `protobuf:"bytes,286077258,opt,name=max_auth_failures,json=maxAuthFailures,proto3" json:"max_auth_failures,omitempty"`
}

func (x *Ssids_Ssid_Dot1XTimers_Config) Reset() {
	*x = Ssids_Ssid_Dot1XTimers_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wifi_mac_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ssids_Ssid_Dot1XTimers_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ssids_Ssid_Dot1XTimers_Config) ProtoMessage() {}

func (x *Ssids_Ssid_Dot1XTimers_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wifi_mac_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ssids_Ssid_Dot1XTimers_Config.ProtoReflect.Descriptor instead.
func (*Ssids_Ssid_Dot1XTimers_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_wifi_mac_proto_rawDescGZIP(), []int{0, 0, 6, 0}
}

func (x *Ssids_Ssid_Dot1XTimers_Config) GetBlacklistTime() *ywrapper.UintValue {
	if x != nil {
		return x.BlacklistTime
	}
	return nil
}

func (x *Ssids_Ssid_Dot1XTimers_Config) GetMaxAuthFailures() *ywrapper.UintValue {
	if x != nil {
		return x.MaxAuthFailures
	}
	return nil
}

type Ssids_Ssid_Dot1XTimers_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlacklistTime   *ywrapper.UintValue `protobuf:"bytes,346437517,opt,name=blacklist_time,json=blacklistTime,proto3" json:"blacklist_time,omitempty"`
	MaxAuthFailures *ywrapper.UintValue `protobuf:"bytes,272897807,opt,name=max_auth_failures,json=maxAuthFailures,proto3" json:"max_auth_failures,omitempty"`
}

func (x *Ssids_Ssid_Dot1XTimers_State) Reset() {
	*x = Ssids_Ssid_Dot1XTimers_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wifi_mac_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ssids_Ssid_Dot1XTimers_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ssids_Ssid_Dot1XTimers_State) ProtoMessage() {}

func (x *Ssids_Ssid_Dot1XTimers_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wifi_mac_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ssids_Ssid_Dot1XTimers_State.ProtoReflect.Descriptor instead.
func (*Ssids_Ssid_Dot1XTimers_State) Descriptor() ([]byte, []int) {
	return file_openconfig_wifi_mac_proto_rawDescGZIP(), []int{0, 0, 6, 1}
}

func (x *Ssids_Ssid_Dot1XTimers_State) GetBlacklistTime() *ywrapper.UintValue {
	if x != nil {
		return x.BlacklistTime
	}
	return nil
}

func (x *Ssids_Ssid_Dot1XTimers_State) GetMaxAuthFailures() *ywrapper.UintValue {
	if x != nil {
		return x.MaxAuthFailures
	}
	return nil
}

type Ssids_Ssid_Wmm_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrustDscp   *ywrapper.BoolValue   `protobuf:"bytes,177104862,opt,name=trust_dscp,json=trustDscp,proto3" json:"trust_dscp,omitempty"`
	WmmBeRemark []*ywrapper.UintValue `protobuf:"bytes,11867575,rep,name=wmm_be_remark,json=wmmBeRemark,proto3" json:"wmm_be_remark,omitempty"`
	WmmBkRemark []*ywrapper.UintValue `protobuf:"bytes,460642569,rep,name=wmm_bk_remark,json=wmmBkRemark,proto3" json:"wmm_bk_remark,omitempty"`
	WmmViRemark []*ywrapper.UintValue `protobuf:"bytes,411468615,rep,name=wmm_vi_remark,json=wmmViRemark,proto3" json:"wmm_vi_remark,omitempty"`
	WmmVoRemark []*ywrapper.UintValue `protobuf:"bytes,81366305,rep,name=wmm_vo_remark,json=wmmVoRemark,proto3" json:"wmm_vo_remark,omitempty"`
}

func (x *Ssids_Ssid_Wmm_Config) Reset() {
	*x = Ssids_Ssid_Wmm_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wifi_mac_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ssids_Ssid_Wmm_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ssids_Ssid_Wmm_Config) ProtoMessage() {}

func (x *Ssids_Ssid_Wmm_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wifi_mac_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ssids_Ssid_Wmm_Config.ProtoReflect.Descriptor instead.
func (*Ssids_Ssid_Wmm_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_wifi_mac_proto_rawDescGZIP(), []int{0, 0, 8, 0}
}

func (x *Ssids_Ssid_Wmm_Config) GetTrustDscp() *ywrapper.BoolValue {
	if x != nil {
		return x.TrustDscp
	}
	return nil
}

func (x *Ssids_Ssid_Wmm_Config) GetWmmBeRemark() []*ywrapper.UintValue {
	if x != nil {
		return x.WmmBeRemark
	}
	return nil
}

func (x *Ssids_Ssid_Wmm_Config) GetWmmBkRemark() []*ywrapper.UintValue {
	if x != nil {
		return x.WmmBkRemark
	}
	return nil
}

func (x *Ssids_Ssid_Wmm_Config) GetWmmViRemark() []*ywrapper.UintValue {
	if x != nil {
		return x.WmmViRemark
	}
	return nil
}

func (x *Ssids_Ssid_Wmm_Config) GetWmmVoRemark() []*ywrapper.UintValue {
	if x != nil {
		return x.WmmVoRemark
	}
	return nil
}

type Ssids_Ssid_Wmm_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrustDscp   *ywrapper.BoolValue   `protobuf:"bytes,81961833,opt,name=trust_dscp,json=trustDscp,proto3" json:"trust_dscp,omitempty"`
	WmmBeRemark []*ywrapper.UintValue `protobuf:"bytes,12209598,rep,name=wmm_be_remark,json=wmmBeRemark,proto3" json:"wmm_be_remark,omitempty"`
	WmmBkRemark []*ywrapper.UintValue `protobuf:"bytes,177940556,rep,name=wmm_bk_remark,json=wmmBkRemark,proto3" json:"wmm_bk_remark,omitempty"`
	WmmViRemark []*ywrapper.UintValue `protobuf:"bytes,377247662,rep,name=wmm_vi_remark,json=wmmViRemark,proto3" json:"wmm_vi_remark,omitempty"`
	WmmVoRemark []*ywrapper.UintValue `protobuf:"bytes,207475684,rep,name=wmm_vo_remark,json=wmmVoRemark,proto3" json:"wmm_vo_remark,omitempty"`
}

func (x *Ssids_Ssid_Wmm_State) Reset() {
	*x = Ssids_Ssid_Wmm_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_wifi_mac_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ssids_Ssid_Wmm_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ssids_Ssid_Wmm_State) ProtoMessage() {}

func (x *Ssids_Ssid_Wmm_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_wifi_mac_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ssids_Ssid_Wmm_State.ProtoReflect.Descriptor instead.
func (*Ssids_Ssid_Wmm_State) Descriptor() ([]byte, []int) {
	return file_openconfig_wifi_mac_proto_rawDescGZIP(), []int{0, 0, 8, 1}
}

func (x *Ssids_Ssid_Wmm_State) GetTrustDscp() *ywrapper.BoolValue {
	if x != nil {
		return x.TrustDscp
	}
	return nil
}

func (x *Ssids_Ssid_Wmm_State) GetWmmBeRemark() []*ywrapper.UintValue {
	if x != nil {
		return x.WmmBeRemark
	}
	return nil
}

func (x *Ssids_Ssid_Wmm_State) GetWmmBkRemark() []*ywrapper.UintValue {
	if x != nil {
		return x.WmmBkRemark
	}
	return nil
}

func (x *Ssids_Ssid_Wmm_State) GetWmmViRemark() []*ywrapper.UintValue {
	if x != nil {
		return x.WmmViRemark
	}
	return nil
}

func (x *Ssids_Ssid_Wmm_State) GetWmmVoRemark() []*ywrapper.UintValue {
	if x != nil {
		return x.WmmVoRemark
	}
	return nil
}

var File_openconfig_wifi_mac_proto protoreflect.FileDescriptor

var file_openconfig_wifi_mac_proto_rawDesc = []byte{
	0x0a, 0x19, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x77, 0x69, 0x66,
	0x69, 0x5f, 0x6d, 0x61, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x0e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x79, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8e, 0xd5, 0x01, 0x0a,
	0x05, 0x53, 0x73, 0x69, 0x64, 0x73, 0x12, 0x41, 0x0a, 0x04, 0x73, 0x73, 0x69, 0x64, 0x18, 0x83,
	0xd0, 0xe9, 0xd2, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x73, 0x2e, 0x53, 0x73, 0x69, 0x64,
	0x4b, 0x65, 0x79, 0x42, 0x0e, 0x82, 0x41, 0x0b, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73,
	0x73, 0x69, 0x64, 0x52, 0x04, 0x73, 0x73, 0x69, 0x64, 0x1a, 0xe0, 0xd3, 0x01, 0x0a, 0x04, 0x53,
	0x73, 0x69, 0x64, 0x12, 0x6a, 0x0a, 0x0d, 0x62, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x65, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0xb1, 0xa7, 0xe5, 0xe2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x73, 0x69, 0x64,
	0x73, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x2e, 0x42, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x65, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x42, 0x1c, 0x82, 0x41, 0x19, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73,
	0x73, 0x69, 0x64, 0x2f, 0x62, 0x61, 0x6e, 0x64, 0x2d, 0x73, 0x74, 0x65, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x0c, 0x62, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x50, 0x0a, 0x06, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x18, 0xe0, 0xb0, 0xe2, 0x85, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x53, 0x73, 0x69, 0x64, 0x73, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x2e, 0x42, 0x73, 0x73, 0x69,
	0x64, 0x73, 0x42, 0x15, 0x82, 0x41, 0x12, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73,
	0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x52, 0x06, 0x62, 0x73, 0x73, 0x69, 0x64,
	0x73, 0x12, 0x53, 0x0a, 0x07, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0xe2, 0xde, 0xe7,
	0x4b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x73, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x2e, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x16, 0x82, 0x41, 0x13, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73,
	0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x07, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x4f, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x84, 0xd7, 0xcf, 0x53, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x73, 0x2e, 0x53, 0x73, 0x69,
	0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x15, 0x82, 0x41, 0x12, 0x2f, 0x73, 0x73,
	0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4f, 0x0a, 0x06, 0x64, 0x6f, 0x74, 0x31, 0x31,
	0x72, 0x18, 0xc9, 0xdd, 0xec, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x73, 0x2e, 0x53, 0x73,
	0x69, 0x64, 0x2e, 0x44, 0x6f, 0x74, 0x31, 0x31, 0x52, 0x42, 0x15, 0x82, 0x41, 0x12, 0x2f, 0x73,
	0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x72,
	0x52, 0x06, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x72, 0x12, 0x4f, 0x0a, 0x06, 0x64, 0x6f, 0x74, 0x31,
	0x31, 0x76, 0x18, 0xcd, 0xdd, 0xec, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x73, 0x2e, 0x53,
	0x73, 0x69, 0x64, 0x2e, 0x44, 0x6f, 0x74, 0x31, 0x31, 0x56, 0x42, 0x15, 0x82, 0x41, 0x12, 0x2f,
	0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x31,
	0x76, 0x52, 0x06, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x76, 0x12, 0x65, 0x0a, 0x0c, 0x64, 0x6f, 0x74,
	0x31, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x18, 0xdf, 0x82, 0x8c, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x53, 0x73, 0x69, 0x64, 0x73, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x2e, 0x44, 0x6f, 0x74, 0x31, 0x58,
	0x54, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x42, 0x1b, 0x82, 0x41, 0x18, 0x2f, 0x73, 0x73, 0x69, 0x64,
	0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x78, 0x2d, 0x74, 0x69, 0x6d,
	0x65, 0x72, 0x73, 0x52, 0x0b, 0x64, 0x6f, 0x74, 0x31, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x73,
	0x12, 0x4b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x9d, 0xf1, 0x83, 0x76, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x53, 0x73, 0x69, 0x64, 0x73, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x14, 0x82, 0x41, 0x11, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a,
	0x03, 0x77, 0x6d, 0x6d, 0x18, 0xeb, 0xfc, 0xc4, 0xe0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x73, 0x69, 0x64,
	0x73, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x2e, 0x57, 0x6d, 0x6d, 0x42, 0x12, 0x82, 0x41, 0x0f, 0x2f,
	0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x77, 0x6d, 0x6d, 0x52, 0x03,
	0x77, 0x6d, 0x6d, 0x1a, 0xb6, 0x05, 0x0a, 0x0c, 0x42, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x65, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x6a, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xd6,
	0xba, 0xb2, 0x77, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x73, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x2e,
	0x42, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x23, 0x82, 0x41, 0x20, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73,
	0x73, 0x69, 0x64, 0x2f, 0x62, 0x61, 0x6e, 0x64, 0x2d, 0x73, 0x74, 0x65, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x66, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x83, 0xec, 0xbd, 0x54, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x53, 0x73, 0x69, 0x64, 0x73, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x2e, 0x42, 0x61, 0x6e, 0x64, 0x53,
	0x74, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x22, 0x82,
	0x41, 0x1f, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x61,
	0x6e, 0x64, 0x2d, 0x73, 0x74, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xe8, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x6f, 0x0a, 0x0d, 0x62, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x65, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0xec, 0x81, 0xd7, 0xe9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x31, 0x82, 0x41, 0x2e, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73,
	0x73, 0x69, 0x64, 0x2f, 0x62, 0x61, 0x6e, 0x64, 0x2d, 0x73, 0x74, 0x65, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x62, 0x61, 0x6e, 0x64, 0x2d, 0x73, 0x74,
	0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x62, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x65, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x6d, 0x0a, 0x0d, 0x73, 0x74, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x72, 0x73, 0x73, 0x69, 0x18, 0x80, 0x88, 0xb1, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x31, 0x82, 0x41, 0x2e, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73,
	0x69, 0x64, 0x2f, 0x62, 0x61, 0x6e, 0x64, 0x2d, 0x73, 0x74, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x74, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x2d, 0x72, 0x73, 0x73, 0x69, 0x52, 0x0c, 0x73, 0x74, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x73, 0x73, 0x69, 0x1a, 0xe6, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x6e, 0x0a,
	0x0d, 0x62, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0xb1,
	0xe3, 0xae, 0xb5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x30, 0x82,
	0x41, 0x2d, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x61,
	0x6e, 0x64, 0x2d, 0x73, 0x74, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x62, 0x61, 0x6e, 0x64, 0x2d, 0x73, 0x74, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x0c, 0x62, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x6d, 0x0a,
	0x0d, 0x73, 0x74, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x73, 0x73, 0x69, 0x18, 0x89,
	0xca, 0xfe, 0xfa, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x30, 0x82, 0x41,
	0x2d, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x61, 0x6e,
	0x64, 0x2d, 0x73, 0x74, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x73, 0x74, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x2d, 0x72, 0x73, 0x73, 0x69, 0x52, 0x0c,
	0x73, 0x74, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x73, 0x73, 0x69, 0x1a, 0xf5, 0x51, 0x0a,
	0x06, 0x42, 0x73, 0x73, 0x69, 0x64, 0x73, 0x12, 0x5d, 0x0a, 0x05, 0x62, 0x73, 0x73, 0x69, 0x64,
	0x18, 0xc2, 0xd1, 0xe1, 0xf1, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x73, 0x2e, 0x53, 0x73,
	0x69, 0x64, 0x2e, 0x42, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2e, 0x42, 0x73, 0x73, 0x69, 0x64, 0x4b,
	0x65, 0x79, 0x42, 0x1b, 0x82, 0x41, 0x18, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73,
	0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x52,
	0x05, 0x62, 0x73, 0x73, 0x69, 0x64, 0x1a, 0xc2, 0x4f, 0x0a, 0x05, 0x42, 0x73, 0x73, 0x69, 0x64,
	0x12, 0x66, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xc4, 0xa9, 0xd1, 0x8a, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x53, 0x73, 0x69, 0x64, 0x73, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x2e, 0x42, 0x73, 0x73, 0x69,
	0x64, 0x73, 0x2e, 0x42, 0x73, 0x73, 0x69, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x21,
	0x82, 0x41, 0x1e, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62,
	0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xd0, 0x4e, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x58, 0x0a, 0x05, 0x62, 0x73, 0x73, 0x69, 0x64, 0x18, 0xc6, 0xb0, 0x9a, 0x9e,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x27, 0x82, 0x41,
	0x24, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73,
	0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x62, 0x73, 0x73, 0x69, 0x64, 0x52, 0x05, 0x62, 0x73, 0x73, 0x69, 0x64, 0x12, 0x7e, 0x0a, 0x08,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0xa4, 0xa3, 0x94, 0xfd, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x53, 0x73, 0x69, 0x64, 0x73, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x2e, 0x42, 0x73, 0x73, 0x69, 0x64,
	0x73, 0x2e, 0x42, 0x73, 0x73, 0x69, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x42, 0x2a, 0x82, 0x41, 0x27, 0x2f, 0x73, 0x73, 0x69, 0x64,
	0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73,
	0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x87, 0x01, 0x0a,
	0x16, 0x6e, 0x75, 0x6d, 0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0xbb, 0xea, 0xb4, 0x86, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x38, 0x82, 0x41, 0x35, 0x2f, 0x73, 0x73, 0x69, 0x64,
	0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73,
	0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x75, 0x6d, 0x2d, 0x61, 0x73,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x14, 0x6e, 0x75, 0x6d, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x5d, 0x0a, 0x08, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x5f,
	0x69, 0x64, 0x18, 0x9e, 0xa3, 0xc9, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x2a, 0x82, 0x41, 0x27, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64,
	0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2d, 0x69, 0x64, 0x52, 0x07, 0x72, 0x61,
	0x64, 0x69, 0x6f, 0x49, 0x64, 0x1a, 0x83, 0x4b, 0x0a, 0x08, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x92, 0x01, 0x0a, 0x17, 0x62, 0x73, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xd0,
	0xc7, 0xf5, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x42, 0x82, 0x41,
	0x3f, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73,
	0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x2d, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x15, 0x62, 0x73, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x74, 0x69, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xac, 0x01, 0x0a, 0x20, 0x72, 0x78, 0x5f, 0x62,
	0x73, 0x73, 0x5f, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xc7, 0xd1, 0xed,
	0xd6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4b, 0x82, 0x41, 0x48,
	0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69,
	0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x78, 0x2d, 0x62, 0x73, 0x73, 0x2d, 0x64,
	0x6f, 0x74, 0x31, 0x31, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x75, 0x74, 0x69,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1c, 0x72, 0x78, 0x42, 0x73, 0x73, 0x44,
	0x6f, 0x74, 0x31, 0x31, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x74, 0x69, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x74, 0x0a, 0x0d, 0x72, 0x78, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0xd4, 0x90, 0xe9, 0x7d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x38, 0x82, 0x41, 0x35, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73,
	0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73,
	0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x2f, 0x72, 0x78, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x0b, 0x72, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x6c, 0x0a, 0x0a,
	0x72, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0xbd, 0x94, 0xb2, 0x3d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x73, 0x73,
	0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f,
	0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x78, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52,
	0x09, 0x72, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x9b, 0x01, 0x0a, 0x0c, 0x72,
	0x78, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x18, 0xab, 0xb7, 0xc5, 0x7a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x73, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x2e, 0x42, 0x73, 0x73,
	0x69, 0x64, 0x73, 0x2e, 0x42, 0x73, 0x73, 0x69, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x52, 0x78, 0x44, 0x61, 0x74, 0x61, 0x44,
	0x69, 0x73, 0x74, 0x42, 0x37, 0x82, 0x41, 0x34, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73,
	0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f,
	0x72, 0x78, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x52, 0x0a, 0x72, 0x78,
	0x44, 0x61, 0x74, 0x61, 0x44, 0x69, 0x73, 0x74, 0x12, 0x97, 0x01, 0x0a, 0x0b, 0x72, 0x78, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x77, 0x6d, 0x6d, 0x18, 0x84, 0xfd, 0x9d, 0x6b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53,
	0x73, 0x69, 0x64, 0x73, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x2e, 0x42, 0x73, 0x73, 0x69, 0x64, 0x73,
	0x2e, 0x42, 0x73, 0x73, 0x69, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x52, 0x78, 0x44, 0x61, 0x74, 0x61, 0x57, 0x6d, 0x6d, 0x42,
	0x36, 0x82, 0x41, 0x33, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f,
	0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x78, 0x2d, 0x64,
	0x61, 0x74, 0x61, 0x2d, 0x77, 0x6d, 0x6d, 0x52, 0x09, 0x72, 0x78, 0x44, 0x61, 0x74, 0x61, 0x57,
	0x6d, 0x6d, 0x12, 0x86, 0x01, 0x0a, 0x06, 0x72, 0x78, 0x5f, 0x6d, 0x63, 0x73, 0x18, 0xf9, 0xe1,
	0xe6, 0xa1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x73, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x2e,
	0x42, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2e, 0x42, 0x73, 0x73, 0x69, 0x64, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x52, 0x78, 0x4d, 0x63,
	0x73, 0x42, 0x31, 0x82, 0x41, 0x2e, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69,
	0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x78,
	0x2d, 0x6d, 0x63, 0x73, 0x52, 0x05, 0x72, 0x78, 0x4d, 0x63, 0x73, 0x12, 0x64, 0x0a, 0x07, 0x72,
	0x78, 0x5f, 0x6d, 0x67, 0x6d, 0x74, 0x18, 0xdd, 0xc1, 0x9c, 0xee, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x32, 0x82, 0x41, 0x2f, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73,
	0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73,
	0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x2f, 0x72, 0x78, 0x2d, 0x6d, 0x67, 0x6d, 0x74, 0x52, 0x06, 0x72, 0x78, 0x4d, 0x67, 0x6d,
	0x74, 0x12, 0x6d, 0x0a, 0x0a, 0x72, 0x78, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18,
	0xfc, 0x8f, 0xc3, 0xb8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x35,
	0x82, 0x41, 0x32, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62,
	0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x78, 0x2d, 0x72, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x09, 0x72, 0x78, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x7a, 0x0a, 0x0f, 0x72, 0x78, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x91, 0x9b, 0xa8, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x3a, 0x82, 0x41, 0x37, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69,
	0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x78,
	0x2d, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x72,
	0x78, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x87, 0x01, 0x0a,
	0x13, 0x72, 0x78, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x18, 0x9c, 0xd8, 0xba, 0xf1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73,
	0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f,
	0x72, 0x78, 0x2d, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2d, 0x73, 0x75, 0x62, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x52, 0x11, 0x72, 0x78, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x53, 0x75,
	0x62, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x12, 0xab, 0x01, 0x0a, 0x20, 0x74, 0x78, 0x5f, 0x62, 0x73,
	0x73, 0x5f, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xd5, 0x82, 0xcc, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4b, 0x82, 0x41, 0x48, 0x2f, 0x73,
	0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73,
	0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x74, 0x78, 0x2d, 0x62, 0x73, 0x73, 0x2d, 0x64, 0x6f, 0x74,
	0x31, 0x31, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x75, 0x74, 0x69, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1c, 0x74, 0x78, 0x42, 0x73, 0x73, 0x44, 0x6f, 0x74,
	0x31, 0x31, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x74, 0x0a, 0x0d, 0x74, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0xa6, 0xf7, 0xb7, 0x6f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x38, 0x82, 0x41, 0x35, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73,
	0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f,
	0x74, 0x78, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x74,
	0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x6d, 0x0a, 0x0a, 0x74, 0x78,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0xb7, 0xda, 0xb7, 0xf1, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x73, 0x73, 0x69,
	0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62,
	0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x74, 0x78, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x09,
	0x74, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x9c, 0x01, 0x0a, 0x0c, 0x74, 0x78,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x18, 0x95, 0xad, 0x8b, 0xb0, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x73, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x2e, 0x42, 0x73, 0x73,
	0x69, 0x64, 0x73, 0x2e, 0x42, 0x73, 0x73, 0x69, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x54, 0x78, 0x44, 0x61, 0x74, 0x61, 0x44,
	0x69, 0x73, 0x74, 0x42, 0x37, 0x82, 0x41, 0x34, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73,
	0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f,
	0x74, 0x78, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x52, 0x0a, 0x74, 0x78,
	0x44, 0x61, 0x74, 0x61, 0x44, 0x69, 0x73, 0x74, 0x12, 0x98, 0x01, 0x0a, 0x0b, 0x74, 0x78, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x77, 0x6d, 0x6d, 0x18, 0xb2, 0x8b, 0xa0, 0xf8, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x53, 0x73, 0x69, 0x64, 0x73, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x2e, 0x42, 0x73, 0x73, 0x69, 0x64,
	0x73, 0x2e, 0x42, 0x73, 0x73, 0x69, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x54, 0x78, 0x44, 0x61, 0x74, 0x61, 0x57, 0x6d, 0x6d,
	0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64,
	0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x74, 0x78, 0x2d,
	0x64, 0x61, 0x74, 0x61, 0x2d, 0x77, 0x6d, 0x6d, 0x52, 0x09, 0x74, 0x78, 0x44, 0x61, 0x74, 0x61,
	0x57, 0x6d, 0x6d, 0x12, 0x86, 0x01, 0x0a, 0x06, 0x74, 0x78, 0x5f, 0x6d, 0x63, 0x73, 0x18, 0x9f,
	0xa9, 0x9b, 0xd0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x73, 0x2e, 0x53, 0x73, 0x69, 0x64,
	0x2e, 0x42, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2e, 0x42, 0x73, 0x73, 0x69, 0x64, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x54, 0x78, 0x4d,
	0x63, 0x73, 0x42, 0x31, 0x82, 0x41, 0x2e, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73,
	0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x74,
	0x78, 0x2d, 0x6d, 0x63, 0x73, 0x52, 0x05, 0x74, 0x78, 0x4d, 0x63, 0x73, 0x12, 0x64, 0x0a, 0x07,
	0x74, 0x78, 0x5f, 0x6d, 0x67, 0x6d, 0x74, 0x18, 0xc3, 0x99, 0xde, 0xcd, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x32, 0x82, 0x41, 0x2f, 0x2f, 0x73, 0x73, 0x69, 0x64,
	0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73,
	0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x2f, 0x74, 0x78, 0x2d, 0x6d, 0x67, 0x6d, 0x74, 0x52, 0x06, 0x74, 0x78, 0x4d, 0x67,
	0x6d, 0x74, 0x12, 0x6c, 0x0a, 0x0a, 0x74, 0x78, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x18, 0xf6, 0xca, 0x9e, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x35,
	0x82, 0x41, 0x32, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62,
	0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x74, 0x78, 0x2d, 0x72, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x09, 0x74, 0x78, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x7a, 0x0a, 0x0f, 0x74, 0x78, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0xef, 0x98, 0xfe, 0x49, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x3a, 0x82, 0x41, 0x37, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69,
	0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x74, 0x78,
	0x2d, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x74,
	0x78, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x87, 0x01, 0x0a,
	0x13, 0x74, 0x78, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x18, 0xca, 0x88, 0xfa, 0x8a, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73,
	0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f,
	0x74, 0x78, 0x2d, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2d, 0x73, 0x75, 0x62, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x52, 0x11, 0x74, 0x78, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x53, 0x75,
	0x62, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x1a, 0xb0, 0x0f, 0x0a, 0x0a, 0x52, 0x78, 0x44, 0x61, 0x74,
	0x61, 0x44, 0x69, 0x73, 0x74, 0x12, 0x6f, 0x0a, 0x07, 0x72, 0x78, 0x5f, 0x30, 0x5f, 0x36, 0x34,
	0x18, 0xfe, 0xd4, 0xf9, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3f,
	0x82, 0x41, 0x3c, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62,
	0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x78, 0x2d, 0x64, 0x61,
	0x74, 0x61, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x2f, 0x72, 0x78, 0x2d, 0x30, 0x2d, 0x36, 0x34, 0x52,
	0x05, 0x72, 0x78, 0x30, 0x36, 0x34, 0x12, 0x7e, 0x0a, 0x0c, 0x72, 0x78, 0x5f, 0x31, 0x30, 0x32,
	0x35, 0x5f, 0x32, 0x30, 0x34, 0x38, 0x18, 0xd4, 0xb8, 0xef, 0x5e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f,
	0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69,
	0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x2f, 0x72, 0x78, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x2f, 0x72, 0x78,
	0x2d, 0x31, 0x30, 0x32, 0x35, 0x2d, 0x32, 0x30, 0x34, 0x38, 0x52, 0x0a, 0x72, 0x78, 0x31, 0x30,
	0x32, 0x35, 0x32, 0x30, 0x34, 0x38, 0x12, 0x79, 0x0a, 0x0a, 0x72, 0x78, 0x5f, 0x31, 0x32, 0x39,
	0x5f, 0x32, 0x35, 0x36, 0x18, 0xa9, 0xe1, 0xb6, 0xe5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73,
	0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f,
	0x72, 0x78, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x2f, 0x72, 0x78, 0x2d,
	0x31, 0x32, 0x39, 0x2d, 0x32, 0x35, 0x36, 0x52, 0x08, 0x72, 0x78, 0x31, 0x32, 0x39, 0x32, 0x35,
	0x36, 0x12, 0x8a, 0x01, 0x0a, 0x10, 0x72, 0x78, 0x5f, 0x31, 0x33, 0x31, 0x30, 0x37, 0x33, 0x5f,
	0x32, 0x36, 0x32, 0x31, 0x34, 0x34, 0x18, 0xde, 0xd8, 0xa6, 0x7c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x48, 0x82, 0x41, 0x45, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f,
	0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69,
	0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x2f, 0x72, 0x78, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x2f, 0x72, 0x78,
	0x2d, 0x31, 0x33, 0x31, 0x30, 0x37, 0x33, 0x2d, 0x32, 0x36, 0x32, 0x31, 0x34, 0x34, 0x52, 0x0e,
	0x72, 0x78, 0x31, 0x33, 0x31, 0x30, 0x37, 0x33, 0x32, 0x36, 0x32, 0x31, 0x34, 0x34, 0x12, 0x84,
	0x01, 0x0a, 0x0e, 0x72, 0x78, 0x5f, 0x31, 0x36, 0x33, 0x38, 0x35, 0x5f, 0x33, 0x32, 0x37, 0x36,
	0x38, 0x18, 0xd5, 0xe1, 0xd4, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x46, 0x82, 0x41, 0x43, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f,
	0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x78, 0x2d, 0x64,
	0x61, 0x74, 0x61, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x2f, 0x72, 0x78, 0x2d, 0x31, 0x36, 0x33, 0x38,
	0x35, 0x2d, 0x33, 0x32, 0x37, 0x36, 0x38, 0x52, 0x0c, 0x72, 0x78, 0x31, 0x36, 0x33, 0x38, 0x35,
	0x33, 0x32, 0x37, 0x36, 0x38, 0x12, 0x7e, 0x0a, 0x0c, 0x72, 0x78, 0x5f, 0x32, 0x30, 0x34, 0x39,
	0x5f, 0x34, 0x30, 0x39, 0x36, 0x18, 0xca, 0xcf, 0xb2, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73,
	0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f,
	0x72, 0x78, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x2f, 0x72, 0x78, 0x2d,
	0x32, 0x30, 0x34, 0x39, 0x2d, 0x34, 0x30, 0x39, 0x36, 0x52, 0x0a, 0x72, 0x78, 0x32, 0x30, 0x34,
	0x39, 0x34, 0x30, 0x39, 0x36, 0x12, 0x78, 0x0a, 0x0a, 0x72, 0x78, 0x5f, 0x32, 0x35, 0x37, 0x5f,
	0x35, 0x31, 0x32, 0x18, 0x8e, 0xbd, 0xb8, 0x62, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69,
	0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x78,
	0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x2f, 0x72, 0x78, 0x2d, 0x32, 0x35,
	0x37, 0x2d, 0x35, 0x31, 0x32, 0x52, 0x08, 0x72, 0x78, 0x32, 0x35, 0x37, 0x35, 0x31, 0x32, 0x12,
	0x8a, 0x01, 0x0a, 0x10, 0x72, 0x78, 0x5f, 0x32, 0x36, 0x32, 0x31, 0x34, 0x35, 0x5f, 0x35, 0x32,
	0x34, 0x32, 0x38, 0x38, 0x18, 0xef, 0xda, 0xde, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x48, 0x82, 0x41, 0x45, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73,
	0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x72,
	0x78, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x2f, 0x72, 0x78, 0x2d, 0x32,
	0x36, 0x32, 0x31, 0x34, 0x35, 0x2d, 0x35, 0x32, 0x34, 0x32, 0x38, 0x38, 0x52, 0x0e, 0x72, 0x78,
	0x32, 0x36, 0x32, 0x31, 0x34, 0x35, 0x35, 0x32, 0x34, 0x32, 0x38, 0x38, 0x12, 0x84, 0x01, 0x0a,
	0x0e, 0x72, 0x78, 0x5f, 0x33, 0x32, 0x37, 0x36, 0x39, 0x5f, 0x36, 0x35, 0x35, 0x33, 0x36, 0x18,
	0x8a, 0xdf, 0xe2, 0x70, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x46, 0x82,
	0x41, 0x43, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73,
	0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x78, 0x2d, 0x64, 0x61, 0x74,
	0x61, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x2f, 0x72, 0x78, 0x2d, 0x33, 0x32, 0x37, 0x36, 0x39, 0x2d,
	0x36, 0x35, 0x35, 0x33, 0x36, 0x52, 0x0c, 0x72, 0x78, 0x33, 0x32, 0x37, 0x36, 0x39, 0x36, 0x35,
	0x35, 0x33, 0x36, 0x12, 0x7f, 0x0a, 0x0c, 0x72, 0x78, 0x5f, 0x34, 0x30, 0x39, 0x37, 0x5f, 0x38,
	0x31, 0x39, 0x32, 0x18, 0xd6, 0xab, 0x82, 0xdd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73,
	0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x72,
	0x78, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x2f, 0x72, 0x78, 0x2d, 0x34,
	0x30, 0x39, 0x37, 0x2d, 0x38, 0x31, 0x39, 0x32, 0x52, 0x0a, 0x72, 0x78, 0x34, 0x30, 0x39, 0x37,
	0x38, 0x31, 0x39, 0x32, 0x12, 0x7b, 0x0a, 0x0b, 0x72, 0x78, 0x5f, 0x35, 0x31, 0x33, 0x5f, 0x31,
	0x30, 0x32, 0x34, 0x18, 0xae, 0xec, 0x9c, 0x74, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x43, 0x82, 0x41, 0x40, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69,
	0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x78,
	0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x2f, 0x72, 0x78, 0x2d, 0x35, 0x31,
	0x33, 0x2d, 0x31, 0x30, 0x32, 0x34, 0x52, 0x09, 0x72, 0x78, 0x35, 0x31, 0x33, 0x31, 0x30, 0x32,
	0x34, 0x12, 0x8e, 0x01, 0x0a, 0x11, 0x72, 0x78, 0x5f, 0x35, 0x32, 0x34, 0x32, 0x38, 0x39, 0x5f,
	0x31, 0x30, 0x34, 0x38, 0x35, 0x37, 0x36, 0x18, 0x8f, 0xf2, 0xd0, 0xce, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x49, 0x82, 0x41, 0x46, 0x2f, 0x73, 0x73, 0x69, 0x64,
	0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73,
	0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x2f, 0x72, 0x78, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x2f,
	0x72, 0x78, 0x2d, 0x35, 0x32, 0x34, 0x32, 0x38, 0x39, 0x2d, 0x31, 0x30, 0x34, 0x38, 0x35, 0x37,
	0x36, 0x52, 0x0f, 0x72, 0x78, 0x35, 0x32, 0x34, 0x32, 0x38, 0x39, 0x31, 0x30, 0x34, 0x38, 0x35,
	0x37, 0x36, 0x12, 0x76, 0x0a, 0x09, 0x72, 0x78, 0x5f, 0x36, 0x35, 0x5f, 0x31, 0x32, 0x38, 0x18,
	0xaa, 0xcd, 0x88, 0x80, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x41,
	0x82, 0x41, 0x3e, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62,
	0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x78, 0x2d, 0x64, 0x61,
	0x74, 0x61, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x2f, 0x72, 0x78, 0x2d, 0x36, 0x35, 0x2d, 0x31, 0x32,
	0x38, 0x52, 0x07, 0x72, 0x78, 0x36, 0x35, 0x31, 0x32, 0x38, 0x12, 0x87, 0x01, 0x0a, 0x0f, 0x72,
	0x78, 0x5f, 0x36, 0x35, 0x35, 0x33, 0x37, 0x5f, 0x31, 0x33, 0x31, 0x30, 0x37, 0x32, 0x18, 0x86,
	0xed, 0xcb, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x47, 0x82, 0x41,
	0x44, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73,
	0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x78, 0x2d, 0x64, 0x61, 0x74, 0x61,
	0x2d, 0x64, 0x69, 0x73, 0x74, 0x2f, 0x72, 0x78, 0x2d, 0x36, 0x35, 0x35, 0x33, 0x37, 0x2d, 0x31,
	0x33, 0x31, 0x30, 0x37, 0x32, 0x52, 0x0d, 0x72, 0x78, 0x36, 0x35, 0x35, 0x33, 0x37, 0x31, 0x33,
	0x31, 0x30, 0x37, 0x32, 0x12, 0x82, 0x01, 0x0a, 0x0d, 0x72, 0x78, 0x5f, 0x38, 0x31, 0x39, 0x33,
	0x5f, 0x31, 0x36, 0x33, 0x38, 0x34, 0x18, 0xb7, 0x87, 0xa9, 0xaf, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73,
	0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73,
	0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x2f, 0x72, 0x78, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x2f, 0x72,
	0x78, 0x2d, 0x38, 0x31, 0x39, 0x33, 0x2d, 0x31, 0x36, 0x33, 0x38, 0x34, 0x52, 0x0b, 0x72, 0x78,
	0x38, 0x31, 0x39, 0x33, 0x31, 0x36, 0x33, 0x38, 0x34, 0x1a, 0x99, 0x03, 0x0a, 0x09, 0x52, 0x78,
	0x44, 0x61, 0x74, 0x61, 0x57, 0x6d, 0x6d, 0x12, 0x62, 0x0a, 0x02, 0x62, 0x65, 0x18, 0x84, 0xd9,
	0xe4, 0xcc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x39, 0x82, 0x41,
	0x36, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73,
	0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x78, 0x2d, 0x64, 0x61, 0x74, 0x61,
	0x2d, 0x77, 0x6d, 0x6d, 0x2f, 0x62, 0x65, 0x52, 0x02, 0x62, 0x65, 0x12, 0x62, 0x0a, 0x02, 0x62,
	0x6b, 0x18, 0x8a, 0xd9, 0xe4, 0xcc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64,
	0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x78, 0x2d,
	0x64, 0x61, 0x74, 0x61, 0x2d, 0x77, 0x6d, 0x6d, 0x2f, 0x62, 0x6b, 0x52, 0x02, 0x62, 0x6b, 0x12,
	0x61, 0x0a, 0x02, 0x76, 0x69, 0x18, 0x94, 0xb3, 0xe4, 0x6c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73,
	0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f,
	0x72, 0x78, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x77, 0x6d, 0x6d, 0x2f, 0x76, 0x69, 0x52, 0x02,
	0x76, 0x69, 0x12, 0x61, 0x0a, 0x02, 0x76, 0x6f, 0x18, 0x92, 0xb3, 0xe4, 0x6c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x73, 0x73, 0x69, 0x64,
	0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73,
	0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x2f, 0x72, 0x78, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x77, 0x6d, 0x6d, 0x2f, 0x76,
	0x6f, 0x52, 0x02, 0x76, 0x6f, 0x1a, 0xef, 0x07, 0x0a, 0x05, 0x52, 0x78, 0x4d, 0x63, 0x73, 0x12,
	0x62, 0x0a, 0x04, 0x6d, 0x63, 0x73, 0x30, 0x18, 0x99, 0xfd, 0xae, 0x24, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73,
	0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73,
	0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x2f, 0x72, 0x78, 0x2d, 0x6d, 0x63, 0x73, 0x2f, 0x6d, 0x63, 0x73, 0x30, 0x52, 0x04, 0x6d,
	0x63, 0x73, 0x30, 0x12, 0x62, 0x0a, 0x04, 0x6d, 0x63, 0x73, 0x31, 0x18, 0x98, 0xfd, 0xae, 0x24,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x73,
	0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73,
	0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x78, 0x2d, 0x6d, 0x63, 0x73, 0x2f, 0x6d, 0x63, 0x73,
	0x31, 0x52, 0x04, 0x6d, 0x63, 0x73, 0x31, 0x12, 0x62, 0x0a, 0x04, 0x6d, 0x63, 0x73, 0x32, 0x18,
	0x9b, 0xfd, 0xae, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x36, 0x82,
	0x41, 0x33, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73,
	0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x78, 0x2d, 0x6d, 0x63, 0x73,
	0x2f, 0x6d, 0x63, 0x73, 0x32, 0x52, 0x04, 0x6d, 0x63, 0x73, 0x32, 0x12, 0x62, 0x0a, 0x04, 0x6d,
	0x63, 0x73, 0x33, 0x18, 0x9a, 0xfd, 0xae, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69,
	0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x78,
	0x2d, 0x6d, 0x63, 0x73, 0x2f, 0x6d, 0x63, 0x73, 0x33, 0x52, 0x04, 0x6d, 0x63, 0x73, 0x33, 0x12,
	0x62, 0x0a, 0x04, 0x6d, 0x63, 0x73, 0x34, 0x18, 0x9d, 0xfd, 0xae, 0x24, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73,
	0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73,
	0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x2f, 0x72, 0x78, 0x2d, 0x6d, 0x63, 0x73, 0x2f, 0x6d, 0x63, 0x73, 0x34, 0x52, 0x04, 0x6d,
	0x63, 0x73, 0x34, 0x12, 0x62, 0x0a, 0x04, 0x6d, 0x63, 0x73, 0x35, 0x18, 0x9c, 0xfd, 0xae, 0x24,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x73,
	0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73,
	0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x78, 0x2d, 0x6d, 0x63, 0x73, 0x2f, 0x6d, 0x63, 0x73,
	0x35, 0x52, 0x04, 0x6d, 0x63, 0x73, 0x35, 0x12, 0x62, 0x0a, 0x04, 0x6d, 0x63, 0x73, 0x36, 0x18,
	0x9f, 0xfd, 0xae, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x36, 0x82,
	0x41, 0x33, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73,
	0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x78, 0x2d, 0x6d, 0x63, 0x73,
	0x2f, 0x6d, 0x63, 0x73, 0x36, 0x52, 0x04, 0x6d, 0x63, 0x73, 0x36, 0x12, 0x62, 0x0a, 0x04, 0x6d,
	0x63, 0x73, 0x37, 0x18, 0x9e, 0xfd, 0xae, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69,
	0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x78,
	0x2d, 0x6d, 0x63, 0x73, 0x2f, 0x6d, 0x63, 0x73, 0x37, 0x52, 0x04, 0x6d, 0x63, 0x73, 0x37, 0x12,
	0x62, 0x0a, 0x04, 0x6d, 0x63, 0x73, 0x38, 0x18, 0x91, 0xfd, 0xae, 0x24, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73,
	0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73,
	0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x2f, 0x72, 0x78, 0x2d, 0x6d, 0x63, 0x73, 0x2f, 0x6d, 0x63, 0x73, 0x38, 0x52, 0x04, 0x6d,
	0x63, 0x73, 0x38, 0x12, 0x62, 0x0a, 0x04, 0x6d, 0x63, 0x73, 0x39, 0x18, 0x90, 0xfd, 0xae, 0x24,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x73,
	0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73,
	0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x78, 0x2d, 0x6d, 0x63, 0x73, 0x2f, 0x6d, 0x63, 0x73,
	0x39, 0x52, 0x04, 0x6d, 0x63, 0x73, 0x39, 0x1a, 0xb1, 0x0f, 0x0a, 0x0a, 0x54, 0x78, 0x44, 0x61,
	0x74, 0x61, 0x44, 0x69, 0x73, 0x74, 0x12, 0x70, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x30, 0x5f, 0x36,
	0x34, 0x18, 0xca, 0xdb, 0xcd, 0xe9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64,
	0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x74, 0x78, 0x2d,
	0x64, 0x61, 0x74, 0x61, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x2f, 0x74, 0x78, 0x2d, 0x30, 0x2d, 0x36,
	0x34, 0x52, 0x05, 0x74, 0x78, 0x30, 0x36, 0x34, 0x12, 0x7e, 0x0a, 0x0c, 0x74, 0x78, 0x5f, 0x31,
	0x30, 0x32, 0x35, 0x5f, 0x32, 0x30, 0x34, 0x38, 0x18, 0xf8, 0xf1, 0xd6, 0x3a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x73, 0x73, 0x69, 0x64,
	0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73,
	0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x2f, 0x74, 0x78, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x2f,
	0x74, 0x78, 0x2d, 0x31, 0x30, 0x32, 0x35, 0x2d, 0x32, 0x30, 0x34, 0x38, 0x52, 0x0a, 0x74, 0x78,
	0x31, 0x30, 0x32, 0x35, 0x32, 0x30, 0x34, 0x38, 0x12, 0x79, 0x0a, 0x0a, 0x74, 0x78, 0x5f, 0x31,
	0x32, 0x39, 0x5f, 0x32, 0x35, 0x36, 0x18, 0xcd, 0xc0, 0xa2, 0xb8, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73,
	0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73,
	0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x2f, 0x74, 0x78, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x2f, 0x74,
	0x78, 0x2d, 0x31, 0x32, 0x39, 0x2d, 0x32, 0x35, 0x36, 0x52, 0x08, 0x74, 0x78, 0x31, 0x32, 0x39,
	0x32, 0x35, 0x36, 0x12, 0x8b, 0x01, 0x0a, 0x10, 0x74, 0x78, 0x5f, 0x31, 0x33, 0x31, 0x30, 0x37,
	0x33, 0x5f, 0x32, 0x36, 0x32, 0x31, 0x34, 0x34, 0x18, 0xc2, 0xe3, 0x9f, 0xe3, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x48, 0x82, 0x41, 0x45, 0x2f, 0x73, 0x73, 0x69,
	0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62,
	0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x74, 0x78, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x64, 0x69, 0x73, 0x74,
	0x2f, 0x74, 0x78, 0x2d, 0x31, 0x33, 0x31, 0x30, 0x37, 0x33, 0x2d, 0x32, 0x36, 0x32, 0x31, 0x34,
	0x34, 0x52, 0x0e, 0x74, 0x78, 0x31, 0x33, 0x31, 0x30, 0x37, 0x33, 0x32, 0x36, 0x32, 0x31, 0x34,
	0x34, 0x12, 0x85, 0x01, 0x0a, 0x0e, 0x74, 0x78, 0x5f, 0x31, 0x36, 0x33, 0x38, 0x35, 0x5f, 0x33,
	0x32, 0x37, 0x36, 0x38, 0x18, 0xe9, 0xe6, 0xec, 0xbc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73,
	0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f,
	0x74, 0x78, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x2f, 0x74, 0x78, 0x2d,
	0x31, 0x36, 0x33, 0x38, 0x35, 0x2d, 0x33, 0x32, 0x37, 0x36, 0x38, 0x52, 0x0c, 0x74, 0x78, 0x31,
	0x36, 0x33, 0x38, 0x35, 0x33, 0x32, 0x37, 0x36, 0x38, 0x12, 0x7e, 0x0a, 0x0c, 0x74, 0x78, 0x5f,
	0x32, 0x30, 0x34, 0x39, 0x5f, 0x34, 0x30, 0x39, 0x36, 0x18, 0xc6, 0xc0, 0x95, 0x52, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x73, 0x73, 0x69,
	0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62,
	0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x74, 0x78, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x64, 0x69, 0x73, 0x74,
	0x2f, 0x74, 0x78, 0x2d, 0x32, 0x30, 0x34, 0x39, 0x2d, 0x34, 0x30, 0x39, 0x36, 0x52, 0x0a, 0x74,
	0x78, 0x32, 0x30, 0x34, 0x39, 0x34, 0x30, 0x39, 0x36, 0x12, 0x78, 0x0a, 0x0a, 0x74, 0x78, 0x5f,
	0x32, 0x35, 0x37, 0x5f, 0x35, 0x31, 0x32, 0x18, 0xca, 0xc0, 0xe5, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73,
	0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73,
	0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x2f, 0x74, 0x78, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x2f, 0x74,
	0x78, 0x2d, 0x32, 0x35, 0x37, 0x2d, 0x35, 0x31, 0x32, 0x52, 0x08, 0x74, 0x78, 0x32, 0x35, 0x37,
	0x35, 0x31, 0x32, 0x12, 0x8a, 0x01, 0x0a, 0x10, 0x74, 0x78, 0x5f, 0x32, 0x36, 0x32, 0x31, 0x34,
	0x35, 0x5f, 0x35, 0x32, 0x34, 0x32, 0x38, 0x38, 0x18, 0xab, 0xcb, 0xb2, 0x50, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x48, 0x82, 0x41, 0x45, 0x2f, 0x73, 0x73, 0x69, 0x64,
	0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73,
	0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x2f, 0x74, 0x78, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x2f,
	0x74, 0x78, 0x2d, 0x32, 0x36, 0x32, 0x31, 0x34, 0x35, 0x2d, 0x35, 0x32, 0x34, 0x32, 0x38, 0x38,
	0x52, 0x0e, 0x74, 0x78, 0x32, 0x36, 0x32, 0x31, 0x34, 0x35, 0x35, 0x32, 0x34, 0x32, 0x38, 0x38,
	0x12, 0x85, 0x01, 0x0a, 0x0e, 0x74, 0x78, 0x5f, 0x33, 0x32, 0x37, 0x36, 0x39, 0x5f, 0x36, 0x35,
	0x35, 0x33, 0x36, 0x18, 0xfe, 0xa5, 0xe0, 0xcb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73,
	0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x74,
	0x78, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x2f, 0x74, 0x78, 0x2d, 0x33,
	0x32, 0x37, 0x36, 0x39, 0x2d, 0x36, 0x35, 0x35, 0x33, 0x36, 0x52, 0x0c, 0x74, 0x78, 0x33, 0x32,
	0x37, 0x36, 0x39, 0x36, 0x35, 0x35, 0x33, 0x36, 0x12, 0x7e, 0x0a, 0x0c, 0x74, 0x78, 0x5f, 0x34,
	0x30, 0x39, 0x37, 0x5f, 0x38, 0x31, 0x39, 0x32, 0x18, 0xea, 0xdf, 0xb7, 0x68, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x73, 0x73, 0x69, 0x64,
	0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73,
	0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x2f, 0x74, 0x78, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x2f,
	0x74, 0x78, 0x2d, 0x34, 0x30, 0x39, 0x37, 0x2d, 0x38, 0x31, 0x39, 0x32, 0x52, 0x0a, 0x74, 0x78,
	0x34, 0x30, 0x39, 0x37, 0x38, 0x31, 0x39, 0x32, 0x12, 0x7b, 0x0a, 0x0b, 0x74, 0x78, 0x5f, 0x35,
	0x31, 0x33, 0x5f, 0x31, 0x30, 0x32, 0x34, 0x18, 0x9a, 0xd8, 0xd1, 0x1b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x43, 0x82, 0x41, 0x40, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73,
	0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73,
	0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x2f, 0x74, 0x78, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x2f, 0x74,
	0x78, 0x2d, 0x35, 0x31, 0x33, 0x2d, 0x31, 0x30, 0x32, 0x34, 0x52, 0x09, 0x74, 0x78, 0x35, 0x31,
	0x33, 0x31, 0x30, 0x32, 0x34, 0x12, 0x8d, 0x01, 0x0a, 0x11, 0x74, 0x78, 0x5f, 0x35, 0x32, 0x34,
	0x32, 0x38, 0x39, 0x5f, 0x31, 0x30, 0x34, 0x38, 0x35, 0x37, 0x36, 0x18, 0x8b, 0x9e, 0xbe, 0x69,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x49, 0x82, 0x41, 0x46, 0x2f, 0x73,
	0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73,
	0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x74, 0x78, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x64, 0x69,
	0x73, 0x74, 0x2f, 0x74, 0x78, 0x2d, 0x35, 0x32, 0x34, 0x32, 0x38, 0x39, 0x2d, 0x31, 0x30, 0x34,
	0x38, 0x35, 0x37, 0x36, 0x52, 0x0f, 0x74, 0x78, 0x35, 0x32, 0x34, 0x32, 0x38, 0x39, 0x31, 0x30,
	0x34, 0x38, 0x35, 0x37, 0x36, 0x12, 0x75, 0x0a, 0x09, 0x74, 0x78, 0x5f, 0x36, 0x35, 0x5f, 0x31,
	0x32, 0x38, 0x18, 0xd6, 0xd1, 0xa6, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64,
	0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x74, 0x78, 0x2d,
	0x64, 0x61, 0x74, 0x61, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x2f, 0x74, 0x78, 0x2d, 0x36, 0x35, 0x2d,
	0x31, 0x32, 0x38, 0x52, 0x07, 0x74, 0x78, 0x36, 0x35, 0x31, 0x32, 0x38, 0x12, 0x87, 0x01, 0x0a,
	0x0f, 0x74, 0x78, 0x5f, 0x36, 0x35, 0x35, 0x33, 0x37, 0x5f, 0x31, 0x33, 0x31, 0x30, 0x37, 0x32,
	0x18, 0xfa, 0xb4, 0x8f, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x47,
	0x82, 0x41, 0x44, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62,
	0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x74, 0x78, 0x2d, 0x64, 0x61,
	0x74, 0x61, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x2f, 0x74, 0x78, 0x2d, 0x36, 0x35, 0x35, 0x33, 0x37,
	0x2d, 0x31, 0x33, 0x31, 0x30, 0x37, 0x32, 0x52, 0x0d, 0x74, 0x78, 0x36, 0x35, 0x35, 0x33, 0x37,
	0x31, 0x33, 0x31, 0x30, 0x37, 0x32, 0x12, 0x82, 0x01, 0x0a, 0x0d, 0x74, 0x78, 0x5f, 0x38, 0x31,
	0x39, 0x33, 0x5f, 0x31, 0x36, 0x33, 0x38, 0x34, 0x18, 0xa3, 0x8d, 0xd6, 0xb1, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x73, 0x73, 0x69,
	0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62,
	0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x74, 0x78, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x64, 0x69, 0x73, 0x74,
	0x2f, 0x74, 0x78, 0x2d, 0x38, 0x31, 0x39, 0x33, 0x2d, 0x31, 0x36, 0x33, 0x38, 0x34, 0x52, 0x0b,
	0x74, 0x78, 0x38, 0x31, 0x39, 0x33, 0x31, 0x36, 0x33, 0x38, 0x34, 0x1a, 0x9b, 0x03, 0x0a, 0x09,
	0x54, 0x78, 0x44, 0x61, 0x74, 0x61, 0x57, 0x6d, 0x6d, 0x12, 0x62, 0x0a, 0x02, 0x62, 0x65, 0x18,
	0xde, 0x9b, 0xe4, 0xe7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x39,
	0x82, 0x41, 0x36, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62,
	0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x74, 0x78, 0x2d, 0x64, 0x61,
	0x74, 0x61, 0x2d, 0x77, 0x6d, 0x6d, 0x2f, 0x62, 0x65, 0x52, 0x02, 0x62, 0x65, 0x12, 0x62, 0x0a,
	0x02, 0x62, 0x6b, 0x18, 0xd0, 0x9b, 0xe4, 0xe7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73,
	0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x74,
	0x78, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x77, 0x6d, 0x6d, 0x2f, 0x62, 0x6b, 0x52, 0x02, 0x62,
	0x6b, 0x12, 0x62, 0x0a, 0x02, 0x76, 0x69, 0x18, 0xbe, 0xf5, 0xe3, 0x87, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x73, 0x73, 0x69, 0x64,
	0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73,
	0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x2f, 0x74, 0x78, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x77, 0x6d, 0x6d, 0x2f, 0x76,
	0x69, 0x52, 0x02, 0x76, 0x69, 0x12, 0x62, 0x0a, 0x02, 0x76, 0x6f, 0x18, 0xb8, 0xf5, 0xe3, 0x87,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f,
	0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64,
	0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x74, 0x78, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x77,
	0x6d, 0x6d, 0x2f, 0x76, 0x6f, 0x52, 0x02, 0x76, 0x6f, 0x1a, 0xef, 0x07, 0x0a, 0x05, 0x54, 0x78,
	0x4d, 0x63, 0x73, 0x12, 0x62, 0x0a, 0x04, 0x6d, 0x63, 0x73, 0x30, 0x18, 0xcf, 0xaa, 0x8e, 0x64,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x73,
	0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73,
	0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x74, 0x78, 0x2d, 0x6d, 0x63, 0x73, 0x2f, 0x6d, 0x63, 0x73,
	0x30, 0x52, 0x04, 0x6d, 0x63, 0x73, 0x30, 0x12, 0x62, 0x0a, 0x04, 0x6d, 0x63, 0x73, 0x31, 0x18,
	0xce, 0xaa, 0x8e, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x36, 0x82,
	0x41, 0x33, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73,
	0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x74, 0x78, 0x2d, 0x6d, 0x63, 0x73,
	0x2f, 0x6d, 0x63, 0x73, 0x31, 0x52, 0x04, 0x6d, 0x63, 0x73, 0x31, 0x12, 0x62, 0x0a, 0x04, 0x6d,
	0x63, 0x73, 0x32, 0x18, 0xcd, 0xaa, 0x8e, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69,
	0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x74, 0x78,
	0x2d, 0x6d, 0x63, 0x73, 0x2f, 0x6d, 0x63, 0x73, 0x32, 0x52, 0x04, 0x6d, 0x63, 0x73, 0x32, 0x12,
	0x62, 0x0a, 0x04, 0x6d, 0x63, 0x73, 0x33, 0x18, 0xcc, 0xaa, 0x8e, 0x64, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73,
	0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73,
	0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x2f, 0x74, 0x78, 0x2d, 0x6d, 0x63, 0x73, 0x2f, 0x6d, 0x63, 0x73, 0x33, 0x52, 0x04, 0x6d,
	0x63, 0x73, 0x33, 0x12, 0x62, 0x0a, 0x04, 0x6d, 0x63, 0x73, 0x34, 0x18, 0xcb, 0xaa, 0x8e, 0x64,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x73,
	0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73,
	0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x74, 0x78, 0x2d, 0x6d, 0x63, 0x73, 0x2f, 0x6d, 0x63, 0x73,
	0x34, 0x52, 0x04, 0x6d, 0x63, 0x73, 0x34, 0x12, 0x62, 0x0a, 0x04, 0x6d, 0x63, 0x73, 0x35, 0x18,
	0xca, 0xaa, 0x8e, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x36, 0x82,
	0x41, 0x33, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73,
	0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x74, 0x78, 0x2d, 0x6d, 0x63, 0x73,
	0x2f, 0x6d, 0x63, 0x73, 0x35, 0x52, 0x04, 0x6d, 0x63, 0x73, 0x35, 0x12, 0x62, 0x0a, 0x04, 0x6d,
	0x63, 0x73, 0x36, 0x18, 0xc9, 0xaa, 0x8e, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69,
	0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x74, 0x78,
	0x2d, 0x6d, 0x63, 0x73, 0x2f, 0x6d, 0x63, 0x73, 0x36, 0x52, 0x04, 0x6d, 0x63, 0x73, 0x36, 0x12,
	0x62, 0x0a, 0x04, 0x6d, 0x63, 0x73, 0x37, 0x18, 0xc8, 0xaa, 0x8e, 0x64, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73,
	0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73,
	0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x2f, 0x74, 0x78, 0x2d, 0x6d, 0x63, 0x73, 0x2f, 0x6d, 0x63, 0x73, 0x37, 0x52, 0x04, 0x6d,
	0x63, 0x73, 0x37, 0x12, 0x62, 0x0a, 0x04, 0x6d, 0x63, 0x73, 0x38, 0x18, 0xc7, 0xaa, 0x8e, 0x64,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x73,
	0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x73,
	0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x74, 0x78, 0x2d, 0x6d, 0x63, 0x73, 0x2f, 0x6d, 0x63, 0x73,
	0x38, 0x52, 0x04, 0x6d, 0x63, 0x73, 0x38, 0x12, 0x62, 0x0a, 0x04, 0x6d, 0x63, 0x73, 0x39, 0x18,
	0xc6, 0xaa, 0x8e, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x36, 0x82,
	0x41, 0x33, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73,
	0x73, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x74, 0x78, 0x2d, 0x6d, 0x63, 0x73,
	0x2f, 0x6d, 0x63, 0x73, 0x39, 0x52, 0x04, 0x6d, 0x63, 0x73, 0x39, 0x1a, 0xc6, 0x01, 0x0a, 0x08,
	0x42, 0x73, 0x73, 0x69, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x3f, 0x0a, 0x08, 0x72, 0x61, 0x64, 0x69,
	0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x24, 0x82, 0x41, 0x21, 0x2f,
	0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64,
	0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2d, 0x69, 0x64,
	0x52, 0x07, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x09, 0x62, 0x73, 0x73,
	0x69, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x82, 0x41,
	0x1e, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73,
	0x69, 0x64, 0x73, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x52,
	0x08, 0x62, 0x73, 0x73, 0x69, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x05, 0x62, 0x73, 0x73,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x73, 0x2e, 0x53, 0x73, 0x69, 0x64,
	0x2e, 0x42, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2e, 0x42, 0x73, 0x73, 0x69, 0x64, 0x52, 0x05, 0x62,
	0x73, 0x73, 0x69, 0x64, 0x1a, 0xf2, 0x27, 0x0a, 0x07, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x62, 0x0a, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0xe4, 0xf3, 0x9d, 0x5e, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x53, 0x73, 0x69, 0x64, 0x73, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x2e, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x42, 0x1d, 0x82,
	0x41, 0x1a, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x1a, 0x81, 0x26, 0x0a, 0x06, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12,
	0x9f, 0x01, 0x0a, 0x13, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0xdd, 0xe6, 0xfc, 0x52, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x73,
	0x69, 0x64, 0x73, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x42, 0x31, 0x82, 0x41, 0x2e, 0x2f,
	0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2d, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x12, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x98, 0x01, 0x0a, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xdb, 0xfb, 0xad, 0xfa, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53,
	0x73, 0x69, 0x64, 0x73, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x2f, 0x82, 0x41, 0x2c, 0x2f, 0x73,
	0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x78, 0x0a, 0x09,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x66, 0x18, 0xcb, 0xad, 0x92, 0xa2, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x53, 0x73, 0x69, 0x64, 0x73, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x2e, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x52, 0x66, 0x42, 0x27, 0x82, 0x41, 0x24, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73,
	0x73, 0x69, 0x64, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x72, 0x66, 0x52, 0x08, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x52, 0x66, 0x12, 0x94, 0x01, 0x0a, 0x10, 0x64, 0x6f, 0x74, 0x31, 0x31,
	0x6b, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x18, 0xa3, 0xbb, 0xca, 0xe7,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x73, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x2e, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x6f, 0x74,
	0x31, 0x31, 0x4b, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x42, 0x2e, 0x82, 0x41,
	0x2b, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x6f, 0x74, 0x31,
	0x31, 0x6b, 0x2d, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x52, 0x0f, 0x64, 0x6f,
	0x74, 0x31, 0x31, 0x6b, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x12, 0x69, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xde, 0x9e, 0xfe, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x73, 0x69,
	0x64, 0x73, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x23, 0x82, 0x41,
	0x20, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xf3, 0x03, 0x0a, 0x12, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x91, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x8f, 0xa6, 0xc4, 0xef, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x53, 0x73, 0x69, 0x64, 0x73, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x2e, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x37, 0x82, 0x41, 0x34, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73,
	0x73, 0x69, 0x64, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x1a, 0xc8, 0x02, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x88, 0x01,
	0x0a, 0x0f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0xd9, 0xd1, 0x98, 0x73, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x47, 0x82, 0x41, 0x44, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x2d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0xb3, 0x01, 0x0a, 0x13, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x18, 0xca, 0xe5, 0xd2, 0x85, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x57, 0x69, 0x66, 0x69, 0x54, 0x79, 0x70, 0x65, 0x73, 0x43, 0x4c, 0x49, 0x45, 0x4e,
	0x54, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x49, 0x45, 0x53, 0x42, 0x4b, 0x82,
	0x41, 0x48, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2d, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x63, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x12, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x1a, 0xd0,
	0x08, 0x0a, 0x10, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x8d, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x85, 0xfb,
	0xe4, 0x90, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x73, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x2e,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73,
	0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x1a, 0xab, 0x07, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x94, 0x01,
	0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xa9,
	0xe0, 0x81, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x57,
	0x69, 0x66, 0x69, 0x54, 0x79, 0x70, 0x65, 0x73, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73,
	0x73, 0x69, 0x64, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xfa, 0x9a, 0xb6, 0xe6, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x73, 0x73, 0x69,
	0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x0e,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x74,
	0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xf3, 0x90, 0x80, 0x4c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f,
	0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x7f, 0x0a, 0x0c, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0xf6, 0xd5, 0xa1, 0x6c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f,
	0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x34,
	0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x34, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x85, 0x01, 0x0a, 0x0e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0xe8, 0xa9, 0xad, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x73, 0x73,
	0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x69, 0x70, 0x76, 0x36, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x0d,
	0x69, 0x70, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x8b, 0x01,
	0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x18, 0xd5, 0x94, 0xaa, 0x61, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73,
	0x69, 0x64, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x74, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xe8, 0xbc, 0xec, 0x30, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x73, 0x73, 0x69,
	0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x1a, 0xf0, 0x07, 0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x66, 0x12, 0x7c,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x95, 0x98, 0x9d, 0x31, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x73,
	0x69, 0x64, 0x73, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x66,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x2d, 0x82, 0x41, 0x2a, 0x2f, 0x73, 0x73, 0x69, 0x64,
	0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x72, 0x66, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xe5, 0x06, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xae, 0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0xd8, 0xfb, 0x83, 0x72, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x43, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x53, 0x73, 0x69, 0x64, 0x73, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x2e, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x52, 0x66, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x3d, 0x82, 0x41, 0x3a, 0x2f, 0x73, 0x73,
	0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x72,
	0x66, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x6d, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x8a, 0x81, 0xe5, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x37, 0x82, 0x41, 0x34, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73,
	0x69, 0x64, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x72, 0x66, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x09, 0x66, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x69, 0x0a, 0x08, 0x70, 0x68, 0x79, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0xa8, 0xe1, 0xc7, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64,
	0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x72, 0x66, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x70, 0x68, 0x79, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x52, 0x07, 0x70, 0x68, 0x79, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x5d, 0x0a, 0x04, 0x72, 0x73, 0x73, 0x69, 0x18, 0xcd, 0xf9, 0x9f, 0x27, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x49, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x32, 0x82, 0x41, 0x2f, 0x2f, 0x73, 0x73, 0x69, 0x64,
	0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x72, 0x66, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x73, 0x73, 0x69, 0x52, 0x04, 0x72, 0x73, 0x73, 0x69,
	0x12, 0x5c, 0x0a, 0x03, 0x73, 0x6e, 0x72, 0x18, 0xf7, 0xe9, 0x8e, 0xa4, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x31, 0x82, 0x41, 0x2e, 0x2f, 0x73, 0x73, 0x69, 0x64,
	0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x72, 0x66, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x6e, 0x72, 0x52, 0x03, 0x73, 0x6e, 0x72, 0x12, 0x59,
	0x0a, 0x02, 0x73, 0x73, 0x18, 0x9a, 0xc1, 0xf6, 0x8d, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x30, 0x82, 0x41, 0x2d, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73,
	0x73, 0x69, 0x64, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x72, 0x66, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x73, 0x73, 0x52, 0x02, 0x73, 0x73, 0x22, 0xb8, 0x01, 0x0a, 0x0e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x14,
	0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x10, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x10, 0x01, 0x1a, 0x04, 0x82, 0x41,
	0x01, 0x41, 0x12, 0x1a, 0x0a, 0x10, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x42, 0x10, 0x02, 0x1a, 0x04, 0x82, 0x41, 0x01, 0x42, 0x12, 0x1a,
	0x0a, 0x10, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x47, 0x10, 0x03, 0x1a, 0x04, 0x82, 0x41, 0x01, 0x47, 0x12, 0x1a, 0x0a, 0x10, 0x43, 0x4f,
	0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x10, 0x04,
	0x1a, 0x04, 0x82, 0x41, 0x01, 0x4e, 0x12, 0x1c, 0x0a, 0x11, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x43, 0x10, 0x05, 0x1a, 0x05, 0x82,
	0x41, 0x02, 0x41, 0x43, 0x1a, 0xdb, 0x06, 0x0a, 0x0f, 0x44, 0x6f, 0x74, 0x31, 0x31, 0x4b, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x12, 0x8a, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0xbd, 0xfa, 0x92, 0x39, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x73, 0x2e, 0x53,
	0x73, 0x69, 0x64, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x44, 0x6f, 0x74, 0x31, 0x31, 0x4b, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x34, 0x82, 0x41, 0x31, 0x2f, 0x73, 0x73,
	0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x6b, 0x2d, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xba, 0x05, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x90, 0x01, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0xd1, 0xec, 0xd0, 0x54, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x48, 0x82, 0x41, 0x45, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73,
	0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x6b, 0x2d, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x2d, 0x6c, 0x6f, 0x61, 0x64, 0x2d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x11, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x89, 0x01, 0x0a, 0x10, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f,
	0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x18, 0xe8, 0xbb, 0x8d, 0xea, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x73, 0x73, 0x69, 0x64,
	0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x6b, 0x2d, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2d, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x52, 0x0f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x12, 0x85,
	0x01, 0x0a, 0x0e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x62, 0x73, 0x73, 0x69,
	0x64, 0x18, 0xb2, 0xbb, 0xe2, 0xac, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x43, 0x82, 0x41, 0x40, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73,
	0x69, 0x64, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x6b, 0x2d, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2d, 0x62, 0x73, 0x73, 0x69, 0x64, 0x52, 0x0d, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x42, 0x73, 0x73, 0x69, 0x64, 0x12, 0x89, 0x01, 0x0a, 0x10, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0xd4, 0xc4, 0x89, 0x9f,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f,
	0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x6b,
	0x2d, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x52, 0x0f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x12, 0x7e, 0x0a, 0x0d, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x72,
	0x73, 0x73, 0x69, 0x18, 0xc2, 0xfd, 0xca, 0x4d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64,
	0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f,
	0x64, 0x6f, 0x74, 0x31, 0x31, 0x6b, 0x2d, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2d,
	0x72, 0x73, 0x73, 0x69, 0x52, 0x0c, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x52, 0x73,
	0x73, 0x69, 0x1a, 0xa3, 0x05, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x82, 0x01, 0x0a,
	0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0xb2, 0xad, 0xc6, 0xe5, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x53, 0x73, 0x69, 0x64, 0x73, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x2e, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x42, 0x2c, 0x82, 0x41, 0x29, 0x2f, 0x73,
	0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x53, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0xc6, 0xa3, 0x87, 0x5f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x27, 0x82, 0x41, 0x24, 0x2f, 0x73, 0x73,
	0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x61,
	0x63, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x1a, 0xbf, 0x03, 0x0a, 0x08, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x69, 0x0a, 0x08, 0x72, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0xb5, 0x81, 0xb8, 0xec, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x35,
	0x82, 0x41, 0x32, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x78, 0x2d,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x52, 0x07, 0x72, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x6e,
	0x0a, 0x0a, 0x72, 0x78, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x8a, 0xde, 0xbc,
	0x5a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x37, 0x82, 0x41, 0x34, 0x2f,
	0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x78, 0x2d, 0x72, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x52, 0x09, 0x72, 0x78, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x68,
	0x0a, 0x08, 0x74, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0xcf, 0xfa, 0x8e, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x73, 0x73,
	0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x74, 0x78, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x52,
	0x07, 0x74, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x6e, 0x0a, 0x0a, 0x74, 0x78, 0x5f, 0x72,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x98, 0xa7, 0x88, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x37, 0x82, 0x41, 0x34, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f,
	0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x2f, 0x74, 0x78, 0x2d, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x09, 0x74,
	0x78, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x1a, 0x7f, 0x0a, 0x09, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x21, 0x82, 0x41, 0x1e, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73,
	0x69, 0x64, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2f, 0x6d, 0x61, 0x63, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12, 0x3d, 0x0a, 0x06, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x73, 0x2e, 0x53, 0x73,
	0x69, 0x64, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x1a, 0xaf, 0x16, 0x0a, 0x06, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x69, 0x0a, 0x10, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73,
	0x65, 0x5f, 0x61, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xfd, 0xb8, 0xee, 0x5b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x26, 0x82, 0x41, 0x23, 0x2f, 0x73, 0x73, 0x69, 0x64,
	0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x64,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x2d, 0x61, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x0f,
	0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x41, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x85, 0x01, 0x0a, 0x13, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x73, 0x5f, 0x32, 0x67, 0x18, 0xbe, 0x90, 0xa6, 0xa3, 0x01, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x57, 0x69, 0x66, 0x69, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x44, 0x41, 0x54, 0x41, 0x52, 0x41, 0x54, 0x45, 0x42, 0x29, 0x82, 0x41, 0x26, 0x2f,
	0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x72, 0x61, 0x74,
	0x65, 0x73, 0x2d, 0x32, 0x67, 0x52, 0x10, 0x62, 0x61, 0x73, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x61, 0x74, 0x65, 0x73, 0x32, 0x67, 0x12, 0x85, 0x01, 0x0a, 0x13, 0x62, 0x61, 0x73, 0x69,
	0x63, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x35, 0x67, 0x18,
	0x8b, 0x93, 0xa6, 0xab, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x57, 0x69, 0x66, 0x69, 0x54, 0x79, 0x70, 0x65, 0x73, 0x44, 0x41, 0x54, 0x41, 0x52, 0x41,
	0x54, 0x45, 0x42, 0x29, 0x82, 0x41, 0x26, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73,
	0x69, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2d,
	0x64, 0x61, 0x74, 0x61, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x73, 0x2d, 0x35, 0x67, 0x52, 0x10, 0x62,
	0x61, 0x73, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x52, 0x61, 0x74, 0x65, 0x73, 0x35, 0x67, 0x12,
	0x6a, 0x0a, 0x10, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0xb3, 0xcc, 0xe2, 0x8a, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x26, 0x82, 0x41, 0x23, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73,
	0x69, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x2d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0f, 0x62, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x03, 0x63,
	0x73, 0x61, 0x18, 0xe6, 0x9c, 0x95, 0x76, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x19, 0x82, 0x41, 0x16, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x73, 0x61, 0x52, 0x03, 0x63, 0x73, 0x61,
	0x12, 0x5e, 0x0a, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x6c, 0x61, 0x6e,
	0x18, 0x94, 0x84, 0x87, 0xce, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x22, 0x82, 0x41, 0x1f, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2d, 0x76,
	0x6c, 0x61, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x6c, 0x61, 0x6e,
	0x12, 0x61, 0x0a, 0x0d, 0x64, 0x68, 0x63, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x18, 0x9c, 0xdf, 0xca, 0x9d, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x23, 0x82, 0x41, 0x20, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x2d, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x52, 0x0c, 0x64, 0x68, 0x63, 0x70, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x12, 0x4d, 0x0a, 0x06, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x6b, 0x18, 0xf1, 0x9b,
	0xc7, 0xe1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1c, 0x82, 0x41,
	0x19, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x6b, 0x52, 0x06, 0x64, 0x6f, 0x74, 0x31,
	0x31, 0x6b, 0x12, 0x44, 0x0a, 0x03, 0x64, 0x76, 0x61, 0x18, 0x82, 0xfd, 0xb5, 0xde, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x19, 0x82, 0x41, 0x16, 0x2f, 0x73, 0x73,
	0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x64, 0x76, 0x61, 0x52, 0x03, 0x64, 0x76, 0x61, 0x12, 0x4f, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0xa6, 0xa7, 0xd2, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x1d, 0x82, 0x41, 0x1a, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69,
	0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x5b, 0x0a, 0x0b, 0x67, 0x74, 0x6b,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0xbf, 0xd7, 0xa5, 0xcc, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x21, 0x82, 0x41, 0x1e, 0x2f, 0x73, 0x73, 0x69,
	0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x67,
	0x74, 0x6b, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x52, 0x0a, 0x67, 0x74, 0x6b, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x4d, 0x0a, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e,
	0x18, 0xaf, 0xb4, 0xf5, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x1c, 0x82, 0x41, 0x19, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x52, 0x06, 0x68,
	0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x66, 0x0a, 0x0f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6e, 0x64,
	0x70, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x94, 0xad, 0x8d, 0x98, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x25, 0x82, 0x41, 0x22, 0x2f, 0x73, 0x73, 0x69,
	0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69,
	0x70, 0x76, 0x36, 0x2d, 0x6e, 0x64, 0x70, 0x2d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0d,
	0x69, 0x70, 0x76, 0x36, 0x4e, 0x64, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x77, 0x0a,
	0x15, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6e, 0x64, 0x70, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0xe8, 0xa9, 0xd9, 0xbb, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2b, 0x82, 0x41, 0x28, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73,
	0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x70, 0x76,
	0x36, 0x2d, 0x6e, 0x64, 0x70, 0x2d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2d, 0x74, 0x69, 0x6d,
	0x65, 0x72, 0x52, 0x12, 0x69, 0x70, 0x76, 0x36, 0x4e, 0x64, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x6a, 0x0a, 0x10, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0xce, 0xa6, 0xf3, 0xe3, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x26, 0x82, 0x41, 0x23, 0x2f, 0x73,
	0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2d, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x0f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x48, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x86, 0x9d, 0xef, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1a, 0x82, 0x41, 0x17, 0x2f,
	0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x03,
	0x6f, 0x6b, 0x63, 0x18, 0xa8, 0xc2, 0xf0, 0x75, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x19, 0x82, 0x41, 0x16, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69,
	0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6f, 0x6b, 0x63, 0x52, 0x03, 0x6f, 0x6b,
	0x63, 0x12, 0x91, 0x01, 0x0a, 0x13, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0xc9, 0xa0, 0xe8, 0xe5, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x57, 0x69, 0x66, 0x69, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x46, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x4e, 0x43, 0x59, 0x42, 0x29, 0x82, 0x41, 0x26, 0x2f, 0x73, 0x73, 0x69, 0x64,
	0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x5e, 0x0a, 0x06, 0x6f, 0x70, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0xaf, 0x8a, 0x88, 0xc3, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x73, 0x2e, 0x53, 0x73, 0x69,
	0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x6d, 0x6f, 0x64, 0x65, 0x42,
	0x1c, 0x82, 0x41, 0x19, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6f, 0x70, 0x6d, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x6f,
	0x70, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x5b, 0x0a, 0x0b, 0x70, 0x74, 0x6b, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x18, 0xf0, 0xbe, 0xe5, 0xc0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x21, 0x82, 0x41, 0x1e, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73,
	0x73, 0x69, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x74, 0x6b, 0x2d, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x52, 0x0a, 0x70, 0x74, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x12, 0x54, 0x0a, 0x09, 0x71, 0x62, 0x73, 0x73, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0xf1, 0xe2, 0xd4, 0x55, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1f, 0x82,
	0x41, 0x1c, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x71, 0x62, 0x73, 0x73, 0x2d, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x08,
	0x71, 0x62, 0x73, 0x73, 0x4c, 0x6f, 0x61, 0x64, 0x12, 0x60, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0xe0, 0xf0, 0xb9, 0xa4, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x22, 0x82, 0x41, 0x1f, 0x2f, 0x73,
	0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x6c, 0x0a, 0x11, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0xe6, 0xd9, 0xe3, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x27, 0x82,
	0x41, 0x24, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x69, 0x73, 0x6f,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x91, 0x01, 0x0a, 0x17, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x73, 0x5f, 0x32, 0x67, 0x18, 0xea, 0xc3, 0xb6, 0xa1, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x27,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x57, 0x69, 0x66, 0x69, 0x54, 0x79, 0x70, 0x65, 0x73, 0x44,
	0x41, 0x54, 0x41, 0x52, 0x41, 0x54, 0x45, 0x42, 0x2d, 0x82, 0x41, 0x2a, 0x2f, 0x73, 0x73, 0x69,
	0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x72, 0x61,
	0x74, 0x65, 0x73, 0x2d, 0x32, 0x67, 0x52, 0x14, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x61, 0x74, 0x65, 0x73, 0x32, 0x67, 0x12, 0x90, 0x01, 0x0a,
	0x17, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x35, 0x67, 0x18, 0xef, 0xad, 0xb6, 0x69, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x57, 0x69, 0x66, 0x69, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x44, 0x41, 0x54, 0x41, 0x52, 0x41, 0x54, 0x45, 0x42, 0x2d, 0x82, 0x41, 0x2a, 0x2f,
	0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x2d, 0x64, 0x61, 0x74, 0x61,
	0x2d, 0x72, 0x61, 0x74, 0x65, 0x73, 0x2d, 0x35, 0x67, 0x52, 0x14, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x61, 0x74, 0x65, 0x73, 0x35, 0x67, 0x12,
	0x55, 0x0a, 0x09, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0xad, 0xc1, 0xcc,
	0xd1, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1f, 0x82, 0x41, 0x1c,
	0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x76, 0x6c,
	0x61, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x08, 0x77, 0x70, 0x61, 0x32, 0x5f, 0x70,
	0x73, 0x6b, 0x18, 0xe2, 0xde, 0xf5, 0x55, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x1e, 0x82, 0x41, 0x1b, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73,
	0x69, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x77, 0x70, 0x61, 0x32, 0x2d, 0x70,
	0x73, 0x6b, 0x52, 0x07, 0x77, 0x70, 0x61, 0x32, 0x50, 0x73, 0x6b, 0x22, 0x7e, 0x0a, 0x06, 0x4f,
	0x70, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x0b, 0x4f, 0x50, 0x4d, 0x4f, 0x44, 0x45, 0x5f,
	0x4f, 0x50, 0x45, 0x4e, 0x10, 0x00, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x4f, 0x50, 0x45, 0x4e, 0x12,
	0x2a, 0x0a, 0x14, 0x4f, 0x50, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x57, 0x50, 0x41, 0x32, 0x5f, 0x50,
	0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x02, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x57, 0x50,
	0x41, 0x32, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41, 0x4c, 0x12, 0x2e, 0x0a, 0x16, 0x4f,
	0x50, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x57, 0x50, 0x41, 0x32, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52,
	0x50, 0x52, 0x49, 0x53, 0x45, 0x10, 0x03, 0x1a, 0x12, 0x82, 0x41, 0x0f, 0x57, 0x50, 0x41, 0x32,
	0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x52, 0x49, 0x53, 0x45, 0x1a, 0x82, 0x0a, 0x0a, 0x06,
	0x44, 0x6f, 0x74, 0x31, 0x31, 0x52, 0x12, 0x5e, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0xbe, 0xcd, 0xfd, 0xec, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x73, 0x2e, 0x53, 0x73,
	0x69, 0x64, 0x2e, 0x44, 0x6f, 0x74, 0x31, 0x31, 0x52, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x1c, 0x82, 0x41, 0x19, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64,
	0x2f, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x59, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0xab, 0xb5, 0xc4, 0x47, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x73, 0x2e, 0x53, 0x73, 0x69, 0x64,
	0x2e, 0x44, 0x6f, 0x74, 0x31, 0x31, 0x52, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x1b, 0x82,
	0x41, 0x18, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x64, 0x6f,
	0x74, 0x31, 0x31, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x1a, 0xa0, 0x04, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x54, 0x0a, 0x06,
	0x64, 0x6f, 0x74, 0x31, 0x31, 0x72, 0x18, 0xe2, 0xcf, 0xa9, 0x92, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x23, 0x82, 0x41, 0x20, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73,
	0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x72, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x72, 0x52, 0x06, 0x64, 0x6f, 0x74, 0x31,
	0x31, 0x72, 0x12, 0x6e, 0x0a, 0x0f, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x72, 0x5f, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x69, 0x64, 0x18, 0xe8, 0x83, 0x8b, 0xb7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x2c, 0x82, 0x41, 0x29, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f,
	0x73, 0x73, 0x69, 0x64, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x72, 0x2d, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x69, 0x64, 0x52, 0x0e, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x69, 0x64, 0x12, 0x86, 0x01, 0x0a, 0x0d, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x72, 0x5f, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0xfc, 0x9f, 0xb5, 0xd1, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x73, 0x69, 0x64,
	0x73, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x2e, 0x44, 0x6f, 0x74, 0x31, 0x31, 0x52, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44, 0x6f, 0x74, 0x31, 0x31, 0x52, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x42, 0x2a, 0x82, 0x41, 0x27, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69,
	0x64, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x64, 0x6f, 0x74, 0x31, 0x31, 0x72, 0x2d, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0c, 0x64,
	0x6f, 0x74, 0x31, 0x31, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x7b, 0x0a, 0x14, 0x64,
	0x6f, 0x74, 0x31, 0x31, 0x72, 0x5f, 0x72, 0x31, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0xb3, 0xfd, 0x84, 0x61, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x31, 0x82, 0x41, 0x2e, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69,
	0x64, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x64, 0x6f, 0x74, 0x31, 0x31, 0x72, 0x2d, 0x72, 0x31, 0x6b, 0x65, 0x79, 0x2d, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x52, 0x12, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x72, 0x52, 0x31, 0x6b, 0x65,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x4a, 0x0a, 0x0c, 0x44, 0x6f, 0x74, 0x31,
	0x31, 0x52, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1c, 0x0a, 0x10, 0x44, 0x4f, 0x54, 0x31,
	0x31, 0x52, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x4f, 0x56, 0x41, 0x10, 0x00, 0x1a, 0x06,
	0x82, 0x41, 0x03, 0x4f, 0x56, 0x41, 0x12, 0x1c, 0x0a, 0x10, 0x44, 0x4f, 0x54, 0x31, 0x31, 0x52,
	0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x4f, 0x44, 0x53, 0x10, 0x02, 0x1a, 0x06, 0x82, 0x41,
	0x03, 0x4f, 0x44, 0x53, 0x1a, 0x99, 0x04, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x52,
	0x0a, 0x06, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x72, 0x18, 0xe1, 0xc1, 0xea, 0x44, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x22, 0x82, 0x41, 0x1f, 0x2f, 0x73, 0x73, 0x69, 0x64,
	0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x72, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x72, 0x52, 0x06, 0x64, 0x6f, 0x74, 0x31,
	0x31, 0x72, 0x12, 0x6d, 0x0a, 0x0f, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x72, 0x5f, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x69, 0x64, 0x18, 0x91, 0xa0, 0xf9, 0xcc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x2b, 0x82, 0x41, 0x28, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f,
	0x73, 0x73, 0x69, 0x64, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x72, 0x2d, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x69,
	0x64, 0x52, 0x0e, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x69,
	0x64, 0x12, 0x84, 0x01, 0x0a, 0x0d, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x72, 0x5f, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x18, 0xdd, 0xe2, 0xc7, 0xf3, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x73,
	0x2e, 0x53, 0x73, 0x69, 0x64, 0x2e, 0x44, 0x6f, 0x74, 0x31, 0x31, 0x52, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x44, 0x6f, 0x74, 0x31, 0x31, 0x52, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42,
	0x29, 0x82, 0x41, 0x26, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f,
	0x64, 0x6f, 0x74, 0x31, 0x31, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x6f, 0x74,
	0x31, 0x31, 0x72, 0x2d, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0c, 0x64, 0x6f, 0x74, 0x31,
	0x31, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x7a, 0x0a, 0x14, 0x64, 0x6f, 0x74, 0x31,
	0x31, 0x72, 0x5f, 0x72, 0x31, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x90, 0xee, 0x85, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x30,
	0x82, 0x41, 0x2d, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x64,
	0x6f, 0x74, 0x31, 0x31, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x6f, 0x74, 0x31,
	0x31, 0x72, 0x2d, 0x72, 0x31, 0x6b, 0x65, 0x79, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x52, 0x12, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x72, 0x52, 0x31, 0x6b, 0x65, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x22, 0x4a, 0x0a, 0x0c, 0x44, 0x6f, 0x74, 0x31, 0x31, 0x52, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x1c, 0x0a, 0x10, 0x44, 0x4f, 0x54, 0x31, 0x31, 0x52, 0x4d, 0x45,
	0x54, 0x48, 0x4f, 0x44, 0x5f, 0x4f, 0x56, 0x41, 0x10, 0x00, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x4f,
	0x56, 0x41, 0x12, 0x1c, 0x0a, 0x10, 0x44, 0x4f, 0x54, 0x31, 0x31, 0x52, 0x4d, 0x45, 0x54, 0x48,
	0x4f, 0x44, 0x5f, 0x4f, 0x44, 0x53, 0x10, 0x02, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x4f, 0x44, 0x53,
	0x1a, 0xf1, 0x08, 0x0a, 0x06, 0x44, 0x6f, 0x74, 0x31, 0x31, 0x56, 0x12, 0x5d, 0x0a, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xe2, 0x9d, 0xd6, 0x6e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x73, 0x69, 0x64,
	0x73, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x2e, 0x44, 0x6f, 0x74, 0x31, 0x31, 0x56, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x42, 0x1c, 0x82, 0x41, 0x19, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f,
	0x73, 0x73, 0x69, 0x64, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x76, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x5a, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x9f, 0xe0, 0xdb, 0xce, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x73,
	0x2e, 0x53, 0x73, 0x69, 0x64, 0x2e, 0x44, 0x6f, 0x74, 0x31, 0x31, 0x56, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x1b, 0x82, 0x41, 0x18, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73,
	0x69, 0x64, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x76, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xd6, 0x03, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x6a, 0x0a, 0x0e, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x76, 0x5f, 0x62, 0x73, 0x73, 0x69,
	0x64, 0x6c, 0x65, 0x18, 0xff, 0xee, 0xb6, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x2b, 0x82, 0x41, 0x28, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69,
	0x64, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x76, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x64, 0x6f, 0x74, 0x31, 0x31, 0x76, 0x2d, 0x62, 0x73, 0x73, 0x69, 0x64, 0x6c, 0x65, 0x52, 0x0d,
	0x64, 0x6f, 0x74, 0x31, 0x31, 0x76, 0x42, 0x73, 0x73, 0x69, 0x64, 0x6c, 0x65, 0x12, 0x81, 0x01,
	0x0a, 0x16, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x76, 0x5f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x6c, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x81, 0xa7, 0xb5, 0x4a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x33, 0x82, 0x41, 0x30, 0x2f, 0x73, 0x73, 0x69, 0x64,
	0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x76, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x76, 0x2d, 0x62, 0x73, 0x73, 0x69,
	0x64, 0x6c, 0x65, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x52, 0x14, 0x64, 0x6f, 0x74,
	0x31, 0x31, 0x76, 0x42, 0x73, 0x73, 0x69, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x12, 0x7c, 0x0a, 0x14, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x76, 0x5f, 0x62, 0x73, 0x73, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xf0, 0xb4, 0x99, 0x75, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x31, 0x82, 0x41, 0x2e, 0x2f, 0x73, 0x73, 0x69,
	0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x76, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x76, 0x2d, 0x62, 0x73, 0x73,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x64, 0x6f, 0x74, 0x31,
	0x31, 0x76, 0x42, 0x73, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x5e, 0x0a, 0x0a, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x76, 0x5f, 0x64, 0x6d, 0x73, 0x18, 0xcd, 0x8c,
	0x9c, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x27, 0x82, 0x41, 0x24,
	0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x64, 0x6f, 0x74, 0x31,
	0x31, 0x76, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x76,
	0x2d, 0x64, 0x6d, 0x73, 0x52, 0x09, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x76, 0x44, 0x6d, 0x73, 0x1a,
	0xd2, 0x03, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x6a, 0x0a, 0x0e, 0x64, 0x6f, 0x74,
	0x31, 0x31, 0x76, 0x5f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x6c, 0x65, 0x18, 0xd8, 0xa7, 0xe4, 0x93,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2a, 0x82, 0x41, 0x27, 0x2f,
	0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x31,
	0x76, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x76, 0x2d, 0x62,
	0x73, 0x73, 0x69, 0x64, 0x6c, 0x65, 0x52, 0x0d, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x76, 0x42, 0x73,
	0x73, 0x69, 0x64, 0x6c, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x16, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x76,
	0x5f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x86, 0x81, 0xb5, 0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x32,
	0x82, 0x41, 0x2f, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x64,
	0x6f, 0x74, 0x31, 0x31, 0x76, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x6f, 0x74, 0x31,
	0x31, 0x76, 0x2d, 0x62, 0x73, 0x73, 0x69, 0x64, 0x6c, 0x65, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x52, 0x14, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x76, 0x42, 0x73, 0x73, 0x69, 0x64, 0x6c,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x7b, 0x0a, 0x14, 0x64, 0x6f, 0x74, 0x31,
	0x31, 0x76, 0x5f, 0x62, 0x73, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0xc7, 0x97, 0xe2, 0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x30,
	0x82, 0x41, 0x2d, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x64,
	0x6f, 0x74, 0x31, 0x31, 0x76, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x6f, 0x74, 0x31,
	0x31, 0x76, 0x2d, 0x62, 0x73, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x13, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x76, 0x42, 0x73, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5d, 0x0a, 0x0a, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x76, 0x5f,
	0x64, 0x6d, 0x73, 0x18, 0xee, 0x9c, 0x80, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x26, 0x82, 0x41, 0x23, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69,
	0x64, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x76, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64,
	0x6f, 0x74, 0x31, 0x31, 0x76, 0x2d, 0x64, 0x6d, 0x73, 0x52, 0x09, 0x64, 0x6f, 0x74, 0x31, 0x31,
	0x76, 0x44, 0x6d, 0x73, 0x1a, 0xcc, 0x05, 0x0a, 0x0b, 0x44, 0x6f, 0x74, 0x31, 0x58, 0x54, 0x69,
	0x6d, 0x65, 0x72, 0x73, 0x12, 0x69, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xa0,
	0x8d, 0xe4, 0xd4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x73, 0x2e, 0x53, 0x73, 0x69, 0x64,
	0x2e, 0x44, 0x6f, 0x74, 0x31, 0x58, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x22, 0x82, 0x41, 0x1f, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73,
	0x73, 0x69, 0x64, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x78, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x73,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x64, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x99, 0x96, 0x9b, 0x23, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53,
	0x73, 0x69, 0x64, 0x73, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x2e, 0x44, 0x6f, 0x74, 0x31, 0x58, 0x54,
	0x69, 0x6d, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x21, 0x82, 0x41, 0x1e,
	0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x64, 0x6f, 0x74, 0x31,
	0x78, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xf5, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x70, 0x0a, 0x0e, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0xc6, 0xe7, 0xd0, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x31, 0x82, 0x41, 0x2e, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64,
	0x2f, 0x64, 0x6f, 0x74, 0x31, 0x78, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x2d, 0x74,
	0x69, 0x6d, 0x65, 0x52, 0x0d, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x79, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x18, 0xca, 0xe2, 0xb4, 0x88, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x34, 0x82, 0x41, 0x31, 0x2f, 0x73, 0x73, 0x69, 0x64,
	0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x78, 0x2d, 0x74, 0x69, 0x6d,
	0x65, 0x72, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x61,
	0x75, 0x74, 0x68, 0x2d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x52, 0x0f, 0x6d, 0x61,
	0x78, 0x41, 0x75, 0x74, 0x68, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x1a, 0xf3, 0x01,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x70, 0x0a, 0x0e, 0x62, 0x6c, 0x61, 0x63, 0x6b,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x8d, 0xef, 0x98, 0xa5, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x30, 0x82, 0x41, 0x2d, 0x2f, 0x73, 0x73,
	0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x78, 0x2d, 0x74,
	0x69, 0x6d, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x62, 0x6c, 0x61, 0x63,
	0x6b, 0x6c, 0x69, 0x73, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x0d, 0x62, 0x6c, 0x61, 0x63,
	0x6b, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x78, 0x0a, 0x11, 0x6d, 0x61, 0x78,
	0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x18, 0x8f,
	0xae, 0x90, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x33, 0x82,
	0x41, 0x30, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x64, 0x6f,
	0x74, 0x31, 0x78, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x73, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x41, 0x75, 0x74, 0x68, 0x46, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x73, 0x1a, 0x8c, 0x16, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x68, 0x0a,
	0x10, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x5f, 0x61, 0x70, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0xaa, 0xf3, 0x8e, 0x55, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x25, 0x82, 0x41, 0x22, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x2d,
	0x61, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x0f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73,
	0x65, 0x41, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x13, 0x62, 0x61, 0x73, 0x69,
	0x63, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x32, 0x67, 0x18,
	0xb3, 0x99, 0xa6, 0x60, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x57, 0x69, 0x66, 0x69, 0x54, 0x79, 0x70, 0x65, 0x73, 0x44, 0x41, 0x54, 0x41, 0x52, 0x41, 0x54,
	0x45, 0x42, 0x28, 0x82, 0x41, 0x25, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69,
	0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2d, 0x64, 0x61,
	0x74, 0x61, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x73, 0x2d, 0x32, 0x67, 0x52, 0x10, 0x62, 0x61, 0x73,
	0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x52, 0x61, 0x74, 0x65, 0x73, 0x32, 0x67, 0x12, 0x83, 0x01,
	0x0a, 0x13, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x73, 0x5f, 0x35, 0x67, 0x18, 0xa6, 0x96, 0xa6, 0x58, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x27,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x57, 0x69, 0x66, 0x69, 0x54, 0x79, 0x70, 0x65, 0x73, 0x44,
	0x41, 0x54, 0x41, 0x52, 0x41, 0x54, 0x45, 0x42, 0x28, 0x82, 0x41, 0x25, 0x2f, 0x73, 0x73, 0x69,
	0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x62, 0x61,
	0x73, 0x69, 0x63, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x73, 0x2d, 0x35,
	0x67, 0x52, 0x10, 0x62, 0x61, 0x73, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x52, 0x61, 0x74, 0x65,
	0x73, 0x35, 0x67, 0x12, 0x69, 0x0a, 0x10, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x8c, 0xef, 0x8c, 0xe3, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x25, 0x82, 0x41, 0x22, 0x2f, 0x73, 0x73, 0x69, 0x64,
	0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x62, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x2d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0f, 0x62,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x42,
	0x0a, 0x03, 0x63, 0x73, 0x61, 0x18, 0xf7, 0xa6, 0x84, 0x48, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x18, 0x82, 0x41, 0x15, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73,
	0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x73, 0x61, 0x52, 0x03, 0x63,
	0x73, 0x61, 0x12, 0x5d, 0x0a, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x6c,
	0x61, 0x6e, 0x18, 0xb7, 0xea, 0xff, 0xf5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x21, 0x82, 0x41, 0x1e, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69,
	0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2d,
	0x76, 0x6c, 0x61, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x6c, 0x61,
	0x6e, 0x12, 0x60, 0x0a, 0x0d, 0x64, 0x68, 0x63, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x18, 0xa5, 0xfb, 0xc8, 0xdc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x22, 0x82, 0x41, 0x1f, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69,
	0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x2d, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x52, 0x0c, 0x64, 0x68, 0x63, 0x70, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x12, 0x4c, 0x0a, 0x06, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x6b, 0x18, 0xfa, 0xf0,
	0xfb, 0xd2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1b, 0x82, 0x41,
	0x18, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x6b, 0x52, 0x06, 0x64, 0x6f, 0x74, 0x31, 0x31,
	0x6b, 0x12, 0x42, 0x0a, 0x03, 0x64, 0x76, 0x61, 0x18, 0x87, 0xac, 0x8d, 0x60, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x18, 0x82, 0x41, 0x15, 0x2f, 0x73, 0x73, 0x69, 0x64,
	0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x76, 0x61,
	0x52, 0x03, 0x64, 0x76, 0x61, 0x12, 0x4f, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0xb3, 0xd0, 0xf3, 0x8b, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x1c, 0x82, 0x41, 0x19, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x5a, 0x0a, 0x0b, 0x67, 0x74, 0x6b, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0xfe, 0xc7, 0xd9, 0xd5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x20, 0x82, 0x41, 0x1d, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f,
	0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x67, 0x74, 0x6b, 0x2d, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x52, 0x0a, 0x67, 0x74, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x12, 0x4b, 0x0a, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x84, 0xdb, 0x80,
	0x61, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1b, 0x82, 0x41, 0x18, 0x2f,
	0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x52, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12,
	0x65, 0x0a, 0x0f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6e, 0x64, 0x70, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x9d, 0xd3, 0x92, 0xa2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x24, 0x82, 0x41, 0x21, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69,
	0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x6e, 0x64, 0x70,
	0x2d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0d, 0x69, 0x70, 0x76, 0x36, 0x4e, 0x64, 0x70,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x76, 0x0a, 0x15, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6e,
	0x64, 0x70, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18,
	0xe5, 0x81, 0xd6, 0xe9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2a,
	0x82, 0x41, 0x27, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x6e, 0x64, 0x70, 0x2d, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x12, 0x69, 0x70, 0x76, 0x36,
	0x4e, 0x64, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x68,
	0x0a, 0x10, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0xe1, 0xaf, 0xf5, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x25, 0x82, 0x41, 0x22, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0xf9, 0xb3, 0xa7, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x19, 0x82, 0x41, 0x16, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x42, 0x0a, 0x03, 0x6f, 0x6b, 0x63, 0x18, 0xf9, 0xf0, 0xda, 0x47, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x18, 0x82, 0x41, 0x15, 0x2f, 0x73, 0x73, 0x69, 0x64,
	0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x6b, 0x63,
	0x52, 0x03, 0x6f, 0x6b, 0x63, 0x12, 0x8f, 0x01, 0x0a, 0x13, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x88, 0xc5,
	0xb1, 0x6e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x57, 0x69,
	0x66, 0x69, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4e, 0x47,
	0x46, 0x52, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x59, 0x42, 0x28, 0x82, 0x41, 0x25, 0x2f, 0x73,
	0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x5b, 0x0a, 0x06, 0x6f, 0x70, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0xa8, 0x92, 0x80, 0x21, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x73, 0x2e, 0x53, 0x73,
	0x69, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4f, 0x70, 0x6d, 0x6f, 0x64, 0x65, 0x42,
	0x1b, 0x82, 0x41, 0x18, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x6d, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x6f, 0x70,
	0x6d, 0x6f, 0x64, 0x65, 0x12, 0x5a, 0x0a, 0x0b, 0x70, 0x74, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0xf1, 0x84, 0xa4, 0xbd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x20, 0x82, 0x41, 0x1d, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73,
	0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x74, 0x6b, 0x2d, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x52, 0x0a, 0x70, 0x74, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x12, 0x54, 0x0a, 0x09, 0x71, 0x62, 0x73, 0x73, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0xd8, 0xfd,
	0xaa, 0xfe, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1e, 0x82, 0x41,
	0x1b, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x71, 0x62, 0x73, 0x73, 0x2d, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x08, 0x71, 0x62,
	0x73, 0x73, 0x4c, 0x6f, 0x61, 0x64, 0x12, 0x5f, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0xaf, 0x91, 0xfb, 0xe1, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x21, 0x82, 0x41, 0x1e, 0x2f, 0x73, 0x73, 0x69,
	0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x6b, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x8b, 0xe7, 0xd6,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x26, 0x82, 0x41, 0x23, 0x2f,
	0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x10, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x73, 0x6f, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x8f, 0x01, 0x0a, 0x17, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x32, 0x67,
	0x18, 0xc3, 0xa7, 0xe7, 0x5a, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x57, 0x69, 0x66, 0x69, 0x54, 0x79, 0x70, 0x65, 0x73, 0x44, 0x41, 0x54, 0x41, 0x52, 0x41,
	0x54, 0x45, 0x42, 0x2c, 0x82, 0x41, 0x29, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73,
	0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x73, 0x2d, 0x32, 0x67,
	0x52, 0x14, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x61, 0x74, 0x65, 0x73, 0x32, 0x67, 0x12, 0x8f, 0x01, 0x0a, 0x17, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x73, 0x5f,
	0x35, 0x67, 0x18, 0xf6, 0xa4, 0xe7, 0x52, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x57, 0x69, 0x66, 0x69, 0x54, 0x79, 0x70, 0x65, 0x73, 0x44, 0x41, 0x54, 0x41,
	0x52, 0x41, 0x54, 0x45, 0x42, 0x2c, 0x82, 0x41, 0x29, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f,
	0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x73, 0x2d,
	0x35, 0x67, 0x52, 0x14, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x61, 0x74, 0x65, 0x73, 0x35, 0x67, 0x12, 0x53, 0x0a, 0x09, 0x76, 0x6c, 0x61, 0x6e,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x80, 0x8d, 0x9b, 0x50, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x1e, 0x82, 0x41, 0x1b, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73,
	0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x6c,
	0x69, 0x73, 0x74, 0x52, 0x08, 0x76, 0x6c, 0x61, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x53, 0x0a,
	0x08, 0x77, 0x70, 0x61, 0x32, 0x5f, 0x70, 0x73, 0x6b, 0x18, 0xd9, 0xbb, 0x84, 0xa5, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1d, 0x82, 0x41, 0x1a, 0x2f,
	0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x77, 0x70, 0x61, 0x32, 0x2d, 0x70, 0x73, 0x6b, 0x52, 0x07, 0x77, 0x70, 0x61, 0x32, 0x50,
	0x73, 0x6b, 0x22, 0x7e, 0x0a, 0x06, 0x4f, 0x70, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x0b,
	0x4f, 0x50, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x00, 0x1a, 0x07, 0x82,
	0x41, 0x04, 0x4f, 0x50, 0x45, 0x4e, 0x12, 0x2a, 0x0a, 0x14, 0x4f, 0x50, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x57, 0x50, 0x41, 0x32, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x02,
	0x1a, 0x10, 0x82, 0x41, 0x0d, 0x57, 0x50, 0x41, 0x32, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e,
	0x41, 0x4c, 0x12, 0x2e, 0x0a, 0x16, 0x4f, 0x50, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x57, 0x50, 0x41,
	0x32, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x52, 0x49, 0x53, 0x45, 0x10, 0x03, 0x1a, 0x12,
	0x82, 0x41, 0x0f, 0x57, 0x50, 0x41, 0x32, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x52, 0x49,
	0x53, 0x45, 0x1a, 0xa8, 0x09, 0x0a, 0x03, 0x57, 0x6d, 0x6d, 0x12, 0x57, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0xbc, 0xdc, 0x8b, 0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x73,
	0x2e, 0x53, 0x73, 0x69, 0x64, 0x2e, 0x57, 0x6d, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x19, 0x82, 0x41, 0x16, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64,
	0x2f, 0x77, 0x6d, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x53, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xb5, 0x96, 0xf1,
	0x4a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x73, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x2e, 0x57, 0x6d,
	0x6d, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x18, 0x82, 0x41, 0x15, 0x2f, 0x73, 0x73, 0x69,
	0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x77, 0x6d, 0x6d, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xfb, 0x03, 0x0a, 0x06, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x5b, 0x0a, 0x0a, 0x74, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x64, 0x73, 0x63,
	0x70, 0x18, 0xde, 0xcf, 0xb9, 0x54, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x24, 0x82, 0x41, 0x21, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f,
	0x77, 0x6d, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x74, 0x72, 0x75, 0x73, 0x74,
	0x2d, 0x64, 0x73, 0x63, 0x70, 0x52, 0x09, 0x74, 0x72, 0x75, 0x73, 0x74, 0x44, 0x73, 0x63, 0x70,
	0x12, 0x63, 0x0a, 0x0d, 0x77, 0x6d, 0x6d, 0x5f, 0x62, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0xb7, 0xab, 0xd4, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x27, 0x82, 0x41, 0x24, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f,
	0x77, 0x6d, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x77, 0x6d, 0x6d, 0x2d, 0x62,
	0x65, 0x2d, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x0b, 0x77, 0x6d, 0x6d, 0x42, 0x65, 0x52,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x64, 0x0a, 0x0d, 0x77, 0x6d, 0x6d, 0x5f, 0x62, 0x6b, 0x5f,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x89, 0xb2, 0xd3, 0xdb, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x27, 0x82, 0x41, 0x24, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73,
	0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x77, 0x6d, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x77, 0x6d, 0x6d, 0x2d, 0x62, 0x6b, 0x2d, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x0b,
	0x77, 0x6d, 0x6d, 0x42, 0x6b, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x64, 0x0a, 0x0d, 0x77,
	0x6d, 0x6d, 0x5f, 0x76, 0x69, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0xc7, 0x86, 0x9a,
	0xc4, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x27, 0x82, 0x41, 0x24,
	0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x77, 0x6d, 0x6d, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x77, 0x6d, 0x6d, 0x2d, 0x76, 0x69, 0x2d, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x52, 0x0b, 0x77, 0x6d, 0x6d, 0x56, 0x69, 0x52, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x12, 0x63, 0x0a, 0x0d, 0x77, 0x6d, 0x6d, 0x5f, 0x76, 0x6f, 0x5f, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x18, 0xa1, 0x9a, 0xe6, 0x26, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x27, 0x82, 0x41, 0x24, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64,
	0x2f, 0x77, 0x6d, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x77, 0x6d, 0x6d, 0x2d,
	0x76, 0x6f, 0x2d, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x0b, 0x77, 0x6d, 0x6d, 0x56, 0x6f,
	0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x1a, 0xf4, 0x03, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x5a, 0x0a, 0x0a, 0x74, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x18, 0xe9,
	0xc6, 0x8a, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x23, 0x82, 0x41,
	0x20, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x77, 0x6d, 0x6d,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2d, 0x64, 0x73, 0x63,
	0x70, 0x52, 0x09, 0x74, 0x72, 0x75, 0x73, 0x74, 0x44, 0x73, 0x63, 0x70, 0x12, 0x62, 0x0a, 0x0d,
	0x77, 0x6d, 0x6d, 0x5f, 0x62, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0xbe, 0x9b,
	0xe9, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x26, 0x82, 0x41, 0x23,
	0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x77, 0x6d, 0x6d, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x77, 0x6d, 0x6d, 0x2d, 0x62, 0x65, 0x2d, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x52, 0x0b, 0x77, 0x6d, 0x6d, 0x42, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x12, 0x62, 0x0a, 0x0d, 0x77, 0x6d, 0x6d, 0x5f, 0x62, 0x6b, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0xcc, 0xd0, 0xec, 0x54, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x26, 0x82, 0x41, 0x23, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f,
	0x77, 0x6d, 0x6d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x77, 0x6d, 0x6d, 0x2d, 0x62, 0x6b,
	0x2d, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x0b, 0x77, 0x6d, 0x6d, 0x42, 0x6b, 0x52, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x12, 0x63, 0x0a, 0x0d, 0x77, 0x6d, 0x6d, 0x5f, 0x76, 0x69, 0x5f, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0xae, 0xaf, 0xf1, 0xb3, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x26, 0x82, 0x41, 0x23, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x73, 0x2f,
	0x73, 0x73, 0x69, 0x64, 0x2f, 0x77, 0x6d, 0x6d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x77,
	0x6d, 0x6d, 0x2d, 0x76, 0x69, 0x2d, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x0b, 0x77, 0x6d,
	0x6d, 0x56, 0x69, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x62, 0x0a, 0x0d, 0x77, 0x6d, 0x6d,
	0x5f, 0x76, 0x6f, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0xe4, 0xa7, 0xf7, 0x62, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x26, 0x82, 0x41, 0x23, 0x2f, 0x73, 0x73,
	0x69, 0x64, 0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x77, 0x6d, 0x6d, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x77, 0x6d, 0x6d, 0x2d, 0x76, 0x6f, 0x2d, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x52, 0x0b, 0x77, 0x6d, 0x6d, 0x56, 0x6f, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x1a, 0x5e, 0x0a,
	0x07, 0x53, 0x73, 0x69, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0x82, 0x41, 0x10, 0x2f, 0x73, 0x73, 0x69, 0x64,
	0x73, 0x2f, 0x73, 0x73, 0x69, 0x64, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2a, 0x0a, 0x04, 0x73, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x73, 0x69,
	0x64, 0x73, 0x2e, 0x53, 0x73, 0x69, 0x64, 0x52, 0x04, 0x73, 0x73, 0x69, 0x64, 0x42, 0x17, 0x0a,
	0x15, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x6f, 0x63, 0x73, 0x79, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_openconfig_wifi_mac_proto_rawDescOnce sync.Once
	file_openconfig_wifi_mac_proto_rawDescData = file_openconfig_wifi_mac_proto_rawDesc
)

func file_openconfig_wifi_mac_proto_rawDescGZIP() []byte {
	file_openconfig_wifi_mac_proto_rawDescOnce.Do(func() {
		file_openconfig_wifi_mac_proto_rawDescData = protoimpl.X.CompressGZIP(file_openconfig_wifi_mac_proto_rawDescData)
	})
	return file_openconfig_wifi_mac_proto_rawDescData
}

var file_openconfig_wifi_mac_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_openconfig_wifi_mac_proto_msgTypes = make([]protoimpl.MessageInfo, 44)
var file_openconfig_wifi_mac_proto_goTypes = []interface{}{
	(Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode)(0), // 0: openconfig.Ssids.Ssid.Clients.Client.ClientRf.State.ConnectionMode
	(Ssids_Ssid_Config_Opmode)(0),                                // 1: openconfig.Ssids.Ssid.Config.Opmode
	(Ssids_Ssid_Dot11R_Config_Dot11RMethod)(0),                   // 2: openconfig.Ssids.Ssid.Dot11R.Config.Dot11RMethod
	(Ssids_Ssid_Dot11R_State_Dot11RMethod)(0),                    // 3: openconfig.Ssids.Ssid.Dot11R.State.Dot11RMethod
	(Ssids_Ssid_State_Opmode)(0),                                 // 4: openconfig.Ssids.Ssid.State.Opmode
	(*Ssids)(nil),                                                // 5: openconfig.Ssids
	(*Ssids_Ssid)(nil),                                           // 6: openconfig.Ssids.Ssid
	(*Ssids_SsidKey)(nil),                                        // 7: openconfig.Ssids.SsidKey
	(*Ssids_Ssid_BandSteering)(nil),                              // 8: openconfig.Ssids.Ssid.BandSteering
	(*Ssids_Ssid_Bssids)(nil),                                    // 9: openconfig.Ssids.Ssid.Bssids
	(*Ssids_Ssid_Clients)(nil),                                   // 10: openconfig.Ssids.Ssid.Clients
	(*Ssids_Ssid_Config)(nil),                                    // 11: openconfig.Ssids.Ssid.Config
	(*Ssids_Ssid_Dot11R)(nil),                                    // 12: openconfig.Ssids.Ssid.Dot11R
	(*Ssids_Ssid_Dot11V)(nil),                                    // 13: openconfig.Ssids.Ssid.Dot11V
	(*Ssids_Ssid_Dot1XTimers)(nil),                               // 14: openconfig.Ssids.Ssid.Dot1XTimers
	(*Ssids_Ssid_State)(nil),                                     // 15: openconfig.Ssids.Ssid.State
	(*Ssids_Ssid_Wmm)(nil),                                       // 16: openconfig.Ssids.Ssid.Wmm
	(*Ssids_Ssid_BandSteering_Config)(nil),                       // 17: openconfig.Ssids.Ssid.BandSteering.Config
	(*Ssids_Ssid_BandSteering_State)(nil),                        // 18: openconfig.Ssids.Ssid.BandSteering.State
	(*Ssids_Ssid_Bssids_Bssid)(nil),                              // 19: openconfig.Ssids.Ssid.Bssids.Bssid
	(*Ssids_Ssid_Bssids_BssidKey)(nil),                           // 20: openconfig.Ssids.Ssid.Bssids.BssidKey
	(*Ssids_Ssid_Bssids_Bssid_State)(nil),                        // 21: openconfig.Ssids.Ssid.Bssids.Bssid.State
	(*Ssids_Ssid_Bssids_Bssid_State_Counters)(nil),               // 22: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters
	(*Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataDist)(nil),    // 23: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.RxDataDist
	(*Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataWmm)(nil),     // 24: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.RxDataWmm
	(*Ssids_Ssid_Bssids_Bssid_State_Counters_RxMcs)(nil),         // 25: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.RxMcs
	(*Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataDist)(nil),    // 26: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.TxDataDist
	(*Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataWmm)(nil),     // 27: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.TxDataWmm
	(*Ssids_Ssid_Bssids_Bssid_State_Counters_TxMcs)(nil),         // 28: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.TxMcs
	(*Ssids_Ssid_Clients_Client)(nil),                            // 29: openconfig.Ssids.Ssid.Clients.Client
	(*Ssids_Ssid_Clients_ClientKey)(nil),                         // 30: openconfig.Ssids.Ssid.Clients.ClientKey
	(*Ssids_Ssid_Clients_Client_ClientCapabilities)(nil),         // 31: openconfig.Ssids.Ssid.Clients.Client.ClientCapabilities
	(*Ssids_Ssid_Clients_Client_ClientConnection)(nil),           // 32: openconfig.Ssids.Ssid.Clients.Client.ClientConnection
	(*Ssids_Ssid_Clients_Client_ClientRf)(nil),                   // 33: openconfig.Ssids.Ssid.Clients.Client.ClientRf
	(*Ssids_Ssid_Clients_Client_Dot11KNeighbors)(nil),            // 34: openconfig.Ssids.Ssid.Clients.Client.Dot11KNeighbors
	(*Ssids_Ssid_Clients_Client_State)(nil),                      // 35: openconfig.Ssids.Ssid.Clients.Client.State
	(*Ssids_Ssid_Clients_Client_ClientCapabilities_State)(nil),   // 36: openconfig.Ssids.Ssid.Clients.Client.ClientCapabilities.State
	(*Ssids_Ssid_Clients_Client_ClientConnection_State)(nil),     // 37: openconfig.Ssids.Ssid.Clients.Client.ClientConnection.State
	(*Ssids_Ssid_Clients_Client_ClientRf_State)(nil),             // 38: openconfig.Ssids.Ssid.Clients.Client.ClientRf.State
	(*Ssids_Ssid_Clients_Client_Dot11KNeighbors_State)(nil),      // 39: openconfig.Ssids.Ssid.Clients.Client.Dot11KNeighbors.State
	(*Ssids_Ssid_Clients_Client_State_Counters)(nil),             // 40: openconfig.Ssids.Ssid.Clients.Client.State.Counters
	(*Ssids_Ssid_Dot11R_Config)(nil),                             // 41: openconfig.Ssids.Ssid.Dot11R.Config
	(*Ssids_Ssid_Dot11R_State)(nil),                              // 42: openconfig.Ssids.Ssid.Dot11R.State
	(*Ssids_Ssid_Dot11V_Config)(nil),                             // 43: openconfig.Ssids.Ssid.Dot11V.Config
	(*Ssids_Ssid_Dot11V_State)(nil),                              // 44: openconfig.Ssids.Ssid.Dot11V.State
	(*Ssids_Ssid_Dot1XTimers_Config)(nil),                        // 45: openconfig.Ssids.Ssid.Dot1XTimers.Config
	(*Ssids_Ssid_Dot1XTimers_State)(nil),                         // 46: openconfig.Ssids.Ssid.Dot1XTimers.State
	(*Ssids_Ssid_Wmm_Config)(nil),                                // 47: openconfig.Ssids.Ssid.Wmm.Config
	(*Ssids_Ssid_Wmm_State)(nil),                                 // 48: openconfig.Ssids.Ssid.Wmm.State
	(*ywrapper.BoolValue)(nil),                                   // 49: ywrapper.BoolValue
	(OpenconfigWifiTypesDATARATE)(0),                             // 50: openconfig.OpenconfigWifiTypesDATARATE
	(*ywrapper.UintValue)(nil),                                   // 51: ywrapper.UintValue
	(*ywrapper.StringValue)(nil),                                 // 52: ywrapper.StringValue
	(OpenconfigWifiTypesOPERATINGFREQUENCY)(0),                   // 53: openconfig.OpenconfigWifiTypesOPERATINGFREQUENCY
	(*ywrapper.IntValue)(nil),                                    // 54: ywrapper.IntValue
	(OpenconfigWifiTypesCLIENTCAPABILITIES)(0),                   // 55: openconfig.OpenconfigWifiTypesCLIENTCAPABILITIES
	(OpenconfigWifiTypesCLIENTSTATE)(0),                          // 56: openconfig.OpenconfigWifiTypesCLIENTSTATE
}
var file_openconfig_wifi_mac_proto_depIdxs = []int32{
	7,   // 0: openconfig.Ssids.ssid:type_name -> openconfig.Ssids.SsidKey
	8,   // 1: openconfig.Ssids.Ssid.band_steering:type_name -> openconfig.Ssids.Ssid.BandSteering
	9,   // 2: openconfig.Ssids.Ssid.bssids:type_name -> openconfig.Ssids.Ssid.Bssids
	10,  // 3: openconfig.Ssids.Ssid.clients:type_name -> openconfig.Ssids.Ssid.Clients
	11,  // 4: openconfig.Ssids.Ssid.config:type_name -> openconfig.Ssids.Ssid.Config
	12,  // 5: openconfig.Ssids.Ssid.dot11r:type_name -> openconfig.Ssids.Ssid.Dot11R
	13,  // 6: openconfig.Ssids.Ssid.dot11v:type_name -> openconfig.Ssids.Ssid.Dot11V
	14,  // 7: openconfig.Ssids.Ssid.dot1x_timers:type_name -> openconfig.Ssids.Ssid.Dot1XTimers
	15,  // 8: openconfig.Ssids.Ssid.state:type_name -> openconfig.Ssids.Ssid.State
	16,  // 9: openconfig.Ssids.Ssid.wmm:type_name -> openconfig.Ssids.Ssid.Wmm
	6,   // 10: openconfig.Ssids.SsidKey.ssid:type_name -> openconfig.Ssids.Ssid
	17,  // 11: openconfig.Ssids.Ssid.BandSteering.config:type_name -> openconfig.Ssids.Ssid.BandSteering.Config
	18,  // 12: openconfig.Ssids.Ssid.BandSteering.state:type_name -> openconfig.Ssids.Ssid.BandSteering.State
	20,  // 13: openconfig.Ssids.Ssid.Bssids.bssid:type_name -> openconfig.Ssids.Ssid.Bssids.BssidKey
	30,  // 14: openconfig.Ssids.Ssid.Clients.client:type_name -> openconfig.Ssids.Ssid.Clients.ClientKey
	49,  // 15: openconfig.Ssids.Ssid.Config.advertise_apname:type_name -> ywrapper.BoolValue
	50,  // 16: openconfig.Ssids.Ssid.Config.basic_data_rates_2g:type_name -> openconfig.OpenconfigWifiTypesDATARATE
	50,  // 17: openconfig.Ssids.Ssid.Config.basic_data_rates_5g:type_name -> openconfig.OpenconfigWifiTypesDATARATE
	49,  // 18: openconfig.Ssids.Ssid.Config.broadcast_filter:type_name -> ywrapper.BoolValue
	49,  // 19: openconfig.Ssids.Ssid.Config.csa:type_name -> ywrapper.BoolValue
	51,  // 20: openconfig.Ssids.Ssid.Config.default_vlan:type_name -> ywrapper.UintValue
	49,  // 21: openconfig.Ssids.Ssid.Config.dhcp_required:type_name -> ywrapper.BoolValue
	49,  // 22: openconfig.Ssids.Ssid.Config.dot11k:type_name -> ywrapper.BoolValue
	49,  // 23: openconfig.Ssids.Ssid.Config.dva:type_name -> ywrapper.BoolValue
	49,  // 24: openconfig.Ssids.Ssid.Config.enabled:type_name -> ywrapper.BoolValue
	51,  // 25: openconfig.Ssids.Ssid.Config.gtk_timeout:type_name -> ywrapper.UintValue
	49,  // 26: openconfig.Ssids.Ssid.Config.hidden:type_name -> ywrapper.BoolValue
	49,  // 27: openconfig.Ssids.Ssid.Config.ipv6_ndp_filter:type_name -> ywrapper.BoolValue
	51,  // 28: openconfig.Ssids.Ssid.Config.ipv6_ndp_filter_timer:type_name -> ywrapper.UintValue
	49,  // 29: openconfig.Ssids.Ssid.Config.multicast_filter:type_name -> ywrapper.BoolValue
	52,  // 30: openconfig.Ssids.Ssid.Config.name:type_name -> ywrapper.StringValue
	49,  // 31: openconfig.Ssids.Ssid.Config.okc:type_name -> ywrapper.BoolValue
	53,  // 32: openconfig.Ssids.Ssid.Config.operating_frequency:type_name -> openconfig.OpenconfigWifiTypesOPERATINGFREQUENCY
	1,   // 33: openconfig.Ssids.Ssid.Config.opmode:type_name -> openconfig.Ssids.Ssid.Config.Opmode
	51,  // 34: openconfig.Ssids.Ssid.Config.ptk_timeout:type_name -> ywrapper.UintValue
	49,  // 35: openconfig.Ssids.Ssid.Config.qbss_load:type_name -> ywrapper.BoolValue
	52,  // 36: openconfig.Ssids.Ssid.Config.server_group:type_name -> ywrapper.StringValue
	49,  // 37: openconfig.Ssids.Ssid.Config.station_isolation:type_name -> ywrapper.BoolValue
	50,  // 38: openconfig.Ssids.Ssid.Config.supported_data_rates_2g:type_name -> openconfig.OpenconfigWifiTypesDATARATE
	50,  // 39: openconfig.Ssids.Ssid.Config.supported_data_rates_5g:type_name -> openconfig.OpenconfigWifiTypesDATARATE
	51,  // 40: openconfig.Ssids.Ssid.Config.vlan_list:type_name -> ywrapper.UintValue
	52,  // 41: openconfig.Ssids.Ssid.Config.wpa2_psk:type_name -> ywrapper.StringValue
	41,  // 42: openconfig.Ssids.Ssid.Dot11R.config:type_name -> openconfig.Ssids.Ssid.Dot11R.Config
	42,  // 43: openconfig.Ssids.Ssid.Dot11R.state:type_name -> openconfig.Ssids.Ssid.Dot11R.State
	43,  // 44: openconfig.Ssids.Ssid.Dot11V.config:type_name -> openconfig.Ssids.Ssid.Dot11V.Config
	44,  // 45: openconfig.Ssids.Ssid.Dot11V.state:type_name -> openconfig.Ssids.Ssid.Dot11V.State
	45,  // 46: openconfig.Ssids.Ssid.Dot1XTimers.config:type_name -> openconfig.Ssids.Ssid.Dot1XTimers.Config
	46,  // 47: openconfig.Ssids.Ssid.Dot1XTimers.state:type_name -> openconfig.Ssids.Ssid.Dot1XTimers.State
	49,  // 48: openconfig.Ssids.Ssid.State.advertise_apname:type_name -> ywrapper.BoolValue
	50,  // 49: openconfig.Ssids.Ssid.State.basic_data_rates_2g:type_name -> openconfig.OpenconfigWifiTypesDATARATE
	50,  // 50: openconfig.Ssids.Ssid.State.basic_data_rates_5g:type_name -> openconfig.OpenconfigWifiTypesDATARATE
	49,  // 51: openconfig.Ssids.Ssid.State.broadcast_filter:type_name -> ywrapper.BoolValue
	49,  // 52: openconfig.Ssids.Ssid.State.csa:type_name -> ywrapper.BoolValue
	51,  // 53: openconfig.Ssids.Ssid.State.default_vlan:type_name -> ywrapper.UintValue
	49,  // 54: openconfig.Ssids.Ssid.State.dhcp_required:type_name -> ywrapper.BoolValue
	49,  // 55: openconfig.Ssids.Ssid.State.dot11k:type_name -> ywrapper.BoolValue
	49,  // 56: openconfig.Ssids.Ssid.State.dva:type_name -> ywrapper.BoolValue
	49,  // 57: openconfig.Ssids.Ssid.State.enabled:type_name -> ywrapper.BoolValue
	51,  // 58: openconfig.Ssids.Ssid.State.gtk_timeout:type_name -> ywrapper.UintValue
	49,  // 59: openconfig.Ssids.Ssid.State.hidden:type_name -> ywrapper.BoolValue
	49,  // 60: openconfig.Ssids.Ssid.State.ipv6_ndp_filter:type_name -> ywrapper.BoolValue
	51,  // 61: openconfig.Ssids.Ssid.State.ipv6_ndp_filter_timer:type_name -> ywrapper.UintValue
	49,  // 62: openconfig.Ssids.Ssid.State.multicast_filter:type_name -> ywrapper.BoolValue
	52,  // 63: openconfig.Ssids.Ssid.State.name:type_name -> ywrapper.StringValue
	49,  // 64: openconfig.Ssids.Ssid.State.okc:type_name -> ywrapper.BoolValue
	53,  // 65: openconfig.Ssids.Ssid.State.operating_frequency:type_name -> openconfig.OpenconfigWifiTypesOPERATINGFREQUENCY
	4,   // 66: openconfig.Ssids.Ssid.State.opmode:type_name -> openconfig.Ssids.Ssid.State.Opmode
	51,  // 67: openconfig.Ssids.Ssid.State.ptk_timeout:type_name -> ywrapper.UintValue
	49,  // 68: openconfig.Ssids.Ssid.State.qbss_load:type_name -> ywrapper.BoolValue
	52,  // 69: openconfig.Ssids.Ssid.State.server_group:type_name -> ywrapper.StringValue
	49,  // 70: openconfig.Ssids.Ssid.State.station_isolation:type_name -> ywrapper.BoolValue
	50,  // 71: openconfig.Ssids.Ssid.State.supported_data_rates_2g:type_name -> openconfig.OpenconfigWifiTypesDATARATE
	50,  // 72: openconfig.Ssids.Ssid.State.supported_data_rates_5g:type_name -> openconfig.OpenconfigWifiTypesDATARATE
	51,  // 73: openconfig.Ssids.Ssid.State.vlan_list:type_name -> ywrapper.UintValue
	52,  // 74: openconfig.Ssids.Ssid.State.wpa2_psk:type_name -> ywrapper.StringValue
	47,  // 75: openconfig.Ssids.Ssid.Wmm.config:type_name -> openconfig.Ssids.Ssid.Wmm.Config
	48,  // 76: openconfig.Ssids.Ssid.Wmm.state:type_name -> openconfig.Ssids.Ssid.Wmm.State
	49,  // 77: openconfig.Ssids.Ssid.BandSteering.Config.band_steering:type_name -> ywrapper.BoolValue
	54,  // 78: openconfig.Ssids.Ssid.BandSteering.Config.steering_rssi:type_name -> ywrapper.IntValue
	49,  // 79: openconfig.Ssids.Ssid.BandSteering.State.band_steering:type_name -> ywrapper.BoolValue
	54,  // 80: openconfig.Ssids.Ssid.BandSteering.State.steering_rssi:type_name -> ywrapper.IntValue
	21,  // 81: openconfig.Ssids.Ssid.Bssids.Bssid.state:type_name -> openconfig.Ssids.Ssid.Bssids.Bssid.State
	19,  // 82: openconfig.Ssids.Ssid.Bssids.BssidKey.bssid:type_name -> openconfig.Ssids.Ssid.Bssids.Bssid
	52,  // 83: openconfig.Ssids.Ssid.Bssids.Bssid.State.bssid:type_name -> ywrapper.StringValue
	22,  // 84: openconfig.Ssids.Ssid.Bssids.Bssid.State.counters:type_name -> openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters
	51,  // 85: openconfig.Ssids.Ssid.Bssids.Bssid.State.num_associated_clients:type_name -> ywrapper.UintValue
	51,  // 86: openconfig.Ssids.Ssid.Bssids.Bssid.State.radio_id:type_name -> ywrapper.UintValue
	51,  // 87: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.bss_channel_utilization:type_name -> ywrapper.UintValue
	51,  // 88: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.rx_bss_dot11_channel_utilization:type_name -> ywrapper.UintValue
	51,  // 89: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.rx_bytes_data:type_name -> ywrapper.UintValue
	51,  // 90: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.rx_control:type_name -> ywrapper.UintValue
	23,  // 91: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.rx_data_dist:type_name -> openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.RxDataDist
	24,  // 92: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.rx_data_wmm:type_name -> openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.RxDataWmm
	25,  // 93: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.rx_mcs:type_name -> openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.RxMcs
	51,  // 94: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.rx_mgmt:type_name -> ywrapper.UintValue
	51,  // 95: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.rx_retries:type_name -> ywrapper.UintValue
	51,  // 96: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.rx_retries_data:type_name -> ywrapper.UintValue
	51,  // 97: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.rx_retries_subframe:type_name -> ywrapper.UintValue
	51,  // 98: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.tx_bss_dot11_channel_utilization:type_name -> ywrapper.UintValue
	51,  // 99: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.tx_bytes_data:type_name -> ywrapper.UintValue
	51,  // 100: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.tx_control:type_name -> ywrapper.UintValue
	26,  // 101: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.tx_data_dist:type_name -> openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.TxDataDist
	27,  // 102: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.tx_data_wmm:type_name -> openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.TxDataWmm
	28,  // 103: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.tx_mcs:type_name -> openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.TxMcs
	51,  // 104: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.tx_mgmt:type_name -> ywrapper.UintValue
	51,  // 105: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.tx_retries:type_name -> ywrapper.UintValue
	51,  // 106: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.tx_retries_data:type_name -> ywrapper.UintValue
	51,  // 107: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.tx_retries_subframe:type_name -> ywrapper.UintValue
	51,  // 108: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.RxDataDist.rx_0_64:type_name -> ywrapper.UintValue
	51,  // 109: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.RxDataDist.rx_1025_2048:type_name -> ywrapper.UintValue
	51,  // 110: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.RxDataDist.rx_129_256:type_name -> ywrapper.UintValue
	51,  // 111: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.RxDataDist.rx_131073_262144:type_name -> ywrapper.UintValue
	51,  // 112: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.RxDataDist.rx_16385_32768:type_name -> ywrapper.UintValue
	51,  // 113: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.RxDataDist.rx_2049_4096:type_name -> ywrapper.UintValue
	51,  // 114: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.RxDataDist.rx_257_512:type_name -> ywrapper.UintValue
	51,  // 115: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.RxDataDist.rx_262145_524288:type_name -> ywrapper.UintValue
	51,  // 116: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.RxDataDist.rx_32769_65536:type_name -> ywrapper.UintValue
	51,  // 117: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.RxDataDist.rx_4097_8192:type_name -> ywrapper.UintValue
	51,  // 118: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.RxDataDist.rx_513_1024:type_name -> ywrapper.UintValue
	51,  // 119: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.RxDataDist.rx_524289_1048576:type_name -> ywrapper.UintValue
	51,  // 120: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.RxDataDist.rx_65_128:type_name -> ywrapper.UintValue
	51,  // 121: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.RxDataDist.rx_65537_131072:type_name -> ywrapper.UintValue
	51,  // 122: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.RxDataDist.rx_8193_16384:type_name -> ywrapper.UintValue
	51,  // 123: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.RxDataWmm.be:type_name -> ywrapper.UintValue
	51,  // 124: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.RxDataWmm.bk:type_name -> ywrapper.UintValue
	51,  // 125: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.RxDataWmm.vi:type_name -> ywrapper.UintValue
	51,  // 126: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.RxDataWmm.vo:type_name -> ywrapper.UintValue
	51,  // 127: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.RxMcs.mcs0:type_name -> ywrapper.UintValue
	51,  // 128: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.RxMcs.mcs1:type_name -> ywrapper.UintValue
	51,  // 129: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.RxMcs.mcs2:type_name -> ywrapper.UintValue
	51,  // 130: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.RxMcs.mcs3:type_name -> ywrapper.UintValue
	51,  // 131: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.RxMcs.mcs4:type_name -> ywrapper.UintValue
	51,  // 132: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.RxMcs.mcs5:type_name -> ywrapper.UintValue
	51,  // 133: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.RxMcs.mcs6:type_name -> ywrapper.UintValue
	51,  // 134: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.RxMcs.mcs7:type_name -> ywrapper.UintValue
	51,  // 135: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.RxMcs.mcs8:type_name -> ywrapper.UintValue
	51,  // 136: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.RxMcs.mcs9:type_name -> ywrapper.UintValue
	51,  // 137: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.TxDataDist.tx_0_64:type_name -> ywrapper.UintValue
	51,  // 138: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.TxDataDist.tx_1025_2048:type_name -> ywrapper.UintValue
	51,  // 139: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.TxDataDist.tx_129_256:type_name -> ywrapper.UintValue
	51,  // 140: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.TxDataDist.tx_131073_262144:type_name -> ywrapper.UintValue
	51,  // 141: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.TxDataDist.tx_16385_32768:type_name -> ywrapper.UintValue
	51,  // 142: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.TxDataDist.tx_2049_4096:type_name -> ywrapper.UintValue
	51,  // 143: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.TxDataDist.tx_257_512:type_name -> ywrapper.UintValue
	51,  // 144: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.TxDataDist.tx_262145_524288:type_name -> ywrapper.UintValue
	51,  // 145: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.TxDataDist.tx_32769_65536:type_name -> ywrapper.UintValue
	51,  // 146: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.TxDataDist.tx_4097_8192:type_name -> ywrapper.UintValue
	51,  // 147: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.TxDataDist.tx_513_1024:type_name -> ywrapper.UintValue
	51,  // 148: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.TxDataDist.tx_524289_1048576:type_name -> ywrapper.UintValue
	51,  // 149: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.TxDataDist.tx_65_128:type_name -> ywrapper.UintValue
	51,  // 150: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.TxDataDist.tx_65537_131072:type_name -> ywrapper.UintValue
	51,  // 151: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.TxDataDist.tx_8193_16384:type_name -> ywrapper.UintValue
	51,  // 152: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.TxDataWmm.be:type_name -> ywrapper.UintValue
	51,  // 153: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.TxDataWmm.bk:type_name -> ywrapper.UintValue
	51,  // 154: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.TxDataWmm.vi:type_name -> ywrapper.UintValue
	51,  // 155: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.TxDataWmm.vo:type_name -> ywrapper.UintValue
	51,  // 156: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.TxMcs.mcs0:type_name -> ywrapper.UintValue
	51,  // 157: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.TxMcs.mcs1:type_name -> ywrapper.UintValue
	51,  // 158: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.TxMcs.mcs2:type_name -> ywrapper.UintValue
	51,  // 159: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.TxMcs.mcs3:type_name -> ywrapper.UintValue
	51,  // 160: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.TxMcs.mcs4:type_name -> ywrapper.UintValue
	51,  // 161: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.TxMcs.mcs5:type_name -> ywrapper.UintValue
	51,  // 162: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.TxMcs.mcs6:type_name -> ywrapper.UintValue
	51,  // 163: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.TxMcs.mcs7:type_name -> ywrapper.UintValue
	51,  // 164: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.TxMcs.mcs8:type_name -> ywrapper.UintValue
	51,  // 165: openconfig.Ssids.Ssid.Bssids.Bssid.State.Counters.TxMcs.mcs9:type_name -> ywrapper.UintValue
	31,  // 166: openconfig.Ssids.Ssid.Clients.Client.client_capabilities:type_name -> openconfig.Ssids.Ssid.Clients.Client.ClientCapabilities
	32,  // 167: openconfig.Ssids.Ssid.Clients.Client.client_connection:type_name -> openconfig.Ssids.Ssid.Clients.Client.ClientConnection
	33,  // 168: openconfig.Ssids.Ssid.Clients.Client.client_rf:type_name -> openconfig.Ssids.Ssid.Clients.Client.ClientRf
	34,  // 169: openconfig.Ssids.Ssid.Clients.Client.dot11k_neighbors:type_name -> openconfig.Ssids.Ssid.Clients.Client.Dot11KNeighbors
	35,  // 170: openconfig.Ssids.Ssid.Clients.Client.state:type_name -> openconfig.Ssids.Ssid.Clients.Client.State
	29,  // 171: openconfig.Ssids.Ssid.Clients.ClientKey.client:type_name -> openconfig.Ssids.Ssid.Clients.Client
	36,  // 172: openconfig.Ssids.Ssid.Clients.Client.ClientCapabilities.state:type_name -> openconfig.Ssids.Ssid.Clients.Client.ClientCapabilities.State
	37,  // 173: openconfig.Ssids.Ssid.Clients.Client.ClientConnection.state:type_name -> openconfig.Ssids.Ssid.Clients.Client.ClientConnection.State
	38,  // 174: openconfig.Ssids.Ssid.Clients.Client.ClientRf.state:type_name -> openconfig.Ssids.Ssid.Clients.Client.ClientRf.State
	39,  // 175: openconfig.Ssids.Ssid.Clients.Client.Dot11KNeighbors.state:type_name -> openconfig.Ssids.Ssid.Clients.Client.Dot11KNeighbors.State
	40,  // 176: openconfig.Ssids.Ssid.Clients.Client.State.counters:type_name -> openconfig.Ssids.Ssid.Clients.Client.State.Counters
	52,  // 177: openconfig.Ssids.Ssid.Clients.Client.State.mac:type_name -> ywrapper.StringValue
	51,  // 178: openconfig.Ssids.Ssid.Clients.Client.ClientCapabilities.State.channel_support:type_name -> ywrapper.UintValue
	55,  // 179: openconfig.Ssids.Ssid.Clients.Client.ClientCapabilities.State.client_capabilities:type_name -> openconfig.OpenconfigWifiTypesCLIENTCAPABILITIES
	56,  // 180: openconfig.Ssids.Ssid.Clients.Client.ClientConnection.State.client_state:type_name -> openconfig.OpenconfigWifiTypesCLIENTSTATE
	51,  // 181: openconfig.Ssids.Ssid.Clients.Client.ClientConnection.State.connection_time:type_name -> ywrapper.UintValue
	52,  // 182: openconfig.Ssids.Ssid.Clients.Client.ClientConnection.State.hostname:type_name -> ywrapper.StringValue
	52,  // 183: openconfig.Ssids.Ssid.Clients.Client.ClientConnection.State.ipv4_address:type_name -> ywrapper.StringValue
	52,  // 184: openconfig.Ssids.Ssid.Clients.Client.ClientConnection.State.ipv6_addresses:type_name -> ywrapper.StringValue
	52,  // 185: openconfig.Ssids.Ssid.Clients.Client.ClientConnection.State.operating_system:type_name -> ywrapper.StringValue
	52,  // 186: openconfig.Ssids.Ssid.Clients.Client.ClientConnection.State.username:type_name -> ywrapper.StringValue
	0,   // 187: openconfig.Ssids.Ssid.Clients.Client.ClientRf.State.connection_mode:type_name -> openconfig.Ssids.Ssid.Clients.Client.ClientRf.State.ConnectionMode
	51,  // 188: openconfig.Ssids.Ssid.Clients.Client.ClientRf.State.frequency:type_name -> ywrapper.UintValue
	51,  // 189: openconfig.Ssids.Ssid.Clients.Client.ClientRf.State.phy_rate:type_name -> ywrapper.UintValue
	54,  // 190: openconfig.Ssids.Ssid.Clients.Client.ClientRf.State.rssi:type_name -> ywrapper.IntValue
	51,  // 191: openconfig.Ssids.Ssid.Clients.Client.ClientRf.State.snr:type_name -> ywrapper.UintValue
	51,  // 192: openconfig.Ssids.Ssid.Clients.Client.ClientRf.State.ss:type_name -> ywrapper.UintValue
	51,  // 193: openconfig.Ssids.Ssid.Clients.Client.Dot11KNeighbors.State.channel_load_report:type_name -> ywrapper.UintValue
	51,  // 194: openconfig.Ssids.Ssid.Clients.Client.Dot11KNeighbors.State.neighbor_antenna:type_name -> ywrapper.UintValue
	52,  // 195: openconfig.Ssids.Ssid.Clients.Client.Dot11KNeighbors.State.neighbor_bssid:type_name -> ywrapper.StringValue
	51,  // 196: openconfig.Ssids.Ssid.Clients.Client.Dot11KNeighbors.State.neighbor_channel:type_name -> ywrapper.UintValue
	54,  // 197: openconfig.Ssids.Ssid.Clients.Client.Dot11KNeighbors.State.neighbor_rssi:type_name -> ywrapper.IntValue
	51,  // 198: openconfig.Ssids.Ssid.Clients.Client.State.Counters.rx_bytes:type_name -> ywrapper.UintValue
	51,  // 199: openconfig.Ssids.Ssid.Clients.Client.State.Counters.rx_retries:type_name -> ywrapper.UintValue
	51,  // 200: openconfig.Ssids.Ssid.Clients.Client.State.Counters.tx_bytes:type_name -> ywrapper.UintValue
	51,  // 201: openconfig.Ssids.Ssid.Clients.Client.State.Counters.tx_retries:type_name -> ywrapper.UintValue
	49,  // 202: openconfig.Ssids.Ssid.Dot11R.Config.dot11r:type_name -> ywrapper.BoolValue
	51,  // 203: openconfig.Ssids.Ssid.Dot11R.Config.dot11r_domainid:type_name -> ywrapper.UintValue
	2,   // 204: openconfig.Ssids.Ssid.Dot11R.Config.dot11r_method:type_name -> openconfig.Ssids.Ssid.Dot11R.Config.Dot11RMethod
	51,  // 205: openconfig.Ssids.Ssid.Dot11R.Config.dot11r_r1key_timeout:type_name -> ywrapper.UintValue
	49,  // 206: openconfig.Ssids.Ssid.Dot11R.State.dot11r:type_name -> ywrapper.BoolValue
	51,  // 207: openconfig.Ssids.Ssid.Dot11R.State.dot11r_domainid:type_name -> ywrapper.UintValue
	3,   // 208: openconfig.Ssids.Ssid.Dot11R.State.dot11r_method:type_name -> openconfig.Ssids.Ssid.Dot11R.State.Dot11RMethod
	51,  // 209: openconfig.Ssids.Ssid.Dot11R.State.dot11r_r1key_timeout:type_name -> ywrapper.UintValue
	49,  // 210: openconfig.Ssids.Ssid.Dot11V.Config.dot11v_bssidle:type_name -> ywrapper.BoolValue
	51,  // 211: openconfig.Ssids.Ssid.Dot11V.Config.dot11v_bssidle_timeout:type_name -> ywrapper.UintValue
	49,  // 212: openconfig.Ssids.Ssid.Dot11V.Config.dot11v_bsstransition:type_name -> ywrapper.BoolValue
	49,  // 213: openconfig.Ssids.Ssid.Dot11V.Config.dot11v_dms:type_name -> ywrapper.BoolValue
	49,  // 214: openconfig.Ssids.Ssid.Dot11V.State.dot11v_bssidle:type_name -> ywrapper.BoolValue
	51,  // 215: openconfig.Ssids.Ssid.Dot11V.State.dot11v_bssidle_timeout:type_name -> ywrapper.UintValue
	49,  // 216: openconfig.Ssids.Ssid.Dot11V.State.dot11v_bsstransition:type_name -> ywrapper.BoolValue
	49,  // 217: openconfig.Ssids.Ssid.Dot11V.State.dot11v_dms:type_name -> ywrapper.BoolValue
	51,  // 218: openconfig.Ssids.Ssid.Dot1XTimers.Config.blacklist_time:type_name -> ywrapper.UintValue
	51,  // 219: openconfig.Ssids.Ssid.Dot1XTimers.Config.max_auth_failures:type_name -> ywrapper.UintValue
	51,  // 220: openconfig.Ssids.Ssid.Dot1XTimers.State.blacklist_time:type_name -> ywrapper.UintValue
	51,  // 221: openconfig.Ssids.Ssid.Dot1XTimers.State.max_auth_failures:type_name -> ywrapper.UintValue
	49,  // 222: openconfig.Ssids.Ssid.Wmm.Config.trust_dscp:type_name -> ywrapper.BoolValue
	51,  // 223: openconfig.Ssids.Ssid.Wmm.Config.wmm_be_remark:type_name -> ywrapper.UintValue
	51,  // 224: openconfig.Ssids.Ssid.Wmm.Config.wmm_bk_remark:type_name -> ywrapper.UintValue
	51,  // 225: openconfig.Ssids.Ssid.Wmm.Config.wmm_vi_remark:type_name -> ywrapper.UintValue
	51,  // 226: openconfig.Ssids.Ssid.Wmm.Config.wmm_vo_remark:type_name -> ywrapper.UintValue
	49,  // 227: openconfig.Ssids.Ssid.Wmm.State.trust_dscp:type_name -> ywrapper.BoolValue
	51,  // 228: openconfig.Ssids.Ssid.Wmm.State.wmm_be_remark:type_name -> ywrapper.UintValue
	51,  // 229: openconfig.Ssids.Ssid.Wmm.State.wmm_bk_remark:type_name -> ywrapper.UintValue
	51,  // 230: openconfig.Ssids.Ssid.Wmm.State.wmm_vi_remark:type_name -> ywrapper.UintValue
	51,  // 231: openconfig.Ssids.Ssid.Wmm.State.wmm_vo_remark:type_name -> ywrapper.UintValue
	232, // [232:232] is the sub-list for method output_type
	232, // [232:232] is the sub-list for method input_type
	232, // [232:232] is the sub-list for extension type_name
	232, // [232:232] is the sub-list for extension extendee
	0,   // [0:232] is the sub-list for field type_name
}

func init() { file_openconfig_wifi_mac_proto_init() }
func file_openconfig_wifi_mac_proto_init() {
	if File_openconfig_wifi_mac_proto != nil {
		return
	}
	file_openconfig_enums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_openconfig_wifi_mac_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ssids); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wifi_mac_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ssids_Ssid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wifi_mac_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ssids_SsidKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wifi_mac_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ssids_Ssid_BandSteering); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wifi_mac_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ssids_Ssid_Bssids); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wifi_mac_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ssids_Ssid_Clients); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wifi_mac_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ssids_Ssid_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wifi_mac_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ssids_Ssid_Dot11R); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wifi_mac_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ssids_Ssid_Dot11V); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wifi_mac_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ssids_Ssid_Dot1XTimers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wifi_mac_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ssids_Ssid_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wifi_mac_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ssids_Ssid_Wmm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wifi_mac_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ssids_Ssid_BandSteering_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wifi_mac_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ssids_Ssid_BandSteering_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wifi_mac_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ssids_Ssid_Bssids_Bssid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wifi_mac_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ssids_Ssid_Bssids_BssidKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wifi_mac_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ssids_Ssid_Bssids_Bssid_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wifi_mac_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ssids_Ssid_Bssids_Bssid_State_Counters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wifi_mac_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataDist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wifi_mac_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataWmm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wifi_mac_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ssids_Ssid_Bssids_Bssid_State_Counters_RxMcs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wifi_mac_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataDist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wifi_mac_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataWmm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wifi_mac_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ssids_Ssid_Bssids_Bssid_State_Counters_TxMcs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wifi_mac_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ssids_Ssid_Clients_Client); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wifi_mac_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ssids_Ssid_Clients_ClientKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wifi_mac_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ssids_Ssid_Clients_Client_ClientCapabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wifi_mac_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ssids_Ssid_Clients_Client_ClientConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wifi_mac_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ssids_Ssid_Clients_Client_ClientRf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wifi_mac_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ssids_Ssid_Clients_Client_Dot11KNeighbors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wifi_mac_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ssids_Ssid_Clients_Client_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wifi_mac_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ssids_Ssid_Clients_Client_ClientCapabilities_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wifi_mac_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ssids_Ssid_Clients_Client_ClientConnection_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wifi_mac_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ssids_Ssid_Clients_Client_ClientRf_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wifi_mac_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ssids_Ssid_Clients_Client_Dot11KNeighbors_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wifi_mac_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ssids_Ssid_Clients_Client_State_Counters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wifi_mac_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ssids_Ssid_Dot11R_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wifi_mac_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ssids_Ssid_Dot11R_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wifi_mac_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ssids_Ssid_Dot11V_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wifi_mac_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ssids_Ssid_Dot11V_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wifi_mac_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ssids_Ssid_Dot1XTimers_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wifi_mac_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ssids_Ssid_Dot1XTimers_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wifi_mac_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ssids_Ssid_Wmm_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_wifi_mac_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ssids_Ssid_Wmm_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_openconfig_wifi_mac_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   44,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_openconfig_wifi_mac_proto_goTypes,
		DependencyIndexes: file_openconfig_wifi_mac_proto_depIdxs,
		EnumInfos:         file_openconfig_wifi_mac_proto_enumTypes,
		MessageInfos:      file_openconfig_wifi_mac_proto_msgTypes,
	}.Build()
	File_openconfig_wifi_mac_proto = out.File
	file_openconfig_wifi_mac_proto_rawDesc = nil
	file_openconfig_wifi_mac_proto_goTypes = nil
	file_openconfig_wifi_mac_proto_depIdxs = nil
}
