// openconfig.openconfig_module_catalog is generated by proto_generator as a protobuf
// representation of a YANG schema.
//
// Input schema modules:
//  - ../api/yang/public/doc/openconfig-example.yang
//  - ../api/yang/public/third_party/ietf/iana-if-type.yang
//  - ../api/yang/public/third_party/ietf/ietf-interfaces.yang
//  - ../api/yang/public/third_party/ietf/ietf-yang-types.yang
//  - ../api/yang/public/third_party/ietf/ietf-inet-types.yang
//  - ../api/yang/public/release/models/bfd/openconfig-bfd.yang
//  - ../api/yang/public/release/models/vlan/openconfig-vlan.yang
//  - ../api/yang/public/release/models/vlan/openconfig-vlan-types.yang
//  - ../api/yang/public/release/models/wifi/openconfig-access-points.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-mac.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-types.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-phy.yang
//  - ../api/yang/public/release/models/wifi/openconfig-ap-interfaces.yang
//  - ../api/yang/public/release/models/wifi/openconfig-ap-manager.yang
//  - ../api/yang/public/release/models/macsec/openconfig-macsec.yang
//  - ../api/yang/public/release/models/macsec/openconfig-macsec-types.yang
//  - ../api/yang/public/release/models/stp/openconfig-spanning-tree-types.yang
//  - ../api/yang/public/release/models/stp/openconfig-spanning-tree.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-errors.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-peer-group.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-types.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-global.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-neighbor.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common-structure.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-policy.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common-multiprotocol.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-types.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-port.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-fan.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-linecard.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-ext.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-cpu.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-psu.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-transceiver.yang
//  - ../api/yang/public/release/models/multicast/openconfig-pim-types.yang
//  - ../api/yang/public/release/models/multicast/openconfig-igmp-types.yang
//  - ../api/yang/public/release/models/multicast/openconfig-igmp.yang
//  - ../api/yang/public/release/models/multicast/openconfig-pim.yang
//  - ../api/yang/public/release/models/catalog/openconfig-module-catalog.yang
//  - ../api/yang/public/release/models/catalog/openconfig-catalog-types.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-interfaces.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-8021x.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-types.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-aggregate.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-poe.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-tunnel.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ip.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ethernet.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ethernet-ext.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ip-ext.yang
//  - ../api/yang/public/release/models/acl/openconfig-packet-match-types.yang
//  - ../api/yang/public/release/models/acl/openconfig-packet-match.yang
//  - ../api/yang/public/release/models/acl/openconfig-acl.yang
//  - ../api/yang/public/release/models/system/openconfig-license.yang
//  - ../api/yang/public/release/models/system/openconfig-system.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-radius.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa.yang
//  - ../api/yang/public/release/models/system/openconfig-system-management.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-types.yang
//  - ../api/yang/public/release/models/system/openconfig-procmon.yang
//  - ../api/yang/public/release/models/system/openconfig-messages.yang
//  - ../api/yang/public/release/models/system/openconfig-system-terminal.yang
//  - ../api/yang/public/release/models/system/openconfig-system-logging.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-tacacs.yang
//  - ../api/yang/public/release/models/system/openconfig-alarms.yang
//  - ../api/yang/public/release/models/system/openconfig-alarm-types.yang
//  - ../api/yang/public/release/models/policy/openconfig-policy-types.yang
//  - ../api/yang/public/release/models/policy/openconfig-routing-policy.yang
//  - ../api/yang/public/release/models/lacp/openconfig-lacp.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-wavelength-router.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-optical-amplifier.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-protection.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-channel-monitor.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-connectivity.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-optical-attenuator.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-common.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-types.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-terminal-device.yang
//  - ../api/yang/public/release/models/telemetry/openconfig-telemetry-types.yang
//  - ../api/yang/public/release/models/telemetry/openconfig-telemetry.yang
//  - ../api/yang/public/release/models/openflow/openconfig-openflow.yang
//  - ../api/yang/public/release/models/openflow/openconfig-openflow-types.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-tables.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-ext.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-table-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-shared-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-types.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-types.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-elements.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-interfaces.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-srte.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-forwarding-policies.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-interfaces.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-path-groups.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
//  - ../api/yang/public/release/models/relay-agent/openconfig-relay-agent.yang
//  - ../api/yang/public/release/models/lldp/openconfig-lldp.yang
//  - ../api/yang/public/release/models/lldp/openconfig-lldp-types.yang
//  - ../api/yang/public/release/models/openconfig-extensions.yang
//  - ../api/yang/public/release/models/types/openconfig-yang-types.yang
//  - ../api/yang/public/release/models/types/openconfig-inet-types.yang
//  - ../api/yang/public/release/models/types/openconfig-types.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-srte-policy.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-rsvp-sr-ext.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-segment-routing-types.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-segment-routing.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-types.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-igp.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-te.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-rsvp.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-static.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-sr.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-ldp.yang
//  - ../api/yang/public/release/models/probes/openconfig-probes-types.yang
//  - ../api/yang/public/release/models/probes/openconfig-probes.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-lsp.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-lsdb-types.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-policy.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-types.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-routing.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-area.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospf-policy.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-common.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-global.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-area-interface.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-lsdb.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospf-types.yang
//  - ../api/yang/public/release/models/local-routing/openconfig-local-routing.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-l3.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-l2.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-policy.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-types.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-mpls.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-common.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-types.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ipv6.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-pf.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-network-instance.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ipv4.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ethernet.yang

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        (unknown)
// source: openconfig_module_catalog.proto

package openconfig

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/openconfig/ygot/proto/yext"
	ywrapper "github.com/openconfig/ygot/proto/ywrapper"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Organizations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Organization []*Organizations_OrganizationKey `protobuf:"bytes,36470166,rep,name=organization,proto3" json:"organization,omitempty"`
}

func (x *Organizations) Reset() {
	*x = Organizations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_module_catalog_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Organizations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organizations) ProtoMessage() {}

func (x *Organizations) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_module_catalog_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organizations.ProtoReflect.Descriptor instead.
func (*Organizations) Descriptor() ([]byte, []int) {
	return file_openconfig_module_catalog_proto_rawDescGZIP(), []int{0}
}

func (x *Organizations) GetOrganization() []*Organizations_OrganizationKey {
	if x != nil {
		return x.Organization
	}
	return nil
}

type Organizations_Organization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contact         *ywrapper.StringValue                       `protobuf:"bytes,331625451,opt,name=contact,proto3" json:"contact,omitempty"`
	FeatureBundles  *Organizations_Organization_FeatureBundles  `protobuf:"bytes,65735225,opt,name=feature_bundles,json=featureBundles,proto3" json:"feature_bundles,omitempty"`
	Implementations *Organizations_Organization_Implementations `protobuf:"bytes,532072838,opt,name=implementations,proto3" json:"implementations,omitempty"`
	Modules         *Organizations_Organization_Modules         `protobuf:"bytes,40653920,opt,name=modules,proto3" json:"modules,omitempty"`
	ReleaseBundles  *Organizations_Organization_ReleaseBundles  `protobuf:"bytes,225925376,opt,name=release_bundles,json=releaseBundles,proto3" json:"release_bundles,omitempty"`
	Type            OpenconfigCatalogTypesORGANIZATIONTYPE      `protobuf:"varint,360257781,opt,name=type,proto3,enum=openconfig.OpenconfigCatalogTypesORGANIZATIONTYPE" json:"type,omitempty"`
}

func (x *Organizations_Organization) Reset() {
	*x = Organizations_Organization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_module_catalog_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Organizations_Organization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organizations_Organization) ProtoMessage() {}

func (x *Organizations_Organization) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_module_catalog_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organizations_Organization.ProtoReflect.Descriptor instead.
func (*Organizations_Organization) Descriptor() ([]byte, []int) {
	return file_openconfig_module_catalog_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Organizations_Organization) GetContact() *ywrapper.StringValue {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *Organizations_Organization) GetFeatureBundles() *Organizations_Organization_FeatureBundles {
	if x != nil {
		return x.FeatureBundles
	}
	return nil
}

func (x *Organizations_Organization) GetImplementations() *Organizations_Organization_Implementations {
	if x != nil {
		return x.Implementations
	}
	return nil
}

func (x *Organizations_Organization) GetModules() *Organizations_Organization_Modules {
	if x != nil {
		return x.Modules
	}
	return nil
}

func (x *Organizations_Organization) GetReleaseBundles() *Organizations_Organization_ReleaseBundles {
	if x != nil {
		return x.ReleaseBundles
	}
	return nil
}

func (x *Organizations_Organization) GetType() OpenconfigCatalogTypesORGANIZATIONTYPE {
	if x != nil {
		return x.Type
	}
	return OpenconfigCatalogTypesORGANIZATIONTYPE_OPENCONFIGCATALOGTYPESORGANIZATIONTYPE_UNSET
}

type Organizations_OrganizationKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string                      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Organization *Organizations_Organization `protobuf:"bytes,2,opt,name=organization,proto3" json:"organization,omitempty"`
}

func (x *Organizations_OrganizationKey) Reset() {
	*x = Organizations_OrganizationKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_module_catalog_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Organizations_OrganizationKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organizations_OrganizationKey) ProtoMessage() {}

func (x *Organizations_OrganizationKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_module_catalog_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organizations_OrganizationKey.ProtoReflect.Descriptor instead.
func (*Organizations_OrganizationKey) Descriptor() ([]byte, []int) {
	return file_openconfig_module_catalog_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Organizations_OrganizationKey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Organizations_OrganizationKey) GetOrganization() *Organizations_Organization {
	if x != nil {
		return x.Organization
	}
	return nil
}

type Organizations_Organization_FeatureBundles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeatureBundle []*Organizations_Organization_FeatureBundles_FeatureBundleKey `protobuf:"bytes,341417927,rep,name=feature_bundle,json=featureBundle,proto3" json:"feature_bundle,omitempty"`
}

func (x *Organizations_Organization_FeatureBundles) Reset() {
	*x = Organizations_Organization_FeatureBundles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_module_catalog_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Organizations_Organization_FeatureBundles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organizations_Organization_FeatureBundles) ProtoMessage() {}

func (x *Organizations_Organization_FeatureBundles) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_module_catalog_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organizations_Organization_FeatureBundles.ProtoReflect.Descriptor instead.
func (*Organizations_Organization_FeatureBundles) Descriptor() ([]byte, []int) {
	return file_openconfig_module_catalog_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *Organizations_Organization_FeatureBundles) GetFeatureBundle() []*Organizations_Organization_FeatureBundles_FeatureBundleKey {
	if x != nil {
		return x.FeatureBundle
	}
	return nil
}

type Organizations_Organization_Implementations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Implementation []*Organizations_Organization_Implementations_ImplementationKey `protobuf:"bytes,163692295,rep,name=implementation,proto3" json:"implementation,omitempty"`
}

func (x *Organizations_Organization_Implementations) Reset() {
	*x = Organizations_Organization_Implementations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_module_catalog_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Organizations_Organization_Implementations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organizations_Organization_Implementations) ProtoMessage() {}

func (x *Organizations_Organization_Implementations) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_module_catalog_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organizations_Organization_Implementations.ProtoReflect.Descriptor instead.
func (*Organizations_Organization_Implementations) Descriptor() ([]byte, []int) {
	return file_openconfig_module_catalog_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *Organizations_Organization_Implementations) GetImplementation() []*Organizations_Organization_Implementations_ImplementationKey {
	if x != nil {
		return x.Implementation
	}
	return nil
}

type Organizations_Organization_Modules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Module []*Organizations_Organization_Modules_ModuleKey `protobuf:"bytes,343723271,rep,name=module,proto3" json:"module,omitempty"`
}

func (x *Organizations_Organization_Modules) Reset() {
	*x = Organizations_Organization_Modules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_module_catalog_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Organizations_Organization_Modules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organizations_Organization_Modules) ProtoMessage() {}

func (x *Organizations_Organization_Modules) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_module_catalog_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organizations_Organization_Modules.ProtoReflect.Descriptor instead.
func (*Organizations_Organization_Modules) Descriptor() ([]byte, []int) {
	return file_openconfig_module_catalog_proto_rawDescGZIP(), []int{0, 0, 2}
}

func (x *Organizations_Organization_Modules) GetModule() []*Organizations_Organization_Modules_ModuleKey {
	if x != nil {
		return x.Module
	}
	return nil
}

type Organizations_Organization_ReleaseBundles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReleaseBundle []*Organizations_Organization_ReleaseBundles_ReleaseBundleKey `protobuf:"bytes,153374371,rep,name=release_bundle,json=releaseBundle,proto3" json:"release_bundle,omitempty"`
}

func (x *Organizations_Organization_ReleaseBundles) Reset() {
	*x = Organizations_Organization_ReleaseBundles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_module_catalog_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Organizations_Organization_ReleaseBundles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organizations_Organization_ReleaseBundles) ProtoMessage() {}

func (x *Organizations_Organization_ReleaseBundles) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_module_catalog_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organizations_Organization_ReleaseBundles.ProtoReflect.Descriptor instead.
func (*Organizations_Organization_ReleaseBundles) Descriptor() ([]byte, []int) {
	return file_openconfig_module_catalog_proto_rawDescGZIP(), []int{0, 0, 3}
}

func (x *Organizations_Organization_ReleaseBundles) GetReleaseBundle() []*Organizations_Organization_ReleaseBundles_ReleaseBundleKey {
	if x != nil {
		return x.ReleaseBundle
	}
	return nil
}

type Organizations_Organization_FeatureBundles_FeatureBundle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeatureBundles *Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles `protobuf:"bytes,171596652,opt,name=feature_bundles,json=featureBundles,proto3" json:"feature_bundles,omitempty"`
	Path           []*ywrapper.StringValue                                                 `protobuf:"bytes,77443799,rep,name=path,proto3" json:"path,omitempty"`
	ReleaseBundle  *Organizations_Organization_FeatureBundles_FeatureBundle_ReleaseBundle  `protobuf:"bytes,173531242,opt,name=release_bundle,json=releaseBundle,proto3" json:"release_bundle,omitempty"`
}

func (x *Organizations_Organization_FeatureBundles_FeatureBundle) Reset() {
	*x = Organizations_Organization_FeatureBundles_FeatureBundle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_module_catalog_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Organizations_Organization_FeatureBundles_FeatureBundle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organizations_Organization_FeatureBundles_FeatureBundle) ProtoMessage() {}

func (x *Organizations_Organization_FeatureBundles_FeatureBundle) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_module_catalog_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organizations_Organization_FeatureBundles_FeatureBundle.ProtoReflect.Descriptor instead.
func (*Organizations_Organization_FeatureBundles_FeatureBundle) Descriptor() ([]byte, []int) {
	return file_openconfig_module_catalog_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (x *Organizations_Organization_FeatureBundles_FeatureBundle) GetFeatureBundles() *Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles {
	if x != nil {
		return x.FeatureBundles
	}
	return nil
}

func (x *Organizations_Organization_FeatureBundles_FeatureBundle) GetPath() []*ywrapper.StringValue {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *Organizations_Organization_FeatureBundles_FeatureBundle) GetReleaseBundle() *Organizations_Organization_FeatureBundles_FeatureBundle_ReleaseBundle {
	if x != nil {
		return x.ReleaseBundle
	}
	return nil
}

type Organizations_Organization_FeatureBundles_FeatureBundleKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string                                                   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version       string                                                   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	FeatureBundle *Organizations_Organization_FeatureBundles_FeatureBundle `protobuf:"bytes,3,opt,name=feature_bundle,json=featureBundle,proto3" json:"feature_bundle,omitempty"`
}

func (x *Organizations_Organization_FeatureBundles_FeatureBundleKey) Reset() {
	*x = Organizations_Organization_FeatureBundles_FeatureBundleKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_module_catalog_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Organizations_Organization_FeatureBundles_FeatureBundleKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organizations_Organization_FeatureBundles_FeatureBundleKey) ProtoMessage() {}

func (x *Organizations_Organization_FeatureBundles_FeatureBundleKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_module_catalog_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organizations_Organization_FeatureBundles_FeatureBundleKey.ProtoReflect.Descriptor instead.
func (*Organizations_Organization_FeatureBundles_FeatureBundleKey) Descriptor() ([]byte, []int) {
	return file_openconfig_module_catalog_proto_rawDescGZIP(), []int{0, 0, 0, 1}
}

func (x *Organizations_Organization_FeatureBundles_FeatureBundleKey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Organizations_Organization_FeatureBundles_FeatureBundleKey) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Organizations_Organization_FeatureBundles_FeatureBundleKey) GetFeatureBundle() *Organizations_Organization_FeatureBundles_FeatureBundle {
	if x != nil {
		return x.FeatureBundle
	}
	return nil
}

type Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeatureBundle []*Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles_FeatureBundleKey `protobuf:"bytes,228111028,rep,name=feature_bundle,json=featureBundle,proto3" json:"feature_bundle,omitempty"`
}

func (x *Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles) Reset() {
	*x = Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_module_catalog_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles) ProtoMessage() {}

func (x *Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_module_catalog_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles.ProtoReflect.Descriptor instead.
func (*Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles) Descriptor() ([]byte, []int) {
	return file_openconfig_module_catalog_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0}
}

func (x *Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles) GetFeatureBundle() []*Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles_FeatureBundleKey {
	if x != nil {
		return x.FeatureBundle
	}
	return nil
}

type Organizations_Organization_FeatureBundles_FeatureBundle_ReleaseBundle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      *ywrapper.StringValue `protobuf:"bytes,422293176,opt,name=name,proto3" json:"name,omitempty"`
	Publisher *ywrapper.StringValue `protobuf:"bytes,153206455,opt,name=publisher,proto3" json:"publisher,omitempty"`
	Version   *ywrapper.StringValue `protobuf:"bytes,285487151,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *Organizations_Organization_FeatureBundles_FeatureBundle_ReleaseBundle) Reset() {
	*x = Organizations_Organization_FeatureBundles_FeatureBundle_ReleaseBundle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_module_catalog_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Organizations_Organization_FeatureBundles_FeatureBundle_ReleaseBundle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organizations_Organization_FeatureBundles_FeatureBundle_ReleaseBundle) ProtoMessage() {}

func (x *Organizations_Organization_FeatureBundles_FeatureBundle_ReleaseBundle) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_module_catalog_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organizations_Organization_FeatureBundles_FeatureBundle_ReleaseBundle.ProtoReflect.Descriptor instead.
func (*Organizations_Organization_FeatureBundles_FeatureBundle_ReleaseBundle) Descriptor() ([]byte, []int) {
	return file_openconfig_module_catalog_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1}
}

func (x *Organizations_Organization_FeatureBundles_FeatureBundle_ReleaseBundle) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Organizations_Organization_FeatureBundles_FeatureBundle_ReleaseBundle) GetPublisher() *ywrapper.StringValue {
	if x != nil {
		return x.Publisher
	}
	return nil
}

func (x *Organizations_Organization_FeatureBundles_FeatureBundle_ReleaseBundle) GetVersion() *ywrapper.StringValue {
	if x != nil {
		return x.Version
	}
	return nil
}

type Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles_FeatureBundle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Publisher *ywrapper.StringValue `protobuf:"bytes,524670609,opt,name=publisher,proto3" json:"publisher,omitempty"`
	Version   *ywrapper.StringValue `protobuf:"bytes,289843649,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles_FeatureBundle) Reset() {
	*x = Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles_FeatureBundle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_module_catalog_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles_FeatureBundle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles_FeatureBundle) ProtoMessage() {
}

func (x *Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles_FeatureBundle) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_module_catalog_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles_FeatureBundle.ProtoReflect.Descriptor instead.
func (*Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles_FeatureBundle) Descriptor() ([]byte, []int) {
	return file_openconfig_module_catalog_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0}
}

func (x *Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles_FeatureBundle) GetPublisher() *ywrapper.StringValue {
	if x != nil {
		return x.Publisher
	}
	return nil
}

func (x *Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles_FeatureBundle) GetVersion() *ywrapper.StringValue {
	if x != nil {
		return x.Version
	}
	return nil
}

type Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles_FeatureBundleKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string                                                                                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	FeatureBundle *Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles_FeatureBundle `protobuf:"bytes,2,opt,name=feature_bundle,json=featureBundle,proto3" json:"feature_bundle,omitempty"`
}

func (x *Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles_FeatureBundleKey) Reset() {
	*x = Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles_FeatureBundleKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_module_catalog_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles_FeatureBundleKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles_FeatureBundleKey) ProtoMessage() {
}

func (x *Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles_FeatureBundleKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_module_catalog_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles_FeatureBundleKey.ProtoReflect.Descriptor instead.
func (*Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles_FeatureBundleKey) Descriptor() ([]byte, []int) {
	return file_openconfig_module_catalog_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1}
}

func (x *Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles_FeatureBundleKey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles_FeatureBundleKey) GetFeatureBundle() *Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles_FeatureBundle {
	if x != nil {
		return x.FeatureBundle
	}
	return nil
}

type Organizations_Organization_Implementations_Implementation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description     *ywrapper.StringValue                                                     `protobuf:"bytes,95744096,opt,name=description,proto3" json:"description,omitempty"`
	FeatureBundles  *Organizations_Organization_Implementations_Implementation_FeatureBundles `protobuf:"bytes,324834732,opt,name=feature_bundles,json=featureBundles,proto3" json:"feature_bundles,omitempty"`
	Platform        *ywrapper.StringValue                                                     `protobuf:"bytes,66220639,opt,name=platform,proto3" json:"platform,omitempty"`
	PlatformVersion *ywrapper.StringValue                                                     `protobuf:"bytes,66214564,opt,name=platform_version,json=platformVersion,proto3" json:"platform_version,omitempty"`
	Reference       *ywrapper.StringValue                                                     `protobuf:"bytes,491287977,opt,name=reference,proto3" json:"reference,omitempty"`
	Status          OpenconfigCatalogTypesIMPLEMENTATIONSTATUSTYPE                            `protobuf:"varint,132248832,opt,name=status,proto3,enum=openconfig.OpenconfigCatalogTypesIMPLEMENTATIONSTATUSTYPE" json:"status,omitempty"`
}

func (x *Organizations_Organization_Implementations_Implementation) Reset() {
	*x = Organizations_Organization_Implementations_Implementation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_module_catalog_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Organizations_Organization_Implementations_Implementation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organizations_Organization_Implementations_Implementation) ProtoMessage() {}

func (x *Organizations_Organization_Implementations_Implementation) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_module_catalog_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organizations_Organization_Implementations_Implementation.ProtoReflect.Descriptor instead.
func (*Organizations_Organization_Implementations_Implementation) Descriptor() ([]byte, []int) {
	return file_openconfig_module_catalog_proto_rawDescGZIP(), []int{0, 0, 1, 0}
}

func (x *Organizations_Organization_Implementations_Implementation) GetDescription() *ywrapper.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Organizations_Organization_Implementations_Implementation) GetFeatureBundles() *Organizations_Organization_Implementations_Implementation_FeatureBundles {
	if x != nil {
		return x.FeatureBundles
	}
	return nil
}

func (x *Organizations_Organization_Implementations_Implementation) GetPlatform() *ywrapper.StringValue {
	if x != nil {
		return x.Platform
	}
	return nil
}

func (x *Organizations_Organization_Implementations_Implementation) GetPlatformVersion() *ywrapper.StringValue {
	if x != nil {
		return x.PlatformVersion
	}
	return nil
}

func (x *Organizations_Organization_Implementations_Implementation) GetReference() *ywrapper.StringValue {
	if x != nil {
		return x.Reference
	}
	return nil
}

func (x *Organizations_Organization_Implementations_Implementation) GetStatus() OpenconfigCatalogTypesIMPLEMENTATIONSTATUSTYPE {
	if x != nil {
		return x.Status
	}
	return OpenconfigCatalogTypesIMPLEMENTATIONSTATUSTYPE_OPENCONFIGCATALOGTYPESIMPLEMENTATIONSTATUSTYPE_UNSET
}

type Organizations_Organization_Implementations_ImplementationKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                                                     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Implementation *Organizations_Organization_Implementations_Implementation `protobuf:"bytes,2,opt,name=implementation,proto3" json:"implementation,omitempty"`
}

func (x *Organizations_Organization_Implementations_ImplementationKey) Reset() {
	*x = Organizations_Organization_Implementations_ImplementationKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_module_catalog_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Organizations_Organization_Implementations_ImplementationKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organizations_Organization_Implementations_ImplementationKey) ProtoMessage() {}

func (x *Organizations_Organization_Implementations_ImplementationKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_module_catalog_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organizations_Organization_Implementations_ImplementationKey.ProtoReflect.Descriptor instead.
func (*Organizations_Organization_Implementations_ImplementationKey) Descriptor() ([]byte, []int) {
	return file_openconfig_module_catalog_proto_rawDescGZIP(), []int{0, 0, 1, 1}
}

func (x *Organizations_Organization_Implementations_ImplementationKey) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Organizations_Organization_Implementations_ImplementationKey) GetImplementation() *Organizations_Organization_Implementations_Implementation {
	if x != nil {
		return x.Implementation
	}
	return nil
}

type Organizations_Organization_Implementations_Implementation_FeatureBundles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeatureBundle []*Organizations_Organization_Implementations_Implementation_FeatureBundles_FeatureBundleKey `protobuf:"bytes,511127540,rep,name=feature_bundle,json=featureBundle,proto3" json:"feature_bundle,omitempty"`
}

func (x *Organizations_Organization_Implementations_Implementation_FeatureBundles) Reset() {
	*x = Organizations_Organization_Implementations_Implementation_FeatureBundles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_module_catalog_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Organizations_Organization_Implementations_Implementation_FeatureBundles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organizations_Organization_Implementations_Implementation_FeatureBundles) ProtoMessage() {}

func (x *Organizations_Organization_Implementations_Implementation_FeatureBundles) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_module_catalog_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organizations_Organization_Implementations_Implementation_FeatureBundles.ProtoReflect.Descriptor instead.
func (*Organizations_Organization_Implementations_Implementation_FeatureBundles) Descriptor() ([]byte, []int) {
	return file_openconfig_module_catalog_proto_rawDescGZIP(), []int{0, 0, 1, 0, 0}
}

func (x *Organizations_Organization_Implementations_Implementation_FeatureBundles) GetFeatureBundle() []*Organizations_Organization_Implementations_Implementation_FeatureBundles_FeatureBundleKey {
	if x != nil {
		return x.FeatureBundle
	}
	return nil
}

type Organizations_Organization_Implementations_Implementation_FeatureBundles_FeatureBundle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Publisher *ywrapper.StringValue `protobuf:"bytes,232912209,opt,name=publisher,proto3" json:"publisher,omitempty"`
}

func (x *Organizations_Organization_Implementations_Implementation_FeatureBundles_FeatureBundle) Reset() {
	*x = Organizations_Organization_Implementations_Implementation_FeatureBundles_FeatureBundle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_module_catalog_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Organizations_Organization_Implementations_Implementation_FeatureBundles_FeatureBundle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organizations_Organization_Implementations_Implementation_FeatureBundles_FeatureBundle) ProtoMessage() {
}

func (x *Organizations_Organization_Implementations_Implementation_FeatureBundles_FeatureBundle) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_module_catalog_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organizations_Organization_Implementations_Implementation_FeatureBundles_FeatureBundle.ProtoReflect.Descriptor instead.
func (*Organizations_Organization_Implementations_Implementation_FeatureBundles_FeatureBundle) Descriptor() ([]byte, []int) {
	return file_openconfig_module_catalog_proto_rawDescGZIP(), []int{0, 0, 1, 0, 0, 0}
}

func (x *Organizations_Organization_Implementations_Implementation_FeatureBundles_FeatureBundle) GetPublisher() *ywrapper.StringValue {
	if x != nil {
		return x.Publisher
	}
	return nil
}

type Organizations_Organization_Implementations_Implementation_FeatureBundles_FeatureBundleKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string                                                                                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version       string                                                                                  `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	FeatureBundle *Organizations_Organization_Implementations_Implementation_FeatureBundles_FeatureBundle `protobuf:"bytes,3,opt,name=feature_bundle,json=featureBundle,proto3" json:"feature_bundle,omitempty"`
}

func (x *Organizations_Organization_Implementations_Implementation_FeatureBundles_FeatureBundleKey) Reset() {
	*x = Organizations_Organization_Implementations_Implementation_FeatureBundles_FeatureBundleKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_module_catalog_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Organizations_Organization_Implementations_Implementation_FeatureBundles_FeatureBundleKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organizations_Organization_Implementations_Implementation_FeatureBundles_FeatureBundleKey) ProtoMessage() {
}

func (x *Organizations_Organization_Implementations_Implementation_FeatureBundles_FeatureBundleKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_module_catalog_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organizations_Organization_Implementations_Implementation_FeatureBundles_FeatureBundleKey.ProtoReflect.Descriptor instead.
func (*Organizations_Organization_Implementations_Implementation_FeatureBundles_FeatureBundleKey) Descriptor() ([]byte, []int) {
	return file_openconfig_module_catalog_proto_rawDescGZIP(), []int{0, 0, 1, 0, 0, 1}
}

func (x *Organizations_Organization_Implementations_Implementation_FeatureBundles_FeatureBundleKey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Organizations_Organization_Implementations_Implementation_FeatureBundles_FeatureBundleKey) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Organizations_Organization_Implementations_Implementation_FeatureBundles_FeatureBundleKey) GetFeatureBundle() *Organizations_Organization_Implementations_Implementation_FeatureBundles_FeatureBundle {
	if x != nil {
		return x.FeatureBundle
	}
	return nil
}

type Organizations_Organization_Modules_Module struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Access         *Organizations_Organization_Modules_Module_Access         `protobuf:"bytes,85349800,opt,name=access,proto3" json:"access,omitempty"`
	Classification *Organizations_Organization_Modules_Module_Classification `protobuf:"bytes,101602966,opt,name=classification,proto3" json:"classification,omitempty"`
	Dependencies   *Organizations_Organization_Modules_Module_Dependencies   `protobuf:"bytes,91435737,opt,name=dependencies,proto3" json:"dependencies,omitempty"`
	Namespace      *ywrapper.StringValue                                     `protobuf:"bytes,411027231,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Prefix         *ywrapper.StringValue                                     `protobuf:"bytes,417881158,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Revision       *ywrapper.StringValue                                     `protobuf:"bytes,6198317,opt,name=revision,proto3" json:"revision,omitempty"`
	Submodules     *Organizations_Organization_Modules_Module_Submodules     `protobuf:"bytes,300802807,opt,name=submodules,proto3" json:"submodules,omitempty"`
	Summary        *ywrapper.StringValue                                     `protobuf:"bytes,8070750,opt,name=summary,proto3" json:"summary,omitempty"`
}

func (x *Organizations_Organization_Modules_Module) Reset() {
	*x = Organizations_Organization_Modules_Module{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_module_catalog_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Organizations_Organization_Modules_Module) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organizations_Organization_Modules_Module) ProtoMessage() {}

func (x *Organizations_Organization_Modules_Module) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_module_catalog_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organizations_Organization_Modules_Module.ProtoReflect.Descriptor instead.
func (*Organizations_Organization_Modules_Module) Descriptor() ([]byte, []int) {
	return file_openconfig_module_catalog_proto_rawDescGZIP(), []int{0, 0, 2, 0}
}

func (x *Organizations_Organization_Modules_Module) GetAccess() *Organizations_Organization_Modules_Module_Access {
	if x != nil {
		return x.Access
	}
	return nil
}

func (x *Organizations_Organization_Modules_Module) GetClassification() *Organizations_Organization_Modules_Module_Classification {
	if x != nil {
		return x.Classification
	}
	return nil
}

func (x *Organizations_Organization_Modules_Module) GetDependencies() *Organizations_Organization_Modules_Module_Dependencies {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

func (x *Organizations_Organization_Modules_Module) GetNamespace() *ywrapper.StringValue {
	if x != nil {
		return x.Namespace
	}
	return nil
}

func (x *Organizations_Organization_Modules_Module) GetPrefix() *ywrapper.StringValue {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (x *Organizations_Organization_Modules_Module) GetRevision() *ywrapper.StringValue {
	if x != nil {
		return x.Revision
	}
	return nil
}

func (x *Organizations_Organization_Modules_Module) GetSubmodules() *Organizations_Organization_Modules_Module_Submodules {
	if x != nil {
		return x.Submodules
	}
	return nil
}

func (x *Organizations_Organization_Modules_Module) GetSummary() *ywrapper.StringValue {
	if x != nil {
		return x.Summary
	}
	return nil
}

type Organizations_Organization_Modules_ModuleKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string                                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version string                                     `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Module  *Organizations_Organization_Modules_Module `protobuf:"bytes,3,opt,name=module,proto3" json:"module,omitempty"`
}

func (x *Organizations_Organization_Modules_ModuleKey) Reset() {
	*x = Organizations_Organization_Modules_ModuleKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_module_catalog_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Organizations_Organization_Modules_ModuleKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organizations_Organization_Modules_ModuleKey) ProtoMessage() {}

func (x *Organizations_Organization_Modules_ModuleKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_module_catalog_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organizations_Organization_Modules_ModuleKey.ProtoReflect.Descriptor instead.
func (*Organizations_Organization_Modules_ModuleKey) Descriptor() ([]byte, []int) {
	return file_openconfig_module_catalog_proto_rawDescGZIP(), []int{0, 0, 2, 1}
}

func (x *Organizations_Organization_Modules_ModuleKey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Organizations_Organization_Modules_ModuleKey) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Organizations_Organization_Modules_ModuleKey) GetModule() *Organizations_Organization_Modules_Module {
	if x != nil {
		return x.Module
	}
	return nil
}

type Organizations_Organization_Modules_Module_Access struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Md5Hash *ywrapper.StringValue `protobuf:"bytes,157630602,opt,name=md5_hash,json=md5Hash,proto3" json:"md5_hash,omitempty"`
	Uri     *ywrapper.StringValue `protobuf:"bytes,93432991,opt,name=uri,proto3" json:"uri,omitempty"`
}

func (x *Organizations_Organization_Modules_Module_Access) Reset() {
	*x = Organizations_Organization_Modules_Module_Access{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_module_catalog_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Organizations_Organization_Modules_Module_Access) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organizations_Organization_Modules_Module_Access) ProtoMessage() {}

func (x *Organizations_Organization_Modules_Module_Access) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_module_catalog_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organizations_Organization_Modules_Module_Access.ProtoReflect.Descriptor instead.
func (*Organizations_Organization_Modules_Module_Access) Descriptor() ([]byte, []int) {
	return file_openconfig_module_catalog_proto_rawDescGZIP(), []int{0, 0, 2, 0, 0}
}

func (x *Organizations_Organization_Modules_Module_Access) GetMd5Hash() *ywrapper.StringValue {
	if x != nil {
		return x.Md5Hash
	}
	return nil
}

func (x *Organizations_Organization_Modules_Module_Access) GetUri() *ywrapper.StringValue {
	if x != nil {
		return x.Uri
	}
	return nil
}

type Organizations_Organization_Modules_Module_Classification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category         OpenconfigCatalogTypesMODULECATEGORYBASE    `protobuf:"varint,446530697,opt,name=category,proto3,enum=openconfig.OpenconfigCatalogTypesMODULECATEGORYBASE" json:"category,omitempty"`
	DeploymentStatus OpenconfigCatalogTypesMODULESTATUSTYPE      `protobuf:"varint,176091355,opt,name=deployment_status,json=deploymentStatus,proto3,enum=openconfig.OpenconfigCatalogTypesMODULESTATUSTYPE" json:"deployment_status,omitempty"`
	Subcategory      OpenconfigCatalogTypesMODULESUBCATEGORYBASE `protobuf:"varint,217396517,opt,name=subcategory,proto3,enum=openconfig.OpenconfigCatalogTypesMODULESUBCATEGORYBASE" json:"subcategory,omitempty"`
}

func (x *Organizations_Organization_Modules_Module_Classification) Reset() {
	*x = Organizations_Organization_Modules_Module_Classification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_module_catalog_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Organizations_Organization_Modules_Module_Classification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organizations_Organization_Modules_Module_Classification) ProtoMessage() {}

func (x *Organizations_Organization_Modules_Module_Classification) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_module_catalog_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organizations_Organization_Modules_Module_Classification.ProtoReflect.Descriptor instead.
func (*Organizations_Organization_Modules_Module_Classification) Descriptor() ([]byte, []int) {
	return file_openconfig_module_catalog_proto_rawDescGZIP(), []int{0, 0, 2, 0, 1}
}

func (x *Organizations_Organization_Modules_Module_Classification) GetCategory() OpenconfigCatalogTypesMODULECATEGORYBASE {
	if x != nil {
		return x.Category
	}
	return OpenconfigCatalogTypesMODULECATEGORYBASE_OPENCONFIGCATALOGTYPESMODULECATEGORYBASE_UNSET
}

func (x *Organizations_Organization_Modules_Module_Classification) GetDeploymentStatus() OpenconfigCatalogTypesMODULESTATUSTYPE {
	if x != nil {
		return x.DeploymentStatus
	}
	return OpenconfigCatalogTypesMODULESTATUSTYPE_OPENCONFIGCATALOGTYPESMODULESTATUSTYPE_UNSET
}

func (x *Organizations_Organization_Modules_Module_Classification) GetSubcategory() OpenconfigCatalogTypesMODULESUBCATEGORYBASE {
	if x != nil {
		return x.Subcategory
	}
	return OpenconfigCatalogTypesMODULESUBCATEGORYBASE_OPENCONFIGCATALOGTYPESMODULESUBCATEGORYBASE_UNSET
}

type Organizations_Organization_Modules_Module_Dependencies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequiredModule []*ywrapper.StringValue `protobuf:"bytes,329357120,rep,name=required_module,json=requiredModule,proto3" json:"required_module,omitempty"`
}

func (x *Organizations_Organization_Modules_Module_Dependencies) Reset() {
	*x = Organizations_Organization_Modules_Module_Dependencies{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_module_catalog_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Organizations_Organization_Modules_Module_Dependencies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organizations_Organization_Modules_Module_Dependencies) ProtoMessage() {}

func (x *Organizations_Organization_Modules_Module_Dependencies) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_module_catalog_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organizations_Organization_Modules_Module_Dependencies.ProtoReflect.Descriptor instead.
func (*Organizations_Organization_Modules_Module_Dependencies) Descriptor() ([]byte, []int) {
	return file_openconfig_module_catalog_proto_rawDescGZIP(), []int{0, 0, 2, 0, 2}
}

func (x *Organizations_Organization_Modules_Module_Dependencies) GetRequiredModule() []*ywrapper.StringValue {
	if x != nil {
		return x.RequiredModule
	}
	return nil
}

type Organizations_Organization_Modules_Module_Submodules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Submodule []*Organizations_Organization_Modules_Module_Submodules_SubmoduleKey `protobuf:"bytes,236690428,rep,name=submodule,proto3" json:"submodule,omitempty"`
}

func (x *Organizations_Organization_Modules_Module_Submodules) Reset() {
	*x = Organizations_Organization_Modules_Module_Submodules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_module_catalog_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Organizations_Organization_Modules_Module_Submodules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organizations_Organization_Modules_Module_Submodules) ProtoMessage() {}

func (x *Organizations_Organization_Modules_Module_Submodules) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_module_catalog_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organizations_Organization_Modules_Module_Submodules.ProtoReflect.Descriptor instead.
func (*Organizations_Organization_Modules_Module_Submodules) Descriptor() ([]byte, []int) {
	return file_openconfig_module_catalog_proto_rawDescGZIP(), []int{0, 0, 2, 0, 3}
}

func (x *Organizations_Organization_Modules_Module_Submodules) GetSubmodule() []*Organizations_Organization_Modules_Module_Submodules_SubmoduleKey {
	if x != nil {
		return x.Submodule
	}
	return nil
}

type Organizations_Organization_Modules_Module_Submodules_Submodule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Access *Organizations_Organization_Modules_Module_Submodules_Submodule_Access `protobuf:"bytes,200630389,opt,name=access,proto3" json:"access,omitempty"`
}

func (x *Organizations_Organization_Modules_Module_Submodules_Submodule) Reset() {
	*x = Organizations_Organization_Modules_Module_Submodules_Submodule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_module_catalog_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Organizations_Organization_Modules_Module_Submodules_Submodule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organizations_Organization_Modules_Module_Submodules_Submodule) ProtoMessage() {}

func (x *Organizations_Organization_Modules_Module_Submodules_Submodule) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_module_catalog_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organizations_Organization_Modules_Module_Submodules_Submodule.ProtoReflect.Descriptor instead.
func (*Organizations_Organization_Modules_Module_Submodules_Submodule) Descriptor() ([]byte, []int) {
	return file_openconfig_module_catalog_proto_rawDescGZIP(), []int{0, 0, 2, 0, 3, 0}
}

func (x *Organizations_Organization_Modules_Module_Submodules_Submodule) GetAccess() *Organizations_Organization_Modules_Module_Submodules_Submodule_Access {
	if x != nil {
		return x.Access
	}
	return nil
}

type Organizations_Organization_Modules_Module_Submodules_SubmoduleKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string                                                          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Submodule *Organizations_Organization_Modules_Module_Submodules_Submodule `protobuf:"bytes,2,opt,name=submodule,proto3" json:"submodule,omitempty"`
}

func (x *Organizations_Organization_Modules_Module_Submodules_SubmoduleKey) Reset() {
	*x = Organizations_Organization_Modules_Module_Submodules_SubmoduleKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_module_catalog_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Organizations_Organization_Modules_Module_Submodules_SubmoduleKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organizations_Organization_Modules_Module_Submodules_SubmoduleKey) ProtoMessage() {}

func (x *Organizations_Organization_Modules_Module_Submodules_SubmoduleKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_module_catalog_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organizations_Organization_Modules_Module_Submodules_SubmoduleKey.ProtoReflect.Descriptor instead.
func (*Organizations_Organization_Modules_Module_Submodules_SubmoduleKey) Descriptor() ([]byte, []int) {
	return file_openconfig_module_catalog_proto_rawDescGZIP(), []int{0, 0, 2, 0, 3, 1}
}

func (x *Organizations_Organization_Modules_Module_Submodules_SubmoduleKey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Organizations_Organization_Modules_Module_Submodules_SubmoduleKey) GetSubmodule() *Organizations_Organization_Modules_Module_Submodules_Submodule {
	if x != nil {
		return x.Submodule
	}
	return nil
}

type Organizations_Organization_Modules_Module_Submodules_Submodule_Access struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Md5Hash *ywrapper.StringValue `protobuf:"bytes,376004217,opt,name=md5_hash,json=md5Hash,proto3" json:"md5_hash,omitempty"`
	Uri     *ywrapper.StringValue `protobuf:"bytes,317424142,opt,name=uri,proto3" json:"uri,omitempty"`
}

func (x *Organizations_Organization_Modules_Module_Submodules_Submodule_Access) Reset() {
	*x = Organizations_Organization_Modules_Module_Submodules_Submodule_Access{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_module_catalog_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Organizations_Organization_Modules_Module_Submodules_Submodule_Access) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organizations_Organization_Modules_Module_Submodules_Submodule_Access) ProtoMessage() {}

func (x *Organizations_Organization_Modules_Module_Submodules_Submodule_Access) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_module_catalog_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organizations_Organization_Modules_Module_Submodules_Submodule_Access.ProtoReflect.Descriptor instead.
func (*Organizations_Organization_Modules_Module_Submodules_Submodule_Access) Descriptor() ([]byte, []int) {
	return file_openconfig_module_catalog_proto_rawDescGZIP(), []int{0, 0, 2, 0, 3, 0, 0}
}

func (x *Organizations_Organization_Modules_Module_Submodules_Submodule_Access) GetMd5Hash() *ywrapper.StringValue {
	if x != nil {
		return x.Md5Hash
	}
	return nil
}

func (x *Organizations_Organization_Modules_Module_Submodules_Submodule_Access) GetUri() *ywrapper.StringValue {
	if x != nil {
		return x.Uri
	}
	return nil
}

type Organizations_Organization_ReleaseBundles_ReleaseBundle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Members *Organizations_Organization_ReleaseBundles_ReleaseBundle_Members `protobuf:"bytes,395246863,opt,name=members,proto3" json:"members,omitempty"`
}

func (x *Organizations_Organization_ReleaseBundles_ReleaseBundle) Reset() {
	*x = Organizations_Organization_ReleaseBundles_ReleaseBundle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_module_catalog_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Organizations_Organization_ReleaseBundles_ReleaseBundle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organizations_Organization_ReleaseBundles_ReleaseBundle) ProtoMessage() {}

func (x *Organizations_Organization_ReleaseBundles_ReleaseBundle) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_module_catalog_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organizations_Organization_ReleaseBundles_ReleaseBundle.ProtoReflect.Descriptor instead.
func (*Organizations_Organization_ReleaseBundles_ReleaseBundle) Descriptor() ([]byte, []int) {
	return file_openconfig_module_catalog_proto_rawDescGZIP(), []int{0, 0, 3, 0}
}

func (x *Organizations_Organization_ReleaseBundles_ReleaseBundle) GetMembers() *Organizations_Organization_ReleaseBundles_ReleaseBundle_Members {
	if x != nil {
		return x.Members
	}
	return nil
}

type Organizations_Organization_ReleaseBundles_ReleaseBundleKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string                                                   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version       string                                                   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	ReleaseBundle *Organizations_Organization_ReleaseBundles_ReleaseBundle `protobuf:"bytes,3,opt,name=release_bundle,json=releaseBundle,proto3" json:"release_bundle,omitempty"`
}

func (x *Organizations_Organization_ReleaseBundles_ReleaseBundleKey) Reset() {
	*x = Organizations_Organization_ReleaseBundles_ReleaseBundleKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_module_catalog_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Organizations_Organization_ReleaseBundles_ReleaseBundleKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organizations_Organization_ReleaseBundles_ReleaseBundleKey) ProtoMessage() {}

func (x *Organizations_Organization_ReleaseBundles_ReleaseBundleKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_module_catalog_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organizations_Organization_ReleaseBundles_ReleaseBundleKey.ProtoReflect.Descriptor instead.
func (*Organizations_Organization_ReleaseBundles_ReleaseBundleKey) Descriptor() ([]byte, []int) {
	return file_openconfig_module_catalog_proto_rawDescGZIP(), []int{0, 0, 3, 1}
}

func (x *Organizations_Organization_ReleaseBundles_ReleaseBundleKey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Organizations_Organization_ReleaseBundles_ReleaseBundleKey) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Organizations_Organization_ReleaseBundles_ReleaseBundleKey) GetReleaseBundle() *Organizations_Organization_ReleaseBundles_ReleaseBundle {
	if x != nil {
		return x.ReleaseBundle
	}
	return nil
}

type Organizations_Organization_ReleaseBundles_ReleaseBundle_Members struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Member []*Organizations_Organization_ReleaseBundles_ReleaseBundle_Members_MemberKey `protobuf:"bytes,32423360,rep,name=member,proto3" json:"member,omitempty"`
}

func (x *Organizations_Organization_ReleaseBundles_ReleaseBundle_Members) Reset() {
	*x = Organizations_Organization_ReleaseBundles_ReleaseBundle_Members{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_module_catalog_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Organizations_Organization_ReleaseBundles_ReleaseBundle_Members) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organizations_Organization_ReleaseBundles_ReleaseBundle_Members) ProtoMessage() {}

func (x *Organizations_Organization_ReleaseBundles_ReleaseBundle_Members) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_module_catalog_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organizations_Organization_ReleaseBundles_ReleaseBundle_Members.ProtoReflect.Descriptor instead.
func (*Organizations_Organization_ReleaseBundles_ReleaseBundle_Members) Descriptor() ([]byte, []int) {
	return file_openconfig_module_catalog_proto_rawDescGZIP(), []int{0, 0, 3, 0, 0}
}

func (x *Organizations_Organization_ReleaseBundles_ReleaseBundle_Members) GetMember() []*Organizations_Organization_ReleaseBundles_ReleaseBundle_Members_MemberKey {
	if x != nil {
		return x.Member
	}
	return nil
}

type Organizations_Organization_ReleaseBundles_ReleaseBundle_Members_Member struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompatibleVersions []*ywrapper.StringValue                 `protobuf:"bytes,330507629,rep,name=compatible_versions,json=compatibleVersions,proto3" json:"compatible_versions,omitempty"`
	Module             *ywrapper.StringValue                   `protobuf:"bytes,484671335,opt,name=module,proto3" json:"module,omitempty"`
	Publisher          *ywrapper.StringValue                   `protobuf:"bytes,61442669,opt,name=publisher,proto3" json:"publisher,omitempty"`
	ReleaseBundle      *ywrapper.StringValue                   `protobuf:"bytes,156587363,opt,name=release_bundle,json=releaseBundle,proto3" json:"release_bundle,omitempty"`
	Type               OpenconfigCatalogTypesCATALOGMEMBERTYPE `protobuf:"varint,466479799,opt,name=type,proto3,enum=openconfig.OpenconfigCatalogTypesCATALOGMEMBERTYPE" json:"type,omitempty"`
}

func (x *Organizations_Organization_ReleaseBundles_ReleaseBundle_Members_Member) Reset() {
	*x = Organizations_Organization_ReleaseBundles_ReleaseBundle_Members_Member{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_module_catalog_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Organizations_Organization_ReleaseBundles_ReleaseBundle_Members_Member) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organizations_Organization_ReleaseBundles_ReleaseBundle_Members_Member) ProtoMessage() {}

func (x *Organizations_Organization_ReleaseBundles_ReleaseBundle_Members_Member) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_module_catalog_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organizations_Organization_ReleaseBundles_ReleaseBundle_Members_Member.ProtoReflect.Descriptor instead.
func (*Organizations_Organization_ReleaseBundles_ReleaseBundle_Members_Member) Descriptor() ([]byte, []int) {
	return file_openconfig_module_catalog_proto_rawDescGZIP(), []int{0, 0, 3, 0, 0, 0}
}

func (x *Organizations_Organization_ReleaseBundles_ReleaseBundle_Members_Member) GetCompatibleVersions() []*ywrapper.StringValue {
	if x != nil {
		return x.CompatibleVersions
	}
	return nil
}

func (x *Organizations_Organization_ReleaseBundles_ReleaseBundle_Members_Member) GetModule() *ywrapper.StringValue {
	if x != nil {
		return x.Module
	}
	return nil
}

func (x *Organizations_Organization_ReleaseBundles_ReleaseBundle_Members_Member) GetPublisher() *ywrapper.StringValue {
	if x != nil {
		return x.Publisher
	}
	return nil
}

func (x *Organizations_Organization_ReleaseBundles_ReleaseBundle_Members_Member) GetReleaseBundle() *ywrapper.StringValue {
	if x != nil {
		return x.ReleaseBundle
	}
	return nil
}

func (x *Organizations_Organization_ReleaseBundles_ReleaseBundle_Members_Member) GetType() OpenconfigCatalogTypesCATALOGMEMBERTYPE {
	if x != nil {
		return x.Type
	}
	return OpenconfigCatalogTypesCATALOGMEMBERTYPE_OPENCONFIGCATALOGTYPESCATALOGMEMBERTYPE_UNSET
}

type Organizations_Organization_ReleaseBundles_ReleaseBundle_Members_MemberKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string                                                                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Member *Organizations_Organization_ReleaseBundles_ReleaseBundle_Members_Member `protobuf:"bytes,2,opt,name=member,proto3" json:"member,omitempty"`
}

func (x *Organizations_Organization_ReleaseBundles_ReleaseBundle_Members_MemberKey) Reset() {
	*x = Organizations_Organization_ReleaseBundles_ReleaseBundle_Members_MemberKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_module_catalog_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Organizations_Organization_ReleaseBundles_ReleaseBundle_Members_MemberKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organizations_Organization_ReleaseBundles_ReleaseBundle_Members_MemberKey) ProtoMessage() {}

func (x *Organizations_Organization_ReleaseBundles_ReleaseBundle_Members_MemberKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_module_catalog_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organizations_Organization_ReleaseBundles_ReleaseBundle_Members_MemberKey.ProtoReflect.Descriptor instead.
func (*Organizations_Organization_ReleaseBundles_ReleaseBundle_Members_MemberKey) Descriptor() ([]byte, []int) {
	return file_openconfig_module_catalog_proto_rawDescGZIP(), []int{0, 0, 3, 0, 0, 1}
}

func (x *Organizations_Organization_ReleaseBundles_ReleaseBundle_Members_MemberKey) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Organizations_Organization_ReleaseBundles_ReleaseBundle_Members_MemberKey) GetMember() *Organizations_Organization_ReleaseBundles_ReleaseBundle_Members_Member {
	if x != nil {
		return x.Member
	}
	return nil
}

var File_openconfig_module_catalog_proto protoreflect.FileDescriptor

var file_openconfig_module_catalog_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x0e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x79,
	0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xd4, 0x54, 0x0a, 0x0d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x70, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x96, 0xfb, 0xb1, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x42, 0x1e, 0x82, 0x41, 0x1b, 0x2f, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xb7, 0x52, 0x0a, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x18, 0xeb, 0xe7, 0x90, 0x9e, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x26, 0x82, 0x41, 0x23, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x12, 0x91, 0x01, 0x0a, 0x0f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f,
	0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x18, 0xb9, 0x94, 0xac, 0x1f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x42, 0x2e, 0x82, 0x41, 0x2b, 0x2f, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2d,
	0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x52, 0x0e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x12, 0x94, 0x01, 0x0a, 0x0f, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x86, 0x93, 0xdb, 0xfd,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6d,
	0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x2e, 0x82,
	0x41, 0x2b, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0f, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x73,
	0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0xe0, 0xa8, 0xb1, 0x13, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x73, 0x42, 0x26, 0x82, 0x41, 0x23, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x73, 0x12, 0x91, 0x01, 0x0a, 0x0f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f,
	0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x18, 0x80, 0xb2, 0xdd, 0x6b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x42, 0x2e, 0x82, 0x41, 0x2b, 0x2f, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2d,
	0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x12, 0x6f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0xf5, 0xb1, 0xe4, 0xab, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4f, 0x52, 0x47,
	0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x42, 0x23, 0x82,
	0x41, 0x20, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0xb6, 0x12, 0x0a, 0x0e, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x12, 0xb0, 0x01, 0x0a, 0x0e,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0xc7,
	0xbf, 0xe6, 0xa2, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x2e,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x4b, 0x65, 0x79,
	0x42, 0x3d, 0x82, 0x41, 0x3a, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2d, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73,
	0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2d, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52,
	0x0d, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x1a, 0xb6,
	0x0e, 0x0a, 0x0d, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x12, 0xcd, 0x01, 0x0a, 0x0f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x62, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x73, 0x18, 0xec, 0xb6, 0xe9, 0x51, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x73, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x73, 0x42, 0x4d, 0x82, 0x41, 0x4a, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2d, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x73, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2d, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2d, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73,
	0x52, 0x0e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73,
	0x12, 0x70, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0xd7, 0xe5, 0xf6, 0x24, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x2d, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x2d, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2f, 0x70, 0x61, 0x74, 0x68, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x12, 0xc9, 0x01, 0x0a, 0x0e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x62,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0xea, 0xc0, 0xdf, 0x52, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x73, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x42, 0x4c, 0x82, 0x41, 0x49, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2d, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x73, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2d, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2d, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52,
	0x0d, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x1a, 0xe4,
	0x06, 0x0a, 0x0e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x73, 0x12, 0xeb, 0x01, 0x0a, 0x0e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x62, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x18, 0xb4, 0xe5, 0xe2, 0x6c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x63, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x73, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x73, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x4b,
	0x65, 0x79, 0x42, 0x5c, 0x82, 0x41, 0x59, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2d, 0x62, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x73, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2d, 0x62, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2d, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x73, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2d, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x52, 0x0d, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x1a,
	0xcd, 0x02, 0x0a, 0x0d, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x12, 0x9f, 0x01, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x18,
	0x91, 0xad, 0x97, 0xfa, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x66, 0x82, 0x41, 0x63, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2d, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73,
	0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2d, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2f,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2d, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x2f,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2d, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2f, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x72, 0x12, 0x99, 0x01, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0xc1, 0xd3, 0x9a, 0x8a, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x64, 0x82, 0x41, 0x61, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2d, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73,
	0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2d, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2f,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2d, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x2f,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2d, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a,
	0x93, 0x02, 0x0a, 0x10, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x4b, 0x65, 0x79, 0x12, 0x75, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x61, 0x82, 0x41, 0x5e, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2d, 0x62, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x73, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2d, 0x62, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2d, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x73, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2d, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x0e,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x60, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x2e, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x0d, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x1a, 0xaf, 0x03, 0x0a, 0x0d, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0xb8, 0xdd, 0xae, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x51, 0x82, 0x41, 0x4e, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2d, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x73, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2d, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2d, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2f,
	0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x8e, 0x01, 0x0a, 0x09, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x18, 0xb7, 0xfd, 0x86, 0x49, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x56, 0x82, 0x41, 0x53, 0x2f, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x2d, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x2d, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2d,
	0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72,
	0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x12, 0x89, 0x01, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xaf, 0xe0, 0x90, 0x88, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x54, 0x82, 0x41, 0x51, 0x2f, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x2d, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x2d, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2d,
	0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0xb7, 0x02, 0x0a, 0x10, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x56, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x2d, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x2d, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x5f, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2d, 0x62, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x73, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2d, 0x62, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x6a, 0x0a, 0x0e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x73, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x52, 0x0d, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x1a, 0x8f, 0x11, 0x0a, 0x0f, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xb2, 0x01, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x87, 0xfe, 0x86, 0x4e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x48, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x42, 0x3d, 0x82, 0x41, 0x3a,
	0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xef, 0x0d, 0x0a, 0x0e, 0x49,
	0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x85, 0x01,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xe0, 0xe0,
	0xd3, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x49, 0x82,
	0x41, 0x46, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xd0, 0x01, 0x0a, 0x0f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x18, 0xac, 0xab, 0xf2, 0x9a, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6d, 0x70, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x49, 0x6d, 0x70, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x42, 0x4d, 0x82, 0x41, 0x4a, 0x2f, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x2d, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x52, 0x0e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x12, 0x7c, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x18, 0xdf, 0xe4, 0xc9, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x08, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x93, 0x01, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xa4, 0xb5, 0xc9, 0x1f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4e, 0x82, 0x41, 0x4b,
	0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x80, 0x01, 0x0a,
	0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0xa9, 0xeb, 0xa1, 0xea, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x47, 0x82, 0x41, 0x44,
	0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x9b, 0x01, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x80, 0xea, 0x87, 0x3f, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x73, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x54, 0x59, 0x50, 0x45, 0x42,
	0x44, 0x82, 0x41, 0x41, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0xcc, 0x06,
	0x0a, 0x0e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73,
	0x12, 0xee, 0x01, 0x0a, 0x0e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x62, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x18, 0xf4, 0xdf, 0xdc, 0xf3, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x65, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x73, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x4b, 0x65, 0x79, 0x42, 0x5c, 0x82, 0x41, 0x59, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2d, 0x62, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x73, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2d, 0x62, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x52, 0x0d, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x1a, 0xb0, 0x01, 0x0a, 0x0d, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x12, 0x9e, 0x01, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x72, 0x18, 0xd1, 0xea, 0x87, 0x6f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x66, 0x82, 0x41, 0x63, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2d, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73,
	0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2d, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2f,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x72, 0x1a, 0x95, 0x03, 0x0a, 0x10, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x75, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x61, 0x82, 0x41, 0x5e, 0x2f, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2d, 0x62,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2d, 0x62,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x7e, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x64, 0x82, 0x41, 0x61, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2d, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73,
	0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2d, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x89, 0x01, 0x0a, 0x0e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x62, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x62, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x2e,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x0d, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x1a, 0xd4, 0x01, 0x0a,
	0x11, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b,
	0x65, 0x79, 0x12, 0x50, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x40,
	0x82, 0x41, 0x3d, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x69, 0x64,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x6d, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0xd9, 0x19, 0x0a, 0x07, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12,
	0x83, 0x01, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x87, 0x9a, 0xf3, 0xa3, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x73, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x42, 0x2d,
	0x82, 0x41, 0x2a, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x06, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x1a, 0xd1, 0x16, 0x0a, 0x06, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x12, 0x8d, 0x01, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0xa8, 0xab, 0xd9, 0x28,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x73, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x42, 0x34, 0x82, 0x41, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0xad, 0x01, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x96, 0xad, 0xb9, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x3c, 0x82, 0x41, 0x39, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0xa5, 0x01, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x18, 0xd9, 0xe5, 0xcc, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x42, 0x3a,
	0x82, 0x41, 0x37, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x64, 0x65,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x70, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x9f, 0x8e, 0xff, 0xc3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x37, 0x82, 0x41, 0x34, 0x2f, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x67, 0x0a, 0x06, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x18, 0xc6, 0xb8, 0xa1, 0xc7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x34, 0x82, 0x41, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x06, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x12, 0x6c, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0xad, 0xa8, 0xfa, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x36, 0x82, 0x41, 0x33, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x72,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x9e, 0x01, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73,
	0x18, 0xf7, 0xc5, 0xb7, 0x8f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x42, 0x38, 0x82, 0x41,
	0x35, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x73, 0x12, 0x69, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0xde, 0xcc,
	0xec, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x35, 0x82,
	0x41, 0x32, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x1a, 0xe2, 0x01,
	0x0a, 0x06, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x72, 0x0a, 0x08, 0x6d, 0x64, 0x35, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x8a, 0x81, 0x95, 0x4b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x3d, 0x82, 0x41, 0x3a, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x6d, 0x64, 0x35, 0x2d, 0x68,
	0x61, 0x73, 0x68, 0x52, 0x07, 0x6d, 0x64, 0x35, 0x48, 0x61, 0x73, 0x68, 0x12, 0x64, 0x0a, 0x03,
	0x75, 0x72, 0x69, 0x18, 0x9f, 0xd9, 0xc6, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x38, 0x82, 0x41, 0x35, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x75, 0x72, 0x69, 0x52, 0x03, 0x75,
	0x72, 0x69, 0x1a, 0x8c, 0x04, 0x0a, 0x0e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x9b, 0x01, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x18, 0x89, 0x89, 0xf6, 0xd4, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x42, 0x41,
	0x53, 0x45, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x12, 0xb2, 0x01, 0x0a, 0x11, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0xdb, 0xe1, 0xfb, 0x53, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x54, 0x59, 0x50, 0x45, 0x42, 0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2d,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x10, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0xa6, 0x01, 0x0a, 0x0b, 0x73, 0x75, 0x62,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0xa5, 0xea, 0xd4, 0x67, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x37, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x53, 0x55, 0x42, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x42, 0x41, 0x53, 0x45, 0x42, 0x48, 0x82, 0x41, 0x45, 0x2f,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x75, 0x62, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x1a, 0x9f, 0x01, 0x0a, 0x0c, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69,
	0x65, 0x73, 0x12, 0x8e, 0x01, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0xc0, 0xae, 0x86, 0x9d, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4a, 0x82, 0x41, 0x47, 0x2f, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x2d, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x1a, 0xf3, 0x06, 0x0a, 0x0a, 0x53, 0x75, 0x62, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x73, 0x12, 0xb2, 0x01, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x18, 0xfc, 0xb7, 0xee, 0x70, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x53, 0x75, 0x62, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73,
	0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x09, 0x73, 0x75,
	0x62, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x1a, 0xd7, 0x03, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0xb7, 0x01, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0xf5, 0xc0, 0xd5, 0x5f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x53, 0x75, 0x62, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x42, 0x49, 0x82, 0x41,
	0x46, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x1a,
	0x8f, 0x02, 0x0a, 0x06, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x88, 0x01, 0x0a, 0x08, 0x6d,
	0x64, 0x35, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0xf9, 0xbc, 0xa5, 0xb3, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x52, 0x82, 0x41, 0x4f, 0x2f, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73,
	0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2f, 0x6d, 0x64, 0x35, 0x2d, 0x68, 0x61, 0x73, 0x68, 0x52, 0x07, 0x6d, 0x64,
	0x35, 0x48, 0x61, 0x73, 0x68, 0x12, 0x7a, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x8e, 0x84, 0xae,
	0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4d, 0x82,
	0x41, 0x4a, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x73, 0x75, 0x62,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x75, 0x72, 0x69, 0x52, 0x03, 0x75, 0x72,
	0x69, 0x1a, 0xd5, 0x01, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4b,
	0x65, 0x79, 0x12, 0x5b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x47, 0x82, 0x41, 0x44, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f,
	0x73, 0x75, 0x62, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x68, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x73, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x09,
	0x73, 0x75, 0x62, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x1a, 0xf3, 0x01, 0x0a, 0x09, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x46, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0x82, 0x41, 0x2f, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x4f, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x4d, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73,
	0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x1a,
	0xfd, 0x0e, 0x0a, 0x0e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x73, 0x12, 0xaf, 0x01, 0x0a, 0x0e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x62,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0xa3, 0x9d, 0x91, 0x49, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x42, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x42, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x42, 0x3d, 0x82, 0x41, 0x3a, 0x2f, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2d, 0x62,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2d, 0x62,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x0d, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x42, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x1a, 0xfe, 0x0a, 0x0a, 0x0d, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0xb0, 0x01, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x18, 0x8f, 0xfa, 0xbb, 0xbc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x42, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x2d, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x2d, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x1a, 0xb9, 0x09, 0x0a, 0x07, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0xbe, 0x01, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0xc0, 0xfb, 0xba, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73,
	0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2e, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4b, 0x65, 0x79,
	0x42, 0x4c, 0x82, 0x41, 0x49, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2d, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73,
	0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2d, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2f,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x06,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x91, 0x06, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0xac, 0x01, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xed, 0xca, 0xcc, 0x9d, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x60, 0x82, 0x41, 0x5d, 0x2f,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x2d, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x2d, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69,
	0x62, 0x6c, 0x65, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x12, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x86, 0x01, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0xe7, 0xfe, 0x8d, 0xe7,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x53, 0x82, 0x41,
	0x50, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x2d, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x2f, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x2d, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2f, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x8e, 0x01, 0x0a, 0x09, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x18, 0xed, 0x94, 0xa6, 0x1d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x56, 0x82, 0x41, 0x53, 0x2f, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2d,
	0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2d,
	0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2f, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x52,
	0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x12, 0x9c, 0x01, 0x0a, 0x0e, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0xe3, 0xaa,
	0xd5, 0x4a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5b, 0x82,
	0x41, 0x58, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x2d, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x2f, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x2d, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2f, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2f, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x2d, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x0d, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x9e, 0x01, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0xb7, 0xd5, 0xb7, 0xde, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x43, 0x41, 0x54, 0x41, 0x4c, 0x4f, 0x47, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x54, 0x59, 0x50,
	0x45, 0x42, 0x51, 0x82, 0x41, 0x4e, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2d, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x73, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2d, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2f,
	0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0xd8, 0x01, 0x0a, 0x09, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x5f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2d, 0x62, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x73, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2d, 0x62, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2f, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x2f, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x6a, 0x0a, 0x06, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73,
	0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2e, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x06, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0xb7, 0x02, 0x0a, 0x10, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x56, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x2d, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x2d, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x5f, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2d, 0x62, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x73, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2d, 0x62, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x6a, 0x0a, 0x0e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x62,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x73, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x52, 0x0d, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x1a,
	0x96, 0x01, 0x0a, 0x0f, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x23, 0x82, 0x41, 0x20, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x0c,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x17, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x2e,
	0x6e, 0x6f, 0x63, 0x73, 0x79, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_openconfig_module_catalog_proto_rawDescOnce sync.Once
	file_openconfig_module_catalog_proto_rawDescData = file_openconfig_module_catalog_proto_rawDesc
)

func file_openconfig_module_catalog_proto_rawDescGZIP() []byte {
	file_openconfig_module_catalog_proto_rawDescOnce.Do(func() {
		file_openconfig_module_catalog_proto_rawDescData = protoimpl.X.CompressGZIP(file_openconfig_module_catalog_proto_rawDescData)
	})
	return file_openconfig_module_catalog_proto_rawDescData
}

var file_openconfig_module_catalog_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_openconfig_module_catalog_proto_goTypes = []interface{}{
	(*Organizations)(nil),                                                                             // 0: openconfig.Organizations
	(*Organizations_Organization)(nil),                                                                // 1: openconfig.Organizations.Organization
	(*Organizations_OrganizationKey)(nil),                                                             // 2: openconfig.Organizations.OrganizationKey
	(*Organizations_Organization_FeatureBundles)(nil),                                                 // 3: openconfig.Organizations.Organization.FeatureBundles
	(*Organizations_Organization_Implementations)(nil),                                                // 4: openconfig.Organizations.Organization.Implementations
	(*Organizations_Organization_Modules)(nil),                                                        // 5: openconfig.Organizations.Organization.Modules
	(*Organizations_Organization_ReleaseBundles)(nil),                                                 // 6: openconfig.Organizations.Organization.ReleaseBundles
	(*Organizations_Organization_FeatureBundles_FeatureBundle)(nil),                                   // 7: openconfig.Organizations.Organization.FeatureBundles.FeatureBundle
	(*Organizations_Organization_FeatureBundles_FeatureBundleKey)(nil),                                // 8: openconfig.Organizations.Organization.FeatureBundles.FeatureBundleKey
	(*Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles)(nil),                    // 9: openconfig.Organizations.Organization.FeatureBundles.FeatureBundle.FeatureBundles
	(*Organizations_Organization_FeatureBundles_FeatureBundle_ReleaseBundle)(nil),                     // 10: openconfig.Organizations.Organization.FeatureBundles.FeatureBundle.ReleaseBundle
	(*Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles_FeatureBundle)(nil),      // 11: openconfig.Organizations.Organization.FeatureBundles.FeatureBundle.FeatureBundles.FeatureBundle
	(*Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles_FeatureBundleKey)(nil),   // 12: openconfig.Organizations.Organization.FeatureBundles.FeatureBundle.FeatureBundles.FeatureBundleKey
	(*Organizations_Organization_Implementations_Implementation)(nil),                                 // 13: openconfig.Organizations.Organization.Implementations.Implementation
	(*Organizations_Organization_Implementations_ImplementationKey)(nil),                              // 14: openconfig.Organizations.Organization.Implementations.ImplementationKey
	(*Organizations_Organization_Implementations_Implementation_FeatureBundles)(nil),                  // 15: openconfig.Organizations.Organization.Implementations.Implementation.FeatureBundles
	(*Organizations_Organization_Implementations_Implementation_FeatureBundles_FeatureBundle)(nil),    // 16: openconfig.Organizations.Organization.Implementations.Implementation.FeatureBundles.FeatureBundle
	(*Organizations_Organization_Implementations_Implementation_FeatureBundles_FeatureBundleKey)(nil), // 17: openconfig.Organizations.Organization.Implementations.Implementation.FeatureBundles.FeatureBundleKey
	(*Organizations_Organization_Modules_Module)(nil),                                                 // 18: openconfig.Organizations.Organization.Modules.Module
	(*Organizations_Organization_Modules_ModuleKey)(nil),                                              // 19: openconfig.Organizations.Organization.Modules.ModuleKey
	(*Organizations_Organization_Modules_Module_Access)(nil),                                          // 20: openconfig.Organizations.Organization.Modules.Module.Access
	(*Organizations_Organization_Modules_Module_Classification)(nil),                                  // 21: openconfig.Organizations.Organization.Modules.Module.Classification
	(*Organizations_Organization_Modules_Module_Dependencies)(nil),                                    // 22: openconfig.Organizations.Organization.Modules.Module.Dependencies
	(*Organizations_Organization_Modules_Module_Submodules)(nil),                                      // 23: openconfig.Organizations.Organization.Modules.Module.Submodules
	(*Organizations_Organization_Modules_Module_Submodules_Submodule)(nil),                            // 24: openconfig.Organizations.Organization.Modules.Module.Submodules.Submodule
	(*Organizations_Organization_Modules_Module_Submodules_SubmoduleKey)(nil),                         // 25: openconfig.Organizations.Organization.Modules.Module.Submodules.SubmoduleKey
	(*Organizations_Organization_Modules_Module_Submodules_Submodule_Access)(nil),                     // 26: openconfig.Organizations.Organization.Modules.Module.Submodules.Submodule.Access
	(*Organizations_Organization_ReleaseBundles_ReleaseBundle)(nil),                                   // 27: openconfig.Organizations.Organization.ReleaseBundles.ReleaseBundle
	(*Organizations_Organization_ReleaseBundles_ReleaseBundleKey)(nil),                                // 28: openconfig.Organizations.Organization.ReleaseBundles.ReleaseBundleKey
	(*Organizations_Organization_ReleaseBundles_ReleaseBundle_Members)(nil),                           // 29: openconfig.Organizations.Organization.ReleaseBundles.ReleaseBundle.Members
	(*Organizations_Organization_ReleaseBundles_ReleaseBundle_Members_Member)(nil),                    // 30: openconfig.Organizations.Organization.ReleaseBundles.ReleaseBundle.Members.Member
	(*Organizations_Organization_ReleaseBundles_ReleaseBundle_Members_MemberKey)(nil),                 // 31: openconfig.Organizations.Organization.ReleaseBundles.ReleaseBundle.Members.MemberKey
	(*ywrapper.StringValue)(nil),                                                                      // 32: ywrapper.StringValue
	(OpenconfigCatalogTypesORGANIZATIONTYPE)(0),                                                       // 33: openconfig.OpenconfigCatalogTypesORGANIZATIONTYPE
	(OpenconfigCatalogTypesIMPLEMENTATIONSTATUSTYPE)(0),                                               // 34: openconfig.OpenconfigCatalogTypesIMPLEMENTATIONSTATUSTYPE
	(OpenconfigCatalogTypesMODULECATEGORYBASE)(0),                                                     // 35: openconfig.OpenconfigCatalogTypesMODULECATEGORYBASE
	(OpenconfigCatalogTypesMODULESTATUSTYPE)(0),                                                       // 36: openconfig.OpenconfigCatalogTypesMODULESTATUSTYPE
	(OpenconfigCatalogTypesMODULESUBCATEGORYBASE)(0),                                                  // 37: openconfig.OpenconfigCatalogTypesMODULESUBCATEGORYBASE
	(OpenconfigCatalogTypesCATALOGMEMBERTYPE)(0),                                                      // 38: openconfig.OpenconfigCatalogTypesCATALOGMEMBERTYPE
}
var file_openconfig_module_catalog_proto_depIdxs = []int32{
	2,  // 0: openconfig.Organizations.organization:type_name -> openconfig.Organizations.OrganizationKey
	32, // 1: openconfig.Organizations.Organization.contact:type_name -> ywrapper.StringValue
	3,  // 2: openconfig.Organizations.Organization.feature_bundles:type_name -> openconfig.Organizations.Organization.FeatureBundles
	4,  // 3: openconfig.Organizations.Organization.implementations:type_name -> openconfig.Organizations.Organization.Implementations
	5,  // 4: openconfig.Organizations.Organization.modules:type_name -> openconfig.Organizations.Organization.Modules
	6,  // 5: openconfig.Organizations.Organization.release_bundles:type_name -> openconfig.Organizations.Organization.ReleaseBundles
	33, // 6: openconfig.Organizations.Organization.type:type_name -> openconfig.OpenconfigCatalogTypesORGANIZATIONTYPE
	1,  // 7: openconfig.Organizations.OrganizationKey.organization:type_name -> openconfig.Organizations.Organization
	8,  // 8: openconfig.Organizations.Organization.FeatureBundles.feature_bundle:type_name -> openconfig.Organizations.Organization.FeatureBundles.FeatureBundleKey
	14, // 9: openconfig.Organizations.Organization.Implementations.implementation:type_name -> openconfig.Organizations.Organization.Implementations.ImplementationKey
	19, // 10: openconfig.Organizations.Organization.Modules.module:type_name -> openconfig.Organizations.Organization.Modules.ModuleKey
	28, // 11: openconfig.Organizations.Organization.ReleaseBundles.release_bundle:type_name -> openconfig.Organizations.Organization.ReleaseBundles.ReleaseBundleKey
	9,  // 12: openconfig.Organizations.Organization.FeatureBundles.FeatureBundle.feature_bundles:type_name -> openconfig.Organizations.Organization.FeatureBundles.FeatureBundle.FeatureBundles
	32, // 13: openconfig.Organizations.Organization.FeatureBundles.FeatureBundle.path:type_name -> ywrapper.StringValue
	10, // 14: openconfig.Organizations.Organization.FeatureBundles.FeatureBundle.release_bundle:type_name -> openconfig.Organizations.Organization.FeatureBundles.FeatureBundle.ReleaseBundle
	7,  // 15: openconfig.Organizations.Organization.FeatureBundles.FeatureBundleKey.feature_bundle:type_name -> openconfig.Organizations.Organization.FeatureBundles.FeatureBundle
	12, // 16: openconfig.Organizations.Organization.FeatureBundles.FeatureBundle.FeatureBundles.feature_bundle:type_name -> openconfig.Organizations.Organization.FeatureBundles.FeatureBundle.FeatureBundles.FeatureBundleKey
	32, // 17: openconfig.Organizations.Organization.FeatureBundles.FeatureBundle.ReleaseBundle.name:type_name -> ywrapper.StringValue
	32, // 18: openconfig.Organizations.Organization.FeatureBundles.FeatureBundle.ReleaseBundle.publisher:type_name -> ywrapper.StringValue
	32, // 19: openconfig.Organizations.Organization.FeatureBundles.FeatureBundle.ReleaseBundle.version:type_name -> ywrapper.StringValue
	32, // 20: openconfig.Organizations.Organization.FeatureBundles.FeatureBundle.FeatureBundles.FeatureBundle.publisher:type_name -> ywrapper.StringValue
	32, // 21: openconfig.Organizations.Organization.FeatureBundles.FeatureBundle.FeatureBundles.FeatureBundle.version:type_name -> ywrapper.StringValue
	11, // 22: openconfig.Organizations.Organization.FeatureBundles.FeatureBundle.FeatureBundles.FeatureBundleKey.feature_bundle:type_name -> openconfig.Organizations.Organization.FeatureBundles.FeatureBundle.FeatureBundles.FeatureBundle
	32, // 23: openconfig.Organizations.Organization.Implementations.Implementation.description:type_name -> ywrapper.StringValue
	15, // 24: openconfig.Organizations.Organization.Implementations.Implementation.feature_bundles:type_name -> openconfig.Organizations.Organization.Implementations.Implementation.FeatureBundles
	32, // 25: openconfig.Organizations.Organization.Implementations.Implementation.platform:type_name -> ywrapper.StringValue
	32, // 26: openconfig.Organizations.Organization.Implementations.Implementation.platform_version:type_name -> ywrapper.StringValue
	32, // 27: openconfig.Organizations.Organization.Implementations.Implementation.reference:type_name -> ywrapper.StringValue
	34, // 28: openconfig.Organizations.Organization.Implementations.Implementation.status:type_name -> openconfig.OpenconfigCatalogTypesIMPLEMENTATIONSTATUSTYPE
	13, // 29: openconfig.Organizations.Organization.Implementations.ImplementationKey.implementation:type_name -> openconfig.Organizations.Organization.Implementations.Implementation
	17, // 30: openconfig.Organizations.Organization.Implementations.Implementation.FeatureBundles.feature_bundle:type_name -> openconfig.Organizations.Organization.Implementations.Implementation.FeatureBundles.FeatureBundleKey
	32, // 31: openconfig.Organizations.Organization.Implementations.Implementation.FeatureBundles.FeatureBundle.publisher:type_name -> ywrapper.StringValue
	16, // 32: openconfig.Organizations.Organization.Implementations.Implementation.FeatureBundles.FeatureBundleKey.feature_bundle:type_name -> openconfig.Organizations.Organization.Implementations.Implementation.FeatureBundles.FeatureBundle
	20, // 33: openconfig.Organizations.Organization.Modules.Module.access:type_name -> openconfig.Organizations.Organization.Modules.Module.Access
	21, // 34: openconfig.Organizations.Organization.Modules.Module.classification:type_name -> openconfig.Organizations.Organization.Modules.Module.Classification
	22, // 35: openconfig.Organizations.Organization.Modules.Module.dependencies:type_name -> openconfig.Organizations.Organization.Modules.Module.Dependencies
	32, // 36: openconfig.Organizations.Organization.Modules.Module.namespace:type_name -> ywrapper.StringValue
	32, // 37: openconfig.Organizations.Organization.Modules.Module.prefix:type_name -> ywrapper.StringValue
	32, // 38: openconfig.Organizations.Organization.Modules.Module.revision:type_name -> ywrapper.StringValue
	23, // 39: openconfig.Organizations.Organization.Modules.Module.submodules:type_name -> openconfig.Organizations.Organization.Modules.Module.Submodules
	32, // 40: openconfig.Organizations.Organization.Modules.Module.summary:type_name -> ywrapper.StringValue
	18, // 41: openconfig.Organizations.Organization.Modules.ModuleKey.module:type_name -> openconfig.Organizations.Organization.Modules.Module
	32, // 42: openconfig.Organizations.Organization.Modules.Module.Access.md5_hash:type_name -> ywrapper.StringValue
	32, // 43: openconfig.Organizations.Organization.Modules.Module.Access.uri:type_name -> ywrapper.StringValue
	35, // 44: openconfig.Organizations.Organization.Modules.Module.Classification.category:type_name -> openconfig.OpenconfigCatalogTypesMODULECATEGORYBASE
	36, // 45: openconfig.Organizations.Organization.Modules.Module.Classification.deployment_status:type_name -> openconfig.OpenconfigCatalogTypesMODULESTATUSTYPE
	37, // 46: openconfig.Organizations.Organization.Modules.Module.Classification.subcategory:type_name -> openconfig.OpenconfigCatalogTypesMODULESUBCATEGORYBASE
	32, // 47: openconfig.Organizations.Organization.Modules.Module.Dependencies.required_module:type_name -> ywrapper.StringValue
	25, // 48: openconfig.Organizations.Organization.Modules.Module.Submodules.submodule:type_name -> openconfig.Organizations.Organization.Modules.Module.Submodules.SubmoduleKey
	26, // 49: openconfig.Organizations.Organization.Modules.Module.Submodules.Submodule.access:type_name -> openconfig.Organizations.Organization.Modules.Module.Submodules.Submodule.Access
	24, // 50: openconfig.Organizations.Organization.Modules.Module.Submodules.SubmoduleKey.submodule:type_name -> openconfig.Organizations.Organization.Modules.Module.Submodules.Submodule
	32, // 51: openconfig.Organizations.Organization.Modules.Module.Submodules.Submodule.Access.md5_hash:type_name -> ywrapper.StringValue
	32, // 52: openconfig.Organizations.Organization.Modules.Module.Submodules.Submodule.Access.uri:type_name -> ywrapper.StringValue
	29, // 53: openconfig.Organizations.Organization.ReleaseBundles.ReleaseBundle.members:type_name -> openconfig.Organizations.Organization.ReleaseBundles.ReleaseBundle.Members
	27, // 54: openconfig.Organizations.Organization.ReleaseBundles.ReleaseBundleKey.release_bundle:type_name -> openconfig.Organizations.Organization.ReleaseBundles.ReleaseBundle
	31, // 55: openconfig.Organizations.Organization.ReleaseBundles.ReleaseBundle.Members.member:type_name -> openconfig.Organizations.Organization.ReleaseBundles.ReleaseBundle.Members.MemberKey
	32, // 56: openconfig.Organizations.Organization.ReleaseBundles.ReleaseBundle.Members.Member.compatible_versions:type_name -> ywrapper.StringValue
	32, // 57: openconfig.Organizations.Organization.ReleaseBundles.ReleaseBundle.Members.Member.module:type_name -> ywrapper.StringValue
	32, // 58: openconfig.Organizations.Organization.ReleaseBundles.ReleaseBundle.Members.Member.publisher:type_name -> ywrapper.StringValue
	32, // 59: openconfig.Organizations.Organization.ReleaseBundles.ReleaseBundle.Members.Member.release_bundle:type_name -> ywrapper.StringValue
	38, // 60: openconfig.Organizations.Organization.ReleaseBundles.ReleaseBundle.Members.Member.type:type_name -> openconfig.OpenconfigCatalogTypesCATALOGMEMBERTYPE
	30, // 61: openconfig.Organizations.Organization.ReleaseBundles.ReleaseBundle.Members.MemberKey.member:type_name -> openconfig.Organizations.Organization.ReleaseBundles.ReleaseBundle.Members.Member
	62, // [62:62] is the sub-list for method output_type
	62, // [62:62] is the sub-list for method input_type
	62, // [62:62] is the sub-list for extension type_name
	62, // [62:62] is the sub-list for extension extendee
	0,  // [0:62] is the sub-list for field type_name
}

func init() { file_openconfig_module_catalog_proto_init() }
func file_openconfig_module_catalog_proto_init() {
	if File_openconfig_module_catalog_proto != nil {
		return
	}
	file_openconfig_enums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_openconfig_module_catalog_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Organizations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_module_catalog_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Organizations_Organization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_module_catalog_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Organizations_OrganizationKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_module_catalog_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Organizations_Organization_FeatureBundles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_module_catalog_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Organizations_Organization_Implementations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_module_catalog_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Organizations_Organization_Modules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_module_catalog_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Organizations_Organization_ReleaseBundles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_module_catalog_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Organizations_Organization_FeatureBundles_FeatureBundle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_module_catalog_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Organizations_Organization_FeatureBundles_FeatureBundleKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_module_catalog_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_module_catalog_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Organizations_Organization_FeatureBundles_FeatureBundle_ReleaseBundle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_module_catalog_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles_FeatureBundle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_module_catalog_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles_FeatureBundleKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_module_catalog_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Organizations_Organization_Implementations_Implementation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_module_catalog_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Organizations_Organization_Implementations_ImplementationKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_module_catalog_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Organizations_Organization_Implementations_Implementation_FeatureBundles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_module_catalog_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Organizations_Organization_Implementations_Implementation_FeatureBundles_FeatureBundle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_module_catalog_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Organizations_Organization_Implementations_Implementation_FeatureBundles_FeatureBundleKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_module_catalog_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Organizations_Organization_Modules_Module); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_module_catalog_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Organizations_Organization_Modules_ModuleKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_module_catalog_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Organizations_Organization_Modules_Module_Access); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_module_catalog_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Organizations_Organization_Modules_Module_Classification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_module_catalog_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Organizations_Organization_Modules_Module_Dependencies); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_module_catalog_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Organizations_Organization_Modules_Module_Submodules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_module_catalog_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Organizations_Organization_Modules_Module_Submodules_Submodule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_module_catalog_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Organizations_Organization_Modules_Module_Submodules_SubmoduleKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_module_catalog_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Organizations_Organization_Modules_Module_Submodules_Submodule_Access); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_module_catalog_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Organizations_Organization_ReleaseBundles_ReleaseBundle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_module_catalog_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Organizations_Organization_ReleaseBundles_ReleaseBundleKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_module_catalog_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Organizations_Organization_ReleaseBundles_ReleaseBundle_Members); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_module_catalog_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Organizations_Organization_ReleaseBundles_ReleaseBundle_Members_Member); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_module_catalog_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Organizations_Organization_ReleaseBundles_ReleaseBundle_Members_MemberKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_openconfig_module_catalog_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_openconfig_module_catalog_proto_goTypes,
		DependencyIndexes: file_openconfig_module_catalog_proto_depIdxs,
		MessageInfos:      file_openconfig_module_catalog_proto_msgTypes,
	}.Build()
	File_openconfig_module_catalog_proto = out.File
	file_openconfig_module_catalog_proto_rawDesc = nil
	file_openconfig_module_catalog_proto_goTypes = nil
	file_openconfig_module_catalog_proto_depIdxs = nil
}
