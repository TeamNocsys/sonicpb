// openconfig.openconfig_bgp is generated by proto_generator as a protobuf
// representation of a YANG schema.
//
// Input schema modules:
//  - ../api/yang/public/doc/openconfig-example.yang
//  - ../api/yang/public/third_party/ietf/iana-if-type.yang
//  - ../api/yang/public/third_party/ietf/ietf-interfaces.yang
//  - ../api/yang/public/third_party/ietf/ietf-yang-types.yang
//  - ../api/yang/public/third_party/ietf/ietf-inet-types.yang
//  - ../api/yang/public/release/models/bfd/openconfig-bfd.yang
//  - ../api/yang/public/release/models/vlan/openconfig-vlan.yang
//  - ../api/yang/public/release/models/vlan/openconfig-vlan-types.yang
//  - ../api/yang/public/release/models/wifi/openconfig-access-points.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-mac.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-types.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-phy.yang
//  - ../api/yang/public/release/models/wifi/openconfig-ap-interfaces.yang
//  - ../api/yang/public/release/models/wifi/openconfig-ap-manager.yang
//  - ../api/yang/public/release/models/macsec/openconfig-macsec.yang
//  - ../api/yang/public/release/models/macsec/openconfig-macsec-types.yang
//  - ../api/yang/public/release/models/stp/openconfig-spanning-tree-types.yang
//  - ../api/yang/public/release/models/stp/openconfig-spanning-tree.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-errors.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-peer-group.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-types.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-global.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-neighbor.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common-structure.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-policy.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common-multiprotocol.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-types.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-port.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-fan.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-linecard.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-ext.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-cpu.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-psu.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-transceiver.yang
//  - ../api/yang/public/release/models/multicast/openconfig-pim-types.yang
//  - ../api/yang/public/release/models/multicast/openconfig-igmp-types.yang
//  - ../api/yang/public/release/models/multicast/openconfig-igmp.yang
//  - ../api/yang/public/release/models/multicast/openconfig-pim.yang
//  - ../api/yang/public/release/models/catalog/openconfig-module-catalog.yang
//  - ../api/yang/public/release/models/catalog/openconfig-catalog-types.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-interfaces.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-8021x.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-types.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-aggregate.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-poe.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-tunnel.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ip.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ethernet.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ethernet-ext.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ip-ext.yang
//  - ../api/yang/public/release/models/acl/openconfig-packet-match-types.yang
//  - ../api/yang/public/release/models/acl/openconfig-packet-match.yang
//  - ../api/yang/public/release/models/acl/openconfig-acl.yang
//  - ../api/yang/public/release/models/system/openconfig-license.yang
//  - ../api/yang/public/release/models/system/openconfig-system.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-radius.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa.yang
//  - ../api/yang/public/release/models/system/openconfig-system-management.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-types.yang
//  - ../api/yang/public/release/models/system/openconfig-procmon.yang
//  - ../api/yang/public/release/models/system/openconfig-messages.yang
//  - ../api/yang/public/release/models/system/openconfig-system-terminal.yang
//  - ../api/yang/public/release/models/system/openconfig-system-logging.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-tacacs.yang
//  - ../api/yang/public/release/models/system/openconfig-alarms.yang
//  - ../api/yang/public/release/models/system/openconfig-alarm-types.yang
//  - ../api/yang/public/release/models/policy/openconfig-policy-types.yang
//  - ../api/yang/public/release/models/policy/openconfig-routing-policy.yang
//  - ../api/yang/public/release/models/lacp/openconfig-lacp.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-wavelength-router.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-optical-amplifier.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-protection.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-channel-monitor.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-connectivity.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-optical-attenuator.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-common.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-types.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-terminal-device.yang
//  - ../api/yang/public/release/models/telemetry/openconfig-telemetry-types.yang
//  - ../api/yang/public/release/models/telemetry/openconfig-telemetry.yang
//  - ../api/yang/public/release/models/openflow/openconfig-openflow.yang
//  - ../api/yang/public/release/models/openflow/openconfig-openflow-types.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-tables.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-ext.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-table-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-shared-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-types.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-types.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-elements.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-interfaces.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-srte.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-forwarding-policies.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-interfaces.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-path-groups.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
//  - ../api/yang/public/release/models/relay-agent/openconfig-relay-agent.yang
//  - ../api/yang/public/release/models/lldp/openconfig-lldp.yang
//  - ../api/yang/public/release/models/lldp/openconfig-lldp-types.yang
//  - ../api/yang/public/release/models/openconfig-extensions.yang
//  - ../api/yang/public/release/models/types/openconfig-yang-types.yang
//  - ../api/yang/public/release/models/types/openconfig-inet-types.yang
//  - ../api/yang/public/release/models/types/openconfig-types.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-srte-policy.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-rsvp-sr-ext.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-segment-routing-types.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-segment-routing.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-types.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-igp.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-te.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-rsvp.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-static.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-sr.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-ldp.yang
//  - ../api/yang/public/release/models/probes/openconfig-probes-types.yang
//  - ../api/yang/public/release/models/probes/openconfig-probes.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-lsp.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-lsdb-types.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-policy.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-types.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-routing.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-area.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospf-policy.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-common.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-global.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-area-interface.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-lsdb.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospf-types.yang
//  - ../api/yang/public/release/models/local-routing/openconfig-local-routing.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-l3.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-l2.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-policy.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-types.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-mpls.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-common.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-types.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ipv6.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-pf.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-network-instance.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ipv4.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ethernet.yang

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        (unknown)
// source: openconfig_bgp.proto

package openconfig

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/openconfig/ygot/proto/yext"
	ywrapper "github.com/openconfig/ygot/proto/ywrapper"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Bgp_Neighbors_Neighbor_GracefulRestart_State_Mode int32

const (
	Bgp_Neighbors_Neighbor_GracefulRestart_State_MODE_UNSET         Bgp_Neighbors_Neighbor_GracefulRestart_State_Mode = 0
	Bgp_Neighbors_Neighbor_GracefulRestart_State_MODE_HELPER_ONLY   Bgp_Neighbors_Neighbor_GracefulRestart_State_Mode = 1
	Bgp_Neighbors_Neighbor_GracefulRestart_State_MODE_BILATERAL     Bgp_Neighbors_Neighbor_GracefulRestart_State_Mode = 2
	Bgp_Neighbors_Neighbor_GracefulRestart_State_MODE_REMOTE_HELPER Bgp_Neighbors_Neighbor_GracefulRestart_State_Mode = 3
)

// Enum value maps for Bgp_Neighbors_Neighbor_GracefulRestart_State_Mode.
var (
	Bgp_Neighbors_Neighbor_GracefulRestart_State_Mode_name = map[int32]string{
		0: "MODE_UNSET",
		1: "MODE_HELPER_ONLY",
		2: "MODE_BILATERAL",
		3: "MODE_REMOTE_HELPER",
	}
	Bgp_Neighbors_Neighbor_GracefulRestart_State_Mode_value = map[string]int32{
		"MODE_UNSET":         0,
		"MODE_HELPER_ONLY":   1,
		"MODE_BILATERAL":     2,
		"MODE_REMOTE_HELPER": 3,
	}
)

func (x Bgp_Neighbors_Neighbor_GracefulRestart_State_Mode) Enum() *Bgp_Neighbors_Neighbor_GracefulRestart_State_Mode {
	p := new(Bgp_Neighbors_Neighbor_GracefulRestart_State_Mode)
	*p = x
	return p
}

func (x Bgp_Neighbors_Neighbor_GracefulRestart_State_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Bgp_Neighbors_Neighbor_GracefulRestart_State_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_bgp_proto_enumTypes[0].Descriptor()
}

func (Bgp_Neighbors_Neighbor_GracefulRestart_State_Mode) Type() protoreflect.EnumType {
	return &file_openconfig_bgp_proto_enumTypes[0]
}

func (x Bgp_Neighbors_Neighbor_GracefulRestart_State_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_GracefulRestart_State_Mode.Descriptor instead.
func (Bgp_Neighbors_Neighbor_GracefulRestart_State_Mode) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 6, 1, 0}
}

type Bgp_Neighbors_Neighbor_State_SessionState int32

const (
	Bgp_Neighbors_Neighbor_State_SESSIONSTATE_UNSET       Bgp_Neighbors_Neighbor_State_SessionState = 0
	Bgp_Neighbors_Neighbor_State_SESSIONSTATE_IDLE        Bgp_Neighbors_Neighbor_State_SessionState = 1
	Bgp_Neighbors_Neighbor_State_SESSIONSTATE_CONNECT     Bgp_Neighbors_Neighbor_State_SessionState = 2
	Bgp_Neighbors_Neighbor_State_SESSIONSTATE_ACTIVE      Bgp_Neighbors_Neighbor_State_SessionState = 3
	Bgp_Neighbors_Neighbor_State_SESSIONSTATE_OPENSENT    Bgp_Neighbors_Neighbor_State_SessionState = 4
	Bgp_Neighbors_Neighbor_State_SESSIONSTATE_OPENCONFIRM Bgp_Neighbors_Neighbor_State_SessionState = 5
	Bgp_Neighbors_Neighbor_State_SESSIONSTATE_ESTABLISHED Bgp_Neighbors_Neighbor_State_SessionState = 6
)

// Enum value maps for Bgp_Neighbors_Neighbor_State_SessionState.
var (
	Bgp_Neighbors_Neighbor_State_SessionState_name = map[int32]string{
		0: "SESSIONSTATE_UNSET",
		1: "SESSIONSTATE_IDLE",
		2: "SESSIONSTATE_CONNECT",
		3: "SESSIONSTATE_ACTIVE",
		4: "SESSIONSTATE_OPENSENT",
		5: "SESSIONSTATE_OPENCONFIRM",
		6: "SESSIONSTATE_ESTABLISHED",
	}
	Bgp_Neighbors_Neighbor_State_SessionState_value = map[string]int32{
		"SESSIONSTATE_UNSET":       0,
		"SESSIONSTATE_IDLE":        1,
		"SESSIONSTATE_CONNECT":     2,
		"SESSIONSTATE_ACTIVE":      3,
		"SESSIONSTATE_OPENSENT":    4,
		"SESSIONSTATE_OPENCONFIRM": 5,
		"SESSIONSTATE_ESTABLISHED": 6,
	}
)

func (x Bgp_Neighbors_Neighbor_State_SessionState) Enum() *Bgp_Neighbors_Neighbor_State_SessionState {
	p := new(Bgp_Neighbors_Neighbor_State_SessionState)
	*p = x
	return p
}

func (x Bgp_Neighbors_Neighbor_State_SessionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Bgp_Neighbors_Neighbor_State_SessionState) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_bgp_proto_enumTypes[1].Descriptor()
}

func (Bgp_Neighbors_Neighbor_State_SessionState) Type() protoreflect.EnumType {
	return &file_openconfig_bgp_proto_enumTypes[1]
}

func (x Bgp_Neighbors_Neighbor_State_SessionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_State_SessionState.Descriptor instead.
func (Bgp_Neighbors_Neighbor_State_SessionState) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 9, 0}
}

type Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Sid int32

const (
	Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_SID_UNSET                   Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Sid = 0
	Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_SID_IPV4_EXPLICIT_NULL      Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Sid = 1
	Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_SID_ROUTER_ALERT            Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Sid = 2
	Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_SID_IPV6_EXPLICIT_NULL      Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Sid = 3
	Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_SID_IMPLICIT_NULL           Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Sid = 4
	Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_SID_ENTROPY_LABEL_INDICATOR Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Sid = 8
	Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_SID_NO_LABEL                Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Sid = 9
)

// Enum value maps for Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Sid.
var (
	Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Sid_name = map[int32]string{
		0: "SID_UNSET",
		1: "SID_IPV4_EXPLICIT_NULL",
		2: "SID_ROUTER_ALERT",
		3: "SID_IPV6_EXPLICIT_NULL",
		4: "SID_IMPLICIT_NULL",
		8: "SID_ENTROPY_LABEL_INDICATOR",
		9: "SID_NO_LABEL",
	}
	Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Sid_value = map[string]int32{
		"SID_UNSET":                   0,
		"SID_IPV4_EXPLICIT_NULL":      1,
		"SID_ROUTER_ALERT":            2,
		"SID_IPV6_EXPLICIT_NULL":      3,
		"SID_IMPLICIT_NULL":           4,
		"SID_ENTROPY_LABEL_INDICATOR": 8,
		"SID_NO_LABEL":                9,
	}
)

func (x Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Sid) Enum() *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Sid {
	p := new(Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Sid)
	*p = x
	return p
}

func (x Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Sid) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Sid) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_bgp_proto_enumTypes[2].Descriptor()
}

func (Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Sid) Type() protoreflect.EnumType {
	return &file_openconfig_bgp_proto_enumTypes[2]
}

func (x Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Sid) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Sid.Descriptor instead.
func (Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Sid) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 1, 0, 4, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0}
}

type Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Type int32

const (
	Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_TYPE_UNSET                  Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Type = 0
	Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_TYPE_MPLS_SID               Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Type = 2
	Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_TYPE_IPV6_SID               Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Type = 3
	Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_TYPE_IPV4_NODE_ADDRESS      Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Type = 4
	Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_TYPE_IPV6_NODE_ADDRESS      Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Type = 5
	Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_TYPE_IPV4_LOCAL_INTF_ID     Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Type = 6
	Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_TYPE_IPV4_LOCAL_REMOTE_ADDR Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Type = 7
	Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_TYPE_IPV6_LOCAL_INTF_ID     Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Type = 8
	Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_TYPE_IPV6_LOCAL_REMOTE_ADDR Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Type = 9
)

// Enum value maps for Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Type.
var (
	Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Type_name = map[int32]string{
		0: "TYPE_UNSET",
		2: "TYPE_MPLS_SID",
		3: "TYPE_IPV6_SID",
		4: "TYPE_IPV4_NODE_ADDRESS",
		5: "TYPE_IPV6_NODE_ADDRESS",
		6: "TYPE_IPV4_LOCAL_INTF_ID",
		7: "TYPE_IPV4_LOCAL_REMOTE_ADDR",
		8: "TYPE_IPV6_LOCAL_INTF_ID",
		9: "TYPE_IPV6_LOCAL_REMOTE_ADDR",
	}
	Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Type_value = map[string]int32{
		"TYPE_UNSET":                  0,
		"TYPE_MPLS_SID":               2,
		"TYPE_IPV6_SID":               3,
		"TYPE_IPV4_NODE_ADDRESS":      4,
		"TYPE_IPV6_NODE_ADDRESS":      5,
		"TYPE_IPV4_LOCAL_INTF_ID":     6,
		"TYPE_IPV4_LOCAL_REMOTE_ADDR": 7,
		"TYPE_IPV6_LOCAL_INTF_ID":     8,
		"TYPE_IPV6_LOCAL_REMOTE_ADDR": 9,
	}
)

func (x Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Type) Enum() *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Type {
	p := new(Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Type)
	*p = x
	return p
}

func (x Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_bgp_proto_enumTypes[3].Descriptor()
}

func (Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Type) Type() protoreflect.EnumType {
	return &file_openconfig_bgp_proto_enumTypes[3]
}

func (x Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Type.Descriptor instead.
func (Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Type) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 1, 0, 4, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1}
}

type Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State_BindingSid int32

const (
	Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State_BINDINGSID_UNSET                   Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State_BindingSid = 0
	Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State_BINDINGSID_IPV4_EXPLICIT_NULL      Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State_BindingSid = 1
	Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State_BINDINGSID_ROUTER_ALERT            Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State_BindingSid = 2
	Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State_BINDINGSID_IPV6_EXPLICIT_NULL      Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State_BindingSid = 3
	Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State_BINDINGSID_IMPLICIT_NULL           Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State_BindingSid = 4
	Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State_BINDINGSID_ENTROPY_LABEL_INDICATOR Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State_BindingSid = 8
	Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State_BINDINGSID_NO_LABEL                Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State_BindingSid = 9
)

// Enum value maps for Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State_BindingSid.
var (
	Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State_BindingSid_name = map[int32]string{
		0: "BINDINGSID_UNSET",
		1: "BINDINGSID_IPV4_EXPLICIT_NULL",
		2: "BINDINGSID_ROUTER_ALERT",
		3: "BINDINGSID_IPV6_EXPLICIT_NULL",
		4: "BINDINGSID_IMPLICIT_NULL",
		8: "BINDINGSID_ENTROPY_LABEL_INDICATOR",
		9: "BINDINGSID_NO_LABEL",
	}
	Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State_BindingSid_value = map[string]int32{
		"BINDINGSID_UNSET":                   0,
		"BINDINGSID_IPV4_EXPLICIT_NULL":      1,
		"BINDINGSID_ROUTER_ALERT":            2,
		"BINDINGSID_IPV6_EXPLICIT_NULL":      3,
		"BINDINGSID_IMPLICIT_NULL":           4,
		"BINDINGSID_ENTROPY_LABEL_INDICATOR": 8,
		"BINDINGSID_NO_LABEL":                9,
	}
)

func (x Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State_BindingSid) Enum() *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State_BindingSid {
	p := new(Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State_BindingSid)
	*p = x
	return p
}

func (x Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State_BindingSid) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State_BindingSid) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_bgp_proto_enumTypes[4].Descriptor()
}

func (Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State_BindingSid) Type() protoreflect.EnumType {
	return &file_openconfig_bgp_proto_enumTypes[4]
}

func (x Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State_BindingSid) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State_BindingSid.Descriptor instead.
func (Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State_BindingSid) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 1, 0, 4, 0, 0, 1, 0, 2, 0}
}

type Bgp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Global     *Bgp_Global     `protobuf:"bytes,289301886,opt,name=global,proto3" json:"global,omitempty"`
	Neighbors  *Bgp_Neighbors  `protobuf:"bytes,107873092,opt,name=neighbors,proto3" json:"neighbors,omitempty"`
	PeerGroups *Bgp_PeerGroups `protobuf:"bytes,394044408,opt,name=peer_groups,json=peerGroups,proto3" json:"peer_groups,omitempty"`
	Rib        *Bgp_Rib        `protobuf:"bytes,198630642,opt,name=rib,proto3" json:"rib,omitempty"`
}

func (x *Bgp) Reset() {
	*x = Bgp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp) ProtoMessage() {}

func (x *Bgp) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp.ProtoReflect.Descriptor instead.
func (*Bgp) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0}
}

func (x *Bgp) GetGlobal() *Bgp_Global {
	if x != nil {
		return x.Global
	}
	return nil
}

func (x *Bgp) GetNeighbors() *Bgp_Neighbors {
	if x != nil {
		return x.Neighbors
	}
	return nil
}

func (x *Bgp) GetPeerGroups() *Bgp_PeerGroups {
	if x != nil {
		return x.PeerGroups
	}
	return nil
}

func (x *Bgp) GetRib() *Bgp_Rib {
	if x != nil {
		return x.Rib
	}
	return nil
}

type Bgp_Global struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AfiSafis                *Bgp_Global_AfiSafis                `protobuf:"bytes,401406876,opt,name=afi_safis,json=afiSafis,proto3" json:"afi_safis,omitempty"`
	Confederation           *Bgp_Global_Confederation           `protobuf:"bytes,533312908,opt,name=confederation,proto3" json:"confederation,omitempty"`
	Config                  *Bgp_Global_Config                  `protobuf:"bytes,359445839,opt,name=config,proto3" json:"config,omitempty"`
	DefaultRouteDistance    *Bgp_Global_DefaultRouteDistance    `protobuf:"bytes,132505980,opt,name=default_route_distance,json=defaultRouteDistance,proto3" json:"default_route_distance,omitempty"`
	DynamicNeighborPrefixes *Bgp_Global_DynamicNeighborPrefixes `protobuf:"bytes,31083600,opt,name=dynamic_neighbor_prefixes,json=dynamicNeighborPrefixes,proto3" json:"dynamic_neighbor_prefixes,omitempty"`
	GracefulRestart         *Bgp_Global_GracefulRestart         `protobuf:"bytes,217267578,opt,name=graceful_restart,json=gracefulRestart,proto3" json:"graceful_restart,omitempty"`
	RouteSelectionOptions   *Bgp_Global_RouteSelectionOptions   `protobuf:"bytes,184855064,opt,name=route_selection_options,json=routeSelectionOptions,proto3" json:"route_selection_options,omitempty"`
	State                   *Bgp_Global_State                   `protobuf:"bytes,303537472,opt,name=state,proto3" json:"state,omitempty"`
	UseMultiplePaths        *Bgp_Global_UseMultiplePaths        `protobuf:"bytes,132999476,opt,name=use_multiple_paths,json=useMultiplePaths,proto3" json:"use_multiple_paths,omitempty"`
}

func (x *Bgp_Global) Reset() {
	*x = Bgp_Global{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global) ProtoMessage() {}

func (x *Bgp_Global) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global.ProtoReflect.Descriptor instead.
func (*Bgp_Global) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Bgp_Global) GetAfiSafis() *Bgp_Global_AfiSafis {
	if x != nil {
		return x.AfiSafis
	}
	return nil
}

func (x *Bgp_Global) GetConfederation() *Bgp_Global_Confederation {
	if x != nil {
		return x.Confederation
	}
	return nil
}

func (x *Bgp_Global) GetConfig() *Bgp_Global_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_Global) GetDefaultRouteDistance() *Bgp_Global_DefaultRouteDistance {
	if x != nil {
		return x.DefaultRouteDistance
	}
	return nil
}

func (x *Bgp_Global) GetDynamicNeighborPrefixes() *Bgp_Global_DynamicNeighborPrefixes {
	if x != nil {
		return x.DynamicNeighborPrefixes
	}
	return nil
}

func (x *Bgp_Global) GetGracefulRestart() *Bgp_Global_GracefulRestart {
	if x != nil {
		return x.GracefulRestart
	}
	return nil
}

func (x *Bgp_Global) GetRouteSelectionOptions() *Bgp_Global_RouteSelectionOptions {
	if x != nil {
		return x.RouteSelectionOptions
	}
	return nil
}

func (x *Bgp_Global) GetState() *Bgp_Global_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Bgp_Global) GetUseMultiplePaths() *Bgp_Global_UseMultiplePaths {
	if x != nil {
		return x.UseMultiplePaths
	}
	return nil
}

type Bgp_Neighbors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Neighbor []*Bgp_Neighbors_NeighborKey `protobuf:"bytes,233344133,rep,name=neighbor,proto3" json:"neighbor,omitempty"`
}

func (x *Bgp_Neighbors) Reset() {
	*x = Bgp_Neighbors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors) ProtoMessage() {}

func (x *Bgp_Neighbors) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Bgp_Neighbors) GetNeighbor() []*Bgp_Neighbors_NeighborKey {
	if x != nil {
		return x.Neighbor
	}
	return nil
}

type Bgp_PeerGroups struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerGroup []*Bgp_PeerGroups_PeerGroupKey `protobuf:"bytes,99789925,rep,name=peer_group,json=peerGroup,proto3" json:"peer_group,omitempty"`
}

func (x *Bgp_PeerGroups) Reset() {
	*x = Bgp_PeerGroups{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups) ProtoMessage() {}

func (x *Bgp_PeerGroups) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Bgp_PeerGroups) GetPeerGroup() []*Bgp_PeerGroups_PeerGroupKey {
	if x != nil {
		return x.PeerGroup
	}
	return nil
}

type Bgp_Rib struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AfiSafis       *Bgp_Rib_AfiSafis       `protobuf:"bytes,115302832,opt,name=afi_safis,json=afiSafis,proto3" json:"afi_safis,omitempty"`
	AttrSets       *Bgp_Rib_AttrSets       `protobuf:"bytes,337730394,opt,name=attr_sets,json=attrSets,proto3" json:"attr_sets,omitempty"`
	Communities    *Bgp_Rib_Communities    `protobuf:"bytes,246871512,opt,name=communities,proto3" json:"communities,omitempty"`
	ExtCommunities *Bgp_Rib_ExtCommunities `protobuf:"bytes,57572198,opt,name=ext_communities,json=extCommunities,proto3" json:"ext_communities,omitempty"`
}

func (x *Bgp_Rib) Reset() {
	*x = Bgp_Rib{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib) ProtoMessage() {}

func (x *Bgp_Rib) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib.ProtoReflect.Descriptor instead.
func (*Bgp_Rib) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Bgp_Rib) GetAfiSafis() *Bgp_Rib_AfiSafis {
	if x != nil {
		return x.AfiSafis
	}
	return nil
}

func (x *Bgp_Rib) GetAttrSets() *Bgp_Rib_AttrSets {
	if x != nil {
		return x.AttrSets
	}
	return nil
}

func (x *Bgp_Rib) GetCommunities() *Bgp_Rib_Communities {
	if x != nil {
		return x.Communities
	}
	return nil
}

func (x *Bgp_Rib) GetExtCommunities() *Bgp_Rib_ExtCommunities {
	if x != nil {
		return x.ExtCommunities
	}
	return nil
}

type Bgp_Global_AfiSafis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AfiSafi []*Bgp_Global_AfiSafis_AfiSafiKey `protobuf:"bytes,371866695,rep,name=afi_safi,json=afiSafi,proto3" json:"afi_safi,omitempty"`
}

func (x *Bgp_Global_AfiSafis) Reset() {
	*x = Bgp_Global_AfiSafis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *Bgp_Global_AfiSafis) GetAfiSafi() []*Bgp_Global_AfiSafis_AfiSafiKey {
	if x != nil {
		return x.AfiSafi
	}
	return nil
}

type Bgp_Global_Confederation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_Global_Confederation_Config `protobuf:"bytes,472785281,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_Global_Confederation_State  `protobuf:"bytes,13413110,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Global_Confederation) Reset() {
	*x = Bgp_Global_Confederation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_Confederation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_Confederation) ProtoMessage() {}

func (x *Bgp_Global_Confederation) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_Confederation.ProtoReflect.Descriptor instead.
func (*Bgp_Global_Confederation) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *Bgp_Global_Confederation) GetConfig() *Bgp_Global_Confederation_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_Global_Confederation) GetState() *Bgp_Global_Confederation_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Global_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	As       *ywrapper.UintValue   `protobuf:"bytes,265080902,opt,name=as,proto3" json:"as,omitempty"`
	RouterId *ywrapper.StringValue `protobuf:"bytes,485498001,opt,name=router_id,json=routerId,proto3" json:"router_id,omitempty"`
}

func (x *Bgp_Global_Config) Reset() {
	*x = Bgp_Global_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_Config) ProtoMessage() {}

func (x *Bgp_Global_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_Config.ProtoReflect.Descriptor instead.
func (*Bgp_Global_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 2}
}

func (x *Bgp_Global_Config) GetAs() *ywrapper.UintValue {
	if x != nil {
		return x.As
	}
	return nil
}

func (x *Bgp_Global_Config) GetRouterId() *ywrapper.StringValue {
	if x != nil {
		return x.RouterId
	}
	return nil
}

type Bgp_Global_DefaultRouteDistance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_Global_DefaultRouteDistance_Config `protobuf:"bytes,78674769,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_Global_DefaultRouteDistance_State  `protobuf:"bytes,407712838,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Global_DefaultRouteDistance) Reset() {
	*x = Bgp_Global_DefaultRouteDistance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_DefaultRouteDistance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_DefaultRouteDistance) ProtoMessage() {}

func (x *Bgp_Global_DefaultRouteDistance) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_DefaultRouteDistance.ProtoReflect.Descriptor instead.
func (*Bgp_Global_DefaultRouteDistance) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 3}
}

func (x *Bgp_Global_DefaultRouteDistance) GetConfig() *Bgp_Global_DefaultRouteDistance_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_Global_DefaultRouteDistance) GetState() *Bgp_Global_DefaultRouteDistance_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Global_DynamicNeighborPrefixes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DynamicNeighborPrefix []*Bgp_Global_DynamicNeighborPrefixes_DynamicNeighborPrefixKey `protobuf:"bytes,330206870,rep,name=dynamic_neighbor_prefix,json=dynamicNeighborPrefix,proto3" json:"dynamic_neighbor_prefix,omitempty"`
}

func (x *Bgp_Global_DynamicNeighborPrefixes) Reset() {
	*x = Bgp_Global_DynamicNeighborPrefixes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_DynamicNeighborPrefixes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_DynamicNeighborPrefixes) ProtoMessage() {}

func (x *Bgp_Global_DynamicNeighborPrefixes) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_DynamicNeighborPrefixes.ProtoReflect.Descriptor instead.
func (*Bgp_Global_DynamicNeighborPrefixes) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 4}
}

func (x *Bgp_Global_DynamicNeighborPrefixes) GetDynamicNeighborPrefix() []*Bgp_Global_DynamicNeighborPrefixes_DynamicNeighborPrefixKey {
	if x != nil {
		return x.DynamicNeighborPrefix
	}
	return nil
}

type Bgp_Global_GracefulRestart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_Global_GracefulRestart_Config `protobuf:"bytes,170347243,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_Global_GracefulRestart_State  `protobuf:"bytes,409796780,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Global_GracefulRestart) Reset() {
	*x = Bgp_Global_GracefulRestart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_GracefulRestart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_GracefulRestart) ProtoMessage() {}

func (x *Bgp_Global_GracefulRestart) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_GracefulRestart.ProtoReflect.Descriptor instead.
func (*Bgp_Global_GracefulRestart) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 5}
}

func (x *Bgp_Global_GracefulRestart) GetConfig() *Bgp_Global_GracefulRestart_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_Global_GracefulRestart) GetState() *Bgp_Global_GracefulRestart_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Global_RouteSelectionOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_Global_RouteSelectionOptions_Config `protobuf:"bytes,280096285,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_Global_RouteSelectionOptions_State  `protobuf:"bytes,103563026,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Global_RouteSelectionOptions) Reset() {
	*x = Bgp_Global_RouteSelectionOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_RouteSelectionOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_RouteSelectionOptions) ProtoMessage() {}

func (x *Bgp_Global_RouteSelectionOptions) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_RouteSelectionOptions.ProtoReflect.Descriptor instead.
func (*Bgp_Global_RouteSelectionOptions) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 6}
}

func (x *Bgp_Global_RouteSelectionOptions) GetConfig() *Bgp_Global_RouteSelectionOptions_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_Global_RouteSelectionOptions) GetState() *Bgp_Global_RouteSelectionOptions_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Global_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	As            *ywrapper.UintValue   `protobuf:"bytes,282295207,opt,name=as,proto3" json:"as,omitempty"`
	RouterId      *ywrapper.StringValue `protobuf:"bytes,13870058,opt,name=router_id,json=routerId,proto3" json:"router_id,omitempty"`
	TotalPaths    *ywrapper.UintValue   `protobuf:"bytes,43483868,opt,name=total_paths,json=totalPaths,proto3" json:"total_paths,omitempty"`
	TotalPrefixes *ywrapper.UintValue   `protobuf:"bytes,417295856,opt,name=total_prefixes,json=totalPrefixes,proto3" json:"total_prefixes,omitempty"`
}

func (x *Bgp_Global_State) Reset() {
	*x = Bgp_Global_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_State) ProtoMessage() {}

func (x *Bgp_Global_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_State.ProtoReflect.Descriptor instead.
func (*Bgp_Global_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 7}
}

func (x *Bgp_Global_State) GetAs() *ywrapper.UintValue {
	if x != nil {
		return x.As
	}
	return nil
}

func (x *Bgp_Global_State) GetRouterId() *ywrapper.StringValue {
	if x != nil {
		return x.RouterId
	}
	return nil
}

func (x *Bgp_Global_State) GetTotalPaths() *ywrapper.UintValue {
	if x != nil {
		return x.TotalPaths
	}
	return nil
}

func (x *Bgp_Global_State) GetTotalPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.TotalPrefixes
	}
	return nil
}

type Bgp_Global_UseMultiplePaths struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_Global_UseMultiplePaths_Config `protobuf:"bytes,71807801,opt,name=config,proto3" json:"config,omitempty"`
	Ebgp   *Bgp_Global_UseMultiplePaths_Ebgp   `protobuf:"bytes,303368031,opt,name=ebgp,proto3" json:"ebgp,omitempty"`
	Ibgp   *Bgp_Global_UseMultiplePaths_Ibgp   `protobuf:"bytes,379898595,opt,name=ibgp,proto3" json:"ibgp,omitempty"`
	State  *Bgp_Global_UseMultiplePaths_State  `protobuf:"bytes,495181966,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Global_UseMultiplePaths) Reset() {
	*x = Bgp_Global_UseMultiplePaths{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_UseMultiplePaths) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_UseMultiplePaths) ProtoMessage() {}

func (x *Bgp_Global_UseMultiplePaths) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_UseMultiplePaths.ProtoReflect.Descriptor instead.
func (*Bgp_Global_UseMultiplePaths) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 8}
}

func (x *Bgp_Global_UseMultiplePaths) GetConfig() *Bgp_Global_UseMultiplePaths_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_Global_UseMultiplePaths) GetEbgp() *Bgp_Global_UseMultiplePaths_Ebgp {
	if x != nil {
		return x.Ebgp
	}
	return nil
}

func (x *Bgp_Global_UseMultiplePaths) GetIbgp() *Bgp_Global_UseMultiplePaths_Ibgp {
	if x != nil {
		return x.Ibgp
	}
	return nil
}

func (x *Bgp_Global_UseMultiplePaths) GetState() *Bgp_Global_UseMultiplePaths_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Global_AfiSafis_AfiSafi struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddPaths              *Bgp_Global_AfiSafis_AfiSafi_AddPaths              `protobuf:"bytes,427815044,opt,name=add_paths,json=addPaths,proto3" json:"add_paths,omitempty"`
	Config                *Bgp_Global_AfiSafis_AfiSafi_Config                `protobuf:"bytes,426110168,opt,name=config,proto3" json:"config,omitempty"`
	GracefulRestart       *Bgp_Global_AfiSafis_AfiSafi_GracefulRestart       `protobuf:"bytes,368734813,opt,name=graceful_restart,json=gracefulRestart,proto3" json:"graceful_restart,omitempty"`
	Ipv4LabeledUnicast    *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast    `protobuf:"bytes,20431369,opt,name=ipv4_labeled_unicast,json=ipv4LabeledUnicast,proto3" json:"ipv4_labeled_unicast,omitempty"`
	Ipv4Unicast           *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast           `protobuf:"bytes,122337399,opt,name=ipv4_unicast,json=ipv4Unicast,proto3" json:"ipv4_unicast,omitempty"`
	Ipv6LabeledUnicast    *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast    `protobuf:"bytes,162576975,opt,name=ipv6_labeled_unicast,json=ipv6LabeledUnicast,proto3" json:"ipv6_labeled_unicast,omitempty"`
	Ipv6Unicast           *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast           `protobuf:"bytes,327904849,opt,name=ipv6_unicast,json=ipv6Unicast,proto3" json:"ipv6_unicast,omitempty"`
	L2VpnEvpn             *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn             `protobuf:"bytes,245764826,opt,name=l2vpn_evpn,json=l2vpnEvpn,proto3" json:"l2vpn_evpn,omitempty"`
	L2VpnVpls             *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls             `protobuf:"bytes,366330144,opt,name=l2vpn_vpls,json=l2vpnVpls,proto3" json:"l2vpn_vpls,omitempty"`
	L3VpnIpv4Multicast    *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast    `protobuf:"bytes,483739468,opt,name=l3vpn_ipv4_multicast,json=l3vpnIpv4Multicast,proto3" json:"l3vpn_ipv4_multicast,omitempty"`
	L3VpnIpv4Unicast      *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast      `protobuf:"bytes,202883941,opt,name=l3vpn_ipv4_unicast,json=l3vpnIpv4Unicast,proto3" json:"l3vpn_ipv4_unicast,omitempty"`
	L3VpnIpv6Multicast    *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast    `protobuf:"bytes,216083070,opt,name=l3vpn_ipv6_multicast,json=l3vpnIpv6Multicast,proto3" json:"l3vpn_ipv6_multicast,omitempty"`
	L3VpnIpv6Unicast      *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast      `protobuf:"bytes,281810619,opt,name=l3vpn_ipv6_unicast,json=l3vpnIpv6Unicast,proto3" json:"l3vpn_ipv6_unicast,omitempty"`
	RouteSelectionOptions *Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions `protobuf:"bytes,84990729,opt,name=route_selection_options,json=routeSelectionOptions,proto3" json:"route_selection_options,omitempty"`
	SrtePolicyIpv4        *Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv4        `protobuf:"bytes,529134169,opt,name=srte_policy_ipv4,json=srtePolicyIpv4,proto3" json:"srte_policy_ipv4,omitempty"`
	SrtePolicyIpv6        *Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv6        `protobuf:"bytes,529134171,opt,name=srte_policy_ipv6,json=srtePolicyIpv6,proto3" json:"srte_policy_ipv6,omitempty"`
	State                 *Bgp_Global_AfiSafis_AfiSafi_State                 `protobuf:"bytes,479459697,opt,name=state,proto3" json:"state,omitempty"`
	UseMultiplePaths      *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths      `protobuf:"bytes,300618499,opt,name=use_multiple_paths,json=useMultiplePaths,proto3" json:"use_multiple_paths,omitempty"`
}

func (x *Bgp_Global_AfiSafis_AfiSafi) Reset() {
	*x = Bgp_Global_AfiSafis_AfiSafi{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis_AfiSafi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis_AfiSafi) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis_AfiSafi) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis_AfiSafi.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis_AfiSafi) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (x *Bgp_Global_AfiSafis_AfiSafi) GetAddPaths() *Bgp_Global_AfiSafis_AfiSafi_AddPaths {
	if x != nil {
		return x.AddPaths
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi) GetConfig() *Bgp_Global_AfiSafis_AfiSafi_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi) GetGracefulRestart() *Bgp_Global_AfiSafis_AfiSafi_GracefulRestart {
	if x != nil {
		return x.GracefulRestart
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi) GetIpv4LabeledUnicast() *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast {
	if x != nil {
		return x.Ipv4LabeledUnicast
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi) GetIpv4Unicast() *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast {
	if x != nil {
		return x.Ipv4Unicast
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi) GetIpv6LabeledUnicast() *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast {
	if x != nil {
		return x.Ipv6LabeledUnicast
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi) GetIpv6Unicast() *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast {
	if x != nil {
		return x.Ipv6Unicast
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi) GetL2VpnEvpn() *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn {
	if x != nil {
		return x.L2VpnEvpn
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi) GetL2VpnVpls() *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls {
	if x != nil {
		return x.L2VpnVpls
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi) GetL3VpnIpv4Multicast() *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast {
	if x != nil {
		return x.L3VpnIpv4Multicast
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi) GetL3VpnIpv4Unicast() *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast {
	if x != nil {
		return x.L3VpnIpv4Unicast
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi) GetL3VpnIpv6Multicast() *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast {
	if x != nil {
		return x.L3VpnIpv6Multicast
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi) GetL3VpnIpv6Unicast() *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast {
	if x != nil {
		return x.L3VpnIpv6Unicast
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi) GetRouteSelectionOptions() *Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions {
	if x != nil {
		return x.RouteSelectionOptions
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi) GetSrtePolicyIpv4() *Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv4 {
	if x != nil {
		return x.SrtePolicyIpv4
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi) GetSrtePolicyIpv6() *Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv6 {
	if x != nil {
		return x.SrtePolicyIpv6
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi) GetState() *Bgp_Global_AfiSafis_AfiSafi_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi) GetUseMultiplePaths() *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths {
	if x != nil {
		return x.UseMultiplePaths
	}
	return nil
}

type Bgp_Global_AfiSafis_AfiSafiKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AfiSafiName OpenconfigBgpTypesAFISAFITYPE `protobuf:"varint,1,opt,name=afi_safi_name,json=afiSafiName,proto3,enum=openconfig.OpenconfigBgpTypesAFISAFITYPE" json:"afi_safi_name,omitempty"`
	AfiSafi     *Bgp_Global_AfiSafis_AfiSafi  `protobuf:"bytes,2,opt,name=afi_safi,json=afiSafi,proto3" json:"afi_safi,omitempty"`
}

func (x *Bgp_Global_AfiSafis_AfiSafiKey) Reset() {
	*x = Bgp_Global_AfiSafis_AfiSafiKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis_AfiSafiKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis_AfiSafiKey) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis_AfiSafiKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis_AfiSafiKey.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis_AfiSafiKey) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 1}
}

func (x *Bgp_Global_AfiSafis_AfiSafiKey) GetAfiSafiName() OpenconfigBgpTypesAFISAFITYPE {
	if x != nil {
		return x.AfiSafiName
	}
	return OpenconfigBgpTypesAFISAFITYPE_OPENCONFIGBGPTYPESAFISAFITYPE_UNSET
}

func (x *Bgp_Global_AfiSafis_AfiSafiKey) GetAfiSafi() *Bgp_Global_AfiSafis_AfiSafi {
	if x != nil {
		return x.AfiSafi
	}
	return nil
}

type Bgp_Global_AfiSafis_AfiSafi_AddPaths struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_Global_AfiSafis_AfiSafi_AddPaths_Config `protobuf:"bytes,237293097,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_Global_AfiSafis_AfiSafi_AddPaths_State  `protobuf:"bytes,158128126,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Global_AfiSafis_AfiSafi_AddPaths) Reset() {
	*x = Bgp_Global_AfiSafis_AfiSafi_AddPaths{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_AddPaths) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis_AfiSafi_AddPaths) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis_AfiSafi_AddPaths) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis_AfiSafi_AddPaths.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis_AfiSafi_AddPaths) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_AddPaths) GetConfig() *Bgp_Global_AfiSafis_AfiSafi_AddPaths_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_AddPaths) GetState() *Bgp_Global_AfiSafis_AfiSafi_AddPaths_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Global_AfiSafis_AfiSafi_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AfiSafiName OpenconfigBgpTypesAFISAFITYPE `protobuf:"varint,467533861,opt,name=afi_safi_name,json=afiSafiName,proto3,enum=openconfig.OpenconfigBgpTypesAFISAFITYPE" json:"afi_safi_name,omitempty"`
	Enabled     *ywrapper.BoolValue           `protobuf:"bytes,18093322,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Config) Reset() {
	*x = Bgp_Global_AfiSafis_AfiSafi_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis_AfiSafi_Config) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis_AfiSafi_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis_AfiSafi_Config.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis_AfiSafi_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Config) GetAfiSafiName() OpenconfigBgpTypesAFISAFITYPE {
	if x != nil {
		return x.AfiSafiName
	}
	return OpenconfigBgpTypesAFISAFITYPE_OPENCONFIGBGPTYPESAFISAFITYPE_UNSET
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Config) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

type Bgp_Global_AfiSafis_AfiSafi_GracefulRestart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_Config `protobuf:"bytes,100418962,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_State  `protobuf:"bytes,481974799,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Global_AfiSafis_AfiSafi_GracefulRestart) Reset() {
	*x = Bgp_Global_AfiSafis_AfiSafi_GracefulRestart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_GracefulRestart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis_AfiSafi_GracefulRestart) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis_AfiSafi_GracefulRestart) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis_AfiSafi_GracefulRestart.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis_AfiSafi_GracefulRestart) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 2}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_GracefulRestart) GetConfig() *Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_GracefulRestart) GetState() *Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrefixLimit *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit `protobuf:"bytes,47745998,opt,name=prefix_limit,json=prefixLimit,proto3" json:"prefix_limit,omitempty"`
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast) Reset() {
	*x = Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 3}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast) GetPrefixLimit() *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit {
	if x != nil {
		return x.PrefixLimit
	}
	return nil
}

type Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config      *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_Config      `protobuf:"bytes,219858792,opt,name=config,proto3" json:"config,omitempty"`
	PrefixLimit *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit `protobuf:"bytes,260135764,opt,name=prefix_limit,json=prefixLimit,proto3" json:"prefix_limit,omitempty"`
	State       *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_State       `protobuf:"bytes,271548545,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast) Reset() {
	*x = Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 4}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast) GetConfig() *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast) GetPrefixLimit() *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit {
	if x != nil {
		return x.PrefixLimit
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast) GetState() *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrefixLimit *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit `protobuf:"bytes,276097180,opt,name=prefix_limit,json=prefixLimit,proto3" json:"prefix_limit,omitempty"`
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast) Reset() {
	*x = Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 5}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast) GetPrefixLimit() *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit {
	if x != nil {
		return x.PrefixLimit
	}
	return nil
}

type Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config      *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_Config      `protobuf:"bytes,464536438,opt,name=config,proto3" json:"config,omitempty"`
	PrefixLimit *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit `protobuf:"bytes,75489638,opt,name=prefix_limit,json=prefixLimit,proto3" json:"prefix_limit,omitempty"`
	State       *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_State       `protobuf:"bytes,407454371,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast) Reset() {
	*x = Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 6}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast) GetConfig() *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast) GetPrefixLimit() *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit {
	if x != nil {
		return x.PrefixLimit
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast) GetState() *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrefixLimit *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit `protobuf:"bytes,303183711,opt,name=prefix_limit,json=prefixLimit,proto3" json:"prefix_limit,omitempty"`
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn) Reset() {
	*x = Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 7}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn) GetPrefixLimit() *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit {
	if x != nil {
		return x.PrefixLimit
	}
	return nil
}

type Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrefixLimit *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit `protobuf:"bytes,443918349,opt,name=prefix_limit,json=prefixLimit,proto3" json:"prefix_limit,omitempty"`
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls) Reset() {
	*x = Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 8}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls) GetPrefixLimit() *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit {
	if x != nil {
		return x.PrefixLimit
	}
	return nil
}

type Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrefixLimit *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit `protobuf:"bytes,403633001,opt,name=prefix_limit,json=prefixLimit,proto3" json:"prefix_limit,omitempty"`
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast) Reset() {
	*x = Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 9}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast) GetPrefixLimit() *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit {
	if x != nil {
		return x.PrefixLimit
	}
	return nil
}

type Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrefixLimit *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit `protobuf:"bytes,302675930,opt,name=prefix_limit,json=prefixLimit,proto3" json:"prefix_limit,omitempty"`
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast) Reset() {
	*x = Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 10}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast) GetPrefixLimit() *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit {
	if x != nil {
		return x.PrefixLimit
	}
	return nil
}

type Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrefixLimit *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit `protobuf:"bytes,157258307,opt,name=prefix_limit,json=prefixLimit,proto3" json:"prefix_limit,omitempty"`
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast) Reset() {
	*x = Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 11}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast) GetPrefixLimit() *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit {
	if x != nil {
		return x.PrefixLimit
	}
	return nil
}

type Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrefixLimit *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit `protobuf:"bytes,326207160,opt,name=prefix_limit,json=prefixLimit,proto3" json:"prefix_limit,omitempty"`
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast) Reset() {
	*x = Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 12}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast) GetPrefixLimit() *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit {
	if x != nil {
		return x.PrefixLimit
	}
	return nil
}

type Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_Config `protobuf:"bytes,503686526,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_State  `protobuf:"bytes,126845035,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions) Reset() {
	*x = Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 13}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions) GetConfig() *Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions) GetState() *Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv4 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrefixLimit *Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit `protobuf:"bytes,418303998,opt,name=prefix_limit,json=prefixLimit,proto3" json:"prefix_limit,omitempty"`
}

func (x *Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv4) Reset() {
	*x = Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv4{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv4) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv4) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv4.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv4) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 14}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv4) GetPrefixLimit() *Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit {
	if x != nil {
		return x.PrefixLimit
	}
	return nil
}

type Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv6 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrefixLimit *Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit `protobuf:"bytes,473750488,opt,name=prefix_limit,json=prefixLimit,proto3" json:"prefix_limit,omitempty"`
}

func (x *Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv6) Reset() {
	*x = Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv6{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv6) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv6) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv6) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv6.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv6) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 15}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv6) GetPrefixLimit() *Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit {
	if x != nil {
		return x.PrefixLimit
	}
	return nil
}

type Bgp_Global_AfiSafis_AfiSafi_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AfiSafiName   OpenconfigBgpTypesAFISAFITYPE `protobuf:"varint,153550012,opt,name=afi_safi_name,json=afiSafiName,proto3,enum=openconfig.OpenconfigBgpTypesAFISAFITYPE" json:"afi_safi_name,omitempty"`
	Enabled       *ywrapper.BoolValue           `protobuf:"bytes,387299623,opt,name=enabled,proto3" json:"enabled,omitempty"`
	TotalPaths    *ywrapper.UintValue           `protobuf:"bytes,32991513,opt,name=total_paths,json=totalPaths,proto3" json:"total_paths,omitempty"`
	TotalPrefixes *ywrapper.UintValue           `protobuf:"bytes,131309299,opt,name=total_prefixes,json=totalPrefixes,proto3" json:"total_prefixes,omitempty"`
}

func (x *Bgp_Global_AfiSafis_AfiSafi_State) Reset() {
	*x = Bgp_Global_AfiSafis_AfiSafi_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis_AfiSafi_State) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis_AfiSafi_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis_AfiSafi_State.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis_AfiSafi_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 16}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_State) GetAfiSafiName() OpenconfigBgpTypesAFISAFITYPE {
	if x != nil {
		return x.AfiSafiName
	}
	return OpenconfigBgpTypesAFISAFITYPE_OPENCONFIGBGPTYPESAFISAFITYPE_UNSET
}

func (x *Bgp_Global_AfiSafis_AfiSafi_State) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_State) GetTotalPaths() *ywrapper.UintValue {
	if x != nil {
		return x.TotalPaths
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_State) GetTotalPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.TotalPrefixes
	}
	return nil
}

type Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Config `protobuf:"bytes,163550340,opt,name=config,proto3" json:"config,omitempty"`
	Ebgp   *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp   `protobuf:"bytes,457877206,opt,name=ebgp,proto3" json:"ebgp,omitempty"`
	Ibgp   *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp   `protobuf:"bytes,2351962,opt,name=ibgp,proto3" json:"ibgp,omitempty"`
	State  *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_State  `protobuf:"bytes,376720285,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths) Reset() {
	*x = Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 17}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths) GetConfig() *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths) GetEbgp() *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp {
	if x != nil {
		return x.Ebgp
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths) GetIbgp() *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp {
	if x != nil {
		return x.Ibgp
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths) GetState() *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Global_AfiSafis_AfiSafi_AddPaths_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EligiblePrefixPolicy *ywrapper.StringValue `protobuf:"bytes,6858467,opt,name=eligible_prefix_policy,json=eligiblePrefixPolicy,proto3" json:"eligible_prefix_policy,omitempty"`
	Receive              *ywrapper.BoolValue   `protobuf:"bytes,216891579,opt,name=receive,proto3" json:"receive,omitempty"`
	Send                 *ywrapper.BoolValue   `protobuf:"bytes,186579718,opt,name=send,proto3" json:"send,omitempty"`
	SendMax              *ywrapper.UintValue   `protobuf:"bytes,176929451,opt,name=send_max,json=sendMax,proto3" json:"send_max,omitempty"`
}

func (x *Bgp_Global_AfiSafis_AfiSafi_AddPaths_Config) Reset() {
	*x = Bgp_Global_AfiSafis_AfiSafi_AddPaths_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_AddPaths_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis_AfiSafi_AddPaths_Config) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis_AfiSafi_AddPaths_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis_AfiSafi_AddPaths_Config.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis_AfiSafi_AddPaths_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_AddPaths_Config) GetEligiblePrefixPolicy() *ywrapper.StringValue {
	if x != nil {
		return x.EligiblePrefixPolicy
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_AddPaths_Config) GetReceive() *ywrapper.BoolValue {
	if x != nil {
		return x.Receive
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_AddPaths_Config) GetSend() *ywrapper.BoolValue {
	if x != nil {
		return x.Send
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_AddPaths_Config) GetSendMax() *ywrapper.UintValue {
	if x != nil {
		return x.SendMax
	}
	return nil
}

type Bgp_Global_AfiSafis_AfiSafi_AddPaths_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EligiblePrefixPolicy *ywrapper.StringValue `protobuf:"bytes,184085650,opt,name=eligible_prefix_policy,json=eligiblePrefixPolicy,proto3" json:"eligible_prefix_policy,omitempty"`
	Receive              *ywrapper.BoolValue   `protobuf:"bytes,186342604,opt,name=receive,proto3" json:"receive,omitempty"`
	Send                 *ywrapper.BoolValue   `protobuf:"bytes,325298515,opt,name=send,proto3" json:"send,omitempty"`
	SendMax              *ywrapper.UintValue   `protobuf:"bytes,533371182,opt,name=send_max,json=sendMax,proto3" json:"send_max,omitempty"`
}

func (x *Bgp_Global_AfiSafis_AfiSafi_AddPaths_State) Reset() {
	*x = Bgp_Global_AfiSafis_AfiSafi_AddPaths_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_AddPaths_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis_AfiSafi_AddPaths_State) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis_AfiSafi_AddPaths_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis_AfiSafi_AddPaths_State.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis_AfiSafi_AddPaths_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_AddPaths_State) GetEligiblePrefixPolicy() *ywrapper.StringValue {
	if x != nil {
		return x.EligiblePrefixPolicy
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_AddPaths_State) GetReceive() *ywrapper.BoolValue {
	if x != nil {
		return x.Receive
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_AddPaths_State) GetSend() *ywrapper.BoolValue {
	if x != nil {
		return x.Send
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_AddPaths_State) GetSendMax() *ywrapper.UintValue {
	if x != nil {
		return x.SendMax
	}
	return nil
}

type Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled *ywrapper.BoolValue `protobuf:"bytes,252466976,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_Config) Reset() {
	*x = Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_Config) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_Config.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 2, 0}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_Config) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

type Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled *ywrapper.BoolValue `protobuf:"bytes,135175025,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_State) Reset() {
	*x = Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_State) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_State.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 2, 1}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_State) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

type Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config `protobuf:"bytes,339889023,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State  `protobuf:"bytes,223191984,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) Reset() {
	*x = Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 3, 0}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) GetConfig() *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) GetState() *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPrefixes         *ywrapper.UintValue      `protobuf:"bytes,190188385,opt,name=max_prefixes,json=maxPrefixes,proto3" json:"max_prefixes,omitempty"`
	PreventTeardown     *ywrapper.BoolValue      `protobuf:"bytes,54753641,opt,name=prevent_teardown,json=preventTeardown,proto3" json:"prevent_teardown,omitempty"`
	RestartTimer        *ywrapper.Decimal64Value `protobuf:"bytes,503254127,opt,name=restart_timer,json=restartTimer,proto3" json:"restart_timer,omitempty"`
	WarningThresholdPct *ywrapper.UintValue      `protobuf:"bytes,383741678,opt,name=warning_threshold_pct,json=warningThresholdPct,proto3" json:"warning_threshold_pct,omitempty"`
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) Reset() {
	*x = Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 3, 0, 0}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) GetMaxPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.MaxPrefixes
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) GetPreventTeardown() *ywrapper.BoolValue {
	if x != nil {
		return x.PreventTeardown
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) GetRestartTimer() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RestartTimer
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) GetWarningThresholdPct() *ywrapper.UintValue {
	if x != nil {
		return x.WarningThresholdPct
	}
	return nil
}

type Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPrefixes         *ywrapper.UintValue      `protobuf:"bytes,136886076,opt,name=max_prefixes,json=maxPrefixes,proto3" json:"max_prefixes,omitempty"`
	PreventTeardown     *ywrapper.BoolValue      `protobuf:"bytes,148582304,opt,name=prevent_teardown,json=preventTeardown,proto3" json:"prevent_teardown,omitempty"`
	RestartTimer        *ywrapper.Decimal64Value `protobuf:"bytes,477464592,opt,name=restart_timer,json=restartTimer,proto3" json:"restart_timer,omitempty"`
	WarningThresholdPct *ywrapper.UintValue      `protobuf:"bytes,525351761,opt,name=warning_threshold_pct,json=warningThresholdPct,proto3" json:"warning_threshold_pct,omitempty"`
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) Reset() {
	*x = Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 3, 0, 1}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) GetMaxPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.MaxPrefixes
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) GetPreventTeardown() *ywrapper.BoolValue {
	if x != nil {
		return x.PreventTeardown
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) GetRestartTimer() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RestartTimer
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) GetWarningThresholdPct() *ywrapper.UintValue {
	if x != nil {
		return x.WarningThresholdPct
	}
	return nil
}

type Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SendDefaultRoute *ywrapper.BoolValue `protobuf:"bytes,94074577,opt,name=send_default_route,json=sendDefaultRoute,proto3" json:"send_default_route,omitempty"`
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_Config) Reset() {
	*x = Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_Config) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_Config.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 4, 0}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_Config) GetSendDefaultRoute() *ywrapper.BoolValue {
	if x != nil {
		return x.SendDefaultRoute
	}
	return nil
}

type Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config `protobuf:"bytes,341822297,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State  `protobuf:"bytes,96739886,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit) Reset() {
	*x = Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 4, 1}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit) GetConfig() *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit) GetState() *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SendDefaultRoute *ywrapper.BoolValue `protobuf:"bytes,30769534,opt,name=send_default_route,json=sendDefaultRoute,proto3" json:"send_default_route,omitempty"`
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_State) Reset() {
	*x = Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_State) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_State.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 4, 2}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_State) GetSendDefaultRoute() *ywrapper.BoolValue {
	if x != nil {
		return x.SendDefaultRoute
	}
	return nil
}

type Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPrefixes         *ywrapper.UintValue      `protobuf:"bytes,90980743,opt,name=max_prefixes,json=maxPrefixes,proto3" json:"max_prefixes,omitempty"`
	PreventTeardown     *ywrapper.BoolValue      `protobuf:"bytes,173092039,opt,name=prevent_teardown,json=preventTeardown,proto3" json:"prevent_teardown,omitempty"`
	RestartTimer        *ywrapper.Decimal64Value `protobuf:"bytes,272659781,opt,name=restart_timer,json=restartTimer,proto3" json:"restart_timer,omitempty"`
	WarningThresholdPct *ywrapper.UintValue      `protobuf:"bytes,419439384,opt,name=warning_threshold_pct,json=warningThresholdPct,proto3" json:"warning_threshold_pct,omitempty"`
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) Reset() {
	*x = Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 4, 1, 0}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) GetMaxPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.MaxPrefixes
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) GetPreventTeardown() *ywrapper.BoolValue {
	if x != nil {
		return x.PreventTeardown
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) GetRestartTimer() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RestartTimer
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) GetWarningThresholdPct() *ywrapper.UintValue {
	if x != nil {
		return x.WarningThresholdPct
	}
	return nil
}

type Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPrefixes         *ywrapper.UintValue      `protobuf:"bytes,22257270,opt,name=max_prefixes,json=maxPrefixes,proto3" json:"max_prefixes,omitempty"`
	PreventTeardown     *ywrapper.BoolValue      `protobuf:"bytes,394489018,opt,name=prevent_teardown,json=preventTeardown,proto3" json:"prevent_teardown,omitempty"`
	RestartTimer        *ywrapper.Decimal64Value `protobuf:"bytes,214143978,opt,name=restart_timer,json=restartTimer,proto3" json:"restart_timer,omitempty"`
	WarningThresholdPct *ywrapper.UintValue      `protobuf:"bytes,480312887,opt,name=warning_threshold_pct,json=warningThresholdPct,proto3" json:"warning_threshold_pct,omitempty"`
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) Reset() {
	*x = Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 4, 1, 1}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) GetMaxPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.MaxPrefixes
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) GetPreventTeardown() *ywrapper.BoolValue {
	if x != nil {
		return x.PreventTeardown
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) GetRestartTimer() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RestartTimer
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) GetWarningThresholdPct() *ywrapper.UintValue {
	if x != nil {
		return x.WarningThresholdPct
	}
	return nil
}

type Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config `protobuf:"bytes,63729393,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State  `protobuf:"bytes,198801510,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) Reset() {
	*x = Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 5, 0}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) GetConfig() *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) GetState() *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPrefixes         *ywrapper.UintValue      `protobuf:"bytes,64588975,opt,name=max_prefixes,json=maxPrefixes,proto3" json:"max_prefixes,omitempty"`
	PreventTeardown     *ywrapper.BoolValue      `protobuf:"bytes,90778783,opt,name=prevent_teardown,json=preventTeardown,proto3" json:"prevent_teardown,omitempty"`
	RestartTimer        *ywrapper.Decimal64Value `protobuf:"bytes,156228381,opt,name=restart_timer,json=restartTimer,proto3" json:"restart_timer,omitempty"`
	WarningThresholdPct *ywrapper.UintValue      `protobuf:"bytes,117811632,opt,name=warning_threshold_pct,json=warningThresholdPct,proto3" json:"warning_threshold_pct,omitempty"`
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) Reset() {
	*x = Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 5, 0, 0}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) GetMaxPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.MaxPrefixes
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) GetPreventTeardown() *ywrapper.BoolValue {
	if x != nil {
		return x.PreventTeardown
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) GetRestartTimer() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RestartTimer
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) GetWarningThresholdPct() *ywrapper.UintValue {
	if x != nil {
		return x.WarningThresholdPct
	}
	return nil
}

type Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPrefixes         *ywrapper.UintValue      `protobuf:"bytes,353593342,opt,name=max_prefixes,json=maxPrefixes,proto3" json:"max_prefixes,omitempty"`
	PreventTeardown     *ywrapper.BoolValue      `protobuf:"bytes,47933106,opt,name=prevent_teardown,json=preventTeardown,proto3" json:"prevent_teardown,omitempty"`
	RestartTimer        *ywrapper.Decimal64Value `protobuf:"bytes,497408162,opt,name=restart_timer,json=restartTimer,proto3" json:"restart_timer,omitempty"`
	WarningThresholdPct *ywrapper.UintValue      `protobuf:"bytes,25929775,opt,name=warning_threshold_pct,json=warningThresholdPct,proto3" json:"warning_threshold_pct,omitempty"`
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) Reset() {
	*x = Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 5, 0, 1}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) GetMaxPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.MaxPrefixes
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) GetPreventTeardown() *ywrapper.BoolValue {
	if x != nil {
		return x.PreventTeardown
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) GetRestartTimer() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RestartTimer
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) GetWarningThresholdPct() *ywrapper.UintValue {
	if x != nil {
		return x.WarningThresholdPct
	}
	return nil
}

type Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SendDefaultRoute *ywrapper.BoolValue `protobuf:"bytes,257614619,opt,name=send_default_route,json=sendDefaultRoute,proto3" json:"send_default_route,omitempty"`
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_Config) Reset() {
	*x = Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_Config) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_Config.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 6, 0}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_Config) GetSendDefaultRoute() *ywrapper.BoolValue {
	if x != nil {
		return x.SendDefaultRoute
	}
	return nil
}

type Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config `protobuf:"bytes,23462759,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State  `protobuf:"bytes,158930008,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit) Reset() {
	*x = Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 6, 1}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit) GetConfig() *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit) GetState() *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SendDefaultRoute *ywrapper.BoolValue `protobuf:"bytes,89031876,opt,name=send_default_route,json=sendDefaultRoute,proto3" json:"send_default_route,omitempty"`
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_State) Reset() {
	*x = Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_State) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_State.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 6, 2}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_State) GetSendDefaultRoute() *ywrapper.BoolValue {
	if x != nil {
		return x.SendDefaultRoute
	}
	return nil
}

type Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPrefixes         *ywrapper.UintValue      `protobuf:"bytes,357355193,opt,name=max_prefixes,json=maxPrefixes,proto3" json:"max_prefixes,omitempty"`
	PreventTeardown     *ywrapper.BoolValue      `protobuf:"bytes,295789809,opt,name=prevent_teardown,json=preventTeardown,proto3" json:"prevent_teardown,omitempty"`
	RestartTimer        *ywrapper.Decimal64Value `protobuf:"bytes,318821847,opt,name=restart_timer,json=restartTimer,proto3" json:"restart_timer,omitempty"`
	WarningThresholdPct *ywrapper.UintValue      `protobuf:"bytes,317898710,opt,name=warning_threshold_pct,json=warningThresholdPct,proto3" json:"warning_threshold_pct,omitempty"`
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) Reset() {
	*x = Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 6, 1, 0}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) GetMaxPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.MaxPrefixes
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) GetPreventTeardown() *ywrapper.BoolValue {
	if x != nil {
		return x.PreventTeardown
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) GetRestartTimer() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RestartTimer
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) GetWarningThresholdPct() *ywrapper.UintValue {
	if x != nil {
		return x.WarningThresholdPct
	}
	return nil
}

type Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPrefixes         *ywrapper.UintValue      `protobuf:"bytes,195661140,opt,name=max_prefixes,json=maxPrefixes,proto3" json:"max_prefixes,omitempty"`
	PreventTeardown     *ywrapper.BoolValue      `protobuf:"bytes,526385000,opt,name=prevent_teardown,json=preventTeardown,proto3" json:"prevent_teardown,omitempty"`
	RestartTimer        *ywrapper.Decimal64Value `protobuf:"bytes,85539096,opt,name=restart_timer,json=restartTimer,proto3" json:"restart_timer,omitempty"`
	WarningThresholdPct *ywrapper.UintValue      `protobuf:"bytes,299806937,opt,name=warning_threshold_pct,json=warningThresholdPct,proto3" json:"warning_threshold_pct,omitempty"`
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) Reset() {
	*x = Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 6, 1, 1}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) GetMaxPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.MaxPrefixes
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) GetPreventTeardown() *ywrapper.BoolValue {
	if x != nil {
		return x.PreventTeardown
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) GetRestartTimer() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RestartTimer
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) GetWarningThresholdPct() *ywrapper.UintValue {
	if x != nil {
		return x.WarningThresholdPct
	}
	return nil
}

type Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config `protobuf:"bytes,466286752,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State  `protobuf:"bytes,434917657,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit) Reset() {
	*x = Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 7, 0}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit) GetConfig() *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit) GetState() *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPrefixes         *ywrapper.UintValue      `protobuf:"bytes,406477100,opt,name=max_prefixes,json=maxPrefixes,proto3" json:"max_prefixes,omitempty"`
	PreventTeardown     *ywrapper.BoolValue      `protobuf:"bytes,401610384,opt,name=prevent_teardown,json=preventTeardown,proto3" json:"prevent_teardown,omitempty"`
	RestartTimer        *ywrapper.Decimal64Value `protobuf:"bytes,463091488,opt,name=restart_timer,json=restartTimer,proto3" json:"restart_timer,omitempty"`
	WarningThresholdPct *ywrapper.UintValue      `protobuf:"bytes,458904161,opt,name=warning_threshold_pct,json=warningThresholdPct,proto3" json:"warning_threshold_pct,omitempty"`
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config) Reset() {
	*x = Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 7, 0, 0}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config) GetMaxPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.MaxPrefixes
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config) GetPreventTeardown() *ywrapper.BoolValue {
	if x != nil {
		return x.PreventTeardown
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config) GetRestartTimer() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RestartTimer
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config) GetWarningThresholdPct() *ywrapper.UintValue {
	if x != nil {
		return x.WarningThresholdPct
	}
	return nil
}

type Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPrefixes         *ywrapper.UintValue      `protobuf:"bytes,434008647,opt,name=max_prefixes,json=maxPrefixes,proto3" json:"max_prefixes,omitempty"`
	PreventTeardown     *ywrapper.BoolValue      `protobuf:"bytes,213482119,opt,name=prevent_teardown,json=preventTeardown,proto3" json:"prevent_teardown,omitempty"`
	RestartTimer        *ywrapper.Decimal64Value `protobuf:"bytes,516856069,opt,name=restart_timer,json=restartTimer,proto3" json:"restart_timer,omitempty"`
	WarningThresholdPct *ywrapper.UintValue      `protobuf:"bytes,36119896,opt,name=warning_threshold_pct,json=warningThresholdPct,proto3" json:"warning_threshold_pct,omitempty"`
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State) Reset() {
	*x = Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 7, 0, 1}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State) GetMaxPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.MaxPrefixes
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State) GetPreventTeardown() *ywrapper.BoolValue {
	if x != nil {
		return x.PreventTeardown
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State) GetRestartTimer() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RestartTimer
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State) GetWarningThresholdPct() *ywrapper.UintValue {
	if x != nil {
		return x.WarningThresholdPct
	}
	return nil
}

type Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config `protobuf:"bytes,12151970,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State  `protobuf:"bytes,68079583,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit) Reset() {
	*x = Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 8, 0}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit) GetConfig() *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit) GetState() *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPrefixes         *ywrapper.UintValue      `protobuf:"bytes,142665762,opt,name=max_prefixes,json=maxPrefixes,proto3" json:"max_prefixes,omitempty"`
	PreventTeardown     *ywrapper.BoolValue      `protobuf:"bytes,324211774,opt,name=prevent_teardown,json=preventTeardown,proto3" json:"prevent_teardown,omitempty"`
	RestartTimer        *ywrapper.Decimal64Value `protobuf:"bytes,99956974,opt,name=restart_timer,json=restartTimer,proto3" json:"restart_timer,omitempty"`
	WarningThresholdPct *ywrapper.UintValue      `protobuf:"bytes,22671091,opt,name=warning_threshold_pct,json=warningThresholdPct,proto3" json:"warning_threshold_pct,omitempty"`
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config) Reset() {
	*x = Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 8, 0, 0}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config) GetMaxPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.MaxPrefixes
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config) GetPreventTeardown() *ywrapper.BoolValue {
	if x != nil {
		return x.PreventTeardown
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config) GetRestartTimer() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RestartTimer
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config) GetWarningThresholdPct() *ywrapper.UintValue {
	if x != nil {
		return x.WarningThresholdPct
	}
	return nil
}

type Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPrefixes         *ywrapper.UintValue      `protobuf:"bytes,221806657,opt,name=max_prefixes,json=maxPrefixes,proto3" json:"max_prefixes,omitempty"`
	PreventTeardown     *ywrapper.BoolValue      `protobuf:"bytes,276665801,opt,name=prevent_teardown,json=preventTeardown,proto3" json:"prevent_teardown,omitempty"`
	RestartTimer        *ywrapper.Decimal64Value `protobuf:"bytes,373190223,opt,name=restart_timer,json=restartTimer,proto3" json:"restart_timer,omitempty"`
	WarningThresholdPct *ywrapper.UintValue      `protobuf:"bytes,416356302,opt,name=warning_threshold_pct,json=warningThresholdPct,proto3" json:"warning_threshold_pct,omitempty"`
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State) Reset() {
	*x = Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 8, 0, 1}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State) GetMaxPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.MaxPrefixes
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State) GetPreventTeardown() *ywrapper.BoolValue {
	if x != nil {
		return x.PreventTeardown
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State) GetRestartTimer() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RestartTimer
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State) GetWarningThresholdPct() *ywrapper.UintValue {
	if x != nil {
		return x.WarningThresholdPct
	}
	return nil
}

type Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config `protobuf:"bytes,408523742,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State  `protobuf:"bytes,110112843,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) Reset() {
	*x = Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 9, 0}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) GetConfig() *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) GetState() *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPrefixes         *ywrapper.UintValue      `protobuf:"bytes,199037350,opt,name=max_prefixes,json=maxPrefixes,proto3" json:"max_prefixes,omitempty"`
	PreventTeardown     *ywrapper.BoolValue      `protobuf:"bytes,200996266,opt,name=prevent_teardown,json=preventTeardown,proto3" json:"prevent_teardown,omitempty"`
	RestartTimer        *ywrapper.Decimal64Value `protobuf:"bytes,64993018,opt,name=restart_timer,json=restartTimer,proto3" json:"restart_timer,omitempty"`
	WarningThresholdPct *ywrapper.UintValue      `protobuf:"bytes,254345927,opt,name=warning_threshold_pct,json=warningThresholdPct,proto3" json:"warning_threshold_pct,omitempty"`
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config) Reset() {
	*x = Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 9, 0, 0}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config) GetMaxPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.MaxPrefixes
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config) GetPreventTeardown() *ywrapper.BoolValue {
	if x != nil {
		return x.PreventTeardown
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config) GetRestartTimer() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RestartTimer
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config) GetWarningThresholdPct() *ywrapper.UintValue {
	if x != nil {
		return x.WarningThresholdPct
	}
	return nil
}

type Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPrefixes         *ywrapper.UintValue      `protobuf:"bytes,337661749,opt,name=max_prefixes,json=maxPrefixes,proto3" json:"max_prefixes,omitempty"`
	PreventTeardown     *ywrapper.BoolValue      `protobuf:"bytes,302659845,opt,name=prevent_teardown,json=preventTeardown,proto3" json:"prevent_teardown,omitempty"`
	RestartTimer        *ywrapper.Decimal64Value `protobuf:"bytes,153009003,opt,name=restart_timer,json=restartTimer,proto3" json:"restart_timer,omitempty"`
	WarningThresholdPct *ywrapper.UintValue      `protobuf:"bytes,421922642,opt,name=warning_threshold_pct,json=warningThresholdPct,proto3" json:"warning_threshold_pct,omitempty"`
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State) Reset() {
	*x = Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 9, 0, 1}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State) GetMaxPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.MaxPrefixes
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State) GetPreventTeardown() *ywrapper.BoolValue {
	if x != nil {
		return x.PreventTeardown
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State) GetRestartTimer() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RestartTimer
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State) GetWarningThresholdPct() *ywrapper.UintValue {
	if x != nil {
		return x.WarningThresholdPct
	}
	return nil
}

type Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config `protobuf:"bytes,90457291,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State  `protobuf:"bytes,340324876,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) Reset() {
	*x = Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 10, 0}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) GetConfig() *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) GetState() *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPrefixes         *ywrapper.UintValue      `protobuf:"bytes,363961525,opt,name=max_prefixes,json=maxPrefixes,proto3" json:"max_prefixes,omitempty"`
	PreventTeardown     *ywrapper.BoolValue      `protobuf:"bytes,12770949,opt,name=prevent_teardown,json=preventTeardown,proto3" json:"prevent_teardown,omitempty"`
	RestartTimer        *ywrapper.Decimal64Value `protobuf:"bytes,14400491,opt,name=restart_timer,json=restartTimer,proto3" json:"restart_timer,omitempty"`
	WarningThresholdPct *ywrapper.UintValue      `protobuf:"bytes,473077714,opt,name=warning_threshold_pct,json=warningThresholdPct,proto3" json:"warning_threshold_pct,omitempty"`
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config) Reset() {
	*x = Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 10, 0, 0}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config) GetMaxPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.MaxPrefixes
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config) GetPreventTeardown() *ywrapper.BoolValue {
	if x != nil {
		return x.PreventTeardown
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config) GetRestartTimer() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RestartTimer
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config) GetWarningThresholdPct() *ywrapper.UintValue {
	if x != nil {
		return x.WarningThresholdPct
	}
	return nil
}

type Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPrefixes         *ywrapper.UintValue      `protobuf:"bytes,483964416,opt,name=max_prefixes,json=maxPrefixes,proto3" json:"max_prefixes,omitempty"`
	PreventTeardown     *ywrapper.BoolValue      `protobuf:"bytes,57669468,opt,name=prevent_teardown,json=preventTeardown,proto3" json:"prevent_teardown,omitempty"`
	RestartTimer        *ywrapper.Decimal64Value `protobuf:"bytes,499220396,opt,name=restart_timer,json=restartTimer,proto3" json:"restart_timer,omitempty"`
	WarningThresholdPct *ywrapper.UintValue      `protobuf:"bytes,328211477,opt,name=warning_threshold_pct,json=warningThresholdPct,proto3" json:"warning_threshold_pct,omitempty"`
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State) Reset() {
	*x = Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 10, 0, 1}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State) GetMaxPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.MaxPrefixes
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State) GetPreventTeardown() *ywrapper.BoolValue {
	if x != nil {
		return x.PreventTeardown
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State) GetRestartTimer() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RestartTimer
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State) GetWarningThresholdPct() *ywrapper.UintValue {
	if x != nil {
		return x.WarningThresholdPct
	}
	return nil
}

type Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config `protobuf:"bytes,503648324,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State  `protobuf:"bytes,93299037,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) Reset() {
	*x = Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 11, 0}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) GetConfig() *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) GetState() *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPrefixes         *ywrapper.UintValue      `protobuf:"bytes,427003016,opt,name=max_prefixes,json=maxPrefixes,proto3" json:"max_prefixes,omitempty"`
	PreventTeardown     *ywrapper.BoolValue      `protobuf:"bytes,468356084,opt,name=prevent_teardown,json=preventTeardown,proto3" json:"prevent_teardown,omitempty"`
	RestartTimer        *ywrapper.Decimal64Value `protobuf:"bytes,172642596,opt,name=restart_timer,json=restartTimer,proto3" json:"restart_timer,omitempty"`
	WarningThresholdPct *ywrapper.UintValue      `protobuf:"bytes,392477133,opt,name=warning_threshold_pct,json=warningThresholdPct,proto3" json:"warning_threshold_pct,omitempty"`
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config) Reset() {
	*x = Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 11, 0, 0}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config) GetMaxPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.MaxPrefixes
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config) GetPreventTeardown() *ywrapper.BoolValue {
	if x != nil {
		return x.PreventTeardown
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config) GetRestartTimer() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RestartTimer
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config) GetWarningThresholdPct() *ywrapper.UintValue {
	if x != nil {
		return x.WarningThresholdPct
	}
	return nil
}

type Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPrefixes         *ywrapper.UintValue      `protobuf:"bytes,114891587,opt,name=max_prefixes,json=maxPrefixes,proto3" json:"max_prefixes,omitempty"`
	PreventTeardown     *ywrapper.BoolValue      `protobuf:"bytes,421648555,opt,name=prevent_teardown,json=preventTeardown,proto3" json:"prevent_teardown,omitempty"`
	RestartTimer        *ywrapper.Decimal64Value `protobuf:"bytes,173618281,opt,name=restart_timer,json=restartTimer,proto3" json:"restart_timer,omitempty"`
	WarningThresholdPct *ywrapper.UintValue      `protobuf:"bytes,240916228,opt,name=warning_threshold_pct,json=warningThresholdPct,proto3" json:"warning_threshold_pct,omitempty"`
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State) Reset() {
	*x = Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 11, 0, 1}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State) GetMaxPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.MaxPrefixes
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State) GetPreventTeardown() *ywrapper.BoolValue {
	if x != nil {
		return x.PreventTeardown
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State) GetRestartTimer() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RestartTimer
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State) GetWarningThresholdPct() *ywrapper.UintValue {
	if x != nil {
		return x.WarningThresholdPct
	}
	return nil
}

type Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config `protobuf:"bytes,226969533,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State  `protobuf:"bytes,496426034,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) Reset() {
	*x = Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 12, 0}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) GetConfig() *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) GetState() *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPrefixes         *ywrapper.UintValue      `protobuf:"bytes,118660387,opt,name=max_prefixes,json=maxPrefixes,proto3" json:"max_prefixes,omitempty"`
	PreventTeardown     *ywrapper.BoolValue      `protobuf:"bytes,189182347,opt,name=prevent_teardown,json=preventTeardown,proto3" json:"prevent_teardown,omitempty"`
	RestartTimer        *ywrapper.Decimal64Value `protobuf:"bytes,153378889,opt,name=restart_timer,json=restartTimer,proto3" json:"restart_timer,omitempty"`
	WarningThresholdPct *ywrapper.UintValue      `protobuf:"bytes,348383972,opt,name=warning_threshold_pct,json=warningThresholdPct,proto3" json:"warning_threshold_pct,omitempty"`
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config) Reset() {
	*x = Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 12, 0, 0}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config) GetMaxPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.MaxPrefixes
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config) GetPreventTeardown() *ywrapper.BoolValue {
	if x != nil {
		return x.PreventTeardown
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config) GetRestartTimer() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RestartTimer
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config) GetWarningThresholdPct() *ywrapper.UintValue {
	if x != nil {
		return x.WarningThresholdPct
	}
	return nil
}

type Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPrefixes         *ywrapper.UintValue      `protobuf:"bytes,287103154,opt,name=max_prefixes,json=maxPrefixes,proto3" json:"max_prefixes,omitempty"`
	PreventTeardown     *ywrapper.BoolValue      `protobuf:"bytes,343168334,opt,name=prevent_teardown,json=preventTeardown,proto3" json:"prevent_teardown,omitempty"`
	RestartTimer        *ywrapper.Decimal64Value `protobuf:"bytes,192532446,opt,name=restart_timer,json=restartTimer,proto3" json:"restart_timer,omitempty"`
	WarningThresholdPct *ywrapper.UintValue      `protobuf:"bytes,147935779,opt,name=warning_threshold_pct,json=warningThresholdPct,proto3" json:"warning_threshold_pct,omitempty"`
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State) Reset() {
	*x = Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 12, 0, 1}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State) GetMaxPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.MaxPrefixes
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State) GetPreventTeardown() *ywrapper.BoolValue {
	if x != nil {
		return x.PreventTeardown
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State) GetRestartTimer() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RestartTimer
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State) GetWarningThresholdPct() *ywrapper.UintValue {
	if x != nil {
		return x.WarningThresholdPct
	}
	return nil
}

type Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdvertiseInactiveRoutes *ywrapper.BoolValue `protobuf:"bytes,51512953,opt,name=advertise_inactive_routes,json=advertiseInactiveRoutes,proto3" json:"advertise_inactive_routes,omitempty"`
	AlwaysCompareMed        *ywrapper.BoolValue `protobuf:"bytes,492527469,opt,name=always_compare_med,json=alwaysCompareMed,proto3" json:"always_compare_med,omitempty"`
	EnableAigp              *ywrapper.BoolValue `protobuf:"bytes,168513866,opt,name=enable_aigp,json=enableAigp,proto3" json:"enable_aigp,omitempty"`
	ExternalCompareRouterId *ywrapper.BoolValue `protobuf:"bytes,56575074,opt,name=external_compare_router_id,json=externalCompareRouterId,proto3" json:"external_compare_router_id,omitempty"`
	IgnoreAsPathLength      *ywrapper.BoolValue `protobuf:"bytes,292284645,opt,name=ignore_as_path_length,json=ignoreAsPathLength,proto3" json:"ignore_as_path_length,omitempty"`
	IgnoreNextHopIgpMetric  *ywrapper.BoolValue `protobuf:"bytes,61703031,opt,name=ignore_next_hop_igp_metric,json=ignoreNextHopIgpMetric,proto3" json:"ignore_next_hop_igp_metric,omitempty"`
}

func (x *Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_Config) Reset() {
	*x = Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_Config) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_Config.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 13, 0}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_Config) GetAdvertiseInactiveRoutes() *ywrapper.BoolValue {
	if x != nil {
		return x.AdvertiseInactiveRoutes
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_Config) GetAlwaysCompareMed() *ywrapper.BoolValue {
	if x != nil {
		return x.AlwaysCompareMed
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_Config) GetEnableAigp() *ywrapper.BoolValue {
	if x != nil {
		return x.EnableAigp
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_Config) GetExternalCompareRouterId() *ywrapper.BoolValue {
	if x != nil {
		return x.ExternalCompareRouterId
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_Config) GetIgnoreAsPathLength() *ywrapper.BoolValue {
	if x != nil {
		return x.IgnoreAsPathLength
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_Config) GetIgnoreNextHopIgpMetric() *ywrapper.BoolValue {
	if x != nil {
		return x.IgnoreNextHopIgpMetric
	}
	return nil
}

type Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdvertiseInactiveRoutes *ywrapper.BoolValue `protobuf:"bytes,208211588,opt,name=advertise_inactive_routes,json=advertiseInactiveRoutes,proto3" json:"advertise_inactive_routes,omitempty"`
	AlwaysCompareMed        *ywrapper.BoolValue `protobuf:"bytes,512356842,opt,name=always_compare_med,json=alwaysCompareMed,proto3" json:"always_compare_med,omitempty"`
	EnableAigp              *ywrapper.BoolValue `protobuf:"bytes,132547543,opt,name=enable_aigp,json=enableAigp,proto3" json:"enable_aigp,omitempty"`
	ExternalCompareRouterId *ywrapper.BoolValue `protobuf:"bytes,198319909,opt,name=external_compare_router_id,json=externalCompareRouterId,proto3" json:"external_compare_router_id,omitempty"`
	IgnoreAsPathLength      *ywrapper.BoolValue `protobuf:"bytes,315852852,opt,name=ignore_as_path_length,json=ignoreAsPathLength,proto3" json:"ignore_as_path_length,omitempty"`
	IgnoreNextHopIgpMetric  *ywrapper.BoolValue `protobuf:"bytes,287199756,opt,name=ignore_next_hop_igp_metric,json=ignoreNextHopIgpMetric,proto3" json:"ignore_next_hop_igp_metric,omitempty"`
}

func (x *Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_State) Reset() {
	*x = Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_State) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_State.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 13, 1}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_State) GetAdvertiseInactiveRoutes() *ywrapper.BoolValue {
	if x != nil {
		return x.AdvertiseInactiveRoutes
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_State) GetAlwaysCompareMed() *ywrapper.BoolValue {
	if x != nil {
		return x.AlwaysCompareMed
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_State) GetEnableAigp() *ywrapper.BoolValue {
	if x != nil {
		return x.EnableAigp
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_State) GetExternalCompareRouterId() *ywrapper.BoolValue {
	if x != nil {
		return x.ExternalCompareRouterId
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_State) GetIgnoreAsPathLength() *ywrapper.BoolValue {
	if x != nil {
		return x.IgnoreAsPathLength
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_State) GetIgnoreNextHopIgpMetric() *ywrapper.BoolValue {
	if x != nil {
		return x.IgnoreNextHopIgpMetric
	}
	return nil
}

type Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_Config `protobuf:"bytes,36380879,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_State  `protobuf:"bytes,535868352,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit) Reset() {
	*x = Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 14, 0}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit) GetConfig() *Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit) GetState() *Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPrefixes         *ywrapper.UintValue      `protobuf:"bytes,97024113,opt,name=max_prefixes,json=maxPrefixes,proto3" json:"max_prefixes,omitempty"`
	PreventTeardown     *ywrapper.BoolValue      `protobuf:"bytes,275572985,opt,name=prevent_teardown,json=preventTeardown,proto3" json:"prevent_teardown,omitempty"`
	RestartTimer        *ywrapper.Decimal64Value `protobuf:"bytes,438463839,opt,name=restart_timer,json=restartTimer,proto3" json:"restart_timer,omitempty"`
	WarningThresholdPct *ywrapper.UintValue      `protobuf:"bytes,373605214,opt,name=warning_threshold_pct,json=warningThresholdPct,proto3" json:"warning_threshold_pct,omitempty"`
}

func (x *Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_Config) Reset() {
	*x = Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_Config) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_Config.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 14, 0, 0}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_Config) GetMaxPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.MaxPrefixes
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_Config) GetPreventTeardown() *ywrapper.BoolValue {
	if x != nil {
		return x.PreventTeardown
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_Config) GetRestartTimer() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RestartTimer
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_Config) GetWarningThresholdPct() *ywrapper.UintValue {
	if x != nil {
		return x.WarningThresholdPct
	}
	return nil
}

type Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPrefixes         *ywrapper.UintValue      `protobuf:"bytes,483083852,opt,name=max_prefixes,json=maxPrefixes,proto3" json:"max_prefixes,omitempty"`
	PreventTeardown     *ywrapper.BoolValue      `protobuf:"bytes,91533744,opt,name=prevent_teardown,json=preventTeardown,proto3" json:"prevent_teardown,omitempty"`
	RestartTimer        *ywrapper.Decimal64Value `protobuf:"bytes,285363776,opt,name=restart_timer,json=restartTimer,proto3" json:"restart_timer,omitempty"`
	WarningThresholdPct *ywrapper.UintValue      `protobuf:"bytes,134167681,opt,name=warning_threshold_pct,json=warningThresholdPct,proto3" json:"warning_threshold_pct,omitempty"`
}

func (x *Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_State) Reset() {
	*x = Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_State) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_State.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 14, 0, 1}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_State) GetMaxPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.MaxPrefixes
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_State) GetPreventTeardown() *ywrapper.BoolValue {
	if x != nil {
		return x.PreventTeardown
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_State) GetRestartTimer() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RestartTimer
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_State) GetWarningThresholdPct() *ywrapper.UintValue {
	if x != nil {
		return x.WarningThresholdPct
	}
	return nil
}

type Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_Config `protobuf:"bytes,298054493,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_State  `protobuf:"bytes,512922962,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit) Reset() {
	*x = Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 15, 0}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit) GetConfig() *Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit) GetState() *Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPrefixes         *ywrapper.UintValue      `protobuf:"bytes,273305923,opt,name=max_prefixes,json=maxPrefixes,proto3" json:"max_prefixes,omitempty"`
	PreventTeardown     *ywrapper.BoolValue      `protobuf:"bytes,502296235,opt,name=prevent_teardown,json=preventTeardown,proto3" json:"prevent_teardown,omitempty"`
	RestartTimer        *ywrapper.Decimal64Value `protobuf:"bytes,126957161,opt,name=restart_timer,json=restartTimer,proto3" json:"restart_timer,omitempty"`
	WarningThresholdPct *ywrapper.UintValue      `protobuf:"bytes,491936004,opt,name=warning_threshold_pct,json=warningThresholdPct,proto3" json:"warning_threshold_pct,omitempty"`
}

func (x *Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_Config) Reset() {
	*x = Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_Config) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_Config.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 15, 0, 0}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_Config) GetMaxPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.MaxPrefixes
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_Config) GetPreventTeardown() *ywrapper.BoolValue {
	if x != nil {
		return x.PreventTeardown
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_Config) GetRestartTimer() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RestartTimer
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_Config) GetWarningThresholdPct() *ywrapper.UintValue {
	if x != nil {
		return x.WarningThresholdPct
	}
	return nil
}

type Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPrefixes         *ywrapper.UintValue      `protobuf:"bytes,413409618,opt,name=max_prefixes,json=maxPrefixes,proto3" json:"max_prefixes,omitempty"`
	PreventTeardown     *ywrapper.BoolValue      `protobuf:"bytes,467059694,opt,name=prevent_teardown,json=preventTeardown,proto3" json:"prevent_teardown,omitempty"`
	RestartTimer        *ywrapper.Decimal64Value `protobuf:"bytes,151801726,opt,name=restart_timer,json=restartTimer,proto3" json:"restart_timer,omitempty"`
	WarningThresholdPct *ywrapper.UintValue      `protobuf:"bytes,260803651,opt,name=warning_threshold_pct,json=warningThresholdPct,proto3" json:"warning_threshold_pct,omitempty"`
}

func (x *Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_State) Reset() {
	*x = Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_State) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_State.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 15, 0, 1}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_State) GetMaxPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.MaxPrefixes
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_State) GetPreventTeardown() *ywrapper.BoolValue {
	if x != nil {
		return x.PreventTeardown
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_State) GetRestartTimer() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RestartTimer
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_State) GetWarningThresholdPct() *ywrapper.UintValue {
	if x != nil {
		return x.WarningThresholdPct
	}
	return nil
}

type Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled *ywrapper.BoolValue `protobuf:"bytes,147610790,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Config) Reset() {
	*x = Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Config) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Config.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 17, 0}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Config) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

type Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config `protobuf:"bytes,516503991,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State  `protobuf:"bytes,143759848,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp) Reset() {
	*x = Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 17, 1}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp) GetConfig() *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp) GetState() *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config `protobuf:"bytes,208841547,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State  `protobuf:"bytes,54198668,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp) Reset() {
	*x = Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 17, 2}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp) GetConfig() *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp) GetState() *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled *ywrapper.BoolValue `protobuf:"bytes,241670963,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_State) Reset() {
	*x = Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_State) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_State.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 17, 3}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_State) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

type Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowMultipleAs *ywrapper.BoolValue `protobuf:"bytes,525860547,opt,name=allow_multiple_as,json=allowMultipleAs,proto3" json:"allow_multiple_as,omitempty"`
	MaximumPaths    *ywrapper.UintValue `protobuf:"bytes,44807275,opt,name=maximum_paths,json=maximumPaths,proto3" json:"maximum_paths,omitempty"`
}

func (x *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config) Reset() {
	*x = Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 17, 1, 0}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config) GetAllowMultipleAs() *ywrapper.BoolValue {
	if x != nil {
		return x.AllowMultipleAs
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config) GetMaximumPaths() *ywrapper.UintValue {
	if x != nil {
		return x.MaximumPaths
	}
	return nil
}

type Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowMultipleAs *ywrapper.BoolValue `protobuf:"bytes,44197300,opt,name=allow_multiple_as,json=allowMultipleAs,proto3" json:"allow_multiple_as,omitempty"`
	MaximumPaths    *ywrapper.UintValue `protobuf:"bytes,491653264,opt,name=maximum_paths,json=maximumPaths,proto3" json:"maximum_paths,omitempty"`
}

func (x *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State) Reset() {
	*x = Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 17, 1, 1}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State) GetAllowMultipleAs() *ywrapper.BoolValue {
	if x != nil {
		return x.AllowMultipleAs
	}
	return nil
}

func (x *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State) GetMaximumPaths() *ywrapper.UintValue {
	if x != nil {
		return x.MaximumPaths
	}
	return nil
}

type Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaximumPaths *ywrapper.UintValue `protobuf:"bytes,514561943,opt,name=maximum_paths,json=maximumPaths,proto3" json:"maximum_paths,omitempty"`
}

func (x *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config) Reset() {
	*x = Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 17, 2, 0}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config) GetMaximumPaths() *ywrapper.UintValue {
	if x != nil {
		return x.MaximumPaths
	}
	return nil
}

type Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaximumPaths *ywrapper.UintValue `protobuf:"bytes,379870876,opt,name=maximum_paths,json=maximumPaths,proto3" json:"maximum_paths,omitempty"`
}

func (x *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State) Reset() {
	*x = Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State) ProtoMessage() {}

func (x *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State.ProtoReflect.Descriptor instead.
func (*Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 17, 2, 1}
}

func (x *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State) GetMaximumPaths() *ywrapper.UintValue {
	if x != nil {
		return x.MaximumPaths
	}
	return nil
}

type Bgp_Global_Confederation_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifier *ywrapper.UintValue   `protobuf:"bytes,99380285,opt,name=identifier,proto3" json:"identifier,omitempty"`
	MemberAs   []*ywrapper.UintValue `protobuf:"bytes,490077059,rep,name=member_as,json=memberAs,proto3" json:"member_as,omitempty"`
}

func (x *Bgp_Global_Confederation_Config) Reset() {
	*x = Bgp_Global_Confederation_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_Confederation_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_Confederation_Config) ProtoMessage() {}

func (x *Bgp_Global_Confederation_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_Confederation_Config.ProtoReflect.Descriptor instead.
func (*Bgp_Global_Confederation_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 1, 0}
}

func (x *Bgp_Global_Confederation_Config) GetIdentifier() *ywrapper.UintValue {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Bgp_Global_Confederation_Config) GetMemberAs() []*ywrapper.UintValue {
	if x != nil {
		return x.MemberAs
	}
	return nil
}

type Bgp_Global_Confederation_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifier *ywrapper.UintValue   `protobuf:"bytes,241590772,opt,name=identifier,proto3" json:"identifier,omitempty"`
	MemberAs   []*ywrapper.UintValue `protobuf:"bytes,440916088,rep,name=member_as,json=memberAs,proto3" json:"member_as,omitempty"`
}

func (x *Bgp_Global_Confederation_State) Reset() {
	*x = Bgp_Global_Confederation_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_Confederation_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_Confederation_State) ProtoMessage() {}

func (x *Bgp_Global_Confederation_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_Confederation_State.ProtoReflect.Descriptor instead.
func (*Bgp_Global_Confederation_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 1, 1}
}

func (x *Bgp_Global_Confederation_State) GetIdentifier() *ywrapper.UintValue {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Bgp_Global_Confederation_State) GetMemberAs() []*ywrapper.UintValue {
	if x != nil {
		return x.MemberAs
	}
	return nil
}

type Bgp_Global_DefaultRouteDistance_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExternalRouteDistance *ywrapper.UintValue `protobuf:"bytes,248168899,opt,name=external_route_distance,json=externalRouteDistance,proto3" json:"external_route_distance,omitempty"`
	InternalRouteDistance *ywrapper.UintValue `protobuf:"bytes,279191065,opt,name=internal_route_distance,json=internalRouteDistance,proto3" json:"internal_route_distance,omitempty"`
}

func (x *Bgp_Global_DefaultRouteDistance_Config) Reset() {
	*x = Bgp_Global_DefaultRouteDistance_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_DefaultRouteDistance_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_DefaultRouteDistance_Config) ProtoMessage() {}

func (x *Bgp_Global_DefaultRouteDistance_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_DefaultRouteDistance_Config.ProtoReflect.Descriptor instead.
func (*Bgp_Global_DefaultRouteDistance_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 3, 0}
}

func (x *Bgp_Global_DefaultRouteDistance_Config) GetExternalRouteDistance() *ywrapper.UintValue {
	if x != nil {
		return x.ExternalRouteDistance
	}
	return nil
}

func (x *Bgp_Global_DefaultRouteDistance_Config) GetInternalRouteDistance() *ywrapper.UintValue {
	if x != nil {
		return x.InternalRouteDistance
	}
	return nil
}

type Bgp_Global_DefaultRouteDistance_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExternalRouteDistance *ywrapper.UintValue `protobuf:"bytes,474547520,opt,name=external_route_distance,json=externalRouteDistance,proto3" json:"external_route_distance,omitempty"`
	InternalRouteDistance *ywrapper.UintValue `protobuf:"bytes,347978118,opt,name=internal_route_distance,json=internalRouteDistance,proto3" json:"internal_route_distance,omitempty"`
}

func (x *Bgp_Global_DefaultRouteDistance_State) Reset() {
	*x = Bgp_Global_DefaultRouteDistance_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_DefaultRouteDistance_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_DefaultRouteDistance_State) ProtoMessage() {}

func (x *Bgp_Global_DefaultRouteDistance_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_DefaultRouteDistance_State.ProtoReflect.Descriptor instead.
func (*Bgp_Global_DefaultRouteDistance_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 3, 1}
}

func (x *Bgp_Global_DefaultRouteDistance_State) GetExternalRouteDistance() *ywrapper.UintValue {
	if x != nil {
		return x.ExternalRouteDistance
	}
	return nil
}

func (x *Bgp_Global_DefaultRouteDistance_State) GetInternalRouteDistance() *ywrapper.UintValue {
	if x != nil {
		return x.InternalRouteDistance
	}
	return nil
}

type Bgp_Global_DynamicNeighborPrefixes_DynamicNeighborPrefix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_Global_DynamicNeighborPrefixes_DynamicNeighborPrefix_Config `protobuf:"bytes,115724023,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_Global_DynamicNeighborPrefixes_DynamicNeighborPrefix_State  `protobuf:"bytes,282820648,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Global_DynamicNeighborPrefixes_DynamicNeighborPrefix) Reset() {
	*x = Bgp_Global_DynamicNeighborPrefixes_DynamicNeighborPrefix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_DynamicNeighborPrefixes_DynamicNeighborPrefix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_DynamicNeighborPrefixes_DynamicNeighborPrefix) ProtoMessage() {}

func (x *Bgp_Global_DynamicNeighborPrefixes_DynamicNeighborPrefix) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_DynamicNeighborPrefixes_DynamicNeighborPrefix.ProtoReflect.Descriptor instead.
func (*Bgp_Global_DynamicNeighborPrefixes_DynamicNeighborPrefix) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 4, 0}
}

func (x *Bgp_Global_DynamicNeighborPrefixes_DynamicNeighborPrefix) GetConfig() *Bgp_Global_DynamicNeighborPrefixes_DynamicNeighborPrefix_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_Global_DynamicNeighborPrefixes_DynamicNeighborPrefix) GetState() *Bgp_Global_DynamicNeighborPrefixes_DynamicNeighborPrefix_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Global_DynamicNeighborPrefixes_DynamicNeighborPrefixKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix                string                                                    `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	DynamicNeighborPrefix *Bgp_Global_DynamicNeighborPrefixes_DynamicNeighborPrefix `protobuf:"bytes,2,opt,name=dynamic_neighbor_prefix,json=dynamicNeighborPrefix,proto3" json:"dynamic_neighbor_prefix,omitempty"`
}

func (x *Bgp_Global_DynamicNeighborPrefixes_DynamicNeighborPrefixKey) Reset() {
	*x = Bgp_Global_DynamicNeighborPrefixes_DynamicNeighborPrefixKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_DynamicNeighborPrefixes_DynamicNeighborPrefixKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_DynamicNeighborPrefixes_DynamicNeighborPrefixKey) ProtoMessage() {}

func (x *Bgp_Global_DynamicNeighborPrefixes_DynamicNeighborPrefixKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_DynamicNeighborPrefixes_DynamicNeighborPrefixKey.ProtoReflect.Descriptor instead.
func (*Bgp_Global_DynamicNeighborPrefixes_DynamicNeighborPrefixKey) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 4, 1}
}

func (x *Bgp_Global_DynamicNeighborPrefixes_DynamicNeighborPrefixKey) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *Bgp_Global_DynamicNeighborPrefixes_DynamicNeighborPrefixKey) GetDynamicNeighborPrefix() *Bgp_Global_DynamicNeighborPrefixes_DynamicNeighborPrefix {
	if x != nil {
		return x.DynamicNeighborPrefix
	}
	return nil
}

type Bgp_Global_DynamicNeighborPrefixes_DynamicNeighborPrefix_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerGroup *ywrapper.StringValue `protobuf:"bytes,213545536,opt,name=peer_group,json=peerGroup,proto3" json:"peer_group,omitempty"`
	Prefix    *ywrapper.StringValue `protobuf:"bytes,502015670,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (x *Bgp_Global_DynamicNeighborPrefixes_DynamicNeighborPrefix_Config) Reset() {
	*x = Bgp_Global_DynamicNeighborPrefixes_DynamicNeighborPrefix_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_DynamicNeighborPrefixes_DynamicNeighborPrefix_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_DynamicNeighborPrefixes_DynamicNeighborPrefix_Config) ProtoMessage() {}

func (x *Bgp_Global_DynamicNeighborPrefixes_DynamicNeighborPrefix_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_DynamicNeighborPrefixes_DynamicNeighborPrefix_Config.ProtoReflect.Descriptor instead.
func (*Bgp_Global_DynamicNeighborPrefixes_DynamicNeighborPrefix_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 4, 0, 0}
}

func (x *Bgp_Global_DynamicNeighborPrefixes_DynamicNeighborPrefix_Config) GetPeerGroup() *ywrapper.StringValue {
	if x != nil {
		return x.PeerGroup
	}
	return nil
}

func (x *Bgp_Global_DynamicNeighborPrefixes_DynamicNeighborPrefix_Config) GetPrefix() *ywrapper.StringValue {
	if x != nil {
		return x.Prefix
	}
	return nil
}

type Bgp_Global_DynamicNeighborPrefixes_DynamicNeighborPrefix_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerGroup *ywrapper.StringValue `protobuf:"bytes,16168853,opt,name=peer_group,json=peerGroup,proto3" json:"peer_group,omitempty"`
	Prefix    *ywrapper.StringValue `protobuf:"bytes,193746211,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (x *Bgp_Global_DynamicNeighborPrefixes_DynamicNeighborPrefix_State) Reset() {
	*x = Bgp_Global_DynamicNeighborPrefixes_DynamicNeighborPrefix_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_DynamicNeighborPrefixes_DynamicNeighborPrefix_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_DynamicNeighborPrefixes_DynamicNeighborPrefix_State) ProtoMessage() {}

func (x *Bgp_Global_DynamicNeighborPrefixes_DynamicNeighborPrefix_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_DynamicNeighborPrefixes_DynamicNeighborPrefix_State.ProtoReflect.Descriptor instead.
func (*Bgp_Global_DynamicNeighborPrefixes_DynamicNeighborPrefix_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 4, 0, 1}
}

func (x *Bgp_Global_DynamicNeighborPrefixes_DynamicNeighborPrefix_State) GetPeerGroup() *ywrapper.StringValue {
	if x != nil {
		return x.PeerGroup
	}
	return nil
}

func (x *Bgp_Global_DynamicNeighborPrefixes_DynamicNeighborPrefix_State) GetPrefix() *ywrapper.StringValue {
	if x != nil {
		return x.Prefix
	}
	return nil
}

type Bgp_Global_GracefulRestart_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled         *ywrapper.BoolValue      `protobuf:"bytes,377077741,opt,name=enabled,proto3" json:"enabled,omitempty"`
	HelperOnly      *ywrapper.BoolValue      `protobuf:"bytes,139989601,opt,name=helper_only,json=helperOnly,proto3" json:"helper_only,omitempty"`
	RestartTime     *ywrapper.UintValue      `protobuf:"bytes,271693891,opt,name=restart_time,json=restartTime,proto3" json:"restart_time,omitempty"`
	StaleRoutesTime *ywrapper.Decimal64Value `protobuf:"bytes,253481422,opt,name=stale_routes_time,json=staleRoutesTime,proto3" json:"stale_routes_time,omitempty"`
}

func (x *Bgp_Global_GracefulRestart_Config) Reset() {
	*x = Bgp_Global_GracefulRestart_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_GracefulRestart_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_GracefulRestart_Config) ProtoMessage() {}

func (x *Bgp_Global_GracefulRestart_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_GracefulRestart_Config.ProtoReflect.Descriptor instead.
func (*Bgp_Global_GracefulRestart_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 5, 0}
}

func (x *Bgp_Global_GracefulRestart_Config) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *Bgp_Global_GracefulRestart_Config) GetHelperOnly() *ywrapper.BoolValue {
	if x != nil {
		return x.HelperOnly
	}
	return nil
}

func (x *Bgp_Global_GracefulRestart_Config) GetRestartTime() *ywrapper.UintValue {
	if x != nil {
		return x.RestartTime
	}
	return nil
}

func (x *Bgp_Global_GracefulRestart_Config) GetStaleRoutesTime() *ywrapper.Decimal64Value {
	if x != nil {
		return x.StaleRoutesTime
	}
	return nil
}

type Bgp_Global_GracefulRestart_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled         *ywrapper.BoolValue      `protobuf:"bytes,480975646,opt,name=enabled,proto3" json:"enabled,omitempty"`
	HelperOnly      *ywrapper.BoolValue      `protobuf:"bytes,164401802,opt,name=helper_only,json=helperOnly,proto3" json:"helper_only,omitempty"`
	RestartTime     *ywrapper.UintValue      `protobuf:"bytes,187699210,opt,name=restart_time,json=restartTime,proto3" json:"restart_time,omitempty"`
	StaleRoutesTime *ywrapper.Decimal64Value `protobuf:"bytes,527386829,opt,name=stale_routes_time,json=staleRoutesTime,proto3" json:"stale_routes_time,omitempty"`
}

func (x *Bgp_Global_GracefulRestart_State) Reset() {
	*x = Bgp_Global_GracefulRestart_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_GracefulRestart_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_GracefulRestart_State) ProtoMessage() {}

func (x *Bgp_Global_GracefulRestart_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_GracefulRestart_State.ProtoReflect.Descriptor instead.
func (*Bgp_Global_GracefulRestart_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 5, 1}
}

func (x *Bgp_Global_GracefulRestart_State) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *Bgp_Global_GracefulRestart_State) GetHelperOnly() *ywrapper.BoolValue {
	if x != nil {
		return x.HelperOnly
	}
	return nil
}

func (x *Bgp_Global_GracefulRestart_State) GetRestartTime() *ywrapper.UintValue {
	if x != nil {
		return x.RestartTime
	}
	return nil
}

func (x *Bgp_Global_GracefulRestart_State) GetStaleRoutesTime() *ywrapper.Decimal64Value {
	if x != nil {
		return x.StaleRoutesTime
	}
	return nil
}

type Bgp_Global_RouteSelectionOptions_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdvertiseInactiveRoutes *ywrapper.BoolValue `protobuf:"bytes,305601094,opt,name=advertise_inactive_routes,json=advertiseInactiveRoutes,proto3" json:"advertise_inactive_routes,omitempty"`
	AlwaysCompareMed        *ywrapper.BoolValue `protobuf:"bytes,369223600,opt,name=always_compare_med,json=alwaysCompareMed,proto3" json:"always_compare_med,omitempty"`
	EnableAigp              *ywrapper.BoolValue `protobuf:"bytes,111383345,opt,name=enable_aigp,json=enableAigp,proto3" json:"enable_aigp,omitempty"`
	ExternalCompareRouterId *ywrapper.BoolValue `protobuf:"bytes,437936799,opt,name=external_compare_router_id,json=externalCompareRouterId,proto3" json:"external_compare_router_id,omitempty"`
	IgnoreAsPathLength      *ywrapper.BoolValue `protobuf:"bytes,54359918,opt,name=ignore_as_path_length,json=ignoreAsPathLength,proto3" json:"ignore_as_path_length,omitempty"`
	IgnoreNextHopIgpMetric  *ywrapper.BoolValue `protobuf:"bytes,503617874,opt,name=ignore_next_hop_igp_metric,json=ignoreNextHopIgpMetric,proto3" json:"ignore_next_hop_igp_metric,omitempty"`
}

func (x *Bgp_Global_RouteSelectionOptions_Config) Reset() {
	*x = Bgp_Global_RouteSelectionOptions_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_RouteSelectionOptions_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_RouteSelectionOptions_Config) ProtoMessage() {}

func (x *Bgp_Global_RouteSelectionOptions_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_RouteSelectionOptions_Config.ProtoReflect.Descriptor instead.
func (*Bgp_Global_RouteSelectionOptions_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 6, 0}
}

func (x *Bgp_Global_RouteSelectionOptions_Config) GetAdvertiseInactiveRoutes() *ywrapper.BoolValue {
	if x != nil {
		return x.AdvertiseInactiveRoutes
	}
	return nil
}

func (x *Bgp_Global_RouteSelectionOptions_Config) GetAlwaysCompareMed() *ywrapper.BoolValue {
	if x != nil {
		return x.AlwaysCompareMed
	}
	return nil
}

func (x *Bgp_Global_RouteSelectionOptions_Config) GetEnableAigp() *ywrapper.BoolValue {
	if x != nil {
		return x.EnableAigp
	}
	return nil
}

func (x *Bgp_Global_RouteSelectionOptions_Config) GetExternalCompareRouterId() *ywrapper.BoolValue {
	if x != nil {
		return x.ExternalCompareRouterId
	}
	return nil
}

func (x *Bgp_Global_RouteSelectionOptions_Config) GetIgnoreAsPathLength() *ywrapper.BoolValue {
	if x != nil {
		return x.IgnoreAsPathLength
	}
	return nil
}

func (x *Bgp_Global_RouteSelectionOptions_Config) GetIgnoreNextHopIgpMetric() *ywrapper.BoolValue {
	if x != nil {
		return x.IgnoreNextHopIgpMetric
	}
	return nil
}

type Bgp_Global_RouteSelectionOptions_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdvertiseInactiveRoutes *ywrapper.BoolValue `protobuf:"bytes,137656893,opt,name=advertise_inactive_routes,json=advertiseInactiveRoutes,proto3" json:"advertise_inactive_routes,omitempty"`
	AlwaysCompareMed        *ywrapper.BoolValue `protobuf:"bytes,99173425,opt,name=always_compare_med,json=alwaysCompareMed,proto3" json:"always_compare_med,omitempty"`
	EnableAigp              *ywrapper.BoolValue `protobuf:"bytes,265724230,opt,name=enable_aigp,json=enableAigp,proto3" json:"enable_aigp,omitempty"`
	ExternalCompareRouterId *ywrapper.BoolValue `protobuf:"bytes,283469174,opt,name=external_compare_router_id,json=externalCompareRouterId,proto3" json:"external_compare_router_id,omitempty"`
	IgnoreAsPathLength      *ywrapper.BoolValue `protobuf:"bytes,34145945,opt,name=ignore_as_path_length,json=ignoreAsPathLength,proto3" json:"ignore_as_path_length,omitempty"`
	IgnoreNextHopIgpMetric  *ywrapper.BoolValue `protobuf:"bytes,390986939,opt,name=ignore_next_hop_igp_metric,json=ignoreNextHopIgpMetric,proto3" json:"ignore_next_hop_igp_metric,omitempty"`
}

func (x *Bgp_Global_RouteSelectionOptions_State) Reset() {
	*x = Bgp_Global_RouteSelectionOptions_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_RouteSelectionOptions_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_RouteSelectionOptions_State) ProtoMessage() {}

func (x *Bgp_Global_RouteSelectionOptions_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_RouteSelectionOptions_State.ProtoReflect.Descriptor instead.
func (*Bgp_Global_RouteSelectionOptions_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 6, 1}
}

func (x *Bgp_Global_RouteSelectionOptions_State) GetAdvertiseInactiveRoutes() *ywrapper.BoolValue {
	if x != nil {
		return x.AdvertiseInactiveRoutes
	}
	return nil
}

func (x *Bgp_Global_RouteSelectionOptions_State) GetAlwaysCompareMed() *ywrapper.BoolValue {
	if x != nil {
		return x.AlwaysCompareMed
	}
	return nil
}

func (x *Bgp_Global_RouteSelectionOptions_State) GetEnableAigp() *ywrapper.BoolValue {
	if x != nil {
		return x.EnableAigp
	}
	return nil
}

func (x *Bgp_Global_RouteSelectionOptions_State) GetExternalCompareRouterId() *ywrapper.BoolValue {
	if x != nil {
		return x.ExternalCompareRouterId
	}
	return nil
}

func (x *Bgp_Global_RouteSelectionOptions_State) GetIgnoreAsPathLength() *ywrapper.BoolValue {
	if x != nil {
		return x.IgnoreAsPathLength
	}
	return nil
}

func (x *Bgp_Global_RouteSelectionOptions_State) GetIgnoreNextHopIgpMetric() *ywrapper.BoolValue {
	if x != nil {
		return x.IgnoreNextHopIgpMetric
	}
	return nil
}

type Bgp_Global_UseMultiplePaths_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled *ywrapper.BoolValue `protobuf:"bytes,410782847,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *Bgp_Global_UseMultiplePaths_Config) Reset() {
	*x = Bgp_Global_UseMultiplePaths_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_UseMultiplePaths_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_UseMultiplePaths_Config) ProtoMessage() {}

func (x *Bgp_Global_UseMultiplePaths_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_UseMultiplePaths_Config.ProtoReflect.Descriptor instead.
func (*Bgp_Global_UseMultiplePaths_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 8, 0}
}

func (x *Bgp_Global_UseMultiplePaths_Config) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

type Bgp_Global_UseMultiplePaths_Ebgp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_Global_UseMultiplePaths_Ebgp_Config `protobuf:"bytes,290252960,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_Global_UseMultiplePaths_Ebgp_State  `protobuf:"bytes,56140057,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Global_UseMultiplePaths_Ebgp) Reset() {
	*x = Bgp_Global_UseMultiplePaths_Ebgp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_UseMultiplePaths_Ebgp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_UseMultiplePaths_Ebgp) ProtoMessage() {}

func (x *Bgp_Global_UseMultiplePaths_Ebgp) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_UseMultiplePaths_Ebgp.ProtoReflect.Descriptor instead.
func (*Bgp_Global_UseMultiplePaths_Ebgp) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 8, 1}
}

func (x *Bgp_Global_UseMultiplePaths_Ebgp) GetConfig() *Bgp_Global_UseMultiplePaths_Ebgp_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_Global_UseMultiplePaths_Ebgp) GetState() *Bgp_Global_UseMultiplePaths_Ebgp_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Global_UseMultiplePaths_Ibgp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_Global_UseMultiplePaths_Ibgp_Config `protobuf:"bytes,113871204,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_Global_UseMultiplePaths_Ibgp_State  `protobuf:"bytes,290955261,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Global_UseMultiplePaths_Ibgp) Reset() {
	*x = Bgp_Global_UseMultiplePaths_Ibgp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_UseMultiplePaths_Ibgp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_UseMultiplePaths_Ibgp) ProtoMessage() {}

func (x *Bgp_Global_UseMultiplePaths_Ibgp) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_UseMultiplePaths_Ibgp.ProtoReflect.Descriptor instead.
func (*Bgp_Global_UseMultiplePaths_Ibgp) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 8, 2}
}

func (x *Bgp_Global_UseMultiplePaths_Ibgp) GetConfig() *Bgp_Global_UseMultiplePaths_Ibgp_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_Global_UseMultiplePaths_Ibgp) GetState() *Bgp_Global_UseMultiplePaths_Ibgp_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Global_UseMultiplePaths_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled *ywrapper.BoolValue `protobuf:"bytes,488190124,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *Bgp_Global_UseMultiplePaths_State) Reset() {
	*x = Bgp_Global_UseMultiplePaths_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_UseMultiplePaths_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_UseMultiplePaths_State) ProtoMessage() {}

func (x *Bgp_Global_UseMultiplePaths_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_UseMultiplePaths_State.ProtoReflect.Descriptor instead.
func (*Bgp_Global_UseMultiplePaths_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 8, 3}
}

func (x *Bgp_Global_UseMultiplePaths_State) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

type Bgp_Global_UseMultiplePaths_Ebgp_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowMultipleAs *ywrapper.BoolValue `protobuf:"bytes,368843244,opt,name=allow_multiple_as,json=allowMultipleAs,proto3" json:"allow_multiple_as,omitempty"`
	MaximumPaths    *ywrapper.UintValue `protobuf:"bytes,16831624,opt,name=maximum_paths,json=maximumPaths,proto3" json:"maximum_paths,omitempty"`
}

func (x *Bgp_Global_UseMultiplePaths_Ebgp_Config) Reset() {
	*x = Bgp_Global_UseMultiplePaths_Ebgp_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_UseMultiplePaths_Ebgp_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_UseMultiplePaths_Ebgp_Config) ProtoMessage() {}

func (x *Bgp_Global_UseMultiplePaths_Ebgp_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_UseMultiplePaths_Ebgp_Config.ProtoReflect.Descriptor instead.
func (*Bgp_Global_UseMultiplePaths_Ebgp_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 8, 1, 0}
}

func (x *Bgp_Global_UseMultiplePaths_Ebgp_Config) GetAllowMultipleAs() *ywrapper.BoolValue {
	if x != nil {
		return x.AllowMultipleAs
	}
	return nil
}

func (x *Bgp_Global_UseMultiplePaths_Ebgp_Config) GetMaximumPaths() *ywrapper.UintValue {
	if x != nil {
		return x.MaximumPaths
	}
	return nil
}

type Bgp_Global_UseMultiplePaths_Ebgp_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowMultipleAs *ywrapper.BoolValue `protobuf:"bytes,525621117,opt,name=allow_multiple_as,json=allowMultipleAs,proto3" json:"allow_multiple_as,omitempty"`
	MaximumPaths    *ywrapper.UintValue `protobuf:"bytes,101434349,opt,name=maximum_paths,json=maximumPaths,proto3" json:"maximum_paths,omitempty"`
}

func (x *Bgp_Global_UseMultiplePaths_Ebgp_State) Reset() {
	*x = Bgp_Global_UseMultiplePaths_Ebgp_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_UseMultiplePaths_Ebgp_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_UseMultiplePaths_Ebgp_State) ProtoMessage() {}

func (x *Bgp_Global_UseMultiplePaths_Ebgp_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_UseMultiplePaths_Ebgp_State.ProtoReflect.Descriptor instead.
func (*Bgp_Global_UseMultiplePaths_Ebgp_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 8, 1, 1}
}

func (x *Bgp_Global_UseMultiplePaths_Ebgp_State) GetAllowMultipleAs() *ywrapper.BoolValue {
	if x != nil {
		return x.AllowMultipleAs
	}
	return nil
}

func (x *Bgp_Global_UseMultiplePaths_Ebgp_State) GetMaximumPaths() *ywrapper.UintValue {
	if x != nil {
		return x.MaximumPaths
	}
	return nil
}

type Bgp_Global_UseMultiplePaths_Ibgp_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaximumPaths *ywrapper.UintValue `protobuf:"bytes,305170196,opt,name=maximum_paths,json=maximumPaths,proto3" json:"maximum_paths,omitempty"`
}

func (x *Bgp_Global_UseMultiplePaths_Ibgp_Config) Reset() {
	*x = Bgp_Global_UseMultiplePaths_Ibgp_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_UseMultiplePaths_Ibgp_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_UseMultiplePaths_Ibgp_Config) ProtoMessage() {}

func (x *Bgp_Global_UseMultiplePaths_Ibgp_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_UseMultiplePaths_Ibgp_Config.ProtoReflect.Descriptor instead.
func (*Bgp_Global_UseMultiplePaths_Ibgp_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 8, 2, 0}
}

func (x *Bgp_Global_UseMultiplePaths_Ibgp_Config) GetMaximumPaths() *ywrapper.UintValue {
	if x != nil {
		return x.MaximumPaths
	}
	return nil
}

type Bgp_Global_UseMultiplePaths_Ibgp_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaximumPaths *ywrapper.UintValue `protobuf:"bytes,412970713,opt,name=maximum_paths,json=maximumPaths,proto3" json:"maximum_paths,omitempty"`
}

func (x *Bgp_Global_UseMultiplePaths_Ibgp_State) Reset() {
	*x = Bgp_Global_UseMultiplePaths_Ibgp_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Global_UseMultiplePaths_Ibgp_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Global_UseMultiplePaths_Ibgp_State) ProtoMessage() {}

func (x *Bgp_Global_UseMultiplePaths_Ibgp_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Global_UseMultiplePaths_Ibgp_State.ProtoReflect.Descriptor instead.
func (*Bgp_Global_UseMultiplePaths_Ibgp_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 0, 8, 2, 1}
}

func (x *Bgp_Global_UseMultiplePaths_Ibgp_State) GetMaximumPaths() *ywrapper.UintValue {
	if x != nil {
		return x.MaximumPaths
	}
	return nil
}

type Bgp_Neighbors_Neighbor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AfiSafis         *Bgp_Neighbors_Neighbor_AfiSafis         `protobuf:"bytes,54430311,opt,name=afi_safis,json=afiSafis,proto3" json:"afi_safis,omitempty"`
	ApplyPolicy      *Bgp_Neighbors_Neighbor_ApplyPolicy      `protobuf:"bytes,372894111,opt,name=apply_policy,json=applyPolicy,proto3" json:"apply_policy,omitempty"`
	AsPathOptions    *Bgp_Neighbors_Neighbor_AsPathOptions    `protobuf:"bytes,85345345,opt,name=as_path_options,json=asPathOptions,proto3" json:"as_path_options,omitempty"`
	Config           *Bgp_Neighbors_Neighbor_Config           `protobuf:"bytes,10084554,opt,name=config,proto3" json:"config,omitempty"`
	EbgpMultihop     *Bgp_Neighbors_Neighbor_EbgpMultihop     `protobuf:"bytes,388023637,opt,name=ebgp_multihop,json=ebgpMultihop,proto3" json:"ebgp_multihop,omitempty"`
	ErrorHandling    *Bgp_Neighbors_Neighbor_ErrorHandling    `protobuf:"bytes,38974792,opt,name=error_handling,json=errorHandling,proto3" json:"error_handling,omitempty"`
	GracefulRestart  *Bgp_Neighbors_Neighbor_GracefulRestart  `protobuf:"bytes,37159615,opt,name=graceful_restart,json=gracefulRestart,proto3" json:"graceful_restart,omitempty"`
	LoggingOptions   *Bgp_Neighbors_Neighbor_LoggingOptions   `protobuf:"bytes,229587398,opt,name=logging_options,json=loggingOptions,proto3" json:"logging_options,omitempty"`
	RouteReflector   *Bgp_Neighbors_Neighbor_RouteReflector   `protobuf:"bytes,385000812,opt,name=route_reflector,json=routeReflector,proto3" json:"route_reflector,omitempty"`
	State            *Bgp_Neighbors_Neighbor_State            `protobuf:"bytes,115400039,opt,name=state,proto3" json:"state,omitempty"`
	Timers           *Bgp_Neighbors_Neighbor_Timers           `protobuf:"bytes,382217586,opt,name=timers,proto3" json:"timers,omitempty"`
	Transport        *Bgp_Neighbors_Neighbor_Transport        `protobuf:"bytes,431234279,opt,name=transport,proto3" json:"transport,omitempty"`
	UseMultiplePaths *Bgp_Neighbors_Neighbor_UseMultiplePaths `protobuf:"bytes,409920217,opt,name=use_multiple_paths,json=useMultiplePaths,proto3" json:"use_multiple_paths,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor) Reset() {
	*x = Bgp_Neighbors_Neighbor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *Bgp_Neighbors_Neighbor) GetAfiSafis() *Bgp_Neighbors_Neighbor_AfiSafis {
	if x != nil {
		return x.AfiSafis
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor) GetApplyPolicy() *Bgp_Neighbors_Neighbor_ApplyPolicy {
	if x != nil {
		return x.ApplyPolicy
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor) GetAsPathOptions() *Bgp_Neighbors_Neighbor_AsPathOptions {
	if x != nil {
		return x.AsPathOptions
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor) GetConfig() *Bgp_Neighbors_Neighbor_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor) GetEbgpMultihop() *Bgp_Neighbors_Neighbor_EbgpMultihop {
	if x != nil {
		return x.EbgpMultihop
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor) GetErrorHandling() *Bgp_Neighbors_Neighbor_ErrorHandling {
	if x != nil {
		return x.ErrorHandling
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor) GetGracefulRestart() *Bgp_Neighbors_Neighbor_GracefulRestart {
	if x != nil {
		return x.GracefulRestart
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor) GetLoggingOptions() *Bgp_Neighbors_Neighbor_LoggingOptions {
	if x != nil {
		return x.LoggingOptions
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor) GetRouteReflector() *Bgp_Neighbors_Neighbor_RouteReflector {
	if x != nil {
		return x.RouteReflector
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor) GetState() *Bgp_Neighbors_Neighbor_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor) GetTimers() *Bgp_Neighbors_Neighbor_Timers {
	if x != nil {
		return x.Timers
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor) GetTransport() *Bgp_Neighbors_Neighbor_Transport {
	if x != nil {
		return x.Transport
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor) GetUseMultiplePaths() *Bgp_Neighbors_Neighbor_UseMultiplePaths {
	if x != nil {
		return x.UseMultiplePaths
	}
	return nil
}

type Bgp_Neighbors_NeighborKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NeighborAddress string                  `protobuf:"bytes,1,opt,name=neighbor_address,json=neighborAddress,proto3" json:"neighbor_address,omitempty"`
	Neighbor        *Bgp_Neighbors_Neighbor `protobuf:"bytes,2,opt,name=neighbor,proto3" json:"neighbor,omitempty"`
}

func (x *Bgp_Neighbors_NeighborKey) Reset() {
	*x = Bgp_Neighbors_NeighborKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_NeighborKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_NeighborKey) ProtoMessage() {}

func (x *Bgp_Neighbors_NeighborKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_NeighborKey.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_NeighborKey) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 1}
}

func (x *Bgp_Neighbors_NeighborKey) GetNeighborAddress() string {
	if x != nil {
		return x.NeighborAddress
	}
	return ""
}

func (x *Bgp_Neighbors_NeighborKey) GetNeighbor() *Bgp_Neighbors_Neighbor {
	if x != nil {
		return x.Neighbor
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AfiSafis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AfiSafi []*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafiKey `protobuf:"bytes,532455378,rep,name=afi_safi,json=afiSafi,proto3" json:"afi_safi,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis) Reset() {
	*x = Bgp_Neighbors_Neighbor_AfiSafis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AfiSafis) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_AfiSafis) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AfiSafis.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AfiSafis) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis) GetAfiSafi() []*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafiKey {
	if x != nil {
		return x.AfiSafi
	}
	return nil
}

type Bgp_Neighbors_Neighbor_ApplyPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_Neighbors_Neighbor_ApplyPolicy_Config `protobuf:"bytes,308554336,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_Neighbors_Neighbor_ApplyPolicy_State  `protobuf:"bytes,411648473,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_ApplyPolicy) Reset() {
	*x = Bgp_Neighbors_Neighbor_ApplyPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_ApplyPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_ApplyPolicy) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_ApplyPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_ApplyPolicy.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_ApplyPolicy) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 1}
}

func (x *Bgp_Neighbors_Neighbor_ApplyPolicy) GetConfig() *Bgp_Neighbors_Neighbor_ApplyPolicy_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_ApplyPolicy) GetState() *Bgp_Neighbors_Neighbor_ApplyPolicy_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AsPathOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_Neighbors_Neighbor_AsPathOptions_Config `protobuf:"bytes,347522118,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_Neighbors_Neighbor_AsPathOptions_State  `protobuf:"bytes,342987571,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AsPathOptions) Reset() {
	*x = Bgp_Neighbors_Neighbor_AsPathOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AsPathOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AsPathOptions) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_AsPathOptions) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AsPathOptions.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AsPathOptions) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 2}
}

func (x *Bgp_Neighbors_Neighbor_AsPathOptions) GetConfig() *Bgp_Neighbors_Neighbor_AsPathOptions_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AsPathOptions) GetState() *Bgp_Neighbors_Neighbor_AsPathOptions_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Neighbors_Neighbor_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthPassword     *ywrapper.StringValue              `protobuf:"bytes,259690051,opt,name=auth_password,json=authPassword,proto3" json:"auth_password,omitempty"`
	Description      *ywrapper.StringValue              `protobuf:"bytes,182196301,opt,name=description,proto3" json:"description,omitempty"`
	Enabled          *ywrapper.BoolValue                `protobuf:"bytes,370577192,opt,name=enabled,proto3" json:"enabled,omitempty"`
	LocalAs          *ywrapper.UintValue                `protobuf:"bytes,483897751,opt,name=local_as,json=localAs,proto3" json:"local_as,omitempty"`
	NeighborAddress  *ywrapper.StringValue              `protobuf:"bytes,8750064,opt,name=neighbor_address,json=neighborAddress,proto3" json:"neighbor_address,omitempty"`
	PeerAs           *ywrapper.UintValue                `protobuf:"bytes,372370194,opt,name=peer_as,json=peerAs,proto3" json:"peer_as,omitempty"`
	PeerGroup        *ywrapper.StringValue              `protobuf:"bytes,33447967,opt,name=peer_group,json=peerGroup,proto3" json:"peer_group,omitempty"`
	PeerType         OpenconfigBgpPeerType              `protobuf:"varint,349737534,opt,name=peer_type,json=peerType,proto3,enum=openconfig.OpenconfigBgpPeerType" json:"peer_type,omitempty"`
	RemovePrivateAs  OpenconfigBgpRemovePrivateAsOption `protobuf:"varint,398205640,opt,name=remove_private_as,json=removePrivateAs,proto3,enum=openconfig.OpenconfigBgpRemovePrivateAsOption" json:"remove_private_as,omitempty"`
	RouteFlapDamping *ywrapper.BoolValue                `protobuf:"bytes,99926845,opt,name=route_flap_damping,json=routeFlapDamping,proto3" json:"route_flap_damping,omitempty"`
	SendCommunity    OpenconfigBgpCommunityType         `protobuf:"varint,275620911,opt,name=send_community,json=sendCommunity,proto3,enum=openconfig.OpenconfigBgpCommunityType" json:"send_community,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_Config) Reset() {
	*x = Bgp_Neighbors_Neighbor_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_Config) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_Config.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 3}
}

func (x *Bgp_Neighbors_Neighbor_Config) GetAuthPassword() *ywrapper.StringValue {
	if x != nil {
		return x.AuthPassword
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_Config) GetDescription() *ywrapper.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_Config) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_Config) GetLocalAs() *ywrapper.UintValue {
	if x != nil {
		return x.LocalAs
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_Config) GetNeighborAddress() *ywrapper.StringValue {
	if x != nil {
		return x.NeighborAddress
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_Config) GetPeerAs() *ywrapper.UintValue {
	if x != nil {
		return x.PeerAs
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_Config) GetPeerGroup() *ywrapper.StringValue {
	if x != nil {
		return x.PeerGroup
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_Config) GetPeerType() OpenconfigBgpPeerType {
	if x != nil {
		return x.PeerType
	}
	return OpenconfigBgpPeerType_OPENCONFIGBGPPEERTYPE_UNSET
}

func (x *Bgp_Neighbors_Neighbor_Config) GetRemovePrivateAs() OpenconfigBgpRemovePrivateAsOption {
	if x != nil {
		return x.RemovePrivateAs
	}
	return OpenconfigBgpRemovePrivateAsOption_OPENCONFIGBGPREMOVEPRIVATEASOPTION_UNSET
}

func (x *Bgp_Neighbors_Neighbor_Config) GetRouteFlapDamping() *ywrapper.BoolValue {
	if x != nil {
		return x.RouteFlapDamping
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_Config) GetSendCommunity() OpenconfigBgpCommunityType {
	if x != nil {
		return x.SendCommunity
	}
	return OpenconfigBgpCommunityType_OPENCONFIGBGPCOMMUNITYTYPE_NONE
}

type Bgp_Neighbors_Neighbor_EbgpMultihop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_Neighbors_Neighbor_EbgpMultihop_Config `protobuf:"bytes,367010810,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_Neighbors_Neighbor_EbgpMultihop_State  `protobuf:"bytes,206939671,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_EbgpMultihop) Reset() {
	*x = Bgp_Neighbors_Neighbor_EbgpMultihop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_EbgpMultihop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_EbgpMultihop) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_EbgpMultihop) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_EbgpMultihop.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_EbgpMultihop) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 4}
}

func (x *Bgp_Neighbors_Neighbor_EbgpMultihop) GetConfig() *Bgp_Neighbors_Neighbor_EbgpMultihop_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_EbgpMultihop) GetState() *Bgp_Neighbors_Neighbor_EbgpMultihop_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Neighbors_Neighbor_ErrorHandling struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_Neighbors_Neighbor_ErrorHandling_Config `protobuf:"bytes,439565741,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_Neighbors_Neighbor_ErrorHandling_State  `protobuf:"bytes,7418210,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_ErrorHandling) Reset() {
	*x = Bgp_Neighbors_Neighbor_ErrorHandling{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_ErrorHandling) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_ErrorHandling) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_ErrorHandling) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_ErrorHandling.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_ErrorHandling) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 5}
}

func (x *Bgp_Neighbors_Neighbor_ErrorHandling) GetConfig() *Bgp_Neighbors_Neighbor_ErrorHandling_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_ErrorHandling) GetState() *Bgp_Neighbors_Neighbor_ErrorHandling_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Neighbors_Neighbor_GracefulRestart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_Neighbors_Neighbor_GracefulRestart_Config `protobuf:"bytes,434295936,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_Neighbors_Neighbor_GracefulRestart_State  `protobuf:"bytes,94621305,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_GracefulRestart) Reset() {
	*x = Bgp_Neighbors_Neighbor_GracefulRestart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_GracefulRestart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_GracefulRestart) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_GracefulRestart) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_GracefulRestart.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_GracefulRestart) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 6}
}

func (x *Bgp_Neighbors_Neighbor_GracefulRestart) GetConfig() *Bgp_Neighbors_Neighbor_GracefulRestart_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_GracefulRestart) GetState() *Bgp_Neighbors_Neighbor_GracefulRestart_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Neighbors_Neighbor_LoggingOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_Neighbors_Neighbor_LoggingOptions_Config `protobuf:"bytes,142848327,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_Neighbors_Neighbor_LoggingOptions_State  `protobuf:"bytes,259859128,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_LoggingOptions) Reset() {
	*x = Bgp_Neighbors_Neighbor_LoggingOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_LoggingOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_LoggingOptions) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_LoggingOptions) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_LoggingOptions.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_LoggingOptions) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 7}
}

func (x *Bgp_Neighbors_Neighbor_LoggingOptions) GetConfig() *Bgp_Neighbors_Neighbor_LoggingOptions_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_LoggingOptions) GetState() *Bgp_Neighbors_Neighbor_LoggingOptions_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Neighbors_Neighbor_RouteReflector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_Neighbors_Neighbor_RouteReflector_Config `protobuf:"bytes,32490593,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_Neighbors_Neighbor_RouteReflector_State  `protobuf:"bytes,283576662,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_RouteReflector) Reset() {
	*x = Bgp_Neighbors_Neighbor_RouteReflector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_RouteReflector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_RouteReflector) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_RouteReflector) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_RouteReflector.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_RouteReflector) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 8}
}

func (x *Bgp_Neighbors_Neighbor_RouteReflector) GetConfig() *Bgp_Neighbors_Neighbor_RouteReflector_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_RouteReflector) GetState() *Bgp_Neighbors_Neighbor_RouteReflector_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Neighbors_Neighbor_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthPassword           *ywrapper.StringValue                     `protobuf:"bytes,89329982,opt,name=auth_password,json=authPassword,proto3" json:"auth_password,omitempty"`
	Description            *ywrapper.StringValue                     `protobuf:"bytes,18615232,opt,name=description,proto3" json:"description,omitempty"`
	DynamicallyConfigured  *ywrapper.BoolValue                       `protobuf:"bytes,286672664,opt,name=dynamically_configured,json=dynamicallyConfigured,proto3" json:"dynamically_configured,omitempty"`
	Enabled                *ywrapper.BoolValue                       `protobuf:"bytes,494968441,opt,name=enabled,proto3" json:"enabled,omitempty"`
	EstablishedTransitions *ywrapper.UintValue                       `protobuf:"bytes,420048367,opt,name=established_transitions,json=establishedTransitions,proto3" json:"established_transitions,omitempty"`
	LastEstablished        *ywrapper.UintValue                       `protobuf:"bytes,33067575,opt,name=last_established,json=lastEstablished,proto3" json:"last_established,omitempty"`
	LocalAs                *ywrapper.UintValue                       `protobuf:"bytes,296832776,opt,name=local_as,json=localAs,proto3" json:"local_as,omitempty"`
	Messages               *Bgp_Neighbors_Neighbor_State_Messages    `protobuf:"bytes,94006862,opt,name=messages,proto3" json:"messages,omitempty"`
	NeighborAddress        *ywrapper.StringValue                     `protobuf:"bytes,359688595,opt,name=neighbor_address,json=neighborAddress,proto3" json:"neighbor_address,omitempty"`
	PeerAs                 *ywrapper.UintValue                       `protobuf:"bytes,470288859,opt,name=peer_as,json=peerAs,proto3" json:"peer_as,omitempty"`
	PeerGroup              *ywrapper.StringValue                     `protobuf:"bytes,44794480,opt,name=peer_group,json=peerGroup,proto3" json:"peer_group,omitempty"`
	PeerType               OpenconfigBgpPeerType                     `protobuf:"varint,484849803,opt,name=peer_type,json=peerType,proto3,enum=openconfig.OpenconfigBgpPeerType" json:"peer_type,omitempty"`
	Queues                 *Bgp_Neighbors_Neighbor_State_Queues      `protobuf:"bytes,461901050,opt,name=queues,proto3" json:"queues,omitempty"`
	RemovePrivateAs        OpenconfigBgpRemovePrivateAsOption        `protobuf:"varint,137057781,opt,name=remove_private_as,json=removePrivateAs,proto3,enum=openconfig.OpenconfigBgpRemovePrivateAsOption" json:"remove_private_as,omitempty"`
	RouteFlapDamping       *ywrapper.BoolValue                       `protobuf:"bytes,39287098,opt,name=route_flap_damping,json=routeFlapDamping,proto3" json:"route_flap_damping,omitempty"`
	SendCommunity          OpenconfigBgpCommunityType                `protobuf:"varint,394745828,opt,name=send_community,json=sendCommunity,proto3,enum=openconfig.OpenconfigBgpCommunityType" json:"send_community,omitempty"`
	SessionState           Bgp_Neighbors_Neighbor_State_SessionState `protobuf:"varint,163364602,opt,name=session_state,json=sessionState,proto3,enum=openconfig.Bgp_Neighbors_Neighbor_State_SessionState" json:"session_state,omitempty"`
	SupportedCapabilities  []OpenconfigBgpTypesBGPCAPABILITY         `protobuf:"varint,97926115,rep,packed,name=supported_capabilities,json=supportedCapabilities,proto3,enum=openconfig.OpenconfigBgpTypesBGPCAPABILITY" json:"supported_capabilities,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_State) Reset() {
	*x = Bgp_Neighbors_Neighbor_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_State) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_State.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 9}
}

func (x *Bgp_Neighbors_Neighbor_State) GetAuthPassword() *ywrapper.StringValue {
	if x != nil {
		return x.AuthPassword
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_State) GetDescription() *ywrapper.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_State) GetDynamicallyConfigured() *ywrapper.BoolValue {
	if x != nil {
		return x.DynamicallyConfigured
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_State) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_State) GetEstablishedTransitions() *ywrapper.UintValue {
	if x != nil {
		return x.EstablishedTransitions
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_State) GetLastEstablished() *ywrapper.UintValue {
	if x != nil {
		return x.LastEstablished
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_State) GetLocalAs() *ywrapper.UintValue {
	if x != nil {
		return x.LocalAs
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_State) GetMessages() *Bgp_Neighbors_Neighbor_State_Messages {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_State) GetNeighborAddress() *ywrapper.StringValue {
	if x != nil {
		return x.NeighborAddress
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_State) GetPeerAs() *ywrapper.UintValue {
	if x != nil {
		return x.PeerAs
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_State) GetPeerGroup() *ywrapper.StringValue {
	if x != nil {
		return x.PeerGroup
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_State) GetPeerType() OpenconfigBgpPeerType {
	if x != nil {
		return x.PeerType
	}
	return OpenconfigBgpPeerType_OPENCONFIGBGPPEERTYPE_UNSET
}

func (x *Bgp_Neighbors_Neighbor_State) GetQueues() *Bgp_Neighbors_Neighbor_State_Queues {
	if x != nil {
		return x.Queues
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_State) GetRemovePrivateAs() OpenconfigBgpRemovePrivateAsOption {
	if x != nil {
		return x.RemovePrivateAs
	}
	return OpenconfigBgpRemovePrivateAsOption_OPENCONFIGBGPREMOVEPRIVATEASOPTION_UNSET
}

func (x *Bgp_Neighbors_Neighbor_State) GetRouteFlapDamping() *ywrapper.BoolValue {
	if x != nil {
		return x.RouteFlapDamping
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_State) GetSendCommunity() OpenconfigBgpCommunityType {
	if x != nil {
		return x.SendCommunity
	}
	return OpenconfigBgpCommunityType_OPENCONFIGBGPCOMMUNITYTYPE_NONE
}

func (x *Bgp_Neighbors_Neighbor_State) GetSessionState() Bgp_Neighbors_Neighbor_State_SessionState {
	if x != nil {
		return x.SessionState
	}
	return Bgp_Neighbors_Neighbor_State_SESSIONSTATE_UNSET
}

func (x *Bgp_Neighbors_Neighbor_State) GetSupportedCapabilities() []OpenconfigBgpTypesBGPCAPABILITY {
	if x != nil {
		return x.SupportedCapabilities
	}
	return nil
}

type Bgp_Neighbors_Neighbor_Timers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_Neighbors_Neighbor_Timers_Config `protobuf:"bytes,331628595,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_Neighbors_Neighbor_Timers_State  `protobuf:"bytes,337332628,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_Timers) Reset() {
	*x = Bgp_Neighbors_Neighbor_Timers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_Timers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_Timers) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_Timers) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_Timers.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_Timers) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 10}
}

func (x *Bgp_Neighbors_Neighbor_Timers) GetConfig() *Bgp_Neighbors_Neighbor_Timers_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_Timers) GetState() *Bgp_Neighbors_Neighbor_Timers_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Neighbors_Neighbor_Transport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_Neighbors_Neighbor_Transport_Config `protobuf:"bytes,14623096,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_Neighbors_Neighbor_Transport_State  `protobuf:"bytes,60362897,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_Transport) Reset() {
	*x = Bgp_Neighbors_Neighbor_Transport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_Transport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_Transport) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_Transport) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_Transport.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_Transport) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 11}
}

func (x *Bgp_Neighbors_Neighbor_Transport) GetConfig() *Bgp_Neighbors_Neighbor_Transport_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_Transport) GetState() *Bgp_Neighbors_Neighbor_Transport_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Neighbors_Neighbor_UseMultiplePaths struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_Neighbors_Neighbor_UseMultiplePaths_Config `protobuf:"bytes,279272494,opt,name=config,proto3" json:"config,omitempty"`
	Ebgp   *Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp   `protobuf:"bytes,520261828,opt,name=ebgp,proto3" json:"ebgp,omitempty"`
	State  *Bgp_Neighbors_Neighbor_UseMultiplePaths_State  `protobuf:"bytes,51957339,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_UseMultiplePaths) Reset() {
	*x = Bgp_Neighbors_Neighbor_UseMultiplePaths{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_UseMultiplePaths) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_UseMultiplePaths) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_UseMultiplePaths) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_UseMultiplePaths.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_UseMultiplePaths) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 12}
}

func (x *Bgp_Neighbors_Neighbor_UseMultiplePaths) GetConfig() *Bgp_Neighbors_Neighbor_UseMultiplePaths_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_UseMultiplePaths) GetEbgp() *Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp {
	if x != nil {
		return x.Ebgp
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_UseMultiplePaths) GetState() *Bgp_Neighbors_Neighbor_UseMultiplePaths_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddPaths           *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_AddPaths           `protobuf:"bytes,19355281,opt,name=add_paths,json=addPaths,proto3" json:"add_paths,omitempty"`
	ApplyPolicy        *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy        `protobuf:"bytes,496304702,opt,name=apply_policy,json=applyPolicy,proto3" json:"apply_policy,omitempty"`
	Config             *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Config             `protobuf:"bytes,57988499,opt,name=config,proto3" json:"config,omitempty"`
	GracefulRestart    *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart    `protobuf:"bytes,389617318,opt,name=graceful_restart,json=gracefulRestart,proto3" json:"graceful_restart,omitempty"`
	Ipv4LabeledUnicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast `protobuf:"bytes,49287394,opt,name=ipv4_labeled_unicast,json=ipv4LabeledUnicast,proto3" json:"ipv4_labeled_unicast,omitempty"`
	Ipv4Unicast        *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast        `protobuf:"bytes,434310012,opt,name=ipv4_unicast,json=ipv4Unicast,proto3" json:"ipv4_unicast,omitempty"`
	Ipv6LabeledUnicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast `protobuf:"bytes,81353084,opt,name=ipv6_labeled_unicast,json=ipv6LabeledUnicast,proto3" json:"ipv6_labeled_unicast,omitempty"`
	Ipv6Unicast        *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast        `protobuf:"bytes,85144458,opt,name=ipv6_unicast,json=ipv6Unicast,proto3" json:"ipv6_unicast,omitempty"`
	L2VpnEvpn          *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn          `protobuf:"bytes,285812441,opt,name=l2vpn_evpn,json=l2vpnEvpn,proto3" json:"l2vpn_evpn,omitempty"`
	L2VpnVpls          *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls          `protobuf:"bytes,447844183,opt,name=l2vpn_vpls,json=l2vpnVpls,proto3" json:"l2vpn_vpls,omitempty"`
	L3VpnIpv4Multicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast `protobuf:"bytes,97617091,opt,name=l3vpn_ipv4_multicast,json=l3vpnIpv4Multicast,proto3" json:"l3vpn_ipv4_multicast,omitempty"`
	L3VpnIpv4Unicast   *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast   `protobuf:"bytes,433677286,opt,name=l3vpn_ipv4_unicast,json=l3vpnIpv4Unicast,proto3" json:"l3vpn_ipv4_unicast,omitempty"`
	L3VpnIpv6Multicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast `protobuf:"bytes,76929209,opt,name=l3vpn_ipv6_multicast,json=l3vpnIpv6Multicast,proto3" json:"l3vpn_ipv6_multicast,omitempty"`
	L3VpnIpv6Unicast   *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast   `protobuf:"bytes,153168968,opt,name=l3vpn_ipv6_unicast,json=l3vpnIpv6Unicast,proto3" json:"l3vpn_ipv6_unicast,omitempty"`
	SrtePolicyIpv4     *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv4     `protobuf:"bytes,474452582,opt,name=srte_policy_ipv4,json=srtePolicyIpv4,proto3" json:"srte_policy_ipv4,omitempty"`
	SrtePolicyIpv6     *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv6     `protobuf:"bytes,474452580,opt,name=srte_policy_ipv6,json=srtePolicyIpv6,proto3" json:"srte_policy_ipv6,omitempty"`
	State              *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State              `protobuf:"bytes,42959988,opt,name=state,proto3" json:"state,omitempty"`
	UseMultiplePaths   *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths   `protobuf:"bytes,77488336,opt,name=use_multiple_paths,json=useMultiplePaths,proto3" json:"use_multiple_paths,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi) Reset() {
	*x = Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi) GetAddPaths() *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_AddPaths {
	if x != nil {
		return x.AddPaths
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi) GetApplyPolicy() *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy {
	if x != nil {
		return x.ApplyPolicy
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi) GetConfig() *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi) GetGracefulRestart() *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart {
	if x != nil {
		return x.GracefulRestart
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi) GetIpv4LabeledUnicast() *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast {
	if x != nil {
		return x.Ipv4LabeledUnicast
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi) GetIpv4Unicast() *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast {
	if x != nil {
		return x.Ipv4Unicast
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi) GetIpv6LabeledUnicast() *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast {
	if x != nil {
		return x.Ipv6LabeledUnicast
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi) GetIpv6Unicast() *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast {
	if x != nil {
		return x.Ipv6Unicast
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi) GetL2VpnEvpn() *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn {
	if x != nil {
		return x.L2VpnEvpn
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi) GetL2VpnVpls() *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls {
	if x != nil {
		return x.L2VpnVpls
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi) GetL3VpnIpv4Multicast() *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast {
	if x != nil {
		return x.L3VpnIpv4Multicast
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi) GetL3VpnIpv4Unicast() *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast {
	if x != nil {
		return x.L3VpnIpv4Unicast
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi) GetL3VpnIpv6Multicast() *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast {
	if x != nil {
		return x.L3VpnIpv6Multicast
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi) GetL3VpnIpv6Unicast() *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast {
	if x != nil {
		return x.L3VpnIpv6Unicast
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi) GetSrtePolicyIpv4() *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv4 {
	if x != nil {
		return x.SrtePolicyIpv4
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi) GetSrtePolicyIpv6() *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv6 {
	if x != nil {
		return x.SrtePolicyIpv6
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi) GetState() *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi) GetUseMultiplePaths() *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths {
	if x != nil {
		return x.UseMultiplePaths
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafiKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AfiSafiName OpenconfigBgpTypesAFISAFITYPE            `protobuf:"varint,1,opt,name=afi_safi_name,json=afiSafiName,proto3,enum=openconfig.OpenconfigBgpTypesAFISAFITYPE" json:"afi_safi_name,omitempty"`
	AfiSafi     *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi `protobuf:"bytes,2,opt,name=afi_safi,json=afiSafi,proto3" json:"afi_safi,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafiKey) Reset() {
	*x = Bgp_Neighbors_Neighbor_AfiSafis_AfiSafiKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafiKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafiKey) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafiKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AfiSafis_AfiSafiKey.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafiKey) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0, 1}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafiKey) GetAfiSafiName() OpenconfigBgpTypesAFISAFITYPE {
	if x != nil {
		return x.AfiSafiName
	}
	return OpenconfigBgpTypesAFISAFITYPE_OPENCONFIGBGPTYPESAFISAFITYPE_UNSET
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafiKey) GetAfiSafi() *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi {
	if x != nil {
		return x.AfiSafi
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_AddPaths struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_AddPaths_Config `protobuf:"bytes,267004214,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_AddPaths_State  `protobuf:"bytes,13356643,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_AddPaths) Reset() {
	*x = Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_AddPaths{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_AddPaths) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_AddPaths) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_AddPaths) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_AddPaths.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_AddPaths) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 0}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_AddPaths) GetConfig() *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_AddPaths_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_AddPaths) GetState() *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_AddPaths_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_Config `protobuf:"bytes,512643983,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_State  `protobuf:"bytes,231332736,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy) Reset() {
	*x = Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 1}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy) GetConfig() *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy) GetState() *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AfiSafiName OpenconfigBgpTypesAFISAFITYPE `protobuf:"varint,461621674,opt,name=afi_safi_name,json=afiSafiName,proto3,enum=openconfig.OpenconfigBgpTypesAFISAFITYPE" json:"afi_safi_name,omitempty"`
	Enabled     *ywrapper.BoolValue           `protobuf:"bytes,169959973,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Config) Reset() {
	*x = Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Config) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Config.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 2}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Config) GetAfiSafiName() OpenconfigBgpTypesAFISAFITYPE {
	if x != nil {
		return x.AfiSafiName
	}
	return OpenconfigBgpTypesAFISAFITYPE_OPENCONFIGBGPTYPESAFISAFITYPE_UNSET
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Config) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_Config `protobuf:"bytes,180369447,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_State  `protobuf:"bytes,361198360,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart) Reset() {
	*x = Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 3}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart) GetConfig() *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart) GetState() *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit `protobuf:"bytes,92043799,opt,name=prefix_limit,json=prefixLimit,proto3" json:"prefix_limit,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast) Reset() {
	*x = Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 4}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast) GetPrefixLimit() *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit {
	if x != nil {
		return x.PrefixLimit
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config      *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_Config      `protobuf:"bytes,352364881,opt,name=config,proto3" json:"config,omitempty"`
	PrefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit `protobuf:"bytes,116432057,opt,name=prefix_limit,json=prefixLimit,proto3" json:"prefix_limit,omitempty"`
	State       *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_State       `protobuf:"bytes,219221574,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast) Reset() {
	*x = Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 5}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast) GetConfig() *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast) GetPrefixLimit() *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit {
	if x != nil {
		return x.PrefixLimit
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast) GetState() *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit `protobuf:"bytes,208881337,opt,name=prefix_limit,json=prefixLimit,proto3" json:"prefix_limit,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast) Reset() {
	*x = Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 6}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast) GetPrefixLimit() *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit {
	if x != nil {
		return x.PrefixLimit
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config      *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_Config      `protobuf:"bytes,11332315,opt,name=config,proto3" json:"config,omitempty"`
	PrefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit `protobuf:"bytes,55955567,opt,name=prefix_limit,json=prefixLimit,proto3" json:"prefix_limit,omitempty"`
	State       *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_State       `protobuf:"bytes,21998812,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast) Reset() {
	*x = Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 7}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast) GetConfig() *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast) GetPrefixLimit() *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit {
	if x != nil {
		return x.PrefixLimit
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast) GetState() *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit `protobuf:"bytes,444956030,opt,name=prefix_limit,json=prefixLimit,proto3" json:"prefix_limit,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn) Reset() {
	*x = Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 8}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn) GetPrefixLimit() *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit {
	if x != nil {
		return x.PrefixLimit
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit `protobuf:"bytes,285556148,opt,name=prefix_limit,json=prefixLimit,proto3" json:"prefix_limit,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls) Reset() {
	*x = Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 9}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls) GetPrefixLimit() *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit {
	if x != nil {
		return x.PrefixLimit
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit `protobuf:"bytes,458479600,opt,name=prefix_limit,json=prefixLimit,proto3" json:"prefix_limit,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast) Reset() {
	*x = Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 10}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast) GetPrefixLimit() *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit {
	if x != nil {
		return x.PrefixLimit
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit `protobuf:"bytes,39188347,opt,name=prefix_limit,json=prefixLimit,proto3" json:"prefix_limit,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast) Reset() {
	*x = Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 11}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast) GetPrefixLimit() *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit {
	if x != nil {
		return x.PrefixLimit
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit `protobuf:"bytes,462890462,opt,name=prefix_limit,json=prefixLimit,proto3" json:"prefix_limit,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast) Reset() {
	*x = Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 12}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast) GetPrefixLimit() *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit {
	if x != nil {
		return x.PrefixLimit
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit `protobuf:"bytes,386116357,opt,name=prefix_limit,json=prefixLimit,proto3" json:"prefix_limit,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast) Reset() {
	*x = Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 13}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast) GetPrefixLimit() *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit {
	if x != nil {
		return x.PrefixLimit
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv4 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit `protobuf:"bytes,199938811,opt,name=prefix_limit,json=prefixLimit,proto3" json:"prefix_limit,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv4) Reset() {
	*x = Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv4{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv4) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv4) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv4.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv4) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 14}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv4) GetPrefixLimit() *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit {
	if x != nil {
		return x.PrefixLimit
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv6 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit `protobuf:"bytes,419010673,opt,name=prefix_limit,json=prefixLimit,proto3" json:"prefix_limit,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv6) Reset() {
	*x = Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv6{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv6) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv6) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv6) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv6.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv6) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 15}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv6) GetPrefixLimit() *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit {
	if x != nil {
		return x.PrefixLimit
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Active      *ywrapper.BoolValue                                     `protobuf:"bytes,229443049,opt,name=active,proto3" json:"active,omitempty"`
	AfiSafiName OpenconfigBgpTypesAFISAFITYPE                           `protobuf:"varint,247818881,opt,name=afi_safi_name,json=afiSafiName,proto3,enum=openconfig.OpenconfigBgpTypesAFISAFITYPE" json:"afi_safi_name,omitempty"`
	Enabled     *ywrapper.BoolValue                                     `protobuf:"bytes,527024150,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Prefixes    *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State_Prefixes `protobuf:"bytes,267641211,opt,name=prefixes,proto3" json:"prefixes,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State) Reset() {
	*x = Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 16}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State) GetActive() *ywrapper.BoolValue {
	if x != nil {
		return x.Active
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State) GetAfiSafiName() OpenconfigBgpTypesAFISAFITYPE {
	if x != nil {
		return x.AfiSafiName
	}
	return OpenconfigBgpTypesAFISAFITYPE_OPENCONFIGBGPTYPESAFISAFITYPE_UNSET
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State) GetPrefixes() *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State_Prefixes {
	if x != nil {
		return x.Prefixes
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Config `protobuf:"bytes,393693029,opt,name=config,proto3" json:"config,omitempty"`
	Ebgp   *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp   `protobuf:"bytes,160654875,opt,name=ebgp,proto3" json:"ebgp,omitempty"`
	State  *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_State  `protobuf:"bytes,241068506,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths) Reset() {
	*x = Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 17}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths) GetConfig() *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths) GetEbgp() *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp {
	if x != nil {
		return x.Ebgp
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths) GetState() *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_AddPaths_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EligiblePrefixPolicy *ywrapper.StringValue `protobuf:"bytes,76763050,opt,name=eligible_prefix_policy,json=eligiblePrefixPolicy,proto3" json:"eligible_prefix_policy,omitempty"`
	Receive              *ywrapper.BoolValue   `protobuf:"bytes,534076260,opt,name=receive,proto3" json:"receive,omitempty"`
	Send                 *ywrapper.BoolValue   `protobuf:"bytes,247823163,opt,name=send,proto3" json:"send,omitempty"`
	SendMax              *ywrapper.UintValue   `protobuf:"bytes,117643078,opt,name=send_max,json=sendMax,proto3" json:"send_max,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_AddPaths_Config) Reset() {
	*x = Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_AddPaths_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_AddPaths_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_AddPaths_Config) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_AddPaths_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_AddPaths_Config.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_AddPaths_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 0, 0}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_AddPaths_Config) GetEligiblePrefixPolicy() *ywrapper.StringValue {
	if x != nil {
		return x.EligiblePrefixPolicy
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_AddPaths_Config) GetReceive() *ywrapper.BoolValue {
	if x != nil {
		return x.Receive
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_AddPaths_Config) GetSend() *ywrapper.BoolValue {
	if x != nil {
		return x.Send
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_AddPaths_Config) GetSendMax() *ywrapper.UintValue {
	if x != nil {
		return x.SendMax
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_AddPaths_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EligiblePrefixPolicy *ywrapper.StringValue `protobuf:"bytes,483989213,opt,name=eligible_prefix_policy,json=eligiblePrefixPolicy,proto3" json:"eligible_prefix_policy,omitempty"`
	Receive              *ywrapper.BoolValue   `protobuf:"bytes,518397517,opt,name=receive,proto3" json:"receive,omitempty"`
	Send                 *ywrapper.BoolValue   `protobuf:"bytes,437839280,opt,name=send,proto3" json:"send,omitempty"`
	SendMax              *ywrapper.UintValue   `protobuf:"bytes,418396885,opt,name=send_max,json=sendMax,proto3" json:"send_max,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_AddPaths_State) Reset() {
	*x = Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_AddPaths_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_AddPaths_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_AddPaths_State) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_AddPaths_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_AddPaths_State.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_AddPaths_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 0, 1}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_AddPaths_State) GetEligiblePrefixPolicy() *ywrapper.StringValue {
	if x != nil {
		return x.EligiblePrefixPolicy
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_AddPaths_State) GetReceive() *ywrapper.BoolValue {
	if x != nil {
		return x.Receive
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_AddPaths_State) GetSend() *ywrapper.BoolValue {
	if x != nil {
		return x.Send
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_AddPaths_State) GetSendMax() *ywrapper.UintValue {
	if x != nil {
		return x.SendMax
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultExportPolicy OpenconfigRoutingPolicyDefaultPolicyType `protobuf:"varint,527449075,opt,name=default_export_policy,json=defaultExportPolicy,proto3,enum=openconfig.OpenconfigRoutingPolicyDefaultPolicyType" json:"default_export_policy,omitempty"`
	DefaultImportPolicy OpenconfigRoutingPolicyDefaultPolicyType `protobuf:"varint,358611432,opt,name=default_import_policy,json=defaultImportPolicy,proto3,enum=openconfig.OpenconfigRoutingPolicyDefaultPolicyType" json:"default_import_policy,omitempty"`
	ExportPolicy        []*ywrapper.StringValue                  `protobuf:"bytes,164216103,rep,name=export_policy,json=exportPolicy,proto3" json:"export_policy,omitempty"`
	ImportPolicy        []*ywrapper.StringValue                  `protobuf:"bytes,300038412,rep,name=import_policy,json=importPolicy,proto3" json:"import_policy,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_Config) Reset() {
	*x = Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_Config) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_Config.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 1, 0}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_Config) GetDefaultExportPolicy() OpenconfigRoutingPolicyDefaultPolicyType {
	if x != nil {
		return x.DefaultExportPolicy
	}
	return OpenconfigRoutingPolicyDefaultPolicyType_OPENCONFIGROUTINGPOLICYDEFAULTPOLICYTYPE_REJECT_ROUTE
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_Config) GetDefaultImportPolicy() OpenconfigRoutingPolicyDefaultPolicyType {
	if x != nil {
		return x.DefaultImportPolicy
	}
	return OpenconfigRoutingPolicyDefaultPolicyType_OPENCONFIGROUTINGPOLICYDEFAULTPOLICYTYPE_REJECT_ROUTE
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_Config) GetExportPolicy() []*ywrapper.StringValue {
	if x != nil {
		return x.ExportPolicy
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_Config) GetImportPolicy() []*ywrapper.StringValue {
	if x != nil {
		return x.ImportPolicy
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultExportPolicy OpenconfigRoutingPolicyDefaultPolicyType `protobuf:"varint,322928912,opt,name=default_export_policy,json=defaultExportPolicy,proto3,enum=openconfig.OpenconfigRoutingPolicyDefaultPolicyType" json:"default_export_policy,omitempty"`
	DefaultImportPolicy OpenconfigRoutingPolicyDefaultPolicyType `protobuf:"varint,465481595,opt,name=default_import_policy,json=defaultImportPolicy,proto3,enum=openconfig.OpenconfigRoutingPolicyDefaultPolicyType" json:"default_import_policy,omitempty"`
	ExportPolicy        []*ywrapper.StringValue                  `protobuf:"bytes,277172572,rep,name=export_policy,json=exportPolicy,proto3" json:"export_policy,omitempty"`
	ImportPolicy        []*ywrapper.StringValue                  `protobuf:"bytes,151207527,rep,name=import_policy,json=importPolicy,proto3" json:"import_policy,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_State) Reset() {
	*x = Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_State) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_State.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 1, 1}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_State) GetDefaultExportPolicy() OpenconfigRoutingPolicyDefaultPolicyType {
	if x != nil {
		return x.DefaultExportPolicy
	}
	return OpenconfigRoutingPolicyDefaultPolicyType_OPENCONFIGROUTINGPOLICYDEFAULTPOLICYTYPE_REJECT_ROUTE
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_State) GetDefaultImportPolicy() OpenconfigRoutingPolicyDefaultPolicyType {
	if x != nil {
		return x.DefaultImportPolicy
	}
	return OpenconfigRoutingPolicyDefaultPolicyType_OPENCONFIGROUTINGPOLICYDEFAULTPOLICYTYPE_REJECT_ROUTE
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_State) GetExportPolicy() []*ywrapper.StringValue {
	if x != nil {
		return x.ExportPolicy
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_State) GetImportPolicy() []*ywrapper.StringValue {
	if x != nil {
		return x.ImportPolicy
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled *ywrapper.BoolValue `protobuf:"bytes,258234041,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_Config) Reset() {
	*x = Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_Config) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_Config.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 3, 0}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_Config) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Advertised *ywrapper.BoolValue `protobuf:"bytes,456677658,opt,name=advertised,proto3" json:"advertised,omitempty"`
	Enabled    *ywrapper.BoolValue `protobuf:"bytes,488285642,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Received   *ywrapper.BoolValue `protobuf:"bytes,119986534,opt,name=received,proto3" json:"received,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_State) Reset() {
	*x = Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_State) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_State.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 3, 1}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_State) GetAdvertised() *ywrapper.BoolValue {
	if x != nil {
		return x.Advertised
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_State) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_State) GetReceived() *ywrapper.BoolValue {
	if x != nil {
		return x.Received
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config `protobuf:"bytes,432132872,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State  `protobuf:"bytes,164678049,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) Reset() {
	*x = Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 4, 0}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) GetConfig() *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) GetState() *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPrefixes         *ywrapper.UintValue      `protobuf:"bytes,402622020,opt,name=max_prefixes,json=maxPrefixes,proto3" json:"max_prefixes,omitempty"`
	PreventTeardown     *ywrapper.BoolValue      `protobuf:"bytes,32283992,opt,name=prevent_teardown,json=preventTeardown,proto3" json:"prevent_teardown,omitempty"`
	RestartTimer        *ywrapper.Decimal64Value `protobuf:"bytes,460764456,opt,name=restart_timer,json=restartTimer,proto3" json:"restart_timer,omitempty"`
	WarningThresholdPct *ywrapper.UintValue      `protobuf:"bytes,35186089,opt,name=warning_threshold_pct,json=warningThresholdPct,proto3" json:"warning_threshold_pct,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) Reset() {
	*x = Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) ProtoMessage() {
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 4, 0, 0}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) GetMaxPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.MaxPrefixes
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) GetPreventTeardown() *ywrapper.BoolValue {
	if x != nil {
		return x.PreventTeardown
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) GetRestartTimer() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RestartTimer
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) GetWarningThresholdPct() *ywrapper.UintValue {
	if x != nil {
		return x.WarningThresholdPct
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPrefixes         *ywrapper.UintValue      `protobuf:"bytes,533744223,opt,name=max_prefixes,json=maxPrefixes,proto3" json:"max_prefixes,omitempty"`
	PreventTeardown     *ywrapper.BoolValue      `protobuf:"bytes,166831951,opt,name=prevent_teardown,json=preventTeardown,proto3" json:"prevent_teardown,omitempty"`
	RestartTimer        *ywrapper.Decimal64Value `protobuf:"bytes,99057005,opt,name=restart_timer,json=restartTimer,proto3" json:"restart_timer,omitempty"`
	WarningThresholdPct *ywrapper.UintValue      `protobuf:"bytes,533834944,opt,name=warning_threshold_pct,json=warningThresholdPct,proto3" json:"warning_threshold_pct,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) Reset() {
	*x = Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 4, 0, 1}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) GetMaxPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.MaxPrefixes
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) GetPreventTeardown() *ywrapper.BoolValue {
	if x != nil {
		return x.PreventTeardown
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) GetRestartTimer() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RestartTimer
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) GetWarningThresholdPct() *ywrapper.UintValue {
	if x != nil {
		return x.WarningThresholdPct
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SendDefaultRoute *ywrapper.BoolValue `protobuf:"bytes,530491054,opt,name=send_default_route,json=sendDefaultRoute,proto3" json:"send_default_route,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_Config) Reset() {
	*x = Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_Config) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_Config.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 5, 0}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_Config) GetSendDefaultRoute() *ywrapper.BoolValue {
	if x != nil {
		return x.SendDefaultRoute
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config `protobuf:"bytes,34267278,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State  `protobuf:"bytes,411373627,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit) Reset() {
	*x = Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 5, 1}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit) GetConfig() *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit) GetState() *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SendDefaultRoute *ywrapper.BoolValue `protobuf:"bytes,265938955,opt,name=send_default_route,json=sendDefaultRoute,proto3" json:"send_default_route,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_State) Reset() {
	*x = Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_State) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_State.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 5, 2}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_State) GetSendDefaultRoute() *ywrapper.BoolValue {
	if x != nil {
		return x.SendDefaultRoute
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPrefixes         *ywrapper.UintValue      `protobuf:"bytes,527590230,opt,name=max_prefixes,json=maxPrefixes,proto3" json:"max_prefixes,omitempty"`
	PreventTeardown     *ywrapper.BoolValue      `protobuf:"bytes,336679706,opt,name=prevent_teardown,json=preventTeardown,proto3" json:"prevent_teardown,omitempty"`
	RestartTimer        *ywrapper.Decimal64Value `protobuf:"bytes,123992522,opt,name=restart_timer,json=restartTimer,proto3" json:"restart_timer,omitempty"`
	WarningThresholdPct *ywrapper.UintValue      `protobuf:"bytes,389650327,opt,name=warning_threshold_pct,json=warningThresholdPct,proto3" json:"warning_threshold_pct,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) Reset() {
	*x = Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 5, 1, 0}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) GetMaxPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.MaxPrefixes
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) GetPreventTeardown() *ywrapper.BoolValue {
	if x != nil {
		return x.PreventTeardown
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) GetRestartTimer() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RestartTimer
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) GetWarningThresholdPct() *ywrapper.UintValue {
	if x != nil {
		return x.WarningThresholdPct
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPrefixes         *ywrapper.UintValue      `protobuf:"bytes,457618981,opt,name=max_prefixes,json=maxPrefixes,proto3" json:"max_prefixes,omitempty"`
	PreventTeardown     *ywrapper.BoolValue      `protobuf:"bytes,385705397,opt,name=prevent_teardown,json=preventTeardown,proto3" json:"prevent_teardown,omitempty"`
	RestartTimer        *ywrapper.Decimal64Value `protobuf:"bytes,248760507,opt,name=restart_timer,json=restartTimer,proto3" json:"restart_timer,omitempty"`
	WarningThresholdPct *ywrapper.UintValue      `protobuf:"bytes,144358242,opt,name=warning_threshold_pct,json=warningThresholdPct,proto3" json:"warning_threshold_pct,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) Reset() {
	*x = Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 5, 1, 1}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) GetMaxPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.MaxPrefixes
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) GetPreventTeardown() *ywrapper.BoolValue {
	if x != nil {
		return x.PreventTeardown
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) GetRestartTimer() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RestartTimer
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) GetWarningThresholdPct() *ywrapper.UintValue {
	if x != nil {
		return x.WarningThresholdPct
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config `protobuf:"bytes,272600718,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State  `protobuf:"bytes,413297211,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) Reset() {
	*x = Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 6, 0}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) GetConfig() *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) GetState() *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPrefixes         *ywrapper.UintValue      `protobuf:"bytes,391916886,opt,name=max_prefixes,json=maxPrefixes,proto3" json:"max_prefixes,omitempty"`
	PreventTeardown     *ywrapper.BoolValue      `protobuf:"bytes,189644058,opt,name=prevent_teardown,json=preventTeardown,proto3" json:"prevent_teardown,omitempty"`
	RestartTimer        *ywrapper.Decimal64Value `protobuf:"bytes,208467914,opt,name=restart_timer,json=restartTimer,proto3" json:"restart_timer,omitempty"`
	WarningThresholdPct *ywrapper.UintValue      `protobuf:"bytes,295982487,opt,name=warning_threshold_pct,json=warningThresholdPct,proto3" json:"warning_threshold_pct,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) Reset() {
	*x = Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) ProtoMessage() {
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 6, 0, 0}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) GetMaxPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.MaxPrefixes
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) GetPreventTeardown() *ywrapper.BoolValue {
	if x != nil {
		return x.PreventTeardown
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) GetRestartTimer() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RestartTimer
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) GetWarningThresholdPct() *ywrapper.UintValue {
	if x != nil {
		return x.WarningThresholdPct
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPrefixes         *ywrapper.UintValue      `protobuf:"bytes,125568037,opt,name=max_prefixes,json=maxPrefixes,proto3" json:"max_prefixes,omitempty"`
	PreventTeardown     *ywrapper.BoolValue      `protobuf:"bytes,213488565,opt,name=prevent_teardown,json=preventTeardown,proto3" json:"prevent_teardown,omitempty"`
	RestartTimer        *ywrapper.Decimal64Value `protobuf:"bytes,113087163,opt,name=restart_timer,json=restartTimer,proto3" json:"restart_timer,omitempty"`
	WarningThresholdPct *ywrapper.UintValue      `protobuf:"bytes,162776418,opt,name=warning_threshold_pct,json=warningThresholdPct,proto3" json:"warning_threshold_pct,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) Reset() {
	*x = Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 6, 0, 1}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) GetMaxPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.MaxPrefixes
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) GetPreventTeardown() *ywrapper.BoolValue {
	if x != nil {
		return x.PreventTeardown
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) GetRestartTimer() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RestartTimer
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) GetWarningThresholdPct() *ywrapper.UintValue {
	if x != nil {
		return x.WarningThresholdPct
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SendDefaultRoute *ywrapper.BoolValue `protobuf:"bytes,270091052,opt,name=send_default_route,json=sendDefaultRoute,proto3" json:"send_default_route,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_Config) Reset() {
	*x = Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_Config) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_Config.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 7, 0}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_Config) GetSendDefaultRoute() *ywrapper.BoolValue {
	if x != nil {
		return x.SendDefaultRoute
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config `protobuf:"bytes,405507664,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State  `protobuf:"bytes,244859977,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit) Reset() {
	*x = Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 7, 1}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit) GetConfig() *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit) GetState() *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SendDefaultRoute *ywrapper.BoolValue `protobuf:"bytes,220499245,opt,name=send_default_route,json=sendDefaultRoute,proto3" json:"send_default_route,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_State) Reset() {
	*x = Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_State) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_State.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 7, 2}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_State) GetSendDefaultRoute() *ywrapper.BoolValue {
	if x != nil {
		return x.SendDefaultRoute
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPrefixes         *ywrapper.UintValue      `protobuf:"bytes,337895516,opt,name=max_prefixes,json=maxPrefixes,proto3" json:"max_prefixes,omitempty"`
	PreventTeardown     *ywrapper.BoolValue      `protobuf:"bytes,435401152,opt,name=prevent_teardown,json=preventTeardown,proto3" json:"prevent_teardown,omitempty"`
	RestartTimer        *ywrapper.Decimal64Value `protobuf:"bytes,251847344,opt,name=restart_timer,json=restartTimer,proto3" json:"restart_timer,omitempty"`
	WarningThresholdPct *ywrapper.UintValue      `protobuf:"bytes,160138737,opt,name=warning_threshold_pct,json=warningThresholdPct,proto3" json:"warning_threshold_pct,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) Reset() {
	*x = Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 7, 1, 0}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) GetMaxPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.MaxPrefixes
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) GetPreventTeardown() *ywrapper.BoolValue {
	if x != nil {
		return x.PreventTeardown
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) GetRestartTimer() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RestartTimer
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) GetWarningThresholdPct() *ywrapper.UintValue {
	if x != nil {
		return x.WarningThresholdPct
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPrefixes         *ywrapper.UintValue      `protobuf:"bytes,393622903,opt,name=max_prefixes,json=maxPrefixes,proto3" json:"max_prefixes,omitempty"`
	PreventTeardown     *ywrapper.BoolValue      `protobuf:"bytes,23210615,opt,name=prevent_teardown,json=preventTeardown,proto3" json:"prevent_teardown,omitempty"`
	RestartTimer        *ywrapper.Decimal64Value `protobuf:"bytes,324871445,opt,name=restart_timer,json=restartTimer,proto3" json:"restart_timer,omitempty"`
	WarningThresholdPct *ywrapper.UintValue      `protobuf:"bytes,207520040,opt,name=warning_threshold_pct,json=warningThresholdPct,proto3" json:"warning_threshold_pct,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) Reset() {
	*x = Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 7, 1, 1}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) GetMaxPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.MaxPrefixes
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) GetPreventTeardown() *ywrapper.BoolValue {
	if x != nil {
		return x.PreventTeardown
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) GetRestartTimer() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RestartTimer
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) GetWarningThresholdPct() *ywrapper.UintValue {
	if x != nil {
		return x.WarningThresholdPct
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config `protobuf:"bytes,314654031,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State  `protobuf:"bytes,140899648,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit) Reset() {
	*x = Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 8, 0}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit) GetConfig() *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit) GetState() *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPrefixes         *ywrapper.UintValue      `protobuf:"bytes,331931121,opt,name=max_prefixes,json=maxPrefixes,proto3" json:"max_prefixes,omitempty"`
	PreventTeardown     *ywrapper.BoolValue      `protobuf:"bytes,158213753,opt,name=prevent_teardown,json=preventTeardown,proto3" json:"prevent_teardown,omitempty"`
	RestartTimer        *ywrapper.Decimal64Value `protobuf:"bytes,79836639,opt,name=restart_timer,json=restartTimer,proto3" json:"restart_timer,omitempty"`
	WarningThresholdPct *ywrapper.UintValue      `protobuf:"bytes,415570910,opt,name=warning_threshold_pct,json=warningThresholdPct,proto3" json:"warning_threshold_pct,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config) Reset() {
	*x = Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 8, 0, 0}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config) GetMaxPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.MaxPrefixes
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config) GetPreventTeardown() *ywrapper.BoolValue {
	if x != nil {
		return x.PreventTeardown
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config) GetRestartTimer() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RestartTimer
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config) GetWarningThresholdPct() *ywrapper.UintValue {
	if x != nil {
		return x.WarningThresholdPct
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPrefixes         *ywrapper.UintValue      `protobuf:"bytes,201243340,opt,name=max_prefixes,json=maxPrefixes,proto3" json:"max_prefixes,omitempty"`
	PreventTeardown     *ywrapper.BoolValue      `protobuf:"bytes,394980912,opt,name=prevent_teardown,json=preventTeardown,proto3" json:"prevent_teardown,omitempty"`
	RestartTimer        *ywrapper.Decimal64Value `protobuf:"bytes,520270784,opt,name=restart_timer,json=restartTimer,proto3" json:"restart_timer,omitempty"`
	WarningThresholdPct *ywrapper.UintValue      `protobuf:"bytes,288805377,opt,name=warning_threshold_pct,json=warningThresholdPct,proto3" json:"warning_threshold_pct,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State) Reset() {
	*x = Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 8, 0, 1}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State) GetMaxPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.MaxPrefixes
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State) GetPreventTeardown() *ywrapper.BoolValue {
	if x != nil {
		return x.PreventTeardown
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State) GetRestartTimer() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RestartTimer
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State) GetWarningThresholdPct() *ywrapper.UintValue {
	if x != nil {
		return x.WarningThresholdPct
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config `protobuf:"bytes,226692281,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State  `protobuf:"bytes,37294350,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit) Reset() {
	*x = Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 9, 0}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit) GetConfig() *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit) GetState() *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPrefixes         *ywrapper.UintValue      `protobuf:"bytes,531809511,opt,name=max_prefixes,json=maxPrefixes,proto3" json:"max_prefixes,omitempty"`
	PreventTeardown     *ywrapper.BoolValue      `protobuf:"bytes,187336743,opt,name=prevent_teardown,json=preventTeardown,proto3" json:"prevent_teardown,omitempty"`
	RestartTimer        *ywrapper.Decimal64Value `protobuf:"bytes,204060837,opt,name=restart_timer,json=restartTimer,proto3" json:"restart_timer,omitempty"`
	WarningThresholdPct *ywrapper.UintValue      `protobuf:"bytes,208208760,opt,name=warning_threshold_pct,json=warningThresholdPct,proto3" json:"warning_threshold_pct,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config) Reset() {
	*x = Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 9, 0, 0}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config) GetMaxPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.MaxPrefixes
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config) GetPreventTeardown() *ywrapper.BoolValue {
	if x != nil {
		return x.PreventTeardown
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config) GetRestartTimer() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RestartTimer
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config) GetWarningThresholdPct() *ywrapper.UintValue {
	if x != nil {
		return x.WarningThresholdPct
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPrefixes         *ywrapper.UintValue      `protobuf:"bytes,58819798,opt,name=max_prefixes,json=maxPrefixes,proto3" json:"max_prefixes,omitempty"`
	PreventTeardown     *ywrapper.BoolValue      `protobuf:"bytes,340855962,opt,name=prevent_teardown,json=preventTeardown,proto3" json:"prevent_teardown,omitempty"`
	RestartTimer        *ywrapper.Decimal64Value `protobuf:"bytes,188069450,opt,name=restart_timer,json=restartTimer,proto3" json:"restart_timer,omitempty"`
	WarningThresholdPct *ywrapper.UintValue      `protobuf:"bytes,381051927,opt,name=warning_threshold_pct,json=warningThresholdPct,proto3" json:"warning_threshold_pct,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State) Reset() {
	*x = Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 9, 0, 1}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State) GetMaxPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.MaxPrefixes
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State) GetPreventTeardown() *ywrapper.BoolValue {
	if x != nil {
		return x.PreventTeardown
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State) GetRestartTimer() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RestartTimer
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State) GetWarningThresholdPct() *ywrapper.UintValue {
	if x != nil {
		return x.WarningThresholdPct
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config `protobuf:"bytes,377686533,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State  `protobuf:"bytes,190684666,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) Reset() {
	*x = Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 10, 0}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) GetConfig() *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) GetState() *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPrefixes         *ywrapper.UintValue      `protobuf:"bytes,480615099,opt,name=max_prefixes,json=maxPrefixes,proto3" json:"max_prefixes,omitempty"`
	PreventTeardown     *ywrapper.BoolValue      `protobuf:"bytes,499473875,opt,name=prevent_teardown,json=preventTeardown,proto3" json:"prevent_teardown,omitempty"`
	RestartTimer        *ywrapper.Decimal64Value `protobuf:"bytes,178415345,opt,name=restart_timer,json=restartTimer,proto3" json:"restart_timer,omitempty"`
	WarningThresholdPct *ywrapper.UintValue      `protobuf:"bytes,273948140,opt,name=warning_threshold_pct,json=warningThresholdPct,proto3" json:"warning_threshold_pct,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config) Reset() {
	*x = Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config) ProtoMessage() {
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 10, 0, 0}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config) GetMaxPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.MaxPrefixes
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config) GetPreventTeardown() *ywrapper.BoolValue {
	if x != nil {
		return x.PreventTeardown
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config) GetRestartTimer() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RestartTimer
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config) GetWarningThresholdPct() *ywrapper.UintValue {
	if x != nil {
		return x.WarningThresholdPct
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPrefixes         *ywrapper.UintValue      `protobuf:"bytes,107512458,opt,name=max_prefixes,json=maxPrefixes,proto3" json:"max_prefixes,omitempty"`
	PreventTeardown     *ywrapper.BoolValue      `protobuf:"bytes,485355126,opt,name=prevent_teardown,json=preventTeardown,proto3" json:"prevent_teardown,omitempty"`
	RestartTimer        *ywrapper.Decimal64Value `protobuf:"bytes,264065958,opt,name=restart_timer,json=restartTimer,proto3" json:"restart_timer,omitempty"`
	WarningThresholdPct *ywrapper.UintValue      `protobuf:"bytes,476453227,opt,name=warning_threshold_pct,json=warningThresholdPct,proto3" json:"warning_threshold_pct,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State) Reset() {
	*x = Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 10, 0, 1}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State) GetMaxPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.MaxPrefixes
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State) GetPreventTeardown() *ywrapper.BoolValue {
	if x != nil {
		return x.PreventTeardown
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State) GetRestartTimer() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RestartTimer
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State) GetWarningThresholdPct() *ywrapper.UintValue {
	if x != nil {
		return x.WarningThresholdPct
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config `protobuf:"bytes,165461932,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State  `protobuf:"bytes,429474981,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) Reset() {
	*x = Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 11, 0}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) GetConfig() *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) GetState() *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPrefixes         *ywrapper.UintValue      `protobuf:"bytes,479911328,opt,name=max_prefixes,json=maxPrefixes,proto3" json:"max_prefixes,omitempty"`
	PreventTeardown     *ywrapper.BoolValue      `protobuf:"bytes,24481916,opt,name=prevent_teardown,json=preventTeardown,proto3" json:"prevent_teardown,omitempty"`
	RestartTimer        *ywrapper.Decimal64Value `protobuf:"bytes,263513804,opt,name=restart_timer,json=restartTimer,proto3" json:"restart_timer,omitempty"`
	WarningThresholdPct *ywrapper.UintValue      `protobuf:"bytes,78476213,opt,name=warning_threshold_pct,json=warningThresholdPct,proto3" json:"warning_threshold_pct,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config) Reset() {
	*x = Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 11, 0, 0}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config) GetMaxPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.MaxPrefixes
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config) GetPreventTeardown() *ywrapper.BoolValue {
	if x != nil {
		return x.PreventTeardown
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config) GetRestartTimer() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RestartTimer
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config) GetWarningThresholdPct() *ywrapper.UintValue {
	if x != nil {
		return x.WarningThresholdPct
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPrefixes         *ywrapper.UintValue      `protobuf:"bytes,405962971,opt,name=max_prefixes,json=maxPrefixes,proto3" json:"max_prefixes,omitempty"`
	PreventTeardown     *ywrapper.BoolValue      `protobuf:"bytes,83459571,opt,name=prevent_teardown,json=preventTeardown,proto3" json:"prevent_teardown,omitempty"`
	RestartTimer        *ywrapper.Decimal64Value `protobuf:"bytes,364607761,opt,name=restart_timer,json=restartTimer,proto3" json:"restart_timer,omitempty"`
	WarningThresholdPct *ywrapper.UintValue      `protobuf:"bytes,452075404,opt,name=warning_threshold_pct,json=warningThresholdPct,proto3" json:"warning_threshold_pct,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State) Reset() {
	*x = Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 11, 0, 1}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State) GetMaxPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.MaxPrefixes
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State) GetPreventTeardown() *ywrapper.BoolValue {
	if x != nil {
		return x.PreventTeardown
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State) GetRestartTimer() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RestartTimer
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State) GetWarningThresholdPct() *ywrapper.UintValue {
	if x != nil {
		return x.WarningThresholdPct
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config `protobuf:"bytes,490911535,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State  `protobuf:"bytes,389299360,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) Reset() {
	*x = Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 12, 0}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) GetConfig() *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) GetState() *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPrefixes         *ywrapper.UintValue      `protobuf:"bytes,433372753,opt,name=max_prefixes,json=maxPrefixes,proto3" json:"max_prefixes,omitempty"`
	PreventTeardown     *ywrapper.BoolValue      `protobuf:"bytes,453476825,opt,name=prevent_teardown,json=preventTeardown,proto3" json:"prevent_teardown,omitempty"`
	RestartTimer        *ywrapper.Decimal64Value `protobuf:"bytes,5077823,opt,name=restart_timer,json=restartTimer,proto3" json:"restart_timer,omitempty"`
	WarningThresholdPct *ywrapper.UintValue      `protobuf:"bytes,396650174,opt,name=warning_threshold_pct,json=warningThresholdPct,proto3" json:"warning_threshold_pct,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config) Reset() {
	*x = Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config) ProtoMessage() {
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 12, 0, 0}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config) GetMaxPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.MaxPrefixes
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config) GetPreventTeardown() *ywrapper.BoolValue {
	if x != nil {
		return x.PreventTeardown
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config) GetRestartTimer() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RestartTimer
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config) GetWarningThresholdPct() *ywrapper.UintValue {
	if x != nil {
		return x.WarningThresholdPct
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPrefixes         *ywrapper.UintValue      `protobuf:"bytes,374514988,opt,name=max_prefixes,json=maxPrefixes,proto3" json:"max_prefixes,omitempty"`
	PreventTeardown     *ywrapper.BoolValue      `protobuf:"bytes,37823120,opt,name=prevent_teardown,json=preventTeardown,proto3" json:"prevent_teardown,omitempty"`
	RestartTimer        *ywrapper.Decimal64Value `protobuf:"bytes,467262240,opt,name=restart_timer,json=restartTimer,proto3" json:"restart_timer,omitempty"`
	WarningThresholdPct *ywrapper.UintValue      `protobuf:"bytes,90863201,opt,name=warning_threshold_pct,json=warningThresholdPct,proto3" json:"warning_threshold_pct,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State) Reset() {
	*x = Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 12, 0, 1}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State) GetMaxPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.MaxPrefixes
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State) GetPreventTeardown() *ywrapper.BoolValue {
	if x != nil {
		return x.PreventTeardown
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State) GetRestartTimer() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RestartTimer
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State) GetWarningThresholdPct() *ywrapper.UintValue {
	if x != nil {
		return x.WarningThresholdPct
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config `protobuf:"bytes,229034058,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State  `protobuf:"bytes,221186023,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) Reset() {
	*x = Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 13, 0}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) GetConfig() *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) GetState() *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPrefixes         *ywrapper.UintValue      `protobuf:"bytes,199684762,opt,name=max_prefixes,json=maxPrefixes,proto3" json:"max_prefixes,omitempty"`
	PreventTeardown     *ywrapper.BoolValue      `protobuf:"bytes,211245702,opt,name=prevent_teardown,json=preventTeardown,proto3" json:"prevent_teardown,omitempty"`
	RestartTimer        *ywrapper.Decimal64Value `protobuf:"bytes,71753750,opt,name=restart_timer,json=restartTimer,proto3" json:"restart_timer,omitempty"`
	WarningThresholdPct *ywrapper.UintValue      `protobuf:"bytes,112311195,opt,name=warning_threshold_pct,json=warningThresholdPct,proto3" json:"warning_threshold_pct,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config) Reset() {
	*x = Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 13, 0, 0}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config) GetMaxPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.MaxPrefixes
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config) GetPreventTeardown() *ywrapper.BoolValue {
	if x != nil {
		return x.PreventTeardown
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config) GetRestartTimer() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RestartTimer
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config) GetWarningThresholdPct() *ywrapper.UintValue {
	if x != nil {
		return x.WarningThresholdPct
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPrefixes         *ywrapper.UintValue      `protobuf:"bytes,327871545,opt,name=max_prefixes,json=maxPrefixes,proto3" json:"max_prefixes,omitempty"`
	PreventTeardown     *ywrapper.BoolValue      `protobuf:"bytes,251910769,opt,name=prevent_teardown,json=preventTeardown,proto3" json:"prevent_teardown,omitempty"`
	RestartTimer        *ywrapper.Decimal64Value `protobuf:"bytes,248071767,opt,name=restart_timer,json=restartTimer,proto3" json:"restart_timer,omitempty"`
	WarningThresholdPct *ywrapper.UintValue      `protobuf:"bytes,168345686,opt,name=warning_threshold_pct,json=warningThresholdPct,proto3" json:"warning_threshold_pct,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State) Reset() {
	*x = Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 13, 0, 1}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State) GetMaxPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.MaxPrefixes
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State) GetPreventTeardown() *ywrapper.BoolValue {
	if x != nil {
		return x.PreventTeardown
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State) GetRestartTimer() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RestartTimer
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State) GetWarningThresholdPct() *ywrapper.UintValue {
	if x != nil {
		return x.WarningThresholdPct
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_Config `protobuf:"bytes,254932524,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_State  `protobuf:"bytes,212550693,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit) Reset() {
	*x = Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 14, 0}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit) GetConfig() *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit) GetState() *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPrefixes         *ywrapper.UintValue      `protobuf:"bytes,464376096,opt,name=max_prefixes,json=maxPrefixes,proto3" json:"max_prefixes,omitempty"`
	PreventTeardown     *ywrapper.BoolValue      `protobuf:"bytes,363084796,opt,name=prevent_teardown,json=preventTeardown,proto3" json:"prevent_teardown,omitempty"`
	RestartTimer        *ywrapper.Decimal64Value `protobuf:"bytes,445266252,opt,name=restart_timer,json=restartTimer,proto3" json:"restart_timer,omitempty"`
	WarningThresholdPct *ywrapper.UintValue      `protobuf:"bytes,373986869,opt,name=warning_threshold_pct,json=warningThresholdPct,proto3" json:"warning_threshold_pct,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_Config) Reset() {
	*x = Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_Config) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_Config.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 14, 0, 0}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_Config) GetMaxPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.MaxPrefixes
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_Config) GetPreventTeardown() *ywrapper.BoolValue {
	if x != nil {
		return x.PreventTeardown
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_Config) GetRestartTimer() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RestartTimer
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_Config) GetWarningThresholdPct() *ywrapper.UintValue {
	if x != nil {
		return x.WarningThresholdPct
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPrefixes         *ywrapper.UintValue      `protobuf:"bytes,324661083,opt,name=max_prefixes,json=maxPrefixes,proto3" json:"max_prefixes,omitempty"`
	PreventTeardown     *ywrapper.BoolValue      `protobuf:"bytes,80303219,opt,name=prevent_teardown,json=preventTeardown,proto3" json:"prevent_teardown,omitempty"`
	RestartTimer        *ywrapper.Decimal64Value `protobuf:"bytes,349072529,opt,name=restart_timer,json=restartTimer,proto3" json:"restart_timer,omitempty"`
	WarningThresholdPct *ywrapper.UintValue      `protobuf:"bytes,138412812,opt,name=warning_threshold_pct,json=warningThresholdPct,proto3" json:"warning_threshold_pct,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_State) Reset() {
	*x = Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_State) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_State.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 14, 0, 1}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_State) GetMaxPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.MaxPrefixes
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_State) GetPreventTeardown() *ywrapper.BoolValue {
	if x != nil {
		return x.PreventTeardown
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_State) GetRestartTimer() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RestartTimer
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_State) GetWarningThresholdPct() *ywrapper.UintValue {
	if x != nil {
		return x.WarningThresholdPct
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_Config `protobuf:"bytes,472291478,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_State  `protobuf:"bytes,478798659,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit) Reset() {
	*x = Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 15, 0}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit) GetConfig() *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit) GetState() *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPrefixes         *ywrapper.UintValue      `protobuf:"bytes,72720494,opt,name=max_prefixes,json=maxPrefixes,proto3" json:"max_prefixes,omitempty"`
	PreventTeardown     *ywrapper.BoolValue      `protobuf:"bytes,411356706,opt,name=prevent_teardown,json=preventTeardown,proto3" json:"prevent_teardown,omitempty"`
	RestartTimer        *ywrapper.Decimal64Value `protobuf:"bytes,281975666,opt,name=restart_timer,json=restartTimer,proto3" json:"restart_timer,omitempty"`
	WarningThresholdPct *ywrapper.UintValue      `protobuf:"bytes,512975487,opt,name=warning_threshold_pct,json=warningThresholdPct,proto3" json:"warning_threshold_pct,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_Config) Reset() {
	*x = Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_Config) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_Config.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 15, 0, 0}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_Config) GetMaxPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.MaxPrefixes
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_Config) GetPreventTeardown() *ywrapper.BoolValue {
	if x != nil {
		return x.PreventTeardown
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_Config) GetRestartTimer() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RestartTimer
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_Config) GetWarningThresholdPct() *ywrapper.UintValue {
	if x != nil {
		return x.WarningThresholdPct
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPrefixes         *ywrapper.UintValue      `protobuf:"bytes,436176381,opt,name=max_prefixes,json=maxPrefixes,proto3" json:"max_prefixes,omitempty"`
	PreventTeardown     *ywrapper.BoolValue      `protobuf:"bytes,229083837,opt,name=prevent_teardown,json=preventTeardown,proto3" json:"prevent_teardown,omitempty"`
	RestartTimer        *ywrapper.Decimal64Value `protobuf:"bytes,251073859,opt,name=restart_timer,json=restartTimer,proto3" json:"restart_timer,omitempty"`
	WarningThresholdPct *ywrapper.UintValue      `protobuf:"bytes,98791274,opt,name=warning_threshold_pct,json=warningThresholdPct,proto3" json:"warning_threshold_pct,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_State) Reset() {
	*x = Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_State) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_State.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 15, 0, 1}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_State) GetMaxPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.MaxPrefixes
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_State) GetPreventTeardown() *ywrapper.BoolValue {
	if x != nil {
		return x.PreventTeardown
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_State) GetRestartTimer() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RestartTimer
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_State) GetWarningThresholdPct() *ywrapper.UintValue {
	if x != nil {
		return x.WarningThresholdPct
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State_Prefixes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Installed         *ywrapper.UintValue `protobuf:"bytes,26114816,opt,name=installed,proto3" json:"installed,omitempty"`
	Received          *ywrapper.UintValue `protobuf:"bytes,158386523,opt,name=received,proto3" json:"received,omitempty"`
	ReceivedPrePolicy *ywrapper.UintValue `protobuf:"bytes,494400542,opt,name=received_pre_policy,json=receivedPrePolicy,proto3" json:"received_pre_policy,omitempty"`
	Sent              *ywrapper.UintValue `protobuf:"bytes,23305672,opt,name=sent,proto3" json:"sent,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State_Prefixes) Reset() {
	*x = Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State_Prefixes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State_Prefixes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State_Prefixes) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State_Prefixes) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State_Prefixes.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State_Prefixes) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 16, 0}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State_Prefixes) GetInstalled() *ywrapper.UintValue {
	if x != nil {
		return x.Installed
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State_Prefixes) GetReceived() *ywrapper.UintValue {
	if x != nil {
		return x.Received
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State_Prefixes) GetReceivedPrePolicy() *ywrapper.UintValue {
	if x != nil {
		return x.ReceivedPrePolicy
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State_Prefixes) GetSent() *ywrapper.UintValue {
	if x != nil {
		return x.Sent
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled *ywrapper.BoolValue `protobuf:"bytes,123661323,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Config) Reset() {
	*x = Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Config) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Config.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 17, 0}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Config) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config `protobuf:"bytes,257680844,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State  `protobuf:"bytes,95046469,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp) Reset() {
	*x = Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 17, 1}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp) GetConfig() *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp) GetState() *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled *ywrapper.BoolValue `protobuf:"bytes,78913976,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_State) Reset() {
	*x = Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_State) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_State.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 17, 2}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_State) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowMultipleAs *ywrapper.BoolValue `protobuf:"bytes,317558064,opt,name=allow_multiple_as,json=allowMultipleAs,proto3" json:"allow_multiple_as,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config) Reset() {
	*x = Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 17, 1, 0}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config) GetAllowMultipleAs() *ywrapper.BoolValue {
	if x != nil {
		return x.AllowMultipleAs
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowMultipleAs *ywrapper.BoolValue `protobuf:"bytes,511744049,opt,name=allow_multiple_as,json=allowMultipleAs,proto3" json:"allow_multiple_as,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State) Reset() {
	*x = Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 17, 1, 1}
}

func (x *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State) GetAllowMultipleAs() *ywrapper.BoolValue {
	if x != nil {
		return x.AllowMultipleAs
	}
	return nil
}

type Bgp_Neighbors_Neighbor_ApplyPolicy_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultExportPolicy OpenconfigRoutingPolicyDefaultPolicyType `protobuf:"varint,397902704,opt,name=default_export_policy,json=defaultExportPolicy,proto3,enum=openconfig.OpenconfigRoutingPolicyDefaultPolicyType" json:"default_export_policy,omitempty"`
	DefaultImportPolicy OpenconfigRoutingPolicyDefaultPolicyType `protobuf:"varint,322203867,opt,name=default_import_policy,json=defaultImportPolicy,proto3,enum=openconfig.OpenconfigRoutingPolicyDefaultPolicyType" json:"default_import_policy,omitempty"`
	ExportPolicy        []*ywrapper.StringValue                  `protobuf:"bytes,452415676,rep,name=export_policy,json=exportPolicy,proto3" json:"export_policy,omitempty"`
	ImportPolicy        []*ywrapper.StringValue                  `protobuf:"bytes,376167111,rep,name=import_policy,json=importPolicy,proto3" json:"import_policy,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_ApplyPolicy_Config) Reset() {
	*x = Bgp_Neighbors_Neighbor_ApplyPolicy_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_ApplyPolicy_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_ApplyPolicy_Config) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_ApplyPolicy_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_ApplyPolicy_Config.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_ApplyPolicy_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 1, 0}
}

func (x *Bgp_Neighbors_Neighbor_ApplyPolicy_Config) GetDefaultExportPolicy() OpenconfigRoutingPolicyDefaultPolicyType {
	if x != nil {
		return x.DefaultExportPolicy
	}
	return OpenconfigRoutingPolicyDefaultPolicyType_OPENCONFIGROUTINGPOLICYDEFAULTPOLICYTYPE_REJECT_ROUTE
}

func (x *Bgp_Neighbors_Neighbor_ApplyPolicy_Config) GetDefaultImportPolicy() OpenconfigRoutingPolicyDefaultPolicyType {
	if x != nil {
		return x.DefaultImportPolicy
	}
	return OpenconfigRoutingPolicyDefaultPolicyType_OPENCONFIGROUTINGPOLICYDEFAULTPOLICYTYPE_REJECT_ROUTE
}

func (x *Bgp_Neighbors_Neighbor_ApplyPolicy_Config) GetExportPolicy() []*ywrapper.StringValue {
	if x != nil {
		return x.ExportPolicy
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_ApplyPolicy_Config) GetImportPolicy() []*ywrapper.StringValue {
	if x != nil {
		return x.ImportPolicy
	}
	return nil
}

type Bgp_Neighbors_Neighbor_ApplyPolicy_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultExportPolicy OpenconfigRoutingPolicyDefaultPolicyType `protobuf:"varint,6485261,opt,name=default_export_policy,json=defaultExportPolicy,proto3,enum=openconfig.OpenconfigRoutingPolicyDefaultPolicyType" json:"default_export_policy,omitempty"`
	DefaultImportPolicy OpenconfigRoutingPolicyDefaultPolicyType `protobuf:"varint,461805586,opt,name=default_import_policy,json=defaultImportPolicy,proto3,enum=openconfig.OpenconfigRoutingPolicyDefaultPolicyType" json:"default_import_policy,omitempty"`
	ExportPolicy        []*ywrapper.StringValue                  `protobuf:"bytes,230897765,rep,name=export_policy,json=exportPolicy,proto3" json:"export_policy,omitempty"`
	ImportPolicy        []*ywrapper.StringValue                  `protobuf:"bytes,64546266,rep,name=import_policy,json=importPolicy,proto3" json:"import_policy,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_ApplyPolicy_State) Reset() {
	*x = Bgp_Neighbors_Neighbor_ApplyPolicy_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_ApplyPolicy_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_ApplyPolicy_State) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_ApplyPolicy_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_ApplyPolicy_State.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_ApplyPolicy_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 1, 1}
}

func (x *Bgp_Neighbors_Neighbor_ApplyPolicy_State) GetDefaultExportPolicy() OpenconfigRoutingPolicyDefaultPolicyType {
	if x != nil {
		return x.DefaultExportPolicy
	}
	return OpenconfigRoutingPolicyDefaultPolicyType_OPENCONFIGROUTINGPOLICYDEFAULTPOLICYTYPE_REJECT_ROUTE
}

func (x *Bgp_Neighbors_Neighbor_ApplyPolicy_State) GetDefaultImportPolicy() OpenconfigRoutingPolicyDefaultPolicyType {
	if x != nil {
		return x.DefaultImportPolicy
	}
	return OpenconfigRoutingPolicyDefaultPolicyType_OPENCONFIGROUTINGPOLICYDEFAULTPOLICYTYPE_REJECT_ROUTE
}

func (x *Bgp_Neighbors_Neighbor_ApplyPolicy_State) GetExportPolicy() []*ywrapper.StringValue {
	if x != nil {
		return x.ExportPolicy
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_ApplyPolicy_State) GetImportPolicy() []*ywrapper.StringValue {
	if x != nil {
		return x.ImportPolicy
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AsPathOptions_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowOwnAs          *ywrapper.UintValue `protobuf:"bytes,306875764,opt,name=allow_own_as,json=allowOwnAs,proto3" json:"allow_own_as,omitempty"`
	DisablePeerAsFilter *ywrapper.BoolValue `protobuf:"bytes,252491916,opt,name=disable_peer_as_filter,json=disablePeerAsFilter,proto3" json:"disable_peer_as_filter,omitempty"`
	ReplacePeerAs       *ywrapper.BoolValue `protobuf:"bytes,234379129,opt,name=replace_peer_as,json=replacePeerAs,proto3" json:"replace_peer_as,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AsPathOptions_Config) Reset() {
	*x = Bgp_Neighbors_Neighbor_AsPathOptions_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AsPathOptions_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AsPathOptions_Config) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_AsPathOptions_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AsPathOptions_Config.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AsPathOptions_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0}
}

func (x *Bgp_Neighbors_Neighbor_AsPathOptions_Config) GetAllowOwnAs() *ywrapper.UintValue {
	if x != nil {
		return x.AllowOwnAs
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AsPathOptions_Config) GetDisablePeerAsFilter() *ywrapper.BoolValue {
	if x != nil {
		return x.DisablePeerAsFilter
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AsPathOptions_Config) GetReplacePeerAs() *ywrapper.BoolValue {
	if x != nil {
		return x.ReplacePeerAs
	}
	return nil
}

type Bgp_Neighbors_Neighbor_AsPathOptions_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowOwnAs          *ywrapper.UintValue `protobuf:"bytes,437699211,opt,name=allow_own_as,json=allowOwnAs,proto3" json:"allow_own_as,omitempty"`
	DisablePeerAsFilter *ywrapper.BoolValue `protobuf:"bytes,280990095,opt,name=disable_peer_as_filter,json=disablePeerAsFilter,proto3" json:"disable_peer_as_filter,omitempty"`
	ReplacePeerAs       *ywrapper.BoolValue `protobuf:"bytes,29323088,opt,name=replace_peer_as,json=replacePeerAs,proto3" json:"replace_peer_as,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_AsPathOptions_State) Reset() {
	*x = Bgp_Neighbors_Neighbor_AsPathOptions_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_AsPathOptions_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_AsPathOptions_State) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_AsPathOptions_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_AsPathOptions_State.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_AsPathOptions_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 2, 1}
}

func (x *Bgp_Neighbors_Neighbor_AsPathOptions_State) GetAllowOwnAs() *ywrapper.UintValue {
	if x != nil {
		return x.AllowOwnAs
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AsPathOptions_State) GetDisablePeerAsFilter() *ywrapper.BoolValue {
	if x != nil {
		return x.DisablePeerAsFilter
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_AsPathOptions_State) GetReplacePeerAs() *ywrapper.BoolValue {
	if x != nil {
		return x.ReplacePeerAs
	}
	return nil
}

type Bgp_Neighbors_Neighbor_EbgpMultihop_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled     *ywrapper.BoolValue `protobuf:"bytes,178899672,opt,name=enabled,proto3" json:"enabled,omitempty"`
	MultihopTtl *ywrapper.UintValue `protobuf:"bytes,209453446,opt,name=multihop_ttl,json=multihopTtl,proto3" json:"multihop_ttl,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_EbgpMultihop_Config) Reset() {
	*x = Bgp_Neighbors_Neighbor_EbgpMultihop_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_EbgpMultihop_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_EbgpMultihop_Config) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_EbgpMultihop_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_EbgpMultihop_Config.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_EbgpMultihop_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 4, 0}
}

func (x *Bgp_Neighbors_Neighbor_EbgpMultihop_Config) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_EbgpMultihop_Config) GetMultihopTtl() *ywrapper.UintValue {
	if x != nil {
		return x.MultihopTtl
	}
	return nil
}

type Bgp_Neighbors_Neighbor_EbgpMultihop_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled     *ywrapper.BoolValue `protobuf:"bytes,348987433,opt,name=enabled,proto3" json:"enabled,omitempty"`
	MultihopTtl *ywrapper.UintValue `protobuf:"bytes,217214657,opt,name=multihop_ttl,json=multihopTtl,proto3" json:"multihop_ttl,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_EbgpMultihop_State) Reset() {
	*x = Bgp_Neighbors_Neighbor_EbgpMultihop_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_EbgpMultihop_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_EbgpMultihop_State) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_EbgpMultihop_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_EbgpMultihop_State.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_EbgpMultihop_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 4, 1}
}

func (x *Bgp_Neighbors_Neighbor_EbgpMultihop_State) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_EbgpMultihop_State) GetMultihopTtl() *ywrapper.UintValue {
	if x != nil {
		return x.MultihopTtl
	}
	return nil
}

type Bgp_Neighbors_Neighbor_ErrorHandling_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TreatAsWithdraw *ywrapper.BoolValue `protobuf:"bytes,58863720,opt,name=treat_as_withdraw,json=treatAsWithdraw,proto3" json:"treat_as_withdraw,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_ErrorHandling_Config) Reset() {
	*x = Bgp_Neighbors_Neighbor_ErrorHandling_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_ErrorHandling_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_ErrorHandling_Config) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_ErrorHandling_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_ErrorHandling_Config.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_ErrorHandling_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 5, 0}
}

func (x *Bgp_Neighbors_Neighbor_ErrorHandling_Config) GetTreatAsWithdraw() *ywrapper.BoolValue {
	if x != nil {
		return x.TreatAsWithdraw
	}
	return nil
}

type Bgp_Neighbors_Neighbor_ErrorHandling_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErroneousUpdateMessages *ywrapper.UintValue `protobuf:"bytes,529048202,opt,name=erroneous_update_messages,json=erroneousUpdateMessages,proto3" json:"erroneous_update_messages,omitempty"`
	TreatAsWithdraw         *ywrapper.BoolValue `protobuf:"bytes,475043679,opt,name=treat_as_withdraw,json=treatAsWithdraw,proto3" json:"treat_as_withdraw,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_ErrorHandling_State) Reset() {
	*x = Bgp_Neighbors_Neighbor_ErrorHandling_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[202]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_ErrorHandling_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_ErrorHandling_State) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_ErrorHandling_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[202]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_ErrorHandling_State.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_ErrorHandling_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 5, 1}
}

func (x *Bgp_Neighbors_Neighbor_ErrorHandling_State) GetErroneousUpdateMessages() *ywrapper.UintValue {
	if x != nil {
		return x.ErroneousUpdateMessages
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_ErrorHandling_State) GetTreatAsWithdraw() *ywrapper.BoolValue {
	if x != nil {
		return x.TreatAsWithdraw
	}
	return nil
}

type Bgp_Neighbors_Neighbor_GracefulRestart_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled         *ywrapper.BoolValue      `protobuf:"bytes,36331202,opt,name=enabled,proto3" json:"enabled,omitempty"`
	HelperOnly      *ywrapper.BoolValue      `protobuf:"bytes,96234670,opt,name=helper_only,json=helperOnly,proto3" json:"helper_only,omitempty"`
	RestartTime     *ywrapper.UintValue      `protobuf:"bytes,465771270,opt,name=restart_time,json=restartTime,proto3" json:"restart_time,omitempty"`
	StaleRoutesTime *ywrapper.Decimal64Value `protobuf:"bytes,282807769,opt,name=stale_routes_time,json=staleRoutesTime,proto3" json:"stale_routes_time,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_GracefulRestart_Config) Reset() {
	*x = Bgp_Neighbors_Neighbor_GracefulRestart_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_GracefulRestart_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_GracefulRestart_Config) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_GracefulRestart_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_GracefulRestart_Config.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_GracefulRestart_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 6, 0}
}

func (x *Bgp_Neighbors_Neighbor_GracefulRestart_Config) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_GracefulRestart_Config) GetHelperOnly() *ywrapper.BoolValue {
	if x != nil {
		return x.HelperOnly
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_GracefulRestart_Config) GetRestartTime() *ywrapper.UintValue {
	if x != nil {
		return x.RestartTime
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_GracefulRestart_Config) GetStaleRoutesTime() *ywrapper.Decimal64Value {
	if x != nil {
		return x.StaleRoutesTime
	}
	return nil
}

type Bgp_Neighbors_Neighbor_GracefulRestart_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled         *ywrapper.BoolValue                               `protobuf:"bytes,115348031,opt,name=enabled,proto3" json:"enabled,omitempty"`
	HelperOnly      *ywrapper.BoolValue                               `protobuf:"bytes,226969655,opt,name=helper_only,json=helperOnly,proto3" json:"helper_only,omitempty"`
	LocalRestarting *ywrapper.BoolValue                               `protobuf:"bytes,140392901,opt,name=local_restarting,json=localRestarting,proto3" json:"local_restarting,omitempty"`
	Mode            Bgp_Neighbors_Neighbor_GracefulRestart_State_Mode `protobuf:"varint,103593157,opt,name=mode,proto3,enum=openconfig.Bgp_Neighbors_Neighbor_GracefulRestart_State_Mode" json:"mode,omitempty"`
	PeerRestartTime *ywrapper.UintValue                               `protobuf:"bytes,23810224,opt,name=peer_restart_time,json=peerRestartTime,proto3" json:"peer_restart_time,omitempty"`
	PeerRestarting  *ywrapper.BoolValue                               `protobuf:"bytes,39204918,opt,name=peer_restarting,json=peerRestarting,proto3" json:"peer_restarting,omitempty"`
	RestartTime     *ywrapper.UintValue                               `protobuf:"bytes,140823277,opt,name=restart_time,json=restartTime,proto3" json:"restart_time,omitempty"`
	StaleRoutesTime *ywrapper.Decimal64Value                          `protobuf:"bytes,155299800,opt,name=stale_routes_time,json=staleRoutesTime,proto3" json:"stale_routes_time,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_GracefulRestart_State) Reset() {
	*x = Bgp_Neighbors_Neighbor_GracefulRestart_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_GracefulRestart_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_GracefulRestart_State) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_GracefulRestart_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_GracefulRestart_State.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_GracefulRestart_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 6, 1}
}

func (x *Bgp_Neighbors_Neighbor_GracefulRestart_State) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_GracefulRestart_State) GetHelperOnly() *ywrapper.BoolValue {
	if x != nil {
		return x.HelperOnly
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_GracefulRestart_State) GetLocalRestarting() *ywrapper.BoolValue {
	if x != nil {
		return x.LocalRestarting
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_GracefulRestart_State) GetMode() Bgp_Neighbors_Neighbor_GracefulRestart_State_Mode {
	if x != nil {
		return x.Mode
	}
	return Bgp_Neighbors_Neighbor_GracefulRestart_State_MODE_UNSET
}

func (x *Bgp_Neighbors_Neighbor_GracefulRestart_State) GetPeerRestartTime() *ywrapper.UintValue {
	if x != nil {
		return x.PeerRestartTime
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_GracefulRestart_State) GetPeerRestarting() *ywrapper.BoolValue {
	if x != nil {
		return x.PeerRestarting
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_GracefulRestart_State) GetRestartTime() *ywrapper.UintValue {
	if x != nil {
		return x.RestartTime
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_GracefulRestart_State) GetStaleRoutesTime() *ywrapper.Decimal64Value {
	if x != nil {
		return x.StaleRoutesTime
	}
	return nil
}

type Bgp_Neighbors_Neighbor_LoggingOptions_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogNeighborStateChanges *ywrapper.BoolValue `protobuf:"bytes,443527211,opt,name=log_neighbor_state_changes,json=logNeighborStateChanges,proto3" json:"log_neighbor_state_changes,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_LoggingOptions_Config) Reset() {
	*x = Bgp_Neighbors_Neighbor_LoggingOptions_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_LoggingOptions_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_LoggingOptions_Config) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_LoggingOptions_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_LoggingOptions_Config.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_LoggingOptions_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 7, 0}
}

func (x *Bgp_Neighbors_Neighbor_LoggingOptions_Config) GetLogNeighborStateChanges() *ywrapper.BoolValue {
	if x != nil {
		return x.LogNeighborStateChanges
	}
	return nil
}

type Bgp_Neighbors_Neighbor_LoggingOptions_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogNeighborStateChanges *ywrapper.BoolValue `protobuf:"bytes,110850174,opt,name=log_neighbor_state_changes,json=logNeighborStateChanges,proto3" json:"log_neighbor_state_changes,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_LoggingOptions_State) Reset() {
	*x = Bgp_Neighbors_Neighbor_LoggingOptions_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_LoggingOptions_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_LoggingOptions_State) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_LoggingOptions_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_LoggingOptions_State.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_LoggingOptions_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 7, 1}
}

func (x *Bgp_Neighbors_Neighbor_LoggingOptions_State) GetLogNeighborStateChanges() *ywrapper.BoolValue {
	if x != nil {
		return x.LogNeighborStateChanges
	}
	return nil
}

type Bgp_Neighbors_Neighbor_RouteReflector_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RouteReflectorClient *ywrapper.BoolValue `protobuf:"bytes,282215184,opt,name=route_reflector_client,json=routeReflectorClient,proto3" json:"route_reflector_client,omitempty"`
	// Types that are assignable to RouteReflectorClusterId:
	//	*Bgp_Neighbors_Neighbor_RouteReflector_Config_RouteReflectorClusterIdString
	//	*Bgp_Neighbors_Neighbor_RouteReflector_Config_RouteReflectorClusterIdUint64
	RouteReflectorClusterId isBgp_Neighbors_Neighbor_RouteReflector_Config_RouteReflectorClusterId `protobuf_oneof:"route_reflector_cluster_id"`
}

func (x *Bgp_Neighbors_Neighbor_RouteReflector_Config) Reset() {
	*x = Bgp_Neighbors_Neighbor_RouteReflector_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[207]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_RouteReflector_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_RouteReflector_Config) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_RouteReflector_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[207]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_RouteReflector_Config.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_RouteReflector_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 8, 0}
}

func (x *Bgp_Neighbors_Neighbor_RouteReflector_Config) GetRouteReflectorClient() *ywrapper.BoolValue {
	if x != nil {
		return x.RouteReflectorClient
	}
	return nil
}

func (m *Bgp_Neighbors_Neighbor_RouteReflector_Config) GetRouteReflectorClusterId() isBgp_Neighbors_Neighbor_RouteReflector_Config_RouteReflectorClusterId {
	if m != nil {
		return m.RouteReflectorClusterId
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_RouteReflector_Config) GetRouteReflectorClusterIdString() string {
	if x, ok := x.GetRouteReflectorClusterId().(*Bgp_Neighbors_Neighbor_RouteReflector_Config_RouteReflectorClusterIdString); ok {
		return x.RouteReflectorClusterIdString
	}
	return ""
}

func (x *Bgp_Neighbors_Neighbor_RouteReflector_Config) GetRouteReflectorClusterIdUint64() uint64 {
	if x, ok := x.GetRouteReflectorClusterId().(*Bgp_Neighbors_Neighbor_RouteReflector_Config_RouteReflectorClusterIdUint64); ok {
		return x.RouteReflectorClusterIdUint64
	}
	return 0
}

type isBgp_Neighbors_Neighbor_RouteReflector_Config_RouteReflectorClusterId interface {
	isBgp_Neighbors_Neighbor_RouteReflector_Config_RouteReflectorClusterId()
}

type Bgp_Neighbors_Neighbor_RouteReflector_Config_RouteReflectorClusterIdString struct {
	RouteReflectorClusterIdString string `protobuf:"bytes,304580959,opt,name=route_reflector_cluster_id_string,json=routeReflectorClusterIdString,proto3,oneof"`
}

type Bgp_Neighbors_Neighbor_RouteReflector_Config_RouteReflectorClusterIdUint64 struct {
	RouteReflectorClusterIdUint64 uint64 `protobuf:"varint,441020338,opt,name=route_reflector_cluster_id_uint64,json=routeReflectorClusterIdUint64,proto3,oneof"`
}

func (*Bgp_Neighbors_Neighbor_RouteReflector_Config_RouteReflectorClusterIdString) isBgp_Neighbors_Neighbor_RouteReflector_Config_RouteReflectorClusterId() {
}

func (*Bgp_Neighbors_Neighbor_RouteReflector_Config_RouteReflectorClusterIdUint64) isBgp_Neighbors_Neighbor_RouteReflector_Config_RouteReflectorClusterId() {
}

type Bgp_Neighbors_Neighbor_RouteReflector_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RouteReflectorClient *ywrapper.BoolValue `protobuf:"bytes,404861173,opt,name=route_reflector_client,json=routeReflectorClient,proto3" json:"route_reflector_client,omitempty"`
	// Types that are assignable to RouteReflectorClusterId:
	//	*Bgp_Neighbors_Neighbor_RouteReflector_State_RouteReflectorClusterIdString
	//	*Bgp_Neighbors_Neighbor_RouteReflector_State_RouteReflectorClusterIdUint64
	RouteReflectorClusterId isBgp_Neighbors_Neighbor_RouteReflector_State_RouteReflectorClusterId `protobuf_oneof:"route_reflector_cluster_id"`
}

func (x *Bgp_Neighbors_Neighbor_RouteReflector_State) Reset() {
	*x = Bgp_Neighbors_Neighbor_RouteReflector_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_RouteReflector_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_RouteReflector_State) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_RouteReflector_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_RouteReflector_State.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_RouteReflector_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 8, 1}
}

func (x *Bgp_Neighbors_Neighbor_RouteReflector_State) GetRouteReflectorClient() *ywrapper.BoolValue {
	if x != nil {
		return x.RouteReflectorClient
	}
	return nil
}

func (m *Bgp_Neighbors_Neighbor_RouteReflector_State) GetRouteReflectorClusterId() isBgp_Neighbors_Neighbor_RouteReflector_State_RouteReflectorClusterId {
	if m != nil {
		return m.RouteReflectorClusterId
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_RouteReflector_State) GetRouteReflectorClusterIdString() string {
	if x, ok := x.GetRouteReflectorClusterId().(*Bgp_Neighbors_Neighbor_RouteReflector_State_RouteReflectorClusterIdString); ok {
		return x.RouteReflectorClusterIdString
	}
	return ""
}

func (x *Bgp_Neighbors_Neighbor_RouteReflector_State) GetRouteReflectorClusterIdUint64() uint64 {
	if x, ok := x.GetRouteReflectorClusterId().(*Bgp_Neighbors_Neighbor_RouteReflector_State_RouteReflectorClusterIdUint64); ok {
		return x.RouteReflectorClusterIdUint64
	}
	return 0
}

type isBgp_Neighbors_Neighbor_RouteReflector_State_RouteReflectorClusterId interface {
	isBgp_Neighbors_Neighbor_RouteReflector_State_RouteReflectorClusterId()
}

type Bgp_Neighbors_Neighbor_RouteReflector_State_RouteReflectorClusterIdString struct {
	RouteReflectorClusterIdString string `protobuf:"bytes,467571640,opt,name=route_reflector_cluster_id_string,json=routeReflectorClusterIdString,proto3,oneof"`
}

type Bgp_Neighbors_Neighbor_RouteReflector_State_RouteReflectorClusterIdUint64 struct {
	RouteReflectorClusterIdUint64 uint64 `protobuf:"varint,258482993,opt,name=route_reflector_cluster_id_uint64,json=routeReflectorClusterIdUint64,proto3,oneof"`
}

func (*Bgp_Neighbors_Neighbor_RouteReflector_State_RouteReflectorClusterIdString) isBgp_Neighbors_Neighbor_RouteReflector_State_RouteReflectorClusterId() {
}

func (*Bgp_Neighbors_Neighbor_RouteReflector_State_RouteReflectorClusterIdUint64) isBgp_Neighbors_Neighbor_RouteReflector_State_RouteReflectorClusterId() {
}

type Bgp_Neighbors_Neighbor_State_Messages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Received *Bgp_Neighbors_Neighbor_State_Messages_Received `protobuf:"bytes,318772272,opt,name=received,proto3" json:"received,omitempty"`
	Sent     *Bgp_Neighbors_Neighbor_State_Messages_Sent     `protobuf:"bytes,204411827,opt,name=sent,proto3" json:"sent,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_State_Messages) Reset() {
	*x = Bgp_Neighbors_Neighbor_State_Messages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[209]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_State_Messages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_State_Messages) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_State_Messages) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[209]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_State_Messages.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_State_Messages) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 9, 0}
}

func (x *Bgp_Neighbors_Neighbor_State_Messages) GetReceived() *Bgp_Neighbors_Neighbor_State_Messages_Received {
	if x != nil {
		return x.Received
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_State_Messages) GetSent() *Bgp_Neighbors_Neighbor_State_Messages_Sent {
	if x != nil {
		return x.Sent
	}
	return nil
}

type Bgp_Neighbors_Neighbor_State_Queues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Input  *ywrapper.UintValue `protobuf:"bytes,14187467,opt,name=input,proto3" json:"input,omitempty"`
	Output *ywrapper.UintValue `protobuf:"bytes,63267482,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_State_Queues) Reset() {
	*x = Bgp_Neighbors_Neighbor_State_Queues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[210]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_State_Queues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_State_Queues) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_State_Queues) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[210]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_State_Queues.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_State_Queues) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 9, 1}
}

func (x *Bgp_Neighbors_Neighbor_State_Queues) GetInput() *ywrapper.UintValue {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_State_Queues) GetOutput() *ywrapper.UintValue {
	if x != nil {
		return x.Output
	}
	return nil
}

type Bgp_Neighbors_Neighbor_State_Messages_Received struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NOTIFICATION                 *ywrapper.UintValue               `protobuf:"bytes,391572682,opt,name=NOTIFICATION,json=nOTIFICATION,proto3" json:"NOTIFICATION,omitempty"`
	UPDATE                       *ywrapper.UintValue               `protobuf:"bytes,44875476,opt,name=UPDATE,json=uPDATE,proto3" json:"UPDATE,omitempty"`
	LastNotificationErrorCode    OpenconfigBgpTypesBGPERRORCODE    `protobuf:"varint,252704470,opt,name=last_notification_error_code,json=lastNotificationErrorCode,proto3,enum=openconfig.OpenconfigBgpTypesBGPERRORCODE" json:"last_notification_error_code,omitempty"`
	LastNotificationErrorSubcode OpenconfigBgpTypesBGPERRORSUBCODE `protobuf:"varint,121274026,opt,name=last_notification_error_subcode,json=lastNotificationErrorSubcode,proto3,enum=openconfig.OpenconfigBgpTypesBGPERRORSUBCODE" json:"last_notification_error_subcode,omitempty"`
	LastNotificationTime         *ywrapper.UintValue               `protobuf:"bytes,237653281,opt,name=last_notification_time,json=lastNotificationTime,proto3" json:"last_notification_time,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_State_Messages_Received) Reset() {
	*x = Bgp_Neighbors_Neighbor_State_Messages_Received{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[211]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_State_Messages_Received) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_State_Messages_Received) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_State_Messages_Received) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[211]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_State_Messages_Received.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_State_Messages_Received) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 9, 0, 0}
}

func (x *Bgp_Neighbors_Neighbor_State_Messages_Received) GetNOTIFICATION() *ywrapper.UintValue {
	if x != nil {
		return x.NOTIFICATION
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_State_Messages_Received) GetUPDATE() *ywrapper.UintValue {
	if x != nil {
		return x.UPDATE
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_State_Messages_Received) GetLastNotificationErrorCode() OpenconfigBgpTypesBGPERRORCODE {
	if x != nil {
		return x.LastNotificationErrorCode
	}
	return OpenconfigBgpTypesBGPERRORCODE_OPENCONFIGBGPTYPESBGPERRORCODE_UNSET
}

func (x *Bgp_Neighbors_Neighbor_State_Messages_Received) GetLastNotificationErrorSubcode() OpenconfigBgpTypesBGPERRORSUBCODE {
	if x != nil {
		return x.LastNotificationErrorSubcode
	}
	return OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_UNSET
}

func (x *Bgp_Neighbors_Neighbor_State_Messages_Received) GetLastNotificationTime() *ywrapper.UintValue {
	if x != nil {
		return x.LastNotificationTime
	}
	return nil
}

type Bgp_Neighbors_Neighbor_State_Messages_Sent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NOTIFICATION                 *ywrapper.UintValue               `protobuf:"bytes,302077483,opt,name=NOTIFICATION,json=nOTIFICATION,proto3" json:"NOTIFICATION,omitempty"`
	UPDATE                       *ywrapper.UintValue               `protobuf:"bytes,510423529,opt,name=UPDATE,json=uPDATE,proto3" json:"UPDATE,omitempty"`
	LastNotificationErrorCode    OpenconfigBgpTypesBGPERRORCODE    `protobuf:"varint,353637771,opt,name=last_notification_error_code,json=lastNotificationErrorCode,proto3,enum=openconfig.OpenconfigBgpTypesBGPERRORCODE" json:"last_notification_error_code,omitempty"`
	LastNotificationErrorSubcode OpenconfigBgpTypesBGPERRORSUBCODE `protobuf:"varint,140368697,opt,name=last_notification_error_subcode,json=lastNotificationErrorSubcode,proto3,enum=openconfig.OpenconfigBgpTypesBGPERRORSUBCODE" json:"last_notification_error_subcode,omitempty"`
	LastNotificationTime         *ywrapper.UintValue               `protobuf:"bytes,466499196,opt,name=last_notification_time,json=lastNotificationTime,proto3" json:"last_notification_time,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_State_Messages_Sent) Reset() {
	*x = Bgp_Neighbors_Neighbor_State_Messages_Sent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[212]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_State_Messages_Sent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_State_Messages_Sent) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_State_Messages_Sent) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[212]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_State_Messages_Sent.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_State_Messages_Sent) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 9, 0, 1}
}

func (x *Bgp_Neighbors_Neighbor_State_Messages_Sent) GetNOTIFICATION() *ywrapper.UintValue {
	if x != nil {
		return x.NOTIFICATION
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_State_Messages_Sent) GetUPDATE() *ywrapper.UintValue {
	if x != nil {
		return x.UPDATE
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_State_Messages_Sent) GetLastNotificationErrorCode() OpenconfigBgpTypesBGPERRORCODE {
	if x != nil {
		return x.LastNotificationErrorCode
	}
	return OpenconfigBgpTypesBGPERRORCODE_OPENCONFIGBGPTYPESBGPERRORCODE_UNSET
}

func (x *Bgp_Neighbors_Neighbor_State_Messages_Sent) GetLastNotificationErrorSubcode() OpenconfigBgpTypesBGPERRORSUBCODE {
	if x != nil {
		return x.LastNotificationErrorSubcode
	}
	return OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_UNSET
}

func (x *Bgp_Neighbors_Neighbor_State_Messages_Sent) GetLastNotificationTime() *ywrapper.UintValue {
	if x != nil {
		return x.LastNotificationTime
	}
	return nil
}

type Bgp_Neighbors_Neighbor_Timers_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectRetry                 *ywrapper.Decimal64Value `protobuf:"bytes,527036445,opt,name=connect_retry,json=connectRetry,proto3" json:"connect_retry,omitempty"`
	HoldTime                     *ywrapper.Decimal64Value `protobuf:"bytes,139540673,opt,name=hold_time,json=holdTime,proto3" json:"hold_time,omitempty"`
	KeepaliveInterval            *ywrapper.Decimal64Value `protobuf:"bytes,398901370,opt,name=keepalive_interval,json=keepaliveInterval,proto3" json:"keepalive_interval,omitempty"`
	MinimumAdvertisementInterval *ywrapper.Decimal64Value `protobuf:"bytes,389872408,opt,name=minimum_advertisement_interval,json=minimumAdvertisementInterval,proto3" json:"minimum_advertisement_interval,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_Timers_Config) Reset() {
	*x = Bgp_Neighbors_Neighbor_Timers_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[213]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_Timers_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_Timers_Config) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_Timers_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[213]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_Timers_Config.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_Timers_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 10, 0}
}

func (x *Bgp_Neighbors_Neighbor_Timers_Config) GetConnectRetry() *ywrapper.Decimal64Value {
	if x != nil {
		return x.ConnectRetry
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_Timers_Config) GetHoldTime() *ywrapper.Decimal64Value {
	if x != nil {
		return x.HoldTime
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_Timers_Config) GetKeepaliveInterval() *ywrapper.Decimal64Value {
	if x != nil {
		return x.KeepaliveInterval
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_Timers_Config) GetMinimumAdvertisementInterval() *ywrapper.Decimal64Value {
	if x != nil {
		return x.MinimumAdvertisementInterval
	}
	return nil
}

type Bgp_Neighbors_Neighbor_Timers_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectRetry                 *ywrapper.Decimal64Value `protobuf:"bytes,407656870,opt,name=connect_retry,json=connectRetry,proto3" json:"connect_retry,omitempty"`
	HoldTime                     *ywrapper.Decimal64Value `protobuf:"bytes,44967510,opt,name=hold_time,json=holdTime,proto3" json:"hold_time,omitempty"`
	KeepaliveInterval            *ywrapper.Decimal64Value `protobuf:"bytes,501526835,opt,name=keepalive_interval,json=keepaliveInterval,proto3" json:"keepalive_interval,omitempty"`
	MinimumAdvertisementInterval *ywrapper.Decimal64Value `protobuf:"bytes,212972537,opt,name=minimum_advertisement_interval,json=minimumAdvertisementInterval,proto3" json:"minimum_advertisement_interval,omitempty"`
	NegotiatedHoldTime           *ywrapper.Decimal64Value `protobuf:"bytes,365157159,opt,name=negotiated_hold_time,json=negotiatedHoldTime,proto3" json:"negotiated_hold_time,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_Timers_State) Reset() {
	*x = Bgp_Neighbors_Neighbor_Timers_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[214]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_Timers_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_Timers_State) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_Timers_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[214]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_Timers_State.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_Timers_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 10, 1}
}

func (x *Bgp_Neighbors_Neighbor_Timers_State) GetConnectRetry() *ywrapper.Decimal64Value {
	if x != nil {
		return x.ConnectRetry
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_Timers_State) GetHoldTime() *ywrapper.Decimal64Value {
	if x != nil {
		return x.HoldTime
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_Timers_State) GetKeepaliveInterval() *ywrapper.Decimal64Value {
	if x != nil {
		return x.KeepaliveInterval
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_Timers_State) GetMinimumAdvertisementInterval() *ywrapper.Decimal64Value {
	if x != nil {
		return x.MinimumAdvertisementInterval
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_Timers_State) GetNegotiatedHoldTime() *ywrapper.Decimal64Value {
	if x != nil {
		return x.NegotiatedHoldTime
	}
	return nil
}

type Bgp_Neighbors_Neighbor_Transport_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalAddress *ywrapper.StringValue `protobuf:"bytes,491425583,opt,name=local_address,json=localAddress,proto3" json:"local_address,omitempty"`
	MtuDiscovery *ywrapper.BoolValue   `protobuf:"bytes,161624036,opt,name=mtu_discovery,json=mtuDiscovery,proto3" json:"mtu_discovery,omitempty"`
	PassiveMode  *ywrapper.BoolValue   `protobuf:"bytes,86935810,opt,name=passive_mode,json=passiveMode,proto3" json:"passive_mode,omitempty"`
	TcpMss       *ywrapper.UintValue   `protobuf:"bytes,161495588,opt,name=tcp_mss,json=tcpMss,proto3" json:"tcp_mss,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_Transport_Config) Reset() {
	*x = Bgp_Neighbors_Neighbor_Transport_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[215]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_Transport_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_Transport_Config) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_Transport_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[215]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_Transport_Config.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_Transport_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 11, 0}
}

func (x *Bgp_Neighbors_Neighbor_Transport_Config) GetLocalAddress() *ywrapper.StringValue {
	if x != nil {
		return x.LocalAddress
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_Transport_Config) GetMtuDiscovery() *ywrapper.BoolValue {
	if x != nil {
		return x.MtuDiscovery
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_Transport_Config) GetPassiveMode() *ywrapper.BoolValue {
	if x != nil {
		return x.PassiveMode
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_Transport_Config) GetTcpMss() *ywrapper.UintValue {
	if x != nil {
		return x.TcpMss
	}
	return nil
}

type Bgp_Neighbors_Neighbor_Transport_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalAddress  *ywrapper.StringValue `protobuf:"bytes,20918586,opt,name=local_address,json=localAddress,proto3" json:"local_address,omitempty"`
	LocalPort     *ywrapper.UintValue   `protobuf:"bytes,277622091,opt,name=local_port,json=localPort,proto3" json:"local_port,omitempty"`
	MtuDiscovery  *ywrapper.BoolValue   `protobuf:"bytes,468106549,opt,name=mtu_discovery,json=mtuDiscovery,proto3" json:"mtu_discovery,omitempty"`
	PassiveMode   *ywrapper.BoolValue   `protobuf:"bytes,217544253,opt,name=passive_mode,json=passiveMode,proto3" json:"passive_mode,omitempty"`
	RemoteAddress *ywrapper.StringValue `protobuf:"bytes,353476153,opt,name=remote_address,json=remoteAddress,proto3" json:"remote_address,omitempty"`
	RemotePort    *ywrapper.UintValue   `protobuf:"bytes,382112026,opt,name=remote_port,json=remotePort,proto3" json:"remote_port,omitempty"`
	TcpMss        *ywrapper.UintValue   `protobuf:"bytes,304263449,opt,name=tcp_mss,json=tcpMss,proto3" json:"tcp_mss,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_Transport_State) Reset() {
	*x = Bgp_Neighbors_Neighbor_Transport_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[216]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_Transport_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_Transport_State) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_Transport_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[216]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_Transport_State.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_Transport_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 11, 1}
}

func (x *Bgp_Neighbors_Neighbor_Transport_State) GetLocalAddress() *ywrapper.StringValue {
	if x != nil {
		return x.LocalAddress
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_Transport_State) GetLocalPort() *ywrapper.UintValue {
	if x != nil {
		return x.LocalPort
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_Transport_State) GetMtuDiscovery() *ywrapper.BoolValue {
	if x != nil {
		return x.MtuDiscovery
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_Transport_State) GetPassiveMode() *ywrapper.BoolValue {
	if x != nil {
		return x.PassiveMode
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_Transport_State) GetRemoteAddress() *ywrapper.StringValue {
	if x != nil {
		return x.RemoteAddress
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_Transport_State) GetRemotePort() *ywrapper.UintValue {
	if x != nil {
		return x.RemotePort
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_Transport_State) GetTcpMss() *ywrapper.UintValue {
	if x != nil {
		return x.TcpMss
	}
	return nil
}

type Bgp_Neighbors_Neighbor_UseMultiplePaths_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled *ywrapper.BoolValue `protobuf:"bytes,138331852,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_UseMultiplePaths_Config) Reset() {
	*x = Bgp_Neighbors_Neighbor_UseMultiplePaths_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[217]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_UseMultiplePaths_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_UseMultiplePaths_Config) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_UseMultiplePaths_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[217]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_UseMultiplePaths_Config.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_UseMultiplePaths_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 12, 0}
}

func (x *Bgp_Neighbors_Neighbor_UseMultiplePaths_Config) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

type Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_Config `protobuf:"bytes,401576425,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_State  `protobuf:"bytes,123388862,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp) Reset() {
	*x = Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[218]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[218]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 12, 1}
}

func (x *Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp) GetConfig() *Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp) GetState() *Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Neighbors_Neighbor_UseMultiplePaths_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled *ywrapper.BoolValue `protobuf:"bytes,331897373,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_UseMultiplePaths_State) Reset() {
	*x = Bgp_Neighbors_Neighbor_UseMultiplePaths_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[219]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_UseMultiplePaths_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_UseMultiplePaths_State) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_UseMultiplePaths_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[219]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_UseMultiplePaths_State.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_UseMultiplePaths_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 12, 2}
}

func (x *Bgp_Neighbors_Neighbor_UseMultiplePaths_State) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

type Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowMultipleAs *ywrapper.BoolValue `protobuf:"bytes,36123181,opt,name=allow_multiple_as,json=allowMultipleAs,proto3" json:"allow_multiple_as,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_Config) Reset() {
	*x = Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[220]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_Config) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[220]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_Config.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 12, 1, 0}
}

func (x *Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_Config) GetAllowMultipleAs() *ywrapper.BoolValue {
	if x != nil {
		return x.AllowMultipleAs
	}
	return nil
}

type Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowMultipleAs *ywrapper.BoolValue `protobuf:"bytes,215784138,opt,name=allow_multiple_as,json=allowMultipleAs,proto3" json:"allow_multiple_as,omitempty"`
}

func (x *Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_State) Reset() {
	*x = Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[221]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_State) ProtoMessage() {}

func (x *Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[221]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_State.ProtoReflect.Descriptor instead.
func (*Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 12, 1, 1}
}

func (x *Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_State) GetAllowMultipleAs() *ywrapper.BoolValue {
	if x != nil {
		return x.AllowMultipleAs
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AfiSafis         *Bgp_PeerGroups_PeerGroup_AfiSafis         `protobuf:"bytes,250127175,opt,name=afi_safis,json=afiSafis,proto3" json:"afi_safis,omitempty"`
	ApplyPolicy      *Bgp_PeerGroups_PeerGroup_ApplyPolicy      `protobuf:"bytes,152360191,opt,name=apply_policy,json=applyPolicy,proto3" json:"apply_policy,omitempty"`
	AsPathOptions    *Bgp_PeerGroups_PeerGroup_AsPathOptions    `protobuf:"bytes,277338017,opt,name=as_path_options,json=asPathOptions,proto3" json:"as_path_options,omitempty"`
	Config           *Bgp_PeerGroups_PeerGroup_Config           `protobuf:"bytes,153781546,opt,name=config,proto3" json:"config,omitempty"`
	EbgpMultihop     *Bgp_PeerGroups_PeerGroup_EbgpMultihop     `protobuf:"bytes,500921909,opt,name=ebgp_multihop,json=ebgpMultihop,proto3" json:"ebgp_multihop,omitempty"`
	ErrorHandling    *Bgp_PeerGroups_PeerGroup_ErrorHandling    `protobuf:"bytes,246526376,opt,name=error_handling,json=errorHandling,proto3" json:"error_handling,omitempty"`
	GracefulRestart  *Bgp_PeerGroups_PeerGroup_GracefulRestart  `protobuf:"bytes,435273119,opt,name=graceful_restart,json=gracefulRestart,proto3" json:"graceful_restart,omitempty"`
	LoggingOptions   *Bgp_PeerGroups_PeerGroup_LoggingOptions   `protobuf:"bytes,416074150,opt,name=logging_options,json=loggingOptions,proto3" json:"logging_options,omitempty"`
	RouteReflector   *Bgp_PeerGroups_PeerGroup_RouteReflector   `protobuf:"bytes,188380492,opt,name=route_reflector,json=routeReflector,proto3" json:"route_reflector,omitempty"`
	State            *Bgp_PeerGroups_PeerGroup_State            `protobuf:"bytes,330135367,opt,name=state,proto3" json:"state,omitempty"`
	Timers           *Bgp_PeerGroups_PeerGroup_Timers           `protobuf:"bytes,526017746,opt,name=timers,proto3" json:"timers,omitempty"`
	Transport        *Bgp_PeerGroups_PeerGroup_Transport        `protobuf:"bytes,458632903,opt,name=transport,proto3" json:"transport,omitempty"`
	UseMultiplePaths *Bgp_PeerGroups_PeerGroup_UseMultiplePaths `protobuf:"bytes,461603513,opt,name=use_multiple_paths,json=useMultiplePaths,proto3" json:"use_multiple_paths,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup) Reset() {
	*x = Bgp_PeerGroups_PeerGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[222]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[222]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *Bgp_PeerGroups_PeerGroup) GetAfiSafis() *Bgp_PeerGroups_PeerGroup_AfiSafis {
	if x != nil {
		return x.AfiSafis
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup) GetApplyPolicy() *Bgp_PeerGroups_PeerGroup_ApplyPolicy {
	if x != nil {
		return x.ApplyPolicy
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup) GetAsPathOptions() *Bgp_PeerGroups_PeerGroup_AsPathOptions {
	if x != nil {
		return x.AsPathOptions
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup) GetConfig() *Bgp_PeerGroups_PeerGroup_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup) GetEbgpMultihop() *Bgp_PeerGroups_PeerGroup_EbgpMultihop {
	if x != nil {
		return x.EbgpMultihop
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup) GetErrorHandling() *Bgp_PeerGroups_PeerGroup_ErrorHandling {
	if x != nil {
		return x.ErrorHandling
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup) GetGracefulRestart() *Bgp_PeerGroups_PeerGroup_GracefulRestart {
	if x != nil {
		return x.GracefulRestart
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup) GetLoggingOptions() *Bgp_PeerGroups_PeerGroup_LoggingOptions {
	if x != nil {
		return x.LoggingOptions
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup) GetRouteReflector() *Bgp_PeerGroups_PeerGroup_RouteReflector {
	if x != nil {
		return x.RouteReflector
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup) GetState() *Bgp_PeerGroups_PeerGroup_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup) GetTimers() *Bgp_PeerGroups_PeerGroup_Timers {
	if x != nil {
		return x.Timers
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup) GetTransport() *Bgp_PeerGroups_PeerGroup_Transport {
	if x != nil {
		return x.Transport
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup) GetUseMultiplePaths() *Bgp_PeerGroups_PeerGroup_UseMultiplePaths {
	if x != nil {
		return x.UseMultiplePaths
	}
	return nil
}

type Bgp_PeerGroups_PeerGroupKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerGroupName string                    `protobuf:"bytes,1,opt,name=peer_group_name,json=peerGroupName,proto3" json:"peer_group_name,omitempty"`
	PeerGroup     *Bgp_PeerGroups_PeerGroup `protobuf:"bytes,2,opt,name=peer_group,json=peerGroup,proto3" json:"peer_group,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroupKey) Reset() {
	*x = Bgp_PeerGroups_PeerGroupKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[223]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroupKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroupKey) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroupKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[223]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroupKey.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroupKey) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 1}
}

func (x *Bgp_PeerGroups_PeerGroupKey) GetPeerGroupName() string {
	if x != nil {
		return x.PeerGroupName
	}
	return ""
}

func (x *Bgp_PeerGroups_PeerGroupKey) GetPeerGroup() *Bgp_PeerGroups_PeerGroup {
	if x != nil {
		return x.PeerGroup
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AfiSafi []*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafiKey `protobuf:"bytes,312784818,rep,name=afi_safi,json=afiSafi,proto3" json:"afi_safi,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[224]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[224]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis) GetAfiSafi() []*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafiKey {
	if x != nil {
		return x.AfiSafi
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_ApplyPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_PeerGroups_PeerGroup_ApplyPolicy_Config `protobuf:"bytes,75970368,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_PeerGroups_PeerGroup_ApplyPolicy_State  `protobuf:"bytes,116889145,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_ApplyPolicy) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_ApplyPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[225]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_ApplyPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_ApplyPolicy) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_ApplyPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[225]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_ApplyPolicy.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_ApplyPolicy) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 1}
}

func (x *Bgp_PeerGroups_PeerGroup_ApplyPolicy) GetConfig() *Bgp_PeerGroups_PeerGroup_ApplyPolicy_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_ApplyPolicy) GetState() *Bgp_PeerGroups_PeerGroup_ApplyPolicy_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AsPathOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_PeerGroups_PeerGroup_AsPathOptions_Config `protobuf:"bytes,456104486,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_PeerGroups_PeerGroup_AsPathOptions_State  `protobuf:"bytes,181376915,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AsPathOptions) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AsPathOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[226]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AsPathOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AsPathOptions) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_AsPathOptions) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[226]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AsPathOptions.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AsPathOptions) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 2}
}

func (x *Bgp_PeerGroups_PeerGroup_AsPathOptions) GetConfig() *Bgp_PeerGroups_PeerGroup_AsPathOptions_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AsPathOptions) GetState() *Bgp_PeerGroups_PeerGroup_AsPathOptions_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthPassword     *ywrapper.StringValue              `protobuf:"bytes,6498467,opt,name=auth_password,json=authPassword,proto3" json:"auth_password,omitempty"`
	Description      *ywrapper.StringValue              `protobuf:"bytes,12029485,opt,name=description,proto3" json:"description,omitempty"`
	LocalAs          *ywrapper.UintValue                `protobuf:"bytes,314724599,opt,name=local_as,json=localAs,proto3" json:"local_as,omitempty"`
	PeerAs           *ywrapper.UintValue                `protobuf:"bytes,383940082,opt,name=peer_as,json=peerAs,proto3" json:"peer_as,omitempty"`
	PeerGroupName    *ywrapper.StringValue              `protobuf:"bytes,371592209,opt,name=peer_group_name,json=peerGroupName,proto3" json:"peer_group_name,omitempty"`
	PeerType         OpenconfigBgpPeerType              `protobuf:"varint,355563038,opt,name=peer_type,json=peerType,proto3,enum=openconfig.OpenconfigBgpPeerType" json:"peer_type,omitempty"`
	RemovePrivateAs  OpenconfigBgpRemovePrivateAsOption `protobuf:"varint,14237096,opt,name=remove_private_as,json=removePrivateAs,proto3,enum=openconfig.OpenconfigBgpRemovePrivateAsOption" json:"remove_private_as,omitempty"`
	RouteFlapDamping *ywrapper.BoolValue                `protobuf:"bytes,332103581,opt,name=route_flap_damping,json=routeFlapDamping,proto3" json:"route_flap_damping,omitempty"`
	SendCommunity    OpenconfigBgpCommunityType         `protobuf:"varint,181106575,opt,name=send_community,json=sendCommunity,proto3,enum=openconfig.OpenconfigBgpCommunityType" json:"send_community,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_Config) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[227]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_Config) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[227]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_Config.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 3}
}

func (x *Bgp_PeerGroups_PeerGroup_Config) GetAuthPassword() *ywrapper.StringValue {
	if x != nil {
		return x.AuthPassword
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_Config) GetDescription() *ywrapper.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_Config) GetLocalAs() *ywrapper.UintValue {
	if x != nil {
		return x.LocalAs
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_Config) GetPeerAs() *ywrapper.UintValue {
	if x != nil {
		return x.PeerAs
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_Config) GetPeerGroupName() *ywrapper.StringValue {
	if x != nil {
		return x.PeerGroupName
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_Config) GetPeerType() OpenconfigBgpPeerType {
	if x != nil {
		return x.PeerType
	}
	return OpenconfigBgpPeerType_OPENCONFIGBGPPEERTYPE_UNSET
}

func (x *Bgp_PeerGroups_PeerGroup_Config) GetRemovePrivateAs() OpenconfigBgpRemovePrivateAsOption {
	if x != nil {
		return x.RemovePrivateAs
	}
	return OpenconfigBgpRemovePrivateAsOption_OPENCONFIGBGPREMOVEPRIVATEASOPTION_UNSET
}

func (x *Bgp_PeerGroups_PeerGroup_Config) GetRouteFlapDamping() *ywrapper.BoolValue {
	if x != nil {
		return x.RouteFlapDamping
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_Config) GetSendCommunity() OpenconfigBgpCommunityType {
	if x != nil {
		return x.SendCommunity
	}
	return OpenconfigBgpCommunityType_OPENCONFIGBGPCOMMUNITYTYPE_NONE
}

type Bgp_PeerGroups_PeerGroup_EbgpMultihop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_PeerGroups_PeerGroup_EbgpMultihop_Config `protobuf:"bytes,141635162,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_PeerGroups_PeerGroup_EbgpMultihop_State  `protobuf:"bytes,105006583,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_EbgpMultihop) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_EbgpMultihop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[228]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_EbgpMultihop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_EbgpMultihop) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_EbgpMultihop) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[228]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_EbgpMultihop.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_EbgpMultihop) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 4}
}

func (x *Bgp_PeerGroups_PeerGroup_EbgpMultihop) GetConfig() *Bgp_PeerGroups_PeerGroup_EbgpMultihop_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_EbgpMultihop) GetState() *Bgp_PeerGroups_PeerGroup_EbgpMultihop_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_ErrorHandling struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_PeerGroups_PeerGroup_ErrorHandling_Config `protobuf:"bytes,129373069,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_PeerGroups_PeerGroup_ErrorHandling_State  `protobuf:"bytes,185058242,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_ErrorHandling) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_ErrorHandling{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[229]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_ErrorHandling) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_ErrorHandling) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_ErrorHandling) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[229]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_ErrorHandling.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_ErrorHandling) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 5}
}

func (x *Bgp_PeerGroups_PeerGroup_ErrorHandling) GetConfig() *Bgp_PeerGroups_PeerGroup_ErrorHandling_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_ErrorHandling) GetState() *Bgp_PeerGroups_PeerGroup_ErrorHandling_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_GracefulRestart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_PeerGroups_PeerGroup_GracefulRestart_Config `protobuf:"bytes,198248032,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_PeerGroups_PeerGroup_GracefulRestart_State  `protobuf:"bytes,400717273,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_GracefulRestart) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_GracefulRestart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[230]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_GracefulRestart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_GracefulRestart) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_GracefulRestart) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[230]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_GracefulRestart.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_GracefulRestart) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 6}
}

func (x *Bgp_PeerGroups_PeerGroup_GracefulRestart) GetConfig() *Bgp_PeerGroups_PeerGroup_GracefulRestart_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_GracefulRestart) GetState() *Bgp_PeerGroups_PeerGroup_GracefulRestart_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_LoggingOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_PeerGroups_PeerGroup_LoggingOptions_Config `protobuf:"bytes,434420007,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_PeerGroups_PeerGroup_LoggingOptions_State  `protobuf:"bytes,249925144,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_LoggingOptions) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_LoggingOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[231]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_LoggingOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_LoggingOptions) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_LoggingOptions) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[231]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_LoggingOptions.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_LoggingOptions) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 7}
}

func (x *Bgp_PeerGroups_PeerGroup_LoggingOptions) GetConfig() *Bgp_PeerGroups_PeerGroup_LoggingOptions_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_LoggingOptions) GetState() *Bgp_PeerGroups_PeerGroup_LoggingOptions_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_RouteReflector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_PeerGroups_PeerGroup_RouteReflector_Config `protobuf:"bytes,443865793,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_PeerGroups_PeerGroup_RouteReflector_State  `protobuf:"bytes,288824886,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_RouteReflector) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_RouteReflector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[232]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_RouteReflector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_RouteReflector) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_RouteReflector) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[232]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_RouteReflector.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_RouteReflector) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 8}
}

func (x *Bgp_PeerGroups_PeerGroup_RouteReflector) GetConfig() *Bgp_PeerGroups_PeerGroup_RouteReflector_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_RouteReflector) GetState() *Bgp_PeerGroups_PeerGroup_RouteReflector_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthPassword     *ywrapper.StringValue              `protobuf:"bytes,455861790,opt,name=auth_password,json=authPassword,proto3" json:"auth_password,omitempty"`
	Description      *ywrapper.StringValue              `protobuf:"bytes,311621920,opt,name=description,proto3" json:"description,omitempty"`
	LocalAs          *ywrapper.UintValue                `protobuf:"bytes,422140776,opt,name=local_as,json=localAs,proto3" json:"local_as,omitempty"`
	PeerAs           *ywrapper.UintValue                `protobuf:"bytes,441240123,opt,name=peer_as,json=peerAs,proto3" json:"peer_as,omitempty"`
	PeerGroupName    *ywrapper.StringValue              `protobuf:"bytes,69224716,opt,name=peer_group_name,json=peerGroupName,proto3" json:"peer_group_name,omitempty"`
	PeerType         OpenconfigBgpPeerType              `protobuf:"varint,193466091,opt,name=peer_type,json=peerType,proto3,enum=openconfig.OpenconfigBgpPeerType" json:"peer_type,omitempty"`
	RemovePrivateAs  OpenconfigBgpRemovePrivateAsOption `protobuf:"varint,452040661,opt,name=remove_private_as,json=removePrivateAs,proto3,enum=openconfig.OpenconfigBgpRemovePrivateAsOption" json:"remove_private_as,omitempty"`
	RouteFlapDamping *ywrapper.BoolValue                `protobuf:"bytes,288246426,opt,name=route_flap_damping,json=routeFlapDamping,proto3" json:"route_flap_damping,omitempty"`
	SendCommunity    OpenconfigBgpCommunityType         `protobuf:"varint,299170884,opt,name=send_community,json=sendCommunity,proto3,enum=openconfig.OpenconfigBgpCommunityType" json:"send_community,omitempty"`
	TotalPaths       *ywrapper.UintValue                `protobuf:"bytes,348273891,opt,name=total_paths,json=totalPaths,proto3" json:"total_paths,omitempty"`
	TotalPrefixes    *ywrapper.UintValue                `protobuf:"bytes,56338761,opt,name=total_prefixes,json=totalPrefixes,proto3" json:"total_prefixes,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_State) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[233]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_State) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[233]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_State.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 9}
}

func (x *Bgp_PeerGroups_PeerGroup_State) GetAuthPassword() *ywrapper.StringValue {
	if x != nil {
		return x.AuthPassword
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_State) GetDescription() *ywrapper.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_State) GetLocalAs() *ywrapper.UintValue {
	if x != nil {
		return x.LocalAs
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_State) GetPeerAs() *ywrapper.UintValue {
	if x != nil {
		return x.PeerAs
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_State) GetPeerGroupName() *ywrapper.StringValue {
	if x != nil {
		return x.PeerGroupName
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_State) GetPeerType() OpenconfigBgpPeerType {
	if x != nil {
		return x.PeerType
	}
	return OpenconfigBgpPeerType_OPENCONFIGBGPPEERTYPE_UNSET
}

func (x *Bgp_PeerGroups_PeerGroup_State) GetRemovePrivateAs() OpenconfigBgpRemovePrivateAsOption {
	if x != nil {
		return x.RemovePrivateAs
	}
	return OpenconfigBgpRemovePrivateAsOption_OPENCONFIGBGPREMOVEPRIVATEASOPTION_UNSET
}

func (x *Bgp_PeerGroups_PeerGroup_State) GetRouteFlapDamping() *ywrapper.BoolValue {
	if x != nil {
		return x.RouteFlapDamping
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_State) GetSendCommunity() OpenconfigBgpCommunityType {
	if x != nil {
		return x.SendCommunity
	}
	return OpenconfigBgpCommunityType_OPENCONFIGBGPCOMMUNITYTYPE_NONE
}

func (x *Bgp_PeerGroups_PeerGroup_State) GetTotalPaths() *ywrapper.UintValue {
	if x != nil {
		return x.TotalPaths
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_State) GetTotalPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.TotalPrefixes
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_Timers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_PeerGroups_PeerGroup_Timers_Config `protobuf:"bytes,519109779,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_PeerGroups_PeerGroup_Timers_State  `protobuf:"bytes,85401972,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_Timers) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_Timers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[234]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_Timers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_Timers) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_Timers) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[234]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_Timers.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_Timers) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 10}
}

func (x *Bgp_PeerGroups_PeerGroup_Timers) GetConfig() *Bgp_PeerGroups_PeerGroup_Timers_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_Timers) GetState() *Bgp_PeerGroups_PeerGroup_Timers_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_Transport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_PeerGroups_PeerGroup_Transport_Config `protobuf:"bytes,455258200,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_PeerGroups_PeerGroup_Transport_State  `protobuf:"bytes,265050097,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_Transport) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_Transport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[235]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_Transport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_Transport) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_Transport) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[235]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_Transport.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_Transport) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 11}
}

func (x *Bgp_PeerGroups_PeerGroup_Transport) GetConfig() *Bgp_PeerGroups_PeerGroup_Transport_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_Transport) GetState() *Bgp_PeerGroups_PeerGroup_Transport_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_UseMultiplePaths struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Config `protobuf:"bytes,381313678,opt,name=config,proto3" json:"config,omitempty"`
	Ebgp   *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp   `protobuf:"bytes,366207524,opt,name=ebgp,proto3" json:"ebgp,omitempty"`
	Ibgp   *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp   `protobuf:"bytes,326541728,opt,name=ibgp,proto3" json:"ibgp,omitempty"`
	State  *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_State  `protobuf:"bytes,357615163,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_UseMultiplePaths) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_UseMultiplePaths{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[236]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_UseMultiplePaths) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_UseMultiplePaths) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_UseMultiplePaths) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[236]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_UseMultiplePaths.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_UseMultiplePaths) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 12}
}

func (x *Bgp_PeerGroups_PeerGroup_UseMultiplePaths) GetConfig() *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_UseMultiplePaths) GetEbgp() *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp {
	if x != nil {
		return x.Ebgp
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_UseMultiplePaths) GetIbgp() *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp {
	if x != nil {
		return x.Ibgp
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_UseMultiplePaths) GetState() *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddPaths           *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_AddPaths           `protobuf:"bytes,201255409,opt,name=add_paths,json=addPaths,proto3" json:"add_paths,omitempty"`
	ApplyPolicy        *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy        `protobuf:"bytes,202505758,opt,name=apply_policy,json=applyPolicy,proto3" json:"apply_policy,omitempty"`
	Config             *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Config             `protobuf:"bytes,508377587,opt,name=config,proto3" json:"config,omitempty"`
	GracefulRestart    *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart    `protobuf:"bytes,478886278,opt,name=graceful_restart,json=gracefulRestart,proto3" json:"graceful_restart,omitempty"`
	Ipv4LabeledUnicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast `protobuf:"bytes,137178690,opt,name=ipv4_labeled_unicast,json=ipv4LabeledUnicast,proto3" json:"ipv4_labeled_unicast,omitempty"`
	Ipv4Unicast        *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast        `protobuf:"bytes,140609884,opt,name=ipv4_unicast,json=ipv4Unicast,proto3" json:"ipv4_unicast,omitempty"`
	Ipv6LabeledUnicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast `protobuf:"bytes,337792476,opt,name=ipv6_labeled_unicast,json=ipv6LabeledUnicast,proto3" json:"ipv6_labeled_unicast,omitempty"`
	Ipv6Unicast        *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast        `protobuf:"bytes,53968362,opt,name=ipv6_unicast,json=ipv6Unicast,proto3" json:"ipv6_unicast,omitempty"`
	L2VpnEvpn          *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn          `protobuf:"bytes,79699641,opt,name=l2vpn_evpn,json=l2vpnEvpn,proto3" json:"l2vpn_evpn,omitempty"`
	L2VpnVpls          *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls          `protobuf:"bytes,241731383,opt,name=l2vpn_vpls,json=l2vpnVpls,proto3" json:"l2vpn_vpls,omitempty"`
	L3VpnIpv4Multicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast `protobuf:"bytes,255869987,opt,name=l3vpn_ipv4_multicast,json=l3vpnIpv4Multicast,proto3" json:"l3vpn_ipv4_multicast,omitempty"`
	L3VpnIpv4Unicast   *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast   `protobuf:"bytes,284336198,opt,name=l3vpn_ipv4_unicast,json=l3vpnIpv4Unicast,proto3" json:"l3vpn_ipv4_unicast,omitempty"`
	L3VpnIpv6Multicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast `protobuf:"bytes,153166617,opt,name=l3vpn_ipv6_multicast,json=l3vpnIpv6Multicast,proto3" json:"l3vpn_ipv6_multicast,omitempty"`
	L3VpnIpv6Unicast   *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast   `protobuf:"bytes,373007784,opt,name=l3vpn_ipv6_unicast,json=l3vpnIpv6Unicast,proto3" json:"l3vpn_ipv6_unicast,omitempty"`
	SrtePolicyIpv4     *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv4     `protobuf:"bytes,327066566,opt,name=srte_policy_ipv4,json=srtePolicyIpv4,proto3" json:"srte_policy_ipv4,omitempty"`
	SrtePolicyIpv6     *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv6     `protobuf:"bytes,327066564,opt,name=srte_policy_ipv6,json=srtePolicyIpv6,proto3" json:"srte_policy_ipv6,omitempty"`
	State              *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_State              `protobuf:"bytes,327833172,opt,name=state,proto3" json:"state,omitempty"`
	UseMultiplePaths   *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths   `protobuf:"bytes,447495344,opt,name=use_multiple_paths,json=useMultiplePaths,proto3" json:"use_multiple_paths,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[237]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[237]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi) GetAddPaths() *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_AddPaths {
	if x != nil {
		return x.AddPaths
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi) GetApplyPolicy() *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy {
	if x != nil {
		return x.ApplyPolicy
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi) GetConfig() *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi) GetGracefulRestart() *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart {
	if x != nil {
		return x.GracefulRestart
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi) GetIpv4LabeledUnicast() *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast {
	if x != nil {
		return x.Ipv4LabeledUnicast
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi) GetIpv4Unicast() *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast {
	if x != nil {
		return x.Ipv4Unicast
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi) GetIpv6LabeledUnicast() *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast {
	if x != nil {
		return x.Ipv6LabeledUnicast
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi) GetIpv6Unicast() *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast {
	if x != nil {
		return x.Ipv6Unicast
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi) GetL2VpnEvpn() *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn {
	if x != nil {
		return x.L2VpnEvpn
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi) GetL2VpnVpls() *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls {
	if x != nil {
		return x.L2VpnVpls
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi) GetL3VpnIpv4Multicast() *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast {
	if x != nil {
		return x.L3VpnIpv4Multicast
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi) GetL3VpnIpv4Unicast() *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast {
	if x != nil {
		return x.L3VpnIpv4Unicast
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi) GetL3VpnIpv6Multicast() *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast {
	if x != nil {
		return x.L3VpnIpv6Multicast
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi) GetL3VpnIpv6Unicast() *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast {
	if x != nil {
		return x.L3VpnIpv6Unicast
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi) GetSrtePolicyIpv4() *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv4 {
	if x != nil {
		return x.SrtePolicyIpv4
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi) GetSrtePolicyIpv6() *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv6 {
	if x != nil {
		return x.SrtePolicyIpv6
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi) GetState() *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi) GetUseMultiplePaths() *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths {
	if x != nil {
		return x.UseMultiplePaths
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafiKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AfiSafiName OpenconfigBgpTypesAFISAFITYPE              `protobuf:"varint,1,opt,name=afi_safi_name,json=afiSafiName,proto3,enum=openconfig.OpenconfigBgpTypesAFISAFITYPE" json:"afi_safi_name,omitempty"`
	AfiSafi     *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi `protobuf:"bytes,2,opt,name=afi_safi,json=afiSafi,proto3" json:"afi_safi,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafiKey) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafiKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[238]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafiKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafiKey) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafiKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[238]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafiKey.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafiKey) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 1}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafiKey) GetAfiSafiName() OpenconfigBgpTypesAFISAFITYPE {
	if x != nil {
		return x.AfiSafiName
	}
	return OpenconfigBgpTypesAFISAFITYPE_OPENCONFIGBGPTYPESAFISAFITYPE_UNSET
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafiKey) GetAfiSafi() *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi {
	if x != nil {
		return x.AfiSafi
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_AddPaths struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_AddPaths_Config `protobuf:"bytes,455573782,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_AddPaths_State  `protobuf:"bytes,232302787,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_AddPaths) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_AddPaths{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[239]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_AddPaths) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_AddPaths) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_AddPaths) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[239]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_AddPaths.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_AddPaths) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 0}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_AddPaths) GetConfig() *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_AddPaths_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_AddPaths) GetState() *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_AddPaths_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_Config `protobuf:"bytes,232331247,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_State  `protobuf:"bytes,449938272,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[240]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[240]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 1}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy) GetConfig() *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy) GetState() *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AfiSafiName OpenconfigBgpTypesAFISAFITYPE `protobuf:"varint,347843082,opt,name=afi_safi_name,json=afiSafiName,proto3,enum=openconfig.OpenconfigBgpTypesAFISAFITYPE" json:"afi_safi_name,omitempty"`
	Enabled     *ywrapper.BoolValue           `protobuf:"bytes,269735941,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Config) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[241]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Config) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[241]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Config.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 2}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Config) GetAfiSafiName() OpenconfigBgpTypesAFISAFITYPE {
	if x != nil {
		return x.AfiSafiName
	}
	return OpenconfigBgpTypesAFISAFITYPE_OPENCONFIGBGPTYPESAFISAFITYPE_UNSET
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Config) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_Config `protobuf:"bytes,490254215,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_State  `protobuf:"bytes,163471864,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[242]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[242]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 3}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart) GetConfig() *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart) GetState() *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit `protobuf:"bytes,361063543,opt,name=prefix_limit,json=prefixLimit,proto3" json:"prefix_limit,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[243]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[243]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 4}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast) GetPrefixLimit() *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit {
	if x != nil {
		return x.PrefixLimit
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config      *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_Config      `protobuf:"bytes,342717489,opt,name=config,proto3" json:"config,omitempty"`
	PrefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit `protobuf:"bytes,212819737,opt,name=prefix_limit,json=prefixLimit,proto3" json:"prefix_limit,omitempty"`
	State       *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_State       `protobuf:"bytes,135676582,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[244]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[244]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 5}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast) GetConfig() *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast) GetPrefixLimit() *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit {
	if x != nil {
		return x.PrefixLimit
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast) GetState() *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit `protobuf:"bytes,445430937,opt,name=prefix_limit,json=prefixLimit,proto3" json:"prefix_limit,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[245]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[245]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 6}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast) GetPrefixLimit() *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit {
	if x != nil {
		return x.PrefixLimit
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config      *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_Config      `protobuf:"bytes,493608763,opt,name=config,proto3" json:"config,omitempty"`
	PrefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit `protobuf:"bytes,252276175,opt,name=prefix_limit,json=prefixLimit,proto3" json:"prefix_limit,omitempty"`
	State       *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_State       `protobuf:"bytes,254868156,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[246]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[246]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 7}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast) GetConfig() *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast) GetPrefixLimit() *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit {
	if x != nil {
		return x.PrefixLimit
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast) GetState() *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit `protobuf:"bytes,105691102,opt,name=prefix_limit,json=prefixLimit,proto3" json:"prefix_limit,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[247]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[247]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 8}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn) GetPrefixLimit() *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit {
	if x != nil {
		return x.PrefixLimit
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit `protobuf:"bytes,341664020,opt,name=prefix_limit,json=prefixLimit,proto3" json:"prefix_limit,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[248]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[248]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 9}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls) GetPrefixLimit() *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit {
	if x != nil {
		return x.PrefixLimit
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit `protobuf:"bytes,310847952,opt,name=prefix_limit,json=prefixLimit,proto3" json:"prefix_limit,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[249]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[249]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 10}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast) GetPrefixLimit() *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit {
	if x != nil {
		return x.PrefixLimit
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit `protobuf:"bytes,297411931,opt,name=prefix_limit,json=prefixLimit,proto3" json:"prefix_limit,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[250]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[250]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 11}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast) GetPrefixLimit() *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit {
	if x != nil {
		return x.PrefixLimit
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit `protobuf:"bytes,326663358,opt,name=prefix_limit,json=prefixLimit,proto3" json:"prefix_limit,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[251]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[251]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 12}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast) GetPrefixLimit() *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit {
	if x != nil {
		return x.PrefixLimit
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit `protobuf:"bytes,504786533,opt,name=prefix_limit,json=prefixLimit,proto3" json:"prefix_limit,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[252]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[252]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 13}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast) GetPrefixLimit() *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit {
	if x != nil {
		return x.PrefixLimit
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv4 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit `protobuf:"bytes,251928539,opt,name=prefix_limit,json=prefixLimit,proto3" json:"prefix_limit,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv4) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv4{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[253]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv4) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv4) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[253]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv4.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv4) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 14}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv4) GetPrefixLimit() *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit {
	if x != nil {
		return x.PrefixLimit
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv6 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit `protobuf:"bytes,315296977,opt,name=prefix_limit,json=prefixLimit,proto3" json:"prefix_limit,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv6) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv6{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[254]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv6) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv6) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv6) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[254]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv6.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv6) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 15}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv6) GetPrefixLimit() *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit {
	if x != nil {
		return x.PrefixLimit
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AfiSafiName OpenconfigBgpTypesAFISAFITYPE `protobuf:"varint,429226465,opt,name=afi_safi_name,json=afiSafiName,proto3,enum=openconfig.OpenconfigBgpTypesAFISAFITYPE" json:"afi_safi_name,omitempty"`
	Enabled     *ywrapper.BoolValue           `protobuf:"bytes,372443382,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_State) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[255]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_State) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[255]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_State.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 16}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_State) GetAfiSafiName() OpenconfigBgpTypesAFISAFITYPE {
	if x != nil {
		return x.AfiSafiName
	}
	return OpenconfigBgpTypesAFISAFITYPE_OPENCONFIGBGPTYPESAFISAFITYPE_UNSET
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_State) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Config `protobuf:"bytes,473775173,opt,name=config,proto3" json:"config,omitempty"`
	Ebgp   *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp   `protobuf:"bytes,234943739,opt,name=ebgp,proto3" json:"ebgp,omitempty"`
	Ibgp   *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp   `protobuf:"bytes,463719751,opt,name=ibgp,proto3" json:"ibgp,omitempty"`
	State  *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_State  `protobuf:"bytes,156183098,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[256]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[256]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 17}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths) GetConfig() *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths) GetEbgp() *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp {
	if x != nil {
		return x.Ebgp
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths) GetIbgp() *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp {
	if x != nil {
		return x.Ibgp
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths) GetState() *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_AddPaths_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EligiblePrefixPolicy *ywrapper.StringValue `protobuf:"bytes,139459978,opt,name=eligible_prefix_policy,json=eligiblePrefixPolicy,proto3" json:"eligible_prefix_policy,omitempty"`
	Receive              *ywrapper.BoolValue   `protobuf:"bytes,137928260,opt,name=receive,proto3" json:"receive,omitempty"`
	Send                 *ywrapper.BoolValue   `protobuf:"bytes,262440859,opt,name=send,proto3" json:"send,omitempty"`
	SendMax              *ywrapper.UintValue   `protobuf:"bytes,325972006,opt,name=send_max,json=sendMax,proto3" json:"send_max,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_AddPaths_Config) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_AddPaths_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[257]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_AddPaths_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_AddPaths_Config) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_AddPaths_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[257]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_AddPaths_Config.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_AddPaths_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 0, 0}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_AddPaths_Config) GetEligiblePrefixPolicy() *ywrapper.StringValue {
	if x != nil {
		return x.EligiblePrefixPolicy
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_AddPaths_Config) GetReceive() *ywrapper.BoolValue {
	if x != nil {
		return x.Receive
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_AddPaths_Config) GetSend() *ywrapper.BoolValue {
	if x != nil {
		return x.Send
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_AddPaths_Config) GetSendMax() *ywrapper.UintValue {
	if x != nil {
		return x.SendMax
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_AddPaths_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EligiblePrefixPolicy *ywrapper.StringValue `protobuf:"bytes,353691453,opt,name=eligible_prefix_policy,json=eligiblePrefixPolicy,proto3" json:"eligible_prefix_policy,omitempty"`
	Receive              *ywrapper.BoolValue   `protobuf:"bytes,385163437,opt,name=receive,proto3" json:"receive,omitempty"`
	Send                 *ywrapper.BoolValue   `protobuf:"bytes,179848848,opt,name=send,proto3" json:"send,omitempty"`
	SendMax              *ywrapper.UintValue   `protobuf:"bytes,412153781,opt,name=send_max,json=sendMax,proto3" json:"send_max,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_AddPaths_State) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_AddPaths_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[258]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_AddPaths_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_AddPaths_State) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_AddPaths_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[258]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_AddPaths_State.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_AddPaths_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 0, 1}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_AddPaths_State) GetEligiblePrefixPolicy() *ywrapper.StringValue {
	if x != nil {
		return x.EligiblePrefixPolicy
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_AddPaths_State) GetReceive() *ywrapper.BoolValue {
	if x != nil {
		return x.Receive
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_AddPaths_State) GetSend() *ywrapper.BoolValue {
	if x != nil {
		return x.Send
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_AddPaths_State) GetSendMax() *ywrapper.UintValue {
	if x != nil {
		return x.SendMax
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultExportPolicy OpenconfigRoutingPolicyDefaultPolicyType `protobuf:"varint,533934547,opt,name=default_export_policy,json=defaultExportPolicy,proto3,enum=openconfig.OpenconfigRoutingPolicyDefaultPolicyType" json:"default_export_policy,omitempty"`
	DefaultImportPolicy OpenconfigRoutingPolicyDefaultPolicyType `protobuf:"varint,450403272,opt,name=default_import_policy,json=defaultImportPolicy,proto3,enum=openconfig.OpenconfigRoutingPolicyDefaultPolicyType" json:"default_import_policy,omitempty"`
	ExportPolicy        []*ywrapper.StringValue                  `protobuf:"bytes,55835655,rep,name=export_policy,json=exportPolicy,proto3" json:"export_policy,omitempty"`
	ImportPolicy        []*ywrapper.StringValue                  `protobuf:"bytes,359694444,rep,name=import_policy,json=importPolicy,proto3" json:"import_policy,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_Config) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[259]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_Config) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[259]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_Config.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 1, 0}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_Config) GetDefaultExportPolicy() OpenconfigRoutingPolicyDefaultPolicyType {
	if x != nil {
		return x.DefaultExportPolicy
	}
	return OpenconfigRoutingPolicyDefaultPolicyType_OPENCONFIGROUTINGPOLICYDEFAULTPOLICYTYPE_REJECT_ROUTE
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_Config) GetDefaultImportPolicy() OpenconfigRoutingPolicyDefaultPolicyType {
	if x != nil {
		return x.DefaultImportPolicy
	}
	return OpenconfigRoutingPolicyDefaultPolicyType_OPENCONFIGROUTINGPOLICYDEFAULTPOLICYTYPE_REJECT_ROUTE
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_Config) GetExportPolicy() []*ywrapper.StringValue {
	if x != nil {
		return x.ExportPolicy
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_Config) GetImportPolicy() []*ywrapper.StringValue {
	if x != nil {
		return x.ImportPolicy
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultExportPolicy OpenconfigRoutingPolicyDefaultPolicyType `protobuf:"varint,255349872,opt,name=default_export_policy,json=defaultExportPolicy,proto3,enum=openconfig.OpenconfigRoutingPolicyDefaultPolicyType" json:"default_export_policy,omitempty"`
	DefaultImportPolicy OpenconfigRoutingPolicyDefaultPolicyType `protobuf:"varint,179651035,opt,name=default_import_policy,json=defaultImportPolicy,proto3,enum=openconfig.OpenconfigRoutingPolicyDefaultPolicyType" json:"default_import_policy,omitempty"`
	ExportPolicy        []*ywrapper.StringValue                  `protobuf:"bytes,257098172,rep,name=export_policy,json=exportPolicy,proto3" json:"export_policy,omitempty"`
	ImportPolicy        []*ywrapper.StringValue                  `protobuf:"bytes,180849607,rep,name=import_policy,json=importPolicy,proto3" json:"import_policy,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_State) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[260]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_State) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[260]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_State.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 1, 1}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_State) GetDefaultExportPolicy() OpenconfigRoutingPolicyDefaultPolicyType {
	if x != nil {
		return x.DefaultExportPolicy
	}
	return OpenconfigRoutingPolicyDefaultPolicyType_OPENCONFIGROUTINGPOLICYDEFAULTPOLICYTYPE_REJECT_ROUTE
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_State) GetDefaultImportPolicy() OpenconfigRoutingPolicyDefaultPolicyType {
	if x != nil {
		return x.DefaultImportPolicy
	}
	return OpenconfigRoutingPolicyDefaultPolicyType_OPENCONFIGROUTINGPOLICYDEFAULTPOLICYTYPE_REJECT_ROUTE
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_State) GetExportPolicy() []*ywrapper.StringValue {
	if x != nil {
		return x.ExportPolicy
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_State) GetImportPolicy() []*ywrapper.StringValue {
	if x != nil {
		return x.ImportPolicy
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled *ywrapper.BoolValue `protobuf:"bytes,121375897,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_Config) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[261]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_Config) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[261]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_Config.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 3, 0}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_Config) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled *ywrapper.BoolValue `protobuf:"bytes,267443626,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_State) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[262]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_State) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[262]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_State.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 3, 1}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_State) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config `protobuf:"bytes,309422952,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State  `protobuf:"bytes,523553921,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[263]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[263]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 4, 0}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) GetConfig() *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) GetState() *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPrefixes         *ywrapper.UintValue      `protobuf:"bytes,265236132,opt,name=max_prefixes,json=maxPrefixes,proto3" json:"max_prefixes,omitempty"`
	PreventTeardown     *ywrapper.BoolValue      `protobuf:"bytes,115434424,opt,name=prevent_teardown,json=preventTeardown,proto3" json:"prevent_teardown,omitempty"`
	RestartTimer        *ywrapper.Decimal64Value `protobuf:"bytes,173640968,opt,name=restart_timer,json=restartTimer,proto3" json:"restart_timer,omitempty"`
	WarningThresholdPct *ywrapper.UintValue      `protobuf:"bytes,322744201,opt,name=warning_threshold_pct,json=warningThresholdPct,proto3" json:"warning_threshold_pct,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[264]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) ProtoMessage() {
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[264]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 4, 0, 0}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) GetMaxPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.MaxPrefixes
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) GetPreventTeardown() *ywrapper.BoolValue {
	if x != nil {
		return x.PreventTeardown
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) GetRestartTimer() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RestartTimer
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) GetWarningThresholdPct() *ywrapper.UintValue {
	if x != nil {
		return x.WarningThresholdPct
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPrefixes         *ywrapper.UintValue      `protobuf:"bytes,483710399,opt,name=max_prefixes,json=maxPrefixes,proto3" json:"max_prefixes,omitempty"`
	PreventTeardown     *ywrapper.BoolValue      `protobuf:"bytes,477184175,opt,name=prevent_teardown,json=preventTeardown,proto3" json:"prevent_teardown,omitempty"`
	RestartTimer        *ywrapper.Decimal64Value `protobuf:"bytes,263089101,opt,name=restart_timer,json=restartTimer,proto3" json:"restart_timer,omitempty"`
	WarningThresholdPct *ywrapper.UintValue      `protobuf:"bytes,1277600,opt,name=warning_threshold_pct,json=warningThresholdPct,proto3" json:"warning_threshold_pct,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[265]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) ProtoMessage() {
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[265]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 4, 0, 1}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) GetMaxPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.MaxPrefixes
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) GetPreventTeardown() *ywrapper.BoolValue {
	if x != nil {
		return x.PreventTeardown
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) GetRestartTimer() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RestartTimer
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) GetWarningThresholdPct() *ywrapper.UintValue {
	if x != nil {
		return x.WarningThresholdPct
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SendDefaultRoute *ywrapper.BoolValue `protobuf:"bytes,384700686,opt,name=send_default_route,json=sendDefaultRoute,proto3" json:"send_default_route,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_Config) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[266]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_Config) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[266]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_Config.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 5, 0}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_Config) GetSendDefaultRoute() *ywrapper.BoolValue {
	if x != nil {
		return x.SendDefaultRoute
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config `protobuf:"bytes,157795054,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State  `protobuf:"bytes,389032731,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[267]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[267]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 5, 1}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit) GetConfig() *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit) GetState() *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SendDefaultRoute *ywrapper.BoolValue `protobuf:"bytes,107064811,opt,name=send_default_route,json=sendDefaultRoute,proto3" json:"send_default_route,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_State) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[268]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_State) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[268]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_State.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 5, 2}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_State) GetSendDefaultRoute() *ywrapper.BoolValue {
	if x != nil {
		return x.SendDefaultRoute
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPrefixes         *ywrapper.UintValue      `protobuf:"bytes,418322230,opt,name=max_prefixes,json=maxPrefixes,proto3" json:"max_prefixes,omitempty"`
	PreventTeardown     *ywrapper.BoolValue      `protobuf:"bytes,359715194,opt,name=prevent_teardown,json=preventTeardown,proto3" json:"prevent_teardown,omitempty"`
	RestartTimer        *ywrapper.Decimal64Value `protobuf:"bytes,220200618,opt,name=restart_timer,json=restartTimer,proto3" json:"restart_timer,omitempty"`
	WarningThresholdPct *ywrapper.UintValue      `protobuf:"bytes,143331191,opt,name=warning_threshold_pct,json=warningThresholdPct,proto3" json:"warning_threshold_pct,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[269]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[269]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 5, 1, 0}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) GetMaxPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.MaxPrefixes
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) GetPreventTeardown() *ywrapper.BoolValue {
	if x != nil {
		return x.PreventTeardown
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) GetRestartTimer() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RestartTimer
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) GetWarningThresholdPct() *ywrapper.UintValue {
	if x != nil {
		return x.WarningThresholdPct
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPrefixes         *ywrapper.UintValue      `protobuf:"bytes,131760901,opt,name=max_prefixes,json=maxPrefixes,proto3" json:"max_prefixes,omitempty"`
	PreventTeardown     *ywrapper.BoolValue      `protobuf:"bytes,366191765,opt,name=prevent_teardown,json=preventTeardown,proto3" json:"prevent_teardown,omitempty"`
	RestartTimer        *ywrapper.Decimal64Value `protobuf:"bytes,450460315,opt,name=restart_timer,json=restartTimer,proto3" json:"restart_timer,omitempty"`
	WarningThresholdPct *ywrapper.UintValue      `protobuf:"bytes,193895618,opt,name=warning_threshold_pct,json=warningThresholdPct,proto3" json:"warning_threshold_pct,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[270]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[270]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 5, 1, 1}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) GetMaxPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.MaxPrefixes
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) GetPreventTeardown() *ywrapper.BoolValue {
	if x != nil {
		return x.PreventTeardown
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) GetRestartTimer() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RestartTimer
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) GetWarningThresholdPct() *ywrapper.UintValue {
	if x != nil {
		return x.WarningThresholdPct
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config `protobuf:"bytes,445411182,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State  `protobuf:"bytes,339123355,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[271]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[271]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 6, 0}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) GetConfig() *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) GetState() *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPrefixes         *ywrapper.UintValue      `protobuf:"bytes,146615478,opt,name=max_prefixes,json=maxPrefixes,proto3" json:"max_prefixes,omitempty"`
	PreventTeardown     *ywrapper.BoolValue      `protobuf:"bytes,191545082,opt,name=prevent_teardown,json=preventTeardown,proto3" json:"prevent_teardown,omitempty"`
	RestartTimer        *ywrapper.Decimal64Value `protobuf:"bytes,244045610,opt,name=restart_timer,json=restartTimer,proto3" json:"restart_timer,omitempty"`
	WarningThresholdPct *ywrapper.UintValue      `protobuf:"bytes,88700919,opt,name=warning_threshold_pct,json=warningThresholdPct,proto3" json:"warning_threshold_pct,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[272]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) ProtoMessage() {
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[272]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 6, 0, 0}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) GetMaxPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.MaxPrefixes
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) GetPreventTeardown() *ywrapper.BoolValue {
	if x != nil {
		return x.PreventTeardown
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) GetRestartTimer() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RestartTimer
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) GetWarningThresholdPct() *ywrapper.UintValue {
	if x != nil {
		return x.WarningThresholdPct
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPrefixes         *ywrapper.UintValue      `protobuf:"bytes,290948997,opt,name=max_prefixes,json=maxPrefixes,proto3" json:"max_prefixes,omitempty"`
	PreventTeardown     *ywrapper.BoolValue      `protobuf:"bytes,20738325,opt,name=prevent_teardown,json=preventTeardown,proto3" json:"prevent_teardown,omitempty"`
	RestartTimer        *ywrapper.Decimal64Value `protobuf:"bytes,178753563,opt,name=restart_timer,json=restartTimer,proto3" json:"restart_timer,omitempty"`
	WarningThresholdPct *ywrapper.UintValue      `protobuf:"bytes,345629250,opt,name=warning_threshold_pct,json=warningThresholdPct,proto3" json:"warning_threshold_pct,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[273]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) ProtoMessage() {
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[273]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 6, 0, 1}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) GetMaxPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.MaxPrefixes
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) GetPreventTeardown() *ywrapper.BoolValue {
	if x != nil {
		return x.PreventTeardown
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) GetRestartTimer() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RestartTimer
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) GetWarningThresholdPct() *ywrapper.UintValue {
	if x != nil {
		return x.WarningThresholdPct
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SendDefaultRoute *ywrapper.BoolValue `protobuf:"bytes,18828,opt,name=send_default_route,json=sendDefaultRoute,proto3" json:"send_default_route,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_Config) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[274]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_Config) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[274]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_Config.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 7, 0}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_Config) GetSendDefaultRoute() *ywrapper.BoolValue {
	if x != nil {
		return x.SendDefaultRoute
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config `protobuf:"bytes,289727408,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State  `protobuf:"bytes,41570601,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[275]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[275]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 7, 1}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit) GetConfig() *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit) GetState() *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SendDefaultRoute *ywrapper.BoolValue `protobuf:"bytes,506003469,opt,name=send_default_route,json=sendDefaultRoute,proto3" json:"send_default_route,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_State) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[276]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_State) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[276]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_State.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 7, 2}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_State) GetSendDefaultRoute() *ywrapper.BoolValue {
	if x != nil {
		return x.SendDefaultRoute
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPrefixes         *ywrapper.UintValue      `protobuf:"bytes,355891004,opt,name=max_prefixes,json=maxPrefixes,proto3" json:"max_prefixes,omitempty"`
	PreventTeardown     *ywrapper.BoolValue      `protobuf:"bytes,151318432,opt,name=prevent_teardown,json=preventTeardown,proto3" json:"prevent_teardown,omitempty"`
	RestartTimer        *ywrapper.Decimal64Value `protobuf:"bytes,152750096,opt,name=restart_timer,json=restartTimer,proto3" json:"restart_timer,omitempty"`
	WarningThresholdPct *ywrapper.UintValue      `protobuf:"bytes,324893521,opt,name=warning_threshold_pct,json=warningThresholdPct,proto3" json:"warning_threshold_pct,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[277]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[277]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 7, 1, 0}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) GetMaxPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.MaxPrefixes
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) GetPreventTeardown() *ywrapper.BoolValue {
	if x != nil {
		return x.PreventTeardown
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) GetRestartTimer() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RestartTimer
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) GetWarningThresholdPct() *ywrapper.UintValue {
	if x != nil {
		return x.WarningThresholdPct
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPrefixes         *ywrapper.UintValue      `protobuf:"bytes,455074263,opt,name=max_prefixes,json=maxPrefixes,proto3" json:"max_prefixes,omitempty"`
	PreventTeardown     *ywrapper.BoolValue      `protobuf:"bytes,284991831,opt,name=prevent_teardown,json=preventTeardown,proto3" json:"prevent_teardown,omitempty"`
	RestartTimer        *ywrapper.Decimal64Value `protobuf:"bytes,30620149,opt,name=restart_timer,json=restartTimer,proto3" json:"restart_timer,omitempty"`
	WarningThresholdPct *ywrapper.UintValue      `protobuf:"bytes,432641032,opt,name=warning_threshold_pct,json=warningThresholdPct,proto3" json:"warning_threshold_pct,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[278]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[278]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 7, 1, 1}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) GetMaxPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.MaxPrefixes
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) GetPreventTeardown() *ywrapper.BoolValue {
	if x != nil {
		return x.PreventTeardown
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) GetRestartTimer() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RestartTimer
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) GetWarningThresholdPct() *ywrapper.UintValue {
	if x != nil {
		return x.WarningThresholdPct
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config `protobuf:"bytes,398515503,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State  `protobuf:"bytes,195903136,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[279]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[279]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 8, 0}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit) GetConfig() *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit) GetState() *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPrefixes         *ywrapper.UintValue      `protobuf:"bytes,241299537,opt,name=max_prefixes,json=maxPrefixes,proto3" json:"max_prefixes,omitempty"`
	PreventTeardown     *ywrapper.BoolValue      `protobuf:"bytes,263574489,opt,name=prevent_teardown,json=preventTeardown,proto3" json:"prevent_teardown,omitempty"`
	RestartTimer        *ywrapper.Decimal64Value `protobuf:"bytes,445854015,opt,name=restart_timer,json=restartTimer,proto3" json:"restart_timer,omitempty"`
	WarningThresholdPct *ywrapper.UintValue      `protobuf:"bytes,254467262,opt,name=warning_threshold_pct,json=warningThresholdPct,proto3" json:"warning_threshold_pct,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[280]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[280]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 8, 0, 0}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config) GetMaxPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.MaxPrefixes
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config) GetPreventTeardown() *ywrapper.BoolValue {
	if x != nil {
		return x.PreventTeardown
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config) GetRestartTimer() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RestartTimer
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config) GetWarningThresholdPct() *ywrapper.UintValue {
	if x != nil {
		return x.WarningThresholdPct
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPrefixes         *ywrapper.UintValue      `protobuf:"bytes,18344748,opt,name=max_prefixes,json=maxPrefixes,proto3" json:"max_prefixes,omitempty"`
	PreventTeardown     *ywrapper.BoolValue      `protobuf:"bytes,227854480,opt,name=prevent_teardown,json=preventTeardown,proto3" json:"prevent_teardown,omitempty"`
	RestartTimer        *ywrapper.Decimal64Value `protobuf:"bytes,275189024,opt,name=restart_timer,json=restartTimer,proto3" json:"restart_timer,omitempty"`
	WarningThresholdPct *ywrapper.UintValue      `protobuf:"bytes,53209185,opt,name=warning_threshold_pct,json=warningThresholdPct,proto3" json:"warning_threshold_pct,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[281]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[281]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 8, 0, 1}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State) GetMaxPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.MaxPrefixes
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State) GetPreventTeardown() *ywrapper.BoolValue {
	if x != nil {
		return x.PreventTeardown
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State) GetRestartTimer() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RestartTimer
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State) GetWarningThresholdPct() *ywrapper.UintValue {
	if x != nil {
		return x.WarningThresholdPct
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config `protobuf:"bytes,467187353,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State  `protobuf:"bytes,482841454,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[282]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[282]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 9, 0}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit) GetConfig() *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit) GetState() *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPrefixes         *ywrapper.UintValue      `protobuf:"bytes,91214535,opt,name=max_prefixes,json=maxPrefixes,proto3" json:"max_prefixes,omitempty"`
	PreventTeardown     *ywrapper.BoolValue      `protobuf:"bytes,237003527,opt,name=prevent_teardown,json=preventTeardown,proto3" json:"prevent_teardown,omitempty"`
	RestartTimer        *ywrapper.Decimal64Value `protobuf:"bytes,346653317,opt,name=restart_timer,json=restartTimer,proto3" json:"restart_timer,omitempty"`
	WarningThresholdPct *ywrapper.UintValue      `protobuf:"bytes,159760088,opt,name=warning_threshold_pct,json=warningThresholdPct,proto3" json:"warning_threshold_pct,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[283]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[283]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 9, 0, 0}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config) GetMaxPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.MaxPrefixes
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config) GetPreventTeardown() *ywrapper.BoolValue {
	if x != nil {
		return x.PreventTeardown
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config) GetRestartTimer() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RestartTimer
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config) GetWarningThresholdPct() *ywrapper.UintValue {
	if x != nil {
		return x.WarningThresholdPct
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPrefixes         *ywrapper.UintValue      `protobuf:"bytes,199694518,opt,name=max_prefixes,json=maxPrefixes,proto3" json:"max_prefixes,omitempty"`
	PreventTeardown     *ywrapper.BoolValue      `protobuf:"bytes,38234874,opt,name=prevent_teardown,json=preventTeardown,proto3" json:"prevent_teardown,omitempty"`
	RestartTimer        *ywrapper.Decimal64Value `protobuf:"bytes,160062250,opt,name=restart_timer,json=restartTimer,proto3" json:"restart_timer,omitempty"`
	WarningThresholdPct *ywrapper.UintValue      `protobuf:"bytes,387218423,opt,name=warning_threshold_pct,json=warningThresholdPct,proto3" json:"warning_threshold_pct,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[284]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[284]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 9, 0, 1}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State) GetMaxPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.MaxPrefixes
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State) GetPreventTeardown() *ywrapper.BoolValue {
	if x != nil {
		return x.PreventTeardown
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State) GetRestartTimer() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RestartTimer
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State) GetWarningThresholdPct() *ywrapper.UintValue {
	if x != nil {
		return x.WarningThresholdPct
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config `protobuf:"bytes,535845477,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State  `protobuf:"bytes,213445338,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[285]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[285]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 10, 0}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) GetConfig() *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) GetState() *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPrefixes         *ywrapper.UintValue      `protobuf:"bytes,411640219,opt,name=max_prefixes,json=maxPrefixes,proto3" json:"max_prefixes,omitempty"`
	PreventTeardown     *ywrapper.BoolValue      `protobuf:"bytes,324001971,opt,name=prevent_teardown,json=preventTeardown,proto3" json:"prevent_teardown,omitempty"`
	RestartTimer        *ywrapper.Decimal64Value `protobuf:"bytes,433801169,opt,name=restart_timer,json=restartTimer,proto3" json:"restart_timer,omitempty"`
	WarningThresholdPct *ywrapper.UintValue      `protobuf:"bytes,497579212,opt,name=warning_threshold_pct,json=warningThresholdPct,proto3" json:"warning_threshold_pct,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[286]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config) ProtoMessage() {
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[286]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 10, 0, 0}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config) GetMaxPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.MaxPrefixes
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config) GetPreventTeardown() *ywrapper.BoolValue {
	if x != nil {
		return x.PreventTeardown
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config) GetRestartTimer() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RestartTimer
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config) GetWarningThresholdPct() *ywrapper.UintValue {
	if x != nil {
		return x.WarningThresholdPct
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPrefixes         *ywrapper.UintValue      `protobuf:"bytes,186248042,opt,name=max_prefixes,json=maxPrefixes,proto3" json:"max_prefixes,omitempty"`
	PreventTeardown     *ywrapper.BoolValue      `protobuf:"bytes,519865558,opt,name=prevent_teardown,json=preventTeardown,proto3" json:"prevent_teardown,omitempty"`
	RestartTimer        *ywrapper.Decimal64Value `protobuf:"bytes,300018566,opt,name=restart_timer,json=restartTimer,proto3" json:"restart_timer,omitempty"`
	WarningThresholdPct *ywrapper.UintValue      `protobuf:"bytes,322608843,opt,name=warning_threshold_pct,json=warningThresholdPct,proto3" json:"warning_threshold_pct,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[287]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State) ProtoMessage() {
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[287]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 10, 0, 1}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State) GetMaxPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.MaxPrefixes
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State) GetPreventTeardown() *ywrapper.BoolValue {
	if x != nil {
		return x.PreventTeardown
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State) GetRestartTimer() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RestartTimer
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State) GetWarningThresholdPct() *ywrapper.UintValue {
	if x != nil {
		return x.WarningThresholdPct
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config `protobuf:"bytes,96279180,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State  `protobuf:"bytes,14067973,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[288]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[288]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 11, 0}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) GetConfig() *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) GetState() *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPrefixes         *ywrapper.UintValue      `protobuf:"bytes,110149504,opt,name=max_prefixes,json=maxPrefixes,proto3" json:"max_prefixes,omitempty"`
	PreventTeardown     *ywrapper.BoolValue      `protobuf:"bytes,352262364,opt,name=prevent_teardown,json=preventTeardown,proto3" json:"prevent_teardown,omitempty"`
	RestartTimer        *ywrapper.Decimal64Value `protobuf:"bytes,175666220,opt,name=restart_timer,json=restartTimer,proto3" json:"restart_timer,omitempty"`
	WarningThresholdPct *ywrapper.UintValue      `protobuf:"bytes,6365333,opt,name=warning_threshold_pct,json=warningThresholdPct,proto3" json:"warning_threshold_pct,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[289]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config) ProtoMessage() {
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[289]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 11, 0, 0}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config) GetMaxPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.MaxPrefixes
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config) GetPreventTeardown() *ywrapper.BoolValue {
	if x != nil {
		return x.PreventTeardown
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config) GetRestartTimer() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RestartTimer
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config) GetWarningThresholdPct() *ywrapper.UintValue {
	if x != nil {
		return x.WarningThresholdPct
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPrefixes         *ywrapper.UintValue      `protobuf:"bytes,446126011,opt,name=max_prefixes,json=maxPrefixes,proto3" json:"max_prefixes,omitempty"`
	PreventTeardown     *ywrapper.BoolValue      `protobuf:"bytes,341174995,opt,name=prevent_teardown,json=preventTeardown,proto3" json:"prevent_teardown,omitempty"`
	RestartTimer        *ywrapper.Decimal64Value `protobuf:"bytes,237956593,opt,name=restart_timer,json=restartTimer,proto3" json:"restart_timer,omitempty"`
	WarningThresholdPct *ywrapper.UintValue      `protobuf:"bytes,311067884,opt,name=warning_threshold_pct,json=warningThresholdPct,proto3" json:"warning_threshold_pct,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[290]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[290]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 11, 0, 1}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State) GetMaxPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.MaxPrefixes
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State) GetPreventTeardown() *ywrapper.BoolValue {
	if x != nil {
		return x.PreventTeardown
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State) GetRestartTimer() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RestartTimer
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State) GetWarningThresholdPct() *ywrapper.UintValue {
	if x != nil {
		return x.WarningThresholdPct
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config `protobuf:"bytes,18706191,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State  `protobuf:"bytes,532513280,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[291]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[291]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 12, 0}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) GetConfig() *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) GetState() *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPrefixes         *ywrapper.UintValue      `protobuf:"bytes,72197553,opt,name=max_prefixes,json=maxPrefixes,proto3" json:"max_prefixes,omitempty"`
	PreventTeardown     *ywrapper.BoolValue      `protobuf:"bytes,146651961,opt,name=prevent_teardown,json=preventTeardown,proto3" json:"prevent_teardown,omitempty"`
	RestartTimer        *ywrapper.Decimal64Value `protobuf:"bytes,169170079,opt,name=restart_timer,json=restartTimer,proto3" json:"restart_timer,omitempty"`
	WarningThresholdPct *ywrapper.UintValue      `protobuf:"bytes,174962718,opt,name=warning_threshold_pct,json=warningThresholdPct,proto3" json:"warning_threshold_pct,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[292]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config) ProtoMessage() {
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[292]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 12, 0, 0}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config) GetMaxPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.MaxPrefixes
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config) GetPreventTeardown() *ywrapper.BoolValue {
	if x != nil {
		return x.PreventTeardown
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config) GetRestartTimer() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RestartTimer
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config) GetWarningThresholdPct() *ywrapper.UintValue {
	if x != nil {
		return x.WarningThresholdPct
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPrefixes         *ywrapper.UintValue      `protobuf:"bytes,479363212,opt,name=max_prefixes,json=maxPrefixes,proto3" json:"max_prefixes,omitempty"`
	PreventTeardown     *ywrapper.BoolValue      `protobuf:"bytes,179630576,opt,name=prevent_teardown,json=preventTeardown,proto3" json:"prevent_teardown,omitempty"`
	RestartTimer        *ywrapper.Decimal64Value `protobuf:"bytes,145980288,opt,name=restart_timer,json=restartTimer,proto3" json:"restart_timer,omitempty"`
	WarningThresholdPct *ywrapper.UintValue      `protobuf:"bytes,336624961,opt,name=warning_threshold_pct,json=warningThresholdPct,proto3" json:"warning_threshold_pct,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[293]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State) ProtoMessage() {
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[293]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 12, 0, 1}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State) GetMaxPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.MaxPrefixes
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State) GetPreventTeardown() *ywrapper.BoolValue {
	if x != nil {
		return x.PreventTeardown
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State) GetRestartTimer() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RestartTimer
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State) GetWarningThresholdPct() *ywrapper.UintValue {
	if x != nil {
		return x.WarningThresholdPct
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config `protobuf:"bytes,401718058,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State  `protobuf:"bytes,413346119,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[294]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[294]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 13, 0}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) GetConfig() *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) GetState() *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPrefixes         *ywrapper.UintValue      `protobuf:"bytes,464755834,opt,name=max_prefixes,json=maxPrefixes,proto3" json:"max_prefixes,omitempty"`
	PreventTeardown     *ywrapper.BoolValue      `protobuf:"bytes,57454310,opt,name=prevent_teardown,json=preventTeardown,proto3" json:"prevent_teardown,omitempty"`
	RestartTimer        *ywrapper.Decimal64Value `protobuf:"bytes,59461878,opt,name=restart_timer,json=restartTimer,proto3" json:"restart_timer,omitempty"`
	WarningThresholdPct *ywrapper.UintValue      `protobuf:"bytes,285071995,opt,name=warning_threshold_pct,json=warningThresholdPct,proto3" json:"warning_threshold_pct,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[295]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config) ProtoMessage() {
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[295]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 13, 0, 0}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config) GetMaxPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.MaxPrefixes
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config) GetPreventTeardown() *ywrapper.BoolValue {
	if x != nil {
		return x.PreventTeardown
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config) GetRestartTimer() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RestartTimer
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config) GetWarningThresholdPct() *ywrapper.UintValue {
	if x != nil {
		return x.WarningThresholdPct
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPrefixes         *ywrapper.UintValue      `protobuf:"bytes,468880409,opt,name=max_prefixes,json=maxPrefixes,proto3" json:"max_prefixes,omitempty"`
	PreventTeardown     *ywrapper.BoolValue      `protobuf:"bytes,37860561,opt,name=prevent_teardown,json=preventTeardown,proto3" json:"prevent_teardown,omitempty"`
	RestartTimer        *ywrapper.Decimal64Value `protobuf:"bytes,55406519,opt,name=restart_timer,json=restartTimer,proto3" json:"restart_timer,omitempty"`
	WarningThresholdPct *ywrapper.UintValue      `protobuf:"bytes,31775414,opt,name=warning_threshold_pct,json=warningThresholdPct,proto3" json:"warning_threshold_pct,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[296]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[296]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 13, 0, 1}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State) GetMaxPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.MaxPrefixes
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State) GetPreventTeardown() *ywrapper.BoolValue {
	if x != nil {
		return x.PreventTeardown
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State) GetRestartTimer() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RestartTimer
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State) GetWarningThresholdPct() *ywrapper.UintValue {
	if x != nil {
		return x.WarningThresholdPct
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_Config `protobuf:"bytes,533444108,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_State  `protobuf:"bytes,184340357,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[297]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[297]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 14, 0}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit) GetConfig() *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit) GetState() *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPrefixes         *ywrapper.UintValue      `protobuf:"bytes,300777984,opt,name=max_prefixes,json=maxPrefixes,proto3" json:"max_prefixes,omitempty"`
	PreventTeardown     *ywrapper.BoolValue      `protobuf:"bytes,403014492,opt,name=prevent_teardown,json=preventTeardown,proto3" json:"prevent_teardown,omitempty"`
	RestartTimer        *ywrapper.Decimal64Value `protobuf:"bytes,226403244,opt,name=restart_timer,json=restartTimer,proto3" json:"restart_timer,omitempty"`
	WarningThresholdPct *ywrapper.UintValue      `protobuf:"bytes,256753685,opt,name=warning_threshold_pct,json=warningThresholdPct,proto3" json:"warning_threshold_pct,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_Config) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[298]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_Config) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[298]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_Config.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 14, 0, 0}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_Config) GetMaxPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.MaxPrefixes
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_Config) GetPreventTeardown() *ywrapper.BoolValue {
	if x != nil {
		return x.PreventTeardown
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_Config) GetRestartTimer() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RestartTimer
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_Config) GetWarningThresholdPct() *ywrapper.UintValue {
	if x != nil {
		return x.WarningThresholdPct
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPrefixes         *ywrapper.UintValue      `protobuf:"bytes,90905403,opt,name=max_prefixes,json=maxPrefixes,proto3" json:"max_prefixes,omitempty"`
	PreventTeardown     *ywrapper.BoolValue      `protobuf:"bytes,58877523,opt,name=prevent_teardown,json=preventTeardown,proto3" json:"prevent_teardown,omitempty"`
	RestartTimer        *ywrapper.Decimal64Value `protobuf:"bytes,428585073,opt,name=restart_timer,json=restartTimer,proto3" json:"restart_timer,omitempty"`
	WarningThresholdPct *ywrapper.UintValue      `protobuf:"bytes,137172844,opt,name=warning_threshold_pct,json=warningThresholdPct,proto3" json:"warning_threshold_pct,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_State) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[299]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_State) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[299]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_State.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 14, 0, 1}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_State) GetMaxPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.MaxPrefixes
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_State) GetPreventTeardown() *ywrapper.BoolValue {
	if x != nil {
		return x.PreventTeardown
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_State) GetRestartTimer() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RestartTimer
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_State) GetWarningThresholdPct() *ywrapper.UintValue {
	if x != nil {
		return x.WarningThresholdPct
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_Config `protobuf:"bytes,478587638,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_State  `protobuf:"bytes,530050339,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[300]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[300]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 15, 0}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit) GetConfig() *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit) GetState() *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPrefixes         *ywrapper.UintValue      `protobuf:"bytes,213310542,opt,name=max_prefixes,json=maxPrefixes,proto3" json:"max_prefixes,omitempty"`
	PreventTeardown     *ywrapper.BoolValue      `protobuf:"bytes,347170946,opt,name=prevent_teardown,json=preventTeardown,proto3" json:"prevent_teardown,omitempty"`
	RestartTimer        *ywrapper.Decimal64Value `protobuf:"bytes,330349778,opt,name=restart_timer,json=restartTimer,proto3" json:"restart_timer,omitempty"`
	WarningThresholdPct *ywrapper.UintValue      `protobuf:"bytes,483643743,opt,name=warning_threshold_pct,json=warningThresholdPct,proto3" json:"warning_threshold_pct,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_Config) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[301]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_Config) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[301]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_Config.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 15, 0, 0}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_Config) GetMaxPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.MaxPrefixes
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_Config) GetPreventTeardown() *ywrapper.BoolValue {
	if x != nil {
		return x.PreventTeardown
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_Config) GetRestartTimer() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RestartTimer
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_Config) GetWarningThresholdPct() *ywrapper.UintValue {
	if x != nil {
		return x.WarningThresholdPct
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPrefixes         *ywrapper.UintValue      `protobuf:"bytes,411021661,opt,name=max_prefixes,json=maxPrefixes,proto3" json:"max_prefixes,omitempty"`
	PreventTeardown     *ywrapper.BoolValue      `protobuf:"bytes,154723741,opt,name=prevent_teardown,json=preventTeardown,proto3" json:"prevent_teardown,omitempty"`
	RestartTimer        *ywrapper.Decimal64Value `protobuf:"bytes,180336675,opt,name=restart_timer,json=restartTimer,proto3" json:"restart_timer,omitempty"`
	WarningThresholdPct *ywrapper.UintValue      `protobuf:"bytes,72173386,opt,name=warning_threshold_pct,json=warningThresholdPct,proto3" json:"warning_threshold_pct,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_State) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[302]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_State) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[302]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_State.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 15, 0, 1}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_State) GetMaxPrefixes() *ywrapper.UintValue {
	if x != nil {
		return x.MaxPrefixes
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_State) GetPreventTeardown() *ywrapper.BoolValue {
	if x != nil {
		return x.PreventTeardown
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_State) GetRestartTimer() *ywrapper.Decimal64Value {
	if x != nil {
		return x.RestartTimer
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_State) GetWarningThresholdPct() *ywrapper.UintValue {
	if x != nil {
		return x.WarningThresholdPct
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled *ywrapper.BoolValue `protobuf:"bytes,172380267,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Config) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[303]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Config) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[303]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Config.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 17, 0}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Config) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config `protobuf:"bytes,421350444,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State  `protobuf:"bytes,419452453,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[304]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[304]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 17, 1}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp) GetConfig() *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp) GetState() *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config `protobuf:"bytes,213063640,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State  `protobuf:"bytes,532218481,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[305]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[305]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 17, 2}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp) GetConfig() *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp) GetState() *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled *ywrapper.BoolValue `protobuf:"bytes,212250776,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_State) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[306]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_State) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[306]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_State.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 17, 3}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_State) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowMultipleAs *ywrapper.BoolValue `protobuf:"bytes,120578192,opt,name=allow_multiple_as,json=allowMultipleAs,proto3" json:"allow_multiple_as,omitempty"`
	MaximumPaths    *ywrapper.UintValue `protobuf:"bytes,332174012,opt,name=maximum_paths,json=maximumPaths,proto3" json:"maximum_paths,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[307]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[307]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 17, 1, 0}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config) GetAllowMultipleAs() *ywrapper.BoolValue {
	if x != nil {
		return x.AllowMultipleAs
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config) GetMaximumPaths() *ywrapper.UintValue {
	if x != nil {
		return x.MaximumPaths
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowMultipleAs *ywrapper.BoolValue `protobuf:"bytes,411687057,opt,name=allow_multiple_as,json=allowMultipleAs,proto3" json:"allow_multiple_as,omitempty"`
	MaximumPaths    *ywrapper.UintValue `protobuf:"bytes,2609409,opt,name=maximum_paths,json=maximumPaths,proto3" json:"maximum_paths,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[308]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[308]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 17, 1, 1}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State) GetAllowMultipleAs() *ywrapper.BoolValue {
	if x != nil {
		return x.AllowMultipleAs
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State) GetMaximumPaths() *ywrapper.UintValue {
	if x != nil {
		return x.MaximumPaths
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaximumPaths *ywrapper.UintValue `protobuf:"bytes,262679328,opt,name=maximum_paths,json=maximumPaths,proto3" json:"maximum_paths,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[309]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[309]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 17, 2, 0}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config) GetMaximumPaths() *ywrapper.UintValue {
	if x != nil {
		return x.MaximumPaths
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaximumPaths *ywrapper.UintValue `protobuf:"bytes,485013093,opt,name=maximum_paths,json=maximumPaths,proto3" json:"maximum_paths,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[310]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[310]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 17, 2, 1}
}

func (x *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State) GetMaximumPaths() *ywrapper.UintValue {
	if x != nil {
		return x.MaximumPaths
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_ApplyPolicy_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultExportPolicy OpenconfigRoutingPolicyDefaultPolicyType `protobuf:"varint,1061968,opt,name=default_export_policy,json=defaultExportPolicy,proto3,enum=openconfig.OpenconfigRoutingPolicyDefaultPolicyType" json:"default_export_policy,omitempty"`
	DefaultImportPolicy OpenconfigRoutingPolicyDefaultPolicyType `protobuf:"varint,10875835,opt,name=default_import_policy,json=defaultImportPolicy,proto3,enum=openconfig.OpenconfigRoutingPolicyDefaultPolicyType" json:"default_import_policy,omitempty"`
	ExportPolicy        []*ywrapper.StringValue                  `protobuf:"bytes,157484316,rep,name=export_policy,json=exportPolicy,proto3" json:"export_policy,omitempty"`
	ImportPolicy        []*ywrapper.StringValue                  `protobuf:"bytes,115432487,rep,name=import_policy,json=importPolicy,proto3" json:"import_policy,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_ApplyPolicy_Config) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_ApplyPolicy_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[311]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_ApplyPolicy_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_ApplyPolicy_Config) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_ApplyPolicy_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[311]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_ApplyPolicy_Config.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_ApplyPolicy_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 1, 0}
}

func (x *Bgp_PeerGroups_PeerGroup_ApplyPolicy_Config) GetDefaultExportPolicy() OpenconfigRoutingPolicyDefaultPolicyType {
	if x != nil {
		return x.DefaultExportPolicy
	}
	return OpenconfigRoutingPolicyDefaultPolicyType_OPENCONFIGROUTINGPOLICYDEFAULTPOLICYTYPE_REJECT_ROUTE
}

func (x *Bgp_PeerGroups_PeerGroup_ApplyPolicy_Config) GetDefaultImportPolicy() OpenconfigRoutingPolicyDefaultPolicyType {
	if x != nil {
		return x.DefaultImportPolicy
	}
	return OpenconfigRoutingPolicyDefaultPolicyType_OPENCONFIGROUTINGPOLICYDEFAULTPOLICYTYPE_REJECT_ROUTE
}

func (x *Bgp_PeerGroups_PeerGroup_ApplyPolicy_Config) GetExportPolicy() []*ywrapper.StringValue {
	if x != nil {
		return x.ExportPolicy
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_ApplyPolicy_Config) GetImportPolicy() []*ywrapper.StringValue {
	if x != nil {
		return x.ImportPolicy
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_ApplyPolicy_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultExportPolicy OpenconfigRoutingPolicyDefaultPolicyType `protobuf:"varint,533500781,opt,name=default_export_policy,json=defaultExportPolicy,proto3,enum=openconfig.OpenconfigRoutingPolicyDefaultPolicyType" json:"default_export_policy,omitempty"`
	DefaultImportPolicy OpenconfigRoutingPolicyDefaultPolicyType `protobuf:"varint,229947890,opt,name=default_import_policy,json=defaultImportPolicy,proto3,enum=openconfig.OpenconfigRoutingPolicyDefaultPolicyType" json:"default_import_policy,omitempty"`
	ExportPolicy        []*ywrapper.StringValue                  `protobuf:"bytes,77865285,rep,name=export_policy,json=exportPolicy,proto3" json:"export_policy,omitempty"`
	ImportPolicy        []*ywrapper.StringValue                  `protobuf:"bytes,235734202,rep,name=import_policy,json=importPolicy,proto3" json:"import_policy,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_ApplyPolicy_State) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_ApplyPolicy_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[312]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_ApplyPolicy_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_ApplyPolicy_State) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_ApplyPolicy_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[312]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_ApplyPolicy_State.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_ApplyPolicy_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 1, 1}
}

func (x *Bgp_PeerGroups_PeerGroup_ApplyPolicy_State) GetDefaultExportPolicy() OpenconfigRoutingPolicyDefaultPolicyType {
	if x != nil {
		return x.DefaultExportPolicy
	}
	return OpenconfigRoutingPolicyDefaultPolicyType_OPENCONFIGROUTINGPOLICYDEFAULTPOLICYTYPE_REJECT_ROUTE
}

func (x *Bgp_PeerGroups_PeerGroup_ApplyPolicy_State) GetDefaultImportPolicy() OpenconfigRoutingPolicyDefaultPolicyType {
	if x != nil {
		return x.DefaultImportPolicy
	}
	return OpenconfigRoutingPolicyDefaultPolicyType_OPENCONFIGROUTINGPOLICYDEFAULTPOLICYTYPE_REJECT_ROUTE
}

func (x *Bgp_PeerGroups_PeerGroup_ApplyPolicy_State) GetExportPolicy() []*ywrapper.StringValue {
	if x != nil {
		return x.ExportPolicy
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_ApplyPolicy_State) GetImportPolicy() []*ywrapper.StringValue {
	if x != nil {
		return x.ImportPolicy
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AsPathOptions_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowOwnAs          *ywrapper.UintValue `protobuf:"bytes,182412628,opt,name=allow_own_as,json=allowOwnAs,proto3" json:"allow_own_as,omitempty"`
	DisablePeerAsFilter *ywrapper.BoolValue `protobuf:"bytes,123580012,opt,name=disable_peer_as_filter,json=disablePeerAsFilter,proto3" json:"disable_peer_as_filter,omitempty"`
	ReplacePeerAs       *ywrapper.BoolValue `protobuf:"bytes,225249753,opt,name=replace_peer_as,json=replacePeerAs,proto3" json:"replace_peer_as,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AsPathOptions_Config) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AsPathOptions_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[313]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AsPathOptions_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AsPathOptions_Config) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_AsPathOptions_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[313]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AsPathOptions_Config.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AsPathOptions_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 2, 0}
}

func (x *Bgp_PeerGroups_PeerGroup_AsPathOptions_Config) GetAllowOwnAs() *ywrapper.UintValue {
	if x != nil {
		return x.AllowOwnAs
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AsPathOptions_Config) GetDisablePeerAsFilter() *ywrapper.BoolValue {
	if x != nil {
		return x.DisablePeerAsFilter
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AsPathOptions_Config) GetReplacePeerAs() *ywrapper.BoolValue {
	if x != nil {
		return x.ReplacePeerAs
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_AsPathOptions_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowOwnAs          *ywrapper.UintValue `protobuf:"bytes,437398635,opt,name=allow_own_as,json=allowOwnAs,proto3" json:"allow_own_as,omitempty"`
	DisablePeerAsFilter *ywrapper.BoolValue `protobuf:"bytes,397953391,opt,name=disable_peer_as_filter,json=disablePeerAsFilter,proto3" json:"disable_peer_as_filter,omitempty"`
	ReplacePeerAs       *ywrapper.BoolValue `protobuf:"bytes,248742960,opt,name=replace_peer_as,json=replacePeerAs,proto3" json:"replace_peer_as,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_AsPathOptions_State) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_AsPathOptions_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[314]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_AsPathOptions_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_AsPathOptions_State) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_AsPathOptions_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[314]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_AsPathOptions_State.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_AsPathOptions_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 2, 1}
}

func (x *Bgp_PeerGroups_PeerGroup_AsPathOptions_State) GetAllowOwnAs() *ywrapper.UintValue {
	if x != nil {
		return x.AllowOwnAs
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AsPathOptions_State) GetDisablePeerAsFilter() *ywrapper.BoolValue {
	if x != nil {
		return x.DisablePeerAsFilter
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_AsPathOptions_State) GetReplacePeerAs() *ywrapper.BoolValue {
	if x != nil {
		return x.ReplacePeerAs
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_EbgpMultihop_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled     *ywrapper.BoolValue `protobuf:"bytes,210433592,opt,name=enabled,proto3" json:"enabled,omitempty"`
	MultihopTtl *ywrapper.UintValue `protobuf:"bytes,486717158,opt,name=multihop_ttl,json=multihopTtl,proto3" json:"multihop_ttl,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_EbgpMultihop_Config) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_EbgpMultihop_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[315]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_EbgpMultihop_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_EbgpMultihop_Config) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_EbgpMultihop_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[315]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_EbgpMultihop_Config.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_EbgpMultihop_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 4, 0}
}

func (x *Bgp_PeerGroups_PeerGroup_EbgpMultihop_Config) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_EbgpMultihop_Config) GetMultihopTtl() *ywrapper.UintValue {
	if x != nil {
		return x.MultihopTtl
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_EbgpMultihop_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled     *ywrapper.BoolValue `protobuf:"bytes,371663241,opt,name=enabled,proto3" json:"enabled,omitempty"`
	MultihopTtl *ywrapper.UintValue `protobuf:"bytes,348668449,opt,name=multihop_ttl,json=multihopTtl,proto3" json:"multihop_ttl,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_EbgpMultihop_State) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_EbgpMultihop_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[316]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_EbgpMultihop_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_EbgpMultihop_State) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_EbgpMultihop_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[316]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_EbgpMultihop_State.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_EbgpMultihop_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 4, 1}
}

func (x *Bgp_PeerGroups_PeerGroup_EbgpMultihop_State) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_EbgpMultihop_State) GetMultihopTtl() *ywrapper.UintValue {
	if x != nil {
		return x.MultihopTtl
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_ErrorHandling_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TreatAsWithdraw *ywrapper.BoolValue `protobuf:"bytes,501814728,opt,name=treat_as_withdraw,json=treatAsWithdraw,proto3" json:"treat_as_withdraw,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_ErrorHandling_Config) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_ErrorHandling_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[317]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_ErrorHandling_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_ErrorHandling_Config) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_ErrorHandling_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[317]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_ErrorHandling_Config.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_ErrorHandling_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 5, 0}
}

func (x *Bgp_PeerGroups_PeerGroup_ErrorHandling_Config) GetTreatAsWithdraw() *ywrapper.BoolValue {
	if x != nil {
		return x.TreatAsWithdraw
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_ErrorHandling_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TreatAsWithdraw *ywrapper.BoolValue `protobuf:"bytes,321676351,opt,name=treat_as_withdraw,json=treatAsWithdraw,proto3" json:"treat_as_withdraw,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_ErrorHandling_State) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_ErrorHandling_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[318]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_ErrorHandling_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_ErrorHandling_State) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_ErrorHandling_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[318]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_ErrorHandling_State.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_ErrorHandling_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 5, 1}
}

func (x *Bgp_PeerGroups_PeerGroup_ErrorHandling_State) GetTreatAsWithdraw() *ywrapper.BoolValue {
	if x != nil {
		return x.TreatAsWithdraw
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_GracefulRestart_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled         *ywrapper.BoolValue      `protobuf:"bytes,406303906,opt,name=enabled,proto3" json:"enabled,omitempty"`
	HelperOnly      *ywrapper.BoolValue      `protobuf:"bytes,329824654,opt,name=helper_only,json=helperOnly,proto3" json:"helper_only,omitempty"`
	RestartTime     *ywrapper.UintValue      `protobuf:"bytes,335369318,opt,name=restart_time,json=restartTime,proto3" json:"restart_time,omitempty"`
	StaleRoutesTime *ywrapper.Decimal64Value `protobuf:"bytes,451267513,opt,name=stale_routes_time,json=staleRoutesTime,proto3" json:"stale_routes_time,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_GracefulRestart_Config) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_GracefulRestart_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[319]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_GracefulRestart_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_GracefulRestart_Config) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_GracefulRestart_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[319]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_GracefulRestart_Config.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_GracefulRestart_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 6, 0}
}

func (x *Bgp_PeerGroups_PeerGroup_GracefulRestart_Config) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_GracefulRestart_Config) GetHelperOnly() *ywrapper.BoolValue {
	if x != nil {
		return x.HelperOnly
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_GracefulRestart_Config) GetRestartTime() *ywrapper.UintValue {
	if x != nil {
		return x.RestartTime
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_GracefulRestart_Config) GetStaleRoutesTime() *ywrapper.Decimal64Value {
	if x != nil {
		return x.StaleRoutesTime
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_GracefulRestart_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled         *ywrapper.BoolValue      `protobuf:"bytes,530053919,opt,name=enabled,proto3" json:"enabled,omitempty"`
	HelperOnly      *ywrapper.BoolValue      `protobuf:"bytes,204408087,opt,name=helper_only,json=helperOnly,proto3" json:"helper_only,omitempty"`
	RestartTime     *ywrapper.UintValue      `protobuf:"bytes,370893773,opt,name=restart_time,json=restartTime,proto3" json:"restart_time,omitempty"`
	StaleRoutesTime *ywrapper.Decimal64Value `protobuf:"bytes,232983352,opt,name=stale_routes_time,json=staleRoutesTime,proto3" json:"stale_routes_time,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_GracefulRestart_State) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_GracefulRestart_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[320]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_GracefulRestart_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_GracefulRestart_State) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_GracefulRestart_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[320]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_GracefulRestart_State.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_GracefulRestart_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 6, 1}
}

func (x *Bgp_PeerGroups_PeerGroup_GracefulRestart_State) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_GracefulRestart_State) GetHelperOnly() *ywrapper.BoolValue {
	if x != nil {
		return x.HelperOnly
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_GracefulRestart_State) GetRestartTime() *ywrapper.UintValue {
	if x != nil {
		return x.RestartTime
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_GracefulRestart_State) GetStaleRoutesTime() *ywrapper.Decimal64Value {
	if x != nil {
		return x.StaleRoutesTime
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_LoggingOptions_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogNeighborStateChanges *ywrapper.BoolValue `protobuf:"bytes,444672139,opt,name=log_neighbor_state_changes,json=logNeighborStateChanges,proto3" json:"log_neighbor_state_changes,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_LoggingOptions_Config) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_LoggingOptions_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[321]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_LoggingOptions_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_LoggingOptions_Config) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_LoggingOptions_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[321]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_LoggingOptions_Config.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_LoggingOptions_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 7, 0}
}

func (x *Bgp_PeerGroups_PeerGroup_LoggingOptions_Config) GetLogNeighborStateChanges() *ywrapper.BoolValue {
	if x != nil {
		return x.LogNeighborStateChanges
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_LoggingOptions_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogNeighborStateChanges *ywrapper.BoolValue `protobuf:"bytes,107908062,opt,name=log_neighbor_state_changes,json=logNeighborStateChanges,proto3" json:"log_neighbor_state_changes,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_LoggingOptions_State) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_LoggingOptions_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[322]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_LoggingOptions_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_LoggingOptions_State) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_LoggingOptions_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[322]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_LoggingOptions_State.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_LoggingOptions_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 7, 1}
}

func (x *Bgp_PeerGroups_PeerGroup_LoggingOptions_State) GetLogNeighborStateChanges() *ywrapper.BoolValue {
	if x != nil {
		return x.LogNeighborStateChanges
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_RouteReflector_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RouteReflectorClient *ywrapper.BoolValue `protobuf:"bytes,441727600,opt,name=route_reflector_client,json=routeReflectorClient,proto3" json:"route_reflector_client,omitempty"`
	// Types that are assignable to RouteReflectorClusterId:
	//	*Bgp_PeerGroups_PeerGroup_RouteReflector_Config_RouteReflectorClusterIdString
	//	*Bgp_PeerGroups_PeerGroup_RouteReflector_Config_RouteReflectorClusterIdUint64
	RouteReflectorClusterId isBgp_PeerGroups_PeerGroup_RouteReflector_Config_RouteReflectorClusterId `protobuf_oneof:"route_reflector_cluster_id"`
}

func (x *Bgp_PeerGroups_PeerGroup_RouteReflector_Config) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_RouteReflector_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[323]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_RouteReflector_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_RouteReflector_Config) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_RouteReflector_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[323]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_RouteReflector_Config.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_RouteReflector_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 8, 0}
}

func (x *Bgp_PeerGroups_PeerGroup_RouteReflector_Config) GetRouteReflectorClient() *ywrapper.BoolValue {
	if x != nil {
		return x.RouteReflectorClient
	}
	return nil
}

func (m *Bgp_PeerGroups_PeerGroup_RouteReflector_Config) GetRouteReflectorClusterId() isBgp_PeerGroups_PeerGroup_RouteReflector_Config_RouteReflectorClusterId {
	if m != nil {
		return m.RouteReflectorClusterId
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_RouteReflector_Config) GetRouteReflectorClusterIdString() string {
	if x, ok := x.GetRouteReflectorClusterId().(*Bgp_PeerGroups_PeerGroup_RouteReflector_Config_RouteReflectorClusterIdString); ok {
		return x.RouteReflectorClusterIdString
	}
	return ""
}

func (x *Bgp_PeerGroups_PeerGroup_RouteReflector_Config) GetRouteReflectorClusterIdUint64() uint64 {
	if x, ok := x.GetRouteReflectorClusterId().(*Bgp_PeerGroups_PeerGroup_RouteReflector_Config_RouteReflectorClusterIdUint64); ok {
		return x.RouteReflectorClusterIdUint64
	}
	return 0
}

type isBgp_PeerGroups_PeerGroup_RouteReflector_Config_RouteReflectorClusterId interface {
	isBgp_PeerGroups_PeerGroup_RouteReflector_Config_RouteReflectorClusterId()
}

type Bgp_PeerGroups_PeerGroup_RouteReflector_Config_RouteReflectorClusterIdString struct {
	RouteReflectorClusterIdString string `protobuf:"bytes,124760959,opt,name=route_reflector_cluster_id_string,json=routeReflectorClusterIdString,proto3,oneof"`
}

type Bgp_PeerGroups_PeerGroup_RouteReflector_Config_RouteReflectorClusterIdUint64 struct {
	RouteReflectorClusterIdUint64 uint64 `protobuf:"varint,261251794,opt,name=route_reflector_cluster_id_uint64,json=routeReflectorClusterIdUint64,proto3,oneof"`
}

func (*Bgp_PeerGroups_PeerGroup_RouteReflector_Config_RouteReflectorClusterIdString) isBgp_PeerGroups_PeerGroup_RouteReflector_Config_RouteReflectorClusterId() {
}

func (*Bgp_PeerGroups_PeerGroup_RouteReflector_Config_RouteReflectorClusterIdUint64) isBgp_PeerGroups_PeerGroup_RouteReflector_Config_RouteReflectorClusterId() {
}

type Bgp_PeerGroups_PeerGroup_RouteReflector_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RouteReflectorClient *ywrapper.BoolValue `protobuf:"bytes,411278165,opt,name=route_reflector_client,json=routeReflectorClient,proto3" json:"route_reflector_client,omitempty"`
	// Types that are assignable to RouteReflectorClusterId:
	//	*Bgp_PeerGroups_PeerGroup_RouteReflector_State_RouteReflectorClusterIdString
	//	*Bgp_PeerGroups_PeerGroup_RouteReflector_State_RouteReflectorClusterIdUint64
	RouteReflectorClusterId isBgp_PeerGroups_PeerGroup_RouteReflector_State_RouteReflectorClusterId `protobuf_oneof:"route_reflector_cluster_id"`
}

func (x *Bgp_PeerGroups_PeerGroup_RouteReflector_State) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_RouteReflector_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[324]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_RouteReflector_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_RouteReflector_State) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_RouteReflector_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[324]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_RouteReflector_State.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_RouteReflector_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 8, 1}
}

func (x *Bgp_PeerGroups_PeerGroup_RouteReflector_State) GetRouteReflectorClient() *ywrapper.BoolValue {
	if x != nil {
		return x.RouteReflectorClient
	}
	return nil
}

func (m *Bgp_PeerGroups_PeerGroup_RouteReflector_State) GetRouteReflectorClusterId() isBgp_PeerGroups_PeerGroup_RouteReflector_State_RouteReflectorClusterId {
	if m != nil {
		return m.RouteReflectorClusterId
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_RouteReflector_State) GetRouteReflectorClusterIdString() string {
	if x, ok := x.GetRouteReflectorClusterId().(*Bgp_PeerGroups_PeerGroup_RouteReflector_State_RouteReflectorClusterIdString); ok {
		return x.RouteReflectorClusterIdString
	}
	return ""
}

func (x *Bgp_PeerGroups_PeerGroup_RouteReflector_State) GetRouteReflectorClusterIdUint64() uint64 {
	if x, ok := x.GetRouteReflectorClusterId().(*Bgp_PeerGroups_PeerGroup_RouteReflector_State_RouteReflectorClusterIdUint64); ok {
		return x.RouteReflectorClusterIdUint64
	}
	return 0
}

type isBgp_PeerGroups_PeerGroup_RouteReflector_State_RouteReflectorClusterId interface {
	isBgp_PeerGroups_PeerGroup_RouteReflector_State_RouteReflectorClusterId()
}

type Bgp_PeerGroups_PeerGroup_RouteReflector_State_RouteReflectorClusterIdString struct {
	RouteReflectorClusterIdString string `protobuf:"bytes,136031704,opt,name=route_reflector_cluster_id_string,json=routeReflectorClusterIdString,proto3,oneof"`
}

type Bgp_PeerGroups_PeerGroup_RouteReflector_State_RouteReflectorClusterIdUint64 struct {
	RouteReflectorClusterIdUint64 uint64 `protobuf:"varint,244816081,opt,name=route_reflector_cluster_id_uint64,json=routeReflectorClusterIdUint64,proto3,oneof"`
}

func (*Bgp_PeerGroups_PeerGroup_RouteReflector_State_RouteReflectorClusterIdString) isBgp_PeerGroups_PeerGroup_RouteReflector_State_RouteReflectorClusterId() {
}

func (*Bgp_PeerGroups_PeerGroup_RouteReflector_State_RouteReflectorClusterIdUint64) isBgp_PeerGroups_PeerGroup_RouteReflector_State_RouteReflectorClusterId() {
}

type Bgp_PeerGroups_PeerGroup_Timers_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectRetry                 *ywrapper.Decimal64Value `protobuf:"bytes,148741757,opt,name=connect_retry,json=connectRetry,proto3" json:"connect_retry,omitempty"`
	HoldTime                     *ywrapper.Decimal64Value `protobuf:"bytes,153517857,opt,name=hold_time,json=holdTime,proto3" json:"hold_time,omitempty"`
	KeepaliveInterval            *ywrapper.Decimal64Value `protobuf:"bytes,524167514,opt,name=keepalive_interval,json=keepaliveInterval,proto3" json:"keepalive_interval,omitempty"`
	MinimumAdvertisementInterval *ywrapper.Decimal64Value `protobuf:"bytes,221998328,opt,name=minimum_advertisement_interval,json=minimumAdvertisementInterval,proto3" json:"minimum_advertisement_interval,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_Timers_Config) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_Timers_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[325]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_Timers_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_Timers_Config) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_Timers_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[325]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_Timers_Config.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_Timers_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 10, 0}
}

func (x *Bgp_PeerGroups_PeerGroup_Timers_Config) GetConnectRetry() *ywrapper.Decimal64Value {
	if x != nil {
		return x.ConnectRetry
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_Timers_Config) GetHoldTime() *ywrapper.Decimal64Value {
	if x != nil {
		return x.HoldTime
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_Timers_Config) GetKeepaliveInterval() *ywrapper.Decimal64Value {
	if x != nil {
		return x.KeepaliveInterval
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_Timers_Config) GetMinimumAdvertisementInterval() *ywrapper.Decimal64Value {
	if x != nil {
		return x.MinimumAdvertisementInterval
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_Timers_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectRetry                 *ywrapper.Decimal64Value `protobuf:"bytes,197831046,opt,name=connect_retry,json=connectRetry,proto3" json:"connect_retry,omitempty"`
	HoldTime                     *ywrapper.Decimal64Value `protobuf:"bytes,278566582,opt,name=hold_time,json=holdTime,proto3" json:"hold_time,omitempty"`
	KeepaliveInterval            *ywrapper.Decimal64Value `protobuf:"bytes,193710995,opt,name=keepalive_interval,json=keepaliveInterval,proto3" json:"keepalive_interval,omitempty"`
	MinimumAdvertisementInterval *ywrapper.Decimal64Value `protobuf:"bytes,459701337,opt,name=minimum_advertisement_interval,json=minimumAdvertisementInterval,proto3" json:"minimum_advertisement_interval,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_Timers_State) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_Timers_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[326]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_Timers_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_Timers_State) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_Timers_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[326]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_Timers_State.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_Timers_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 10, 1}
}

func (x *Bgp_PeerGroups_PeerGroup_Timers_State) GetConnectRetry() *ywrapper.Decimal64Value {
	if x != nil {
		return x.ConnectRetry
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_Timers_State) GetHoldTime() *ywrapper.Decimal64Value {
	if x != nil {
		return x.HoldTime
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_Timers_State) GetKeepaliveInterval() *ywrapper.Decimal64Value {
	if x != nil {
		return x.KeepaliveInterval
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_Timers_State) GetMinimumAdvertisementInterval() *ywrapper.Decimal64Value {
	if x != nil {
		return x.MinimumAdvertisementInterval
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_Transport_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalAddress *ywrapper.StringValue `protobuf:"bytes,268943503,opt,name=local_address,json=localAddress,proto3" json:"local_address,omitempty"`
	MtuDiscovery *ywrapper.BoolValue   `protobuf:"bytes,525832516,opt,name=mtu_discovery,json=mtuDiscovery,proto3" json:"mtu_discovery,omitempty"`
	PassiveMode  *ywrapper.BoolValue   `protobuf:"bytes,109032674,opt,name=passive_mode,json=passiveMode,proto3" json:"passive_mode,omitempty"`
	TcpMss       *ywrapper.UintValue   `protobuf:"bytes,300318340,opt,name=tcp_mss,json=tcpMss,proto3" json:"tcp_mss,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_Transport_Config) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_Transport_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[327]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_Transport_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_Transport_Config) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_Transport_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[327]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_Transport_Config.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_Transport_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 11, 0}
}

func (x *Bgp_PeerGroups_PeerGroup_Transport_Config) GetLocalAddress() *ywrapper.StringValue {
	if x != nil {
		return x.LocalAddress
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_Transport_Config) GetMtuDiscovery() *ywrapper.BoolValue {
	if x != nil {
		return x.MtuDiscovery
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_Transport_Config) GetPassiveMode() *ywrapper.BoolValue {
	if x != nil {
		return x.PassiveMode
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_Transport_Config) GetTcpMss() *ywrapper.UintValue {
	if x != nil {
		return x.TcpMss
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_Transport_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalAddress *ywrapper.StringValue `protobuf:"bytes,79292570,opt,name=local_address,json=localAddress,proto3" json:"local_address,omitempty"`
	MtuDiscovery *ywrapper.BoolValue   `protobuf:"bytes,205346453,opt,name=mtu_discovery,json=mtuDiscovery,proto3" json:"mtu_discovery,omitempty"`
	PassiveMode  *ywrapper.BoolValue   `protobuf:"bytes,331491869,opt,name=passive_mode,json=passiveMode,proto3" json:"passive_mode,omitempty"`
	TcpMss       *ywrapper.UintValue   `protobuf:"bytes,284321529,opt,name=tcp_mss,json=tcpMss,proto3" json:"tcp_mss,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_Transport_State) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_Transport_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[328]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_Transport_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_Transport_State) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_Transport_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[328]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_Transport_State.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_Transport_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 11, 1}
}

func (x *Bgp_PeerGroups_PeerGroup_Transport_State) GetLocalAddress() *ywrapper.StringValue {
	if x != nil {
		return x.LocalAddress
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_Transport_State) GetMtuDiscovery() *ywrapper.BoolValue {
	if x != nil {
		return x.MtuDiscovery
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_Transport_State) GetPassiveMode() *ywrapper.BoolValue {
	if x != nil {
		return x.PassiveMode
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_Transport_State) GetTcpMss() *ywrapper.UintValue {
	if x != nil {
		return x.TcpMss
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled *ywrapper.BoolValue `protobuf:"bytes,425587372,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Config) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[329]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Config) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[329]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Config.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 12, 0}
}

func (x *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Config) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_Config `protobuf:"bytes,320323273,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_State  `protobuf:"bytes,69899806,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[330]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[330]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 12, 1}
}

func (x *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp) GetConfig() *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp) GetState() *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_Config `protobuf:"bytes,3594261,opt,name=config,proto3" json:"config,omitempty"`
	State  *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_State  `protobuf:"bytes,319665802,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[331]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[331]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 12, 2}
}

func (x *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp) GetConfig() *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp) GetState() *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_UseMultiplePaths_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled *ywrapper.BoolValue `protobuf:"bytes,218521341,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_State) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_UseMultiplePaths_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[332]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_UseMultiplePaths_State) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[332]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_UseMultiplePaths_State.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_UseMultiplePaths_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 12, 3}
}

func (x *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_State) GetEnabled() *ywrapper.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowMultipleAs *ywrapper.BoolValue `protobuf:"bytes,165366797,opt,name=allow_multiple_as,json=allowMultipleAs,proto3" json:"allow_multiple_as,omitempty"`
	MaximumPaths    *ywrapper.UintValue `protobuf:"bytes,333858685,opt,name=maximum_paths,json=maximumPaths,proto3" json:"maximum_paths,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_Config) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[333]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_Config) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[333]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_Config.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 12, 1, 0}
}

func (x *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_Config) GetAllowMultipleAs() *ywrapper.BoolValue {
	if x != nil {
		return x.AllowMultipleAs
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_Config) GetMaximumPaths() *ywrapper.UintValue {
	if x != nil {
		return x.MaximumPaths
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowMultipleAs *ywrapper.BoolValue `protobuf:"bytes,326800554,opt,name=allow_multiple_as,json=allowMultipleAs,proto3" json:"allow_multiple_as,omitempty"`
	MaximumPaths    *ywrapper.UintValue `protobuf:"bytes,239987558,opt,name=maximum_paths,json=maximumPaths,proto3" json:"maximum_paths,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_State) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[334]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_State) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[334]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_State.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 12, 1, 1}
}

func (x *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_State) GetAllowMultipleAs() *ywrapper.BoolValue {
	if x != nil {
		return x.AllowMultipleAs
	}
	return nil
}

func (x *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_State) GetMaximumPaths() *ywrapper.UintValue {
	if x != nil {
		return x.MaximumPaths
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaximumPaths *ywrapper.UintValue `protobuf:"bytes,86235409,opt,name=maximum_paths,json=maximumPaths,proto3" json:"maximum_paths,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_Config) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[335]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_Config) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[335]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_Config.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 12, 2, 0}
}

func (x *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_Config) GetMaximumPaths() *ywrapper.UintValue {
	if x != nil {
		return x.MaximumPaths
	}
	return nil
}

type Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaximumPaths *ywrapper.UintValue `protobuf:"bytes,468326874,opt,name=maximum_paths,json=maximumPaths,proto3" json:"maximum_paths,omitempty"`
}

func (x *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_State) Reset() {
	*x = Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[336]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_State) ProtoMessage() {}

func (x *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[336]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_State.ProtoReflect.Descriptor instead.
func (*Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 12, 2, 1}
}

func (x *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_State) GetMaximumPaths() *ywrapper.UintValue {
	if x != nil {
		return x.MaximumPaths
	}
	return nil
}

type Bgp_Rib_AfiSafis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AfiSafi []*Bgp_Rib_AfiSafis_AfiSafiKey `protobuf:"bytes,453075747,rep,name=afi_safi,json=afiSafi,proto3" json:"afi_safi,omitempty"`
}

func (x *Bgp_Rib_AfiSafis) Reset() {
	*x = Bgp_Rib_AfiSafis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[337]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[337]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0}
}

func (x *Bgp_Rib_AfiSafis) GetAfiSafi() []*Bgp_Rib_AfiSafis_AfiSafiKey {
	if x != nil {
		return x.AfiSafi
	}
	return nil
}

type Bgp_Rib_AttrSets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrSet []*Bgp_Rib_AttrSets_AttrSetKey `protobuf:"bytes,169156267,rep,name=attr_set,json=attrSet,proto3" json:"attr_set,omitempty"`
}

func (x *Bgp_Rib_AttrSets) Reset() {
	*x = Bgp_Rib_AttrSets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[338]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AttrSets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AttrSets) ProtoMessage() {}

func (x *Bgp_Rib_AttrSets) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[338]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AttrSets.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AttrSets) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 1}
}

func (x *Bgp_Rib_AttrSets) GetAttrSet() []*Bgp_Rib_AttrSets_AttrSetKey {
	if x != nil {
		return x.AttrSet
	}
	return nil
}

type Bgp_Rib_Communities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Community []*Bgp_Rib_Communities_CommunityKey `protobuf:"bytes,485246458,rep,name=community,proto3" json:"community,omitempty"`
}

func (x *Bgp_Rib_Communities) Reset() {
	*x = Bgp_Rib_Communities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[339]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_Communities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_Communities) ProtoMessage() {}

func (x *Bgp_Rib_Communities) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[339]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_Communities.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_Communities) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 2}
}

func (x *Bgp_Rib_Communities) GetCommunity() []*Bgp_Rib_Communities_CommunityKey {
	if x != nil {
		return x.Community
	}
	return nil
}

type Bgp_Rib_ExtCommunities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExtCommunity []*Bgp_Rib_ExtCommunities_ExtCommunityKey `protobuf:"bytes,18598234,rep,name=ext_community,json=extCommunity,proto3" json:"ext_community,omitempty"`
}

func (x *Bgp_Rib_ExtCommunities) Reset() {
	*x = Bgp_Rib_ExtCommunities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[340]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_ExtCommunities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_ExtCommunities) ProtoMessage() {}

func (x *Bgp_Rib_ExtCommunities) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[340]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_ExtCommunities.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_ExtCommunities) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 3}
}

func (x *Bgp_Rib_ExtCommunities) GetExtCommunity() []*Bgp_Rib_ExtCommunities_ExtCommunityKey {
	if x != nil {
		return x.ExtCommunity
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ipv4SrtePolicy *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy `protobuf:"bytes,337660717,opt,name=ipv4_srte_policy,json=ipv4SrtePolicy,proto3" json:"ipv4_srte_policy,omitempty"`
	Ipv4Unicast    *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast    `protobuf:"bytes,182710531,opt,name=ipv4_unicast,json=ipv4Unicast,proto3" json:"ipv4_unicast,omitempty"`
	Ipv6SrtePolicy *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy `protobuf:"bytes,526886867,opt,name=ipv6_srte_policy,json=ipv6SrtePolicy,proto3" json:"ipv6_srte_policy,omitempty"`
	Ipv6Unicast    *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast    `protobuf:"bytes,190022925,opt,name=ipv6_unicast,json=ipv6Unicast,proto3" json:"ipv6_unicast,omitempty"`
	State          *Bgp_Rib_AfiSafis_AfiSafi_State          `protobuf:"bytes,395400893,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[341]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafi) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[341]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi) GetIpv4SrtePolicy() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy {
	if x != nil {
		return x.Ipv4SrtePolicy
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi) GetIpv4Unicast() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast {
	if x != nil {
		return x.Ipv4Unicast
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi) GetIpv6SrtePolicy() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy {
	if x != nil {
		return x.Ipv6SrtePolicy
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi) GetIpv6Unicast() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast {
	if x != nil {
		return x.Ipv6Unicast
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi) GetState() *Bgp_Rib_AfiSafis_AfiSafi_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafiKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AfiSafiName OpenconfigBgpTypesAFISAFITYPE `protobuf:"varint,1,opt,name=afi_safi_name,json=afiSafiName,proto3,enum=openconfig.OpenconfigBgpTypesAFISAFITYPE" json:"afi_safi_name,omitempty"`
	AfiSafi     *Bgp_Rib_AfiSafis_AfiSafi     `protobuf:"bytes,2,opt,name=afi_safi,json=afiSafi,proto3" json:"afi_safi,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafiKey) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafiKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[342]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafiKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafiKey) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafiKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[342]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafiKey.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafiKey) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 1}
}

func (x *Bgp_Rib_AfiSafis_AfiSafiKey) GetAfiSafiName() OpenconfigBgpTypesAFISAFITYPE {
	if x != nil {
		return x.AfiSafiName
	}
	return OpenconfigBgpTypesAFISAFITYPE_OPENCONFIGBGPTYPESAFISAFITYPE_UNSET
}

func (x *Bgp_Rib_AfiSafis_AfiSafiKey) GetAfiSafi() *Bgp_Rib_AfiSafis_AfiSafi {
	if x != nil {
		return x.AfiSafi
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocRib    *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib    `protobuf:"bytes,54085802,opt,name=loc_rib,json=locRib,proto3" json:"loc_rib,omitempty"`
	Neighbors *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors `protobuf:"bytes,212204785,opt,name=neighbors,proto3" json:"neighbors,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[343]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[343]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy) GetLocRib() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib {
	if x != nil {
		return x.LocRib
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy) GetNeighbors() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors {
	if x != nil {
		return x.Neighbors
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocRib    *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib    `protobuf:"bytes,505636740,opt,name=loc_rib,json=locRib,proto3" json:"loc_rib,omitempty"`
	Neighbors *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors `protobuf:"bytes,82905243,opt,name=neighbors,proto3" json:"neighbors,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[344]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[344]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 1}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast) GetLocRib() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib {
	if x != nil {
		return x.LocRib
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast) GetNeighbors() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors {
	if x != nil {
		return x.Neighbors
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocRib    *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib    `protobuf:"bytes,226050164,opt,name=loc_rib,json=locRib,proto3" json:"loc_rib,omitempty"`
	Neighbors *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors `protobuf:"bytes,354479403,opt,name=neighbors,proto3" json:"neighbors,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[345]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[345]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 2}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy) GetLocRib() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib {
	if x != nil {
		return x.LocRib
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy) GetNeighbors() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors {
	if x != nil {
		return x.Neighbors
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocRib    *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib    `protobuf:"bytes,220505738,opt,name=loc_rib,json=locRib,proto3" json:"loc_rib,omitempty"`
	Neighbors *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors `protobuf:"bytes,436786129,opt,name=neighbors,proto3" json:"neighbors,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[346]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[346]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 3}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast) GetLocRib() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib {
	if x != nil {
		return x.LocRib
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast) GetNeighbors() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors {
	if x != nil {
		return x.Neighbors
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AfiSafiName OpenconfigBgpTypesAFISAFITYPE `protobuf:"varint,406732584,opt,name=afi_safi_name,json=afiSafiName,proto3,enum=openconfig.OpenconfigBgpTypesAFISAFITYPE" json:"afi_safi_name,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_State) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[347]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_State) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafi_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[347]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_State.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 4}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_State) GetAfiSafiName() OpenconfigBgpTypesAFISAFITYPE {
	if x != nil {
		return x.AfiSafiName
	}
	return OpenconfigBgpTypesAFISAFITYPE_OPENCONFIGBGPTYPESAFISAFITYPE_UNSET
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Routes *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes `protobuf:"bytes,281914115,opt,name=routes,proto3" json:"routes,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[348]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[348]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib) GetRoutes() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes {
	if x != nil {
		return x.Routes
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Neighbor []*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_NeighborKey `protobuf:"bytes,387950890,rep,name=neighbor,proto3" json:"neighbor,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[349]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[349]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 0, 1}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors) GetNeighbor() []*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_NeighborKey {
	if x != nil {
		return x.Neighbor
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Route []*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_RouteKey `protobuf:"bytes,300698801,rep,name=route,proto3" json:"route,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[350]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[350]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 0, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes) GetRoute() []*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_RouteKey {
	if x != nil {
		return x.Route
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State             *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_State             `protobuf:"bytes,29533955,opt,name=state,proto3" json:"state,omitempty"`
	UnknownAttributes *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_UnknownAttributes `protobuf:"bytes,263116056,opt,name=unknown_attributes,json=unknownAttributes,proto3" json:"unknown_attributes,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[351]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[351]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 0, 0, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route) GetState() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route) GetUnknownAttributes() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_UnknownAttributes {
	if x != nil {
		return x.UnknownAttributes
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_RouteKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PathId   uint64                                                       `protobuf:"varint,1,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	Endpoint string                                                       `protobuf:"bytes,2,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	Color    uint64                                                       `protobuf:"varint,3,opt,name=color,proto3" json:"color,omitempty"`
	Route    *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route `protobuf:"bytes,4,opt,name=route,proto3" json:"route,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_RouteKey) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_RouteKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[352]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_RouteKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_RouteKey) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_RouteKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[352]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_RouteKey.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_RouteKey) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 0, 0, 0, 1}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_RouteKey) GetPathId() uint64 {
	if x != nil {
		return x.PathId
	}
	return 0
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_RouteKey) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_RouteKey) GetColor() uint64 {
	if x != nil {
		return x.Color
	}
	return 0
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_RouteKey) GetRoute() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route {
	if x != nil {
		return x.Route
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrIndex         *ywrapper.UintValue                     `protobuf:"bytes,238706832,opt,name=attr_index,json=attrIndex,proto3" json:"attr_index,omitempty"`
	Color             *ywrapper.UintValue                     `protobuf:"bytes,156621975,opt,name=color,proto3" json:"color,omitempty"`
	CommunityIndex    *ywrapper.UintValue                     `protobuf:"bytes,172515574,opt,name=community_index,json=communityIndex,proto3" json:"community_index,omitempty"`
	Endpoint          *ywrapper.StringValue                   `protobuf:"bytes,285331709,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	ExtCommunityIndex *ywrapper.UintValue                     `protobuf:"bytes,53768408,opt,name=ext_community_index,json=extCommunityIndex,proto3" json:"ext_community_index,omitempty"`
	InvalidReason     OpenconfigRibBgpTypesINVALIDROUTEREASON `protobuf:"varint,273332288,opt,name=invalid_reason,json=invalidReason,proto3,enum=openconfig.OpenconfigRibBgpTypesINVALIDROUTEREASON" json:"invalid_reason,omitempty"`
	LastModified      *ywrapper.UintValue                     `protobuf:"bytes,23899002,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
	PathId            *ywrapper.UintValue                     `protobuf:"bytes,103389107,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	ValidRoute        *ywrapper.BoolValue                     `protobuf:"bytes,514770248,opt,name=valid_route,json=validRoute,proto3" json:"valid_route,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_State) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[353]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_State) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[353]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_State.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 0, 0, 0, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_State) GetAttrIndex() *ywrapper.UintValue {
	if x != nil {
		return x.AttrIndex
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_State) GetColor() *ywrapper.UintValue {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_State) GetCommunityIndex() *ywrapper.UintValue {
	if x != nil {
		return x.CommunityIndex
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_State) GetEndpoint() *ywrapper.StringValue {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_State) GetExtCommunityIndex() *ywrapper.UintValue {
	if x != nil {
		return x.ExtCommunityIndex
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_State) GetInvalidReason() OpenconfigRibBgpTypesINVALIDROUTEREASON {
	if x != nil {
		return x.InvalidReason
	}
	return OpenconfigRibBgpTypesINVALIDROUTEREASON_OPENCONFIGRIBBGPTYPESINVALIDROUTEREASON_UNSET
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_State) GetLastModified() *ywrapper.UintValue {
	if x != nil {
		return x.LastModified
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_State) GetPathId() *ywrapper.UintValue {
	if x != nil {
		return x.PathId
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_State) GetValidRoute() *ywrapper.BoolValue {
	if x != nil {
		return x.ValidRoute
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_UnknownAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnknownAttribute []*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey `protobuf:"bytes,503261332,rep,name=unknown_attribute,json=unknownAttribute,proto3" json:"unknown_attribute,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_UnknownAttributes) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_UnknownAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[354]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_UnknownAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_UnknownAttributes) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_UnknownAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[354]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_UnknownAttributes.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_UnknownAttributes) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 0, 0, 0, 0, 1}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_UnknownAttributes) GetUnknownAttribute() []*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey {
	if x != nil {
		return x.UnknownAttribute
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State `protobuf:"bytes,270474990,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[355]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[355]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 0, 0, 0, 0, 1, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute) GetState() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrType         uint64                                                                                          `protobuf:"varint,1,opt,name=attr_type,json=attrType,proto3" json:"attr_type,omitempty"`
	UnknownAttribute *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute `protobuf:"bytes,2,opt,name=unknown_attribute,json=unknownAttribute,proto3" json:"unknown_attribute,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[356]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[356]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 0, 0, 0, 0, 1, 1}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey) GetAttrType() uint64 {
	if x != nil {
		return x.AttrType
	}
	return 0
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey) GetUnknownAttribute() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute {
	if x != nil {
		return x.UnknownAttribute
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrLen    *ywrapper.UintValue  `protobuf:"bytes,338419130,opt,name=attr_len,json=attrLen,proto3" json:"attr_len,omitempty"`
	AttrType   *ywrapper.UintValue  `protobuf:"bytes,58634285,opt,name=attr_type,json=attrType,proto3" json:"attr_type,omitempty"`
	AttrValue  *ywrapper.BytesValue `protobuf:"bytes,343306604,opt,name=attr_value,json=attrValue,proto3" json:"attr_value,omitempty"`
	Extended   *ywrapper.BoolValue  `protobuf:"bytes,318062426,opt,name=extended,proto3" json:"extended,omitempty"`
	Optional   *ywrapper.BoolValue  `protobuf:"bytes,468892701,opt,name=optional,proto3" json:"optional,omitempty"`
	Partial    *ywrapper.BoolValue  `protobuf:"bytes,280468652,opt,name=partial,proto3" json:"partial,omitempty"`
	Transitive *ywrapper.BoolValue  `protobuf:"bytes,220164460,opt,name=transitive,proto3" json:"transitive,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[357]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[357]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrLen() *ywrapper.UintValue {
	if x != nil {
		return x.AttrLen
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrType() *ywrapper.UintValue {
	if x != nil {
		return x.AttrType
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrValue() *ywrapper.BytesValue {
	if x != nil {
		return x.AttrValue
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetExtended() *ywrapper.BoolValue {
	if x != nil {
		return x.Extended
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetOptional() *ywrapper.BoolValue {
	if x != nil {
		return x.Optional
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetPartial() *ywrapper.BoolValue {
	if x != nil {
		return x.Partial
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetTransitive() *ywrapper.BoolValue {
	if x != nil {
		return x.Transitive
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdjRibInPost  *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost  `protobuf:"bytes,454957299,opt,name=adj_rib_in_post,json=adjRibInPost,proto3" json:"adj_rib_in_post,omitempty"`
	AdjRibInPre   *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre   `protobuf:"bytes,469800832,opt,name=adj_rib_in_pre,json=adjRibInPre,proto3" json:"adj_rib_in_pre,omitempty"`
	AdjRibOutPost *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost `protobuf:"bytes,615286,opt,name=adj_rib_out_post,json=adjRibOutPost,proto3" json:"adj_rib_out_post,omitempty"`
	AdjRibOutPre  *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre  `protobuf:"bytes,372480075,opt,name=adj_rib_out_pre,json=adjRibOutPre,proto3" json:"adj_rib_out_pre,omitempty"`
	State         *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_State         `protobuf:"bytes,193311100,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[358]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[358]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 0, 1, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor) GetAdjRibInPost() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost {
	if x != nil {
		return x.AdjRibInPost
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor) GetAdjRibInPre() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre {
	if x != nil {
		return x.AdjRibInPre
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor) GetAdjRibOutPost() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost {
	if x != nil {
		return x.AdjRibOutPost
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor) GetAdjRibOutPre() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre {
	if x != nil {
		return x.AdjRibOutPre
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor) GetState() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_NeighborKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NeighborAddress string                                                      `protobuf:"bytes,1,opt,name=neighbor_address,json=neighborAddress,proto3" json:"neighbor_address,omitempty"`
	Neighbor        *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor `protobuf:"bytes,2,opt,name=neighbor,proto3" json:"neighbor,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_NeighborKey) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_NeighborKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[359]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_NeighborKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_NeighborKey) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_NeighborKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[359]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_NeighborKey.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_NeighborKey) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 0, 1, 1}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_NeighborKey) GetNeighborAddress() string {
	if x != nil {
		return x.NeighborAddress
	}
	return ""
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_NeighborKey) GetNeighbor() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor {
	if x != nil {
		return x.Neighbor
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Routes *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes `protobuf:"bytes,436350368,opt,name=routes,proto3" json:"routes,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[360]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[360]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 0, 1, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost) GetRoutes() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes {
	if x != nil {
		return x.Routes
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Routes *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes `protobuf:"bytes,11426917,opt,name=routes,proto3" json:"routes,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[361]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[361]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 0, 1, 0, 1}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre) GetRoutes() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes {
	if x != nil {
		return x.Routes
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Routes *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes `protobuf:"bytes,33722895,opt,name=routes,proto3" json:"routes,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[362]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[362]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 0, 1, 0, 2}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost) GetRoutes() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes {
	if x != nil {
		return x.Routes
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Routes *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes `protobuf:"bytes,173569288,opt,name=routes,proto3" json:"routes,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[363]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[363]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 0, 1, 0, 3}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre) GetRoutes() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes {
	if x != nil {
		return x.Routes
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NeighborAddress *ywrapper.StringValue `protobuf:"bytes,453549394,opt,name=neighbor_address,json=neighborAddress,proto3" json:"neighbor_address,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_State) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[364]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_State) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[364]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_State.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 0, 1, 0, 4}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_State) GetNeighborAddress() *ywrapper.StringValue {
	if x != nil {
		return x.NeighborAddress
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Route []*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey `protobuf:"bytes,172611826,rep,name=route,proto3" json:"route,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[365]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[365]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 0, 1, 0, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes) GetRoute() []*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey {
	if x != nil {
		return x.Route
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State             *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State             `protobuf:"bytes,456366356,opt,name=state,proto3" json:"state,omitempty"`
	UnknownAttributes *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes `protobuf:"bytes,116060573,opt,name=unknown_attributes,json=unknownAttributes,proto3" json:"unknown_attributes,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[366]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[366]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 0, 1, 0, 0, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route) GetState() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route) GetUnknownAttributes() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes {
	if x != nil {
		return x.UnknownAttributes
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PathId   uint64                                                                                `protobuf:"varint,1,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	Endpoint string                                                                                `protobuf:"bytes,2,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	Color    uint64                                                                                `protobuf:"varint,3,opt,name=color,proto3" json:"color,omitempty"`
	Route    *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route `protobuf:"bytes,4,opt,name=route,proto3" json:"route,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[367]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[367]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 0, 1, 0, 0, 0, 1}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey) GetPathId() uint64 {
	if x != nil {
		return x.PathId
	}
	return 0
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey) GetColor() uint64 {
	if x != nil {
		return x.Color
	}
	return 0
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey) GetRoute() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route {
	if x != nil {
		return x.Route
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrIndex         *ywrapper.UintValue                     `protobuf:"bytes,392797277,opt,name=attr_index,json=attrIndex,proto3" json:"attr_index,omitempty"`
	BestPath          *ywrapper.BoolValue                     `protobuf:"bytes,199396107,opt,name=best_path,json=bestPath,proto3" json:"best_path,omitempty"`
	Color             *ywrapper.UintValue                     `protobuf:"bytes,453198756,opt,name=color,proto3" json:"color,omitempty"`
	CommunityIndex    *ywrapper.UintValue                     `protobuf:"bytes,257078137,opt,name=community_index,json=communityIndex,proto3" json:"community_index,omitempty"`
	Endpoint          *ywrapper.StringValue                   `protobuf:"bytes,486737024,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	ExtCommunityIndex *ywrapper.UintValue                     `protobuf:"bytes,392264159,opt,name=ext_community_index,json=extCommunityIndex,proto3" json:"ext_community_index,omitempty"`
	InvalidReason     OpenconfigRibBgpTypesINVALIDROUTEREASON `protobuf:"varint,254569917,opt,name=invalid_reason,json=invalidReason,proto3,enum=openconfig.OpenconfigRibBgpTypesINVALIDROUTEREASON" json:"invalid_reason,omitempty"`
	LastModified      *ywrapper.UintValue                     `protobuf:"bytes,85775109,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
	PathId            *ywrapper.UintValue                     `protobuf:"bytes,167201128,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	ValidRoute        *ywrapper.BoolValue                     `protobuf:"bytes,473020359,opt,name=valid_route,json=validRoute,proto3" json:"valid_route,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[368]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[368]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 0, 1, 0, 0, 0, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) GetAttrIndex() *ywrapper.UintValue {
	if x != nil {
		return x.AttrIndex
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) GetBestPath() *ywrapper.BoolValue {
	if x != nil {
		return x.BestPath
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) GetColor() *ywrapper.UintValue {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) GetCommunityIndex() *ywrapper.UintValue {
	if x != nil {
		return x.CommunityIndex
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) GetEndpoint() *ywrapper.StringValue {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) GetExtCommunityIndex() *ywrapper.UintValue {
	if x != nil {
		return x.ExtCommunityIndex
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) GetInvalidReason() OpenconfigRibBgpTypesINVALIDROUTEREASON {
	if x != nil {
		return x.InvalidReason
	}
	return OpenconfigRibBgpTypesINVALIDROUTEREASON_OPENCONFIGRIBBGPTYPESINVALIDROUTEREASON_UNSET
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) GetLastModified() *ywrapper.UintValue {
	if x != nil {
		return x.LastModified
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) GetPathId() *ywrapper.UintValue {
	if x != nil {
		return x.PathId
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) GetValidRoute() *ywrapper.BoolValue {
	if x != nil {
		return x.ValidRoute
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnknownAttribute []*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey `protobuf:"bytes,123637357,rep,name=unknown_attribute,json=unknownAttribute,proto3" json:"unknown_attribute,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[369]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[369]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 0, 1, 0, 0, 0, 0, 1}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes) GetUnknownAttribute() []*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey {
	if x != nil {
		return x.UnknownAttribute
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State `protobuf:"bytes,188051647,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[370]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[370]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute) GetState() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrType         uint64                                                                                                                   `protobuf:"varint,1,opt,name=attr_type,json=attrType,proto3" json:"attr_type,omitempty"`
	UnknownAttribute *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute `protobuf:"bytes,2,opt,name=unknown_attribute,json=unknownAttribute,proto3" json:"unknown_attribute,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[371]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[371]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) GetAttrType() uint64 {
	if x != nil {
		return x.AttrType
	}
	return 0
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) GetUnknownAttribute() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute {
	if x != nil {
		return x.UnknownAttribute
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrLen    *ywrapper.UintValue  `protobuf:"bytes,175732789,opt,name=attr_len,json=attrLen,proto3" json:"attr_len,omitempty"`
	AttrType   *ywrapper.UintValue  `protobuf:"bytes,424184720,opt,name=attr_type,json=attrType,proto3" json:"attr_type,omitempty"`
	AttrValue  *ywrapper.BytesValue `protobuf:"bytes,464232435,opt,name=attr_value,json=attrValue,proto3" json:"attr_value,omitempty"`
	Extended   *ywrapper.BoolValue  `protobuf:"bytes,376950617,opt,name=extended,proto3" json:"extended,omitempty"`
	Optional   *ywrapper.BoolValue  `protobuf:"bytes,487722386,opt,name=optional,proto3" json:"optional,omitempty"`
	Partial    *ywrapper.BoolValue  `protobuf:"bytes,10021653,opt,name=partial,proto3" json:"partial,omitempty"`
	Transitive *ywrapper.BoolValue  `protobuf:"bytes,341112707,opt,name=transitive,proto3" json:"transitive,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[372]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[372]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrLen() *ywrapper.UintValue {
	if x != nil {
		return x.AttrLen
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrType() *ywrapper.UintValue {
	if x != nil {
		return x.AttrType
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrValue() *ywrapper.BytesValue {
	if x != nil {
		return x.AttrValue
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetExtended() *ywrapper.BoolValue {
	if x != nil {
		return x.Extended
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetOptional() *ywrapper.BoolValue {
	if x != nil {
		return x.Optional
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetPartial() *ywrapper.BoolValue {
	if x != nil {
		return x.Partial
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetTransitive() *ywrapper.BoolValue {
	if x != nil {
		return x.Transitive
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Route []*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey `protobuf:"bytes,291036207,rep,name=route,proto3" json:"route,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[373]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[373]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 0, 1, 0, 1, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes) GetRoute() []*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey {
	if x != nil {
		return x.Route
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State             *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State             `protobuf:"bytes,137259401,opt,name=state,proto3" json:"state,omitempty"`
	UnknownAttributes *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes `protobuf:"bytes,361959226,opt,name=unknown_attributes,json=unknownAttributes,proto3" json:"unknown_attributes,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[374]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[374]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 0, 1, 0, 1, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route) GetState() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route) GetUnknownAttributes() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes {
	if x != nil {
		return x.UnknownAttributes
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PathId   uint64                                                                               `protobuf:"varint,1,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	Endpoint string                                                                               `protobuf:"bytes,2,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	Color    uint64                                                                               `protobuf:"varint,3,opt,name=color,proto3" json:"color,omitempty"`
	Route    *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route `protobuf:"bytes,4,opt,name=route,proto3" json:"route,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[375]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[375]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 0, 1, 0, 1, 0, 1}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey) GetPathId() uint64 {
	if x != nil {
		return x.PathId
	}
	return 0
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey) GetColor() uint64 {
	if x != nil {
		return x.Color
	}
	return 0
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey) GetRoute() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route {
	if x != nil {
		return x.Route
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrIndex         *ywrapper.UintValue                     `protobuf:"bytes,487222366,opt,name=attr_index,json=attrIndex,proto3" json:"attr_index,omitempty"`
	Color             *ywrapper.UintValue                     `protobuf:"bytes,188950145,opt,name=color,proto3" json:"color,omitempty"`
	CommunityIndex    *ywrapper.UintValue                     `protobuf:"bytes,304811832,opt,name=community_index,json=communityIndex,proto3" json:"community_index,omitempty"`
	Endpoint          *ywrapper.StringValue                   `protobuf:"bytes,272193839,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	ExtCommunityIndex *ywrapper.UintValue                     `protobuf:"bytes,181994914,opt,name=ext_community_index,json=extCommunityIndex,proto3" json:"ext_community_index,omitempty"`
	InvalidReason     OpenconfigRibBgpTypesINVALIDROUTEREASON `protobuf:"varint,399843270,opt,name=invalid_reason,json=invalidReason,proto3,enum=openconfig.OpenconfigRibBgpTypesINVALIDROUTEREASON" json:"invalid_reason,omitempty"`
	LastModified      *ywrapper.UintValue                     `protobuf:"bytes,282746144,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
	PathId            *ywrapper.UintValue                     `protobuf:"bytes,66409637,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	ValidRoute        *ywrapper.BoolValue                     `protobuf:"bytes,124920942,opt,name=valid_route,json=validRoute,proto3" json:"valid_route,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[376]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[376]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 0, 1, 0, 1, 0, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) GetAttrIndex() *ywrapper.UintValue {
	if x != nil {
		return x.AttrIndex
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) GetColor() *ywrapper.UintValue {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) GetCommunityIndex() *ywrapper.UintValue {
	if x != nil {
		return x.CommunityIndex
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) GetEndpoint() *ywrapper.StringValue {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) GetExtCommunityIndex() *ywrapper.UintValue {
	if x != nil {
		return x.ExtCommunityIndex
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) GetInvalidReason() OpenconfigRibBgpTypesINVALIDROUTEREASON {
	if x != nil {
		return x.InvalidReason
	}
	return OpenconfigRibBgpTypesINVALIDROUTEREASON_OPENCONFIGRIBBGPTYPESINVALIDROUTEREASON_UNSET
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) GetLastModified() *ywrapper.UintValue {
	if x != nil {
		return x.LastModified
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) GetPathId() *ywrapper.UintValue {
	if x != nil {
		return x.PathId
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) GetValidRoute() *ywrapper.BoolValue {
	if x != nil {
		return x.ValidRoute
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnknownAttribute []*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey `protobuf:"bytes,17374978,rep,name=unknown_attribute,json=unknownAttribute,proto3" json:"unknown_attribute,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[377]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[377]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 0, 1, 0, 1, 0, 0, 1}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes) GetUnknownAttribute() []*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey {
	if x != nil {
		return x.UnknownAttribute
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State `protobuf:"bytes,472052100,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[378]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[378]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute) GetState() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrType         uint64                                                                                                                  `protobuf:"varint,1,opt,name=attr_type,json=attrType,proto3" json:"attr_type,omitempty"`
	UnknownAttribute *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute `protobuf:"bytes,2,opt,name=unknown_attribute,json=unknownAttribute,proto3" json:"unknown_attribute,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[379]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[379]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) GetAttrType() uint64 {
	if x != nil {
		return x.AttrType
	}
	return 0
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) GetUnknownAttribute() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute {
	if x != nil {
		return x.UnknownAttribute
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrLen    *ywrapper.UintValue  `protobuf:"bytes,351437432,opt,name=attr_len,json=attrLen,proto3" json:"attr_len,omitempty"`
	AttrType   *ywrapper.UintValue  `protobuf:"bytes,511194515,opt,name=attr_type,json=attrType,proto3" json:"attr_type,omitempty"`
	AttrValue  *ywrapper.BytesValue `protobuf:"bytes,127005306,opt,name=attr_value,json=attrValue,proto3" json:"attr_value,omitempty"`
	Extended   *ywrapper.BoolValue  `protobuf:"bytes,448728340,opt,name=extended,proto3" json:"extended,omitempty"`
	Optional   *ywrapper.BoolValue  `protobuf:"bytes,217900327,opt,name=optional,proto3" json:"optional,omitempty"`
	Partial    *ywrapper.BoolValue  `protobuf:"bytes,236905474,opt,name=partial,proto3" json:"partial,omitempty"`
	Transitive *ywrapper.BoolValue  `protobuf:"bytes,482488138,opt,name=transitive,proto3" json:"transitive,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[380]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[380]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrLen() *ywrapper.UintValue {
	if x != nil {
		return x.AttrLen
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrType() *ywrapper.UintValue {
	if x != nil {
		return x.AttrType
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrValue() *ywrapper.BytesValue {
	if x != nil {
		return x.AttrValue
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetExtended() *ywrapper.BoolValue {
	if x != nil {
		return x.Extended
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetOptional() *ywrapper.BoolValue {
	if x != nil {
		return x.Optional
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetPartial() *ywrapper.BoolValue {
	if x != nil {
		return x.Partial
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetTransitive() *ywrapper.BoolValue {
	if x != nil {
		return x.Transitive
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Route []*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey `protobuf:"bytes,511912565,rep,name=route,proto3" json:"route,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[381]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[381]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 0, 1, 0, 2, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes) GetRoute() []*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey {
	if x != nil {
		return x.Route
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State             *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State             `protobuf:"bytes,432375735,opt,name=state,proto3" json:"state,omitempty"`
	UnknownAttributes *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes `protobuf:"bytes,11675692,opt,name=unknown_attributes,json=unknownAttributes,proto3" json:"unknown_attributes,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[382]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[382]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 0, 1, 0, 2, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route) GetState() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route) GetUnknownAttributes() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes {
	if x != nil {
		return x.UnknownAttributes
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PathId   uint64                                                                                 `protobuf:"varint,1,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	Endpoint string                                                                                 `protobuf:"bytes,2,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	Color    uint64                                                                                 `protobuf:"varint,3,opt,name=color,proto3" json:"color,omitempty"`
	Route    *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route `protobuf:"bytes,4,opt,name=route,proto3" json:"route,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[383]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[383]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 0, 1, 0, 2, 0, 1}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey) GetPathId() uint64 {
	if x != nil {
		return x.PathId
	}
	return 0
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey) GetColor() uint64 {
	if x != nil {
		return x.Color
	}
	return 0
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey) GetRoute() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route {
	if x != nil {
		return x.Route
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrIndex         *ywrapper.UintValue                     `protobuf:"bytes,513202836,opt,name=attr_index,json=attrIndex,proto3" json:"attr_index,omitempty"`
	Color             *ywrapper.UintValue                     `protobuf:"bytes,480577067,opt,name=color,proto3" json:"color,omitempty"`
	CommunityIndex    *ywrapper.UintValue                     `protobuf:"bytes,376981330,opt,name=community_index,json=communityIndex,proto3" json:"community_index,omitempty"`
	Endpoint          *ywrapper.StringValue                   `protobuf:"bytes,520403937,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	ExtCommunityIndex *ywrapper.UintValue                     `protobuf:"bytes,474636892,opt,name=ext_community_index,json=extCommunityIndex,proto3" json:"ext_community_index,omitempty"`
	InvalidReason     OpenconfigRibBgpTypesINVALIDROUTEREASON `protobuf:"varint,154295812,opt,name=invalid_reason,json=invalidReason,proto3,enum=openconfig.OpenconfigRibBgpTypesINVALIDROUTEREASON" json:"invalid_reason,omitempty"`
	LastModified      *ywrapper.UintValue                     `protobuf:"bytes,447942222,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
	PathId            *ywrapper.UintValue                     `protobuf:"bytes,388774343,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	ValidRoute        *ywrapper.BoolValue                     `protobuf:"bytes,488206132,opt,name=valid_route,json=validRoute,proto3" json:"valid_route,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[384]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[384]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 0, 1, 0, 2, 0, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) GetAttrIndex() *ywrapper.UintValue {
	if x != nil {
		return x.AttrIndex
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) GetColor() *ywrapper.UintValue {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) GetCommunityIndex() *ywrapper.UintValue {
	if x != nil {
		return x.CommunityIndex
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) GetEndpoint() *ywrapper.StringValue {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) GetExtCommunityIndex() *ywrapper.UintValue {
	if x != nil {
		return x.ExtCommunityIndex
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) GetInvalidReason() OpenconfigRibBgpTypesINVALIDROUTEREASON {
	if x != nil {
		return x.InvalidReason
	}
	return OpenconfigRibBgpTypesINVALIDROUTEREASON_OPENCONFIGRIBBGPTYPESINVALIDROUTEREASON_UNSET
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) GetLastModified() *ywrapper.UintValue {
	if x != nil {
		return x.LastModified
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) GetPathId() *ywrapper.UintValue {
	if x != nil {
		return x.PathId
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) GetValidRoute() *ywrapper.BoolValue {
	if x != nil {
		return x.ValidRoute
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnknownAttribute []*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey `protobuf:"bytes,508743104,rep,name=unknown_attribute,json=unknownAttribute,proto3" json:"unknown_attribute,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[385]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[385]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 0, 1, 0, 2, 0, 0, 1}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes) GetUnknownAttribute() []*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey {
	if x != nil {
		return x.UnknownAttribute
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State `protobuf:"bytes,127207594,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[386]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[386]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 0, 1, 0, 2, 0, 0, 1, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute) GetState() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrType         uint64                                                                                                                    `protobuf:"varint,1,opt,name=attr_type,json=attrType,proto3" json:"attr_type,omitempty"`
	UnknownAttribute *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute `protobuf:"bytes,2,opt,name=unknown_attribute,json=unknownAttribute,proto3" json:"unknown_attribute,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[387]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[387]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 0, 1, 0, 2, 0, 0, 1, 1}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) GetAttrType() uint64 {
	if x != nil {
		return x.AttrType
	}
	return 0
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) GetUnknownAttribute() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute {
	if x != nil {
		return x.UnknownAttribute
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrLen    *ywrapper.UintValue  `protobuf:"bytes,277067846,opt,name=attr_len,json=attrLen,proto3" json:"attr_len,omitempty"`
	AttrType   *ywrapper.UintValue  `protobuf:"bytes,367492889,opt,name=attr_type,json=attrType,proto3" json:"attr_type,omitempty"`
	AttrValue  *ywrapper.BytesValue `protobuf:"bytes,80045792,opt,name=attr_value,json=attrValue,proto3" json:"attr_value,omitempty"`
	Extended   *ywrapper.BoolValue  `protobuf:"bytes,532792702,opt,name=extended,proto3" json:"extended,omitempty"`
	Optional   *ywrapper.BoolValue  `protobuf:"bytes,70597153,opt,name=optional,proto3" json:"optional,omitempty"`
	Partial    *ywrapper.BoolValue  `protobuf:"bytes,213327600,opt,name=partial,proto3" json:"partial,omitempty"`
	Transitive *ywrapper.BoolValue  `protobuf:"bytes,292350800,opt,name=transitive,proto3" json:"transitive,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[388]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[388]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 0, 1, 0, 2, 0, 0, 1, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrLen() *ywrapper.UintValue {
	if x != nil {
		return x.AttrLen
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrType() *ywrapper.UintValue {
	if x != nil {
		return x.AttrType
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrValue() *ywrapper.BytesValue {
	if x != nil {
		return x.AttrValue
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetExtended() *ywrapper.BoolValue {
	if x != nil {
		return x.Extended
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetOptional() *ywrapper.BoolValue {
	if x != nil {
		return x.Optional
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetPartial() *ywrapper.BoolValue {
	if x != nil {
		return x.Partial
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetTransitive() *ywrapper.BoolValue {
	if x != nil {
		return x.Transitive
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Route []*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey `protobuf:"bytes,423958618,rep,name=route,proto3" json:"route,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[389]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[389]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 0, 1, 0, 3, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes) GetRoute() []*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey {
	if x != nil {
		return x.Route
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State             *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State             `protobuf:"bytes,397053580,opt,name=state,proto3" json:"state,omitempty"`
	UnknownAttributes *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes `protobuf:"bytes,190223989,opt,name=unknown_attributes,json=unknownAttributes,proto3" json:"unknown_attributes,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[390]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[390]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 0, 1, 0, 3, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route) GetState() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route) GetUnknownAttributes() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes {
	if x != nil {
		return x.UnknownAttributes
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PathId   uint64                                                                                `protobuf:"varint,1,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	Endpoint string                                                                                `protobuf:"bytes,2,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	Color    uint64                                                                                `protobuf:"varint,3,opt,name=color,proto3" json:"color,omitempty"`
	Route    *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route `protobuf:"bytes,4,opt,name=route,proto3" json:"route,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[391]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[391]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 0, 1, 0, 3, 0, 1}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey) GetPathId() uint64 {
	if x != nil {
		return x.PathId
	}
	return 0
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey) GetColor() uint64 {
	if x != nil {
		return x.Color
	}
	return 0
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey) GetRoute() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route {
	if x != nil {
		return x.Route
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrIndex         *ywrapper.UintValue                     `protobuf:"bytes,148270549,opt,name=attr_index,json=attrIndex,proto3" json:"attr_index,omitempty"`
	Color             *ywrapper.UintValue                     `protobuf:"bytes,103801852,opt,name=color,proto3" json:"color,omitempty"`
	CommunityIndex    *ywrapper.UintValue                     `protobuf:"bytes,362907617,opt,name=community_index,json=communityIndex,proto3" json:"community_index,omitempty"`
	Endpoint          *ywrapper.StringValue                   `protobuf:"bytes,50274424,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	ExtCommunityIndex *ywrapper.UintValue                     `protobuf:"bytes,479881671,opt,name=ext_community_index,json=extCommunityIndex,proto3" json:"ext_community_index,omitempty"`
	InvalidReason     OpenconfigRibBgpTypesINVALIDROUTEREASON `protobuf:"varint,521595749,opt,name=invalid_reason,json=invalidReason,proto3,enum=openconfig.OpenconfigRibBgpTypesINVALIDROUTEREASON" json:"invalid_reason,omitempty"`
	LastModified      *ywrapper.UintValue                     `protobuf:"bytes,29029325,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
	PathId            *ywrapper.UintValue                     `protobuf:"bytes,534934560,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	ValidRoute        *ywrapper.BoolValue                     `protobuf:"bytes,117390095,opt,name=valid_route,json=validRoute,proto3" json:"valid_route,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[392]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[392]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 0, 1, 0, 3, 0, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) GetAttrIndex() *ywrapper.UintValue {
	if x != nil {
		return x.AttrIndex
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) GetColor() *ywrapper.UintValue {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) GetCommunityIndex() *ywrapper.UintValue {
	if x != nil {
		return x.CommunityIndex
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) GetEndpoint() *ywrapper.StringValue {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) GetExtCommunityIndex() *ywrapper.UintValue {
	if x != nil {
		return x.ExtCommunityIndex
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) GetInvalidReason() OpenconfigRibBgpTypesINVALIDROUTEREASON {
	if x != nil {
		return x.InvalidReason
	}
	return OpenconfigRibBgpTypesINVALIDROUTEREASON_OPENCONFIGRIBBGPTYPESINVALIDROUTEREASON_UNSET
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) GetLastModified() *ywrapper.UintValue {
	if x != nil {
		return x.LastModified
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) GetPathId() *ywrapper.UintValue {
	if x != nil {
		return x.PathId
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) GetValidRoute() *ywrapper.BoolValue {
	if x != nil {
		return x.ValidRoute
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnknownAttribute []*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey `protobuf:"bytes,336984453,rep,name=unknown_attribute,json=unknownAttribute,proto3" json:"unknown_attribute,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[393]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[393]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 0, 1, 0, 3, 0, 0, 1}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes) GetUnknownAttribute() []*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey {
	if x != nil {
		return x.UnknownAttribute
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State `protobuf:"bytes,238740071,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[394]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[394]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 0, 1, 0, 3, 0, 0, 1, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute) GetState() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrType         uint64                                                                                                                   `protobuf:"varint,1,opt,name=attr_type,json=attrType,proto3" json:"attr_type,omitempty"`
	UnknownAttribute *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute `protobuf:"bytes,2,opt,name=unknown_attribute,json=unknownAttribute,proto3" json:"unknown_attribute,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[395]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[395]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 0, 1, 0, 3, 0, 0, 1, 1}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) GetAttrType() uint64 {
	if x != nil {
		return x.AttrType
	}
	return 0
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) GetUnknownAttribute() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute {
	if x != nil {
		return x.UnknownAttribute
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrLen    *ywrapper.UintValue  `protobuf:"bytes,270791885,opt,name=attr_len,json=attrLen,proto3" json:"attr_len,omitempty"`
	AttrType   *ywrapper.UintValue  `protobuf:"bytes,525634280,opt,name=attr_type,json=attrType,proto3" json:"attr_type,omitempty"`
	AttrValue  *ywrapper.BytesValue `protobuf:"bytes,22745787,opt,name=attr_value,json=attrValue,proto3" json:"attr_value,omitempty"`
	Extended   *ywrapper.BoolValue  `protobuf:"bytes,477040737,opt,name=extended,proto3" json:"extended,omitempty"`
	Optional   *ywrapper.BoolValue  `protobuf:"bytes,391861130,opt,name=optional,proto3" json:"optional,omitempty"`
	Partial    *ywrapper.BoolValue  `protobuf:"bytes,430692781,opt,name=partial,proto3" json:"partial,omitempty"`
	Transitive *ywrapper.BoolValue  `protobuf:"bytes,362163547,opt,name=transitive,proto3" json:"transitive,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[396]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[396]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 0, 1, 0, 3, 0, 0, 1, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrLen() *ywrapper.UintValue {
	if x != nil {
		return x.AttrLen
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrType() *ywrapper.UintValue {
	if x != nil {
		return x.AttrType
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrValue() *ywrapper.BytesValue {
	if x != nil {
		return x.AttrValue
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetExtended() *ywrapper.BoolValue {
	if x != nil {
		return x.Extended
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetOptional() *ywrapper.BoolValue {
	if x != nil {
		return x.Optional
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetPartial() *ywrapper.BoolValue {
	if x != nil {
		return x.Partial
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetTransitive() *ywrapper.BoolValue {
	if x != nil {
		return x.Transitive
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Routes *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes `protobuf:"bytes,125738905,opt,name=routes,proto3" json:"routes,omitempty"`
	State  *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_State  `protobuf:"bytes,121411326,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[397]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[397]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 1, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib) GetRoutes() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes {
	if x != nil {
		return x.Routes
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib) GetState() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Neighbor []*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_NeighborKey `protobuf:"bytes,88767088,rep,name=neighbor,proto3" json:"neighbor,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[398]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[398]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 1, 1}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors) GetNeighbor() []*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_NeighborKey {
	if x != nil {
		return x.Neighbor
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Route []*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_RouteKey `protobuf:"bytes,360940667,rep,name=route,proto3" json:"route,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[399]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[399]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 1, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes) GetRoute() []*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_RouteKey {
	if x != nil {
		return x.Route
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_State) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[400]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_State) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[400]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_State.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 1, 0, 1}
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State             *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State             `protobuf:"bytes,82995621,opt,name=state,proto3" json:"state,omitempty"`
	UnknownAttributes *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes `protobuf:"bytes,475716614,opt,name=unknown_attributes,json=unknownAttributes,proto3" json:"unknown_attributes,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[401]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[401]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 1, 0, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route) GetState() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route) GetUnknownAttributes() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes {
	if x != nil {
		return x.UnknownAttributes
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_RouteKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix string `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// Types that are assignable to Origin:
	//	*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_RouteKey_OriginOpenconfigpolicytypesinstallprotocoltype
	//	*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_RouteKey_OriginString
	Origin isBgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_RouteKey_Origin `protobuf_oneof:"origin"`
	PathId uint64                                                               `protobuf:"varint,3,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	Route  *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route            `protobuf:"bytes,4,opt,name=route,proto3" json:"route,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_RouteKey) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_RouteKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[402]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_RouteKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_RouteKey) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_RouteKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[402]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_RouteKey.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_RouteKey) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 1, 0, 0, 1}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_RouteKey) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (m *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_RouteKey) GetOrigin() isBgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_RouteKey_Origin {
	if m != nil {
		return m.Origin
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_RouteKey) GetOriginOpenconfigpolicytypesinstallprotocoltype() OpenconfigPolicyTypesINSTALLPROTOCOLTYPE {
	if x, ok := x.GetOrigin().(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_RouteKey_OriginOpenconfigpolicytypesinstallprotocoltype); ok {
		return x.OriginOpenconfigpolicytypesinstallprotocoltype
	}
	return OpenconfigPolicyTypesINSTALLPROTOCOLTYPE_OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_UNSET
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_RouteKey) GetOriginString() string {
	if x, ok := x.GetOrigin().(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_RouteKey_OriginString); ok {
		return x.OriginString
	}
	return ""
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_RouteKey) GetPathId() uint64 {
	if x != nil {
		return x.PathId
	}
	return 0
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_RouteKey) GetRoute() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route {
	if x != nil {
		return x.Route
	}
	return nil
}

type isBgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_RouteKey_Origin interface {
	isBgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_RouteKey_Origin()
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_RouteKey_OriginOpenconfigpolicytypesinstallprotocoltype struct {
	OriginOpenconfigpolicytypesinstallprotocoltype OpenconfigPolicyTypesINSTALLPROTOCOLTYPE `protobuf:"varint,147494829,opt,name=origin_openconfigpolicytypesinstallprotocoltype,json=originOpenconfigpolicytypesinstallprotocoltype,proto3,enum=openconfig.OpenconfigPolicyTypesINSTALLPROTOCOLTYPE,oneof"`
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_RouteKey_OriginString struct {
	OriginString string `protobuf:"bytes,422643478,opt,name=origin_string,json=originString,proto3,oneof"`
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_RouteKey_OriginOpenconfigpolicytypesinstallprotocoltype) isBgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_RouteKey_Origin() {
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_RouteKey_OriginString) isBgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_RouteKey_Origin() {
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrIndex         *ywrapper.UintValue                     `protobuf:"bytes,507223034,opt,name=attr_index,json=attrIndex,proto3" json:"attr_index,omitempty"`
	CommunityIndex    *ywrapper.UintValue                     `protobuf:"bytes,489816172,opt,name=community_index,json=communityIndex,proto3" json:"community_index,omitempty"`
	ExtCommunityIndex *ywrapper.UintValue                     `protobuf:"bytes,38113294,opt,name=ext_community_index,json=extCommunityIndex,proto3" json:"ext_community_index,omitempty"`
	InvalidReason     OpenconfigRibBgpTypesINVALIDROUTEREASON `protobuf:"varint,271625810,opt,name=invalid_reason,json=invalidReason,proto3,enum=openconfig.OpenconfigRibBgpTypesINVALIDROUTEREASON" json:"invalid_reason,omitempty"`
	LastModified      *ywrapper.UintValue                     `protobuf:"bytes,146706492,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
	// Types that are assignable to Origin:
	//	*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State_OriginOpenconfigpolicytypesinstallprotocoltype
	//	*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State_OriginString
	Origin     isBgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State_Origin `protobuf_oneof:"origin"`
	PathId     *ywrapper.UintValue                                                     `protobuf:"bytes,315576321,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	Prefix     *ywrapper.StringValue                                                   `protobuf:"bytes,523148708,opt,name=prefix,proto3" json:"prefix,omitempty"`
	ValidRoute *ywrapper.BoolValue                                                     `protobuf:"bytes,132532386,opt,name=valid_route,json=validRoute,proto3" json:"valid_route,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[403]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[403]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 1, 0, 0, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State) GetAttrIndex() *ywrapper.UintValue {
	if x != nil {
		return x.AttrIndex
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State) GetCommunityIndex() *ywrapper.UintValue {
	if x != nil {
		return x.CommunityIndex
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State) GetExtCommunityIndex() *ywrapper.UintValue {
	if x != nil {
		return x.ExtCommunityIndex
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State) GetInvalidReason() OpenconfigRibBgpTypesINVALIDROUTEREASON {
	if x != nil {
		return x.InvalidReason
	}
	return OpenconfigRibBgpTypesINVALIDROUTEREASON_OPENCONFIGRIBBGPTYPESINVALIDROUTEREASON_UNSET
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State) GetLastModified() *ywrapper.UintValue {
	if x != nil {
		return x.LastModified
	}
	return nil
}

func (m *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State) GetOrigin() isBgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State_Origin {
	if m != nil {
		return m.Origin
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State) GetOriginOpenconfigpolicytypesinstallprotocoltype() OpenconfigPolicyTypesINSTALLPROTOCOLTYPE {
	if x, ok := x.GetOrigin().(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State_OriginOpenconfigpolicytypesinstallprotocoltype); ok {
		return x.OriginOpenconfigpolicytypesinstallprotocoltype
	}
	return OpenconfigPolicyTypesINSTALLPROTOCOLTYPE_OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_UNSET
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State) GetOriginString() string {
	if x, ok := x.GetOrigin().(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State_OriginString); ok {
		return x.OriginString
	}
	return ""
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State) GetPathId() *ywrapper.UintValue {
	if x != nil {
		return x.PathId
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State) GetPrefix() *ywrapper.StringValue {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State) GetValidRoute() *ywrapper.BoolValue {
	if x != nil {
		return x.ValidRoute
	}
	return nil
}

type isBgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State_Origin interface {
	isBgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State_Origin()
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State_OriginOpenconfigpolicytypesinstallprotocoltype struct {
	OriginOpenconfigpolicytypesinstallprotocoltype OpenconfigPolicyTypesINSTALLPROTOCOLTYPE `protobuf:"varint,147494829,opt,name=origin_openconfigpolicytypesinstallprotocoltype,json=originOpenconfigpolicytypesinstallprotocoltype,proto3,enum=openconfig.OpenconfigPolicyTypesINSTALLPROTOCOLTYPE,oneof"`
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State_OriginString struct {
	OriginString string `protobuf:"bytes,422643478,opt,name=origin_string,json=originString,proto3,oneof"`
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State_OriginOpenconfigpolicytypesinstallprotocoltype) isBgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State_Origin() {
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State_OriginString) isBgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State_Origin() {
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnknownAttribute []*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey `protobuf:"bytes,235115494,rep,name=unknown_attribute,json=unknownAttribute,proto3" json:"unknown_attribute,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[404]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[404]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 1, 0, 0, 0, 1}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes) GetUnknownAttribute() []*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey {
	if x != nil {
		return x.UnknownAttribute
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State `protobuf:"bytes,4928216,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[405]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[405]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 1, 0, 0, 0, 1, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute) GetState() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrType         uint64                                                                                       `protobuf:"varint,1,opt,name=attr_type,json=attrType,proto3" json:"attr_type,omitempty"`
	UnknownAttribute *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute `protobuf:"bytes,2,opt,name=unknown_attribute,json=unknownAttribute,proto3" json:"unknown_attribute,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[406]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[406]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 1, 0, 0, 0, 1, 1}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey) GetAttrType() uint64 {
	if x != nil {
		return x.AttrType
	}
	return 0
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey) GetUnknownAttribute() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute {
	if x != nil {
		return x.UnknownAttribute
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrLen    *ywrapper.UintValue  `protobuf:"bytes,277342124,opt,name=attr_len,json=attrLen,proto3" json:"attr_len,omitempty"`
	AttrType   *ywrapper.UintValue  `protobuf:"bytes,336641447,opt,name=attr_type,json=attrType,proto3" json:"attr_type,omitempty"`
	AttrValue  *ywrapper.BytesValue `protobuf:"bytes,101019238,opt,name=attr_value,json=attrValue,proto3" json:"attr_value,omitempty"`
	Extended   *ywrapper.BoolValue  `protobuf:"bytes,312300032,opt,name=extended,proto3" json:"extended,omitempty"`
	Optional   *ywrapper.BoolValue  `protobuf:"bytes,326487971,opt,name=optional,proto3" json:"optional,omitempty"`
	Partial    *ywrapper.BoolValue  `protobuf:"bytes,517320862,opt,name=partial,proto3" json:"partial,omitempty"`
	Transitive *ywrapper.BoolValue  `protobuf:"bytes,21507686,opt,name=transitive,proto3" json:"transitive,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[407]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[407]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 1, 0, 0, 0, 1, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrLen() *ywrapper.UintValue {
	if x != nil {
		return x.AttrLen
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrType() *ywrapper.UintValue {
	if x != nil {
		return x.AttrType
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrValue() *ywrapper.BytesValue {
	if x != nil {
		return x.AttrValue
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetExtended() *ywrapper.BoolValue {
	if x != nil {
		return x.Extended
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetOptional() *ywrapper.BoolValue {
	if x != nil {
		return x.Optional
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetPartial() *ywrapper.BoolValue {
	if x != nil {
		return x.Partial
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetTransitive() *ywrapper.BoolValue {
	if x != nil {
		return x.Transitive
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdjRibInPost  *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost  `protobuf:"bytes,13379661,opt,name=adj_rib_in_post,json=adjRibInPost,proto3" json:"adj_rib_in_post,omitempty"`
	AdjRibInPre   *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre   `protobuf:"bytes,50821714,opt,name=adj_rib_in_pre,json=adjRibInPre,proto3" json:"adj_rib_in_pre,omitempty"`
	AdjRibOutPost *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost `protobuf:"bytes,276283556,opt,name=adj_rib_out_post,json=adjRibOutPost,proto3" json:"adj_rib_out_post,omitempty"`
	AdjRibOutPre  *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre  `protobuf:"bytes,293139905,opt,name=adj_rib_out_pre,json=adjRibOutPre,proto3" json:"adj_rib_out_pre,omitempty"`
	State         *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_State         `protobuf:"bytes,126561402,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[408]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[408]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 1, 1, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor) GetAdjRibInPost() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost {
	if x != nil {
		return x.AdjRibInPost
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor) GetAdjRibInPre() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre {
	if x != nil {
		return x.AdjRibInPre
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor) GetAdjRibOutPost() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost {
	if x != nil {
		return x.AdjRibOutPost
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor) GetAdjRibOutPre() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre {
	if x != nil {
		return x.AdjRibOutPre
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor) GetState() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_NeighborKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NeighborAddress string                                                   `protobuf:"bytes,1,opt,name=neighbor_address,json=neighborAddress,proto3" json:"neighbor_address,omitempty"`
	Neighbor        *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor `protobuf:"bytes,2,opt,name=neighbor,proto3" json:"neighbor,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_NeighborKey) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_NeighborKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[409]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_NeighborKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_NeighborKey) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_NeighborKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[409]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_NeighborKey.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_NeighborKey) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 1, 1, 1}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_NeighborKey) GetNeighborAddress() string {
	if x != nil {
		return x.NeighborAddress
	}
	return ""
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_NeighborKey) GetNeighbor() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor {
	if x != nil {
		return x.Neighbor
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Routes *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes `protobuf:"bytes,479959878,opt,name=routes,proto3" json:"routes,omitempty"`
	State  *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_State  `protobuf:"bytes,284433823,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[410]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[410]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 1, 1, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost) GetRoutes() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes {
	if x != nil {
		return x.Routes
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost) GetState() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Routes *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes `protobuf:"bytes,279962075,opt,name=routes,proto3" json:"routes,omitempty"`
	State  *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_State  `protobuf:"bytes,464489204,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[411]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[411]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 1, 1, 0, 1}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre) GetRoutes() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes {
	if x != nil {
		return x.Routes
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre) GetState() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Routes *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes `protobuf:"bytes,521052601,opt,name=routes,proto3" json:"routes,omitempty"`
	State  *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_State  `protobuf:"bytes,163283102,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[412]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[412]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 1, 1, 0, 2}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost) GetRoutes() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes {
	if x != nil {
		return x.Routes
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost) GetState() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Routes *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes `protobuf:"bytes,31184810,opt,name=routes,proto3" json:"routes,omitempty"`
	State  *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_State  `protobuf:"bytes,154319027,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[413]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[413]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 1, 1, 0, 3}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre) GetRoutes() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes {
	if x != nil {
		return x.Routes
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre) GetState() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NeighborAddress *ywrapper.StringValue `protobuf:"bytes,266585152,opt,name=neighbor_address,json=neighborAddress,proto3" json:"neighbor_address,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_State) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[414]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_State) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[414]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_State.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 1, 1, 0, 4}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_State) GetNeighborAddress() *ywrapper.StringValue {
	if x != nil {
		return x.NeighborAddress
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Route []*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey `protobuf:"bytes,93251012,rep,name=route,proto3" json:"route,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[415]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[415]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 1, 1, 0, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes) GetRoute() []*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey {
	if x != nil {
		return x.Route
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_State) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[416]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_State) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[416]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_State.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 1, 1, 0, 0, 1}
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State             *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State             `protobuf:"bytes,81555646,opt,name=state,proto3" json:"state,omitempty"`
	UnknownAttributes *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes `protobuf:"bytes,513686907,opt,name=unknown_attributes,json=unknownAttributes,proto3" json:"unknown_attributes,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[417]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[417]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 1, 1, 0, 0, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route) GetState() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route) GetUnknownAttributes() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes {
	if x != nil {
		return x.UnknownAttributes
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix string                                                                             `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	PathId uint64                                                                             `protobuf:"varint,2,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	Route  *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route `protobuf:"bytes,3,opt,name=route,proto3" json:"route,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[418]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[418]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 1, 1, 0, 0, 0, 1}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey) GetPathId() uint64 {
	if x != nil {
		return x.PathId
	}
	return 0
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey) GetRoute() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route {
	if x != nil {
		return x.Route
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrIndex         *ywrapper.UintValue                     `protobuf:"bytes,295158215,opt,name=attr_index,json=attrIndex,proto3" json:"attr_index,omitempty"`
	BestPath          *ywrapper.BoolValue                     `protobuf:"bytes,522552049,opt,name=best_path,json=bestPath,proto3" json:"best_path,omitempty"`
	CommunityIndex    *ywrapper.UintValue                     `protobuf:"bytes,480310647,opt,name=community_index,json=communityIndex,proto3" json:"community_index,omitempty"`
	ExtCommunityIndex *ywrapper.UintValue                     `protobuf:"bytes,417651453,opt,name=ext_community_index,json=extCommunityIndex,proto3" json:"ext_community_index,omitempty"`
	InvalidReason     OpenconfigRibBgpTypesINVALIDROUTEREASON `protobuf:"varint,423141103,opt,name=invalid_reason,json=invalidReason,proto3,enum=openconfig.OpenconfigRibBgpTypesINVALIDROUTEREASON" json:"invalid_reason,omitempty"`
	LastModified      *ywrapper.UintValue                     `protobuf:"bytes,415634143,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
	PathId            *ywrapper.UintValue                     `protobuf:"bytes,163565734,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	Prefix            *ywrapper.StringValue                   `protobuf:"bytes,154214513,opt,name=prefix,proto3" json:"prefix,omitempty"`
	ValidRoute        *ywrapper.BoolValue                     `protobuf:"bytes,25838033,opt,name=valid_route,json=validRoute,proto3" json:"valid_route,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[419]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[419]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 1, 1, 0, 0, 0, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) GetAttrIndex() *ywrapper.UintValue {
	if x != nil {
		return x.AttrIndex
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) GetBestPath() *ywrapper.BoolValue {
	if x != nil {
		return x.BestPath
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) GetCommunityIndex() *ywrapper.UintValue {
	if x != nil {
		return x.CommunityIndex
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) GetExtCommunityIndex() *ywrapper.UintValue {
	if x != nil {
		return x.ExtCommunityIndex
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) GetInvalidReason() OpenconfigRibBgpTypesINVALIDROUTEREASON {
	if x != nil {
		return x.InvalidReason
	}
	return OpenconfigRibBgpTypesINVALIDROUTEREASON_OPENCONFIGRIBBGPTYPESINVALIDROUTEREASON_UNSET
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) GetLastModified() *ywrapper.UintValue {
	if x != nil {
		return x.LastModified
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) GetPathId() *ywrapper.UintValue {
	if x != nil {
		return x.PathId
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) GetPrefix() *ywrapper.StringValue {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) GetValidRoute() *ywrapper.BoolValue {
	if x != nil {
		return x.ValidRoute
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnknownAttribute []*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey `protobuf:"bytes,456699863,rep,name=unknown_attribute,json=unknownAttribute,proto3" json:"unknown_attribute,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[420]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[420]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 1, 1, 0, 0, 0, 0, 1}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes) GetUnknownAttribute() []*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey {
	if x != nil {
		return x.UnknownAttribute
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State `protobuf:"bytes,444897,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[421]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[421]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute) GetState() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrType         uint64                                                                                                                `protobuf:"varint,1,opt,name=attr_type,json=attrType,proto3" json:"attr_type,omitempty"`
	UnknownAttribute *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute `protobuf:"bytes,2,opt,name=unknown_attribute,json=unknownAttribute,proto3" json:"unknown_attribute,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[422]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[422]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) GetAttrType() uint64 {
	if x != nil {
		return x.AttrType
	}
	return 0
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) GetUnknownAttribute() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute {
	if x != nil {
		return x.UnknownAttribute
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrLen    *ywrapper.UintValue  `protobuf:"bytes,210628967,opt,name=attr_len,json=attrLen,proto3" json:"attr_len,omitempty"`
	AttrType   *ywrapper.UintValue  `protobuf:"bytes,187705418,opt,name=attr_type,json=attrType,proto3" json:"attr_type,omitempty"`
	AttrValue  *ywrapper.BytesValue `protobuf:"bytes,485720933,opt,name=attr_value,json=attrValue,proto3" json:"attr_value,omitempty"`
	Extended   *ywrapper.BoolValue  `protobuf:"bytes,333931391,opt,name=extended,proto3" json:"extended,omitempty"`
	Optional   *ywrapper.BoolValue  `protobuf:"bytes,103845048,opt,name=optional,proto3" json:"optional,omitempty"`
	Partial    *ywrapper.BoolValue  `protobuf:"bytes,16434343,opt,name=partial,proto3" json:"partial,omitempty"`
	Transitive *ywrapper.BoolValue  `protobuf:"bytes,439571941,opt,name=transitive,proto3" json:"transitive,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[423]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[423]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrLen() *ywrapper.UintValue {
	if x != nil {
		return x.AttrLen
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrType() *ywrapper.UintValue {
	if x != nil {
		return x.AttrType
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrValue() *ywrapper.BytesValue {
	if x != nil {
		return x.AttrValue
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetExtended() *ywrapper.BoolValue {
	if x != nil {
		return x.Extended
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetOptional() *ywrapper.BoolValue {
	if x != nil {
		return x.Optional
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetPartial() *ywrapper.BoolValue {
	if x != nil {
		return x.Partial
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetTransitive() *ywrapper.BoolValue {
	if x != nil {
		return x.Transitive
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Route []*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey `protobuf:"bytes,18176937,rep,name=route,proto3" json:"route,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[424]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[424]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 1, 1, 0, 1, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes) GetRoute() []*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey {
	if x != nil {
		return x.Route
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_State) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[425]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_State) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[425]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_State.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 1, 1, 0, 1, 1}
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State             *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State             `protobuf:"bytes,31229451,opt,name=state,proto3" json:"state,omitempty"`
	UnknownAttributes *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes `protobuf:"bytes,453456384,opt,name=unknown_attributes,json=unknownAttributes,proto3" json:"unknown_attributes,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[426]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[426]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 1, 1, 0, 1, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route) GetState() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route) GetUnknownAttributes() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes {
	if x != nil {
		return x.UnknownAttributes
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix string                                                                            `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	PathId uint64                                                                            `protobuf:"varint,2,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	Route  *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route `protobuf:"bytes,3,opt,name=route,proto3" json:"route,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[427]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[427]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 1, 1, 0, 1, 0, 1}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey) GetPathId() uint64 {
	if x != nil {
		return x.PathId
	}
	return 0
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey) GetRoute() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route {
	if x != nil {
		return x.Route
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrIndex         *ywrapper.UintValue                     `protobuf:"bytes,21367736,opt,name=attr_index,json=attrIndex,proto3" json:"attr_index,omitempty"`
	CommunityIndex    *ywrapper.UintValue                     `protobuf:"bytes,95496558,opt,name=community_index,json=communityIndex,proto3" json:"community_index,omitempty"`
	ExtCommunityIndex *ywrapper.UintValue                     `protobuf:"bytes,132477264,opt,name=ext_community_index,json=extCommunityIndex,proto3" json:"ext_community_index,omitempty"`
	InvalidReason     OpenconfigRibBgpTypesINVALIDROUTEREASON `protobuf:"varint,252947800,opt,name=invalid_reason,json=invalidReason,proto3,enum=openconfig.OpenconfigRibBgpTypesINVALIDROUTEREASON" json:"invalid_reason,omitempty"`
	LastModified      *ywrapper.UintValue                     `protobuf:"bytes,433491730,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
	PathId            *ywrapper.UintValue                     `protobuf:"bytes,491583547,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	Prefix            *ywrapper.StringValue                   `protobuf:"bytes,392682922,opt,name=prefix,proto3" json:"prefix,omitempty"`
	ValidRoute        *ywrapper.BoolValue                     `protobuf:"bytes,461035232,opt,name=valid_route,json=validRoute,proto3" json:"valid_route,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[428]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[428]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 1, 1, 0, 1, 0, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) GetAttrIndex() *ywrapper.UintValue {
	if x != nil {
		return x.AttrIndex
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) GetCommunityIndex() *ywrapper.UintValue {
	if x != nil {
		return x.CommunityIndex
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) GetExtCommunityIndex() *ywrapper.UintValue {
	if x != nil {
		return x.ExtCommunityIndex
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) GetInvalidReason() OpenconfigRibBgpTypesINVALIDROUTEREASON {
	if x != nil {
		return x.InvalidReason
	}
	return OpenconfigRibBgpTypesINVALIDROUTEREASON_OPENCONFIGRIBBGPTYPESINVALIDROUTEREASON_UNSET
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) GetLastModified() *ywrapper.UintValue {
	if x != nil {
		return x.LastModified
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) GetPathId() *ywrapper.UintValue {
	if x != nil {
		return x.PathId
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) GetPrefix() *ywrapper.StringValue {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) GetValidRoute() *ywrapper.BoolValue {
	if x != nil {
		return x.ValidRoute
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnknownAttribute []*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey `protobuf:"bytes,375342044,rep,name=unknown_attribute,json=unknownAttribute,proto3" json:"unknown_attribute,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[429]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[429]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 1, 1, 0, 1, 0, 0, 1}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes) GetUnknownAttribute() []*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey {
	if x != nil {
		return x.UnknownAttribute
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State `protobuf:"bytes,525478182,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[430]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[430]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute) GetState() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrType         uint64                                                                                                               `protobuf:"varint,1,opt,name=attr_type,json=attrType,proto3" json:"attr_type,omitempty"`
	UnknownAttribute *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute `protobuf:"bytes,2,opt,name=unknown_attribute,json=unknownAttribute,proto3" json:"unknown_attribute,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[431]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[431]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) GetAttrType() uint64 {
	if x != nil {
		return x.AttrType
	}
	return 0
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) GetUnknownAttribute() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute {
	if x != nil {
		return x.UnknownAttribute
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrLen    *ywrapper.UintValue  `protobuf:"bytes,116523586,opt,name=attr_len,json=attrLen,proto3" json:"attr_len,omitempty"`
	AttrType   *ywrapper.UintValue  `protobuf:"bytes,477449909,opt,name=attr_type,json=attrType,proto3" json:"attr_type,omitempty"`
	AttrValue  *ywrapper.BytesValue `protobuf:"bytes,535045284,opt,name=attr_value,json=attrValue,proto3" json:"attr_value,omitempty"`
	Extended   *ywrapper.BoolValue  `protobuf:"bytes,181940370,opt,name=extended,proto3" json:"extended,omitempty"`
	Optional   *ywrapper.BoolValue  `protobuf:"bytes,7451013,opt,name=optional,proto3" json:"optional,omitempty"`
	Partial    *ywrapper.BoolValue  `protobuf:"bytes,307621364,opt,name=partial,proto3" json:"partial,omitempty"`
	Transitive *ywrapper.BoolValue  `protobuf:"bytes,280819796,opt,name=transitive,proto3" json:"transitive,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[432]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[432]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrLen() *ywrapper.UintValue {
	if x != nil {
		return x.AttrLen
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrType() *ywrapper.UintValue {
	if x != nil {
		return x.AttrType
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrValue() *ywrapper.BytesValue {
	if x != nil {
		return x.AttrValue
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetExtended() *ywrapper.BoolValue {
	if x != nil {
		return x.Extended
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetOptional() *ywrapper.BoolValue {
	if x != nil {
		return x.Optional
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetPartial() *ywrapper.BoolValue {
	if x != nil {
		return x.Partial
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetTransitive() *ywrapper.BoolValue {
	if x != nil {
		return x.Transitive
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Route []*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey `protobuf:"bytes,336764955,rep,name=route,proto3" json:"route,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[433]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[433]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 1, 1, 0, 2, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes) GetRoute() []*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey {
	if x != nil {
		return x.Route
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_State) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[434]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_State) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[434]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_State.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 1, 1, 0, 2, 1}
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State             *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State             `protobuf:"bytes,509588805,opt,name=state,proto3" json:"state,omitempty"`
	UnknownAttributes *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes `protobuf:"bytes,322762662,opt,name=unknown_attributes,json=unknownAttributes,proto3" json:"unknown_attributes,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[435]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[435]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 1, 1, 0, 2, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route) GetState() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route) GetUnknownAttributes() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes {
	if x != nil {
		return x.UnknownAttributes
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix string                                                                              `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	PathId uint64                                                                              `protobuf:"varint,2,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	Route  *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route `protobuf:"bytes,3,opt,name=route,proto3" json:"route,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[436]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[436]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 1, 1, 0, 2, 0, 1}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey) GetPathId() uint64 {
	if x != nil {
		return x.PathId
	}
	return 0
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey) GetRoute() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route {
	if x != nil {
		return x.Route
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrIndex         *ywrapper.UintValue                     `protobuf:"bytes,452184986,opt,name=attr_index,json=attrIndex,proto3" json:"attr_index,omitempty"`
	CommunityIndex    *ywrapper.UintValue                     `protobuf:"bytes,39964684,opt,name=community_index,json=communityIndex,proto3" json:"community_index,omitempty"`
	ExtCommunityIndex *ywrapper.UintValue                     `protobuf:"bytes,70881966,opt,name=ext_community_index,json=extCommunityIndex,proto3" json:"ext_community_index,omitempty"`
	InvalidReason     OpenconfigRibBgpTypesINVALIDROUTEREASON `protobuf:"varint,361834226,opt,name=invalid_reason,json=invalidReason,proto3,enum=openconfig.OpenconfigRibBgpTypesINVALIDROUTEREASON" json:"invalid_reason,omitempty"`
	LastModified      *ywrapper.UintValue                     `protobuf:"bytes,167847900,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
	PathId            *ywrapper.UintValue                     `protobuf:"bytes,44610593,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	Prefix            *ywrapper.StringValue                   `protobuf:"bytes,357615812,opt,name=prefix,proto3" json:"prefix,omitempty"`
	ValidRoute        *ywrapper.BoolValue                     `protobuf:"bytes,430030786,opt,name=valid_route,json=validRoute,proto3" json:"valid_route,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[437]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[437]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 1, 1, 0, 2, 0, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) GetAttrIndex() *ywrapper.UintValue {
	if x != nil {
		return x.AttrIndex
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) GetCommunityIndex() *ywrapper.UintValue {
	if x != nil {
		return x.CommunityIndex
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) GetExtCommunityIndex() *ywrapper.UintValue {
	if x != nil {
		return x.ExtCommunityIndex
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) GetInvalidReason() OpenconfigRibBgpTypesINVALIDROUTEREASON {
	if x != nil {
		return x.InvalidReason
	}
	return OpenconfigRibBgpTypesINVALIDROUTEREASON_OPENCONFIGRIBBGPTYPESINVALIDROUTEREASON_UNSET
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) GetLastModified() *ywrapper.UintValue {
	if x != nil {
		return x.LastModified
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) GetPathId() *ywrapper.UintValue {
	if x != nil {
		return x.PathId
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) GetPrefix() *ywrapper.StringValue {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) GetValidRoute() *ywrapper.BoolValue {
	if x != nil {
		return x.ValidRoute
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnknownAttribute []*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey `protobuf:"bytes,498855558,rep,name=unknown_attribute,json=unknownAttribute,proto3" json:"unknown_attribute,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[438]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[438]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 1, 1, 0, 2, 0, 0, 1}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes) GetUnknownAttribute() []*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey {
	if x != nil {
		return x.UnknownAttribute
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State `protobuf:"bytes,163671800,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[439]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[439]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 1, 1, 0, 2, 0, 0, 1, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute) GetState() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrType         uint64                                                                                                                 `protobuf:"varint,1,opt,name=attr_type,json=attrType,proto3" json:"attr_type,omitempty"`
	UnknownAttribute *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute `protobuf:"bytes,2,opt,name=unknown_attribute,json=unknownAttribute,proto3" json:"unknown_attribute,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[440]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[440]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 1, 1, 0, 2, 0, 0, 1, 1}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) GetAttrType() uint64 {
	if x != nil {
		return x.AttrType
	}
	return 0
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) GetUnknownAttribute() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute {
	if x != nil {
		return x.UnknownAttribute
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrLen    *ywrapper.UintValue  `protobuf:"bytes,271236428,opt,name=attr_len,json=attrLen,proto3" json:"attr_len,omitempty"`
	AttrType   *ywrapper.UintValue  `protobuf:"bytes,65003207,opt,name=attr_type,json=attrType,proto3" json:"attr_type,omitempty"`
	AttrValue  *ywrapper.BytesValue `protobuf:"bytes,81637638,opt,name=attr_value,json=attrValue,proto3" json:"attr_value,omitempty"`
	Extended   *ywrapper.BoolValue  `protobuf:"bytes,56907296,opt,name=extended,proto3" json:"extended,omitempty"`
	Optional   *ywrapper.BoolValue  `protobuf:"bytes,285677763,opt,name=optional,proto3" json:"optional,omitempty"`
	Partial    *ywrapper.BoolValue  `protobuf:"bytes,14453054,opt,name=partial,proto3" json:"partial,omitempty"`
	Transitive *ywrapper.BoolValue  `protobuf:"bytes,321903238,opt,name=transitive,proto3" json:"transitive,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[441]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[441]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 1, 1, 0, 2, 0, 0, 1, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrLen() *ywrapper.UintValue {
	if x != nil {
		return x.AttrLen
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrType() *ywrapper.UintValue {
	if x != nil {
		return x.AttrType
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrValue() *ywrapper.BytesValue {
	if x != nil {
		return x.AttrValue
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetExtended() *ywrapper.BoolValue {
	if x != nil {
		return x.Extended
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetOptional() *ywrapper.BoolValue {
	if x != nil {
		return x.Optional
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetPartial() *ywrapper.BoolValue {
	if x != nil {
		return x.Partial
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetTransitive() *ywrapper.BoolValue {
	if x != nil {
		return x.Transitive
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Route []*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey `protobuf:"bytes,359048144,rep,name=route,proto3" json:"route,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[442]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[442]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 1, 1, 0, 3, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes) GetRoute() []*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey {
	if x != nil {
		return x.Route
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_State) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[443]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_State) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[443]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_State.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 1, 1, 0, 3, 1}
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State             *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State             `protobuf:"bytes,416060634,opt,name=state,proto3" json:"state,omitempty"`
	UnknownAttributes *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes `protobuf:"bytes,358014807,opt,name=unknown_attributes,json=unknownAttributes,proto3" json:"unknown_attributes,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[444]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[444]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 1, 1, 0, 3, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route) GetState() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route) GetUnknownAttributes() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes {
	if x != nil {
		return x.UnknownAttributes
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix string                                                                             `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	PathId uint64                                                                             `protobuf:"varint,2,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	Route  *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route `protobuf:"bytes,3,opt,name=route,proto3" json:"route,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[445]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[445]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 1, 1, 0, 3, 0, 1}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey) GetPathId() uint64 {
	if x != nil {
		return x.PathId
	}
	return 0
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey) GetRoute() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route {
	if x != nil {
		return x.Route
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrIndex         *ywrapper.UintValue                     `protobuf:"bytes,164007795,opt,name=attr_index,json=attrIndex,proto3" json:"attr_index,omitempty"`
	CommunityIndex    *ywrapper.UintValue                     `protobuf:"bytes,321441243,opt,name=community_index,json=communityIndex,proto3" json:"community_index,omitempty"`
	ExtCommunityIndex *ywrapper.UintValue                     `protobuf:"bytes,153687401,opt,name=ext_community_index,json=extCommunityIndex,proto3" json:"ext_community_index,omitempty"`
	InvalidReason     OpenconfigRibBgpTypesINVALIDROUTEREASON `protobuf:"varint,257840971,opt,name=invalid_reason,json=invalidReason,proto3,enum=openconfig.OpenconfigRibBgpTypesINVALIDROUTEREASON" json:"invalid_reason,omitempty"`
	LastModified      *ywrapper.UintValue                     `protobuf:"bytes,440493819,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
	PathId            *ywrapper.UintValue                     `protobuf:"bytes,446405522,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	Prefix            *ywrapper.StringValue                   `protobuf:"bytes,42061245,opt,name=prefix,proto3" json:"prefix,omitempty"`
	ValidRoute        *ywrapper.BoolValue                     `protobuf:"bytes,312101189,opt,name=valid_route,json=validRoute,proto3" json:"valid_route,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[446]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[446]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 1, 1, 0, 3, 0, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) GetAttrIndex() *ywrapper.UintValue {
	if x != nil {
		return x.AttrIndex
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) GetCommunityIndex() *ywrapper.UintValue {
	if x != nil {
		return x.CommunityIndex
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) GetExtCommunityIndex() *ywrapper.UintValue {
	if x != nil {
		return x.ExtCommunityIndex
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) GetInvalidReason() OpenconfigRibBgpTypesINVALIDROUTEREASON {
	if x != nil {
		return x.InvalidReason
	}
	return OpenconfigRibBgpTypesINVALIDROUTEREASON_OPENCONFIGRIBBGPTYPESINVALIDROUTEREASON_UNSET
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) GetLastModified() *ywrapper.UintValue {
	if x != nil {
		return x.LastModified
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) GetPathId() *ywrapper.UintValue {
	if x != nil {
		return x.PathId
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) GetPrefix() *ywrapper.StringValue {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) GetValidRoute() *ywrapper.BoolValue {
	if x != nil {
		return x.ValidRoute
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnknownAttribute []*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey `protobuf:"bytes,141186043,rep,name=unknown_attribute,json=unknownAttribute,proto3" json:"unknown_attribute,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[447]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[447]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 1, 1, 0, 3, 0, 0, 1}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes) GetUnknownAttribute() []*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey {
	if x != nil {
		return x.UnknownAttribute
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State `protobuf:"bytes,522632485,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[448]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[448]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 1, 1, 0, 3, 0, 0, 1, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute) GetState() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrType         uint64                                                                                                                `protobuf:"varint,1,opt,name=attr_type,json=attrType,proto3" json:"attr_type,omitempty"`
	UnknownAttribute *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute `protobuf:"bytes,2,opt,name=unknown_attribute,json=unknownAttribute,proto3" json:"unknown_attribute,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[449]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[449]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 1, 1, 0, 3, 0, 0, 1, 1}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) GetAttrType() uint64 {
	if x != nil {
		return x.AttrType
	}
	return 0
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) GetUnknownAttribute() *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute {
	if x != nil {
		return x.UnknownAttribute
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrLen    *ywrapper.UintValue  `protobuf:"bytes,420705163,opt,name=attr_len,json=attrLen,proto3" json:"attr_len,omitempty"`
	AttrType   *ywrapper.UintValue  `protobuf:"bytes,269657854,opt,name=attr_type,json=attrType,proto3" json:"attr_type,omitempty"`
	AttrValue  *ywrapper.BytesValue `protobuf:"bytes,335015793,opt,name=attr_value,json=attrValue,proto3" json:"attr_value,omitempty"`
	Extended   *ywrapper.BoolValue  `protobuf:"bytes,346981275,opt,name=extended,proto3" json:"extended,omitempty"`
	Optional   *ywrapper.BoolValue  `protobuf:"bytes,337684308,opt,name=optional,proto3" json:"optional,omitempty"`
	Partial    *ywrapper.BoolValue  `protobuf:"bytes,386233075,opt,name=partial,proto3" json:"partial,omitempty"`
	Transitive *ywrapper.BoolValue  `protobuf:"bytes,330283201,opt,name=transitive,proto3" json:"transitive,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[450]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[450]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 1, 1, 0, 3, 0, 0, 1, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrLen() *ywrapper.UintValue {
	if x != nil {
		return x.AttrLen
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrType() *ywrapper.UintValue {
	if x != nil {
		return x.AttrType
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrValue() *ywrapper.BytesValue {
	if x != nil {
		return x.AttrValue
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetExtended() *ywrapper.BoolValue {
	if x != nil {
		return x.Extended
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetOptional() *ywrapper.BoolValue {
	if x != nil {
		return x.Optional
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetPartial() *ywrapper.BoolValue {
	if x != nil {
		return x.Partial
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetTransitive() *ywrapper.BoolValue {
	if x != nil {
		return x.Transitive
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Routes *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes `protobuf:"bytes,426402665,opt,name=routes,proto3" json:"routes,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[451]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[451]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 2, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib) GetRoutes() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes {
	if x != nil {
		return x.Routes
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Neighbor []*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_NeighborKey `protobuf:"bytes,478149440,rep,name=neighbor,proto3" json:"neighbor,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[452]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[452]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 2, 1}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors) GetNeighbor() []*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_NeighborKey {
	if x != nil {
		return x.Neighbor
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Route []*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_RouteKey `protobuf:"bytes,87919019,rep,name=route,proto3" json:"route,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[453]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[453]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 2, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes) GetRoute() []*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_RouteKey {
	if x != nil {
		return x.Route
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State             *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_State             `protobuf:"bytes,265560565,opt,name=state,proto3" json:"state,omitempty"`
	UnknownAttributes *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_UnknownAttributes `protobuf:"bytes,514466006,opt,name=unknown_attributes,json=unknownAttributes,proto3" json:"unknown_attributes,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[454]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[454]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 2, 0, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route) GetState() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route) GetUnknownAttributes() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_UnknownAttributes {
	if x != nil {
		return x.UnknownAttributes
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_RouteKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PathId   uint64                                                       `protobuf:"varint,1,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	Endpoint string                                                       `protobuf:"bytes,2,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	Color    uint64                                                       `protobuf:"varint,3,opt,name=color,proto3" json:"color,omitempty"`
	Route    *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route `protobuf:"bytes,4,opt,name=route,proto3" json:"route,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_RouteKey) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_RouteKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[455]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_RouteKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_RouteKey) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_RouteKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[455]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_RouteKey.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_RouteKey) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 2, 0, 0, 1}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_RouteKey) GetPathId() uint64 {
	if x != nil {
		return x.PathId
	}
	return 0
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_RouteKey) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_RouteKey) GetColor() uint64 {
	if x != nil {
		return x.Color
	}
	return 0
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_RouteKey) GetRoute() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route {
	if x != nil {
		return x.Route
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrIndex         *ywrapper.UintValue                     `protobuf:"bytes,176087082,opt,name=attr_index,json=attrIndex,proto3" json:"attr_index,omitempty"`
	Color             *ywrapper.UintValue                     `protobuf:"bytes,391703789,opt,name=color,proto3" json:"color,omitempty"`
	CommunityIndex    *ywrapper.UintValue                     `protobuf:"bytes,118233724,opt,name=community_index,json=communityIndex,proto3" json:"community_index,omitempty"`
	Endpoint          *ywrapper.StringValue                   `protobuf:"bytes,81579179,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	ExtCommunityIndex *ywrapper.UintValue                     `protobuf:"bytes,76290398,opt,name=ext_community_index,json=extCommunityIndex,proto3" json:"ext_community_index,omitempty"`
	InvalidReason     OpenconfigRibBgpTypesINVALIDROUTEREASON `protobuf:"varint,175956258,opt,name=invalid_reason,json=invalidReason,proto3,enum=openconfig.OpenconfigRibBgpTypesINVALIDROUTEREASON" json:"invalid_reason,omitempty"`
	LastModified      *ywrapper.UintValue                     `protobuf:"bytes,270825036,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
	PathId            *ywrapper.UintValue                     `protobuf:"bytes,299728017,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	ValidRoute        *ywrapper.BoolValue                     `protobuf:"bytes,321894770,opt,name=valid_route,json=validRoute,proto3" json:"valid_route,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_State) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[456]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_State) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[456]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_State.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 2, 0, 0, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_State) GetAttrIndex() *ywrapper.UintValue {
	if x != nil {
		return x.AttrIndex
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_State) GetColor() *ywrapper.UintValue {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_State) GetCommunityIndex() *ywrapper.UintValue {
	if x != nil {
		return x.CommunityIndex
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_State) GetEndpoint() *ywrapper.StringValue {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_State) GetExtCommunityIndex() *ywrapper.UintValue {
	if x != nil {
		return x.ExtCommunityIndex
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_State) GetInvalidReason() OpenconfigRibBgpTypesINVALIDROUTEREASON {
	if x != nil {
		return x.InvalidReason
	}
	return OpenconfigRibBgpTypesINVALIDROUTEREASON_OPENCONFIGRIBBGPTYPESINVALIDROUTEREASON_UNSET
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_State) GetLastModified() *ywrapper.UintValue {
	if x != nil {
		return x.LastModified
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_State) GetPathId() *ywrapper.UintValue {
	if x != nil {
		return x.PathId
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_State) GetValidRoute() *ywrapper.BoolValue {
	if x != nil {
		return x.ValidRoute
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_UnknownAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnknownAttribute []*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey `protobuf:"bytes,259935190,rep,name=unknown_attribute,json=unknownAttribute,proto3" json:"unknown_attribute,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_UnknownAttributes) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_UnknownAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[457]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_UnknownAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_UnknownAttributes) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_UnknownAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[457]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_UnknownAttributes.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_UnknownAttributes) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 2, 0, 0, 0, 1}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_UnknownAttributes) GetUnknownAttribute() []*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey {
	if x != nil {
		return x.UnknownAttribute
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State `protobuf:"bytes,201332456,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[458]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[458]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 2, 0, 0, 0, 1, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute) GetState() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrType         uint64                                                                                          `protobuf:"varint,1,opt,name=attr_type,json=attrType,proto3" json:"attr_type,omitempty"`
	UnknownAttribute *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute `protobuf:"bytes,2,opt,name=unknown_attribute,json=unknownAttribute,proto3" json:"unknown_attribute,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[459]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[459]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 2, 0, 0, 0, 1, 1}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey) GetAttrType() uint64 {
	if x != nil {
		return x.AttrType
	}
	return 0
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey) GetUnknownAttribute() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute {
	if x != nil {
		return x.UnknownAttribute
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrLen    *ywrapper.UintValue  `protobuf:"bytes,279594684,opt,name=attr_len,json=attrLen,proto3" json:"attr_len,omitempty"`
	AttrType   *ywrapper.UintValue  `protobuf:"bytes,528540791,opt,name=attr_type,json=attrType,proto3" json:"attr_type,omitempty"`
	AttrValue  *ywrapper.BytesValue `protobuf:"bytes,245535030,opt,name=attr_value,json=attrValue,proto3" json:"attr_value,omitempty"`
	Extended   *ywrapper.BoolValue  `protobuf:"bytes,300077488,opt,name=extended,proto3" json:"extended,omitempty"`
	Optional   *ywrapper.BoolValue  `protobuf:"bytes,448255251,opt,name=optional,proto3" json:"optional,omitempty"`
	Partial    *ywrapper.BoolValue  `protobuf:"bytes,185403726,opt,name=partial,proto3" json:"partial,omitempty"`
	Transitive *ywrapper.BoolValue  `protobuf:"bytes,7241334,opt,name=transitive,proto3" json:"transitive,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[460]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[460]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 2, 0, 0, 0, 1, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrLen() *ywrapper.UintValue {
	if x != nil {
		return x.AttrLen
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrType() *ywrapper.UintValue {
	if x != nil {
		return x.AttrType
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrValue() *ywrapper.BytesValue {
	if x != nil {
		return x.AttrValue
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetExtended() *ywrapper.BoolValue {
	if x != nil {
		return x.Extended
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetOptional() *ywrapper.BoolValue {
	if x != nil {
		return x.Optional
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetPartial() *ywrapper.BoolValue {
	if x != nil {
		return x.Partial
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetTransitive() *ywrapper.BoolValue {
	if x != nil {
		return x.Transitive
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdjRibInPost  *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost  `protobuf:"bytes,177005149,opt,name=adj_rib_in_post,json=adjRibInPost,proto3" json:"adj_rib_in_post,omitempty"`
	AdjRibInPre   *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre   `protobuf:"bytes,442236962,opt,name=adj_rib_in_pre,json=adjRibInPre,proto3" json:"adj_rib_in_pre,omitempty"`
	AdjRibOutPost *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost `protobuf:"bytes,373285140,opt,name=adj_rib_out_post,json=adjRibOutPost,proto3" json:"adj_rib_out_post,omitempty"`
	AdjRibOutPre  *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre  `protobuf:"bytes,34283441,opt,name=adj_rib_out_pre,json=adjRibOutPre,proto3" json:"adj_rib_out_pre,omitempty"`
	State         *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_State         `protobuf:"bytes,334285354,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[461]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[461]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 2, 1, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor) GetAdjRibInPost() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost {
	if x != nil {
		return x.AdjRibInPost
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor) GetAdjRibInPre() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre {
	if x != nil {
		return x.AdjRibInPre
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor) GetAdjRibOutPost() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost {
	if x != nil {
		return x.AdjRibOutPost
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor) GetAdjRibOutPre() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre {
	if x != nil {
		return x.AdjRibOutPre
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor) GetState() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_NeighborKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NeighborAddress string                                                      `protobuf:"bytes,1,opt,name=neighbor_address,json=neighborAddress,proto3" json:"neighbor_address,omitempty"`
	Neighbor        *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor `protobuf:"bytes,2,opt,name=neighbor,proto3" json:"neighbor,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_NeighborKey) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_NeighborKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[462]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_NeighborKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_NeighborKey) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_NeighborKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[462]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_NeighborKey.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_NeighborKey) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 2, 1, 1}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_NeighborKey) GetNeighborAddress() string {
	if x != nil {
		return x.NeighborAddress
	}
	return ""
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_NeighborKey) GetNeighbor() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor {
	if x != nil {
		return x.Neighbor
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Routes *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes `protobuf:"bytes,374948982,opt,name=routes,proto3" json:"routes,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[463]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[463]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 2, 1, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost) GetRoutes() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes {
	if x != nil {
		return x.Routes
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Routes *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes `protobuf:"bytes,121477195,opt,name=routes,proto3" json:"routes,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[464]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[464]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 2, 1, 0, 1}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre) GetRoutes() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes {
	if x != nil {
		return x.Routes
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Routes *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes `protobuf:"bytes,503291145,opt,name=routes,proto3" json:"routes,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[465]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[465]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 2, 1, 0, 2}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost) GetRoutes() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes {
	if x != nil {
		return x.Routes
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Routes *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes `protobuf:"bytes,384267322,opt,name=routes,proto3" json:"routes,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[466]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[466]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 2, 1, 0, 3}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre) GetRoutes() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes {
	if x != nil {
		return x.Routes
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NeighborAddress *ywrapper.StringValue `protobuf:"bytes,216347344,opt,name=neighbor_address,json=neighborAddress,proto3" json:"neighbor_address,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_State) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[467]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_State) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[467]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_State.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 2, 1, 0, 4}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_State) GetNeighborAddress() *ywrapper.StringValue {
	if x != nil {
		return x.NeighborAddress
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Route []*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey `protobuf:"bytes,282098196,rep,name=route,proto3" json:"route,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[468]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[468]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 2, 1, 0, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes) GetRoute() []*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey {
	if x != nil {
		return x.Route
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State             *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State             `protobuf:"bytes,47834222,opt,name=state,proto3" json:"state,omitempty"`
	UnknownAttributes *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes `protobuf:"bytes,184473771,opt,name=unknown_attributes,json=unknownAttributes,proto3" json:"unknown_attributes,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[469]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[469]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 2, 1, 0, 0, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route) GetState() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route) GetUnknownAttributes() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes {
	if x != nil {
		return x.UnknownAttributes
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PathId   uint64                                                                                `protobuf:"varint,1,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	Endpoint string                                                                                `protobuf:"bytes,2,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	Color    uint64                                                                                `protobuf:"varint,3,opt,name=color,proto3" json:"color,omitempty"`
	Route    *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route `protobuf:"bytes,4,opt,name=route,proto3" json:"route,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[470]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[470]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 2, 1, 0, 0, 0, 1}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey) GetPathId() uint64 {
	if x != nil {
		return x.PathId
	}
	return 0
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey) GetColor() uint64 {
	if x != nil {
		return x.Color
	}
	return 0
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey) GetRoute() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route {
	if x != nil {
		return x.Route
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrIndex         *ywrapper.UintValue                     `protobuf:"bytes,57295383,opt,name=attr_index,json=attrIndex,proto3" json:"attr_index,omitempty"`
	BestPath          *ywrapper.BoolValue                     `protobuf:"bytes,304783841,opt,name=best_path,json=bestPath,proto3" json:"best_path,omitempty"`
	Color             *ywrapper.UintValue                     `protobuf:"bytes,24721946,opt,name=color,proto3" json:"color,omitempty"`
	CommunityIndex    *ywrapper.UintValue                     `protobuf:"bytes,468570727,opt,name=community_index,json=communityIndex,proto3" json:"community_index,omitempty"`
	Endpoint          *ywrapper.StringValue                   `protobuf:"bytes,170128534,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	ExtCommunityIndex *ywrapper.UintValue                     `protobuf:"bytes,290410989,opt,name=ext_community_index,json=extCommunityIndex,proto3" json:"ext_community_index,omitempty"`
	InvalidReason     OpenconfigRibBgpTypesINVALIDROUTEREASON `protobuf:"varint,231563935,opt,name=invalid_reason,json=invalidReason,proto3,enum=openconfig.OpenconfigRibBgpTypesINVALIDROUTEREASON" json:"invalid_reason,omitempty"`
	LastModified      *ywrapper.UintValue                     `protobuf:"bytes,360911119,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
	PathId            *ywrapper.UintValue                     `protobuf:"bytes,505996118,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	ValidRoute        *ywrapper.BoolValue                     `protobuf:"bytes,308456961,opt,name=valid_route,json=validRoute,proto3" json:"valid_route,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[471]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[471]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 2, 1, 0, 0, 0, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) GetAttrIndex() *ywrapper.UintValue {
	if x != nil {
		return x.AttrIndex
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) GetBestPath() *ywrapper.BoolValue {
	if x != nil {
		return x.BestPath
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) GetColor() *ywrapper.UintValue {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) GetCommunityIndex() *ywrapper.UintValue {
	if x != nil {
		return x.CommunityIndex
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) GetEndpoint() *ywrapper.StringValue {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) GetExtCommunityIndex() *ywrapper.UintValue {
	if x != nil {
		return x.ExtCommunityIndex
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) GetInvalidReason() OpenconfigRibBgpTypesINVALIDROUTEREASON {
	if x != nil {
		return x.InvalidReason
	}
	return OpenconfigRibBgpTypesINVALIDROUTEREASON_OPENCONFIGRIBBGPTYPESINVALIDROUTEREASON_UNSET
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) GetLastModified() *ywrapper.UintValue {
	if x != nil {
		return x.LastModified
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) GetPathId() *ywrapper.UintValue {
	if x != nil {
		return x.PathId
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) GetValidRoute() *ywrapper.BoolValue {
	if x != nil {
		return x.ValidRoute
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnknownAttribute []*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey `protobuf:"bytes,340836071,rep,name=unknown_attribute,json=unknownAttribute,proto3" json:"unknown_attribute,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[472]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[472]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 2, 1, 0, 0, 0, 0, 1}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes) GetUnknownAttribute() []*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey {
	if x != nil {
		return x.UnknownAttribute
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State `protobuf:"bytes,272671377,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[473]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[473]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 2, 1, 0, 0, 0, 0, 1, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute) GetState() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrType         uint64                                                                                                                   `protobuf:"varint,1,opt,name=attr_type,json=attrType,proto3" json:"attr_type,omitempty"`
	UnknownAttribute *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute `protobuf:"bytes,2,opt,name=unknown_attribute,json=unknownAttribute,proto3" json:"unknown_attribute,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[474]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[474]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 2, 1, 0, 0, 0, 0, 1, 1}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) GetAttrType() uint64 {
	if x != nil {
		return x.AttrType
	}
	return 0
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) GetUnknownAttribute() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute {
	if x != nil {
		return x.UnknownAttribute
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrLen    *ywrapper.UintValue  `protobuf:"bytes,344490263,opt,name=attr_len,json=attrLen,proto3" json:"attr_len,omitempty"`
	AttrType   *ywrapper.UintValue  `protobuf:"bytes,140853882,opt,name=attr_type,json=attrType,proto3" json:"attr_type,omitempty"`
	AttrValue  *ywrapper.BytesValue `protobuf:"bytes,205679509,opt,name=attr_value,json=attrValue,proto3" json:"attr_value,omitempty"`
	Extended   *ywrapper.BoolValue  `protobuf:"bytes,217982927,opt,name=extended,proto3" json:"extended,omitempty"`
	Optional   *ywrapper.BoolValue  `protobuf:"bytes,490319880,opt,name=optional,proto3" json:"optional,omitempty"`
	Partial    *ywrapper.BoolValue  `protobuf:"bytes,208963191,opt,name=partial,proto3" json:"partial,omitempty"`
	Transitive *ywrapper.BoolValue  `protobuf:"bytes,311769301,opt,name=transitive,proto3" json:"transitive,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[475]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[475]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 2, 1, 0, 0, 0, 0, 1, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrLen() *ywrapper.UintValue {
	if x != nil {
		return x.AttrLen
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrType() *ywrapper.UintValue {
	if x != nil {
		return x.AttrType
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrValue() *ywrapper.BytesValue {
	if x != nil {
		return x.AttrValue
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetExtended() *ywrapper.BoolValue {
	if x != nil {
		return x.Extended
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetOptional() *ywrapper.BoolValue {
	if x != nil {
		return x.Optional
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetPartial() *ywrapper.BoolValue {
	if x != nil {
		return x.Partial
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetTransitive() *ywrapper.BoolValue {
	if x != nil {
		return x.Transitive
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Route []*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey `protobuf:"bytes,158453113,rep,name=route,proto3" json:"route,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[476]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[476]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 2, 1, 0, 1, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes) GetRoute() []*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey {
	if x != nil {
		return x.Route
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State             *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State             `protobuf:"bytes,33098107,opt,name=state,proto3" json:"state,omitempty"`
	UnknownAttributes *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes `protobuf:"bytes,306894704,opt,name=unknown_attributes,json=unknownAttributes,proto3" json:"unknown_attributes,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[477]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[477]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 2, 1, 0, 1, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route) GetState() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route) GetUnknownAttributes() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes {
	if x != nil {
		return x.UnknownAttributes
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PathId   uint64                                                                               `protobuf:"varint,1,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	Endpoint string                                                                               `protobuf:"bytes,2,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	Color    uint64                                                                               `protobuf:"varint,3,opt,name=color,proto3" json:"color,omitempty"`
	Route    *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route `protobuf:"bytes,4,opt,name=route,proto3" json:"route,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[478]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[478]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 2, 1, 0, 1, 0, 1}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey) GetPathId() uint64 {
	if x != nil {
		return x.PathId
	}
	return 0
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey) GetColor() uint64 {
	if x != nil {
		return x.Color
	}
	return 0
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey) GetRoute() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route {
	if x != nil {
		return x.Route
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrIndex         *ywrapper.UintValue                     `protobuf:"bytes,247546120,opt,name=attr_index,json=attrIndex,proto3" json:"attr_index,omitempty"`
	Color             *ywrapper.UintValue                     `protobuf:"bytes,21241359,opt,name=color,proto3" json:"color,omitempty"`
	CommunityIndex    *ywrapper.UintValue                     `protobuf:"bytes,368103326,opt,name=community_index,json=communityIndex,proto3" json:"community_index,omitempty"`
	Endpoint          *ywrapper.StringValue                   `protobuf:"bytes,532722581,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	ExtCommunityIndex *ywrapper.UintValue                     `protobuf:"bytes,276515776,opt,name=ext_community_index,json=extCommunityIndex,proto3" json:"ext_community_index,omitempty"`
	InvalidReason     OpenconfigRibBgpTypesINVALIDROUTEREASON `protobuf:"varint,63868104,opt,name=invalid_reason,json=invalidReason,proto3,enum=openconfig.OpenconfigRibBgpTypesINVALIDROUTEREASON" json:"invalid_reason,omitempty"`
	LastModified      *ywrapper.UintValue                     `protobuf:"bytes,360179714,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
	PathId            *ywrapper.UintValue                     `protobuf:"bytes,165703787,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	ValidRoute        *ywrapper.BoolValue                     `protobuf:"bytes,407460112,opt,name=valid_route,json=validRoute,proto3" json:"valid_route,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[479]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[479]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 2, 1, 0, 1, 0, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) GetAttrIndex() *ywrapper.UintValue {
	if x != nil {
		return x.AttrIndex
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) GetColor() *ywrapper.UintValue {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) GetCommunityIndex() *ywrapper.UintValue {
	if x != nil {
		return x.CommunityIndex
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) GetEndpoint() *ywrapper.StringValue {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) GetExtCommunityIndex() *ywrapper.UintValue {
	if x != nil {
		return x.ExtCommunityIndex
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) GetInvalidReason() OpenconfigRibBgpTypesINVALIDROUTEREASON {
	if x != nil {
		return x.InvalidReason
	}
	return OpenconfigRibBgpTypesINVALIDROUTEREASON_OPENCONFIGRIBBGPTYPESINVALIDROUTEREASON_UNSET
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) GetLastModified() *ywrapper.UintValue {
	if x != nil {
		return x.LastModified
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) GetPathId() *ywrapper.UintValue {
	if x != nil {
		return x.PathId
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) GetValidRoute() *ywrapper.BoolValue {
	if x != nil {
		return x.ValidRoute
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnknownAttribute []*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey `protobuf:"bytes,371194476,rep,name=unknown_attribute,json=unknownAttribute,proto3" json:"unknown_attribute,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[480]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[480]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 2, 1, 0, 1, 0, 0, 1}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes) GetUnknownAttribute() []*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey {
	if x != nil {
		return x.UnknownAttribute
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State `protobuf:"bytes,436319830,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[481]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[481]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 2, 1, 0, 1, 0, 0, 1, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute) GetState() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrType         uint64                                                                                                                  `protobuf:"varint,1,opt,name=attr_type,json=attrType,proto3" json:"attr_type,omitempty"`
	UnknownAttribute *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute `protobuf:"bytes,2,opt,name=unknown_attribute,json=unknownAttribute,proto3" json:"unknown_attribute,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[482]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[482]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 2, 1, 0, 1, 0, 0, 1, 1}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) GetAttrType() uint64 {
	if x != nil {
		return x.AttrType
	}
	return 0
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) GetUnknownAttribute() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute {
	if x != nil {
		return x.UnknownAttribute
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrLen    *ywrapper.UintValue  `protobuf:"bytes,376262386,opt,name=attr_len,json=attrLen,proto3" json:"attr_len,omitempty"`
	AttrType   *ywrapper.UintValue  `protobuf:"bytes,145946981,opt,name=attr_type,json=attrType,proto3" json:"attr_type,omitempty"`
	AttrValue  *ywrapper.BytesValue `protobuf:"bytes,430790804,opt,name=attr_value,json=attrValue,proto3" json:"attr_value,omitempty"`
	Extended   *ywrapper.BoolValue  `protobuf:"bytes,209725282,opt,name=extended,proto3" json:"extended,omitempty"`
	Optional   *ywrapper.BoolValue  `protobuf:"bytes,281768085,opt,name=optional,proto3" json:"optional,omitempty"`
	Partial    *ywrapper.BoolValue  `protobuf:"bytes,91492932,opt,name=partial,proto3" json:"partial,omitempty"`
	Transitive *ywrapper.BoolValue  `protobuf:"bytes,145740996,opt,name=transitive,proto3" json:"transitive,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[483]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[483]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 2, 1, 0, 1, 0, 0, 1, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrLen() *ywrapper.UintValue {
	if x != nil {
		return x.AttrLen
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrType() *ywrapper.UintValue {
	if x != nil {
		return x.AttrType
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrValue() *ywrapper.BytesValue {
	if x != nil {
		return x.AttrValue
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetExtended() *ywrapper.BoolValue {
	if x != nil {
		return x.Extended
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetOptional() *ywrapper.BoolValue {
	if x != nil {
		return x.Optional
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetPartial() *ywrapper.BoolValue {
	if x != nil {
		return x.Partial
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetTransitive() *ywrapper.BoolValue {
	if x != nil {
		return x.Transitive
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Route []*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey `protobuf:"bytes,312843211,rep,name=route,proto3" json:"route,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[484]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[484]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 2, 1, 0, 2, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes) GetRoute() []*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey {
	if x != nil {
		return x.Route
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State             *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State             `protobuf:"bytes,391653653,opt,name=state,proto3" json:"state,omitempty"`
	UnknownAttributes *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes `protobuf:"bytes,477021686,opt,name=unknown_attributes,json=unknownAttributes,proto3" json:"unknown_attributes,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[485]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[485]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 2, 1, 0, 2, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route) GetState() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route) GetUnknownAttributes() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes {
	if x != nil {
		return x.UnknownAttributes
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PathId   uint64                                                                                 `protobuf:"varint,1,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	Endpoint string                                                                                 `protobuf:"bytes,2,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	Color    uint64                                                                                 `protobuf:"varint,3,opt,name=color,proto3" json:"color,omitempty"`
	Route    *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route `protobuf:"bytes,4,opt,name=route,proto3" json:"route,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[486]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[486]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 2, 1, 0, 2, 0, 1}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey) GetPathId() uint64 {
	if x != nil {
		return x.PathId
	}
	return 0
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey) GetColor() uint64 {
	if x != nil {
		return x.Color
	}
	return 0
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey) GetRoute() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route {
	if x != nil {
		return x.Route
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrIndex         *ywrapper.UintValue                     `protobuf:"bytes,175790410,opt,name=attr_index,json=attrIndex,proto3" json:"attr_index,omitempty"`
	Color             *ywrapper.UintValue                     `protobuf:"bytes,129484557,opt,name=color,proto3" json:"color,omitempty"`
	CommunityIndex    *ywrapper.UintValue                     `protobuf:"bytes,101236252,opt,name=community_index,json=communityIndex,proto3" json:"community_index,omitempty"`
	Endpoint          *ywrapper.StringValue                   `protobuf:"bytes,64083531,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	ExtCommunityIndex *ywrapper.UintValue                     `protobuf:"bytes,528258942,opt,name=ext_community_index,json=extCommunityIndex,proto3" json:"ext_community_index,omitempty"`
	InvalidReason     OpenconfigRibBgpTypesINVALIDROUTEREASON `protobuf:"varint,260892098,opt,name=invalid_reason,json=invalidReason,proto3,enum=openconfig.OpenconfigRibBgpTypesINVALIDROUTEREASON" json:"invalid_reason,omitempty"`
	LastModified      *ywrapper.UintValue                     `protobuf:"bytes,396310380,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
	PathId            *ywrapper.UintValue                     `protobuf:"bytes,531763889,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	ValidRoute        *ywrapper.BoolValue                     `protobuf:"bytes,363507346,opt,name=valid_route,json=validRoute,proto3" json:"valid_route,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[487]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[487]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 2, 1, 0, 2, 0, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) GetAttrIndex() *ywrapper.UintValue {
	if x != nil {
		return x.AttrIndex
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) GetColor() *ywrapper.UintValue {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) GetCommunityIndex() *ywrapper.UintValue {
	if x != nil {
		return x.CommunityIndex
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) GetEndpoint() *ywrapper.StringValue {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) GetExtCommunityIndex() *ywrapper.UintValue {
	if x != nil {
		return x.ExtCommunityIndex
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) GetInvalidReason() OpenconfigRibBgpTypesINVALIDROUTEREASON {
	if x != nil {
		return x.InvalidReason
	}
	return OpenconfigRibBgpTypesINVALIDROUTEREASON_OPENCONFIGRIBBGPTYPESINVALIDROUTEREASON_UNSET
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) GetLastModified() *ywrapper.UintValue {
	if x != nil {
		return x.LastModified
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) GetPathId() *ywrapper.UintValue {
	if x != nil {
		return x.PathId
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) GetValidRoute() *ywrapper.BoolValue {
	if x != nil {
		return x.ValidRoute
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnknownAttribute []*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey `protobuf:"bytes,355413622,rep,name=unknown_attribute,json=unknownAttribute,proto3" json:"unknown_attribute,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[488]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[488]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 2, 1, 0, 2, 0, 0, 1}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes) GetUnknownAttribute() []*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey {
	if x != nil {
		return x.UnknownAttribute
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State `protobuf:"bytes,122625928,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[489]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[489]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 2, 1, 0, 2, 0, 0, 1, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute) GetState() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrType         uint64                                                                                                                    `protobuf:"varint,1,opt,name=attr_type,json=attrType,proto3" json:"attr_type,omitempty"`
	UnknownAttribute *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute `protobuf:"bytes,2,opt,name=unknown_attribute,json=unknownAttribute,proto3" json:"unknown_attribute,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[490]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[490]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 2, 1, 0, 2, 0, 0, 1, 1}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) GetAttrType() uint64 {
	if x != nil {
		return x.AttrType
	}
	return 0
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) GetUnknownAttribute() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute {
	if x != nil {
		return x.UnknownAttribute
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrLen    *ywrapper.UintValue  `protobuf:"bytes,254303580,opt,name=attr_len,json=attrLen,proto3" json:"attr_len,omitempty"`
	AttrType   *ywrapper.UintValue  `protobuf:"bytes,536669847,opt,name=attr_type,json=attrType,proto3" json:"attr_type,omitempty"`
	AttrValue  *ywrapper.BytesValue `protobuf:"bytes,300422358,opt,name=attr_value,json=attrValue,proto3" json:"attr_value,omitempty"`
	Extended   *ywrapper.BoolValue  `protobuf:"bytes,271825360,opt,name=extended,proto3" json:"extended,omitempty"`
	Optional   *ywrapper.BoolValue  `protobuf:"bytes,500466739,opt,name=optional,proto3" json:"optional,omitempty"`
	Partial    *ywrapper.BoolValue  `protobuf:"bytes,466323182,opt,name=partial,proto3" json:"partial,omitempty"`
	Transitive *ywrapper.BoolValue  `protobuf:"bytes,433212310,opt,name=transitive,proto3" json:"transitive,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[491]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[491]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 2, 1, 0, 2, 0, 0, 1, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrLen() *ywrapper.UintValue {
	if x != nil {
		return x.AttrLen
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrType() *ywrapper.UintValue {
	if x != nil {
		return x.AttrType
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrValue() *ywrapper.BytesValue {
	if x != nil {
		return x.AttrValue
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetExtended() *ywrapper.BoolValue {
	if x != nil {
		return x.Extended
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetOptional() *ywrapper.BoolValue {
	if x != nil {
		return x.Optional
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetPartial() *ywrapper.BoolValue {
	if x != nil {
		return x.Partial
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetTransitive() *ywrapper.BoolValue {
	if x != nil {
		return x.Transitive
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Route []*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey `protobuf:"bytes,42284096,rep,name=route,proto3" json:"route,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[492]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[492]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 2, 1, 0, 3, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes) GetRoute() []*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey {
	if x != nil {
		return x.Route
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State             *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State             `protobuf:"bytes,100678442,opt,name=state,proto3" json:"state,omitempty"`
	UnknownAttributes *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes `protobuf:"bytes,337841255,opt,name=unknown_attributes,json=unknownAttributes,proto3" json:"unknown_attributes,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[493]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[493]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 2, 1, 0, 3, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route) GetState() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route) GetUnknownAttributes() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes {
	if x != nil {
		return x.UnknownAttributes
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PathId   uint64                                                                                `protobuf:"varint,1,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	Endpoint string                                                                                `protobuf:"bytes,2,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	Color    uint64                                                                                `protobuf:"varint,3,opt,name=color,proto3" json:"color,omitempty"`
	Route    *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route `protobuf:"bytes,4,opt,name=route,proto3" json:"route,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[494]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[494]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 2, 1, 0, 3, 0, 1}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey) GetPathId() uint64 {
	if x != nil {
		return x.PathId
	}
	return 0
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey) GetColor() uint64 {
	if x != nil {
		return x.Color
	}
	return 0
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey) GetRoute() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route {
	if x != nil {
		return x.Route
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrIndex         *ywrapper.UintValue                     `protobuf:"bytes,351395043,opt,name=attr_index,json=attrIndex,proto3" json:"attr_index,omitempty"`
	Color             *ywrapper.UintValue                     `protobuf:"bytes,307288502,opt,name=color,proto3" json:"color,omitempty"`
	CommunityIndex    *ywrapper.UintValue                     `protobuf:"bytes,184586091,opt,name=community_index,json=communityIndex,proto3" json:"community_index,omitempty"`
	Endpoint          *ywrapper.StringValue                   `protobuf:"bytes,313182530,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	ExtCommunityIndex *ywrapper.UintValue                     `protobuf:"bytes,184152633,opt,name=ext_community_index,json=extCommunityIndex,proto3" json:"ext_community_index,omitempty"`
	InvalidReason     OpenconfigRibBgpTypesINVALIDROUTEREASON `protobuf:"varint,316790875,opt,name=invalid_reason,json=invalidReason,proto3,enum=openconfig.OpenconfigRibBgpTypesINVALIDROUTEREASON" json:"invalid_reason,omitempty"`
	LastModified      *ywrapper.UintValue                     `protobuf:"bytes,519584651,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
	PathId            *ywrapper.UintValue                     `protobuf:"bytes,297539426,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	ValidRoute        *ywrapper.BoolValue                     `protobuf:"bytes,441876501,opt,name=valid_route,json=validRoute,proto3" json:"valid_route,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[495]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[495]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 2, 1, 0, 3, 0, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) GetAttrIndex() *ywrapper.UintValue {
	if x != nil {
		return x.AttrIndex
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) GetColor() *ywrapper.UintValue {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) GetCommunityIndex() *ywrapper.UintValue {
	if x != nil {
		return x.CommunityIndex
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) GetEndpoint() *ywrapper.StringValue {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) GetExtCommunityIndex() *ywrapper.UintValue {
	if x != nil {
		return x.ExtCommunityIndex
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) GetInvalidReason() OpenconfigRibBgpTypesINVALIDROUTEREASON {
	if x != nil {
		return x.InvalidReason
	}
	return OpenconfigRibBgpTypesINVALIDROUTEREASON_OPENCONFIGRIBBGPTYPESINVALIDROUTEREASON_UNSET
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) GetLastModified() *ywrapper.UintValue {
	if x != nil {
		return x.LastModified
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) GetPathId() *ywrapper.UintValue {
	if x != nil {
		return x.PathId
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) GetValidRoute() *ywrapper.BoolValue {
	if x != nil {
		return x.ValidRoute
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnknownAttribute []*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey `protobuf:"bytes,237690027,rep,name=unknown_attribute,json=unknownAttribute,proto3" json:"unknown_attribute,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[496]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[496]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 2, 1, 0, 3, 0, 0, 1}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes) GetUnknownAttribute() []*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey {
	if x != nil {
		return x.UnknownAttribute
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State `protobuf:"bytes,146726133,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[497]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[497]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 2, 1, 0, 3, 0, 0, 1, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute) GetState() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrType         uint64                                                                                                                   `protobuf:"varint,1,opt,name=attr_type,json=attrType,proto3" json:"attr_type,omitempty"`
	UnknownAttribute *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute `protobuf:"bytes,2,opt,name=unknown_attribute,json=unknownAttribute,proto3" json:"unknown_attribute,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[498]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[498]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 2, 1, 0, 3, 0, 0, 1, 1}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) GetAttrType() uint64 {
	if x != nil {
		return x.AttrType
	}
	return 0
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) GetUnknownAttribute() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute {
	if x != nil {
		return x.UnknownAttribute
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrLen    *ywrapper.UintValue  `protobuf:"bytes,312743771,opt,name=attr_len,json=attrLen,proto3" json:"attr_len,omitempty"`
	AttrType   *ywrapper.UintValue  `protobuf:"bytes,468219982,opt,name=attr_type,json=attrType,proto3" json:"attr_type,omitempty"`
	AttrValue  *ywrapper.BytesValue `protobuf:"bytes,87081345,opt,name=attr_value,json=attrValue,proto3" json:"attr_value,omitempty"`
	Extended   *ywrapper.BoolValue  `protobuf:"bytes,3107979,opt,name=extended,proto3" json:"extended,omitempty"`
	Optional   *ywrapper.BoolValue  `protobuf:"bytes,472853316,opt,name=optional,proto3" json:"optional,omitempty"`
	Partial    *ywrapper.BoolValue  `protobuf:"bytes,492513891,opt,name=partial,proto3" json:"partial,omitempty"`
	Transitive *ywrapper.BoolValue  `protobuf:"bytes,500254033,opt,name=transitive,proto3" json:"transitive,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[499]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[499]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 2, 1, 0, 3, 0, 0, 1, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrLen() *ywrapper.UintValue {
	if x != nil {
		return x.AttrLen
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrType() *ywrapper.UintValue {
	if x != nil {
		return x.AttrType
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrValue() *ywrapper.BytesValue {
	if x != nil {
		return x.AttrValue
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetExtended() *ywrapper.BoolValue {
	if x != nil {
		return x.Extended
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetOptional() *ywrapper.BoolValue {
	if x != nil {
		return x.Optional
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetPartial() *ywrapper.BoolValue {
	if x != nil {
		return x.Partial
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetTransitive() *ywrapper.BoolValue {
	if x != nil {
		return x.Transitive
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Routes *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes `protobuf:"bytes,159259235,opt,name=routes,proto3" json:"routes,omitempty"`
	State  *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_State  `protobuf:"bytes,524126172,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[500]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[500]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 3, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib) GetRoutes() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes {
	if x != nil {
		return x.Routes
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib) GetState() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Neighbor []*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_NeighborKey `protobuf:"bytes,316737034,rep,name=neighbor,proto3" json:"neighbor,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[501]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[501]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 3, 1}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors) GetNeighbor() []*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_NeighborKey {
	if x != nil {
		return x.Neighbor
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Route []*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_RouteKey `protobuf:"bytes,386393745,rep,name=route,proto3" json:"route,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[502]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[502]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 3, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes) GetRoute() []*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_RouteKey {
	if x != nil {
		return x.Route
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_State) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[503]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_State) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[503]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_State.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 3, 0, 1}
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State             *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State             `protobuf:"bytes,52944483,opt,name=state,proto3" json:"state,omitempty"`
	UnknownAttributes *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes `protobuf:"bytes,452164216,opt,name=unknown_attributes,json=unknownAttributes,proto3" json:"unknown_attributes,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[504]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[504]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 3, 0, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route) GetState() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route) GetUnknownAttributes() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes {
	if x != nil {
		return x.UnknownAttributes
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_RouteKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix string `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// Types that are assignable to Origin:
	//	*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_RouteKey_OriginOpenconfigpolicytypesinstallprotocoltype
	//	*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_RouteKey_OriginString
	Origin isBgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_RouteKey_Origin `protobuf_oneof:"origin"`
	PathId uint64                                                               `protobuf:"varint,3,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	Route  *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route            `protobuf:"bytes,4,opt,name=route,proto3" json:"route,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_RouteKey) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_RouteKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[505]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_RouteKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_RouteKey) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_RouteKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[505]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_RouteKey.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_RouteKey) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 3, 0, 0, 1}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_RouteKey) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (m *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_RouteKey) GetOrigin() isBgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_RouteKey_Origin {
	if m != nil {
		return m.Origin
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_RouteKey) GetOriginOpenconfigpolicytypesinstallprotocoltype() OpenconfigPolicyTypesINSTALLPROTOCOLTYPE {
	if x, ok := x.GetOrigin().(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_RouteKey_OriginOpenconfigpolicytypesinstallprotocoltype); ok {
		return x.OriginOpenconfigpolicytypesinstallprotocoltype
	}
	return OpenconfigPolicyTypesINSTALLPROTOCOLTYPE_OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_UNSET
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_RouteKey) GetOriginString() string {
	if x, ok := x.GetOrigin().(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_RouteKey_OriginString); ok {
		return x.OriginString
	}
	return ""
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_RouteKey) GetPathId() uint64 {
	if x != nil {
		return x.PathId
	}
	return 0
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_RouteKey) GetRoute() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route {
	if x != nil {
		return x.Route
	}
	return nil
}

type isBgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_RouteKey_Origin interface {
	isBgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_RouteKey_Origin()
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_RouteKey_OriginOpenconfigpolicytypesinstallprotocoltype struct {
	OriginOpenconfigpolicytypesinstallprotocoltype OpenconfigPolicyTypesINSTALLPROTOCOLTYPE `protobuf:"varint,150407279,opt,name=origin_openconfigpolicytypesinstallprotocoltype,json=originOpenconfigpolicytypesinstallprotocoltype,proto3,enum=openconfig.OpenconfigPolicyTypesINSTALLPROTOCOLTYPE,oneof"`
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_RouteKey_OriginString struct {
	OriginString string `protobuf:"bytes,157587924,opt,name=origin_string,json=originString,proto3,oneof"`
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_RouteKey_OriginOpenconfigpolicytypesinstallprotocoltype) isBgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_RouteKey_Origin() {
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_RouteKey_OriginString) isBgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_RouteKey_Origin() {
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrIndex         *ywrapper.UintValue                     `protobuf:"bytes,449981936,opt,name=attr_index,json=attrIndex,proto3" json:"attr_index,omitempty"`
	CommunityIndex    *ywrapper.UintValue                     `protobuf:"bytes,394274774,opt,name=community_index,json=communityIndex,proto3" json:"community_index,omitempty"`
	ExtCommunityIndex *ywrapper.UintValue                     `protobuf:"bytes,32695736,opt,name=ext_community_index,json=extCommunityIndex,proto3" json:"ext_community_index,omitempty"`
	InvalidReason     OpenconfigRibBgpTypesINVALIDROUTEREASON `protobuf:"varint,406945312,opt,name=invalid_reason,json=invalidReason,proto3,enum=openconfig.OpenconfigRibBgpTypesINVALIDROUTEREASON" json:"invalid_reason,omitempty"`
	LastModified      *ywrapper.UintValue                     `protobuf:"bytes,114928986,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
	// Types that are assignable to Origin:
	//	*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State_OriginOpenconfigpolicytypesinstallprotocoltype
	//	*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State_OriginString
	Origin     isBgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State_Origin `protobuf_oneof:"origin"`
	PathId     *ywrapper.UintValue                                                     `protobuf:"bytes,377577363,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	Prefix     *ywrapper.StringValue                                                   `protobuf:"bytes,421154786,opt,name=prefix,proto3" json:"prefix,omitempty"`
	ValidRoute *ywrapper.BoolValue                                                     `protobuf:"bytes,244146344,opt,name=valid_route,json=validRoute,proto3" json:"valid_route,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[506]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[506]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 3, 0, 0, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State) GetAttrIndex() *ywrapper.UintValue {
	if x != nil {
		return x.AttrIndex
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State) GetCommunityIndex() *ywrapper.UintValue {
	if x != nil {
		return x.CommunityIndex
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State) GetExtCommunityIndex() *ywrapper.UintValue {
	if x != nil {
		return x.ExtCommunityIndex
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State) GetInvalidReason() OpenconfigRibBgpTypesINVALIDROUTEREASON {
	if x != nil {
		return x.InvalidReason
	}
	return OpenconfigRibBgpTypesINVALIDROUTEREASON_OPENCONFIGRIBBGPTYPESINVALIDROUTEREASON_UNSET
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State) GetLastModified() *ywrapper.UintValue {
	if x != nil {
		return x.LastModified
	}
	return nil
}

func (m *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State) GetOrigin() isBgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State_Origin {
	if m != nil {
		return m.Origin
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State) GetOriginOpenconfigpolicytypesinstallprotocoltype() OpenconfigPolicyTypesINSTALLPROTOCOLTYPE {
	if x, ok := x.GetOrigin().(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State_OriginOpenconfigpolicytypesinstallprotocoltype); ok {
		return x.OriginOpenconfigpolicytypesinstallprotocoltype
	}
	return OpenconfigPolicyTypesINSTALLPROTOCOLTYPE_OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_UNSET
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State) GetOriginString() string {
	if x, ok := x.GetOrigin().(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State_OriginString); ok {
		return x.OriginString
	}
	return ""
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State) GetPathId() *ywrapper.UintValue {
	if x != nil {
		return x.PathId
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State) GetPrefix() *ywrapper.StringValue {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State) GetValidRoute() *ywrapper.BoolValue {
	if x != nil {
		return x.ValidRoute
	}
	return nil
}

type isBgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State_Origin interface {
	isBgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State_Origin()
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State_OriginOpenconfigpolicytypesinstallprotocoltype struct {
	OriginOpenconfigpolicytypesinstallprotocoltype OpenconfigPolicyTypesINSTALLPROTOCOLTYPE `protobuf:"varint,150407279,opt,name=origin_openconfigpolicytypesinstallprotocoltype,json=originOpenconfigpolicytypesinstallprotocoltype,proto3,enum=openconfig.OpenconfigPolicyTypesINSTALLPROTOCOLTYPE,oneof"`
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State_OriginString struct {
	OriginString string `protobuf:"bytes,157587924,opt,name=origin_string,json=originString,proto3,oneof"`
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State_OriginOpenconfigpolicytypesinstallprotocoltype) isBgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State_Origin() {
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State_OriginString) isBgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State_Origin() {
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnknownAttribute []*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey `protobuf:"bytes,194792180,rep,name=unknown_attribute,json=unknownAttribute,proto3" json:"unknown_attribute,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[507]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[507]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 3, 0, 0, 0, 1}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes) GetUnknownAttribute() []*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey {
	if x != nil {
		return x.UnknownAttribute
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State `protobuf:"bytes,410421454,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[508]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[508]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 3, 0, 0, 0, 1, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute) GetState() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrType         uint64                                                                                       `protobuf:"varint,1,opt,name=attr_type,json=attrType,proto3" json:"attr_type,omitempty"`
	UnknownAttribute *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute `protobuf:"bytes,2,opt,name=unknown_attribute,json=unknownAttribute,proto3" json:"unknown_attribute,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[509]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[509]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 3, 0, 0, 0, 1, 1}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey) GetAttrType() uint64 {
	if x != nil {
		return x.AttrType
	}
	return 0
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey) GetUnknownAttribute() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute {
	if x != nil {
		return x.UnknownAttribute
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrLen    *ywrapper.UintValue  `protobuf:"bytes,43768730,opt,name=attr_len,json=attrLen,proto3" json:"attr_len,omitempty"`
	AttrType   *ywrapper.UintValue  `protobuf:"bytes,499968653,opt,name=attr_type,json=attrType,proto3" json:"attr_type,omitempty"`
	AttrValue  *ywrapper.BytesValue `protobuf:"bytes,455208268,opt,name=attr_value,json=attrValue,proto3" json:"attr_value,omitempty"`
	Extended   *ywrapper.BoolValue  `protobuf:"bytes,425763130,opt,name=extended,proto3" json:"extended,omitempty"`
	Optional   *ywrapper.BoolValue  `protobuf:"bytes,505653757,opt,name=optional,proto3" json:"optional,omitempty"`
	Partial    *ywrapper.BoolValue  `protobuf:"bytes,169467660,opt,name=partial,proto3" json:"partial,omitempty"`
	Transitive *ywrapper.BoolValue  `protobuf:"bytes,475898700,opt,name=transitive,proto3" json:"transitive,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[510]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[510]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 3, 0, 0, 0, 1, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrLen() *ywrapper.UintValue {
	if x != nil {
		return x.AttrLen
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrType() *ywrapper.UintValue {
	if x != nil {
		return x.AttrType
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrValue() *ywrapper.BytesValue {
	if x != nil {
		return x.AttrValue
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetExtended() *ywrapper.BoolValue {
	if x != nil {
		return x.Extended
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetOptional() *ywrapper.BoolValue {
	if x != nil {
		return x.Optional
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetPartial() *ywrapper.BoolValue {
	if x != nil {
		return x.Partial
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetTransitive() *ywrapper.BoolValue {
	if x != nil {
		return x.Transitive
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdjRibInPost  *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost  `protobuf:"bytes,369753299,opt,name=adj_rib_in_post,json=adjRibInPost,proto3" json:"adj_rib_in_post,omitempty"`
	AdjRibInPre   *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre   `protobuf:"bytes,351025120,opt,name=adj_rib_in_pre,json=adjRibInPre,proto3" json:"adj_rib_in_pre,omitempty"`
	AdjRibOutPost *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost `protobuf:"bytes,516450390,opt,name=adj_rib_out_post,json=adjRibOutPost,proto3" json:"adj_rib_out_post,omitempty"`
	AdjRibOutPre  *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre  `protobuf:"bytes,280507051,opt,name=adj_rib_out_pre,json=adjRibOutPre,proto3" json:"adj_rib_out_pre,omitempty"`
	State         *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_State         `protobuf:"bytes,152759132,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[511]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[511]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 3, 1, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor) GetAdjRibInPost() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost {
	if x != nil {
		return x.AdjRibInPost
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor) GetAdjRibInPre() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre {
	if x != nil {
		return x.AdjRibInPre
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor) GetAdjRibOutPost() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost {
	if x != nil {
		return x.AdjRibOutPost
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor) GetAdjRibOutPre() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre {
	if x != nil {
		return x.AdjRibOutPre
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor) GetState() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_NeighborKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NeighborAddress string                                                   `protobuf:"bytes,1,opt,name=neighbor_address,json=neighborAddress,proto3" json:"neighbor_address,omitempty"`
	Neighbor        *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor `protobuf:"bytes,2,opt,name=neighbor,proto3" json:"neighbor,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_NeighborKey) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_NeighborKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[512]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_NeighborKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_NeighborKey) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_NeighborKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[512]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_NeighborKey.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_NeighborKey) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 3, 1, 1}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_NeighborKey) GetNeighborAddress() string {
	if x != nil {
		return x.NeighborAddress
	}
	return ""
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_NeighborKey) GetNeighbor() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor {
	if x != nil {
		return x.Neighbor
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Routes *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes `protobuf:"bytes,371369472,opt,name=routes,proto3" json:"routes,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[513]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[513]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 3, 1, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost) GetRoutes() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes {
	if x != nil {
		return x.Routes
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Routes *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes `protobuf:"bytes,109486917,opt,name=routes,proto3" json:"routes,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[514]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[514]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 3, 1, 0, 1}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre) GetRoutes() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes {
	if x != nil {
		return x.Routes
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Routes *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes `protobuf:"bytes,318896495,opt,name=routes,proto3" json:"routes,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[515]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[515]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 3, 1, 0, 2}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost) GetRoutes() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes {
	if x != nil {
		return x.Routes
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Routes *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes `protobuf:"bytes,364779496,opt,name=routes,proto3" json:"routes,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[516]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[516]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 3, 1, 0, 3}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre) GetRoutes() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes {
	if x != nil {
		return x.Routes
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NeighborAddress *ywrapper.StringValue `protobuf:"bytes,136801586,opt,name=neighbor_address,json=neighborAddress,proto3" json:"neighbor_address,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_State) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[517]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_State) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[517]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_State.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 3, 1, 0, 4}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_State) GetNeighborAddress() *ywrapper.StringValue {
	if x != nil {
		return x.NeighborAddress
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Route []*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey `protobuf:"bytes,487404498,rep,name=route,proto3" json:"route,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[518]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[518]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 3, 1, 0, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes) GetRoute() []*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey {
	if x != nil {
		return x.Route
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State             *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State             `protobuf:"bytes,146503796,opt,name=state,proto3" json:"state,omitempty"`
	UnknownAttributes *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes `protobuf:"bytes,73948157,opt,name=unknown_attributes,json=unknownAttributes,proto3" json:"unknown_attributes,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[519]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[519]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 3, 1, 0, 0, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route) GetState() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route) GetUnknownAttributes() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes {
	if x != nil {
		return x.UnknownAttributes
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix string                                                                             `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	PathId uint64                                                                             `protobuf:"varint,2,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	Route  *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route `protobuf:"bytes,3,opt,name=route,proto3" json:"route,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[520]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[520]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 3, 1, 0, 0, 0, 1}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey) GetPathId() uint64 {
	if x != nil {
		return x.PathId
	}
	return 0
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey) GetRoute() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route {
	if x != nil {
		return x.Route
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrIndex         *ywrapper.UintValue                     `protobuf:"bytes,102308797,opt,name=attr_index,json=attrIndex,proto3" json:"attr_index,omitempty"`
	BestPath          *ywrapper.BoolValue                     `protobuf:"bytes,91355243,opt,name=best_path,json=bestPath,proto3" json:"best_path,omitempty"`
	CommunityIndex    *ywrapper.UintValue                     `protobuf:"bytes,443035993,opt,name=community_index,json=communityIndex,proto3" json:"community_index,omitempty"`
	ExtCommunityIndex *ywrapper.UintValue                     `protobuf:"bytes,147668543,opt,name=ext_community_index,json=extCommunityIndex,proto3" json:"ext_community_index,omitempty"`
	InvalidReason     OpenconfigRibBgpTypesINVALIDROUTEREASON `protobuf:"varint,525228189,opt,name=invalid_reason,json=invalidReason,proto3,enum=openconfig.OpenconfigRibBgpTypesINVALIDROUTEREASON" json:"invalid_reason,omitempty"`
	LastModified      *ywrapper.UintValue                     `protobuf:"bytes,327867237,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
	PathId            *ywrapper.UintValue                     `protobuf:"bytes,141258312,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	Prefix            *ywrapper.StringValue                   `protobuf:"bytes,493971311,opt,name=prefix,proto3" json:"prefix,omitempty"`
	ValidRoute        *ywrapper.BoolValue                     `protobuf:"bytes,114617639,opt,name=valid_route,json=validRoute,proto3" json:"valid_route,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[521]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[521]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 3, 1, 0, 0, 0, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) GetAttrIndex() *ywrapper.UintValue {
	if x != nil {
		return x.AttrIndex
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) GetBestPath() *ywrapper.BoolValue {
	if x != nil {
		return x.BestPath
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) GetCommunityIndex() *ywrapper.UintValue {
	if x != nil {
		return x.CommunityIndex
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) GetExtCommunityIndex() *ywrapper.UintValue {
	if x != nil {
		return x.ExtCommunityIndex
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) GetInvalidReason() OpenconfigRibBgpTypesINVALIDROUTEREASON {
	if x != nil {
		return x.InvalidReason
	}
	return OpenconfigRibBgpTypesINVALIDROUTEREASON_OPENCONFIGRIBBGPTYPESINVALIDROUTEREASON_UNSET
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) GetLastModified() *ywrapper.UintValue {
	if x != nil {
		return x.LastModified
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) GetPathId() *ywrapper.UintValue {
	if x != nil {
		return x.PathId
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) GetPrefix() *ywrapper.StringValue {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) GetValidRoute() *ywrapper.BoolValue {
	if x != nil {
		return x.ValidRoute
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnknownAttribute []*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey `protobuf:"bytes,282340557,rep,name=unknown_attribute,json=unknownAttribute,proto3" json:"unknown_attribute,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[522]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[522]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 3, 1, 0, 0, 0, 0, 1}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes) GetUnknownAttribute() []*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey {
	if x != nil {
		return x.UnknownAttribute
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State `protobuf:"bytes,60292639,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[523]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[523]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 3, 1, 0, 0, 0, 0, 1, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute) GetState() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrType         uint64                                                                                                                `protobuf:"varint,1,opt,name=attr_type,json=attrType,proto3" json:"attr_type,omitempty"`
	UnknownAttribute *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute `protobuf:"bytes,2,opt,name=unknown_attribute,json=unknownAttribute,proto3" json:"unknown_attribute,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[524]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[524]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 3, 1, 0, 0, 0, 0, 1, 1}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) GetAttrType() uint64 {
	if x != nil {
		return x.AttrType
	}
	return 0
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) GetUnknownAttribute() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute {
	if x != nil {
		return x.UnknownAttribute
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrLen    *ywrapper.UintValue  `protobuf:"bytes,169720725,opt,name=attr_len,json=attrLen,proto3" json:"attr_len,omitempty"`
	AttrType   *ywrapper.UintValue  `protobuf:"bytes,148806768,opt,name=attr_type,json=attrType,proto3" json:"attr_type,omitempty"`
	AttrValue  *ywrapper.BytesValue `protobuf:"bytes,11385683,opt,name=attr_value,json=attrValue,proto3" json:"attr_value,omitempty"`
	Extended   *ywrapper.BoolValue  `protobuf:"bytes,533948345,opt,name=extended,proto3" json:"extended,omitempty"`
	Optional   *ywrapper.BoolValue  `protobuf:"bytes,107849458,opt,name=optional,proto3" json:"optional,omitempty"`
	Partial    *ywrapper.BoolValue  `protobuf:"bytes,59878133,opt,name=partial,proto3" json:"partial,omitempty"`
	Transitive *ywrapper.BoolValue  `protobuf:"bytes,205104611,opt,name=transitive,proto3" json:"transitive,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[525]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[525]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 3, 1, 0, 0, 0, 0, 1, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrLen() *ywrapper.UintValue {
	if x != nil {
		return x.AttrLen
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrType() *ywrapper.UintValue {
	if x != nil {
		return x.AttrType
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrValue() *ywrapper.BytesValue {
	if x != nil {
		return x.AttrValue
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetExtended() *ywrapper.BoolValue {
	if x != nil {
		return x.Extended
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetOptional() *ywrapper.BoolValue {
	if x != nil {
		return x.Optional
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetPartial() *ywrapper.BoolValue {
	if x != nil {
		return x.Partial
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetTransitive() *ywrapper.BoolValue {
	if x != nil {
		return x.Transitive
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Route []*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey `protobuf:"bytes,145211535,rep,name=route,proto3" json:"route,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[526]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[526]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 3, 1, 0, 1, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes) GetRoute() []*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey {
	if x != nil {
		return x.Route
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State             *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State             `protobuf:"bytes,290247017,opt,name=state,proto3" json:"state,omitempty"`
	UnknownAttributes *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes `protobuf:"bytes,366405274,opt,name=unknown_attributes,json=unknownAttributes,proto3" json:"unknown_attributes,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[527]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[527]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 3, 1, 0, 1, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route) GetState() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route) GetUnknownAttributes() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes {
	if x != nil {
		return x.UnknownAttributes
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix string                                                                            `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	PathId uint64                                                                            `protobuf:"varint,2,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	Route  *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route `protobuf:"bytes,3,opt,name=route,proto3" json:"route,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[528]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[528]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 3, 1, 0, 1, 0, 1}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey) GetPathId() uint64 {
	if x != nil {
		return x.PathId
	}
	return 0
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey) GetRoute() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route {
	if x != nil {
		return x.Route
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrIndex         *ywrapper.UintValue                     `protobuf:"bytes,367085502,opt,name=attr_index,json=attrIndex,proto3" json:"attr_index,omitempty"`
	CommunityIndex    *ywrapper.UintValue                     `protobuf:"bytes,279645464,opt,name=community_index,json=communityIndex,proto3" json:"community_index,omitempty"`
	ExtCommunityIndex *ywrapper.UintValue                     `protobuf:"bytes,200661634,opt,name=ext_community_index,json=extCommunityIndex,proto3" json:"ext_community_index,omitempty"`
	InvalidReason     OpenconfigRibBgpTypesINVALIDROUTEREASON `protobuf:"varint,334103974,opt,name=invalid_reason,json=invalidReason,proto3,enum=openconfig.OpenconfigRibBgpTypesINVALIDROUTEREASON" json:"invalid_reason,omitempty"`
	LastModified      *ywrapper.UintValue                     `protobuf:"bytes,465792512,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
	PathId            *ywrapper.UintValue                     `protobuf:"bytes,243108229,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	Prefix            *ywrapper.StringValue                   `protobuf:"bytes,124470680,opt,name=prefix,proto3" json:"prefix,omitempty"`
	ValidRoute        *ywrapper.BoolValue                     `protobuf:"bytes,269119950,opt,name=valid_route,json=validRoute,proto3" json:"valid_route,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[529]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[529]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 3, 1, 0, 1, 0, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) GetAttrIndex() *ywrapper.UintValue {
	if x != nil {
		return x.AttrIndex
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) GetCommunityIndex() *ywrapper.UintValue {
	if x != nil {
		return x.CommunityIndex
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) GetExtCommunityIndex() *ywrapper.UintValue {
	if x != nil {
		return x.ExtCommunityIndex
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) GetInvalidReason() OpenconfigRibBgpTypesINVALIDROUTEREASON {
	if x != nil {
		return x.InvalidReason
	}
	return OpenconfigRibBgpTypesINVALIDROUTEREASON_OPENCONFIGRIBBGPTYPESINVALIDROUTEREASON_UNSET
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) GetLastModified() *ywrapper.UintValue {
	if x != nil {
		return x.LastModified
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) GetPathId() *ywrapper.UintValue {
	if x != nil {
		return x.PathId
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) GetPrefix() *ywrapper.StringValue {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) GetValidRoute() *ywrapper.BoolValue {
	if x != nil {
		return x.ValidRoute
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnknownAttribute []*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey `protobuf:"bytes,451409890,rep,name=unknown_attribute,json=unknownAttribute,proto3" json:"unknown_attribute,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[530]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[530]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 3, 1, 0, 1, 0, 0, 1}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes) GetUnknownAttribute() []*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey {
	if x != nil {
		return x.UnknownAttribute
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State `protobuf:"bytes,268066532,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[531]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[531]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 3, 1, 0, 1, 0, 0, 1, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute) GetState() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrType         uint64                                                                                                               `protobuf:"varint,1,opt,name=attr_type,json=attrType,proto3" json:"attr_type,omitempty"`
	UnknownAttribute *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute `protobuf:"bytes,2,opt,name=unknown_attribute,json=unknownAttribute,proto3" json:"unknown_attribute,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[532]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[532]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 3, 1, 0, 1, 0, 0, 1, 1}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) GetAttrType() uint64 {
	if x != nil {
		return x.AttrType
	}
	return 0
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) GetUnknownAttribute() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute {
	if x != nil {
		return x.UnknownAttribute
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrLen    *ywrapper.UintValue  `protobuf:"bytes,425449816,opt,name=attr_len,json=attrLen,proto3" json:"attr_len,omitempty"`
	AttrType   *ywrapper.UintValue  `protobuf:"bytes,273414387,opt,name=attr_type,json=attrType,proto3" json:"attr_type,omitempty"`
	AttrValue  *ywrapper.BytesValue `protobuf:"bytes,18522970,opt,name=attr_value,json=attrValue,proto3" json:"attr_value,omitempty"`
	Extended   *ywrapper.BoolValue  `protobuf:"bytes,312703220,opt,name=extended,proto3" json:"extended,omitempty"`
	Optional   *ywrapper.BoolValue  `protobuf:"bytes,208596487,opt,name=optional,proto3" json:"optional,omitempty"`
	Partial    *ywrapper.BoolValue  `protobuf:"bytes,98135394,opt,name=partial,proto3" json:"partial,omitempty"`
	Transitive *ywrapper.BoolValue  `protobuf:"bytes,342159146,opt,name=transitive,proto3" json:"transitive,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[533]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[533]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 3, 1, 0, 1, 0, 0, 1, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrLen() *ywrapper.UintValue {
	if x != nil {
		return x.AttrLen
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrType() *ywrapper.UintValue {
	if x != nil {
		return x.AttrType
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrValue() *ywrapper.BytesValue {
	if x != nil {
		return x.AttrValue
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetExtended() *ywrapper.BoolValue {
	if x != nil {
		return x.Extended
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetOptional() *ywrapper.BoolValue {
	if x != nil {
		return x.Optional
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetPartial() *ywrapper.BoolValue {
	if x != nil {
		return x.Partial
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetTransitive() *ywrapper.BoolValue {
	if x != nil {
		return x.Transitive
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Route []*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey `protobuf:"bytes,392089557,rep,name=route,proto3" json:"route,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[534]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[534]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 3, 1, 0, 2, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes) GetRoute() []*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey {
	if x != nil {
		return x.Route
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State             *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State             `protobuf:"bytes,21978263,opt,name=state,proto3" json:"state,omitempty"`
	UnknownAttributes *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes `protobuf:"bytes,372628748,opt,name=unknown_attributes,json=unknownAttributes,proto3" json:"unknown_attributes,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[535]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[535]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 3, 1, 0, 2, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route) GetState() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route) GetUnknownAttributes() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes {
	if x != nil {
		return x.UnknownAttributes
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix string                                                                              `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	PathId uint64                                                                              `protobuf:"varint,2,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	Route  *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route `protobuf:"bytes,3,opt,name=route,proto3" json:"route,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[536]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[536]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 3, 1, 0, 2, 0, 1}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey) GetPathId() uint64 {
	if x != nil {
		return x.PathId
	}
	return 0
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey) GetRoute() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route {
	if x != nil {
		return x.Route
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrIndex         *ywrapper.UintValue                     `protobuf:"bytes,336719220,opt,name=attr_index,json=attrIndex,proto3" json:"attr_index,omitempty"`
	CommunityIndex    *ywrapper.UintValue                     `protobuf:"bytes,451412274,opt,name=community_index,json=communityIndex,proto3" json:"community_index,omitempty"`
	ExtCommunityIndex *ywrapper.UintValue                     `protobuf:"bytes,369163196,opt,name=ext_community_index,json=extCommunityIndex,proto3" json:"ext_community_index,omitempty"`
	InvalidReason     OpenconfigRibBgpTypesINVALIDROUTEREASON `protobuf:"varint,113120356,opt,name=invalid_reason,json=invalidReason,proto3,enum=openconfig.OpenconfigRibBgpTypesINVALIDROUTEREASON" json:"invalid_reason,omitempty"`
	LastModified      *ywrapper.UintValue                     `protobuf:"bytes,514359726,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
	PathId            *ywrapper.UintValue                     `protobuf:"bytes,101333799,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	Prefix            *ywrapper.StringValue                   `protobuf:"bytes,181880918,opt,name=prefix,proto3" json:"prefix,omitempty"`
	ValidRoute        *ywrapper.BoolValue                     `protobuf:"bytes,346685076,opt,name=valid_route,json=validRoute,proto3" json:"valid_route,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[537]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[537]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 3, 1, 0, 2, 0, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) GetAttrIndex() *ywrapper.UintValue {
	if x != nil {
		return x.AttrIndex
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) GetCommunityIndex() *ywrapper.UintValue {
	if x != nil {
		return x.CommunityIndex
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) GetExtCommunityIndex() *ywrapper.UintValue {
	if x != nil {
		return x.ExtCommunityIndex
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) GetInvalidReason() OpenconfigRibBgpTypesINVALIDROUTEREASON {
	if x != nil {
		return x.InvalidReason
	}
	return OpenconfigRibBgpTypesINVALIDROUTEREASON_OPENCONFIGRIBBGPTYPESINVALIDROUTEREASON_UNSET
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) GetLastModified() *ywrapper.UintValue {
	if x != nil {
		return x.LastModified
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) GetPathId() *ywrapper.UintValue {
	if x != nil {
		return x.PathId
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) GetPrefix() *ywrapper.StringValue {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) GetValidRoute() *ywrapper.BoolValue {
	if x != nil {
		return x.ValidRoute
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnknownAttribute []*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey `protobuf:"bytes,267896864,rep,name=unknown_attribute,json=unknownAttribute,proto3" json:"unknown_attribute,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[538]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[538]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 3, 1, 0, 2, 0, 0, 1}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes) GetUnknownAttribute() []*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey {
	if x != nil {
		return x.UnknownAttribute
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State `protobuf:"bytes,290564362,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[539]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[539]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 3, 1, 0, 2, 0, 0, 1, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute) GetState() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrType         uint64                                                                                                                 `protobuf:"varint,1,opt,name=attr_type,json=attrType,proto3" json:"attr_type,omitempty"`
	UnknownAttribute *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute `protobuf:"bytes,2,opt,name=unknown_attribute,json=unknownAttribute,proto3" json:"unknown_attribute,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[540]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[540]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 3, 1, 0, 2, 0, 0, 1, 1}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) GetAttrType() uint64 {
	if x != nil {
		return x.AttrType
	}
	return 0
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) GetUnknownAttribute() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute {
	if x != nil {
		return x.UnknownAttribute
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrLen    *ywrapper.UintValue  `protobuf:"bytes,91578406,opt,name=attr_len,json=attrLen,proto3" json:"attr_len,omitempty"`
	AttrType   *ywrapper.UintValue  `protobuf:"bytes,281985401,opt,name=attr_type,json=attrType,proto3" json:"attr_type,omitempty"`
	AttrValue  *ywrapper.BytesValue `protobuf:"bytes,404723904,opt,name=attr_value,json=attrValue,proto3" json:"attr_value,omitempty"`
	Extended   *ywrapper.BoolValue  `protobuf:"bytes,142450782,opt,name=extended,proto3" json:"extended,omitempty"`
	Optional   *ywrapper.BoolValue  `protobuf:"bytes,53509121,opt,name=optional,proto3" json:"optional,omitempty"`
	Partial    *ywrapper.BoolValue  `protobuf:"bytes,401123152,opt,name=partial,proto3" json:"partial,omitempty"`
	Transitive *ywrapper.BoolValue  `protobuf:"bytes,407153968,opt,name=transitive,proto3" json:"transitive,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[541]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[541]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 3, 1, 0, 2, 0, 0, 1, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrLen() *ywrapper.UintValue {
	if x != nil {
		return x.AttrLen
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrType() *ywrapper.UintValue {
	if x != nil {
		return x.AttrType
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrValue() *ywrapper.BytesValue {
	if x != nil {
		return x.AttrValue
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetExtended() *ywrapper.BoolValue {
	if x != nil {
		return x.Extended
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetOptional() *ywrapper.BoolValue {
	if x != nil {
		return x.Optional
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetPartial() *ywrapper.BoolValue {
	if x != nil {
		return x.Partial
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetTransitive() *ywrapper.BoolValue {
	if x != nil {
		return x.Transitive
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Route []*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey `protobuf:"bytes,116622906,rep,name=route,proto3" json:"route,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[542]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes) ProtoMessage() {}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[542]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 3, 1, 0, 3, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes) GetRoute() []*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey {
	if x != nil {
		return x.Route
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State             *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State             `protobuf:"bytes,305036268,opt,name=state,proto3" json:"state,omitempty"`
	UnknownAttributes *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes `protobuf:"bytes,50654549,opt,name=unknown_attributes,json=unknownAttributes,proto3" json:"unknown_attributes,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[543]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[543]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 3, 1, 0, 3, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route) GetState() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route) GetUnknownAttributes() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes {
	if x != nil {
		return x.UnknownAttributes
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix string                                                                             `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	PathId uint64                                                                             `protobuf:"varint,2,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	Route  *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route `protobuf:"bytes,3,opt,name=route,proto3" json:"route,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[544]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[544]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 3, 1, 0, 3, 0, 1}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey) GetPathId() uint64 {
	if x != nil {
		return x.PathId
	}
	return 0
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey) GetRoute() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route {
	if x != nil {
		return x.Route
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrIndex         *ywrapper.UintValue                     `protobuf:"bytes,13776437,opt,name=attr_index,json=attrIndex,proto3" json:"attr_index,omitempty"`
	CommunityIndex    *ywrapper.UintValue                     `protobuf:"bytes,377184705,opt,name=community_index,json=communityIndex,proto3" json:"community_index,omitempty"`
	ExtCommunityIndex *ywrapper.UintValue                     `protobuf:"bytes,408747431,opt,name=ext_community_index,json=extCommunityIndex,proto3" json:"ext_community_index,omitempty"`
	InvalidReason     OpenconfigRibBgpTypesINVALIDROUTEREASON `protobuf:"varint,219152709,opt,name=invalid_reason,json=invalidReason,proto3,enum=openconfig.OpenconfigRibBgpTypesINVALIDROUTEREASON" json:"invalid_reason,omitempty"`
	LastModified      *ywrapper.UintValue                     `protobuf:"bytes,786861,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
	PathId            *ywrapper.UintValue                     `protobuf:"bytes,54762368,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	Prefix            *ywrapper.StringValue                   `protobuf:"bytes,468118919,opt,name=prefix,proto3" json:"prefix,omitempty"`
	ValidRoute        *ywrapper.BoolValue                     `protobuf:"bytes,508797935,opt,name=valid_route,json=validRoute,proto3" json:"valid_route,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[545]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[545]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 3, 1, 0, 3, 0, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) GetAttrIndex() *ywrapper.UintValue {
	if x != nil {
		return x.AttrIndex
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) GetCommunityIndex() *ywrapper.UintValue {
	if x != nil {
		return x.CommunityIndex
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) GetExtCommunityIndex() *ywrapper.UintValue {
	if x != nil {
		return x.ExtCommunityIndex
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) GetInvalidReason() OpenconfigRibBgpTypesINVALIDROUTEREASON {
	if x != nil {
		return x.InvalidReason
	}
	return OpenconfigRibBgpTypesINVALIDROUTEREASON_OPENCONFIGRIBBGPTYPESINVALIDROUTEREASON_UNSET
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) GetLastModified() *ywrapper.UintValue {
	if x != nil {
		return x.LastModified
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) GetPathId() *ywrapper.UintValue {
	if x != nil {
		return x.PathId
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) GetPrefix() *ywrapper.StringValue {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) GetValidRoute() *ywrapper.BoolValue {
	if x != nil {
		return x.ValidRoute
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnknownAttribute []*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey `protobuf:"bytes,499208549,rep,name=unknown_attribute,json=unknownAttribute,proto3" json:"unknown_attribute,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[546]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[546]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 3, 1, 0, 3, 0, 0, 1}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes) GetUnknownAttribute() []*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey {
	if x != nil {
		return x.UnknownAttribute
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State `protobuf:"bytes,98497607,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[547]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[547]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 3, 1, 0, 3, 0, 0, 1, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute) GetState() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrType         uint64                                                                                                                `protobuf:"varint,1,opt,name=attr_type,json=attrType,proto3" json:"attr_type,omitempty"`
	UnknownAttribute *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute `protobuf:"bytes,2,opt,name=unknown_attribute,json=unknownAttribute,proto3" json:"unknown_attribute,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[548]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[548]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 3, 1, 0, 3, 0, 0, 1, 1}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) GetAttrType() uint64 {
	if x != nil {
		return x.AttrType
	}
	return 0
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) GetUnknownAttribute() *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute {
	if x != nil {
		return x.UnknownAttribute
	}
	return nil
}

type Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrLen    *ywrapper.UintValue  `protobuf:"bytes,239032621,opt,name=attr_len,json=attrLen,proto3" json:"attr_len,omitempty"`
	AttrType   *ywrapper.UintValue  `protobuf:"bytes,74681800,opt,name=attr_type,json=attrType,proto3" json:"attr_type,omitempty"`
	AttrValue  *ywrapper.BytesValue `protobuf:"bytes,288135451,opt,name=attr_value,json=attrValue,proto3" json:"attr_value,omitempty"`
	Extended   *ywrapper.BoolValue  `protobuf:"bytes,535469889,opt,name=extended,proto3" json:"extended,omitempty"`
	Optional   *ywrapper.BoolValue  `protobuf:"bytes,25729898,opt,name=optional,proto3" json:"optional,omitempty"`
	Partial    *ywrapper.BoolValue  `protobuf:"bytes,137213197,opt,name=partial,proto3" json:"partial,omitempty"`
	Transitive *ywrapper.BoolValue  `protobuf:"bytes,31326267,opt,name=transitive,proto3" json:"transitive,omitempty"`
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) Reset() {
	*x = Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[549]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) ProtoMessage() {
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[549]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 3, 1, 0, 3, 0, 0, 1, 0, 0}
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrLen() *ywrapper.UintValue {
	if x != nil {
		return x.AttrLen
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrType() *ywrapper.UintValue {
	if x != nil {
		return x.AttrType
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrValue() *ywrapper.BytesValue {
	if x != nil {
		return x.AttrValue
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetExtended() *ywrapper.BoolValue {
	if x != nil {
		return x.Extended
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetOptional() *ywrapper.BoolValue {
	if x != nil {
		return x.Optional
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetPartial() *ywrapper.BoolValue {
	if x != nil {
		return x.Partial
	}
	return nil
}

func (x *Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetTransitive() *ywrapper.BoolValue {
	if x != nil {
		return x.Transitive
	}
	return nil
}

type Bgp_Rib_AttrSets_AttrSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Aggregator          *Bgp_Rib_AttrSets_AttrSet_Aggregator          `protobuf:"bytes,118172569,opt,name=aggregator,proto3" json:"aggregator,omitempty"`
	AsPath              *Bgp_Rib_AttrSets_AttrSet_AsPath              `protobuf:"bytes,388690686,opt,name=as_path,json=asPath,proto3" json:"as_path,omitempty"`
	As4Path             *Bgp_Rib_AttrSets_AttrSet_As4Path             `protobuf:"bytes,118109678,opt,name=as4_path,json=as4Path,proto3" json:"as4_path,omitempty"`
	State               *Bgp_Rib_AttrSets_AttrSet_State               `protobuf:"bytes,524750581,opt,name=state,proto3" json:"state,omitempty"`
	TunnelEncapsulation *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation `protobuf:"bytes,54531315,opt,name=tunnel_encapsulation,json=tunnelEncapsulation,proto3" json:"tunnel_encapsulation,omitempty"`
}

func (x *Bgp_Rib_AttrSets_AttrSet) Reset() {
	*x = Bgp_Rib_AttrSets_AttrSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[550]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AttrSets_AttrSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AttrSets_AttrSet) ProtoMessage() {}

func (x *Bgp_Rib_AttrSets_AttrSet) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[550]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AttrSets_AttrSet.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AttrSets_AttrSet) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 1, 0}
}

func (x *Bgp_Rib_AttrSets_AttrSet) GetAggregator() *Bgp_Rib_AttrSets_AttrSet_Aggregator {
	if x != nil {
		return x.Aggregator
	}
	return nil
}

func (x *Bgp_Rib_AttrSets_AttrSet) GetAsPath() *Bgp_Rib_AttrSets_AttrSet_AsPath {
	if x != nil {
		return x.AsPath
	}
	return nil
}

func (x *Bgp_Rib_AttrSets_AttrSet) GetAs4Path() *Bgp_Rib_AttrSets_AttrSet_As4Path {
	if x != nil {
		return x.As4Path
	}
	return nil
}

func (x *Bgp_Rib_AttrSets_AttrSet) GetState() *Bgp_Rib_AttrSets_AttrSet_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Bgp_Rib_AttrSets_AttrSet) GetTunnelEncapsulation() *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation {
	if x != nil {
		return x.TunnelEncapsulation
	}
	return nil
}

type Bgp_Rib_AttrSets_AttrSetKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index   uint64                    `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	AttrSet *Bgp_Rib_AttrSets_AttrSet `protobuf:"bytes,2,opt,name=attr_set,json=attrSet,proto3" json:"attr_set,omitempty"`
}

func (x *Bgp_Rib_AttrSets_AttrSetKey) Reset() {
	*x = Bgp_Rib_AttrSets_AttrSetKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[551]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AttrSets_AttrSetKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AttrSets_AttrSetKey) ProtoMessage() {}

func (x *Bgp_Rib_AttrSets_AttrSetKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[551]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AttrSets_AttrSetKey.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AttrSets_AttrSetKey) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 1, 1}
}

func (x *Bgp_Rib_AttrSets_AttrSetKey) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Bgp_Rib_AttrSets_AttrSetKey) GetAttrSet() *Bgp_Rib_AttrSets_AttrSet {
	if x != nil {
		return x.AttrSet
	}
	return nil
}

type Bgp_Rib_AttrSets_AttrSet_Aggregator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *Bgp_Rib_AttrSets_AttrSet_Aggregator_State `protobuf:"bytes,323589019,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Rib_AttrSets_AttrSet_Aggregator) Reset() {
	*x = Bgp_Rib_AttrSets_AttrSet_Aggregator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[552]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AttrSets_AttrSet_Aggregator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AttrSets_AttrSet_Aggregator) ProtoMessage() {}

func (x *Bgp_Rib_AttrSets_AttrSet_Aggregator) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[552]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AttrSets_AttrSet_Aggregator.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AttrSets_AttrSet_Aggregator) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 1, 0, 0}
}

func (x *Bgp_Rib_AttrSets_AttrSet_Aggregator) GetState() *Bgp_Rib_AttrSets_AttrSet_Aggregator_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Rib_AttrSets_AttrSet_As4Path struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	As4Segment []*Bgp_Rib_AttrSets_AttrSet_As4Path_As4Segment `protobuf:"bytes,532558971,rep,name=as4_segment,json=as4Segment,proto3" json:"as4_segment,omitempty"`
}

func (x *Bgp_Rib_AttrSets_AttrSet_As4Path) Reset() {
	*x = Bgp_Rib_AttrSets_AttrSet_As4Path{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[553]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AttrSets_AttrSet_As4Path) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AttrSets_AttrSet_As4Path) ProtoMessage() {}

func (x *Bgp_Rib_AttrSets_AttrSet_As4Path) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[553]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AttrSets_AttrSet_As4Path.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AttrSets_AttrSet_As4Path) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 1, 0, 1}
}

func (x *Bgp_Rib_AttrSets_AttrSet_As4Path) GetAs4Segment() []*Bgp_Rib_AttrSets_AttrSet_As4Path_As4Segment {
	if x != nil {
		return x.As4Segment
	}
	return nil
}

type Bgp_Rib_AttrSets_AttrSet_AsPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AsSegment []*Bgp_Rib_AttrSets_AttrSet_AsPath_AsSegment `protobuf:"bytes,52687745,rep,name=as_segment,json=asSegment,proto3" json:"as_segment,omitempty"`
}

func (x *Bgp_Rib_AttrSets_AttrSet_AsPath) Reset() {
	*x = Bgp_Rib_AttrSets_AttrSet_AsPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[554]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AttrSets_AttrSet_AsPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AttrSets_AttrSet_AsPath) ProtoMessage() {}

func (x *Bgp_Rib_AttrSets_AttrSet_AsPath) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[554]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AttrSets_AttrSet_AsPath.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AttrSets_AttrSet_AsPath) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 1, 0, 2}
}

func (x *Bgp_Rib_AttrSets_AttrSet_AsPath) GetAsSegment() []*Bgp_Rib_AttrSets_AttrSet_AsPath_AsSegment {
	if x != nil {
		return x.AsSegment
	}
	return nil
}

type Bgp_Rib_AttrSets_AttrSet_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Aigp            *ywrapper.UintValue               `protobuf:"bytes,180650779,opt,name=aigp,proto3" json:"aigp,omitempty"`
	AtomicAggregate *ywrapper.BoolValue               `protobuf:"bytes,532437885,opt,name=atomic_aggregate,json=atomicAggregate,proto3" json:"atomic_aggregate,omitempty"`
	ClusterList     []*ywrapper.StringValue           `protobuf:"bytes,505908739,rep,name=cluster_list,json=clusterList,proto3" json:"cluster_list,omitempty"`
	Index           *ywrapper.UintValue               `protobuf:"bytes,492517716,opt,name=index,proto3" json:"index,omitempty"`
	LocalPref       *ywrapper.UintValue               `protobuf:"bytes,490140685,opt,name=local_pref,json=localPref,proto3" json:"local_pref,omitempty"`
	Med             *ywrapper.UintValue               `protobuf:"bytes,271977490,opt,name=med,proto3" json:"med,omitempty"`
	NextHop         *ywrapper.StringValue             `protobuf:"bytes,170865745,opt,name=next_hop,json=nextHop,proto3" json:"next_hop,omitempty"`
	Origin          OpenconfigRibBgpBgpOriginAttrType `protobuf:"varint,251376118,opt,name=origin,proto3,enum=openconfig.OpenconfigRibBgpBgpOriginAttrType" json:"origin,omitempty"`
	OriginatorId    *ywrapper.StringValue             `protobuf:"bytes,519207124,opt,name=originator_id,json=originatorId,proto3" json:"originator_id,omitempty"`
}

func (x *Bgp_Rib_AttrSets_AttrSet_State) Reset() {
	*x = Bgp_Rib_AttrSets_AttrSet_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[555]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AttrSets_AttrSet_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AttrSets_AttrSet_State) ProtoMessage() {}

func (x *Bgp_Rib_AttrSets_AttrSet_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[555]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AttrSets_AttrSet_State.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AttrSets_AttrSet_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 1, 0, 3}
}

func (x *Bgp_Rib_AttrSets_AttrSet_State) GetAigp() *ywrapper.UintValue {
	if x != nil {
		return x.Aigp
	}
	return nil
}

func (x *Bgp_Rib_AttrSets_AttrSet_State) GetAtomicAggregate() *ywrapper.BoolValue {
	if x != nil {
		return x.AtomicAggregate
	}
	return nil
}

func (x *Bgp_Rib_AttrSets_AttrSet_State) GetClusterList() []*ywrapper.StringValue {
	if x != nil {
		return x.ClusterList
	}
	return nil
}

func (x *Bgp_Rib_AttrSets_AttrSet_State) GetIndex() *ywrapper.UintValue {
	if x != nil {
		return x.Index
	}
	return nil
}

func (x *Bgp_Rib_AttrSets_AttrSet_State) GetLocalPref() *ywrapper.UintValue {
	if x != nil {
		return x.LocalPref
	}
	return nil
}

func (x *Bgp_Rib_AttrSets_AttrSet_State) GetMed() *ywrapper.UintValue {
	if x != nil {
		return x.Med
	}
	return nil
}

func (x *Bgp_Rib_AttrSets_AttrSet_State) GetNextHop() *ywrapper.StringValue {
	if x != nil {
		return x.NextHop
	}
	return nil
}

func (x *Bgp_Rib_AttrSets_AttrSet_State) GetOrigin() OpenconfigRibBgpBgpOriginAttrType {
	if x != nil {
		return x.Origin
	}
	return OpenconfigRibBgpBgpOriginAttrType_OPENCONFIGRIBBGPBGPORIGINATTRTYPE_UNSET
}

func (x *Bgp_Rib_AttrSets_AttrSet_State) GetOriginatorId() *ywrapper.StringValue {
	if x != nil {
		return x.OriginatorId
	}
	return nil
}

type Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tunnels *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels `protobuf:"bytes,493069615,opt,name=tunnels,proto3" json:"tunnels,omitempty"`
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation) Reset() {
	*x = Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[556]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation) ProtoMessage() {}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[556]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 1, 0, 4}
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation) GetTunnels() *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels {
	if x != nil {
		return x.Tunnels
	}
	return nil
}

type Bgp_Rib_AttrSets_AttrSet_Aggregator_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address *ywrapper.StringValue `protobuf:"bytes,50634678,opt,name=address,proto3" json:"address,omitempty"`
	As      *ywrapper.UintValue   `protobuf:"bytes,259296802,opt,name=as,proto3" json:"as,omitempty"`
	As4     *ywrapper.UintValue   `protobuf:"bytes,377208754,opt,name=as4,proto3" json:"as4,omitempty"`
}

func (x *Bgp_Rib_AttrSets_AttrSet_Aggregator_State) Reset() {
	*x = Bgp_Rib_AttrSets_AttrSet_Aggregator_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[557]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AttrSets_AttrSet_Aggregator_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AttrSets_AttrSet_Aggregator_State) ProtoMessage() {}

func (x *Bgp_Rib_AttrSets_AttrSet_Aggregator_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[557]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AttrSets_AttrSet_Aggregator_State.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AttrSets_AttrSet_Aggregator_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 1, 0, 0, 0}
}

func (x *Bgp_Rib_AttrSets_AttrSet_Aggregator_State) GetAddress() *ywrapper.StringValue {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Bgp_Rib_AttrSets_AttrSet_Aggregator_State) GetAs() *ywrapper.UintValue {
	if x != nil {
		return x.As
	}
	return nil
}

func (x *Bgp_Rib_AttrSets_AttrSet_Aggregator_State) GetAs4() *ywrapper.UintValue {
	if x != nil {
		return x.As4
	}
	return nil
}

type Bgp_Rib_AttrSets_AttrSet_As4Path_As4Segment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *Bgp_Rib_AttrSets_AttrSet_As4Path_As4Segment_State `protobuf:"bytes,131570085,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Rib_AttrSets_AttrSet_As4Path_As4Segment) Reset() {
	*x = Bgp_Rib_AttrSets_AttrSet_As4Path_As4Segment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[558]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AttrSets_AttrSet_As4Path_As4Segment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AttrSets_AttrSet_As4Path_As4Segment) ProtoMessage() {}

func (x *Bgp_Rib_AttrSets_AttrSet_As4Path_As4Segment) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[558]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AttrSets_AttrSet_As4Path_As4Segment.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AttrSets_AttrSet_As4Path_As4Segment) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 1, 0, 1, 0}
}

func (x *Bgp_Rib_AttrSets_AttrSet_As4Path_As4Segment) GetState() *Bgp_Rib_AttrSets_AttrSet_As4Path_As4Segment_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Rib_AttrSets_AttrSet_As4Path_As4Segment_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Member []*ywrapper.UintValue             `protobuf:"bytes,282691574,rep,name=member,proto3" json:"member,omitempty"`
	Type   OpenconfigRibBgpAsPathSegmentType `protobuf:"varint,375700072,opt,name=type,proto3,enum=openconfig.OpenconfigRibBgpAsPathSegmentType" json:"type,omitempty"`
}

func (x *Bgp_Rib_AttrSets_AttrSet_As4Path_As4Segment_State) Reset() {
	*x = Bgp_Rib_AttrSets_AttrSet_As4Path_As4Segment_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[559]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AttrSets_AttrSet_As4Path_As4Segment_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AttrSets_AttrSet_As4Path_As4Segment_State) ProtoMessage() {}

func (x *Bgp_Rib_AttrSets_AttrSet_As4Path_As4Segment_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[559]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AttrSets_AttrSet_As4Path_As4Segment_State.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AttrSets_AttrSet_As4Path_As4Segment_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 1, 0, 1, 0, 0}
}

func (x *Bgp_Rib_AttrSets_AttrSet_As4Path_As4Segment_State) GetMember() []*ywrapper.UintValue {
	if x != nil {
		return x.Member
	}
	return nil
}

func (x *Bgp_Rib_AttrSets_AttrSet_As4Path_As4Segment_State) GetType() OpenconfigRibBgpAsPathSegmentType {
	if x != nil {
		return x.Type
	}
	return OpenconfigRibBgpAsPathSegmentType_OPENCONFIGRIBBGPASPATHSEGMENTTYPE_UNSET
}

type Bgp_Rib_AttrSets_AttrSet_AsPath_AsSegment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *Bgp_Rib_AttrSets_AttrSet_AsPath_AsSegment_State `protobuf:"bytes,269843187,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Rib_AttrSets_AttrSet_AsPath_AsSegment) Reset() {
	*x = Bgp_Rib_AttrSets_AttrSet_AsPath_AsSegment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[560]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AttrSets_AttrSet_AsPath_AsSegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AttrSets_AttrSet_AsPath_AsSegment) ProtoMessage() {}

func (x *Bgp_Rib_AttrSets_AttrSet_AsPath_AsSegment) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[560]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AttrSets_AttrSet_AsPath_AsSegment.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AttrSets_AttrSet_AsPath_AsSegment) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 1, 0, 2, 0}
}

func (x *Bgp_Rib_AttrSets_AttrSet_AsPath_AsSegment) GetState() *Bgp_Rib_AttrSets_AttrSet_AsPath_AsSegment_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Rib_AttrSets_AttrSet_AsPath_AsSegment_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Member []*ywrapper.UintValue             `protobuf:"bytes,208489508,rep,name=member,proto3" json:"member,omitempty"`
	Type   OpenconfigRibBgpAsPathSegmentType `protobuf:"varint,116839222,opt,name=type,proto3,enum=openconfig.OpenconfigRibBgpAsPathSegmentType" json:"type,omitempty"`
}

func (x *Bgp_Rib_AttrSets_AttrSet_AsPath_AsSegment_State) Reset() {
	*x = Bgp_Rib_AttrSets_AttrSet_AsPath_AsSegment_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[561]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AttrSets_AttrSet_AsPath_AsSegment_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AttrSets_AttrSet_AsPath_AsSegment_State) ProtoMessage() {}

func (x *Bgp_Rib_AttrSets_AttrSet_AsPath_AsSegment_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[561]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AttrSets_AttrSet_AsPath_AsSegment_State.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AttrSets_AttrSet_AsPath_AsSegment_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 1, 0, 2, 0, 0}
}

func (x *Bgp_Rib_AttrSets_AttrSet_AsPath_AsSegment_State) GetMember() []*ywrapper.UintValue {
	if x != nil {
		return x.Member
	}
	return nil
}

func (x *Bgp_Rib_AttrSets_AttrSet_AsPath_AsSegment_State) GetType() OpenconfigRibBgpAsPathSegmentType {
	if x != nil {
		return x.Type
	}
	return OpenconfigRibBgpAsPathSegmentType_OPENCONFIGRIBBGPASPATHSEGMENTTYPE_UNSET
}

type Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tunnel []*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_TunnelKey `protobuf:"bytes,337103664,rep,name=tunnel,proto3" json:"tunnel,omitempty"`
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels) Reset() {
	*x = Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[562]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels) ProtoMessage() {}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[562]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 1, 0, 4, 0}
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels) GetTunnel() []*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_TunnelKey {
	if x != nil {
		return x.Tunnel
	}
	return nil
}

type Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State   *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_State   `protobuf:"bytes,434783418,opt,name=state,proto3" json:"state,omitempty"`
	Subtlvs *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs `protobuf:"bytes,465706794,opt,name=subtlvs,proto3" json:"subtlvs,omitempty"`
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel) Reset() {
	*x = Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[563]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel) ProtoMessage() {}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[563]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 1, 0, 4, 0, 0}
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel) GetState() *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel) GetSubtlvs() *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs {
	if x != nil {
		return x.Subtlvs
	}
	return nil
}

type Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_TunnelKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   OpenconfigRibBgpTypesTUNNELENCAPSULATIONTYPE                 `protobuf:"varint,1,opt,name=type,proto3,enum=openconfig.OpenconfigRibBgpTypesTUNNELENCAPSULATIONTYPE" json:"type,omitempty"`
	Tunnel *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel `protobuf:"bytes,2,opt,name=tunnel,proto3" json:"tunnel,omitempty"`
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_TunnelKey) Reset() {
	*x = Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_TunnelKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[564]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_TunnelKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_TunnelKey) ProtoMessage() {}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_TunnelKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[564]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_TunnelKey.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_TunnelKey) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 1, 0, 4, 0, 1}
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_TunnelKey) GetType() OpenconfigRibBgpTypesTUNNELENCAPSULATIONTYPE {
	if x != nil {
		return x.Type
	}
	return OpenconfigRibBgpTypesTUNNELENCAPSULATIONTYPE_OPENCONFIGRIBBGPTYPESTUNNELENCAPSULATIONTYPE_UNSET
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_TunnelKey) GetTunnel() *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel {
	if x != nil {
		return x.Tunnel
	}
	return nil
}

type Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type OpenconfigRibBgpTypesTUNNELENCAPSULATIONTYPE `protobuf:"varint,521118121,opt,name=type,proto3,enum=openconfig.OpenconfigRibBgpTypesTUNNELENCAPSULATIONTYPE" json:"type,omitempty"`
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_State) Reset() {
	*x = Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[565]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_State) ProtoMessage() {}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[565]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_State.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 1, 0, 4, 0, 0, 0}
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_State) GetType() OpenconfigRibBgpTypesTUNNELENCAPSULATIONTYPE {
	if x != nil {
		return x.Type
	}
	return OpenconfigRibBgpTypesTUNNELENCAPSULATIONTYPE_OPENCONFIGRIBBGPTYPESTUNNELENCAPSULATIONTYPE_UNSET
}

type Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subtlv []*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_SubtlvKey `protobuf:"bytes,153924489,rep,name=subtlv,proto3" json:"subtlv,omitempty"`
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs) Reset() {
	*x = Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[566]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs) ProtoMessage() {}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[566]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 1, 0, 4, 0, 0, 1}
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs) GetSubtlv() []*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_SubtlvKey {
	if x != nil {
		return x.Subtlv
	}
	return nil
}

type Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteEndpoints *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_RemoteEndpoints `protobuf:"bytes,429083887,opt,name=remote_endpoints,json=remoteEndpoints,proto3" json:"remote_endpoints,omitempty"`
	SegmentLists    *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists    `protobuf:"bytes,463379971,opt,name=segment_lists,json=segmentLists,proto3" json:"segment_lists,omitempty"`
	State           *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State           `protobuf:"bytes,118002923,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv) Reset() {
	*x = Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[567]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv) ProtoMessage() {}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[567]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 1, 0, 4, 0, 0, 1, 0}
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv) GetRemoteEndpoints() *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_RemoteEndpoints {
	if x != nil {
		return x.RemoteEndpoints
	}
	return nil
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv) GetSegmentLists() *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists {
	if x != nil {
		return x.SegmentLists
	}
	return nil
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv) GetState() *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_SubtlvKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   OpenconfigRibBgpTypesTUNNELENCAPSULATIONSUBTLVTYPE                          `protobuf:"varint,1,opt,name=type,proto3,enum=openconfig.OpenconfigRibBgpTypesTUNNELENCAPSULATIONSUBTLVTYPE" json:"type,omitempty"`
	Subtlv *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv `protobuf:"bytes,2,opt,name=subtlv,proto3" json:"subtlv,omitempty"`
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_SubtlvKey) Reset() {
	*x = Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_SubtlvKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[568]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_SubtlvKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_SubtlvKey) ProtoMessage() {
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_SubtlvKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[568]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_SubtlvKey.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_SubtlvKey) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 1, 0, 4, 0, 0, 1, 1}
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_SubtlvKey) GetType() OpenconfigRibBgpTypesTUNNELENCAPSULATIONSUBTLVTYPE {
	if x != nil {
		return x.Type
	}
	return OpenconfigRibBgpTypesTUNNELENCAPSULATIONSUBTLVTYPE_OPENCONFIGRIBBGPTYPESTUNNELENCAPSULATIONSUBTLVTYPE_UNSET
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_SubtlvKey) GetSubtlv() *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv {
	if x != nil {
		return x.Subtlv
	}
	return nil
}

type Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_RemoteEndpoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteEndpoint []*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_RemoteEndpoints_RemoteEndpointKey `protobuf:"bytes,378456762,rep,name=remote_endpoint,json=remoteEndpoint,proto3" json:"remote_endpoint,omitempty"`
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_RemoteEndpoints) Reset() {
	*x = Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_RemoteEndpoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[569]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_RemoteEndpoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_RemoteEndpoints) ProtoMessage() {
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_RemoteEndpoints) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[569]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_RemoteEndpoints.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_RemoteEndpoints) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 1, 0, 4, 0, 0, 1, 0, 0}
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_RemoteEndpoints) GetRemoteEndpoint() []*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_RemoteEndpoints_RemoteEndpointKey {
	if x != nil {
		return x.RemoteEndpoint
	}
	return nil
}

type Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SegmentList []*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentListKey `protobuf:"bytes,223972626,rep,name=segment_list,json=segmentList,proto3" json:"segment_list,omitempty"`
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists) Reset() {
	*x = Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[570]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists) ProtoMessage() {
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[570]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 1, 0, 4, 0, 0, 1, 0, 1}
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists) GetSegmentList() []*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentListKey {
	if x != nil {
		return x.SegmentList
	}
	return nil
}

type Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to BindingSid:
	//	*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State_BindingSidBindingsid
	//	*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State_BindingSidString
	//	*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State_BindingSidUint64
	BindingSid isBgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State_BindingSid `protobuf_oneof:"binding_sid"`
	Colors     []*ywrapper.UintValue                                                                         `protobuf:"bytes,266340926,rep,name=colors,proto3" json:"colors,omitempty"`
	Preference *ywrapper.UintValue                                                                           `protobuf:"bytes,450449929,opt,name=preference,proto3" json:"preference,omitempty"`
	Type       OpenconfigRibBgpTypesTUNNELENCAPSULATIONSUBTLVTYPE                                            `protobuf:"varint,244068126,opt,name=type,proto3,enum=openconfig.OpenconfigRibBgpTypesTUNNELENCAPSULATIONSUBTLVTYPE" json:"type,omitempty"`
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State) Reset() {
	*x = Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[571]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State) ProtoMessage() {
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[571]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 1, 0, 4, 0, 0, 1, 0, 2}
}

func (m *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State) GetBindingSid() isBgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State_BindingSid {
	if m != nil {
		return m.BindingSid
	}
	return nil
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State) GetBindingSidBindingsid() Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State_BindingSid {
	if x, ok := x.GetBindingSid().(*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State_BindingSidBindingsid); ok {
		return x.BindingSidBindingsid
	}
	return Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State_BINDINGSID_UNSET
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State) GetBindingSidString() string {
	if x, ok := x.GetBindingSid().(*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State_BindingSidString); ok {
		return x.BindingSidString
	}
	return ""
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State) GetBindingSidUint64() uint64 {
	if x, ok := x.GetBindingSid().(*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State_BindingSidUint64); ok {
		return x.BindingSidUint64
	}
	return 0
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State) GetColors() []*ywrapper.UintValue {
	if x != nil {
		return x.Colors
	}
	return nil
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State) GetPreference() *ywrapper.UintValue {
	if x != nil {
		return x.Preference
	}
	return nil
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State) GetType() OpenconfigRibBgpTypesTUNNELENCAPSULATIONSUBTLVTYPE {
	if x != nil {
		return x.Type
	}
	return OpenconfigRibBgpTypesTUNNELENCAPSULATIONSUBTLVTYPE_OPENCONFIGRIBBGPTYPESTUNNELENCAPSULATIONSUBTLVTYPE_UNSET
}

type isBgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State_BindingSid interface {
	isBgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State_BindingSid()
}

type Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State_BindingSidBindingsid struct {
	BindingSidBindingsid Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State_BindingSid `protobuf:"varint,375800596,opt,name=binding_sid_bindingsid,json=bindingSidBindingsid,proto3,enum=openconfig.Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State_BindingSid,oneof"`
}

type Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State_BindingSidString struct {
	BindingSidString string `protobuf:"bytes,37583598,opt,name=binding_sid_string,json=bindingSidString,proto3,oneof"`
}

type Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State_BindingSidUint64 struct {
	BindingSidUint64 uint64 `protobuf:"varint,107514095,opt,name=binding_sid_uint64,json=bindingSidUint64,proto3,oneof"`
}

func (*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State_BindingSidBindingsid) isBgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State_BindingSid() {
}

func (*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State_BindingSidString) isBgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State_BindingSid() {
}

func (*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State_BindingSidUint64) isBgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State_BindingSid() {
}

type Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_RemoteEndpoints_RemoteEndpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_RemoteEndpoints_RemoteEndpoint_State `protobuf:"bytes,231447660,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_RemoteEndpoints_RemoteEndpoint) Reset() {
	*x = Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_RemoteEndpoints_RemoteEndpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[572]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_RemoteEndpoints_RemoteEndpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_RemoteEndpoints_RemoteEndpoint) ProtoMessage() {
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_RemoteEndpoints_RemoteEndpoint) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[572]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_RemoteEndpoints_RemoteEndpoint.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_RemoteEndpoints_RemoteEndpoint) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 1, 0, 4, 0, 0, 1, 0, 0, 0}
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_RemoteEndpoints_RemoteEndpoint) GetState() *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_RemoteEndpoints_RemoteEndpoint_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_RemoteEndpoints_RemoteEndpointKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoint       string                                                                                                     `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	RemoteEndpoint *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_RemoteEndpoints_RemoteEndpoint `protobuf:"bytes,2,opt,name=remote_endpoint,json=remoteEndpoint,proto3" json:"remote_endpoint,omitempty"`
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_RemoteEndpoints_RemoteEndpointKey) Reset() {
	*x = Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_RemoteEndpoints_RemoteEndpointKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[573]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_RemoteEndpoints_RemoteEndpointKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_RemoteEndpoints_RemoteEndpointKey) ProtoMessage() {
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_RemoteEndpoints_RemoteEndpointKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[573]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_RemoteEndpoints_RemoteEndpointKey.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_RemoteEndpoints_RemoteEndpointKey) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 1, 0, 4, 0, 0, 1, 0, 0, 1}
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_RemoteEndpoints_RemoteEndpointKey) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_RemoteEndpoints_RemoteEndpointKey) GetRemoteEndpoint() *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_RemoteEndpoints_RemoteEndpoint {
	if x != nil {
		return x.RemoteEndpoint
	}
	return nil
}

type Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_RemoteEndpoints_RemoteEndpoint_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	As       *ywrapper.UintValue   `protobuf:"bytes,57617923,opt,name=as,proto3" json:"as,omitempty"`
	Endpoint *ywrapper.StringValue `protobuf:"bytes,459543384,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_RemoteEndpoints_RemoteEndpoint_State) Reset() {
	*x = Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_RemoteEndpoints_RemoteEndpoint_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[574]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_RemoteEndpoints_RemoteEndpoint_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_RemoteEndpoints_RemoteEndpoint_State) ProtoMessage() {
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_RemoteEndpoints_RemoteEndpoint_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[574]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_RemoteEndpoints_RemoteEndpoint_State.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_RemoteEndpoints_RemoteEndpoint_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 1, 0, 4, 0, 0, 1, 0, 0, 0, 0}
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_RemoteEndpoints_RemoteEndpoint_State) GetAs() *ywrapper.UintValue {
	if x != nil {
		return x.As
	}
	return nil
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_RemoteEndpoints_RemoteEndpoint_State) GetEndpoint() *ywrapper.StringValue {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

type Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Segments *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments `protobuf:"bytes,295523751,opt,name=segments,proto3" json:"segments,omitempty"`
	State    *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_State    `protobuf:"bytes,231837492,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList) Reset() {
	*x = Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[575]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList) ProtoMessage() {
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[575]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 1, 0, 4, 0, 0, 1, 0, 1, 0}
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList) GetSegments() *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments {
	if x != nil {
		return x.Segments
	}
	return nil
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList) GetState() *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentListKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId  uint64                                                                                               `protobuf:"varint,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	SegmentList *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList `protobuf:"bytes,2,opt,name=segment_list,json=segmentList,proto3" json:"segment_list,omitempty"`
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentListKey) Reset() {
	*x = Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentListKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[576]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentListKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentListKey) ProtoMessage() {
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentListKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[576]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentListKey.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentListKey) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 1, 0, 4, 0, 0, 1, 0, 1, 1}
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentListKey) GetInstanceId() uint64 {
	if x != nil {
		return x.InstanceId
	}
	return 0
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentListKey) GetSegmentList() *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList {
	if x != nil {
		return x.SegmentList
	}
	return nil
}

type Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Segment []*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_SegmentKey `protobuf:"bytes,243064861,rep,name=segment,proto3" json:"segment,omitempty"`
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments) Reset() {
	*x = Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[577]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments) ProtoMessage() {
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[577]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 1, 0, 4, 0, 0, 1, 0, 1, 0, 0}
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments) GetSegment() []*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_SegmentKey {
	if x != nil {
		return x.Segment
	}
	return nil
}

type Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId *ywrapper.UintValue `protobuf:"bytes,70277308,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Weight     *ywrapper.UintValue `protobuf:"bytes,56197807,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_State) Reset() {
	*x = Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[578]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_State) ProtoMessage() {
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[578]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_State.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 1, 0, 4, 0, 0, 1, 0, 1, 0, 1}
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_State) GetInstanceId() *ywrapper.UintValue {
	if x != nil {
		return x.InstanceId
	}
	return nil
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_State) GetWeight() *ywrapper.UintValue {
	if x != nil {
		return x.Weight
	}
	return nil
}

type Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State `protobuf:"bytes,499438159,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment) Reset() {
	*x = Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[579]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment) ProtoMessage() {
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[579]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 1, 0, 4, 0, 0, 1, 0, 1, 0, 0, 0}
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment) GetState() *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_SegmentKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index   uint64                                                                                                                `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Segment *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment `protobuf:"bytes,2,opt,name=segment,proto3" json:"segment,omitempty"`
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_SegmentKey) Reset() {
	*x = Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_SegmentKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[580]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_SegmentKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_SegmentKey) ProtoMessage() {
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_SegmentKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[580]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_SegmentKey.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_SegmentKey) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 1, 0, 4, 0, 0, 1, 0, 1, 0, 0, 1}
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_SegmentKey) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_SegmentKey) GetSegment() *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment {
	if x != nil {
		return x.Segment
	}
	return nil
}

type Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index             *ywrapper.UintValue   `protobuf:"bytes,40069374,opt,name=index,proto3" json:"index,omitempty"`
	LocalInterfaceId  *ywrapper.UintValue   `protobuf:"bytes,170331661,opt,name=local_interface_id,json=localInterfaceId,proto3" json:"local_interface_id,omitempty"`
	LocalIpv4Address  *ywrapper.StringValue `protobuf:"bytes,351453686,opt,name=local_ipv4_address,json=localIpv4Address,proto3" json:"local_ipv4_address,omitempty"`
	LocalIpv6Address  *ywrapper.StringValue `protobuf:"bytes,292610004,opt,name=local_ipv6_address,json=localIpv6Address,proto3" json:"local_ipv6_address,omitempty"`
	MplsBos           *ywrapper.BoolValue   `protobuf:"bytes,277682573,opt,name=mpls_bos,json=mplsBos,proto3" json:"mpls_bos,omitempty"`
	MplsTc            *ywrapper.UintValue   `protobuf:"bytes,387859456,opt,name=mpls_tc,json=mplsTc,proto3" json:"mpls_tc,omitempty"`
	MplsTtl           *ywrapper.UintValue   `protobuf:"bytes,463810649,opt,name=mpls_ttl,json=mplsTtl,proto3" json:"mpls_ttl,omitempty"`
	RemoteIpv4Address *ywrapper.StringValue `protobuf:"bytes,169055199,opt,name=remote_ipv4_address,json=remoteIpv4Address,proto3" json:"remote_ipv4_address,omitempty"`
	RemoteIpv6Address *ywrapper.StringValue `protobuf:"bytes,366512301,opt,name=remote_ipv6_address,json=remoteIpv6Address,proto3" json:"remote_ipv6_address,omitempty"`
	// Types that are assignable to Sid:
	//	*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_SidSid
	//	*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_SidString
	//	*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_SidUint64
	Sid  isBgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Sid `protobuf_oneof:"sid"`
	Type Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Type  `protobuf:"varint,141490978,opt,name=type,proto3,enum=openconfig.Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Type" json:"type,omitempty"`
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State) Reset() {
	*x = Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[581]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State) ProtoMessage() {
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[581]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 1, 0, 4, 0, 0, 1, 0, 1, 0, 0, 0, 0}
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State) GetIndex() *ywrapper.UintValue {
	if x != nil {
		return x.Index
	}
	return nil
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State) GetLocalInterfaceId() *ywrapper.UintValue {
	if x != nil {
		return x.LocalInterfaceId
	}
	return nil
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State) GetLocalIpv4Address() *ywrapper.StringValue {
	if x != nil {
		return x.LocalIpv4Address
	}
	return nil
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State) GetLocalIpv6Address() *ywrapper.StringValue {
	if x != nil {
		return x.LocalIpv6Address
	}
	return nil
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State) GetMplsBos() *ywrapper.BoolValue {
	if x != nil {
		return x.MplsBos
	}
	return nil
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State) GetMplsTc() *ywrapper.UintValue {
	if x != nil {
		return x.MplsTc
	}
	return nil
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State) GetMplsTtl() *ywrapper.UintValue {
	if x != nil {
		return x.MplsTtl
	}
	return nil
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State) GetRemoteIpv4Address() *ywrapper.StringValue {
	if x != nil {
		return x.RemoteIpv4Address
	}
	return nil
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State) GetRemoteIpv6Address() *ywrapper.StringValue {
	if x != nil {
		return x.RemoteIpv6Address
	}
	return nil
}

func (m *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State) GetSid() isBgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Sid {
	if m != nil {
		return m.Sid
	}
	return nil
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State) GetSidSid() Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Sid {
	if x, ok := x.GetSid().(*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_SidSid); ok {
		return x.SidSid
	}
	return Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_SID_UNSET
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State) GetSidString() string {
	if x, ok := x.GetSid().(*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_SidString); ok {
		return x.SidString
	}
	return ""
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State) GetSidUint64() uint64 {
	if x, ok := x.GetSid().(*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_SidUint64); ok {
		return x.SidUint64
	}
	return 0
}

func (x *Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State) GetType() Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Type {
	if x != nil {
		return x.Type
	}
	return Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_TYPE_UNSET
}

type isBgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Sid interface {
	isBgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Sid()
}

type Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_SidSid struct {
	SidSid Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Sid `protobuf:"varint,322032283,opt,name=sid_sid,json=sidSid,proto3,enum=openconfig.Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Sid,oneof"`
}

type Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_SidString struct {
	SidString string `protobuf:"bytes,221940502,opt,name=sid_string,json=sidString,proto3,oneof"`
}

type Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_SidUint64 struct {
	SidUint64 uint64 `protobuf:"varint,35727191,opt,name=sid_uint64,json=sidUint64,proto3,oneof"`
}

func (*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_SidSid) isBgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Sid() {
}

func (*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_SidString) isBgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Sid() {
}

func (*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_SidUint64) isBgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Sid() {
}

type Bgp_Rib_Communities_Community struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *Bgp_Rib_Communities_Community_State `protobuf:"bytes,458868012,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Rib_Communities_Community) Reset() {
	*x = Bgp_Rib_Communities_Community{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[582]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_Communities_Community) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_Communities_Community) ProtoMessage() {}

func (x *Bgp_Rib_Communities_Community) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[582]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_Communities_Community.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_Communities_Community) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 2, 0}
}

func (x *Bgp_Rib_Communities_Community) GetState() *Bgp_Rib_Communities_Community_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Rib_Communities_CommunityKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index     uint64                         `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Community *Bgp_Rib_Communities_Community `protobuf:"bytes,2,opt,name=community,proto3" json:"community,omitempty"`
}

func (x *Bgp_Rib_Communities_CommunityKey) Reset() {
	*x = Bgp_Rib_Communities_CommunityKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[583]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_Communities_CommunityKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_Communities_CommunityKey) ProtoMessage() {}

func (x *Bgp_Rib_Communities_CommunityKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[583]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_Communities_CommunityKey.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_Communities_CommunityKey) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 2, 1}
}

func (x *Bgp_Rib_Communities_CommunityKey) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Bgp_Rib_Communities_CommunityKey) GetCommunity() *Bgp_Rib_Communities_Community {
	if x != nil {
		return x.Community
	}
	return nil
}

type Bgp_Rib_Communities_Community_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Community []*Bgp_Rib_Communities_Community_State_CommunityUnion `protobuf:"bytes,349781190,rep,name=community,proto3" json:"community,omitempty"`
	Index     *ywrapper.UintValue                                   `protobuf:"bytes,89893213,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *Bgp_Rib_Communities_Community_State) Reset() {
	*x = Bgp_Rib_Communities_Community_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[584]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_Communities_Community_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_Communities_Community_State) ProtoMessage() {}

func (x *Bgp_Rib_Communities_Community_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[584]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_Communities_Community_State.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_Communities_Community_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 2, 0, 0}
}

func (x *Bgp_Rib_Communities_Community_State) GetCommunity() []*Bgp_Rib_Communities_Community_State_CommunityUnion {
	if x != nil {
		return x.Community
	}
	return nil
}

func (x *Bgp_Rib_Communities_Community_State) GetIndex() *ywrapper.UintValue {
	if x != nil {
		return x.Index
	}
	return nil
}

type Bgp_Rib_Communities_Community_State_CommunityUnion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommunityOpenconfigbgptypesbgpwellknownstdcommunity OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY `protobuf:"varint,358174323,opt,name=community_openconfigbgptypesbgpwellknownstdcommunity,json=communityOpenconfigbgptypesbgpwellknownstdcommunity,proto3,enum=openconfig.OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY" json:"community_openconfigbgptypesbgpwellknownstdcommunity,omitempty"`
	CommunityString                                     string                                     `protobuf:"bytes,221300406,opt,name=community_string,json=communityString,proto3" json:"community_string,omitempty"`
	CommunityUint64                                     uint64                                     `protobuf:"varint,86608247,opt,name=community_uint64,json=communityUint64,proto3" json:"community_uint64,omitempty"`
}

func (x *Bgp_Rib_Communities_Community_State_CommunityUnion) Reset() {
	*x = Bgp_Rib_Communities_Community_State_CommunityUnion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[585]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_Communities_Community_State_CommunityUnion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_Communities_Community_State_CommunityUnion) ProtoMessage() {}

func (x *Bgp_Rib_Communities_Community_State_CommunityUnion) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[585]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_Communities_Community_State_CommunityUnion.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_Communities_Community_State_CommunityUnion) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 2, 0, 0, 0}
}

func (x *Bgp_Rib_Communities_Community_State_CommunityUnion) GetCommunityOpenconfigbgptypesbgpwellknownstdcommunity() OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY {
	if x != nil {
		return x.CommunityOpenconfigbgptypesbgpwellknownstdcommunity
	}
	return OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY_OPENCONFIGBGPTYPESBGPWELLKNOWNSTDCOMMUNITY_UNSET
}

func (x *Bgp_Rib_Communities_Community_State_CommunityUnion) GetCommunityString() string {
	if x != nil {
		return x.CommunityString
	}
	return ""
}

func (x *Bgp_Rib_Communities_Community_State_CommunityUnion) GetCommunityUint64() uint64 {
	if x != nil {
		return x.CommunityUint64
	}
	return 0
}

type Bgp_Rib_ExtCommunities_ExtCommunity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *Bgp_Rib_ExtCommunities_ExtCommunity_State `protobuf:"bytes,21215116,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Bgp_Rib_ExtCommunities_ExtCommunity) Reset() {
	*x = Bgp_Rib_ExtCommunities_ExtCommunity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[586]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_ExtCommunities_ExtCommunity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_ExtCommunities_ExtCommunity) ProtoMessage() {}

func (x *Bgp_Rib_ExtCommunities_ExtCommunity) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[586]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_ExtCommunities_ExtCommunity.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_ExtCommunities_ExtCommunity) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 3, 0}
}

func (x *Bgp_Rib_ExtCommunities_ExtCommunity) GetState() *Bgp_Rib_ExtCommunities_ExtCommunity_State {
	if x != nil {
		return x.State
	}
	return nil
}

type Bgp_Rib_ExtCommunities_ExtCommunityKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index        uint64                               `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	ExtCommunity *Bgp_Rib_ExtCommunities_ExtCommunity `protobuf:"bytes,2,opt,name=ext_community,json=extCommunity,proto3" json:"ext_community,omitempty"`
}

func (x *Bgp_Rib_ExtCommunities_ExtCommunityKey) Reset() {
	*x = Bgp_Rib_ExtCommunities_ExtCommunityKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[587]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_ExtCommunities_ExtCommunityKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_ExtCommunities_ExtCommunityKey) ProtoMessage() {}

func (x *Bgp_Rib_ExtCommunities_ExtCommunityKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[587]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_ExtCommunities_ExtCommunityKey.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_ExtCommunities_ExtCommunityKey) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 3, 1}
}

func (x *Bgp_Rib_ExtCommunities_ExtCommunityKey) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Bgp_Rib_ExtCommunities_ExtCommunityKey) GetExtCommunity() *Bgp_Rib_ExtCommunities_ExtCommunity {
	if x != nil {
		return x.ExtCommunity
	}
	return nil
}

type Bgp_Rib_ExtCommunities_ExtCommunity_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExtCommunity []*Bgp_Rib_ExtCommunities_ExtCommunity_State_ExtCommunityUnion `protobuf:"bytes,206923032,rep,name=ext_community,json=extCommunity,proto3" json:"ext_community,omitempty"`
	Index        *ywrapper.UintValue                                            `protobuf:"bytes,364155581,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *Bgp_Rib_ExtCommunities_ExtCommunity_State) Reset() {
	*x = Bgp_Rib_ExtCommunities_ExtCommunity_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[588]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_ExtCommunities_ExtCommunity_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_ExtCommunities_ExtCommunity_State) ProtoMessage() {}

func (x *Bgp_Rib_ExtCommunities_ExtCommunity_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[588]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_ExtCommunities_ExtCommunity_State.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_ExtCommunities_ExtCommunity_State) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 3, 0, 0}
}

func (x *Bgp_Rib_ExtCommunities_ExtCommunity_State) GetExtCommunity() []*Bgp_Rib_ExtCommunities_ExtCommunity_State_ExtCommunityUnion {
	if x != nil {
		return x.ExtCommunity
	}
	return nil
}

func (x *Bgp_Rib_ExtCommunities_ExtCommunity_State) GetIndex() *ywrapper.UintValue {
	if x != nil {
		return x.Index
	}
	return nil
}

type Bgp_Rib_ExtCommunities_ExtCommunity_State_ExtCommunityUnion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExtCommunityBytes  []byte `protobuf:"bytes,335390268,opt,name=ext_community_bytes,json=extCommunityBytes,proto3" json:"ext_community_bytes,omitempty"`
	ExtCommunityString string `protobuf:"bytes,25711896,opt,name=ext_community_string,json=extCommunityString,proto3" json:"ext_community_string,omitempty"`
}

func (x *Bgp_Rib_ExtCommunities_ExtCommunity_State_ExtCommunityUnion) Reset() {
	*x = Bgp_Rib_ExtCommunities_ExtCommunity_State_ExtCommunityUnion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_bgp_proto_msgTypes[589]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp_Rib_ExtCommunities_ExtCommunity_State_ExtCommunityUnion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp_Rib_ExtCommunities_ExtCommunity_State_ExtCommunityUnion) ProtoMessage() {}

func (x *Bgp_Rib_ExtCommunities_ExtCommunity_State_ExtCommunityUnion) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_bgp_proto_msgTypes[589]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp_Rib_ExtCommunities_ExtCommunity_State_ExtCommunityUnion.ProtoReflect.Descriptor instead.
func (*Bgp_Rib_ExtCommunities_ExtCommunity_State_ExtCommunityUnion) Descriptor() ([]byte, []int) {
	return file_openconfig_bgp_proto_rawDescGZIP(), []int{0, 3, 3, 0, 0, 0}
}

func (x *Bgp_Rib_ExtCommunities_ExtCommunity_State_ExtCommunityUnion) GetExtCommunityBytes() []byte {
	if x != nil {
		return x.ExtCommunityBytes
	}
	return nil
}

func (x *Bgp_Rib_ExtCommunities_ExtCommunity_State_ExtCommunityUnion) GetExtCommunityString() string {
	if x != nil {
		return x.ExtCommunityString
	}
	return ""
}

var File_openconfig_bgp_proto protoreflect.FileDescriptor

var file_openconfig_bgp_proto_rawDesc = []byte{
	0x0a, 0x14, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x62, 0x67, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x1a, 0x0e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0a, 0x79, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xce, 0xb6, 0x11, 0x0a, 0x03, 0x42, 0x67, 0x70, 0x12,
	0x42, 0x0a, 0x06, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x18, 0xfe, 0xca, 0xf9, 0x89, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x42, 0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x42, 0x0e, 0x82, 0x41, 0x0b,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x06, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x12, 0x4d, 0x0a, 0x09, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x18, 0xc4, 0x86, 0xb8, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x42, 0x11, 0x82, 0x41, 0x0e, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x52, 0x09, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x12, 0x54, 0x0a, 0x0b, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x18, 0xf8, 0xc7, 0xf2, 0xbb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50, 0x65, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x42, 0x13, 0x82, 0x41, 0x10, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x0a, 0x70, 0x65,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x35, 0x0a, 0x03, 0x72, 0x69, 0x62, 0x18,
	0xf2, 0xb9, 0xdb, 0x5e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x42, 0x0b, 0x82,
	0x41, 0x08, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x52, 0x03, 0x72, 0x69, 0x62, 0x1a,
	0xe6, 0xd2, 0x02, 0x0a, 0x06, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x12, 0x5a, 0x0a, 0x09, 0x61,
	0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x18, 0x9c, 0xf7, 0xb3, 0xbf, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x42, 0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x73, 0x42, 0x18, 0x82, 0x41, 0x15, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x52, 0x08, 0x61,
	0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x12, 0x6c, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x65,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x8c, 0xeb, 0xa6, 0xfe, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x42, 0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x65,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x1c, 0x82, 0x41, 0x19, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0xcf, 0xea, 0xb2, 0xab, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x15, 0x82, 0x41, 0x12, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x8b, 0x01, 0x0a, 0x16, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0xfc, 0xc2, 0x97, 0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x25, 0x82, 0x41, 0x22, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x14, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x97, 0x01, 0x0a, 0x19, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x65, 0x73, 0x18, 0xd0, 0x98, 0xe9, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x42, 0x28, 0x82, 0x41,
	0x25, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x64, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x2d, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2d, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x52, 0x17, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12,
	0x75, 0x0a, 0x10, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0xfa, 0xfa, 0xcc, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x47, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x52, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x42, 0x1f, 0x82, 0x41, 0x1c, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x2d, 0x72, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x0f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x52,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x8f, 0x01, 0x0a, 0x17, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x98, 0xd4, 0x92, 0x58, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x26, 0x82, 0x41, 0x23, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2d,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x15, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0xc0, 0xba, 0xde, 0x90, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x14, 0x82, 0x41, 0x11, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x7b, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x5f, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0xb4, 0xd2, 0xb5,
	0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x55, 0x73,
	0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x42, 0x21,
	0x82, 0x41, 0x1e, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x75,
	0x73, 0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x2d, 0x70, 0x61, 0x74, 0x68,
	0x73, 0x52, 0x10, 0x75, 0x73, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x73, 0x1a, 0xa6, 0x86, 0x02, 0x0a, 0x08, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69,
	0x73, 0x12, 0x6c, 0x0a, 0x08, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x18, 0xc7, 0xf8,
	0xa8, 0xb1, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69,
	0x4b, 0x65, 0x79, 0x42, 0x21, 0x82, 0x41, 0x1e, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x52, 0x07, 0x61, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x1a,
	0xd7, 0x83, 0x02, 0x0a, 0x07, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x12, 0x7e, 0x0a, 0x09,
	0x61, 0x64, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x84, 0xe1, 0xff, 0xcb, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x42, 0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x41, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x41, 0x64, 0x64,
	0x50, 0x61, 0x74, 0x68, 0x73, 0x42, 0x2b, 0x82, 0x41, 0x28, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x61, 0x64, 0x64, 0x2d, 0x70, 0x61, 0x74,
	0x68, 0x73, 0x52, 0x08, 0x61, 0x64, 0x64, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x74, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xd8, 0xd9, 0x97, 0xcb, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67,
	0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69,
	0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x28, 0x82, 0x41, 0x25, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x9a, 0x01, 0x0a, 0x10, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x5f,
	0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0xdd, 0xe4, 0xe9, 0xaf, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42,
	0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66,
	0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x47, 0x72, 0x61, 0x63, 0x65,
	0x66, 0x75, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x32, 0x82, 0x41, 0x2f, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x67, 0x72,
	0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x2d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x0f,
	0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12,
	0xa7, 0x01, 0x0a, 0x14, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64,
	0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x18, 0x89, 0x84, 0xdf, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42,
	0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66,
	0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x42, 0x36, 0x82,
	0x41, 0x33, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x2d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x52, 0x12, 0x69, 0x70, 0x76, 0x34, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x65, 0x64, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0x89, 0x01, 0x0a, 0x0c, 0x69, 0x70,
	0x76, 0x34, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x18, 0xf7, 0xf0, 0xaa, 0x3a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x42, 0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x41, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76,
	0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x42, 0x2e, 0x82, 0x41, 0x2b, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34,
	0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x34, 0x55, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0xa7, 0x01, 0x0a, 0x14, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x18, 0xcf,
	0xf4, 0xc2, 0x4d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69,
	0x2e, 0x49, 0x70, 0x76, 0x36, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x65, 0x64, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x52, 0x12, 0x69, 0x70, 0x76,
	0x36, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12,
	0x8a, 0x01, 0x0a, 0x0c, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x18, 0xd1, 0xdc, 0xad, 0x9c, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x42,
	0x2e, 0x82, 0x41, 0x2b, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x52,
	0x0b, 0x69, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0x81, 0x01, 0x0a,
	0x0a, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x5f, 0x65, 0x76, 0x70, 0x6e, 0x18, 0xda, 0xa5, 0x98, 0x75,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x4c, 0x32,
	0x56, 0x70, 0x6e, 0x45, 0x76, 0x70, 0x6e, 0x42, 0x2c, 0x82, 0x41, 0x29, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x32, 0x76, 0x70, 0x6e,
	0x2d, 0x65, 0x76, 0x70, 0x6e, 0x52, 0x09, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x45, 0x76, 0x70, 0x6e,
	0x12, 0x82, 0x01, 0x0a, 0x0a, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x5f, 0x76, 0x70, 0x6c, 0x73, 0x18,
	0xa0, 0x82, 0xd7, 0xae, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x2e, 0x4c, 0x32, 0x56, 0x70, 0x6e, 0x56, 0x70, 0x6c, 0x73, 0x42, 0x2c, 0x82, 0x41,
	0x29, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x6c, 0x32, 0x76, 0x70, 0x6e, 0x2d, 0x76, 0x70, 0x6c, 0x73, 0x52, 0x09, 0x6c, 0x32, 0x76, 0x70,
	0x6e, 0x56, 0x70, 0x6c, 0x73, 0x12, 0xa8, 0x01, 0x0a, 0x14, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x5f,
	0x69, 0x70, 0x76, 0x34, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x18, 0xcc,
	0x8e, 0xd5, 0xe6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66,
	0x69, 0x2e, 0x4c, 0x33, 0x56, 0x70, 0x6e, 0x49, 0x70, 0x76, 0x34, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70,
	0x76, 0x34, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x52, 0x12, 0x6c, 0x33,
	0x76, 0x70, 0x6e, 0x49, 0x70, 0x76, 0x34, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x12, 0x9f, 0x01, 0x0a, 0x12, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x18, 0xe5, 0x86, 0xdf, 0x60, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67,
	0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69,
	0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x4c, 0x33, 0x56, 0x70, 0x6e, 0x49,
	0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x42, 0x34, 0x82, 0x41, 0x31, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33,
	0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x52, 0x10, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x12, 0xa7, 0x01, 0x0a, 0x14, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x5f, 0x69, 0x70, 0x76,
	0x36, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x18, 0xfe, 0xd4, 0x84, 0x67,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x4c, 0x33,
	0x56, 0x70, 0x6e, 0x49, 0x70, 0x76, 0x36, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x52, 0x12, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x49,
	0x70, 0x76, 0x36, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0xa0, 0x01, 0x0a,
	0x12, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x18, 0xbb, 0xad, 0xb0, 0x86, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41,
	0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x4c, 0x33, 0x56, 0x70, 0x6e, 0x49, 0x70, 0x76, 0x36,
	0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x42, 0x34, 0x82, 0x41, 0x31, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e,
	0x2d, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x52, 0x10, 0x6c,
	0x33, 0x76, 0x70, 0x6e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12,
	0xb3, 0x01, 0x0a, 0x17, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x89, 0xb6, 0xc3, 0x28,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2d, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x15,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x98, 0x01, 0x0a, 0x10, 0x73, 0x72, 0x74, 0x65, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x18, 0xd9, 0xe4, 0xa7, 0xfc, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x53, 0x72,
	0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x70, 0x76, 0x34, 0x42, 0x32, 0x82, 0x41,
	0x2f, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x69, 0x70, 0x76, 0x34,
	0x52, 0x0e, 0x73, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x70, 0x76, 0x34,
	0x12, 0x98, 0x01, 0x0a, 0x10, 0x73, 0x72, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x5f, 0x69, 0x70, 0x76, 0x36, 0x18, 0xdb, 0xe4, 0xa7, 0xfc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70,
	0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73,
	0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x49, 0x70, 0x76, 0x36, 0x42, 0x32, 0x82, 0x41, 0x2f, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x73, 0x72, 0x74, 0x65, 0x2d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x52, 0x0e, 0x73, 0x72, 0x74,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x70, 0x76, 0x36, 0x12, 0x70, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0xf1, 0xf2, 0xcf, 0xe4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e,
	0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x27, 0x82,
	0x41, 0x24, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0xa0, 0x01,
	0x0a, 0x12, 0x75, 0x73, 0x65, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x73, 0x18, 0x83, 0xa6, 0xac, 0x8f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e,
	0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x42, 0x34, 0x82, 0x41, 0x31, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x75, 0x73, 0x65, 0x2d,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x52, 0x10,
	0x75, 0x73, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73,
	0x1a, 0xe9, 0x09, 0x0a, 0x08, 0x41, 0x64, 0x64, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x86, 0x01,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xa9, 0x9c, 0x93, 0x71, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42,
	0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66,
	0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x61,
	0x74, 0x68, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x32, 0x82, 0x41, 0x2f, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x61, 0x64,
	0x64, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x82, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0xfe, 0xaf, 0xb3, 0x4b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x61, 0x74, 0x68, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x31, 0x82, 0x41, 0x2e, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x61, 0x64, 0x64, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xe7, 0x03, 0x0a, 0x06,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x99, 0x01, 0x0a, 0x16, 0x65, 0x6c, 0x69, 0x67, 0x69,
	0x62, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x18, 0xe3, 0xcd, 0xa2, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x49, 0x82, 0x41, 0x46, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x61, 0x64, 0x64, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x2d, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x14, 0x65, 0x6c,
	0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x6c, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x18, 0xbb, 0x81,
	0xb6, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3a, 0x82, 0x41, 0x37,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x61,
	0x64, 0x64, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x12, 0x63, 0x0a, 0x04, 0x73, 0x65, 0x6e, 0x64, 0x18, 0x86, 0xf6, 0xfb, 0x58, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x37, 0x82, 0x41, 0x34, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x61, 0x64, 0x64, 0x2d, 0x70, 0x61,
	0x74, 0x68, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x65, 0x6e, 0x64, 0x52,
	0x04, 0x73, 0x65, 0x6e, 0x64, 0x12, 0x6e, 0x0a, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x61,
	0x78, 0x18, 0xab, 0xf5, 0xae, 0x54, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x3b, 0x82, 0x41, 0x38, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x61, 0x64, 0x64, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x6d, 0x61, 0x78, 0x52, 0x07, 0x73, 0x65,
	0x6e, 0x64, 0x4d, 0x61, 0x78, 0x1a, 0xe4, 0x03, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x98, 0x01, 0x0a, 0x16, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x92, 0xd9, 0xe3, 0x57, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x48, 0x82, 0x41, 0x45, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x61, 0x64,
	0x64, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6c,
	0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x2d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x14, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x6b, 0x0a, 0x07, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x18, 0xcc, 0xb9, 0xed, 0x58, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x61, 0x64, 0x64, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x07,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x12, 0x63, 0x0a, 0x04, 0x73, 0x65, 0x6e, 0x64, 0x18,
	0xd3, 0xd2, 0x8e, 0x9b, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x36,
	0x82, 0x41, 0x33, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x61, 0x64, 0x64, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x73, 0x65, 0x6e, 0x64, 0x52, 0x04, 0x73, 0x65, 0x6e, 0x64, 0x12, 0x6e, 0x0a, 0x08,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0xae, 0xb2, 0xaa, 0xfe, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3a, 0x82, 0x41, 0x37, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x61, 0x64, 0x64, 0x2d, 0x70,
	0x61, 0x74, 0x68, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x65, 0x6e, 0x64, 0x2d,
	0x6d, 0x61, 0x78, 0x52, 0x07, 0x73, 0x65, 0x6e, 0x64, 0x4d, 0x61, 0x78, 0x1a, 0xf8, 0x01, 0x0a,
	0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x89, 0x01, 0x0a, 0x0d, 0x61, 0x66, 0x69, 0x5f,
	0x73, 0x61, 0x66, 0x69, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xa5, 0x80, 0xf8, 0xde, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x67, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x41, 0x46, 0x49, 0x53, 0x41, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x42, 0x36,
	0x82, 0x41, 0x33, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x0b, 0x61, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x62, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x8a,
	0xaa, 0xd0, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x30, 0x82, 0x41,
	0x2d, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x1a, 0xb8, 0x04, 0x0a, 0x0f, 0x47, 0x72, 0x61, 0x63,
	0x65, 0x66, 0x75, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x94, 0x01, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x92, 0x8b, 0xf1, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70,
	0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73,
	0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x47, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75,
	0x6c, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x39, 0x82, 0x41, 0x36, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x2d, 0x72, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x91, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x8f, 0xb4, 0xe9,
	0xe5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x41,
	0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e,
	0x47, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x38, 0x82, 0x41, 0x35, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75,
	0x6c, 0x2d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x7d, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x73, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xa0, 0xae, 0xb1, 0x78,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x67, 0x72, 0x61,
	0x63, 0x65, 0x66, 0x75, 0x6c, 0x2d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x1a, 0x7b, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x72,
	0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xf1, 0xb6, 0xba, 0x40, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x67, 0x72, 0x61, 0x63, 0x65,
	0x66, 0x75, 0x6c, 0x2d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x1a, 0xdc, 0x0e, 0x0a, 0x12, 0x49, 0x70, 0x76, 0x34, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x65, 0x64, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0xb1, 0x01, 0x0a, 0x0c, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0xce, 0x97, 0xe2, 0x16, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x42, 0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x41, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76,
	0x34, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x43, 0x82, 0x41, 0x40,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69,
	0x70, 0x76, 0x34, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x2d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0x91, 0x0d,
	0x0a, 0x0b, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0xb5, 0x01,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xff, 0x96, 0x89, 0xa2, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x42, 0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x4a, 0x82, 0x41, 0x47, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65,
	0x64, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xb0, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0xb0, 0xc7, 0xb6, 0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66,
	0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x55, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x49, 0x82, 0x41, 0x46, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x8c, 0x05, 0x0a, 0x06, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x92, 0x01, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x65, 0x73, 0x18, 0xe1, 0x96, 0xd8, 0x5a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x57, 0x82, 0x41, 0x54, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x65, 0x64, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d,
	0x61, 0x78, 0x2d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x52, 0x0b, 0x6d, 0x61, 0x78,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x9e, 0x01, 0x0a, 0x10, 0x70, 0x72, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0xe9, 0xf2,
	0x8d, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5b, 0x82, 0x41, 0x58,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69,
	0x70, 0x76, 0x34, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x2d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d,
	0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x9b, 0x01, 0x0a, 0x0d, 0x72, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0xef, 0x98, 0xfc, 0xef,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x58, 0x82, 0x41, 0x55, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x2d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x72, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0xad, 0x01, 0x0a, 0x15, 0x77, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63,
	0x74, 0x18, 0xee, 0xdd, 0xfd, 0xb6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x60, 0x82, 0x41, 0x5d, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64,
	0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x77, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x70,
	0x63, 0x74, 0x52, 0x13, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74, 0x1a, 0x87, 0x05, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x91, 0x01, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x65, 0x73, 0x18, 0xbc, 0xee, 0xa2, 0x41, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x56, 0x82, 0x41, 0x53, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64,
	0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x61, 0x78, 0x2d,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x9d, 0x01, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0xa0, 0xdf, 0xec, 0x46, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5a, 0x82, 0x41, 0x57, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34,
	0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x74, 0x65, 0x61, 0x72,
	0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61,
	0x72, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x9a, 0x01, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x90, 0x90, 0xd6, 0xe3, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x57, 0x82, 0x41, 0x54,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69,
	0x70, 0x76, 0x34, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x2d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2d, 0x74,
	0x69, 0x6d, 0x65, 0x72, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x72, 0x12, 0xac, 0x01, 0x0a, 0x15, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18, 0xd1, 0xf6, 0xc0,
	0xfa, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5f, 0x82, 0x41, 0x5c,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69,
	0x70, 0x76, 0x34, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x2d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x2d, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x70, 0x63, 0x74, 0x52, 0x13, 0x77, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x63,
	0x74, 0x1a, 0xb9, 0x12, 0x0a, 0x0b, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x12, 0x8c, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xe8, 0x8e, 0xeb,
	0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x41, 0x66,
	0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49,
	0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0xa2, 0x01, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0xd4, 0xb6, 0x85, 0x7c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x3b, 0x82, 0x41, 0x38,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69,
	0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x89, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x81, 0x81, 0xbe, 0x81, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x34, 0x82, 0x41, 0x31, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x1a, 0x99, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x8e, 0x01, 0x0a,
	0x12, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x18, 0xd1, 0xed, 0xed, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x48, 0x82, 0x41, 0x45, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x10, 0x73, 0x65, 0x6e,
	0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x1a, 0xb3, 0x0c,
	0x0a, 0x0b, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0xa6, 0x01,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xd9, 0x96, 0xff, 0xa2, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x42, 0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34,
	0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70,
	0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xa1, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0xae, 0xc4, 0x90, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xec, 0x04, 0x0a, 0x06, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x8a, 0x01, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x87, 0x83, 0xb1, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x65, 0x73, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x65, 0x73, 0x12, 0x96, 0x01, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0xc7, 0xd9, 0xc4, 0x52, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x53, 0x82, 0x41, 0x50, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x2d, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x93, 0x01, 0x0a, 0x0d,
	0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0xc5, 0xea,
	0x81, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x50, 0x82, 0x41, 0x4d, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2d, 0x74, 0x69,
	0x6d, 0x65, 0x72, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x72, 0x12, 0xa5, 0x01, 0x0a, 0x15, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x98, 0xc6, 0x80, 0xc8,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x58, 0x82, 0x41, 0x55, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70,
	0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x77,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x2d, 0x70, 0x63, 0x74, 0x52, 0x13, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74, 0x1a, 0xe7, 0x04, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x89, 0x01, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x65, 0x73, 0x18, 0xf6, 0xbc, 0xce, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x65, 0x73, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12,
	0x96, 0x01, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x72,
	0x64, 0x6f, 0x77, 0x6e, 0x18, 0xba, 0xd9, 0x8d, 0xbc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x52, 0x82, 0x41, 0x4f, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x74,
	0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x91, 0x01, 0x0a, 0x0d, 0x72, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0xea, 0xa7, 0x8e, 0x66, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4f, 0x82,
	0x41, 0x4c, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x0c,
	0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0xa4, 0x01, 0x0a,
	0x15, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18, 0xb7, 0xfc, 0x83, 0xe5, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x57, 0x82, 0x41, 0x54, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x70, 0x63, 0x74, 0x52, 0x13,
	0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x50, 0x63, 0x74, 0x1a, 0x97, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x8d, 0x01,
	0x0a, 0x12, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x18, 0xfe, 0x82, 0xd6, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x47, 0x82, 0x41, 0x44, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x10, 0x73, 0x65, 0x6e,
	0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x1a, 0xda, 0x0e,
	0x0a, 0x12, 0x49, 0x70, 0x76, 0x36, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x55, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x12, 0xb2, 0x01, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x9c, 0xd1, 0xd3, 0x83, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x46, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70,
	0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73,
	0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x43, 0x82, 0x41, 0x40, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x0b, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0x8e, 0x0d, 0x0a, 0x0b, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0xb4, 0x01, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0xf1, 0xdd, 0xb1, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41,
	0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x65, 0x64, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x4a, 0x82, 0x41,
	0x47, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x69, 0x70, 0x76, 0x36, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x2d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0xb0, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xe6, 0xf0, 0xe5, 0x5e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x42, 0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x41, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76,
	0x36, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x49, 0x82, 0x41, 0x46, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65,
	0x64, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x1a, 0x8a, 0x05, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x92,
	0x01, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18,
	0xaf, 0x99, 0xe6, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x57, 0x82,
	0x41, 0x54, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x2d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x65, 0x73, 0x12, 0x9e, 0x01, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x9f, 0xd9, 0xa4, 0x2b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5b, 0x82, 0x41, 0x58, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x74, 0x65, 0x61, 0x72, 0x64,
	0x6f, 0x77, 0x6e, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x72,
	0x64, 0x6f, 0x77, 0x6e, 0x12, 0x9a, 0x01, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x9d, 0xb6, 0xbf, 0x4a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x58, 0x82, 0x41, 0x55, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76,
	0x36, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2d, 0x74, 0x69,
	0x6d, 0x65, 0x72, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x72, 0x12, 0xac, 0x01, 0x0a, 0x15, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18, 0xb0, 0xd3, 0x96, 0x38,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x60, 0x82, 0x41, 0x5d, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76,
	0x36, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x2d, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x70, 0x63, 0x74, 0x52, 0x13, 0x77, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74,
	0x1a, 0x87, 0x05, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x92, 0x01, 0x0a, 0x0c, 0x6d,
	0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0xfe, 0xcf, 0xcd, 0xa8,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x56, 0x82, 0x41, 0x53, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70,
	0x76, 0x36, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x65, 0x73, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12,
	0x9d, 0x01, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x72,
	0x64, 0x6f, 0x77, 0x6e, 0x18, 0xb2, 0xcd, 0xed, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x5a, 0x82, 0x41, 0x57, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x65, 0x64, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0f,
	0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x12,
	0x9a, 0x01, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x72, 0x18, 0xa2, 0xb1, 0x97, 0xed, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x57, 0x82, 0x41, 0x54, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x65, 0x64, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x0c,
	0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0xab, 0x01, 0x0a,
	0x15, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18, 0xaf, 0xd0, 0xae, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x5f, 0x82, 0x41, 0x5c, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x65, 0x64, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x2d, 0x70, 0x63, 0x74, 0x52, 0x13, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74, 0x1a, 0xbb, 0x12, 0x0a, 0x0b, 0x49,
	0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0x8d, 0x01, 0x0a, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xf6, 0x86, 0xc1, 0xdd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70,
	0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73,
	0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x35, 0x82, 0x41, 0x32,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69,
	0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xa2, 0x01, 0x0a, 0x0c, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0xe6, 0xc2, 0xff, 0x23,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70,
	0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x3b, 0x82, 0x41, 0x38, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x89, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xa3, 0x85, 0xa5, 0xc2, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x42, 0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x41, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76,
	0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x34,
	0x82, 0x41, 0x31, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x99, 0x01, 0x0a, 0x06,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x8e, 0x01, 0x0a, 0x12, 0x73, 0x65, 0x6e, 0x64, 0x5f,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x9b, 0xc6,
	0xeb, 0x7a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x48, 0x82, 0x41, 0x45,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69,
	0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2d,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x10, 0x73, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x1a, 0xb4, 0x0c, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0xa5, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0xe7, 0x86, 0x98, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0xa1, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xd8, 0xa8, 0xe4, 0x4b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x42, 0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36,
	0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76,
	0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x1a, 0xee, 0x04, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x8b,
	0x01, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18,
	0xb9, 0x9d, 0xb3, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4f,
	0x82, 0x41, 0x4c, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x52,
	0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x97, 0x01, 0x0a,
	0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77,
	0x6e, 0x18, 0xf1, 0xc9, 0x85, 0x8d, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x53, 0x82, 0x41, 0x50, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x74, 0x65, 0x61,
	0x72, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x65,
	0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x93, 0x01, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0xd7, 0xab, 0x83, 0x98, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x50, 0x82, 0x41,
	0x4d, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x0c,
	0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0xa5, 0x01, 0x0a,
	0x15, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18, 0xd6, 0xff, 0xca, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x58, 0x82, 0x41, 0x55, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x70, 0x63, 0x74, 0x52,
	0x13, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x50, 0x63, 0x74, 0x1a, 0xe7, 0x04, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x89,
	0x01, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18,
	0xd4, 0x9a, 0xa6, 0x5d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4e, 0x82,
	0x41, 0x4b, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x52, 0x0b, 0x6d,
	0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x96, 0x01, 0x0a, 0x10, 0x70,
	0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x18,
	0xe8, 0xfe, 0xff, 0xfa, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x52,
	0x82, 0x41, 0x4f, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f,
	0x77, 0x6e, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x72, 0x64,
	0x6f, 0x77, 0x6e, 0x12, 0x91, 0x01, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x98, 0xf2, 0xe4, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36,
	0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0xa4, 0x01, 0x0a, 0x15, 0x77, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63,
	0x74, 0x18, 0xd9, 0xe1, 0xfa, 0x8e, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x57, 0x82, 0x41, 0x54, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x2d, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x70, 0x63, 0x74, 0x52, 0x13, 0x77, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74, 0x1a, 0x97,
	0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x8d, 0x01, 0x0a, 0x12, 0x73, 0x65, 0x6e,
	0x64, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18,
	0xc4, 0x89, 0xba, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x47, 0x82,
	0x41, 0x44, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x10, 0x73, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x1a, 0xce, 0x0d, 0x0a, 0x09, 0x4c, 0x32, 0x56,
	0x70, 0x6e, 0x45, 0x76, 0x70, 0x6e, 0x12, 0x9f, 0x01, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0xdf, 0xee, 0xc8, 0x90, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42,
	0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66,
	0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x4c, 0x32, 0x56, 0x70, 0x6e,
	0x45, 0x76, 0x70, 0x6e, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x2d, 0x65, 0x76, 0x70, 0x6e, 0x2f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x0b, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0x9e, 0x0c, 0x0a, 0x0b, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0xa2, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0xa0, 0xf1, 0xab, 0xde, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41,
	0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x4c, 0x32, 0x56, 0x70, 0x6e, 0x45, 0x76, 0x70, 0x6e,
	0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x2d, 0x65, 0x76, 0x70,
	0x6e, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x9e, 0x01,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x99, 0xa2, 0xb1, 0xcf, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x43, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42,
	0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66,
	0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x4c, 0x32, 0x56, 0x70, 0x6e,
	0x45, 0x76, 0x70, 0x6e, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x2d,
	0x65, 0x76, 0x70, 0x6e, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xe6,
	0x04, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x89, 0x01, 0x0a, 0x0c, 0x6d, 0x61,
	0x78, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0xac, 0xb2, 0xe9, 0xc1, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4d, 0x82, 0x41, 0x4a, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x32, 0x76,
	0x70, 0x6e, 0x2d, 0x65, 0x76, 0x70, 0x6e, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x61, 0x78, 0x2d,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x95, 0x01, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x90, 0xad, 0xc0, 0xbf, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x51, 0x82, 0x41, 0x4e, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x32, 0x76,
	0x70, 0x6e, 0x2d, 0x65, 0x76, 0x70, 0x6e, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2d, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0f, 0x70, 0x72,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x91, 0x01,
	0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18,
	0xa0, 0xee, 0xe8, 0xdc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x2d, 0x65, 0x76, 0x70,
	0x6e, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2d, 0x74, 0x69,
	0x6d, 0x65, 0x72, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x72, 0x12, 0xa3, 0x01, 0x0a, 0x15, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18, 0xe1, 0xa4, 0xe9, 0xda,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x56, 0x82, 0x41, 0x53, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x32,
	0x76, 0x70, 0x6e, 0x2d, 0x65, 0x76, 0x70, 0x6e, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x77, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x70,
	0x63, 0x74, 0x52, 0x13, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74, 0x1a, 0xdf, 0x04, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x88, 0x01, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x65, 0x73, 0x18, 0xc7, 0xe4, 0xf9, 0xce, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x4c, 0x82, 0x41, 0x49, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x2d, 0x65, 0x76, 0x70, 0x6e, 0x2f,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x52,
	0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x93, 0x01, 0x0a,
	0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77,
	0x6e, 0x18, 0x87, 0xf5, 0xe5, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x50, 0x82, 0x41, 0x4d, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x2d, 0x65, 0x76, 0x70, 0x6e, 0x2f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77,
	0x6e, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f,
	0x77, 0x6e, 0x12, 0x90, 0x01, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x72, 0x18, 0x85, 0xb2, 0xba, 0xf6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4d, 0x82, 0x41, 0x4a, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x32, 0x76, 0x70,
	0x6e, 0x2d, 0x65, 0x76, 0x70, 0x6e, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0xa1, 0x01, 0x0a, 0x15, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18,
	0xd8, 0xca, 0x9c, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x55, 0x82,
	0x41, 0x52, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x2d, 0x65, 0x76, 0x70, 0x6e, 0x2f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x77,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x2d, 0x70, 0x63, 0x74, 0x52, 0x13, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74, 0x1a, 0xca, 0x0d, 0x0a, 0x09, 0x4c, 0x32,
	0x56, 0x70, 0x6e, 0x56, 0x70, 0x6c, 0x73, 0x12, 0x9f, 0x01, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x8d, 0xd0, 0xd6, 0xd3, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x42, 0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x4c, 0x32, 0x56, 0x70,
	0x6e, 0x56, 0x70, 0x6c, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x2d, 0x76, 0x70, 0x6c, 0x73, 0x2f,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x0b, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0x9a, 0x0c, 0x0a, 0x0b, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0xa1, 0x01, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0xa2, 0xd9, 0xe5, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41,
	0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x4c, 0x32, 0x56, 0x70, 0x6e, 0x56, 0x70, 0x6c, 0x73,
	0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x2d, 0x76, 0x70, 0x6c,
	0x73, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x9d, 0x01,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xdf, 0x9f, 0xbb, 0x20, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x43, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67,
	0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69,
	0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x4c, 0x32, 0x56, 0x70, 0x6e, 0x56,
	0x70, 0x6c, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x2d, 0x76,
	0x70, 0x6c, 0x73, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xe3, 0x04,
	0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x88, 0x01, 0x0a, 0x0c, 0x6d, 0x61, 0x78,
	0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0xa2, 0xd0, 0x83, 0x44, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4d, 0x82, 0x41, 0x4a, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x32, 0x76, 0x70, 0x6e,
	0x2d, 0x76, 0x70, 0x6c, 0x73, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x65, 0x73, 0x12, 0x95, 0x01, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0xbe, 0xa8, 0xcc, 0x9a, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x51, 0x82, 0x41, 0x4e, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x32, 0x76, 0x70, 0x6e,
	0x2d, 0x76, 0x70, 0x6c, 0x73, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x2d, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x90, 0x01, 0x0a, 0x0d,
	0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0xee, 0xf1,
	0xd4, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x2d, 0x76, 0x70, 0x6c, 0x73, 0x2f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x72,
	0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0xa2,
	0x01, 0x0a, 0x15, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18, 0xf3, 0xdd, 0xe7, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x56, 0x82, 0x41, 0x53, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x2d,
	0x76, 0x70, 0x6c, 0x73, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x70, 0x63, 0x74, 0x52, 0x13,
	0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x50, 0x63, 0x74, 0x1a, 0xe0, 0x04, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x87, 0x01,
	0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0xc1,
	0x80, 0xe2, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4c, 0x82, 0x41,
	0x49, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x6c, 0x32, 0x76, 0x70, 0x6e, 0x2d, 0x76, 0x70, 0x6c, 0x73, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x61,
	0x78, 0x2d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x94, 0x01, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0xc9, 0xab, 0xf6,
	0x83, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x50, 0x82, 0x41, 0x4d,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c,
	0x32, 0x76, 0x70, 0x6e, 0x2d, 0x76, 0x70, 0x6c, 0x73, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x2d, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0f, 0x70,
	0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x90,
	0x01, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72,
	0x18, 0xcf, 0xdc, 0xf9, 0xb1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x4d, 0x82, 0x41, 0x4a, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x2d, 0x76, 0x70,
	0x6c, 0x73, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2d, 0x74, 0x69,
	0x6d, 0x65, 0x72, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x72, 0x12, 0xa2, 0x01, 0x0a, 0x15, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18, 0xce, 0xaf, 0xc4, 0xc6,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x55, 0x82, 0x41, 0x52, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x32,
	0x76, 0x70, 0x6e, 0x2d, 0x76, 0x70, 0x6c, 0x73, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x77, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x70, 0x63,
	0x74, 0x52, 0x13, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74, 0x1a, 0xdc, 0x0e, 0x0a, 0x12, 0x4c, 0x33, 0x56, 0x70, 0x6e,
	0x49, 0x70, 0x76, 0x34, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0xb2, 0x01,
	0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0xe9,
	0xe6, 0xbb, 0xc0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66,
	0x69, 0x2e, 0x4c, 0x33, 0x56, 0x70, 0x6e, 0x49, 0x70, 0x76, 0x34, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x42, 0x43, 0x82, 0x41, 0x40, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x1a, 0x90, 0x0d, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0xb5, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xde, 0xa7,
	0xe6, 0xc2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69,
	0x2e, 0x4c, 0x33, 0x56, 0x70, 0x6e, 0x49, 0x70, 0x76, 0x34, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x4a, 0x82, 0x41, 0x47, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d,
	0x69, 0x70, 0x76, 0x34, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xb0, 0x01, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0xcb, 0xe0, 0xc0, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41,
	0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x4c, 0x33, 0x56, 0x70, 0x6e, 0x49, 0x70, 0x76, 0x34,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x49, 0x82, 0x41, 0x46,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c,
	0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x8a, 0x05,
	0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x92, 0x01, 0x0a, 0x0c, 0x6d, 0x61, 0x78,
	0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0xa6, 0xa3, 0xf4, 0x5e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x57, 0x82, 0x41, 0x54, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e,
	0x2d, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73,
	0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x9e, 0x01,
	0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f,
	0x77, 0x6e, 0x18, 0xaa, 0xeb, 0xeb, 0x5f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x5b, 0x82, 0x41, 0x58, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x2d, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0f, 0x70,
	0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x9a,
	0x01, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72,
	0x18, 0xfa, 0xed, 0xfe, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x58, 0x82, 0x41, 0x55, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76,
	0x34, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x0c, 0x72,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0xac, 0x01, 0x0a, 0x15,
	0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x5f, 0x70, 0x63, 0x74, 0x18, 0xc7, 0x85, 0xa4, 0x79, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x60, 0x82, 0x41, 0x5d, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76,
	0x34, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x2d, 0x70, 0x63, 0x74, 0x52, 0x13, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74, 0x1a, 0x88, 0x05, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x92, 0x01, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0xb5, 0x9e, 0x81, 0xa1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x56, 0x82, 0x41, 0x53, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70,
	0x76, 0x34, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x6d, 0x61, 0x78, 0x2d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x52, 0x0b, 0x6d, 0x61,
	0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x9e, 0x01, 0x0a, 0x10, 0x70, 0x72,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x85,
	0xf2, 0xa8, 0x90, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5a, 0x82,
	0x41, 0x57, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2d, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x99, 0x01, 0x0a, 0x0d, 0x72,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0xeb, 0xf6, 0xfa,
	0x48, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x57, 0x82, 0x41, 0x54, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0xac, 0x01, 0x0a, 0x15, 0x77, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74,
	0x18, 0xd2, 0x8e, 0x98, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x5f, 0x82, 0x41, 0x5c, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x77, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x70, 0x63, 0x74,
	0x52, 0x13, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x50, 0x63, 0x74, 0x1a, 0xc0, 0x0e, 0x0a, 0x10, 0x4c, 0x33, 0x56, 0x70, 0x6e, 0x49,
	0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0xae, 0x01, 0x0a, 0x0c, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0xda, 0xef, 0xa9, 0x90,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x41, 0x66,
	0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x4c,
	0x33, 0x56, 0x70, 0x6e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x41, 0x82, 0x41, 0x3e,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c,
	0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x0b,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0xfa, 0x0c, 0x0a, 0x0b,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0xb0, 0x01, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xcb, 0x89, 0x91, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x4b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70,
	0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73,
	0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x4c, 0x33, 0x56, 0x70, 0x6e, 0x49, 0x70,
	0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x48, 0x82, 0x41,
	0x45, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xad,
	0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x8c, 0xe4, 0xa3, 0xa2, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x42, 0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x4c, 0x33, 0x56, 0x70,
	0x6e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x47,
	0x82, 0x41, 0x44, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x84,
	0x05, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x91, 0x01, 0x0a, 0x0c, 0x6d, 0x61,
	0x78, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0xb5, 0xb9, 0xc6, 0xad, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x55, 0x82, 0x41, 0x52, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76,
	0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73,
	0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x9c, 0x01,
	0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f,
	0x77, 0x6e, 0x18, 0x85, 0xbd, 0x8b, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x59, 0x82, 0x41, 0x56, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2d, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0f, 0x70, 0x72, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x98, 0x01, 0x0a,
	0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0xeb,
	0xf7, 0xee, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x56, 0x82, 0x41, 0x53, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x2d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x72, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0xab, 0x01, 0x0a, 0x15, 0x77, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63,
	0x74, 0x18, 0xd2, 0xaf, 0xca, 0xe1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x5e, 0x82, 0x41, 0x5b, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x77, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x70, 0x63, 0x74,
	0x52, 0x13, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x50, 0x63, 0x74, 0x1a, 0x80, 0x05, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x90, 0x01, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73,
	0x18, 0x80, 0xec, 0xe2, 0xe6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x54, 0x82, 0x41, 0x51, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x65, 0x73, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x65, 0x73, 0x12, 0x9b, 0x01, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0xdc, 0xee, 0xbf, 0x1b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x58, 0x82, 0x41, 0x55, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69,
	0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70,
	0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x52,
	0x0f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e,
	0x12, 0x98, 0x01, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x72, 0x18, 0xac, 0xff, 0x85, 0xee, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x55, 0x82, 0x41, 0x52, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d,
	0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x0c, 0x72,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0xaa, 0x01, 0x0a, 0x15,
	0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x95, 0xb8, 0xc0, 0x9c, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x5d, 0x82, 0x41, 0x5a, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70,
	0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x77, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2d,
	0x70, 0x63, 0x74, 0x52, 0x13, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74, 0x1a, 0xdc, 0x0e, 0x0a, 0x12, 0x4c, 0x33, 0x56,
	0x70, 0x6e, 0x49, 0x70, 0x76, 0x36, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12,
	0xb1, 0x01, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0xc3, 0xa4, 0xfe, 0x4a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x2e, 0x4c, 0x33, 0x56, 0x70, 0x6e, 0x49, 0x70, 0x76, 0x36, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x42, 0x43, 0x82, 0x41, 0x40, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x2d,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x1a, 0x91, 0x0d, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0xb5, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xc4,
	0xa0, 0x94, 0xf0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66,
	0x69, 0x2e, 0x4c, 0x33, 0x56, 0x70, 0x6e, 0x49, 0x70, 0x76, 0x36, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x4a, 0x82, 0x41, 0x47, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e,
	0x2d, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xb0, 0x01, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xdd, 0xc2, 0xbe, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e,
	0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x4c, 0x33, 0x56, 0x70, 0x6e, 0x49, 0x70, 0x76,
	0x36, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x49, 0x82, 0x41,
	0x46, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x8d,
	0x05, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x93, 0x01, 0x0a, 0x0c, 0x6d, 0x61,
	0x78, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x88, 0x99, 0xce, 0xcb, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x57, 0x82, 0x41, 0x54, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76,
	0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x65, 0x73, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12,
	0x9f, 0x01, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x72,
	0x64, 0x6f, 0x77, 0x6e, 0x18, 0xf4, 0x97, 0xaa, 0xdf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x5b, 0x82, 0x41, 0x58, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76,
	0x36, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e,
	0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77,
	0x6e, 0x12, 0x9a, 0x01, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x72, 0x18, 0xa4, 0xa2, 0xa9, 0x52, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x58, 0x82, 0x41, 0x55, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d,
	0x69, 0x70, 0x76, 0x36, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x72,
	0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0xad,
	0x01, 0x0a, 0x15, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18, 0xcd, 0xf3, 0x92, 0xbb, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x60, 0x82, 0x41, 0x5d, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e,
	0x2d, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x2d, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x70, 0x63, 0x74, 0x52, 0x13, 0x77, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74, 0x1a, 0x86,
	0x05, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x91, 0x01, 0x0a, 0x0c, 0x6d, 0x61, 0x78,
	0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0xc3, 0xb6, 0xe4, 0x36, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x56, 0x82, 0x41, 0x53, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e,
	0x2d, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x52,
	0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x9e, 0x01, 0x0a,
	0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77,
	0x6e, 0x18, 0xab, 0xb1, 0x87, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x5a, 0x82, 0x41, 0x57, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2d, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0f, 0x70, 0x72,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x99, 0x01,
	0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18,
	0xe9, 0xe8, 0xe4, 0x52, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x57, 0x82, 0x41, 0x54, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x36,
	0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x0c, 0x72, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0xab, 0x01, 0x0a, 0x15, 0x77, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f,
	0x70, 0x63, 0x74, 0x18, 0x84, 0xae, 0xf0, 0x72, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x5f, 0x82, 0x41, 0x5c, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x2d,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x77, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x70,
	0x63, 0x74, 0x52, 0x13, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74, 0x1a, 0xbe, 0x0e, 0x0a, 0x10, 0x4c, 0x33, 0x56, 0x70,
	0x6e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0xae, 0x01, 0x0a,
	0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0xb8, 0x8d,
	0xc6, 0x9b, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69,
	0x2e, 0x4c, 0x33, 0x56, 0x70, 0x6e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x41, 0x82,
	0x41, 0x3e, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0xf8, 0x0c,
	0x0a, 0x0b, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0xb0, 0x01,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xbd, 0x8f, 0x9d, 0x6c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x4b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42,
	0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66,
	0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x4c, 0x33, 0x56, 0x70, 0x6e,
	0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x48,
	0x82, 0x41, 0x45, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0xad, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xb2, 0xb8, 0xdb, 0xec, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x4c, 0x33,
	0x56, 0x70, 0x6e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x47, 0x82, 0x41, 0x44, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x1a, 0x83, 0x05, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x90, 0x01, 0x0a, 0x0c,
	0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0xa3, 0xba, 0xca,
	0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x55, 0x82, 0x41, 0x52, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33,
	0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65,
	0x73, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x9c,
	0x01, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x64,
	0x6f, 0x77, 0x6e, 0x18, 0x8b, 0xe3, 0x9a, 0x5a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x59, 0x82, 0x41, 0x56, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x2d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2d, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0f, 0x70, 0x72,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x98, 0x01,
	0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18,
	0xc9, 0xc0, 0x91, 0x49, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x56, 0x82, 0x41, 0x53, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x36,
	0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x72, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0xab, 0x01, 0x0a, 0x15, 0x77, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70,
	0x63, 0x74, 0x18, 0xe4, 0xd5, 0x8f, 0xa6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x5e, 0x82, 0x41, 0x5b, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x2d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x77, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x70, 0x63,
	0x74, 0x52, 0x13, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74, 0x1a, 0xff, 0x04, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x90, 0x01, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65,
	0x73, 0x18, 0xb2, 0xb1, 0xf3, 0x88, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x54, 0x82, 0x41, 0x51, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x65, 0x73, 0x12, 0x9c, 0x01, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0xce, 0xaa, 0xd1, 0xa3, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x58, 0x82, 0x41, 0x55, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e,
	0x2d, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77,
	0x6e, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f,
	0x77, 0x6e, 0x12, 0x97, 0x01, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x72, 0x18, 0xde, 0x9f, 0xe7, 0x5b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x55, 0x82, 0x41, 0x52, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e,
	0x2d, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x0c,
	0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0xa9, 0x01, 0x0a,
	0x15, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18, 0xa3, 0xa4, 0xc5, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x5d, 0x82, 0x41, 0x5a, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70,
	0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x77, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2d,
	0x70, 0x63, 0x74, 0x52, 0x13, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74, 0x1a, 0xac, 0x12, 0x0a, 0x15, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0xa2, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xfe, 0xca,
	0x96, 0xf0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x40, 0x82,
	0x41, 0x3d, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x9d, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0xeb, 0x80, 0xbe, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42,
	0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xe8, 0x07, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0xae, 0x01, 0x0a, 0x19, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65,
	0x5f, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x18, 0xf9, 0x8c, 0xc8, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5a,
	0x82, 0x41, 0x57, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x2d, 0x69, 0x6e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x17, 0x61, 0x64, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x73, 0x65, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x12, 0x9a, 0x01, 0x0a, 0x12, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x64, 0x18, 0xed, 0xbe, 0xed, 0xea, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x53, 0x82, 0x41, 0x50, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x2d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x6c, 0x77, 0x61,
	0x79, 0x73, 0x2d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x2d, 0x6d, 0x65, 0x64, 0x52, 0x10,
	0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x64,
	0x12, 0x85, 0x01, 0x0a, 0x0b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x69, 0x67, 0x70,
	0x18, 0xca, 0xa2, 0xad, 0x50, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4c,
	0x82, 0x41, 0x49, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x61, 0x69, 0x67, 0x70, 0x52, 0x0a, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x41, 0x69, 0x67, 0x70, 0x12, 0xb0, 0x01, 0x0a, 0x1a, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0xe2, 0x88, 0xfd, 0x1a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5b, 0x82, 0x41, 0x58, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2d, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d,
	0x69, 0x64, 0x52, 0x17, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0xa2, 0x01, 0x0a, 0x15,
	0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0xe5, 0xd1, 0xaf, 0x8b, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x56, 0x82, 0x41, 0x53, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2d, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x2d, 0x61, 0x73,
	0x2d, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x12, 0x69, 0x67,
	0x6e, 0x6f, 0x72, 0x65, 0x41, 0x73, 0x50, 0x61, 0x74, 0x68, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x12, 0xaf, 0x01, 0x0a, 0x1a, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x67, 0x70, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18,
	0xf7, 0x86, 0xb6, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5b, 0x82,
	0x41, 0x58, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x2d, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2d,
	0x69, 0x67, 0x70, 0x2d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x16, 0x69, 0x67, 0x6e, 0x6f,
	0x72, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x49, 0x67, 0x70, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x1a, 0xe2, 0x07, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xad, 0x01, 0x0a,
	0x19, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x84, 0x9d, 0xa4, 0x63, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x59, 0x82, 0x41, 0x56, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x2d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x73, 0x65, 0x2d, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2d, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x52, 0x17, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x49, 0x6e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x99, 0x01, 0x0a,
	0x12, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x5f,
	0x6d, 0x65, 0x64, 0x18, 0xea, 0xe3, 0xa7, 0xf4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x52, 0x82, 0x41, 0x4f, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2d, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x2d, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x72, 0x65, 0x2d, 0x6d, 0x65, 0x64, 0x52, 0x10, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x64, 0x12, 0x84, 0x01, 0x0a, 0x0b, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x61, 0x69, 0x67, 0x70, 0x18, 0xd7, 0x87, 0x9a, 0x3f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4b, 0x82, 0x41, 0x48, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2d,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x61,
	0x69, 0x67, 0x70, 0x52, 0x0a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x69, 0x67, 0x70, 0x12,
	0xaf, 0x01, 0x0a, 0x1a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0xa5,
	0xbe, 0xc8, 0x5e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5a, 0x82, 0x41,
	0x57, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x2d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x2d, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x69, 0x64, 0x52, 0x17, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x12, 0xa1, 0x01, 0x0a, 0x15, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x73, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0xb4, 0x90, 0xce, 0x96,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x55, 0x82, 0x41, 0x52, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x2d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x67, 0x6e, 0x6f,
	0x72, 0x65, 0x2d, 0x61, 0x73, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x52, 0x12, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x41, 0x73, 0x50, 0x61, 0x74, 0x68, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0xaf, 0x01, 0x0a, 0x1a, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65,
	0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x67, 0x70, 0x5f, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x18, 0x8c, 0xa4, 0xf9, 0x88, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x5a, 0x82, 0x41, 0x57, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2d, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x2d, 0x6e, 0x65, 0x78, 0x74,
	0x2d, 0x68, 0x6f, 0x70, 0x2d, 0x69, 0x67, 0x70, 0x2d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52,
	0x16, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x49, 0x67,
	0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x1a, 0xa2, 0x0e, 0x0a, 0x0e, 0x53, 0x72, 0x74, 0x65,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x70, 0x76, 0x34, 0x12, 0xaa, 0x01, 0x0a, 0x0c, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0xfe, 0x9f, 0xbb, 0xc7,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x41, 0x66,
	0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x53,
	0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x73, 0x72, 0x74,
	0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0xe2, 0x0c, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0xac, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0xcf, 0xc1, 0xac, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x2e, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49,
	0x70, 0x76, 0x34, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xa9, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0xc0, 0xe7, 0xc2, 0xff, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x2e, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x70,
	0x76, 0x34, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x1a, 0xfd, 0x04, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x8e, 0x01,
	0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0xf1,
	0xf0, 0xa1, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x53, 0x82, 0x41,
	0x50, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x69, 0x70, 0x76, 0x34,
	0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65,
	0x73, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x9b,
	0x01, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x64,
	0x6f, 0x77, 0x6e, 0x18, 0xf9, 0xd1, 0xb3, 0x83, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x57, 0x82, 0x41, 0x54, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2d, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0f, 0x70, 0x72, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x97, 0x01, 0x0a,
	0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0xdf,
	0xda, 0x89, 0xd1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x54, 0x82, 0x41, 0x51, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0xa9, 0x01, 0x0a, 0x15, 0x77, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74,
	0x18, 0xde, 0x86, 0x93, 0xb2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x5c, 0x82, 0x41, 0x59, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x69,
	0x70, 0x76, 0x34, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x2d,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x70, 0x63, 0x74, 0x52, 0x13, 0x77,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50,
	0x63, 0x74, 0x1a, 0xf7, 0x04, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x8e, 0x01, 0x0a,
	0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0xcc, 0x8c,
	0xad, 0xe6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x52, 0x82, 0x41,
	0x4f, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x69, 0x70, 0x76, 0x34,
	0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73,
	0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x99, 0x01,
	0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f,
	0x77, 0x6e, 0x18, 0xb0, 0xe3, 0xd2, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x56, 0x82, 0x41, 0x53, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d,
	0x69, 0x70, 0x76, 0x34, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d,
	0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x96, 0x01, 0x0a, 0x0d, 0x72, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0xc0, 0x9c, 0x89, 0x88,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x53, 0x82, 0x41, 0x50, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x69,
	0x70, 0x76, 0x34, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2d, 0x74,
	0x69, 0x6d, 0x65, 0x72, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x72, 0x12, 0xa7, 0x01, 0x0a, 0x15, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x81, 0xf9, 0xfc,
	0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5b, 0x82, 0x41, 0x58, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x73, 0x72,
	0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x2d, 0x70, 0x63, 0x74, 0x52, 0x13, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74, 0x1a, 0xa3, 0x0e, 0x0a,
	0x0e, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x70, 0x76, 0x36, 0x12,
	0xaa, 0x01, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0xd8, 0xb7, 0xf3, 0xe1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x2e, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x70,
	0x76, 0x36, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x3f,
	0x82, 0x41, 0x3c, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x69, 0x70,
	0x76, 0x36, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52,
	0x0b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0xe3, 0x0c, 0x0a,
	0x0b, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0xad, 0x01, 0x0a,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xdd, 0xe6, 0x8f, 0x8e, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x49, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42,
	0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66,
	0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x53, 0x72, 0x74, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x46, 0x82, 0x41,
	0x43, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x69, 0x70, 0x76, 0x36,
	0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xa9, 0x01, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xd2, 0xaa, 0xca, 0xf4, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x48, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67,
	0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69,
	0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x73, 0x72,
	0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xfd, 0x04, 0x0a, 0x06, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x8f, 0x01, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x65, 0x73, 0x18, 0xc3, 0xa2, 0xa9, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x53, 0x82, 0x41, 0x50, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x61, 0x78, 0x2d,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x9b, 0x01, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0xab, 0xdd, 0xc1, 0xef, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x57, 0x82, 0x41, 0x54, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x73, 0x72, 0x74,
	0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f,
	0x77, 0x6e, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x72, 0x64,
	0x6f, 0x77, 0x6e, 0x12, 0x96, 0x01, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0xe9, 0xec, 0xc4, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x54, 0x82, 0x41, 0x51, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x73, 0x72, 0x74, 0x65,
	0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x0c,
	0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0xa9, 0x01, 0x0a,
	0x15, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x84, 0xb2, 0xc9, 0xea, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5c, 0x82, 0x41, 0x59, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x77, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2d,
	0x70, 0x63, 0x74, 0x52, 0x13, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74, 0x1a, 0xf7, 0x04, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x8e, 0x01, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x65, 0x73, 0x18, 0xd2, 0xc2, 0x90, 0xc5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x52, 0x82, 0x41, 0x4f, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x65, 0x73, 0x12, 0x9a, 0x01, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0xee, 0x87, 0xdb, 0xde, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x56, 0x82, 0x41, 0x53, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x73, 0x72, 0x74, 0x65, 0x2d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70,
	0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x52,
	0x0f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e,
	0x12, 0x95, 0x01, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x72, 0x18, 0xfe, 0x9e, 0xb1, 0x48, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x53, 0x82, 0x41, 0x50, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0xa7, 0x01, 0x0a, 0x15, 0x77, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70,
	0x63, 0x74, 0x18, 0xc3, 0x98, 0xae, 0x7c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x5b, 0x82, 0x41, 0x58, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d,
	0x69, 0x70, 0x76, 0x36, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x2d,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x70, 0x63, 0x74, 0x52, 0x13, 0x77,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50,
	0x63, 0x74, 0x1a, 0xda, 0x03, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x87, 0x01, 0x0a,
	0x0d, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xbc,
	0xf9, 0x9b, 0x49, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x67, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x41, 0x46, 0x49, 0x53, 0x41, 0x46, 0x49, 0x54, 0x59,
	0x50, 0x45, 0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x0b, 0x61, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x62, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0xa7, 0xf2, 0xd6, 0xb8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x2f, 0x82, 0x41, 0x2c, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x6c, 0x0a, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x99, 0xd2, 0xdd, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x33, 0x82, 0x41, 0x30, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x52, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x75, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0xf3, 0xbd, 0xce, 0x3e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73,
	0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x1a,
	0x98, 0x13, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x73, 0x12, 0x97, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x84, 0xa9, 0xfe, 0x4d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66,
	0x69, 0x2e, 0x55, 0x73, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x3b, 0x82, 0x41, 0x38, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x75, 0x73, 0x65,
	0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x90,
	0x01, 0x0a, 0x04, 0x65, 0x62, 0x67, 0x70, 0x18, 0xd6, 0xcd, 0xaa, 0xda, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42,
	0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66,
	0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x2e, 0x45, 0x62, 0x67, 0x70,
	0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x75, 0x73, 0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65,
	0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x65, 0x62, 0x67, 0x70, 0x52, 0x04, 0x65, 0x62, 0x67,
	0x70, 0x12, 0x8f, 0x01, 0x0a, 0x04, 0x69, 0x62, 0x67, 0x70, 0x18, 0xda, 0xc6, 0x8f, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x42, 0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x41, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x55, 0x73, 0x65,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x2e, 0x49, 0x62,
	0x67, 0x70, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x75, 0x73, 0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x65, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x69, 0x62, 0x67, 0x70, 0x52, 0x04, 0x69,
	0x62, 0x67, 0x70, 0x12, 0x94, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x9d, 0x97,
	0xd1, 0xb3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69,
	0x2e, 0x55, 0x73, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x3a, 0x82, 0x41, 0x37, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x75, 0x73, 0x65, 0x2d, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x7f, 0x0a, 0x06, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x75, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0xa6, 0xb9, 0xb1, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x43, 0x82,
	0x41, 0x40, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x75, 0x73, 0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x2d, 0x70, 0x61,
	0x74, 0x68, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x1a, 0xae, 0x07, 0x0a, 0x04,
	0x45, 0x62, 0x67, 0x70, 0x12, 0xa2, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0xb7, 0xf3, 0xa4, 0xf6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x73, 0x2e, 0x45, 0x62, 0x67, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x40, 0x82, 0x41, 0x3d, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x75, 0x73, 0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x2d,
	0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x65, 0x62, 0x67, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x9d, 0x01, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0xe8, 0xb3, 0xc6, 0x44, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66,
	0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x2e, 0x45, 0x62, 0x67, 0x70, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x75, 0x73, 0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x65, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x65, 0x62, 0x67, 0x70, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xb0, 0x02, 0x0a, 0x06, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x97, 0x01, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x61, 0x73, 0x18, 0xc3, 0xfd, 0xdf, 0xfa, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x52, 0x82, 0x41, 0x4f, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x75, 0x73, 0x65,
	0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f,
	0x65, 0x62, 0x67, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x2d, 0x61, 0x73, 0x52, 0x0f, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x41, 0x73, 0x12, 0x8b,
	0x01, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73,
	0x18, 0xeb, 0xe8, 0xae, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4e,
	0x82, 0x41, 0x4b, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x75, 0x73, 0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x2d, 0x70,
	0x61, 0x74, 0x68, 0x73, 0x2f, 0x65, 0x62, 0x67, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x52, 0x0c,
	0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x61, 0x74, 0x68, 0x73, 0x1a, 0xad, 0x02, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x95, 0x01, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x61, 0x73, 0x18, 0xb4, 0xcb, 0x89,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x51, 0x82, 0x41, 0x4e, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x75, 0x73,
	0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73,
	0x2f, 0x65, 0x62, 0x67, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x2d, 0x61, 0x73, 0x52, 0x0f, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x41, 0x73, 0x12, 0x8b,
	0x01, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73,
	0x18, 0x90, 0x91, 0xb8, 0xea, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x4d, 0x82, 0x41, 0x4a, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x75, 0x73, 0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x2d,
	0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x65, 0x62, 0x67, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x52, 0x0c,
	0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x61, 0x74, 0x68, 0x73, 0x1a, 0xfc, 0x04, 0x0a,
	0x04, 0x49, 0x62, 0x67, 0x70, 0x12, 0xa1, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0xcb, 0xd6, 0xca, 0x63, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x73, 0x2e, 0x49, 0x62, 0x67, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x40, 0x82, 0x41, 0x3d, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x75, 0x73, 0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x2d,
	0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x69, 0x62, 0x67, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x9d, 0x01, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x8c, 0x83, 0xec, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66,
	0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x2e, 0x49, 0x62, 0x67, 0x70, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x75, 0x73, 0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x65, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x69, 0x62, 0x67, 0x70, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x97, 0x01, 0x0a, 0x06, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x8c, 0x01, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x97, 0xaf, 0xae, 0xf5, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x75, 0x73, 0x65, 0x2d, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x65, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x69, 0x62, 0x67, 0x70,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x2d,
	0x70, 0x61, 0x74, 0x68, 0x73, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x61,
	0x74, 0x68, 0x73, 0x1a, 0x95, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x8b, 0x01,
	0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18,
	0x9c, 0xbd, 0x91, 0xb5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4d,
	0x82, 0x41, 0x4a, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x75, 0x73, 0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x2d, 0x70,
	0x61, 0x74, 0x68, 0x73, 0x2f, 0x69, 0x62, 0x67, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x52, 0x0c, 0x6d,
	0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x61, 0x74, 0x68, 0x73, 0x1a, 0x7d, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x74, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0xb3, 0xb6, 0x9e, 0x73, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x42, 0x82,
	0x41, 0x3f, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x75, 0x73, 0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x2d, 0x70, 0x61,
	0x74, 0x68, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x1a, 0xd0, 0x01, 0x0a, 0x0a, 0x41,
	0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x7e, 0x0a, 0x0d, 0x61, 0x66, 0x69,
	0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x67, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x41, 0x46, 0x49, 0x53, 0x41, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x42, 0x2f, 0x82, 0x41, 0x2c,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x0b, 0x61, 0x66,
	0x69, 0x53, 0x61, 0x66, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x08, 0x61, 0x66, 0x69,
	0x5f, 0x73, 0x61, 0x66, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x52, 0x07, 0x61, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x1a, 0x93, 0x05,
	0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x6c, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x81, 0xc3, 0xb8, 0xe1, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x42, 0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x23, 0x82, 0x41, 0x20, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x67, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xf6, 0xd5, 0xb2, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70,
	0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x22, 0x82, 0x41, 0x1f,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xd5, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x66, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0xbd, 0xd8, 0xb1, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2e, 0x82,
	0x41, 0x2b, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x63, 0x0a, 0x09, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x18, 0x83, 0xf7, 0xd7, 0xe9, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2d, 0x82, 0x41, 0x2a, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x2d, 0x61, 0x73, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x73, 0x1a, 0xd2,
	0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x65, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0xf4, 0xc3, 0x99, 0x73, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x2d, 0x82, 0x41, 0x2a, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x62, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x18, 0xf8, 0xb0, 0x9f,
	0xd2, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2c, 0x82, 0x41, 0x29,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2d, 0x61, 0x73, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x41, 0x73, 0x1a, 0xa3, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x40,
	0x0a, 0x02, 0x61, 0x73, 0x18, 0xc6, 0xa0, 0xb3, 0x7e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x18, 0x82, 0x41, 0x15, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x73, 0x52, 0x02, 0x61, 0x73,
	0x12, 0x57, 0x0a, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x91, 0xb9,
	0xc0, 0xe7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1f,
	0x82, 0x41, 0x1c, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x69, 0x64, 0x52,
	0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x1a, 0xff, 0x06, 0x0a, 0x14, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x7b, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xd1, 0xf6, 0xc1,
	0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x2c, 0x82, 0x41, 0x29, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x78, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xc6, 0xe8, 0xb4, 0xc2, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x42, 0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x2b, 0x82, 0x41, 0x28, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2d, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xb7, 0x02, 0x0a, 0x06, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x94, 0x01, 0x0a, 0x17, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0xc3, 0x83, 0xab, 0x76, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x44,
	0x82, 0x41, 0x41, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2d, 0x64, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2d, 0x64, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x15, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x95, 0x01, 0x0a, 0x17,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x64,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x99, 0xbc, 0x90, 0x85, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2d, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2d, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x15, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x1a, 0xb5, 0x02, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x94, 0x01,
	0x0a, 0x17, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0xc0, 0x8a, 0xa4, 0xe2, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x43, 0x82, 0x41, 0x40, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2d, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x15, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x94, 0x01, 0x0a, 0x17, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x86, 0xf3, 0xf6, 0xa5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x43, 0x82, 0x41, 0x40, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2d, 0x64, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2d, 0x64, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x15, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0x8d, 0x0b, 0x0a, 0x17,
	0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0xc5, 0x01, 0x0a, 0x17, 0x64, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x18, 0x96, 0x9d, 0xba, 0x9d, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x2e, 0x44, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x4b, 0x65, 0x79, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2d, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73,
	0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2d, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x15, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x1a,
	0xad, 0x07, 0x0a, 0x15, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0xaf, 0x01, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0xf7, 0x9d, 0x97, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x2e, 0x44, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x47, 0x82, 0x41, 0x44, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x2d, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2d, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x65, 0x73, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2d, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xac, 0x01, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xa8, 0x80, 0xee, 0x86, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x4a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70,
	0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x2e,
	0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x46, 0x82, 0x41, 0x43,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x64, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x2d, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2d, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x65, 0x73, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2d, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x9a, 0x02, 0x0a, 0x06, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x8b, 0x01, 0x0a, 0x0a, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0xc0, 0xe4, 0xe9, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x52, 0x82, 0x41, 0x4f, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2d, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x2f, 0x64,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2d, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2d,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x65,
	0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x09, 0x70, 0x65, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x81, 0x01, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0xb6,
	0xcd, 0xb0, 0xef, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f,
	0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2d, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x2d, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2d, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52,
	0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x1a, 0x95, 0x02, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x8a, 0x01, 0x0a, 0x0a, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x95, 0xef, 0xda, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x51, 0x82, 0x41, 0x4e, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2d, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x2d, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2d, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x09, 0x70, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x7f,
	0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0xa3, 0xaa, 0xb1, 0x5c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4d, 0x82, 0x41, 0x4a, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x2d, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x65, 0x73, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2d, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x1a,
	0xf9, 0x01, 0x0a, 0x18, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4b, 0x65, 0x79, 0x12, 0x5f, 0x0a, 0x06,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x47, 0x82, 0x41,
	0x44, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x64, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x2d, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2d, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2d, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x7c, 0x0a,
	0x17, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x2e, 0x44,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x52, 0x15, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x1a, 0x8d, 0x09, 0x0a, 0x0f,
	0x47, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x70, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xeb, 0x95, 0x9d, 0x51, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x42, 0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x47, 0x72, 0x61, 0x63, 0x65,
	0x66, 0x75, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x26, 0x82, 0x41, 0x23, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x2d, 0x72, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x6d, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xac, 0x81, 0xb4, 0xc3, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x47, 0x72, 0x61,
	0x63, 0x65, 0x66, 0x75, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x25, 0x82, 0x41, 0x22, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x2d, 0x72, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x1a, 0xcd, 0x03, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x61, 0x0a, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xed, 0xff, 0xe6, 0xb3, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2e, 0x82, 0x41, 0x2b, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x2d, 0x72,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x6b,
	0x0a, 0x0b, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0xe1, 0xa4,
	0xe0, 0x42, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x32, 0x82, 0x41, 0x2f,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x67, 0x72, 0x61, 0x63,
	0x65, 0x66, 0x75, 0x6c, 0x2d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x2d, 0x6f, 0x6e, 0x6c, 0x79, 0x52,
	0x0a, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x6f, 0x0a, 0x0c, 0x72,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xc3, 0xf0, 0xc6, 0x81,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x33, 0x82, 0x41, 0x30, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x67, 0x72, 0x61, 0x63, 0x65,
	0x66, 0x75, 0x6c, 0x2d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52,
	0x0b, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x81, 0x01, 0x0a,
	0x11, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0xce, 0xa3, 0xef, 0x78, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x38, 0x82, 0x41, 0x35, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x2d, 0x72,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x74,
	0x61, 0x6c, 0x65, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52,
	0x0f, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x54, 0x69, 0x6d, 0x65,
	0x1a, 0xc8, 0x03, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x60, 0x0a, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x9e, 0xb6, 0xac, 0xe5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x2d, 0x82, 0x41, 0x2a, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x2d, 0x72, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x6a, 0x0a, 0x0b,
	0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x8a, 0xa5, 0xb2, 0x4e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x31, 0x82, 0x41, 0x2e, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66,
	0x75, 0x6c, 0x2d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x2d, 0x6f, 0x6e, 0x6c, 0x79, 0x52, 0x0a, 0x68, 0x65,
	0x6c, 0x70, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x6d, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x8a, 0xa0, 0xc0, 0x59, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x32, 0x82, 0x41, 0x2f, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x2d,
	0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x6c,
	0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xcd, 0x91,
	0xbd, 0xfb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x37, 0x82, 0x41, 0x34, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x2d, 0x72, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x2d, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x6c,
	0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0xfd, 0x0f, 0x0a, 0x15,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x7e, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x9d, 0xdc, 0xc7, 0x85, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x2d,
	0x82, 0x41, 0x2a, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x2d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x79, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x92,
	0xfe, 0xb0, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x2c, 0x82, 0x41, 0x29,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x2d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x1a, 0xf7, 0x06, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x9c, 0x01, 0x0a, 0x19,
	0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0xc6, 0xb4, 0xdc, 0x91, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x47, 0x82, 0x41, 0x44, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2d, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73,
	0x65, 0x2d, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x52, 0x17, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x49, 0x6e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x87, 0x01, 0x0a, 0x12, 0x61,
	0x6c, 0x77, 0x61, 0x79, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x6d, 0x65,
	0x64, 0x18, 0xb0, 0xcf, 0x87, 0xb0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x2d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x2d, 0x6d,
	0x65, 0x64, 0x52, 0x10, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x65, 0x4d, 0x65, 0x64, 0x12, 0x72, 0x0a, 0x0b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61,
	0x69, 0x67, 0x70, 0x18, 0xb1, 0xa6, 0x8e, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x61, 0x69, 0x67, 0x70, 0x52, 0x0a, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x41, 0x69, 0x67, 0x70, 0x12, 0x9e, 0x01, 0x0a, 0x1a, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x9f, 0xc5, 0xe9, 0xd0, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x48, 0x82, 0x41, 0x45, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2d, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2d, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x69, 0x64,
	0x52, 0x17, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x8e, 0x01, 0x0a, 0x15, 0x69, 0x67,
	0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0xee, 0xee, 0xf5, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x43, 0x82, 0x41, 0x40, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x2d, 0x61, 0x73, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x2d,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x12, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x41, 0x73,
	0x50, 0x61, 0x74, 0x68, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x9d, 0x01, 0x0a, 0x1a, 0x69,
	0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x69,
	0x67, 0x70, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0xd2, 0xb2, 0x92, 0xf0, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x48, 0x82, 0x41, 0x45, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2d, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x2d, 0x6e,
	0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2d, 0x69, 0x67, 0x70, 0x2d, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x52, 0x16, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f,
	0x70, 0x49, 0x67, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x1a, 0xee, 0x06, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x9a, 0x01, 0x0a, 0x19, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x73, 0x65, 0x5f, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x18, 0xbd, 0xf4, 0xd1, 0x41, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61,
	0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x2d, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x17, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x73, 0x65, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x12, 0x85, 0x01, 0x0a, 0x12, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x64, 0x18, 0xb1, 0x88, 0xa5, 0x2f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2d, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x2d, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x65, 0x2d, 0x6d, 0x65, 0x64, 0x52, 0x10, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x64, 0x12, 0x71, 0x0a, 0x0b, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x61, 0x69, 0x67, 0x70, 0x18, 0xc6, 0xc2, 0xda, 0x7e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x38, 0x82, 0x41, 0x35, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2d, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x61, 0x69, 0x67, 0x70,
	0x52, 0x0a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x69, 0x67, 0x70, 0x12, 0x9d, 0x01, 0x0a,
	0x1a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0xf6, 0xca, 0x95, 0x87,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x47, 0x82, 0x41, 0x44, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x2d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x2d, 0x69, 0x64, 0x52, 0x17, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x8d, 0x01, 0x0a,
	0x15, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x99, 0x8d, 0xa4, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2d, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x2d, 0x61, 0x73, 0x2d, 0x70, 0x61, 0x74,
	0x68, 0x2d, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x12, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65,
	0x41, 0x73, 0x50, 0x61, 0x74, 0x68, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x9c, 0x01, 0x0a,
	0x1a, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70,
	0x5f, 0x69, 0x67, 0x70, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0xbb, 0xf9, 0xb7, 0xba,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x47, 0x82, 0x41, 0x44, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x2d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x2d,
	0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2d, 0x69, 0x67, 0x70, 0x2d, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x52, 0x16, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x48,
	0x6f, 0x70, 0x49, 0x67, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x1a, 0xe0, 0x02, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x02, 0x61, 0x73, 0x18, 0xa7, 0xf7, 0xcd, 0x86,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x17, 0x82, 0x41, 0x14, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x61, 0x73, 0x52, 0x02, 0x61, 0x73, 0x12, 0x55, 0x0a, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0xea, 0xc7, 0xce, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x1e, 0x82, 0x41, 0x1b, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x2d, 0x69, 0x64, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x59,
	0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0xdc, 0x85,
	0xde, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x20, 0x82, 0x41, 0x1d,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x52, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x63, 0x0a, 0x0e, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0xf0, 0xdb, 0xfd, 0xc6,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x23, 0x82, 0x41, 0x20, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x52,
	0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x1a, 0xd8,
	0x0f, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x73, 0x12, 0x73, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xb9, 0xe6,
	0x9e, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x55,
	0x73, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x28, 0x82, 0x41, 0x25, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x75, 0x73, 0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x65, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6c, 0x0a, 0x04, 0x65, 0x62, 0x67, 0x70,
	0x18, 0xdf, 0x8e, 0xd4, 0x90, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x73, 0x2e, 0x45, 0x62, 0x67, 0x70, 0x42, 0x26, 0x82, 0x41, 0x23, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x75, 0x73, 0x65, 0x2d, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x65, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x65, 0x62, 0x67, 0x70,
	0x52, 0x04, 0x65, 0x62, 0x67, 0x70, 0x12, 0x6c, 0x0a, 0x04, 0x69, 0x62, 0x67, 0x70, 0x18, 0xe3,
	0x95, 0x93, 0xb5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x55, 0x73, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x73, 0x2e, 0x49, 0x62, 0x67, 0x70, 0x42, 0x26, 0x82, 0x41, 0x23, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x75, 0x73, 0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x65, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x69, 0x62, 0x67, 0x70, 0x52, 0x04,
	0x69, 0x62, 0x67, 0x70, 0x12, 0x70, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x8e, 0xc1,
	0x8f, 0xec, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x55, 0x73, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x27, 0x82, 0x41, 0x24, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x75, 0x73, 0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x65, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x6d, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x63, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xff, 0x98, 0xf0, 0xc3,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x30, 0x82, 0x41, 0x2d, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x75, 0x73, 0x65, 0x2d, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x1a, 0x96, 0x06, 0x0a, 0x04, 0x45, 0x62, 0x67, 0x70, 0x12, 0x7e,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xa0, 0xd1, 0xb3, 0x8a, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x42, 0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x2e, 0x45, 0x62, 0x67, 0x70,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x2d, 0x82, 0x41, 0x2a, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x75, 0x73, 0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x65, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x65, 0x62, 0x67, 0x70, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x79,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x99, 0xc2, 0xe2, 0x1a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67,
	0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x2e, 0x45, 0x62, 0x67, 0x70, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x2c, 0x82, 0x41, 0x29, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x75, 0x73, 0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x65, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x65, 0x62, 0x67, 0x70, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x89, 0x02, 0x0a, 0x06, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x84, 0x01, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x61, 0x73, 0x18, 0xec, 0xb3, 0xf0, 0xaf, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x75, 0x73, 0x65, 0x2d, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x65, 0x62, 0x67,
	0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x2d, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x2d, 0x61, 0x73, 0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x41, 0x73, 0x12, 0x78, 0x0a, 0x0d, 0x6d,
	0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x88, 0xa9, 0x83,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3b, 0x82, 0x41, 0x38, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x75, 0x73, 0x65, 0x2d, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x65, 0x62,
	0x67, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75,
	0x6d, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d,
	0x50, 0x61, 0x74, 0x68, 0x73, 0x1a, 0x86, 0x02, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x83, 0x01, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x65, 0x5f, 0x61, 0x73, 0x18, 0xfd, 0xae, 0xd1, 0xfa, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x75, 0x73, 0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x65, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x65, 0x62, 0x67, 0x70, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x65, 0x2d, 0x61, 0x73, 0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x65, 0x41, 0x73, 0x12, 0x77, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0xed, 0x87, 0xaf, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x3a, 0x82, 0x41, 0x37, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x75, 0x73, 0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x65, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x65, 0x62, 0x67, 0x70, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73,
	0x52, 0x0c, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x61, 0x74, 0x68, 0x73, 0x1a, 0x8b,
	0x04, 0x0a, 0x04, 0x49, 0x62, 0x67, 0x70, 0x12, 0x7d, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0xe4, 0x92, 0xa6, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x73, 0x2e, 0x49, 0x62, 0x67, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x2d, 0x82, 0x41, 0x2a, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f,
	0x75, 0x73, 0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x2d, 0x70, 0x61, 0x74,
	0x68, 0x73, 0x2f, 0x69, 0x62, 0x67, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x7a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0xfd, 0xbf, 0xde, 0x8a, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x55, 0x73, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x73, 0x2e, 0x49, 0x62, 0x67, 0x70, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x2c, 0x82,
	0x41, 0x29, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x75, 0x73,
	0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73,
	0x2f, 0x69, 0x62, 0x67, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x1a, 0x83, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x79, 0x0a,
	0x0d, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x94,
	0x8e, 0xc2, 0x91, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3b, 0x82,
	0x41, 0x38, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x75, 0x73,
	0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73,
	0x2f, 0x69, 0x62, 0x67, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x61, 0x78,
	0x69, 0x6d, 0x75, 0x6d, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x69,
	0x6d, 0x75, 0x6d, 0x50, 0x61, 0x74, 0x68, 0x73, 0x1a, 0x81, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x78, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x73, 0x18, 0xd9, 0xdd, 0xf5, 0xc4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x3a, 0x82, 0x41, 0x37, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2f, 0x75, 0x73, 0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x2d,
	0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x69, 0x62, 0x67, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x52, 0x0c,
	0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x61, 0x74, 0x68, 0x73, 0x1a, 0x6b, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x62, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0xac, 0xe1, 0xe4, 0xe8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x2f, 0x82, 0x41, 0x2c, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f,
	0x75, 0x73, 0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x2d, 0x70, 0x61, 0x74,
	0x68, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x1a, 0xdb, 0xb2, 0x03, 0x0a, 0x09, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x12, 0x60, 0x0a, 0x08, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x18, 0x85, 0x99, 0xa2, 0x6f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x4b, 0x65, 0x79, 0x42, 0x1a, 0x82, 0x41, 0x17, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x52, 0x08, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x1a, 0xc2, 0xb0, 0x03, 0x0a, 0x08,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x12, 0x71, 0x0a, 0x09, 0x61, 0x66, 0x69, 0x5f,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x18, 0xe7, 0x94, 0xfa, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x42, 0x24, 0x82, 0x41, 0x21,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x52, 0x08, 0x61, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x12, 0x7e, 0x0a, 0x0c, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x9f, 0xd3, 0xe7, 0xb1,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x27, 0x82, 0x41, 0x24, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0b,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x87, 0x01, 0x0a, 0x0f,
	0x61, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0xc1, 0x88, 0xd9, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x73, 0x50,
	0x61, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x2a, 0x82, 0x41, 0x27, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x73, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0d, 0x61, 0x73, 0x50, 0x61, 0x74, 0x68, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x67, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0xca, 0xc1, 0xe7, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x21, 0x82, 0x41, 0x1e, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x82,
	0x01, 0x0a, 0x0d, 0x65, 0x62, 0x67, 0x70, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x68, 0x6f, 0x70,
	0x18, 0xd5, 0x8a, 0x83, 0xb9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x45,
	0x62, 0x67, 0x70, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x68, 0x6f, 0x70, 0x42, 0x28, 0x82, 0x41, 0x25,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x65, 0x62, 0x67, 0x70, 0x2d, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x68, 0x6f, 0x70, 0x52, 0x0c, 0x65, 0x62, 0x67, 0x70, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x68, 0x6f, 0x70, 0x12, 0x85, 0x01, 0x0a, 0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x68, 0x61,
	0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0xc8, 0xea, 0xca, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70,
	0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e,
	0x67, 0x42, 0x29, 0x82, 0x41, 0x26, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x2d, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x8d, 0x01, 0x0a, 0x10,
	0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0xbf, 0x85, 0xdc, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x47, 0x72,
	0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x2b, 0x82,
	0x41, 0x28, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66,
	0x75, 0x6c, 0x2d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x0f, 0x67, 0x72, 0x61, 0x63,
	0x65, 0x66, 0x75, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x89, 0x01, 0x0a, 0x0f,
	0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0xc6, 0xf3, 0xbc, 0x6d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x4c, 0x6f, 0x67,
	0x67, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x2a, 0x82, 0x41, 0x27,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2d,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0e, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x8a, 0x01, 0x0a, 0x0f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x5f, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0xec, 0xca, 0xca, 0xb7,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52,
	0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x2a, 0x82, 0x41, 0x27, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2d, 0x72, 0x65, 0x66, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x66, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x63, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xe7, 0xba,
	0x83, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x20, 0x82, 0x41, 0x1d, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x68, 0x0a, 0x06, 0x74, 0x69, 0x6d,
	0x65, 0x72, 0x73, 0x18, 0xf2, 0xda, 0xa0, 0xb6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x42, 0x21, 0x82, 0x41, 0x1e, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x52, 0x06, 0x74, 0x69, 0x6d,
	0x65, 0x72, 0x73, 0x12, 0x74, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0xe7, 0xb9, 0xd0, 0xcd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x24, 0x82, 0x41, 0x21, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x09,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x94, 0x01, 0x0a, 0x12, 0x75, 0x73,
	0x65, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73,
	0x18, 0xd9, 0xc5, 0xbb, 0xc3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x55,
	0x73, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x42,
	0x2d, 0x82, 0x41, 0x2a, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x75, 0x73, 0x65, 0x2d,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x52, 0x10,
	0x75, 0x73, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73,
	0x1a, 0xc2, 0x97, 0x02, 0x0a, 0x08, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x12, 0x84,
	0x01, 0x0a, 0x08, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x18, 0xd2, 0xbf, 0xf2, 0xfd,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66,
	0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x4b, 0x65, 0x79, 0x42, 0x2d, 0x82,
	0x41, 0x2a, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x52, 0x07, 0x61, 0x66,
	0x69, 0x53, 0x61, 0x66, 0x69, 0x1a, 0xc1, 0x94, 0x02, 0x0a, 0x07, 0x41, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x12, 0x95, 0x01, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73,
	0x18, 0x91, 0xad, 0x9d, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x66,
	0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x41,
	0x64, 0x64, 0x50, 0x61, 0x74, 0x68, 0x73, 0x42, 0x37, 0x82, 0x41, 0x34, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x61, 0x64, 0x64, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73,
	0x52, 0x08, 0x61, 0x64, 0x64, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0xa2, 0x01, 0x0a, 0x0c, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0xbe, 0x84, 0xd4, 0xec,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66,
	0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x3a, 0x82, 0x41, 0x37, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x2d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x8b, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x93, 0xab, 0xd3, 0x1b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73,
	0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x34, 0x82, 0x41, 0x31, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xb2, 0x01,
	0x0a, 0x10, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0xa6, 0xad, 0xe4, 0xb9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66,
	0x69, 0x2e, 0x47, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x2d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x52, 0x0f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x12, 0xbf, 0x01, 0x0a, 0x14, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x18, 0xe2, 0xa1, 0xc0, 0x17,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69,
	0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x42, 0x42, 0x82, 0x41,
	0x3f, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34,
	0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x52, 0x12, 0x69, 0x70, 0x76, 0x34, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x55, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x12, 0xa2, 0x01, 0x0a, 0x0c, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x18, 0xfc, 0x96, 0x8c, 0xcf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70,
	0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x42, 0x3a, 0x82, 0x41, 0x37, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x52, 0x0b, 0x69, 0x70,
	0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0xbf, 0x01, 0x0a, 0x14, 0x69, 0x70,
	0x76, 0x36, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x18, 0xfc, 0xb2, 0xe5, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e,
	0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69,
	0x2e, 0x49, 0x70, 0x76, 0x36, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x2d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x52, 0x12, 0x69, 0x70, 0x76, 0x36, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0xa1, 0x01, 0x0a, 0x0c,
	0x69, 0x70, 0x76, 0x36, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x18, 0x8a, 0xe7, 0xcc,
	0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66,
	0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x42, 0x3a, 0x82, 0x41, 0x37, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12,
	0x9a, 0x01, 0x0a, 0x0a, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x5f, 0x65, 0x76, 0x70, 0x6e, 0x18, 0xd9,
	0xcd, 0xa4, 0x88, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x4c, 0x32,
	0x56, 0x70, 0x6e, 0x45, 0x76, 0x70, 0x6e, 0x42, 0x38, 0x82, 0x41, 0x35, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x2d, 0x65, 0x76, 0x70,
	0x6e, 0x52, 0x09, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x45, 0x76, 0x70, 0x6e, 0x12, 0x9a, 0x01, 0x0a,
	0x0a, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x5f, 0x76, 0x70, 0x6c, 0x73, 0x18, 0xd7, 0x9e, 0xc6, 0xd5,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66,
	0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x4c, 0x32, 0x56, 0x70, 0x6e,
	0x56, 0x70, 0x6c, 0x73, 0x42, 0x38, 0x82, 0x41, 0x35, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x2d, 0x76, 0x70, 0x6c, 0x73, 0x52, 0x09,
	0x6c, 0x32, 0x76, 0x70, 0x6e, 0x56, 0x70, 0x6c, 0x73, 0x12, 0xbf, 0x01, 0x0a, 0x14, 0x6c, 0x33,
	0x76, 0x70, 0x6e, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x18, 0xc3, 0x89, 0xc6, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e,
	0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69,
	0x2e, 0x4c, 0x33, 0x56, 0x70, 0x6e, 0x49, 0x70, 0x76, 0x34, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x52, 0x12, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x49, 0x70,
	0x76, 0x34, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0xb8, 0x01, 0x0a, 0x12,
	0x6c, 0x33, 0x76, 0x70, 0x6e, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x18, 0xe6, 0xc7, 0xe5, 0xce, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66,
	0x69, 0x2e, 0x4c, 0x33, 0x56, 0x70, 0x6e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x52, 0x10, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x49, 0x70, 0x76, 0x34, 0x55,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0xbf, 0x01, 0x0a, 0x14, 0x6c, 0x33, 0x76, 0x70, 0x6e,
	0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x18,
	0xb9, 0xb1, 0xd7, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x4c, 0x33,
	0x56, 0x70, 0x6e, 0x49, 0x70, 0x76, 0x36, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x52, 0x12, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x49, 0x70, 0x76, 0x36, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0xb7, 0x01, 0x0a, 0x12, 0x6c, 0x33, 0x76,
	0x70, 0x6e, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x18,
	0xc8, 0xd8, 0x84, 0x49, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x4c, 0x33,
	0x56, 0x70, 0x6e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x42, 0x40,
	0x82, 0x41, 0x3d, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33,
	0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x52, 0x10, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x12, 0xb0, 0x01, 0x0a, 0x10, 0x73, 0x72, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x18, 0xe6, 0xa4, 0x9e, 0xe2, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x42, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42,
	0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41,
	0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x49, 0x70, 0x76, 0x34, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2d, 0x69, 0x70, 0x76, 0x34, 0x52, 0x0e, 0x73, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x49, 0x70, 0x76, 0x34, 0x12, 0xb0, 0x01, 0x0a, 0x10, 0x73, 0x72, 0x74, 0x65, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x18, 0xe4, 0xa4, 0x9e, 0xe2, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69,
	0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x49, 0x70, 0x76, 0x36, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x52, 0x0e, 0x73, 0x72, 0x74, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x49, 0x70, 0x76, 0x36, 0x12, 0x87, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0xf4, 0x88, 0xbe, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e,
	0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x33, 0x82, 0x41, 0x30, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0xb7, 0x01, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0xd0, 0xc1, 0xf9, 0x24, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e,
	0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x75, 0x73, 0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x65, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x52, 0x10, 0x75, 0x73, 0x65, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x1a, 0xfc, 0x0a, 0x0a,
	0x08, 0x41, 0x64, 0x64, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x9e, 0x01, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0xb6, 0xd2, 0xa8, 0x7f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x61, 0x74, 0x68, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x61, 0x64, 0x64, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x9a, 0x01, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0xe3, 0x9c, 0xaf, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x61, 0x74, 0x68, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x3d, 0x82, 0x41, 0x3a, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x61, 0x64, 0x64, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x98, 0x04, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0xa5, 0x01, 0x0a, 0x16, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x5f,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0xaa, 0x9f,
	0xcd, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x55, 0x82,
	0x41, 0x52, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x61, 0x64, 0x64,
	0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6c,
	0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x2d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x14, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x79, 0x0a, 0x07, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x18, 0xe4, 0xb6, 0xd5, 0xfe, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x61, 0x64, 0x64, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x07, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x12, 0x6f, 0x0a, 0x04, 0x73, 0x65, 0x6e, 0x64, 0x18, 0xbb, 0xf6,
	0x95, 0x76, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x43, 0x82, 0x41, 0x40,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x61, 0x64, 0x64, 0x2d, 0x70,
	0x61, 0x74, 0x68, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x65, 0x6e, 0x64,
	0x52, 0x04, 0x73, 0x65, 0x6e, 0x64, 0x12, 0x7a, 0x0a, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6d,
	0x61, 0x78, 0x18, 0xc6, 0xae, 0x8c, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x47, 0x82, 0x41, 0x44, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x61, 0x64, 0x64, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x6d, 0x61, 0x78, 0x52, 0x07, 0x73, 0x65, 0x6e, 0x64, 0x4d,
	0x61, 0x78, 0x1a, 0x96, 0x04, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xa5, 0x01, 0x0a,
	0x16, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0xdd, 0xad, 0xe4, 0xe6, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x54, 0x82, 0x41, 0x51, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x61, 0x64, 0x64, 0x2d, 0x70, 0x61, 0x74, 0x68,
	0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65,
	0x2d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x14,
	0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x78, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x18,
	0xcd, 0xbc, 0x98, 0xf7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x45,
	0x82, 0x41, 0x42, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x61, 0x64,
	0x64, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x12, 0x6f,
	0x0a, 0x04, 0x73, 0x65, 0x6e, 0x64, 0x18, 0xb0, 0xcb, 0xe3, 0xd0, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x61, 0x64, 0x64, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x65, 0x6e, 0x64, 0x52, 0x04, 0x73, 0x65, 0x6e, 0x64, 0x12,
	0x7a, 0x0a, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0xd5, 0xf5, 0xc0, 0xc7,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x46, 0x82, 0x41, 0x43, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x61, 0x64, 0x64, 0x2d, 0x70, 0x61,
	0x74, 0x68, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x6d,
	0x61, 0x78, 0x52, 0x07, 0x73, 0x65, 0x6e, 0x64, 0x4d, 0x61, 0x78, 0x1a, 0xcf, 0x0d, 0x0a, 0x0b,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0xa5, 0x01, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x8f, 0xa7, 0xb9, 0xf4, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x46, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67,
	0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66,
	0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0xa0, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x80, 0xb7,
	0xa7, 0x6e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x40, 0x82,
	0x41, 0x3d, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x61, 0x70, 0x70,
	0x6c, 0x79, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xbb, 0x05, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0xc5, 0x01, 0x0a, 0x15, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x65, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0xf3, 0xf7, 0xc0, 0xfb,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x42, 0x57, 0x82, 0x41, 0x54,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x79,
	0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2d, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x13, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0xc5, 0x01, 0x0a, 0x15, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x18, 0xe8, 0xf3, 0xff, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x57, 0x82, 0x41, 0x54, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2d, 0x69,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x13, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x8e, 0x01, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x18, 0xa7, 0xfa, 0xa6, 0x4e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x8f, 0x01, 0x0a, 0x0d, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x18, 0x8c, 0xf2, 0x88, 0x8f, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x2d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0c, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x1a, 0xb6, 0x05, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xc4,
	0x01, 0x0a, 0x15, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x90, 0x82, 0xfe, 0x99, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x42, 0x56, 0x82, 0x41, 0x53, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x2d, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x13, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0xc4, 0x01, 0x0a, 0x15, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18,
	0xfb, 0xde, 0xfa, 0xdd, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x56, 0x82, 0x41, 0x53, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2d, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x13, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x8e, 0x01, 0x0a,
	0x0d, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0xdc,
	0xa2, 0x95, 0x84, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x0c, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x8d, 0x01,
	0x0a, 0x0d, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18,
	0xe7, 0xfc, 0x8c, 0x48, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x0c, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x1a, 0x90, 0x02,
	0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x95, 0x01, 0x0a, 0x0d, 0x61, 0x66, 0x69,
	0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xaa, 0x93, 0x8f, 0xdc, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x67, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x41, 0x46, 0x49, 0x53, 0x41, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x42,
	0x42, 0x82, 0x41, 0x3f, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2d, 0x6e,
	0x61, 0x6d, 0x65, 0x52, 0x0b, 0x61, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x6e, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xa5, 0xc4, 0x85, 0x51,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3c, 0x82, 0x41, 0x39, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x1a, 0x92, 0x07, 0x0a, 0x0f, 0x47, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x52, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x12, 0xac, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0xa7, 0xf0, 0x80, 0x56, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x47, 0x72,
	0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x2d, 0x72, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0xa9, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x98, 0xe6,
	0x9d, 0xac, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x47, 0x72, 0x61,
	0x63, 0x65, 0x66, 0x75, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x2d, 0x72, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a,
	0x89, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x7f, 0x0a, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xb9, 0xad, 0x91, 0x7b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x4d, 0x82, 0x41, 0x4a, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x2d, 0x72, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x1a, 0x97, 0x03, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x0a, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x73, 0x65, 0x64, 0x18, 0x9a, 0xb2, 0xe1, 0xd9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x2d, 0x72, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x73, 0x65, 0x64, 0x52, 0x0a, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64,
	0x12, 0x7f, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xca, 0xcb, 0xea, 0xe8,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4c, 0x82, 0x41, 0x49, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66,
	0x75, 0x6c, 0x2d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x81, 0x01, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0xe6,
	0xb2, 0x9b, 0x39, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4d, 0x82, 0x41,
	0x4a, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x67, 0x72, 0x61, 0x63,
	0x65, 0x66, 0x75, 0x6c, 0x2d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x52, 0x08, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x1a, 0x84, 0x10, 0x0a, 0x12, 0x49, 0x70, 0x76, 0x34, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0xc9, 0x01, 0x0a,
	0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x97, 0xf4,
	0xf1, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x0b, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0xa1, 0x0e, 0x0a, 0x0b, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0xcd, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x88, 0xa6, 0x87, 0xce, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x59, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x55, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x56, 0x82, 0x41, 0x53, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x65, 0x64, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xc8, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0xa1, 0x93, 0xc3, 0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e,
	0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69,
	0x2e, 0x49, 0x70, 0x76, 0x34, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x55, 0x82, 0x41, 0x52, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65,
	0x64, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x1a, 0xbc, 0x05, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x9f,
	0x01, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18,
	0xc4, 0x8c, 0xfe, 0xbf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x63,
	0x82, 0x41, 0x60, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70,
	0x76, 0x34, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x65, 0x73, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73,
	0x12, 0xaa, 0x01, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61,
	0x72, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0xd8, 0xba, 0xb2, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x67, 0x82, 0x41, 0x64, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x2d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2d, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0f, 0x70, 0x72,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0xa7, 0x01,
	0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18,
	0xa8, 0xea, 0xda, 0xdb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x64, 0x82, 0x41, 0x61, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x2d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x72, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0xb8, 0x01, 0x0a, 0x15, 0x77, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63,
	0x74, 0x18, 0xa9, 0xcb, 0xe3, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x6c, 0x82, 0x41, 0x69, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69,
	0x70, 0x76, 0x34, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x2d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x2d,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x70, 0x63, 0x74, 0x52, 0x13, 0x77,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50,
	0x63, 0x74, 0x1a, 0xb7, 0x05, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x9e, 0x01, 0x0a,
	0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0xdf, 0x94,
	0xc1, 0xfe, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x62, 0x82, 0x41,
	0x5f, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34,
	0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73,
	0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0xa9, 0x01,
	0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f,
	0x77, 0x6e, 0x18, 0xcf, 0xce, 0xc6, 0x4f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x66, 0x82, 0x41, 0x63, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x69, 0x70, 0x76, 0x34, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x2d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d,
	0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0xa5, 0x01, 0x0a, 0x0d, 0x72, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0xed, 0xfa, 0x9d, 0x2f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x63,
	0x82, 0x41, 0x60, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70,
	0x76, 0x34, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2d, 0x74, 0x69,
	0x6d, 0x65, 0x72, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x72, 0x12, 0xb8, 0x01, 0x0a, 0x15, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18, 0xc0, 0xd9, 0xc6, 0xfe,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6b, 0x82, 0x41, 0x68, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x2d, 0x70, 0x63, 0x74, 0x52, 0x13, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74, 0x1a, 0xab, 0x14, 0x0a,
	0x0b, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0xa5, 0x01, 0x0a,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xd1, 0xd2, 0x82, 0xa8, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x46, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42,
	0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41,
	0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0xba, 0x01, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0xb9, 0xb9, 0xc2, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x47, 0x82, 0x41, 0x44,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0xa0, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xc6, 0x9c, 0xc4, 0x68,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69,
	0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x40, 0x82, 0x41, 0x3d,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x1a, 0xa6, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x9b, 0x01, 0x0a, 0x12, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0xae, 0xcd, 0xfa, 0xfc, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x54, 0x82, 0x41, 0x51, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x10, 0x73, 0x65, 0x6e,
	0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x1a, 0xc4, 0x0d,
	0x0a, 0x0b, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0xbd, 0x01,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x8e, 0xc1, 0xab, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x52, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42,
	0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41,
	0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xba, 0x01,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xbb, 0xa0, 0x94, 0xc4, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x51, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42,
	0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41,
	0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x4d, 0x82, 0x41, 0x4a, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x9d, 0x05, 0x0a, 0x06, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x97, 0x01, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0xd6, 0xc6, 0xc9, 0xfb, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5b, 0x82, 0x41, 0x58, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x65, 0x73, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12,
	0xa3, 0x01, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x72,
	0x64, 0x6f, 0x77, 0x6e, 0x18, 0x9a, 0xa6, 0xc5, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x5f, 0x82, 0x41, 0x5c, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x74, 0x65, 0x61, 0x72,
	0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61,
	0x72, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x9e, 0x01, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0xca, 0xf3, 0x8f, 0x3b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5c, 0x82, 0x41, 0x59, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0xb1, 0x01, 0x0a, 0x15, 0x77, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74,
	0x18, 0x97, 0xaf, 0xe6, 0xb9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x64, 0x82, 0x41, 0x61, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69,
	0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x2d, 0x70, 0x63, 0x74, 0x52, 0x13, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74, 0x1a, 0x97, 0x05, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x96, 0x01, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0xa5, 0xec, 0x9a, 0xda, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x5a, 0x82, 0x41, 0x57, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73,
	0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0xa2, 0x01,
	0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f,
	0x77, 0x6e, 0x18, 0xb5, 0xcb, 0xf5, 0xb7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x5e, 0x82, 0x41, 0x5b, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77,
	0x6e, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f,
	0x77, 0x6e, 0x12, 0x9d, 0x01, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x72, 0x18, 0xbb, 0x91, 0xcf, 0x76, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5b, 0x82, 0x41, 0x58, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2d, 0x74,
	0x69, 0x6d, 0x65, 0x72, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x72, 0x12, 0xaf, 0x01, 0x0a, 0x15, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18, 0xe2, 0xf6, 0xea,
	0x44, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x63, 0x82, 0x41, 0x60, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x70, 0x63, 0x74, 0x52,
	0x13, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x50, 0x63, 0x74, 0x1a, 0xa3, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x99,
	0x01, 0x0a, 0x12, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x8b, 0xd0, 0xe7, 0x7e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x53, 0x82, 0x41, 0x50, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x10, 0x73, 0x65, 0x6e, 0x64, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x1a, 0x83, 0x10, 0x0a, 0x12, 0x49,
	0x70, 0x76, 0x36, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x12, 0xc9, 0x01, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0xb9, 0x8d, 0xcd, 0x63, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e,
	0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69,
	0x2e, 0x49, 0x70, 0x76, 0x36, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42,
	0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69,
	0x70, 0x76, 0x36, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x2d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0xa0, 0x0e,
	0x0a, 0x0b, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0xcd, 0x01,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x8e, 0x9d, 0xfe, 0x81, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x59, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e,
	0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x56, 0x82,
	0x41, 0x53, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76,
	0x36, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xc9, 0x01,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xbb, 0xd4, 0x89, 0xc5, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x58, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42,
	0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41,
	0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x65, 0x64, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x55, 0x82, 0x41, 0x52,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xbc, 0x05, 0x0a, 0x06, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x9f, 0x01, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0xd6, 0xda, 0xf0, 0xba, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x63, 0x82, 0x41, 0x60, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64,
	0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x61, 0x78,
	0x2d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0xaa, 0x01, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x9a, 0xfa, 0xb6, 0x5a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x67, 0x82, 0x41, 0x64, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x65, 0x64, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f,
	0x77, 0x6e, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x72, 0x64,
	0x6f, 0x77, 0x6e, 0x12, 0xa6, 0x01, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0xca, 0xef, 0xb3, 0x63, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x64, 0x82, 0x41, 0x61, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x65, 0x64, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x0c,
	0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0xb9, 0x01, 0x0a,
	0x15, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x97, 0xab, 0x91, 0x8d, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6c, 0x82, 0x41, 0x69, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65,
	0x64, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x77, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2d,
	0x70, 0x63, 0x74, 0x52, 0x13, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74, 0x1a, 0xb5, 0x05, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x9d, 0x01, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x65, 0x73, 0x18, 0xa5, 0x88, 0xf0, 0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x62, 0x82, 0x41, 0x5f, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x2d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x65, 0x73, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x65, 0x73, 0x12, 0xa9, 0x01, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0xb5, 0xa7, 0xe6, 0x65, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x66, 0x82, 0x41, 0x63, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65,
	0x64, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x2d, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0f, 0x70,
	0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0xa5,
	0x01, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72,
	0x18, 0xbb, 0xa5, 0xf6, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x63, 0x82, 0x41, 0x60, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x2d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0xb7, 0x01, 0x0a, 0x15, 0x77, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74,
	0x18, 0xe2, 0x8a, 0xcf, 0x4d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6b,
	0x82, 0x41, 0x68, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70,
	0x76, 0x36, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x2d, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x70, 0x63, 0x74, 0x52, 0x13, 0x77, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74,
	0x1a, 0xa9, 0x14, 0x0a, 0x0b, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x12, 0xa4, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xdb, 0xd5, 0xb3, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69,
	0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x41, 0x82, 0x41,
	0x3e, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36,
	0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xba, 0x01, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0xef, 0xa0, 0xd7, 0x1a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x4b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42,
	0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41,
	0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x47,
	0x82, 0x41, 0x44, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70,
	0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0xa0, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xdc,
	0xd9, 0xbe, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76,
	0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x40,
	0x82, 0x41, 0x3d, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70,
	0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xa6, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x9b, 0x01, 0x0a, 0x12, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0xac, 0x86, 0xe5, 0x80, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x54, 0x82, 0x41, 0x51, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x65, 0x6e, 0x64,
	0x2d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x10,
	0x73, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x1a, 0xc3, 0x0d, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0xbe, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xd0, 0x9c, 0xae, 0xc1,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66,
	0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0xb9, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xc9, 0x88, 0xe1, 0x74,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69,
	0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x4d, 0x82, 0x41, 0x4a, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x9c, 0x05,
	0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x97, 0x01, 0x0a, 0x0c, 0x6d, 0x61, 0x78,
	0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0xdc, 0xc0, 0x8f, 0xa1, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5b, 0x82, 0x41, 0x58, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x65, 0x73, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x65, 0x73, 0x12, 0xa3, 0x01, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0xc0, 0xe3, 0xce, 0xcf, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5f, 0x82, 0x41, 0x5c, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x74,
	0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x9e, 0x01, 0x0a, 0x0d, 0x72, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0xb0, 0xc5, 0x8b, 0x78, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5c, 0x82,
	0x41, 0x59, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76,
	0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x72, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x0c, 0x72, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0xb0, 0x01, 0x0a, 0x15, 0x77, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f,
	0x70, 0x63, 0x74, 0x18, 0xf1, 0x8b, 0xae, 0x4c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x64, 0x82, 0x41, 0x61, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x2d, 0x70, 0x63, 0x74, 0x52, 0x13, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74, 0x1a, 0x97, 0x05, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x96, 0x01, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0xf7, 0xea, 0xd8, 0xbb, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5a, 0x82, 0x41, 0x57, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x65, 0x73, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12,
	0xa1, 0x01, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x72,
	0x64, 0x6f, 0x77, 0x6e, 0x18, 0xf7, 0xd4, 0x88, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x5e, 0x82, 0x41, 0x5b, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f,
	0x77, 0x6e, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x72, 0x64,
	0x6f, 0x77, 0x6e, 0x12, 0x9e, 0x01, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x95, 0xca, 0xf4, 0x9a, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5b, 0x82, 0x41, 0x58, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x2d, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x72, 0x12, 0xaf, 0x01, 0x0a, 0x15, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18, 0xa8,
	0x82, 0xfa, 0x62, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x63, 0x82, 0x41,
	0x60, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36,
	0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x77, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x70, 0x63,
	0x74, 0x52, 0x13, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74, 0x1a, 0xa3, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x99, 0x01, 0x0a, 0x12, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0xad, 0x9a, 0x92, 0x69, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x53, 0x82, 0x41, 0x50, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x10, 0x73, 0x65, 0x6e, 0x64,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x1a, 0xf4, 0x0e, 0x0a,
	0x09, 0x4c, 0x32, 0x56, 0x70, 0x6e, 0x45, 0x76, 0x70, 0x6e, 0x12, 0xb7, 0x01, 0x0a, 0x0c, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0xfe, 0xfa, 0x95, 0xd4,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66,
	0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x4c, 0x32, 0x56, 0x70, 0x6e,
	0x45, 0x76, 0x70, 0x6e, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x6c, 0x32, 0x76, 0x70, 0x6e, 0x2d, 0x65, 0x76, 0x70, 0x6e, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x1a, 0xac, 0x0d, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0xba, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0xcf, 0xfa, 0x84, 0x96, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x66,
	0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x4c,
	0x32, 0x56, 0x70, 0x6e, 0x45, 0x76, 0x70, 0x6e, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x4c, 0x82, 0x41, 0x49,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x32, 0x76, 0x70, 0x6e,
	0x2d, 0x65, 0x76, 0x70, 0x6e, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0xb5, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xc0, 0xea, 0x97, 0x43,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69,
	0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x4c, 0x32, 0x56, 0x70, 0x6e, 0x45,
	0x76, 0x70, 0x6e, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x4b, 0x82, 0x41, 0x48, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x2d, 0x65, 0x76, 0x70, 0x6e, 0x2f,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x94, 0x05, 0x0a, 0x06, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x95, 0x01, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0xf1, 0xbb, 0xa3, 0x9e, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x59, 0x82, 0x41, 0x56, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x2d, 0x65, 0x76, 0x70, 0x6e, 0x2f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x52,
	0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0xa0, 0x01, 0x0a,
	0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77,
	0x6e, 0x18, 0xf9, 0xcc, 0xb8, 0x4b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x5d, 0x82, 0x41, 0x5a, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c,
	0x32, 0x76, 0x70, 0x6e, 0x2d, 0x65, 0x76, 0x70, 0x6e, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0f,
	0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x12,
	0x9c, 0x01, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x72, 0x18, 0xdf, 0xeb, 0x88, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x5a, 0x82, 0x41, 0x57, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x2d, 0x65, 0x76, 0x70, 0x6e, 0x2f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x72,
	0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0xaf,
	0x01, 0x0a, 0x15, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18, 0xde, 0xb7, 0x94, 0xc6, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x62, 0x82, 0x41, 0x5f, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x2d, 0x65, 0x76, 0x70,
	0x6e, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x2d, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x70, 0x63, 0x74, 0x52, 0x13, 0x77, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74,
	0x1a, 0x90, 0x05, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x93, 0x01, 0x0a, 0x0c, 0x6d,
	0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0xcc, 0xf5, 0xfa, 0x5f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x58, 0x82, 0x41, 0x55, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x2d, 0x65,
	0x76, 0x70, 0x6e, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x65, 0x73, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73,
	0x12, 0xa0, 0x01, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61,
	0x72, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0xb0, 0xdc, 0xab, 0xbc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x5c, 0x82, 0x41, 0x59, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x2d, 0x65, 0x76, 0x70, 0x6e, 0x2f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f,
	0x77, 0x6e, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x72, 0x64,
	0x6f, 0x77, 0x6e, 0x12, 0x9c, 0x01, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0xc0, 0xe7, 0x8a, 0xf8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x59, 0x82, 0x41, 0x56, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x2d, 0x65,
	0x76, 0x70, 0x6e, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2d, 0x74,
	0x69, 0x6d, 0x65, 0x72, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x72, 0x12, 0xae, 0x01, 0x0a, 0x15, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x81, 0xa4, 0xdb,
	0x89, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x61, 0x82, 0x41, 0x5e,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x32, 0x76, 0x70, 0x6e,
	0x2d, 0x65, 0x76, 0x70, 0x6e, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x70, 0x63, 0x74, 0x52, 0x13,
	0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x50, 0x63, 0x74, 0x1a, 0xf1, 0x0e, 0x0a, 0x09, 0x4c, 0x32, 0x56, 0x70, 0x6e, 0x56, 0x70, 0x6c,
	0x73, 0x12, 0xb7, 0x01, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0xb4, 0xfb, 0x94, 0x88, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66,
	0x69, 0x2e, 0x4c, 0x32, 0x56, 0x70, 0x6e, 0x56, 0x70, 0x6c, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x2d, 0x76, 0x70, 0x6c,
	0x73, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x0b,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0xa9, 0x0d, 0x0a, 0x0b,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0xb9, 0x01, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xb9, 0x99, 0x8c, 0x6c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x50, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70,
	0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x2e, 0x4c, 0x32, 0x56, 0x70, 0x6e, 0x56, 0x70, 0x6c, 0x73, 0x2e, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x4c, 0x82, 0x41, 0x49, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x2d, 0x76, 0x70, 0x6c, 0x73, 0x2f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xb5, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x8e, 0xa2, 0xe4, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41,
	0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e,
	0x4c, 0x32, 0x56, 0x70, 0x6e, 0x56, 0x70, 0x6c, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x4b, 0x82, 0x41, 0x48,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x32, 0x76, 0x70, 0x6e,
	0x2d, 0x76, 0x70, 0x6c, 0x73, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a,
	0x93, 0x05, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x95, 0x01, 0x0a, 0x0c, 0x6d,
	0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0xe7, 0x89, 0xcb, 0xfd,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x59, 0x82, 0x41, 0x56, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x2d,
	0x76, 0x70, 0x6c, 0x73, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x65, 0x73, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x65, 0x73, 0x12, 0xa0, 0x01, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0xa7, 0x90, 0xaa, 0x59, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5d, 0x82, 0x41, 0x5a, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x2d, 0x76, 0x70, 0x6c, 0x73, 0x2f,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x74, 0x65, 0x61, 0x72,
	0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61,
	0x72, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x9c, 0x01, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0xa5, 0xf1, 0xa6, 0x61, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5a, 0x82, 0x41, 0x57, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x2d,
	0x76, 0x70, 0x6c, 0x73, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x2d, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x72, 0x12, 0xae, 0x01, 0x0a, 0x15, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18, 0xf8,
	0x86, 0xa4, 0x63, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x62, 0x82, 0x41,
	0x5f, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x32, 0x76, 0x70,
	0x6e, 0x2d, 0x76, 0x70, 0x6c, 0x73, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x77, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x70, 0x63, 0x74,
	0x52, 0x13, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x50, 0x63, 0x74, 0x1a, 0x8f, 0x05, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x93, 0x01, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73,
	0x18, 0xd6, 0x89, 0x86, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x58,
	0x82, 0x41, 0x55, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x32,
	0x76, 0x70, 0x6e, 0x2d, 0x76, 0x70, 0x6c, 0x73, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x61, 0x78, 0x2d,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0xa0, 0x01, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x9a, 0x99, 0xc4, 0xa2, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5c, 0x82, 0x41, 0x59, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x2d, 0x76,
	0x70, 0x6c, 0x73, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x74,
	0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x9b, 0x01, 0x0a, 0x0d, 0x72, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0xca, 0xec, 0xd6, 0x59, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x59, 0x82,
	0x41, 0x56, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x32, 0x76,
	0x70, 0x6e, 0x2d, 0x76, 0x70, 0x6c, 0x73, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0xae, 0x01, 0x0a, 0x15, 0x77, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74,
	0x18, 0x97, 0xc8, 0xd9, 0xb5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x61, 0x82, 0x41, 0x5e, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c,
	0x32, 0x76, 0x70, 0x6e, 0x2d, 0x76, 0x70, 0x6c, 0x73, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x77, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x70,
	0x63, 0x74, 0x52, 0x13, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74, 0x1a, 0x86, 0x10, 0x0a, 0x12, 0x4c, 0x33, 0x56, 0x70,
	0x6e, 0x49, 0x70, 0x76, 0x34, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0xca,
	0x01, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0xf0, 0xaf, 0xcf, 0xda, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x66,
	0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x4c,
	0x33, 0x56, 0x70, 0x6e, 0x49, 0x70, 0x76, 0x34, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x4f, 0x82,
	0x41, 0x4c, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76,
	0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x0b,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0xa2, 0x0e, 0x0a, 0x0b,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0xcd, 0x01, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x85, 0x94, 0x8c, 0xb4, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x59, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67,
	0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66,
	0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x4c, 0x33, 0x56, 0x70, 0x6e, 0x49, 0x70, 0x76, 0x34, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x56, 0x82, 0x41, 0x53,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e,
	0x2d, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xc8, 0x01, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xfa, 0xbb, 0xf6, 0x5a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x2e, 0x4c, 0x33, 0x56, 0x70, 0x6e, 0x49, 0x70, 0x76, 0x34, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x55, 0x82, 0x41, 0x52, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70,
	0x76, 0x34, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xbd, 0x05, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x9f, 0x01, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x65, 0x73, 0x18, 0xbb, 0xb5, 0x96, 0xe5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x63, 0x82, 0x41, 0x60, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x65, 0x73, 0x12, 0xab, 0x01, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0xd3, 0xbb, 0x95, 0xee, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x67, 0x82, 0x41, 0x64, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76,
	0x34, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e,
	0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77,
	0x6e, 0x12, 0xa6, 0x01, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x72, 0x18, 0xf1, 0xcd, 0x89, 0x55, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x64, 0x82, 0x41, 0x61, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x34,
	0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x72,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x0c, 0x72, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0xb9, 0x01, 0x0a, 0x15, 0x77,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x5f, 0x70, 0x63, 0x74, 0x18, 0xec, 0xbb, 0xd0, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x6c, 0x82, 0x41, 0x69, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x77, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x70, 0x63,
	0x74, 0x52, 0x13, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74, 0x1a, 0xb7, 0x05, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x9d, 0x01, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65,
	0x73, 0x18, 0x8a, 0x85, 0xa2, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x62, 0x82, 0x41, 0x5f, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c,
	0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x65, 0x73, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73,
	0x12, 0xaa, 0x01, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61,
	0x72, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0xf6, 0xdc, 0xb7, 0xe7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x66, 0x82, 0x41, 0x63, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2d, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0f, 0x70, 0x72,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0xa5, 0x01,
	0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18,
	0xa6, 0xa7, 0xf5, 0x7d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x63, 0x82, 0x41, 0x60, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0xb8, 0x01, 0x0a, 0x15, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18,
	0xeb, 0xb2, 0x98, 0xe3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6b,
	0x82, 0x41, 0x68, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33,
	0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x2d, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x70, 0x63, 0x74, 0x52, 0x13, 0x77, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74,
	0x1a, 0xe6, 0x0f, 0x0a, 0x10, 0x4c, 0x33, 0x56, 0x70, 0x6e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0xc5, 0x01, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0xfb, 0xee, 0xd7, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x50, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70,
	0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x2e, 0x4c, 0x33, 0x56, 0x70, 0x6e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x42, 0x4d, 0x82, 0x41, 0x4a, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0x89, 0x0e,
	0x0a, 0x0b, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0xc8, 0x01,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xac, 0xff, 0xf2, 0x4e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x57, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42,
	0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41,
	0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x4c, 0x33, 0x56, 0x70, 0x6e, 0x49, 0x70, 0x76, 0x34,
	0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x54, 0x82, 0x41, 0x51, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d,
	0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xc5, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0xa5, 0x89, 0xe5, 0xcc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66,
	0x69, 0x2e, 0x4c, 0x33, 0x56, 0x70, 0x6e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x53, 0x82, 0x41, 0x50, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x1a, 0xb3, 0x05, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x9d, 0x01, 0x0a, 0x0c,
	0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0xa0, 0xbb, 0xeb,
	0xe4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x61, 0x82, 0x41, 0x5e,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e,
	0x2d, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x52, 0x0b,
	0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0xa8, 0x01, 0x0a, 0x10,
	0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e,
	0x18, 0xfc, 0xa0, 0xd6, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x65,
	0x82, 0x41, 0x62, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33,
	0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x74, 0x65, 0x61,
	0x72, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x65,
	0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0xa4, 0x01, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0xcc, 0xcd, 0xd3, 0x7d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x62, 0x82, 0x41, 0x5f,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e,
	0x2d, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x52,
	0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0xb6, 0x01,
	0x0a, 0x15, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18, 0xb5, 0xe7, 0xb5, 0x25, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6a, 0x82, 0x41, 0x67, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x2d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x77, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x70, 0x63,
	0x74, 0x52, 0x13, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74, 0x1a, 0xb0, 0x05, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x9c, 0x01, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65,
	0x73, 0x18, 0xdb, 0x81, 0xca, 0xc1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x60, 0x82, 0x41, 0x5d, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x65, 0x73, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12,
	0xa7, 0x01, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x72,
	0x64, 0x6f, 0x77, 0x6e, 0x18, 0xf3, 0xfb, 0xe5, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x64, 0x82, 0x41, 0x61, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d,
	0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0xa4, 0x01, 0x0a, 0x0d, 0x72, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x91, 0xf2, 0xed, 0xad,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x61, 0x82, 0x41, 0x5e, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c,
	0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2d, 0x74, 0x69, 0x6d,
	0x65, 0x72, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72,
	0x12, 0xb6, 0x01, 0x0a, 0x15, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x8c, 0xbf, 0xc8, 0xd7, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x69, 0x82, 0x41, 0x66, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69,
	0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x77,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x2d, 0x70, 0x63, 0x74, 0x52, 0x13, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74, 0x1a, 0x87, 0x10, 0x0a, 0x12, 0x4c, 0x33,
	0x56, 0x70, 0x6e, 0x49, 0x70, 0x76, 0x36, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x12, 0xca, 0x01, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0xde, 0xcb, 0xdc, 0xdc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e,
	0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69,
	0x2e, 0x4c, 0x33, 0x56, 0x70, 0x6e, 0x49, 0x70, 0x76, 0x36, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42,
	0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c,
	0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0xa3, 0x0e,
	0x0a, 0x0b, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0xcd, 0x01,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xaf, 0xee, 0x8a, 0xea, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x59, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e,
	0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x4c, 0x33, 0x56, 0x70, 0x6e, 0x49, 0x70, 0x76,
	0x36, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x56, 0x82,
	0x41, 0x53, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76,
	0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xc9, 0x01,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xa0, 0xf9, 0xd0, 0xb9, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x58, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42,
	0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41,
	0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x4c, 0x33, 0x56, 0x70, 0x6e, 0x49, 0x70, 0x76, 0x36,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x55, 0x82, 0x41, 0x52,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e,
	0x2d, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xbd, 0x05, 0x0a, 0x06, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x9f, 0x01, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0xd1, 0xfc, 0xd2, 0xce, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x63, 0x82, 0x41, 0x60, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x61, 0x78,
	0x2d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0xab, 0x01, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0xd9, 0x83, 0x9e, 0xd8,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x67, 0x82, 0x41, 0x64, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d,
	0x69, 0x70, 0x76, 0x36, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x74, 0x65, 0x61, 0x72, 0x64,
	0x6f, 0x77, 0x6e, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x72,
	0x64, 0x6f, 0x77, 0x6e, 0x12, 0xa6, 0x01, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0xbf, 0xf6, 0xb5, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x64, 0x82, 0x41, 0x61, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69,
	0x70, 0x76, 0x36, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x52,
	0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0xb9, 0x01,
	0x0a, 0x15, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18, 0xbe, 0xcd, 0x91, 0xbd, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6c, 0x82, 0x41, 0x69, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x36,
	0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x77,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x2d, 0x70, 0x63, 0x74, 0x52, 0x13, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74, 0x1a, 0xb7, 0x05, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x9e, 0x01, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x65, 0x73, 0x18, 0xac, 0xca, 0xca, 0xb2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x62, 0x82, 0x41, 0x5f, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x65, 0x73, 0x12, 0xa9, 0x01, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x90, 0xc5, 0x84, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x66, 0x82, 0x41, 0x63, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76,
	0x36, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70,
	0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x52,
	0x0f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e,
	0x12, 0xa6, 0x01, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x72, 0x18, 0xa0, 0xb6, 0xe7, 0xde, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x63, 0x82, 0x41, 0x60, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x36,
	0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x0c, 0x72, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0xb7, 0x01, 0x0a, 0x15, 0x77, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f,
	0x70, 0x63, 0x74, 0x18, 0xe1, 0xec, 0xa9, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x6b, 0x82, 0x41, 0x68, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x70, 0x63, 0x74, 0x52, 0x13,
	0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x50, 0x63, 0x74, 0x1a, 0xe3, 0x0f, 0x0a, 0x10, 0x4c, 0x33, 0x56, 0x70, 0x6e, 0x49, 0x70, 0x76,
	0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0xc6, 0x01, 0x0a, 0x0c, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x85, 0xd6, 0x8e, 0xb8, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73,
	0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x4c, 0x33, 0x56, 0x70, 0x6e, 0x49, 0x70,
	0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x4d, 0x82, 0x41, 0x4a, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x2d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x1a, 0x85, 0x0e, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0xc8, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xca, 0x90, 0x9b,
	0x6d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66,
	0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x4c, 0x33, 0x56, 0x70, 0x6e,
	0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x54,
	0x82, 0x41, 0x51, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33,
	0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xc4, 0x01, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xe7, 0x8f, 0xbc, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x56, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70,
	0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x2e, 0x4c, 0x33, 0x56, 0x70, 0x6e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x53, 0x82, 0x41, 0x50, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76,
	0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x1a, 0xb2, 0x05, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x9c,
	0x01, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18,
	0x9a, 0xe5, 0x9b, 0x5f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x61, 0x82,
	0x41, 0x5e, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76,
	0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73,
	0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0xa8, 0x01,
	0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f,
	0x77, 0x6e, 0x18, 0x86, 0xb5, 0xdd, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x65, 0x82, 0x41, 0x62, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x74,
	0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0xa4, 0x01, 0x0a, 0x0d, 0x72, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x96, 0xc0, 0x9b, 0x22, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x62, 0x82,
	0x41, 0x5f, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76,
	0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65,
	0x72, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12,
	0xb6, 0x01, 0x0a, 0x15, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x9b, 0xf7, 0xc6, 0x35, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6a, 0x82, 0x41, 0x67, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76,
	0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x77, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2d,
	0x70, 0x63, 0x74, 0x52, 0x13, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74, 0x1a, 0xae, 0x05, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x9c, 0x01, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x65, 0x73, 0x18, 0xb9, 0xd8, 0xab, 0x9c, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x60, 0x82, 0x41, 0x5d, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x65, 0x73, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65,
	0x73, 0x12, 0xa7, 0x01, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65,
	0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0xf1, 0xb4, 0x8f, 0x78, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x64, 0x82, 0x41, 0x61, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x2d, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0xa3, 0x01, 0x0a, 0x0d,
	0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0xd7, 0x8c,
	0xa5, 0x76, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x61, 0x82, 0x41, 0x5e, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2d, 0x74, 0x69,
	0x6d, 0x65, 0x72, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x72, 0x12, 0xb5, 0x01, 0x0a, 0x15, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18, 0xd6, 0x80, 0xa3, 0x50,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x69, 0x82, 0x41, 0x66, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69,
	0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x77,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x2d, 0x70, 0x63, 0x74, 0x52, 0x13, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74, 0x1a, 0xc9, 0x0f, 0x0a, 0x0e, 0x53, 0x72,
	0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x70, 0x76, 0x34, 0x12, 0xc1, 0x01, 0x0a,
	0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0xfb, 0xa5,
	0xab, 0x5f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x53, 0x72, 0x74, 0x65,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x4b, 0x82, 0x41, 0x48, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x1a, 0xf2, 0x0d, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0xc4, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xac, 0xec, 0xc7, 0x79,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69,
	0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x52, 0x82, 0x41, 0x4f,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x73, 0x72, 0x74, 0x65, 0x2d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xc0, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0xa5, 0x88, 0xad, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41,
	0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e,
	0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x51, 0x82, 0x41, 0x4e, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x69, 0x70, 0x76, 0x34,
	0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xae, 0x05, 0x0a, 0x06, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x9b, 0x01, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0xa0, 0xa2, 0xb7, 0xdd, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5f, 0x82, 0x41, 0x5c, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2d, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x65, 0x73, 0x12, 0xa7, 0x01, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0xfc, 0xf7, 0x90, 0xad, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x63, 0x82, 0x41, 0x60, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2d, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0f, 0x70, 0x72,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0xa3, 0x01,
	0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18,
	0xcc, 0xf2, 0xa8, 0xd4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x60, 0x82, 0x41, 0x5d, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x69,
	0x70, 0x76, 0x34, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2d,
	0x74, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x72, 0x12, 0xb5, 0x01, 0x0a, 0x15, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18, 0xb5, 0xac,
	0xaa, 0xb2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x68, 0x82, 0x41,
	0x65, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x73, 0x72, 0x74, 0x65,
	0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x2d, 0x70, 0x63, 0x74, 0x52, 0x13, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74, 0x1a, 0xa7, 0x05, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x9a, 0x01, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0xdb, 0xde, 0xe7, 0x9a, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5e, 0x82, 0x41, 0x5b, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2d, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x65, 0x73, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x65, 0x73, 0x12, 0xa5, 0x01, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0xf3, 0xa8, 0xa5, 0x26, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x62, 0x82, 0x41, 0x5f, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2d, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2d, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0xa2, 0x01, 0x0a, 0x0d, 0x72,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x91, 0xd9, 0xb9,
	0xa6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x5f, 0x82, 0x41, 0x5c, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x69, 0x70, 0x76, 0x34,
	0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65,
	0x72, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12,
	0xb3, 0x01, 0x0a, 0x15, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x8c, 0x86, 0x80, 0x42, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x67, 0x82, 0x41, 0x64, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x77, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x70, 0x63, 0x74,
	0x52, 0x13, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x50, 0x63, 0x74, 0x1a, 0xca, 0x0f, 0x0a, 0x0e, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x49, 0x70, 0x76, 0x36, 0x12, 0xc2, 0x01, 0x0a, 0x0c, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0xf1, 0xb0, 0xe6, 0xc7, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73,
	0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x42, 0x4b, 0x82, 0x41, 0x48, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x69,
	0x70, 0x76, 0x36, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0xf2, 0x0d,
	0x0a, 0x0b, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0xc5, 0x01,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x96, 0xb1, 0x9a, 0xe1, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x55, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e,
	0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x52, 0x82, 0x41, 0x4f, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xc1, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0xc3, 0xc6, 0xa7, 0xe4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x66,
	0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x53,
	0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42,
	0x51, 0x82, 0x41, 0x4e, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x73,
	0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x2f,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xad, 0x05, 0x0a, 0x06, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x9a, 0x01, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0xee, 0xc0, 0xd6, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x5f, 0x82, 0x41, 0x5c, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x69,
	0x70, 0x76, 0x36, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x65, 0x73, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65,
	0x73, 0x12, 0xa7, 0x01, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65,
	0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0xa2, 0x9c, 0x93, 0xc4, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x63, 0x82, 0x41, 0x60, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2d, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x2d, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0xa3, 0x01, 0x0a, 0x0d,
	0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0xf2, 0xb6,
	0xba, 0x86, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x60, 0x82, 0x41, 0x5d, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x69, 0x70, 0x76,
	0x36, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2d, 0x74, 0x69,
	0x6d, 0x65, 0x72, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x72, 0x12, 0xb5, 0x01, 0x0a, 0x15, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18, 0xff, 0xc4, 0xcd, 0xf4,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x68, 0x82, 0x41, 0x65, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x77,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x2d, 0x70, 0x63, 0x74, 0x52, 0x13, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74, 0x1a, 0xa6, 0x05, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x9a, 0x01, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x65, 0x73, 0x18, 0xfd, 0x8b, 0xfe, 0xcf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x5e, 0x82, 0x41, 0x5b, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x69,
	0x70, 0x76, 0x36, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x65, 0x73, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73,
	0x12, 0xa5, 0x01, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61,
	0x72, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0xbd, 0x95, 0x9e, 0x6d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x62, 0x82, 0x41, 0x5f, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x69,
	0x70, 0x76, 0x36, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x74,
	0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0xa1, 0x01, 0x0a, 0x0d, 0x72, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0xc3, 0xaa, 0xdc, 0x77, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5f, 0x82,
	0x41, 0x5c, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x73, 0x72, 0x74,
	0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x0c,
	0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0xb3, 0x01, 0x0a,
	0x15, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18, 0xea, 0xde, 0x8d, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x67, 0x82, 0x41, 0x64, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d,
	0x69, 0x70, 0x76, 0x36, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x2d,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x70, 0x63, 0x74, 0x52, 0x13, 0x77,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50,
	0x63, 0x74, 0x1a, 0xac, 0x08, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x6a, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0xe9, 0x8b, 0xb4, 0x6d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x3a, 0x82, 0x41, 0x37, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x93, 0x01, 0x0a, 0x0d, 0x61, 0x66, 0x69,
	0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x81, 0xd5, 0x95, 0x76, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x67, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x41, 0x46, 0x49, 0x53, 0x41, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x42, 0x41,
	0x82, 0x41, 0x3e, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2d, 0x6e, 0x61, 0x6d,
	0x65, 0x52, 0x0b, 0x61, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x6e,
	0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x96, 0x80, 0xa7, 0xfb, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3b, 0x82, 0x41, 0x38, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x9f,
	0x01, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0xfb, 0xc2, 0xcf, 0x7f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69,
	0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x42, 0x3c, 0x82, 0x41, 0x39, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x52, 0x08, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73,
	0x1a, 0x8e, 0x04, 0x0a, 0x08, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x7c, 0x0a,
	0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x80, 0xf6, 0xb9, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64,
	0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x79, 0x0a, 0x08, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0xdb, 0x92, 0xc3, 0x4b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x65, 0x73, 0x2f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x52, 0x08, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x99, 0x01, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x9e,
	0xe8, 0xdf, 0xeb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x50, 0x82,
	0x41, 0x4d, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x2f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x2d, 0x70, 0x72, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x50, 0x72, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x6d, 0x0a, 0x04, 0x73, 0x65, 0x6e, 0x74, 0x18, 0xc8, 0xbb, 0x8e, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x2f, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x73, 0x65, 0x6e,
	0x74, 0x1a, 0x96, 0x0c, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0xb0, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0xe5, 0x8e, 0xdd, 0xbb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e,
	0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69,
	0x2e, 0x55, 0x73, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x47, 0x82, 0x41, 0x44, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x75, 0x73, 0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x65, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xa7, 0x01, 0x0a, 0x04, 0x65, 0x62,
	0x67, 0x70, 0x18, 0x9b, 0xcc, 0xcd, 0x4c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e,
	0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69,
	0x2e, 0x55, 0x73, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x73, 0x2e, 0x45, 0x62, 0x67, 0x70, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x75, 0x73, 0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x65, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x65, 0x62, 0x67, 0x70, 0x52, 0x04, 0x65,
	0x62, 0x67, 0x70, 0x12, 0xab, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xda, 0xd3,
	0xf9, 0x72, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x75, 0x73, 0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x2d, 0x70,
	0x61, 0x74, 0x68, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x1a, 0x8c, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x81, 0x01, 0x0a,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x8b, 0xd8, 0xfb, 0x3a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x75, 0x73, 0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x65, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x1a, 0xda, 0x05, 0x0a, 0x04, 0x45, 0x62, 0x67, 0x70, 0x12, 0xb9, 0x01, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0xcc, 0xcb, 0xef, 0x7a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x73, 0x2e, 0x45, 0x62, 0x67, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x4c, 0x82, 0x41, 0x49, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x75,
	0x73, 0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x2d, 0x70, 0x61, 0x74, 0x68,
	0x73, 0x2f, 0x65, 0x62, 0x67, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xb5, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0xc5, 0x96, 0xa9, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x55, 0x73,
	0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x2e, 0x45,
	0x62, 0x67, 0x70, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x4b, 0x82, 0x41, 0x48, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x75, 0x73, 0x65, 0x2d, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x65, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x65, 0x62, 0x67, 0x70,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xae, 0x01,
	0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xa3, 0x01, 0x0a, 0x11, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x61, 0x73, 0x18, 0xb0,
	0x9a, 0xb6, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5e, 0x82,
	0x41, 0x5b, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x75, 0x73, 0x65,
	0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f,
	0x65, 0x62, 0x67, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x2d, 0x61, 0x73, 0x52, 0x0f, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x41, 0x73, 0x1a, 0xac,
	0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xa2, 0x01, 0x0a, 0x11, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x61, 0x73, 0x18, 0xb1,
	0xb0, 0x82, 0xf4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5d, 0x82,
	0x41, 0x5a, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x75, 0x73, 0x65,
	0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f,
	0x65, 0x62, 0x67, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x2d, 0x61, 0x73, 0x52, 0x0f, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x41, 0x73, 0x1a, 0x8a, 0x01,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0xb8, 0xc3, 0xd0, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x75, 0x73, 0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x2d, 0x70, 0x61,
	0x74, 0x68, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x1a, 0xe9, 0x01, 0x0a, 0x0a, 0x41,
	0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x8a, 0x01, 0x0a, 0x0d, 0x61, 0x66,
	0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x67, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x41, 0x46, 0x49, 0x53, 0x41, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x42, 0x3b, 0x82, 0x41,
	0x38, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x0b, 0x61, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x08, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61,
	0x66, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x52, 0x07, 0x61,
	0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x1a, 0xea, 0x0b, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x81, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0xe0, 0xd4, 0x90, 0x93, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x2e, 0x82, 0x41, 0x2b, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x7d, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0xd9, 0x83, 0xa5, 0xc4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x2d, 0x82, 0x41, 0x2a, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xee, 0x04, 0x0a, 0x06, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0xb2, 0x01, 0x0a, 0x15, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0xf0,
	0x86, 0xde, 0xbd, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x42, 0x44,
	0x82, 0x41, 0x41, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x79,
	0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2d, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x13, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0xb2, 0x01, 0x0a, 0x15, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x18, 0xdb, 0xe1, 0xd1, 0x99, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2d, 0x69, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x13, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x7c,
	0x0a, 0x0d, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18,
	0xbc, 0xa1, 0xdd, 0xd7, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x3c, 0x82, 0x41, 0x39, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x70, 0x70,
	0x6c, 0x79, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0c,
	0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x7c, 0x0a, 0x0d,
	0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0xc7, 0xb5,
	0xaf, 0xb3, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3c,
	0x82, 0x41, 0x39, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x79,
	0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0c, 0x69, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x1a, 0xe6, 0x04, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0xb0, 0x01, 0x0a, 0x15, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x8d,
	0xea, 0x8b, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x42, 0x43, 0x82,
	0x41, 0x40, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x2d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x2d, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x13, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0xb1, 0x01, 0x0a, 0x15, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x18, 0x92, 0xb0, 0x9a, 0xdc, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x43, 0x82, 0x41, 0x40, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2d, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x2d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x13, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x7a, 0x0a, 0x0d, 0x65,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0xe5, 0xf0, 0x8c,
	0x6e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3b, 0x82, 0x41,
	0x38, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x2d, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x7a, 0x0a, 0x0d, 0x69, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0xda, 0xcb, 0xe3, 0x1e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3b, 0x82, 0x41, 0x38, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0c, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x1a, 0xde, 0x08, 0x0a, 0x0d, 0x41, 0x73, 0x50, 0x61, 0x74, 0x68, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x86, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0xc6, 0x88, 0xdb, 0xa5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41,
	0x73, 0x50, 0x61, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x31, 0x82, 0x41, 0x2e, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x61, 0x73, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x82,
	0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xb3, 0xa6, 0xc6, 0xa3, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x73, 0x50, 0x61, 0x74, 0x68, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x30, 0x82, 0x41, 0x2d, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x73, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x1a, 0x9f, 0x03, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x79,
	0x0a, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x73, 0x18, 0xf4,
	0x9a, 0xaa, 0x92, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3e, 0x82,
	0x41, 0x3b, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x73, 0x2d, 0x70, 0x61, 0x74,
	0x68, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x2d, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x73, 0x52, 0x0a, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x4f, 0x77, 0x6e, 0x41, 0x73, 0x12, 0x95, 0x01, 0x0a, 0x16, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x8c, 0xf1, 0xb2, 0x78, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x48, 0x82, 0x41, 0x45, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61,
	0x73, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x70, 0x65,
	0x65, 0x72, 0x2d, 0x61, 0x73, 0x2d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x13, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x65, 0x65, 0x72, 0x41, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x81, 0x01, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x65,
	0x65, 0x72, 0x5f, 0x61, 0x73, 0x18, 0xf9, 0xae, 0xe1, 0x6f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x61, 0x73, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2d, 0x70,
	0x65, 0x65, 0x72, 0x2d, 0x61, 0x73, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x50,
	0x65, 0x65, 0x72, 0x41, 0x73, 0x1a, 0x9c, 0x03, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x78, 0x0a, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x73, 0x18,
	0x8b, 0x85, 0xdb, 0xd0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3d,
	0x82, 0x41, 0x3a, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x73, 0x2d, 0x70, 0x61,
	0x74, 0x68, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x2d, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x73, 0x52, 0x0a, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x4f, 0x77, 0x6e, 0x41, 0x73, 0x12, 0x95, 0x01, 0x0a, 0x16, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x8f, 0xa3, 0xfe, 0x85, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x47, 0x82, 0x41, 0x44, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x61, 0x73, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x70, 0x65,
	0x65, 0x72, 0x2d, 0x61, 0x73, 0x2d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x13, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x65, 0x65, 0x72, 0x41, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x80, 0x01, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x65,
	0x65, 0x72, 0x5f, 0x61, 0x73, 0x18, 0xd0, 0xde, 0xfd, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x61, 0x73, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2d, 0x70, 0x65,
	0x65, 0x72, 0x2d, 0x61, 0x73, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x50, 0x65,
	0x65, 0x72, 0x41, 0x73, 0x1a, 0xe7, 0x09, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x6e, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0xc3, 0x9c, 0xea, 0x7b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x2f, 0x82, 0x41, 0x2c, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x69, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xcd,
	0xb0, 0xf0, 0x56, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2d,
	0x82, 0x41, 0x2a, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xa8, 0x9e, 0xda, 0xb0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x29, 0x82, 0x41, 0x26, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x5e, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x5f, 0x61, 0x73, 0x18, 0x97, 0xe3, 0xde, 0xe6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x2a, 0x82, 0x41, 0x27, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x73, 0x52,
	0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x73, 0x12, 0x77, 0x0a, 0x10, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xf0, 0x87, 0x96,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x32, 0x82, 0x41,
	0x2f, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x0f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x5b, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x18, 0x92, 0xd6, 0xc7,
	0xb1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x29, 0x82, 0x41, 0x26,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70,
	0x65, 0x65, 0x72, 0x2d, 0x61, 0x73, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x41, 0x73, 0x12, 0x65,
	0x0a, 0x0a, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x9f, 0xc0, 0xf9,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2c, 0x82, 0x41,
	0x29, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x09, 0x70, 0x65, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x6f, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0xbe, 0xa4, 0xe2, 0xa6, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x2b, 0x82, 0x41, 0x28, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x70, 0x65,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x93, 0x01, 0x0a, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x73, 0x18, 0xc8, 0xc5, 0xf0,
	0xbd, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x67,
	0x70, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x73,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x33, 0x82, 0x41, 0x30, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x2d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2d, 0x61, 0x73, 0x52, 0x0f, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x73, 0x12, 0x7a, 0x0a, 0x12,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x70, 0x5f, 0x64, 0x61, 0x6d, 0x70, 0x69,
	0x6e, 0x67, 0x18, 0xbd, 0x86, 0xd3, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x34, 0x82, 0x41, 0x31, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2d, 0x66, 0x6c, 0x61, 0x70, 0x2d, 0x64,
	0x61, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x10, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x46, 0x6c, 0x61,
	0x70, 0x44, 0x61, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x83, 0x01, 0x0a, 0x0e, 0x73, 0x65, 0x6e,
	0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x18, 0xaf, 0xc8, 0xb6, 0x83,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x67, 0x70,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x42, 0x30, 0x82,
	0x41, 0x2d, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x52,
	0x0d, 0x73, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x1a, 0xf0,
	0x05, 0x0a, 0x0c, 0x45, 0x62, 0x67, 0x70, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x68, 0x6f, 0x70, 0x12,
	0x83, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xfa, 0xc7, 0x80, 0xaf, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x45, 0x62, 0x67, 0x70, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x68, 0x6f, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x2f, 0x82, 0x41,
	0x2c, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x65, 0x62, 0x67, 0x70, 0x2d, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x68, 0x6f, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x7e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97,
	0xcc, 0xd6, 0x62, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x45, 0x62, 0x67, 0x70,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x68, 0x6f, 0x70, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x2e,
	0x82, 0x41, 0x2b, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x65, 0x62, 0x67, 0x70, 0x2d,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x68, 0x6f, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xec, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x69, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xd8, 0x95, 0xa7, 0x55,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x37, 0x82, 0x41, 0x34, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x65, 0x62, 0x67, 0x70, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x68, 0x6f, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x77, 0x0a, 0x0c, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x68, 0x6f, 0x70, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x86, 0x83, 0xf0, 0x63,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3c, 0x82, 0x41, 0x39, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x65, 0x62, 0x67, 0x70, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x68, 0x6f, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x68, 0x6f, 0x70, 0x2d, 0x74, 0x74, 0x6c, 0x52, 0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x68, 0x6f,
	0x70, 0x54, 0x74, 0x6c, 0x1a, 0xea, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x69,
	0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xa9, 0xc0, 0xb4, 0xa6, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x65, 0x62, 0x67, 0x70, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x68,
	0x6f, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x76, 0x0a, 0x0c, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x68, 0x6f, 0x70, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0xc1, 0xdd, 0xc9, 0x67, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3b, 0x82, 0x41, 0x38, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2f, 0x65, 0x62, 0x67, 0x70, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x68, 0x6f,
	0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x68, 0x6f, 0x70,
	0x2d, 0x74, 0x74, 0x6c, 0x52, 0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x68, 0x6f, 0x70, 0x54, 0x74,
	0x6c, 0x1a, 0xe2, 0x05, 0x0a, 0x0d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x69, 0x6e, 0x67, 0x12, 0x85, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xad,
	0xfb, 0xcc, 0xd1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x30, 0x82, 0x41, 0x2d, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x2d, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x80, 0x01, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xe2, 0xe2, 0xc4, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x2f, 0x82, 0x41, 0x2c, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e,
	0x67, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x91,
	0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x86, 0x01, 0x0a, 0x11, 0x74, 0x72,
	0x65, 0x61, 0x74, 0x5f, 0x61, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18,
	0xe8, 0xe0, 0x88, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x42, 0x82,
	0x41, 0x3f, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x74, 0x72, 0x65, 0x61, 0x74, 0x2d, 0x61, 0x73, 0x2d, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x52, 0x0f, 0x74, 0x72, 0x65, 0x61, 0x74, 0x41, 0x73, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x1a, 0xb1, 0x02, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x9e, 0x01, 0x0a,
	0x19, 0x65, 0x72, 0x72, 0x6f, 0x6e, 0x65, 0x6f, 0x75, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x8a, 0xc5, 0xa2, 0xfc, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x49, 0x82, 0x41, 0x46, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x6e,
	0x65, 0x6f, 0x75, 0x73, 0x2d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2d, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x52, 0x17, 0x65, 0x72, 0x72, 0x6f, 0x6e, 0x65, 0x6f, 0x75, 0x73, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x86, 0x01,
	0x0a, 0x11, 0x74, 0x72, 0x65, 0x61, 0x74, 0x5f, 0x61, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x18, 0xdf, 0xae, 0xc2, 0xe2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x2d, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x74, 0x72, 0x65, 0x61, 0x74, 0x2d, 0x61, 0x73, 0x2d, 0x77, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x0f, 0x74, 0x72, 0x65, 0x61, 0x74, 0x41, 0x73, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x1a, 0xce, 0x0f, 0x0a, 0x0f, 0x47, 0x72, 0x61, 0x63, 0x65,
	0x66, 0x75, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x89, 0x01, 0x0a, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x80, 0xa9, 0x8b, 0xcf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x39, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70,
	0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2e, 0x47, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x52, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x32, 0x82, 0x41, 0x2f, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x2d,
	0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x84, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0xf9, 0x9c, 0x8f, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x47, 0x72,
	0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x31, 0x82, 0x41, 0x2e, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x2d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xfd, 0x03,
	0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6c, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0xc2, 0xbd, 0xa9, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x3a, 0x82, 0x41, 0x37, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x67, 0x72,
	0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x2d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x77, 0x0a, 0x0b, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72,
	0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0xae, 0xd9, 0xf1, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x2d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x2d, 0x6f,
	0x6e, 0x6c, 0x79, 0x52, 0x0a, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x79, 0x12,
	0x7b, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x86, 0xb6, 0x8c, 0xde, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3f,
	0x82, 0x41, 0x3c, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x67, 0x72, 0x61, 0x63, 0x65,
	0x66, 0x75, 0x6c, 0x2d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52,
	0x0b, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x8e, 0x01, 0x0a,
	0x11, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0xd9, 0x9b, 0xed, 0x86, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x2d, 0x72, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x74, 0x61, 0x6c, 0x65,
	0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x0f, 0x73, 0x74,
	0x61, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0xa7, 0x09,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x6b, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0xbf, 0xa4, 0x80, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x67, 0x72, 0x61,
	0x63, 0x65, 0x66, 0x75, 0x6c, 0x2d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x76, 0x0a, 0x0b, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x5f, 0x6f,
	0x6e, 0x6c, 0x79, 0x18, 0xb7, 0x90, 0x9d, 0x6c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x3d, 0x82, 0x41, 0x3a, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x67, 0x72,
	0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x2d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x2d, 0x6f, 0x6e, 0x6c, 0x79,
	0x52, 0x0a, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x85, 0x01, 0x0a,
	0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0xc5, 0xf3, 0xf8, 0x42, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x42, 0x82, 0x41, 0x3f, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x67, 0x72, 0x61, 0x63,
	0x65, 0x66, 0x75, 0x6c, 0x2d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x8c, 0x01, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0xc5, 0xe9,
	0xb2, 0x31, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x47, 0x72, 0x61, 0x63, 0x65,
	0x66, 0x75, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x2d, 0x72, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x11, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xb0, 0xa1, 0xad, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x43, 0x82, 0x41, 0x40, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x2d, 0x72, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d,
	0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x0f, 0x70, 0x65,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x82, 0x01,
	0x0a, 0x0f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0xb6, 0xf0, 0xd8, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x41, 0x82, 0x41, 0x3e, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x67, 0x72, 0x61, 0x63,
	0x65, 0x66, 0x75, 0x6c, 0x2d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x0e, 0x70, 0x65, 0x65, 0x72, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x79, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0xed, 0x95, 0x93, 0x43, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x67, 0x72, 0x61,
	0x63, 0x65, 0x66, 0x75, 0x6c, 0x2d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65,
	0x52, 0x0b, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x8c, 0x01,
	0x0a, 0x11, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0xd8, 0xdf, 0x86, 0x4a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x43, 0x82, 0x41, 0x40, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x2d, 0x72, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x2d,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x0f, 0x73, 0x74, 0x61,
	0x6c, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x88, 0x01, 0x0a,
	0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x10, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x48, 0x45,
	0x4c, 0x50, 0x45, 0x52, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x01, 0x1a, 0x0e, 0x82, 0x41, 0x0b,
	0x48, 0x45, 0x4c, 0x50, 0x45, 0x52, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x12, 0x20, 0x0a, 0x0e, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x42, 0x49, 0x4c, 0x41, 0x54, 0x45, 0x52, 0x41, 0x4c, 0x10, 0x02, 0x1a,
	0x0c, 0x82, 0x41, 0x09, 0x42, 0x49, 0x4c, 0x41, 0x54, 0x45, 0x52, 0x41, 0x4c, 0x12, 0x28, 0x0a,
	0x12, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x48, 0x45, 0x4c,
	0x50, 0x45, 0x52, 0x10, 0x03, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45,
	0x5f, 0x48, 0x45, 0x4c, 0x50, 0x45, 0x52, 0x1a, 0xfb, 0x04, 0x0a, 0x0e, 0x4c, 0x6f, 0x67, 0x67,
	0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x86, 0x01, 0x0a, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xc7, 0xe2, 0x8e, 0x44, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x31, 0x82, 0x41, 0x2e, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2d, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x82, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xb8, 0xc5,
	0xf4, 0x7b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x69,
	0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42,
	0x30, 0x82, 0x41, 0x2d, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x6c, 0x6f, 0x67, 0x67,
	0x69, 0x6e, 0x67, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xad, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0xa2, 0x01, 0x0a, 0x1a, 0x6c, 0x6f, 0x67, 0x5f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x18, 0xab, 0xe0, 0xbe, 0xd3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x4c, 0x82, 0x41, 0x49, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x6c, 0x6f,
	0x67, 0x67, 0x69, 0x6e, 0x67, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6c, 0x6f, 0x67, 0x2d, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52,
	0x17, 0x6c, 0x6f, 0x67, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x1a, 0xaa, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0xa0, 0x01, 0x0a, 0x1a, 0x6c, 0x6f, 0x67, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x18, 0xfe, 0xe0, 0xed, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x4b, 0x82, 0x41, 0x48, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x6c, 0x6f, 0x67, 0x67,
	0x69, 0x6e, 0x67, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x2d, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2d, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x17, 0x6c, 0x6f,
	0x67, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x1a, 0xe2, 0x07, 0x0a, 0x0e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52,
	0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x86, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0xe1, 0x88, 0xbf, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x31, 0x82, 0x41, 0x2e, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2d, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x83, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xd6, 0x92, 0x9c, 0x87,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52,
	0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x30,
	0x82, 0x41, 0x2d, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x2d, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xe0, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x97, 0x01, 0x0a, 0x16, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x90, 0x86,
	0xc9, 0x86, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x48, 0x82, 0x41,
	0x45, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2d, 0x72,
	0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x2d, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2d,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x14, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x66,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x4e, 0x0a, 0x21,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0xdf, 0x92, 0x9e, 0x91, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x1d, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x4e, 0x0a, 0x21,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x18, 0xb2, 0xdf, 0xa5, 0xd2, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x1d, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x1c, 0x0a, 0x1a,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x1a, 0xdd, 0x02, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x96, 0x01, 0x0a, 0x16, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x72,
	0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18,
	0xf5, 0xe1, 0x86, 0xc1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x47,
	0x82, 0x41, 0x44, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x2d, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2d, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x14, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65,
	0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x4e, 0x0a,
	0x21, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0xb8, 0xa7, 0xfa, 0xde, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x1d,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x4d, 0x0a,
	0x21, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x75, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x18, 0xb1, 0xc6, 0xa0, 0x7b, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x1d, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x1c, 0x0a, 0x1a,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x1a, 0xb3, 0x23, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x6d, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0xbe, 0xa2, 0xcc, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2e, 0x82, 0x41, 0x2b, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x68, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0xc0, 0x97, 0xf0, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x2c, 0x82, 0x41, 0x29, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x87, 0x01,
	0x0a, 0x16, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x18, 0x98, 0x8e, 0xd9, 0x88, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x37, 0x82, 0x41, 0x34, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x61, 0x6c, 0x6c, 0x79, 0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64,
	0x52, 0x15, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x12, 0x5b, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0xf9, 0xbc, 0x82, 0xec, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x28, 0x82, 0x41, 0x25, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x8a, 0x01, 0x0a, 0x17, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0xef, 0xdb, 0xa5, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x38, 0x82, 0x41, 0x35, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x2d, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x16, 0x65, 0x73, 0x74, 0x61, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x74, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0xb7, 0xa4, 0xe2, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x31, 0x82, 0x41, 0x2e, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x61, 0x73, 0x74, 0x2d, 0x65, 0x73, 0x74, 0x61, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x73, 0x74, 0x61,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x5d, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x5f, 0x61, 0x73, 0x18, 0x88, 0x9e, 0xc5, 0x8d, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x29, 0x82, 0x41, 0x26, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x73, 0x52, 0x07, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x41, 0x73, 0x12, 0x7b, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x18, 0xce, 0xdc, 0xe9, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x42, 0x29,
	0x82, 0x41, 0x26, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x77, 0x0a, 0x10, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x93, 0xd3, 0xc1, 0xab, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x31, 0x82, 0x41, 0x2e, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x5a, 0x0a, 0x07,
	0x70, 0x65, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x18, 0xdb, 0x93, 0xa0, 0xe0, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x28, 0x82, 0x41, 0x25, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x61, 0x73,
	0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x41, 0x73, 0x12, 0x64, 0x0a, 0x0a, 0x70, 0x65, 0x65, 0x72,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0xf0, 0x84, 0xae, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2b, 0x82, 0x41, 0x28, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x09, 0x70, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x6e,
	0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x8b, 0xf1, 0x98, 0xe7,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x67, 0x70,
	0x50, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x2a, 0x82, 0x41, 0x27, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x74,
	0x0a, 0x06, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x18, 0xfa, 0x99, 0xa0, 0xdc, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x73, 0x42, 0x27, 0x82, 0x41, 0x24, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x52, 0x06, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x73, 0x12, 0x91, 0x01, 0x0a, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x73, 0x18, 0xf5, 0xab, 0xad, 0x41, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x67, 0x70, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x73, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x32, 0x82, 0x41, 0x2f, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x2d, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x2d, 0x61, 0x73, 0x52, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x73, 0x12, 0x79, 0x0a, 0x12, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x5f, 0x66, 0x6c, 0x61, 0x70, 0x5f, 0x64, 0x61, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x18, 0xba,
	0xf2, 0xdd, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x33, 0x82, 0x41,
	0x30, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x2d, 0x66, 0x6c, 0x61, 0x70, 0x2d, 0x64, 0x61, 0x6d, 0x70, 0x69, 0x6e,
	0x67, 0x52, 0x10, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x70, 0x44, 0x61, 0x6d, 0x70,
	0x69, 0x6e, 0x67, 0x12, 0x82, 0x01, 0x0a, 0x0e, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x18, 0xe4, 0xaf, 0x9d, 0xbc, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x67, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x42, 0x2f, 0x82, 0x41, 0x2c, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x65, 0x6e, 0x64, 0x2d,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x8d, 0x01, 0x0a, 0x0d, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xfa, 0xfd, 0xf2, 0x4d, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x2e, 0x82, 0x41, 0x2b, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x9e, 0x01, 0x0a, 0x16, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x18, 0xe3, 0xf7, 0xd8, 0x2e, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x42, 0x67, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x42, 0x47, 0x50, 0x43,
	0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x42, 0x37, 0x82, 0x41, 0x34, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x2d, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x52, 0x15, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x1a, 0xc5, 0x0e, 0x0a, 0x08, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x8e, 0x01, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x18, 0xb0, 0xa8, 0x80, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x42, 0x32, 0x82, 0x41, 0x2f, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x52, 0x08, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x7d, 0x0a, 0x04, 0x73, 0x65, 0x6e, 0x74, 0x18,
	0xb3, 0xa7, 0xbc, 0x61, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x6e, 0x74,
	0x42, 0x2e, 0x82, 0x41, 0x2b, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x73, 0x65, 0x6e, 0x74,
	0x52, 0x04, 0x73, 0x65, 0x6e, 0x74, 0x1a, 0x9d, 0x06, 0x0a, 0x08, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x12, 0x7c, 0x0a, 0x0c, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x18, 0xca, 0xd9, 0xdb, 0xba, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x2f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x52, 0x0c, 0x6e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x12, 0x69, 0x0a, 0x06, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x18, 0xd4, 0xfd, 0xb2, 0x15,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x2f, 0x55, 0x50,
	0x44, 0x41, 0x54, 0x45, 0x52, 0x06, 0x75, 0x50, 0x44, 0x41, 0x54, 0x45, 0x12, 0xbf, 0x01, 0x0a,
	0x1c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0xd6, 0xed,
	0xbf, 0x78, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x67,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x42, 0x47, 0x50, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x43, 0x4f,
	0x44, 0x45, 0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x2f, 0x6c, 0x61, 0x73, 0x74, 0x2d, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x63,
	0x6f, 0x64, 0x65, 0x52, 0x19, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0xcb,
	0x01, 0x0a, 0x1f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x73, 0x75, 0x62, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0xaa, 0xfd, 0xe9, 0x39, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x67, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x42, 0x47, 0x50, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x44, 0x45, 0x42, 0x52, 0x82, 0x41, 0x4f, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x2f, 0x6c,
	0x61, 0x73, 0x74, 0x2d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x73, 0x75, 0x62, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x1c,
	0x6c, 0x61, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x75, 0x62, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x97, 0x01, 0x0a,
	0x16, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xa1, 0x9a, 0xa9, 0x71, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x49, 0x82, 0x41, 0x46, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x2f, 0x6c, 0x61, 0x73, 0x74, 0x2d, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x74, 0x69, 0x6d, 0x65,
	0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x88, 0x06, 0x0a, 0x04, 0x53, 0x65, 0x6e, 0x74, 0x12,
	0x78, 0x0a, 0x0c, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x18,
	0xab, 0xac, 0x85, 0x90, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3b,
	0x82, 0x41, 0x38, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x73, 0x65, 0x6e, 0x74, 0x2f, 0x4e,
	0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x0c, 0x6e, 0x4f, 0x54,
	0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x12, 0x66, 0x0a, 0x06, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x18, 0xe9, 0xe3, 0xb1, 0xf3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x73, 0x65,
	0x6e, 0x74, 0x2f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x52, 0x06, 0x75, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x12, 0xbc, 0x01, 0x0a, 0x1c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x8b, 0xab, 0xd0, 0xa8, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x42, 0x67, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x42, 0x47, 0x50, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x42, 0x4b, 0x82, 0x41, 0x48, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2f, 0x73, 0x65, 0x6e, 0x74, 0x2f, 0x6c, 0x61, 0x73, 0x74, 0x2d, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x2d, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x19, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0xc7, 0x01, 0x0a, 0x1f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x73, 0x75, 0x62,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0xb9, 0xb6, 0xf7, 0x42, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x67, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x42, 0x47, 0x50,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x44, 0x45, 0x42, 0x4e, 0x82, 0x41,
	0x4b, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x73, 0x65, 0x6e, 0x74, 0x2f, 0x6c, 0x61, 0x73,
	0x74, 0x2d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x2d, 0x73, 0x75, 0x62, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x1c, 0x6c, 0x61,
	0x73, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x53, 0x75, 0x62, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x94, 0x01, 0x0a, 0x16, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xfc, 0xec, 0xb8, 0xde, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f,
	0x73, 0x65, 0x6e, 0x74, 0x2f, 0x6c, 0x61, 0x73, 0x74, 0x2d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x14, 0x6c, 0x61, 0x73,
	0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x1a, 0xc5, 0x01, 0x0a, 0x06, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x12, 0x5b, 0x0a, 0x05,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0xcb, 0xf7, 0xe1, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x2d, 0x82, 0x41, 0x2a, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x5e, 0x0a, 0x06, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x18, 0x9a, 0xc5, 0x95, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x2e, 0x82, 0x41, 0x2b, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x94, 0x02, 0x0a, 0x0c, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54,
	0x10, 0x00, 0x12, 0x1e, 0x0a, 0x11, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x49, 0x44, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x49, 0x44,
	0x4c, 0x45, 0x12, 0x24, 0x0a, 0x14, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x10, 0x02, 0x1a, 0x0a, 0x82, 0x41,
	0x07, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x12, 0x22, 0x0a, 0x13, 0x53, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10,
	0x03, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x12, 0x26, 0x0a, 0x15,
	0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x50, 0x45,
	0x4e, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x04, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x4f, 0x50, 0x45, 0x4e,
	0x53, 0x45, 0x4e, 0x54, 0x12, 0x2c, 0x0a, 0x18, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d,
	0x10, 0x05, 0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x52, 0x4d, 0x12, 0x2c, 0x0a, 0x18, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x45, 0x53, 0x54, 0x41, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x06,
	0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x45, 0x53, 0x54, 0x41, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x44,
	0x1a, 0xd7, 0x0b, 0x0a, 0x06, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x12, 0x76, 0x0a, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xb3, 0x80, 0x91, 0x9e, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70,
	0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x28, 0x82, 0x41, 0x25, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x72, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x94, 0x93, 0xed,
	0xa0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x72,
	0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x27, 0x82, 0x41, 0x24, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xaa, 0x04, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x79, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65,
	0x74, 0x72, 0x79, 0x18, 0x9d, 0xe0, 0xa7, 0xfb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2d, 0x72, 0x65, 0x74, 0x72, 0x79, 0x52,
	0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x74, 0x72, 0x79, 0x12, 0x6c, 0x0a,
	0x09, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xc1, 0xf1, 0xc4, 0x42, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x32, 0x82,
	0x41, 0x2f, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x73,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x74, 0x69, 0x6d,
	0x65, 0x52, 0x08, 0x68, 0x6f, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x12,
	0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0xfa, 0x80, 0x9b, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3b, 0x82, 0x41, 0x38, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x52, 0x11, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0xab, 0x01, 0x0a, 0x1e, 0x6d, 0x69, 0x6e, 0x69, 0x6d,
	0x75, 0x6d, 0x5f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x98, 0xf6, 0xf3, 0xb9, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x47, 0x82,
	0x41, 0x44, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x73,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x2d,
	0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x1c, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x41,
	0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x1a, 0xb3, 0x05, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x78,
	0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x18,
	0xa6, 0xb3, 0xb1, 0xc2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x2d, 0x72, 0x65, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x74, 0x72, 0x79, 0x12, 0x6b, 0x0a, 0x09, 0x68, 0x6f, 0x6c, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xd6, 0xcc, 0xb8, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x31, 0x82, 0x41, 0x2e, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x08, 0x68, 0x6f, 0x6c,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x12, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c,
	0x69, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0xb3, 0xe2, 0x92,
	0xef, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x3a, 0x82, 0x41, 0x37, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x72, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c,
	0x69, 0x76, 0x65, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x11, 0x6b, 0x65,
	0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0xa9, 0x01, 0x0a, 0x1e, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x61, 0x64, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0xf9, 0xe7, 0xc6, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d,
	0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x2d, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x1c, 0x6d,
	0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x8c, 0x01, 0x0a, 0x14,
	0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0xa7, 0xb6, 0x8f, 0xae, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3c, 0x82, 0x41, 0x39, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x68, 0x6f, 0x6c,
	0x64, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x12, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74,
	0x65, 0x64, 0x48, 0x6f, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x8d, 0x0c, 0x0a, 0x09, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x7b, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0xf8, 0xc2, 0xfc, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x2b, 0x82, 0x41, 0x28, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x77, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x91,
	0xa1, 0xe4, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x2a, 0x82, 0x41, 0x27,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xd6,
	0x03, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x79, 0x0a, 0x0d, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xaf, 0x9e, 0xaa, 0xea, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x39, 0x82, 0x41, 0x36,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2d, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x76, 0x0a, 0x0d, 0x6d, 0x74, 0x75, 0x5f, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x18, 0xe4, 0xdf, 0x88, 0x4d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x6d, 0x74, 0x75, 0x2d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x0c,
	0x6d, 0x74, 0x75, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x12, 0x73, 0x0a, 0x0c,
	0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x82, 0x92, 0xba,
	0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x38, 0x82, 0x41, 0x35, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x2d,
	0x6d, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x64, 0x0a, 0x07, 0x74, 0x63, 0x70, 0x5f, 0x6d, 0x73, 0x73, 0x18, 0xa4, 0xf4, 0x80,
	0x4d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x33, 0x82, 0x41, 0x30, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x74, 0x63, 0x70, 0x2d, 0x6d, 0x73, 0x73, 0x52,
	0x06, 0x74, 0x63, 0x70, 0x4d, 0x73, 0x73, 0x1a, 0xb0, 0x06, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x77, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0xba, 0xe2, 0xfc, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x38, 0x82, 0x41, 0x35, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0c, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x6d, 0x0a, 0x0a, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0xcb, 0xda, 0xb0, 0x84, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x09,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x76, 0x0a, 0x0d, 0x6d, 0x74, 0x75,
	0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x18, 0xb5, 0xfa, 0x9a, 0xdf, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x38, 0x82, 0x41, 0x35, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x74, 0x75, 0x2d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x52, 0x0c, 0x6d, 0x74, 0x75, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x12, 0x72, 0x0a, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0xbd, 0xec, 0xdd, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x37, 0x82, 0x41, 0x34, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x61, 0x73, 0x73,
	0x69, 0x76, 0x65, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x7b, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xb9, 0xbc, 0xc6, 0xa8, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x70, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x9a, 0xa2, 0x9a, 0xb6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x64, 0x0a, 0x07, 0x74, 0x63, 0x70, 0x5f, 0x6d, 0x73, 0x73, 0x18,
	0x99, 0xe2, 0x8a, 0x91, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x32,
	0x82, 0x41, 0x2f, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x63, 0x70, 0x2d, 0x6d,
	0x73, 0x73, 0x52, 0x06, 0x74, 0x63, 0x70, 0x4d, 0x73, 0x73, 0x1a, 0x93, 0x0a, 0x0a, 0x10, 0x55,
	0x73, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12,
	0x8c, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xae, 0xb8, 0x95, 0x85, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x34, 0x82, 0x41, 0x31, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x75, 0x73, 0x65,
	0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x84,
	0x01, 0x0a, 0x04, 0x65, 0x62, 0x67, 0x70, 0x18, 0xc4, 0xa1, 0x8a, 0xf8, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42,
	0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x2e, 0x45, 0x62, 0x67, 0x70, 0x42, 0x32, 0x82, 0x41, 0x2f,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x75, 0x73, 0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x65, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x65, 0x62, 0x67, 0x70, 0x52,
	0x04, 0x65, 0x62, 0x67, 0x70, 0x12, 0x87, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0xdb, 0x9c, 0xe3, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x55, 0x73, 0x65,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x33, 0x82, 0x41, 0x30, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x75, 0x73, 0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x2d, 0x70, 0x61, 0x74,
	0x68, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a,
	0x78, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6e, 0x0a, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0xcc, 0x8d, 0xfb, 0x41, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x3c, 0x82, 0x41, 0x39, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x75,
	0x73, 0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x2d, 0x70, 0x61, 0x74, 0x68,
	0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x1a, 0xeb, 0x04, 0x0a, 0x04, 0x45, 0x62,
	0x67, 0x70, 0x12, 0x96, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xe9, 0xa3,
	0xbe, 0xbf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x2e, 0x45, 0x62, 0x67,
	0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x75, 0x73, 0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x65, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x65, 0x62, 0x67, 0x70, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x91, 0x01, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xbe, 0x87, 0xeb, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x73, 0x2e, 0x45, 0x62, 0x67, 0x70, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x38,
	0x82, 0x41, 0x35, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x75, 0x73, 0x65, 0x2d, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x65, 0x62,
	0x67, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a,
	0x9a, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x8f, 0x01, 0x0a, 0x11, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x61, 0x73,
	0x18, 0xad, 0xe4, 0x9c, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4b,
	0x82, 0x41, 0x48, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x75, 0x73, 0x65, 0x2d, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x65, 0x62,
	0x67, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x2d,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x2d, 0x61, 0x73, 0x52, 0x0f, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x41, 0x73, 0x1a, 0x98, 0x01, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x8e, 0x01, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x61, 0x73, 0x18, 0xca, 0xb5, 0xf2,
	0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4a, 0x82, 0x41, 0x47, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x75, 0x73, 0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x65, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x65, 0x62, 0x67, 0x70, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x65, 0x2d, 0x61, 0x73, 0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x65, 0x41, 0x73, 0x1a, 0x77, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x6e, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x9d, 0xb4, 0xa1, 0x9e,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3b, 0x82, 0x41, 0x38, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x75, 0x73, 0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x65, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x1a, 0xa5, 0x01, 0x0a, 0x0b, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4b, 0x65, 0x79,
	0x12, 0x56, 0x0a, 0x10, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x82, 0x41, 0x28, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2d,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3e, 0x0a, 0x08, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x52, 0x08,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x1a, 0xe6, 0xa1, 0x03, 0x0a, 0x0a, 0x50, 0x65,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x69, 0x0a, 0x0a, 0x70, 0x65, 0x65, 0x72,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0xe5, 0xd8, 0xca, 0x2f, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70,
	0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x42, 0x1e, 0x82, 0x41, 0x1b, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65,
	0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x09, 0x70, 0x65, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x1a, 0xbd, 0x9f, 0x03, 0x0a, 0x09, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x77, 0x0a, 0x09, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x18,
	0xc7, 0xc6, 0xa2, 0x77, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x41,
	0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x42, 0x28, 0x82, 0x41, 0x25, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x52, 0x08, 0x61, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x12, 0x83, 0x01, 0x0a, 0x0c,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0xff, 0xa9, 0xd3,
	0x48, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x2b, 0x82, 0x41, 0x28, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x8e, 0x01, 0x0a, 0x0f, 0x61, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xa1, 0xaf, 0x9f, 0x84, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70,
	0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x41, 0x73, 0x50, 0x61, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x42, 0x2e, 0x82, 0x41, 0x2b, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2f, 0x61, 0x73, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x0d, 0x61, 0x73, 0x50, 0x61, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x6d, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xaa, 0x8a, 0xaa,
	0x49, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x25, 0x82, 0x41, 0x22, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x88, 0x01, 0x0a, 0x0d, 0x65, 0x62, 0x67, 0x70, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x68, 0x6f, 0x70, 0x18, 0xb5, 0xec, 0xed, 0xee, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50,
	0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x2e, 0x45, 0x62, 0x67, 0x70, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x68, 0x6f, 0x70,
	0x42, 0x2c, 0x82, 0x41, 0x29, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2f, 0x65, 0x62, 0x67, 0x70, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x68, 0x6f, 0x70, 0x52, 0x0c,
	0x65, 0x62, 0x67, 0x70, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x68, 0x6f, 0x70, 0x12, 0x8b, 0x01, 0x0a,
	0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x18,
	0xa8, 0xe3, 0xc6, 0x75, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x42, 0x2d, 0x82, 0x41,
	0x2a, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x2d, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x94, 0x01, 0x0a, 0x10, 0x67,
	0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x9f, 0xfb, 0xc6, 0xcf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e,
	0x47, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42,
	0x2f, 0x82, 0x41, 0x2c, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f,
	0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x2d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x52, 0x0f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x90, 0x01, 0x0a, 0x0f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xa6, 0x93, 0xb3, 0xc6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70,
	0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x42, 0x2e, 0x82, 0x41, 0x2b, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65,
	0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2d, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0e, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x8f, 0x01, 0x0a, 0x0f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x72,
	0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0xcc, 0xea, 0xe9, 0x59, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42,
	0x67, 0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x66,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x2e, 0x82, 0x41, 0x2b, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2d, 0x72, 0x65, 0x66,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x66,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x6a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0xc7, 0xee, 0xb5, 0x9d, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x24, 0x82, 0x41, 0x21, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70,
	0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x6e, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x18, 0xd2, 0xc9, 0xe9,
	0xfa, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x72, 0x73, 0x42, 0x25, 0x82, 0x41, 0x22, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x65,
	0x72, 0x73, 0x12, 0x7a, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0xc7, 0xdd, 0xd8, 0xda, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x28, 0x82, 0x41, 0x25, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70,
	0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x9a,
	0x01, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0xb9, 0x85, 0x8e, 0xdc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70,
	0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x55, 0x73, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x42, 0x31, 0x82, 0x41, 0x2e, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x75, 0x73, 0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x65, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x52, 0x10, 0x75, 0x73, 0x65, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x1a, 0xfe, 0x9f, 0x02, 0x0a,
	0x08, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x12, 0x8a, 0x01, 0x0a, 0x08, 0x61, 0x66,
	0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x18, 0xb2, 0xef, 0x92, 0x95, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67,
	0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e,
	0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x4b, 0x65, 0x79, 0x42, 0x31, 0x82, 0x41, 0x2e, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f,
	0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x52, 0x07, 0x61,
	0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x1a, 0xf1, 0x9c, 0x02, 0x0a, 0x07, 0x41, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x12, 0x9b, 0x01, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x73, 0x18, 0xf1, 0xd3, 0xfb, 0x5f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50, 0x65, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66,
	0x69, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x61, 0x74, 0x68, 0x73, 0x42, 0x3b, 0x82, 0x41, 0x38, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f,
	0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x61, 0x64,
	0x64, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x52, 0x08, 0x61, 0x64, 0x64, 0x50, 0x61, 0x74, 0x68,
	0x73, 0x12, 0xa7, 0x01, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x18, 0x9e, 0xfc, 0xc7, 0x60, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50, 0x65, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x3e,
	0x82, 0x41, 0x3b, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0b,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x92, 0x01, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xf3, 0xf3, 0xb4, 0xf2, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67,
	0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e,
	0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x38,
	0x82, 0x41, 0x35, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0xb8, 0x01, 0x0a, 0x10, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x5f, 0x72, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x86, 0xf3, 0xac, 0xe4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x45, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70,
	0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41,
	0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x47, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x52,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66,
	0x75, 0x6c, 0x2d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x0f, 0x67, 0x72, 0x61, 0x63,
	0x65, 0x66, 0x75, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0xc5, 0x01, 0x0a, 0x14,
	0x69, 0x70, 0x76, 0x34, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x18, 0xc2, 0xdc, 0xb4, 0x41, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50,
	0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64,
	0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x52,
	0x12, 0x69, 0x70, 0x76, 0x34, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x12, 0xa7, 0x01, 0x0a, 0x0c, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x18, 0xdc, 0x92, 0x86, 0x43, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50,
	0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x52, 0x0b, 0x69, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0xc6, 0x01,
	0x0a, 0x14, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x5f, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x18, 0xdc, 0x9b, 0x89, 0xa1, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x48, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67,
	0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e,
	0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x42, 0x46, 0x82, 0x41, 0x43, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f,
	0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70,
	0x76, 0x36, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x52, 0x12, 0x69, 0x70, 0x76, 0x36, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x55,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0xa7, 0x01, 0x0a, 0x0c, 0x69, 0x70, 0x76, 0x36, 0x5f,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x18, 0xea, 0xfb, 0xdd, 0x19, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x41, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67,
	0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e,
	0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x12, 0x9f, 0x01, 0x0a, 0x0a, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x5f, 0x65, 0x76, 0x70, 0x6e, 0x18,
	0xb9, 0xbd, 0x80, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x41,
	0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e,
	0x4c, 0x32, 0x56, 0x70, 0x6e, 0x45, 0x76, 0x70, 0x6e, 0x42, 0x3c, 0x82, 0x41, 0x39, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70,
	0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x32, 0x76,
	0x70, 0x6e, 0x2d, 0x65, 0x76, 0x70, 0x6e, 0x52, 0x09, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x45, 0x76,
	0x70, 0x6e, 0x12, 0x9f, 0x01, 0x0a, 0x0a, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x5f, 0x76, 0x70, 0x6c,
	0x73, 0x18, 0xb7, 0x8e, 0xa2, 0x73, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50, 0x65, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66,
	0x69, 0x2e, 0x4c, 0x32, 0x56, 0x70, 0x6e, 0x56, 0x70, 0x6c, 0x73, 0x42, 0x3c, 0x82, 0x41, 0x39,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c,
	0x32, 0x76, 0x70, 0x6e, 0x2d, 0x76, 0x70, 0x6c, 0x73, 0x52, 0x09, 0x6c, 0x32, 0x76, 0x70, 0x6e,
	0x56, 0x70, 0x6c, 0x73, 0x12, 0xc5, 0x01, 0x0a, 0x14, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x5f, 0x69,
	0x70, 0x76, 0x34, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x18, 0xa3, 0x88,
	0x81, 0x7a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x4c, 0x33,
	0x56, 0x70, 0x6e, 0x49, 0x70, 0x76, 0x34, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x52, 0x12, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x49,
	0x70, 0x76, 0x34, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0xbe, 0x01, 0x0a,
	0x12, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x18, 0xc6, 0xc0, 0xca, 0x87, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50,
	0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x2e, 0x4c, 0x33, 0x56, 0x70, 0x6e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70,
	0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69,
	0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x52, 0x10, 0x6c, 0x33, 0x76,
	0x70, 0x6e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0xc5, 0x01,
	0x0a, 0x14, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x18, 0x99, 0xc6, 0x84, 0x49, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x48, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70,
	0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41,
	0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x4c, 0x33, 0x56, 0x70, 0x6e, 0x49, 0x70, 0x76, 0x36,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70,
	0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76,
	0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x52, 0x12, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x49, 0x70, 0x76, 0x36, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0xbe, 0x01, 0x0a, 0x12, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x5f,
	0x69, 0x70, 0x76, 0x36, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x18, 0xa8, 0xcb, 0xee,
	0xb1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x4c, 0x33,
	0x56, 0x70, 0x6e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x42, 0x44,
	0x82, 0x41, 0x41, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x52, 0x10, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x49, 0x70, 0x76, 0x36, 0x55,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0xb6, 0x01, 0x0a, 0x10, 0x73, 0x72, 0x74, 0x65, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x18, 0xc6, 0xc7, 0xfa, 0x9b,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x41, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x53, 0x72, 0x74,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x70, 0x76, 0x34, 0x42, 0x42, 0x82, 0x41, 0x3f,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x73,
	0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x52,
	0x0e, 0x73, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x70, 0x76, 0x34, 0x12,
	0xb6, 0x01, 0x0a, 0x10, 0x73, 0x72, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f,
	0x69, 0x70, 0x76, 0x36, 0x18, 0xc4, 0xc7, 0xfa, 0x9b, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e,
	0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66,
	0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x49, 0x70, 0x76, 0x36, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65,
	0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x52, 0x0e, 0x73, 0x72, 0x74, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x49, 0x70, 0x76, 0x36, 0x12, 0x8e, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0xd4, 0xac, 0xa9, 0x9c, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50, 0x65,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x37, 0x82, 0x41, 0x34, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70,
	0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0xbe, 0x01, 0x0a, 0x12, 0x75, 0x73,
	0x65, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73,
	0x18, 0xb0, 0xf9, 0xb0, 0xd5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50, 0x65, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66,
	0x69, 0x2e, 0x55, 0x73, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x73, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x75, 0x73, 0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x65, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x52, 0x10, 0x75, 0x73, 0x65, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x1a, 0xa8, 0x0b, 0x0a, 0x08, 0x41,
	0x64, 0x64, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0xa5, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x96, 0x82, 0x9e, 0xd9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50, 0x65,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x61, 0x74, 0x68, 0x73, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x61, 0x64, 0x64, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0xa0, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xc3, 0xd1, 0xe2, 0x6e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x42, 0x67, 0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50,
	0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69,
	0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x61, 0x74,
	0x68, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65,
	0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x61, 0x64, 0x64, 0x2d,
	0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x1a, 0xa8, 0x04, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xa9, 0x01,
	0x0a, 0x16, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x8a, 0xfb, 0xbf, 0x42, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x59, 0x82, 0x41, 0x56, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65,
	0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x61, 0x64, 0x64, 0x2d,
	0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6c, 0x69,
	0x67, 0x69, 0x62, 0x6c, 0x65, 0x2d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x14, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x7c, 0x0a, 0x07, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x18, 0xc4, 0xbc, 0xe2, 0x41, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x4a, 0x82, 0x41, 0x47, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x61, 0x64, 0x64, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x07,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x12, 0x73, 0x0a, 0x04, 0x73, 0x65, 0x6e, 0x64, 0x18,
	0x9b, 0x8f, 0x92, 0x7d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x47, 0x82,
	0x41, 0x44, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x61, 0x64, 0x64, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x73, 0x65, 0x6e, 0x64, 0x52, 0x04, 0x73, 0x65, 0x6e, 0x64, 0x12, 0x7f, 0x0a, 0x08,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0xa6, 0xe0, 0xb7, 0x9b, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4b, 0x82, 0x41, 0x48, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x61, 0x64, 0x64, 0x2d, 0x70,
	0x61, 0x74, 0x68, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x65, 0x6e, 0x64,
	0x2d, 0x6d, 0x61, 0x78, 0x52, 0x07, 0x73, 0x65, 0x6e, 0x64, 0x4d, 0x61, 0x78, 0x1a, 0xa5, 0x04,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xa9, 0x01, 0x0a, 0x16, 0x65, 0x6c, 0x69, 0x67,
	0x69, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x18, 0xbd, 0xce, 0xd3, 0xa8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x58, 0x82, 0x41, 0x55, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x61, 0x64, 0x64, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x2d,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x14, 0x65,
	0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x7c, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x18, 0xad,
	0xc1, 0xd4, 0xb7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x49, 0x82,
	0x41, 0x46, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x61, 0x64, 0x64, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x12, 0x72, 0x0a, 0x04, 0x73, 0x65, 0x6e, 0x64, 0x18, 0x90, 0x8d, 0xe1, 0x55, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x61, 0x64, 0x64, 0x2d, 0x70,
	0x61, 0x74, 0x68, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x65, 0x6e, 0x64, 0x52,
	0x04, 0x73, 0x65, 0x6e, 0x64, 0x12, 0x7e, 0x0a, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x61,
	0x78, 0x18, 0xb5, 0xef, 0xc3, 0xc4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x4a, 0x82, 0x41, 0x47, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x61, 0x64, 0x64, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x6d, 0x61, 0x78, 0x52, 0x07, 0x73, 0x65,
	0x6e, 0x64, 0x4d, 0x61, 0x78, 0x1a, 0xf8, 0x0d, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0xaa, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0xef, 0xaf, 0xe4, 0x6e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e,
	0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69,
	0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x2d, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0xa7, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xe0, 0x86, 0xc6,
	0xd6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42,
	0x44, 0x82, 0x41, 0x41, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xcb, 0x05, 0x0a,
	0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xc9, 0x01, 0x0a, 0x15, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x18, 0xd3, 0xe3, 0xcc, 0xfe, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x5b, 0x82, 0x41, 0x58, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x2d, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x13,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0xc9, 0x01, 0x0a, 0x15, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0xc8, 0xb7,
	0xe2, 0xd6, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x42, 0x5b, 0x82,
	0x41, 0x58, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2d, 0x69, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x13, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x92, 0x01, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x18, 0x87, 0xf8, 0xcf, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x53, 0x82, 0x41, 0x50, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x2d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x93, 0x01, 0x0a, 0x0d, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0xec, 0x80, 0xc2, 0xab, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x53, 0x82, 0x41, 0x50, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x79,
	0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0c, 0x69, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x1a, 0xc3, 0x05, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0xc7, 0x01, 0x0a, 0x15, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0xf0,
	0xa8, 0xe1, 0x79, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x42, 0x5a, 0x82,
	0x41, 0x57, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2d, 0x65, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x13, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0xc7,
	0x01, 0x0a, 0x15, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0xdb, 0x83, 0xd5, 0x55, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x42, 0x5a, 0x82, 0x41, 0x57, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x79,
	0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x2d, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x13, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x91, 0x01, 0x0a, 0x0d, 0x65, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0xbc, 0x83, 0xcc, 0x7a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x52, 0x82, 0x41, 0x4f, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f,
	0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0c,
	0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x91, 0x01, 0x0a,
	0x0d, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0xc7,
	0x97, 0x9e, 0x56, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x52,
	0x82, 0x41, 0x4f, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x0c, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x1a, 0x99, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x99, 0x01, 0x0a, 0x0d,
	0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x8a, 0xd4,
	0xee, 0xa5, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x67, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x41, 0x46, 0x49, 0x53, 0x41, 0x46, 0x49, 0x54, 0x59,
	0x50, 0x45, 0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x0b, 0x61, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x73, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x85, 0xb0, 0xcf, 0x80, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x1a, 0x98, 0x05, 0x0a,
	0x0f, 0x47, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x12, 0xb3, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x87, 0xdf, 0xe2, 0xe9,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x41, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x47, 0x72, 0x61,
	0x63, 0x65, 0x66, 0x75, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x49, 0x82, 0x41, 0x46, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x2d,
	0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xae, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0xf8, 0xc3, 0xf9, 0x4d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e,
	0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69,
	0x2e, 0x47, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x48, 0x82, 0x41, 0x45, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66,
	0x75, 0x6c, 0x2d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x8e, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x83, 0x01, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x99,
	0x99, 0xf0, 0x39, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x51, 0x82, 0x41,
	0x4e, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x2d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x1a, 0x8c, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xaa,
	0xbb, 0xc3, 0x7f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x50, 0x82, 0x41,
	0x4d, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x2d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x1a, 0xb6, 0x10, 0x0a, 0x12, 0x49, 0x70, 0x76, 0x34,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0xd0,
	0x01, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0xf7, 0xc8, 0x95, 0xac, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e,
	0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69,
	0x2e, 0x49, 0x70, 0x76, 0x34, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42,
	0x53, 0x82, 0x41, 0x50, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x2d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x1a, 0xcc, 0x0e, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0xd3, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xe8, 0xd6, 0xc5,
	0x93, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70,
	0x76, 0x34, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x5a, 0x82, 0x41, 0x57, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x65, 0x64, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xcf, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x81, 0x99, 0xd3, 0xf9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50, 0x65, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x55, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x59, 0x82, 0x41, 0x56, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xcb, 0x05, 0x0a, 0x06, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0xa2, 0x01, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0xa4, 0xdd, 0xbc, 0x7e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x67, 0x82, 0x41, 0x64, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x65, 0x64, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x6d, 0x61, 0x78, 0x2d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x52, 0x0b, 0x6d, 0x61,
	0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0xae, 0x01, 0x0a, 0x10, 0x70, 0x72,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0xb8,
	0xc7, 0x85, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6b, 0x82, 0x41,
	0x68, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x69, 0x70, 0x76, 0x34, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x2d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2d, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0xaa, 0x01, 0x0a, 0x0d, 0x72,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x88, 0x9a, 0xe6,
	0x52, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x68, 0x82, 0x41, 0x65, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x2d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x72, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0xbd, 0x01, 0x0a, 0x15, 0x77, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63,
	0x74, 0x18, 0x89, 0xdf, 0xf2, 0x99, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x70, 0x82, 0x41, 0x6d, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64,
	0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x77, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x70,
	0x63, 0x74, 0x52, 0x13, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74, 0x1a, 0xc6, 0x05, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0xa2, 0x01, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x65, 0x73, 0x18, 0xbf, 0xab, 0xd3, 0xe6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x66, 0x82, 0x41, 0x63, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65,
	0x64, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x61, 0x78,
	0x2d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0xae, 0x01, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0xaf, 0x81, 0xc5, 0xe3,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6a, 0x82, 0x41, 0x67, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f,
	0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70,
	0x76, 0x34, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x74, 0x65,
	0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0xa9, 0x01, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0xcd, 0xd7, 0xb9, 0x7d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x67, 0x82, 0x41,
	0x64, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x69, 0x70, 0x76, 0x34, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x2d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2d,
	0x74, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x72, 0x12, 0xba, 0x01, 0x0a, 0x15, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18, 0xa0, 0xfd,
	0x4d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6f, 0x82, 0x41, 0x6c, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f,
	0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70,
	0x76, 0x34, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x2d, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x70, 0x63, 0x74, 0x52, 0x13, 0x77, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74,
	0x1a, 0xf0, 0x14, 0x0a, 0x0b, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x12, 0xab, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xb1, 0xe8, 0xb5, 0xa3,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x41, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76,
	0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x45, 0x82, 0x41, 0x42, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xc0,
	0x01, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x99, 0xbe, 0xbd, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x41,
	0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e,
	0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x4b, 0x82, 0x41, 0x48, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0xa6, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xa6, 0x85, 0xd9, 0x40,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34,
	0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x44, 0x82,
	0x41, 0x41, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xaa, 0x01, 0x0a, 0x06, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x9f, 0x01, 0x0a, 0x12, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x8e, 0xa2, 0xb8,
	0xb7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x58, 0x82, 0x41, 0x55,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69,
	0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2d,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x10, 0x73, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x1a, 0xef, 0x0d, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0xc3, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0xee, 0x85, 0x9f, 0x4b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50, 0x65, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x52, 0x82, 0x41, 0x4f, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xc0, 0x01,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x9b, 0xd6, 0xc0, 0xb9, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x53, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42,
	0x67, 0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73,
	0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x51, 0x82, 0x41, 0x4e, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x1a, 0xac, 0x05, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x9b, 0x01, 0x0a, 0x0c,
	0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0xb6, 0xae, 0xbc,
	0xc7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5f, 0x82, 0x41, 0x5c,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69,
	0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x6d, 0x61, 0x78, 0x2d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x52, 0x0b, 0x6d, 0x61,
	0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0xa7, 0x01, 0x0a, 0x10, 0x70, 0x72,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0xfa,
	0xa2, 0xc3, 0xab, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x63, 0x82,
	0x41, 0x60, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f,
	0x77, 0x6e, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x72, 0x64,
	0x6f, 0x77, 0x6e, 0x12, 0xa2, 0x01, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0xaa, 0xfd, 0xff, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x60, 0x82, 0x41, 0x5d, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65,
	0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34,
	0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x72, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0xb4, 0x01, 0x0a, 0x15, 0x77, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70,
	0x63, 0x74, 0x18, 0xf7, 0x9e, 0xac, 0x44, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x68, 0x82, 0x41, 0x65, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x2d, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x70, 0x63, 0x74, 0x52, 0x13, 0x77, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74, 0x1a,
	0xa7, 0x05, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x99, 0x01, 0x0a, 0x0c, 0x6d, 0x61,
	0x78, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x85, 0x86, 0xea, 0x3e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5e, 0x82, 0x41, 0x5b, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65,
	0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34,
	0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x61, 0x78, 0x2d,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0xa6, 0x01, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x95, 0xc9, 0xce, 0xae, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x62, 0x82, 0x41, 0x5f, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70,
	0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76,
	0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x2d, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0f, 0x70,
	0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0xa2,
	0x01, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72,
	0x18, 0x9b, 0xf5, 0xe5, 0xd6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x5f, 0x82, 0x41, 0x5c, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65,
	0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2d,
	0x74, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x72, 0x12, 0xb3, 0x01, 0x0a, 0x15, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18, 0xc2, 0xb9,
	0xba, 0x5c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x67, 0x82, 0x41, 0x64,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69,
	0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x77,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x2d, 0x70, 0x63, 0x74, 0x52, 0x13, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74, 0x1a, 0xa7, 0x01, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x9d, 0x01, 0x0a, 0x12, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0xeb, 0xdb, 0x86, 0x33, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x57, 0x82, 0x41, 0x54, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65,
	0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34,
	0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73,
	0x65, 0x6e, 0x64, 0x2d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2d, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x52, 0x10, 0x73, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x1a, 0xb6, 0x10, 0x0a, 0x12, 0x49, 0x70, 0x76, 0x36, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0xd0, 0x01, 0x0a, 0x0c, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x99, 0xf9, 0xb2, 0xd4,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x41, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76,
	0x36, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x53, 0x82, 0x41, 0x50,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69,
	0x70, 0x76, 0x36, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x2d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0xcc, 0x0e,
	0x0a, 0x0b, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0xd3, 0x01,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xee, 0xde, 0xb1, 0xd4, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x42, 0x67, 0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50,
	0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69,
	0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x5a, 0x82, 0x41, 0x57, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x2d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0xcf, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x9b, 0xb9,
	0xda, 0xa1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x41, 0x66,
	0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49,
	0x70, 0x76, 0x36, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x59, 0x82, 0x41, 0x56, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x65, 0x64, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xca, 0x05, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0xa2, 0x01, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65,
	0x73, 0x18, 0xb6, 0xd9, 0xf4, 0x45, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x67, 0x82, 0x41, 0x64, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x2d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x61, 0x78, 0x2d,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0xae, 0x01, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0xfa, 0xfd, 0xaa, 0x5b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6b, 0x82, 0x41, 0x68, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65,
	0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36,
	0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x74, 0x65, 0x61,
	0x72, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x65,
	0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0xaa, 0x01, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0xaa, 0xae, 0xaf, 0x74, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x68, 0x82, 0x41, 0x65,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69,
	0x70, 0x76, 0x36, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x2d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2d,
	0x74, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x72, 0x12, 0xbc, 0x01, 0x0a, 0x15, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18, 0xf7, 0xef,
	0xa5, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x70, 0x82, 0x41, 0x6d,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69,
	0x70, 0x76, 0x36, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x2d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x2d,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x70, 0x63, 0x74, 0x52, 0x13, 0x77,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50,
	0x63, 0x74, 0x1a, 0xc7, 0x05, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xa2, 0x01, 0x0a,
	0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x85, 0x8f,
	0xde, 0x8a, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x66, 0x82, 0x41,
	0x63, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x69, 0x70, 0x76, 0x36, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x2d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x65, 0x73, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65,
	0x73, 0x12, 0xad, 0x01, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65,
	0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x95, 0xe2, 0xf1, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x6a, 0x82, 0x41, 0x67, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65,
	0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x65, 0x64, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e,
	0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77,
	0x6e, 0x12, 0xa9, 0x01, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x72, 0x18, 0x9b, 0xa0, 0x9e, 0x55, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x67, 0x82, 0x41, 0x64, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x52,
	0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0xbc, 0x01,
	0x0a, 0x15, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18, 0xc2, 0xc4, 0xe7, 0xa4, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6f, 0x82, 0x41, 0x6c, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x2d, 0x70, 0x63, 0x74, 0x52, 0x13, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74, 0x1a, 0xf0, 0x14, 0x0a,
	0x0b, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0xab, 0x01, 0x0a,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xbb, 0xbe, 0xaf, 0xeb, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x48, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42,
	0x67, 0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73,
	0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x45, 0x82, 0x41, 0x42,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69,
	0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xc0, 0x01, 0x0a, 0x0c, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0xcf, 0xdb, 0xa5, 0x78,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36,
	0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x42, 0x4b, 0x82, 0x41, 0x48, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0xa6, 0x01,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xbc, 0xf5, 0xc3, 0x79, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x47, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67,
	0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e,
	0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70,
	0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76,
	0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xa8, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x9d, 0x01, 0x0a, 0x12, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x8c, 0x93, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x58, 0x82, 0x41, 0x55, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70,
	0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x65, 0x6e,
	0x64, 0x2d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52,
	0x10, 0x73, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x1a, 0xf0, 0x0d, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0xc4, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xb0, 0xc7, 0x93,
	0x8a, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70,
	0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x52, 0x82, 0x41,
	0x4f, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xbf, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0xa9, 0xa2, 0xe9, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50, 0x65, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x51, 0x82, 0x41, 0x4e, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xac, 0x05, 0x0a, 0x06, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x9b, 0x01, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0xbc, 0xee, 0xd9, 0xa9, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5f, 0x82, 0x41, 0x5c, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70,
	0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x65, 0x73, 0x12, 0xa6, 0x01, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0xa0, 0xdf, 0x93, 0x48, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x63, 0x82, 0x41, 0x60, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2d, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0f, 0x70, 0x72, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0xa2, 0x01, 0x0a,
	0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x90,
	0x90, 0xeb, 0x48, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x60, 0x82, 0x41, 0x5d, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2d, 0x74, 0x69,
	0x6d, 0x65, 0x72, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x72, 0x12, 0xb5, 0x01, 0x0a, 0x15, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18, 0xd1, 0xf6, 0xf5, 0x9a,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x68, 0x82, 0x41, 0x65, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f,
	0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70,
	0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x77,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x2d, 0x70, 0x63, 0x74, 0x52, 0x13, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74, 0x1a, 0xa8, 0x05, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x9a, 0x01, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x65, 0x73, 0x18, 0xd7, 0xc3, 0xff, 0xd8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x5e, 0x82, 0x41, 0x5b, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x65, 0x73, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73,
	0x12, 0xa6, 0x01, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61,
	0x72, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0xd7, 0xc2, 0xf2, 0x87, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x62, 0x82, 0x41, 0x5f, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65,
	0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d,
	0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0xa1, 0x01, 0x0a, 0x0d, 0x72, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0xf5, 0xf3, 0xcc, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5f,
	0x82, 0x41, 0x5c, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x52,
	0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0xb4, 0x01,
	0x0a, 0x15, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x88, 0xa8, 0xa6, 0xce, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x67, 0x82, 0x41, 0x64, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x70, 0x63, 0x74, 0x52,
	0x13, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x50, 0x63, 0x74, 0x1a, 0xa8, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x9e,
	0x01, 0x0a, 0x12, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x8d, 0x80, 0xa4, 0xf1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x57, 0x82, 0x41, 0x54, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65,
	0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x65, 0x6e, 0x64, 0x2d,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x10, 0x73,
	0x65, 0x6e, 0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x1a,
	0xa2, 0x0f, 0x0a, 0x09, 0x4c, 0x32, 0x56, 0x70, 0x6e, 0x45, 0x76, 0x70, 0x6e, 0x12, 0xbc, 0x01,
	0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0xde,
	0xef, 0xb2, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x41, 0x66,
	0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x4c,
	0x32, 0x56, 0x70, 0x6e, 0x45, 0x76, 0x70, 0x6e, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x42, 0x49, 0x82, 0x41, 0x46, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65,
	0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x2d, 0x65, 0x76,
	0x70, 0x6e, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52,
	0x0b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0xd5, 0x0d, 0x0a,
	0x0b, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0xc0, 0x01, 0x0a,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xaf, 0xba, 0x83, 0xbe, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x52, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42,
	0x67, 0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73,
	0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x4c, 0x32, 0x56, 0x70, 0x6e, 0x45, 0x76,
	0x70, 0x6e, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x50, 0x82, 0x41, 0x4d, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70,
	0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x2d, 0x65,
	0x76, 0x70, 0x6e, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0xbb, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xa0, 0xfd, 0xb4, 0x5d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x51, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x42, 0x67, 0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50,
	0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69,
	0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x4c, 0x32, 0x56, 0x70, 0x6e, 0x45,
	0x76, 0x70, 0x6e, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70,
	0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x2d, 0x65,
	0x76, 0x70, 0x6e, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xa3, 0x05,
	0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x98, 0x01, 0x0a, 0x0c, 0x6d, 0x61, 0x78,
	0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0xd1, 0xe0, 0x87, 0x73, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5d, 0x82, 0x41, 0x5a, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x32, 0x76, 0x70, 0x6e,
	0x2d, 0x65, 0x76, 0x70, 0x6e, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x65, 0x73, 0x12, 0xa4, 0x01, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0xd9, 0xa7, 0xd7, 0x7d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x61, 0x82, 0x41, 0x5e, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x2d,
	0x65, 0x76, 0x70, 0x6e, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2d, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0xa1, 0x01, 0x0a, 0x0d, 0x72,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0xbf, 0xe2, 0xcc,
	0xd4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x5e, 0x82, 0x41, 0x5b, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x2d, 0x65, 0x76, 0x70, 0x6e, 0x2f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x72,
	0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0xb2,
	0x01, 0x0a, 0x15, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18, 0xbe, 0xb9, 0xab, 0x79, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x66, 0x82, 0x41, 0x63, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x2d,
	0x65, 0x76, 0x70, 0x6e, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x70, 0x63, 0x74, 0x52, 0x13,
	0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x50, 0x63, 0x74, 0x1a, 0x9e, 0x05, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x97, 0x01,
	0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0xac,
	0xd6, 0xdf, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5c, 0x82, 0x41,
	0x59, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x6c, 0x32, 0x76, 0x70, 0x6e, 0x2d, 0x65, 0x76, 0x70, 0x6e, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x61,
	0x78, 0x2d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0xa3, 0x01, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x90, 0x91, 0xd3,
	0x6c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x60, 0x82, 0x41, 0x5d, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f,
	0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x32,
	0x76, 0x70, 0x6e, 0x2d, 0x65, 0x76, 0x70, 0x6e, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2d, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0f, 0x70, 0x72,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0xa0, 0x01,
	0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18,
	0xa0, 0x9a, 0x9c, 0x83, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x5d, 0x82, 0x41, 0x5a, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x2d, 0x65, 0x76, 0x70,
	0x6e, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2d, 0x74, 0x69, 0x6d,
	0x65, 0x72, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72,
	0x12, 0xb1, 0x01, 0x0a, 0x15, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18, 0xe1, 0xd0, 0xaf, 0x19, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x65, 0x82, 0x41, 0x62, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65,
	0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x32, 0x76, 0x70,
	0x6e, 0x2d, 0x65, 0x76, 0x70, 0x6e, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x70, 0x63, 0x74, 0x52,
	0x13, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x50, 0x63, 0x74, 0x1a, 0xa4, 0x0f, 0x0a, 0x09, 0x4c, 0x32, 0x56, 0x70, 0x6e, 0x56, 0x70,
	0x6c, 0x73, 0x12, 0xbd, 0x01, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x94, 0xc2, 0xf5, 0xa2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50,
	0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x2e, 0x4c, 0x32, 0x56, 0x70, 0x6e, 0x56, 0x70, 0x6c, 0x73, 0x2e, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x49, 0x82, 0x41, 0x46, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f,
	0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x32,
	0x76, 0x70, 0x6e, 0x2d, 0x76, 0x70, 0x6c, 0x73, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x1a, 0xd6, 0x0d, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0xc0, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x99, 0xed,
	0xe2, 0xde, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x41, 0x66,
	0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x4c,
	0x32, 0x56, 0x70, 0x6e, 0x56, 0x70, 0x6c, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x50, 0x82, 0x41, 0x4d,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c,
	0x32, 0x76, 0x70, 0x6e, 0x2d, 0x76, 0x70, 0x6c, 0x73, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xbc, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0xee, 0xa6, 0x9e, 0xe6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e,
	0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69,
	0x2e, 0x4c, 0x32, 0x56, 0x70, 0x6e, 0x56, 0x70, 0x6c, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x4f, 0x82, 0x41,
	0x4c, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x6c, 0x32, 0x76, 0x70, 0x6e, 0x2d, 0x76, 0x70, 0x6c, 0x73, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x1a, 0xa3, 0x05, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x98, 0x01, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73,
	0x18, 0xc7, 0xa5, 0xbf, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5d,
	0x82, 0x41, 0x5a, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x2d, 0x76, 0x70, 0x6c, 0x73, 0x2f, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x52, 0x0b, 0x6d,
	0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0xa4, 0x01, 0x0a, 0x10, 0x70,
	0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x18,
	0x87, 0xc6, 0x81, 0x71, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x61, 0x82,
	0x41, 0x5e, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x2d, 0x76, 0x70, 0x6c, 0x73, 0x2f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e,
	0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77,
	0x6e, 0x12, 0xa1, 0x01, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x72, 0x18, 0x85, 0x85, 0xa6, 0xa5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5e, 0x82, 0x41, 0x5b, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x32, 0x76, 0x70, 0x6e,
	0x2d, 0x76, 0x70, 0x6c, 0x73, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0xb2, 0x01, 0x0a, 0x15, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18,
	0xd8, 0xfd, 0x96, 0x4c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x66, 0x82,
	0x41, 0x63, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x2d, 0x76, 0x70, 0x6c, 0x73, 0x2f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x2d, 0x70, 0x63, 0x74, 0x52, 0x13, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74, 0x1a, 0x9e, 0x05, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x97, 0x01, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0xb6, 0xb1, 0x9c, 0x5f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x5c, 0x82, 0x41, 0x59, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x2d, 0x76, 0x70, 0x6c,
	0x73, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65,
	0x73, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0xa3,
	0x01, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x64,
	0x6f, 0x77, 0x6e, 0x18, 0xfa, 0xd5, 0x9d, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x60, 0x82, 0x41, 0x5d, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x2d, 0x76, 0x70, 0x6c, 0x73, 0x2f,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x74, 0x65, 0x61, 0x72, 0x64,
	0x6f, 0x77, 0x6e, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x72,
	0x64, 0x6f, 0x77, 0x6e, 0x12, 0x9f, 0x01, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0xaa, 0xb6, 0xa9, 0x4c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5d, 0x82, 0x41, 0x5a, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70,
	0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x32, 0x76,
	0x70, 0x6e, 0x2d, 0x76, 0x70, 0x6c, 0x73, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0xb2, 0x01, 0x0a, 0x15, 0x77, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74,
	0x18, 0xf7, 0xf7, 0xd1, 0xb8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x65, 0x82, 0x41, 0x62, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x2d, 0x76, 0x70, 0x6c, 0x73, 0x2f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x2d, 0x70, 0x63, 0x74, 0x52, 0x13, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74, 0x1a, 0xba, 0x10, 0x0a, 0x12,
	0x4c, 0x33, 0x56, 0x70, 0x6e, 0x49, 0x70, 0x76, 0x34, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x12, 0xd0, 0x01, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0xd0, 0xd3, 0x9c, 0x94, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x54, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50,
	0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x2e, 0x4c, 0x33, 0x56, 0x70, 0x6e, 0x49, 0x70, 0x76, 0x34, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x42, 0x53, 0x82, 0x41, 0x50, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76,
	0x34, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0xd0, 0x0e, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0xd3, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0xe5, 0xb4, 0xc1, 0xff, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50, 0x65, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66,
	0x69, 0x2e, 0x4c, 0x33, 0x56, 0x70, 0x6e, 0x49, 0x70, 0x76, 0x34, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x5a, 0x82, 0x41, 0x57, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e,
	0x2d, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xce, 0x01, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xda, 0xd5, 0xe3, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5a,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e,
	0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66,
	0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x4c, 0x33, 0x56, 0x70, 0x6e, 0x49, 0x70, 0x76, 0x34, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x59, 0x82, 0x41, 0x56, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f,
	0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33,
	0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xce, 0x05, 0x0a,
	0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xa3, 0x01, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x9b, 0xc3, 0xa4, 0xc4, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x67, 0x82, 0x41, 0x64, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e,
	0x2d, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73,
	0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0xaf, 0x01,
	0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f,
	0x77, 0x6e, 0x18, 0xb3, 0xc1, 0xbf, 0x9a, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x6b, 0x82, 0x41, 0x68, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x2d,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0f,
	0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x12,
	0xab, 0x01, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x72, 0x18, 0xd1, 0x8f, 0xed, 0xce, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x68, 0x82, 0x41, 0x65, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70,
	0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69,
	0x70, 0x76, 0x34, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x52,
	0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0xbd, 0x01,
	0x0a, 0x15, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18, 0xcc, 0xe9, 0xa1, 0xed, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x70, 0x82, 0x41, 0x6d, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d,
	0x69, 0x70, 0x76, 0x34, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x70, 0x63, 0x74, 0x52, 0x13, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74, 0x1a, 0xc8, 0x05,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xa1, 0x01, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0xea, 0xd6, 0xe7, 0x58, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x66, 0x82, 0x41, 0x63, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d,
	0x69, 0x70, 0x76, 0x34, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x52, 0x0b,
	0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0xae, 0x01, 0x0a, 0x10,
	0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e,
	0x18, 0xd6, 0x89, 0xf2, 0xf7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x6a, 0x82, 0x41, 0x67, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2d, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0f, 0x70, 0x72, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0xaa, 0x01, 0x0a,
	0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x86,
	0xd7, 0x87, 0x8f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x67, 0x82, 0x41, 0x64, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x34,
	0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x0c, 0x72, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0xbc, 0x01, 0x0a, 0x15, 0x77, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f,
	0x70, 0x63, 0x74, 0x18, 0xcb, 0xbd, 0xea, 0x99, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x6f, 0x82, 0x41, 0x6c, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x34,
	0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x77, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2d,
	0x70, 0x63, 0x74, 0x52, 0x13, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74, 0x1a, 0x98, 0x10, 0x0a, 0x10, 0x4c, 0x33, 0x56,
	0x70, 0x6e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0xcc, 0x01,
	0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0xdb,
	0xca, 0xe8, 0x8d, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x41,
	0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e,
	0x4c, 0x33, 0x56, 0x70, 0x6e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x51, 0x82, 0x41,
	0x4e, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52,
	0x0b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0xb4, 0x0e, 0x0a,
	0x0b, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0xce, 0x01, 0x0a,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x8c, 0xb5, 0xf4, 0x2d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x59, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67,
	0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e,
	0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x4c, 0x33, 0x56, 0x70, 0x6e, 0x49, 0x70, 0x76,
	0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x58, 0x82, 0x41, 0x55,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c,
	0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xca, 0x01,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x85, 0xd2, 0xda, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x58, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67,
	0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e,
	0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x4c, 0x33, 0x56, 0x70, 0x6e, 0x49, 0x70, 0x76,
	0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x57, 0x82, 0x41, 0x54, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f,
	0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33,
	0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xc3, 0x05, 0x0a, 0x06, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xa0, 0x01, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x80, 0xff, 0xc2, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x65, 0x82, 0x41, 0x62, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65,
	0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70,
	0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d,
	0x61, 0x78, 0x2d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x52, 0x0b, 0x6d, 0x61, 0x78,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0xad, 0x01, 0x0a, 0x10, 0x70, 0x72, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0xdc, 0xb1,
	0xfc, 0xa7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x69, 0x82, 0x41,
	0x66, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x74,
	0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0xa8, 0x01, 0x0a, 0x0d, 0x72, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0xac, 0xe8, 0xe1, 0x53, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x66, 0x82,
	0x41, 0x63, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2d,
	0x74, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x72, 0x12, 0xba, 0x01, 0x0a, 0x15, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x95, 0xc1,
	0x84, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6e, 0x82, 0x41, 0x6b,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c,
	0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x2d, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x70, 0x63, 0x74, 0x52, 0x13, 0x77, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74,
	0x1a, 0xc0, 0x05, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xa0, 0x01, 0x0a, 0x0c, 0x6d,
	0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0xbb, 0xaf, 0xdd, 0xd4,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x64, 0x82, 0x41, 0x61, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f,
	0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33,
	0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73,
	0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0xac, 0x01,
	0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f,
	0x77, 0x6e, 0x18, 0xd3, 0xd5, 0xd7, 0xa2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x68, 0x82, 0x41, 0x65, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x2d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2d, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0f, 0x70, 0x72, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0xa7, 0x01, 0x0a,
	0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0xf1,
	0xdb, 0xbb, 0x71, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x65, 0x82, 0x41, 0x62, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x2d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0xba, 0x01, 0x0a, 0x15, 0x77, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74,
	0x18, 0xec, 0x89, 0xaa, 0x94, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x6d, 0x82, 0x41, 0x6a, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x70, 0x63, 0x74, 0x52, 0x13,
	0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x50, 0x63, 0x74, 0x1a, 0xb5, 0x10, 0x0a, 0x12, 0x4c, 0x33, 0x56, 0x70, 0x6e, 0x49, 0x70, 0x76,
	0x36, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0xd0, 0x01, 0x0a, 0x0c, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0xbe, 0xf9, 0xe1, 0x9b,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x41, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x4c, 0x33, 0x56,
	0x70, 0x6e, 0x49, 0x70, 0x76, 0x36, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x53, 0x82, 0x41, 0x50,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c,
	0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0xcb, 0x0e,
	0x0a, 0x0b, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0xd2, 0x01,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x8f, 0xde, 0xf5, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x5b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42,
	0x67, 0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73,
	0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x4c, 0x33, 0x56, 0x70, 0x6e, 0x49, 0x70,
	0x76, 0x36, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x5a,
	0x82, 0x41, 0x57, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0xcf, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x80, 0x84, 0xf6,
	0xfd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x4c, 0x33,
	0x56, 0x70, 0x6e, 0x49, 0x70, 0x76, 0x36, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x59, 0x82, 0x41, 0x56, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x36,
	0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x1a, 0xca, 0x05, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0xa2, 0x01, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73,
	0x18, 0xb1, 0xcb, 0xb6, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x67,
	0x82, 0x41, 0x64, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x65, 0x73, 0x12, 0xae, 0x01, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0xb9, 0xf6, 0xf6, 0x45, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6b, 0x82, 0x41, 0x68, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e,
	0x2d, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x74, 0x65, 0x61, 0x72,
	0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61,
	0x72, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0xaa, 0x01, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x9f, 0xa9, 0xd5, 0x50, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x68, 0x82, 0x41, 0x65, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f,
	0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33,
	0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2d, 0x74,
	0x69, 0x6d, 0x65, 0x72, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x72, 0x12, 0xbc, 0x01, 0x0a, 0x15, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x9e, 0xf0, 0xb6,
	0x53, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x70, 0x82, 0x41, 0x6d, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f,
	0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33,
	0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x2d, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x70, 0x63, 0x74, 0x52, 0x13, 0x77, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x63,
	0x74, 0x1a, 0xc7, 0x05, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xa2, 0x01, 0x0a, 0x0c,
	0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x8c, 0x81, 0xca,
	0xe4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x66, 0x82, 0x41, 0x63,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c,
	0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x65, 0x73, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73,
	0x12, 0xad, 0x01, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61,
	0x72, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0xf0, 0xe3, 0xd3, 0x55, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x6a, 0x82, 0x41, 0x67, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76,
	0x36, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70,
	0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x52,
	0x0f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e,
	0x12, 0xa9, 0x01, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x72, 0x18, 0x80, 0xf7, 0xcd, 0x45, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x67, 0x82, 0x41, 0x64, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70,
	0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69,
	0x70, 0x76, 0x36, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x0c,
	0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0xbc, 0x01, 0x0a,
	0x15, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18, 0xc1, 0xfa, 0xc1, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6f, 0x82, 0x41, 0x6c, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70,
	0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69,
	0x70, 0x76, 0x36, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x2d, 0x70, 0x63, 0x74, 0x52, 0x13, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74, 0x1a, 0x99, 0x10, 0x0a, 0x10,
	0x4c, 0x33, 0x56, 0x70, 0x6e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x12, 0xcc, 0x01, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0xe5, 0xdc, 0xd9, 0xf0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50, 0x65, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x2e, 0x4c, 0x33, 0x56, 0x70, 0x6e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42,
	0x51, 0x82, 0x41, 0x4e, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a,
	0xb5, 0x0e, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0xcf, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xaa, 0xf6, 0xc6, 0xbf, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x4c, 0x33, 0x56, 0x70,
	0x6e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x58, 0x82, 0x41, 0x55, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0xcb, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xc7, 0xd2, 0x8c, 0xc5,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x41, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x4c, 0x33, 0x56,
	0x70, 0x6e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42,
	0x57, 0x82, 0x41, 0x54, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a,
	0xc4, 0x05, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xa1, 0x01, 0x0a, 0x0c, 0x6d,
	0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0xfa, 0xb8, 0xce, 0xdd,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x65, 0x82, 0x41, 0x62, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f,
	0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33,
	0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65,
	0x73, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0xac,
	0x01, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x64,
	0x6f, 0x77, 0x6e, 0x18, 0xe6, 0xdd, 0xb2, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x69, 0x82, 0x41, 0x66, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x2d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2d, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0f, 0x70, 0x72,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0xa8, 0x01,
	0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18,
	0xf6, 0xa1, 0xad, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x66, 0x82, 0x41, 0x63, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x36,
	0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x72, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0xbb, 0x01, 0x0a, 0x15, 0x77, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70,
	0x63, 0x74, 0x18, 0xfb, 0xb4, 0xf7, 0x87, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x6e, 0x82, 0x41, 0x6b, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x2d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x77, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x70, 0x63,
	0x74, 0x52, 0x13, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74, 0x1a, 0xbe, 0x05, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0xa0, 0x01, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65,
	0x73, 0x18, 0x99, 0x98, 0xca, 0xdf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x64, 0x82, 0x41, 0x61, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x65, 0x73, 0x12, 0xab, 0x01, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0xd1, 0xe9, 0x86, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x68, 0x82, 0x41, 0x65, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d,
	0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e,
	0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77,
	0x6e, 0x12, 0xa7, 0x01, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x72, 0x18, 0xb7, 0xdf, 0xb5, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x65, 0x82, 0x41, 0x62, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d,
	0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x0c, 0x72,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0xb9, 0x01, 0x0a, 0x15,
	0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x5f, 0x70, 0x63, 0x74, 0x18, 0xb6, 0xb5, 0x93, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x6d, 0x82, 0x41, 0x6a, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x2d, 0x69, 0x70, 0x76,
	0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x77, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x70,
	0x63, 0x74, 0x52, 0x13, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74, 0x1a, 0xf9, 0x0f, 0x0a, 0x0e, 0x53, 0x72, 0x74, 0x65,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x70, 0x76, 0x34, 0x12, 0xc7, 0x01, 0x0a, 0x0c, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0xdb, 0xbf, 0x90, 0x78,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x53, 0x72, 0x74, 0x65,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x1a, 0x9c, 0x0e, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0xcb, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x8c, 0xec, 0xae, 0xfe, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e,
	0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69,
	0x2e, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x70, 0x76, 0x34, 0x2e,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x56, 0x82, 0x41, 0x53, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0xc6, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x85, 0x9f, 0xf3,
	0x57, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x41, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x53, 0x72, 0x74,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x55, 0x82,
	0x41, 0x52, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x69, 0x70, 0x76,
	0x34, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xbc, 0x05, 0x0a, 0x06,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x9f, 0x01, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x80, 0x84, 0xb6, 0x8f, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x63, 0x82, 0x41, 0x60, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d,
	0x61, 0x78, 0x2d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x52, 0x0b, 0x6d, 0x61, 0x78,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0xab, 0x01, 0x0a, 0x10, 0x70, 0x72, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0xdc, 0x86,
	0x96, 0xc0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x67, 0x82, 0x41,
	0x64, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x69, 0x70, 0x76, 0x34,
	0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x74, 0x65, 0x61,
	0x72, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x65,
	0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0xa6, 0x01, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0xac, 0xc7, 0xfa, 0x6b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x64, 0x82, 0x41, 0x61,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x73,
	0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x2f,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65,
	0x72, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12,
	0xb8, 0x01, 0x0a, 0x15, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x95, 0x80, 0xb7, 0x7a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6c, 0x82, 0x41, 0x69, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x73, 0x72, 0x74, 0x65, 0x2d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x2d, 0x70, 0x63, 0x74, 0x52, 0x13, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74, 0x1a, 0xb6, 0x05, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x9d, 0x01, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0xbb, 0xb6, 0xac, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x62, 0x82, 0x41, 0x5f, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x65, 0x73, 0x12, 0xa9, 0x01, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0xd3, 0xcc, 0x89, 0x1c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x66, 0x82, 0x41, 0x63, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x73, 0x72, 0x74, 0x65, 0x2d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70,
	0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x52,
	0x0f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e,
	0x12, 0xa6, 0x01, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x72, 0x18, 0xf1, 0xe0, 0xae, 0xcc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x63, 0x82, 0x41, 0x60, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x0c, 0x72, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0xb7, 0x01, 0x0a, 0x15, 0x77, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f,
	0x70, 0x63, 0x74, 0x18, 0xec, 0xae, 0xb4, 0x41, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x6b, 0x82, 0x41, 0x68, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2d, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x70, 0x63, 0x74, 0x52, 0x13,
	0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x50, 0x63, 0x74, 0x1a, 0xfc, 0x0f, 0x0a, 0x0e, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x49, 0x70, 0x76, 0x36, 0x12, 0xc8, 0x01, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0xd1, 0x99, 0xac, 0x96, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x50, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42,
	0x67, 0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73,
	0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x1a, 0x9e, 0x0e, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0xcb, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xf6, 0xd5, 0x9a,
	0xe4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x53, 0x72,
	0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x56, 0x82, 0x41, 0x53, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x69,
	0x70, 0x76, 0x36, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0xc7, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xa3, 0xda, 0xdf, 0xfc, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e,
	0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66,
	0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x53, 0x72, 0x74, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x55, 0x82, 0x41, 0x52,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x73,
	0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x2f,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xbd, 0x05, 0x0a, 0x06, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x9e, 0x01, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0xce, 0xb8, 0xdb, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x63, 0x82, 0x41, 0x60, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x61, 0x78, 0x2d,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0xab, 0x01, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x82, 0xd1, 0xc5, 0xa5, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x67, 0x82, 0x41, 0x64, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70,
	0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x73, 0x72, 0x74,
	0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f,
	0x77, 0x6e, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x72, 0x64,
	0x6f, 0x77, 0x6e, 0x12, 0xa7, 0x01, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0xd2, 0xf9, 0xc2, 0x9d, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x64, 0x82, 0x41, 0x61, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70,
	0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x73, 0x72, 0x74,
	0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x52,
	0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0xb9, 0x01,
	0x0a, 0x15, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18, 0xdf, 0xa2, 0xcf, 0xe6, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6c, 0x82, 0x41, 0x69, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x77,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x2d, 0x70, 0x63, 0x74, 0x52, 0x13, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74, 0x1a, 0xb6, 0x05, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x9e, 0x01, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x65, 0x73, 0x18, 0xdd, 0xe2, 0xfe, 0xc3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x62, 0x82, 0x41, 0x5f, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x61, 0x78, 0x2d, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x65, 0x73, 0x12, 0xa9, 0x01, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x9d, 0xcb, 0xe3, 0x49, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x66, 0x82, 0x41, 0x63, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x73, 0x72, 0x74, 0x65, 0x2d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70,
	0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x52,
	0x0f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e,
	0x12, 0xa5, 0x01, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x72, 0x18, 0xa3, 0xf0, 0xfe, 0x55, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x63, 0x82, 0x41, 0x60, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70,
	0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0xb7, 0x01, 0x0a, 0x15, 0x77, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70,
	0x63, 0x74, 0x18, 0xca, 0x8e, 0xb5, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x6b, 0x82, 0x41, 0x68, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d,
	0x69, 0x70, 0x76, 0x36, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x2d,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x70, 0x63, 0x74, 0x52, 0x13, 0x77,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50,
	0x63, 0x74, 0x1a, 0x96, 0x02, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x98, 0x01, 0x0a,
	0x0d, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xe1,
	0xf3, 0xd5, 0xcc, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x67, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x41, 0x46, 0x49, 0x53, 0x41, 0x46, 0x49, 0x54,
	0x59, 0x50, 0x45, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x0b, 0x61, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x72, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0xf6, 0x91, 0xcc, 0xb1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x1a, 0x8d, 0x16, 0x0a, 0x10,
	0x55, 0x73, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73,
	0x12, 0xb6, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xc5, 0xf8, 0xf4, 0xe1,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x41, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x55, 0x73, 0x65,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x42, 0x4b, 0x82, 0x41, 0x48, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65,
	0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x75, 0x73, 0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x65, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xad, 0x01, 0x0a, 0x04, 0x65, 0x62,
	0x67, 0x70, 0x18, 0xfb, 0xe9, 0x83, 0x70, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50, 0x65, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x73, 0x2e, 0x45, 0x62, 0x67, 0x70, 0x42, 0x49, 0x82, 0x41, 0x46, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65,
	0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x75, 0x73, 0x65, 0x2d,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x65,
	0x62, 0x67, 0x70, 0x52, 0x04, 0x65, 0x62, 0x67, 0x70, 0x12, 0xae, 0x01, 0x0a, 0x04, 0x69, 0x62,
	0x67, 0x70, 0x18, 0xc7, 0x9a, 0x8f, 0xdd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50, 0x65,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x73, 0x2e, 0x49, 0x62, 0x67, 0x70, 0x42, 0x49, 0x82, 0x41, 0x46, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70,
	0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x75, 0x73, 0x65,
	0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f,
	0x69, 0x62, 0x67, 0x70, 0x52, 0x04, 0x69, 0x62, 0x67, 0x70, 0x12, 0xb1, 0x01, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0xba, 0xd4, 0xbc, 0x4a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50,
	0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x4a, 0x82, 0x41, 0x47,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x75,
	0x73, 0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x2d, 0x70, 0x61, 0x74, 0x68,
	0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x90,
	0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x85, 0x01, 0x0a, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xeb, 0xa0, 0x99, 0x52, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x53, 0x82, 0x41, 0x50, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x75, 0x73, 0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x65, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x1a, 0xab, 0x08, 0x0a, 0x04, 0x45, 0x62, 0x67, 0x70, 0x12, 0xc0, 0x01, 0x0a, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xac, 0x98, 0xf5, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x52, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70,
	0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41,
	0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x2e, 0x45, 0x62, 0x67, 0x70, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x50, 0x82, 0x41, 0x4d, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x75, 0x73, 0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x65, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x65, 0x62, 0x67, 0x70, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xbc, 0x01,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xa5, 0xac, 0x81, 0xc8, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x51, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42,
	0x67, 0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73,
	0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x2e, 0x45, 0x62, 0x67, 0x70, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65,
	0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x75, 0x73, 0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x65, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x65, 0x62, 0x67, 0x70, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xd0, 0x02, 0x0a,
	0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xa6, 0x01, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x61, 0x73, 0x18, 0x90, 0xc1,
	0xbf, 0x39, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x62, 0x82, 0x41, 0x5f,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x75,
	0x73, 0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x2d, 0x70, 0x61, 0x74, 0x68,
	0x73, 0x2f, 0x65, 0x62, 0x67, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x2d, 0x61, 0x73, 0x52,
	0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x41, 0x73,
	0x12, 0x9c, 0x01, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x73, 0x18, 0xbc, 0xa5, 0xb2, 0x9e, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x5e, 0x82, 0x41, 0x5b, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x75, 0x73, 0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x65, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x65, 0x62, 0x67, 0x70, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x2d, 0x70, 0x61, 0x74, 0x68,
	0x73, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x61, 0x74, 0x68, 0x73, 0x1a,
	0xcd, 0x02, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xa6, 0x01, 0x0a, 0x11, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x61, 0x73, 0x18,
	0x91, 0xb1, 0xa7, 0xc4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x61,
	0x82, 0x41, 0x5e, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x75, 0x73, 0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x2d, 0x70,
	0x61, 0x74, 0x68, 0x73, 0x2f, 0x65, 0x62, 0x67, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x2d, 0x61,
	0x73, 0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65,
	0x41, 0x73, 0x12, 0x9a, 0x01, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x73, 0x18, 0x81, 0xa2, 0x9f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x5d, 0x82, 0x41, 0x5a, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x75, 0x73, 0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x65, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x65, 0x62, 0x67, 0x70, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x2d, 0x70, 0x61, 0x74, 0x68,
	0x73, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x61, 0x74, 0x68, 0x73, 0x1a,
	0xd8, 0x05, 0x0a, 0x04, 0x49, 0x62, 0x67, 0x70, 0x12, 0xbf, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0xd8, 0xaf, 0xcc, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50, 0x65,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x73, 0x2e, 0x49, 0x62, 0x67, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x50, 0x82, 0x41, 0x4d, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x75, 0x73, 0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65,
	0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x69, 0x62, 0x67, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xbc, 0x01, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0xf1, 0x84, 0xe4, 0xfd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e,
	0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66,
	0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x2e, 0x49, 0x62, 0x67, 0x70, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x75, 0x73, 0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x65, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x69, 0x62, 0x67, 0x70, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xa6, 0x01, 0x0a, 0x06, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x9b, 0x01, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0xa0, 0xd6, 0xa0, 0x7d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x5e, 0x82, 0x41, 0x5b, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65,
	0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x75, 0x73, 0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x65, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x69, 0x62, 0x67, 0x70, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x2d, 0x70,
	0x61, 0x74, 0x68, 0x73, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x61, 0x74,
	0x68, 0x73, 0x1a, 0xa5, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x9b, 0x01, 0x0a,
	0x0d, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0xe5,
	0xec, 0xa2, 0xe7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5d, 0x82,
	0x41, 0x5a, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x75, 0x73, 0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x2d, 0x70, 0x61,
	0x74, 0x68, 0x73, 0x2f, 0x69, 0x62, 0x67, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d,
	0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x52, 0x0c, 0x6d, 0x61,
	0x78, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x61, 0x74, 0x68, 0x73, 0x1a, 0x8e, 0x01, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x98, 0xe1, 0x9a, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x52,
	0x82, 0x41, 0x4f, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x75, 0x73, 0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x2d, 0x70,
	0x61, 0x74, 0x68, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x1a, 0xef, 0x01, 0x0a, 0x0a,
	0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x8e, 0x01, 0x0a, 0x0d, 0x61,
	0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x67, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x41, 0x46, 0x49, 0x53, 0x41, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x42, 0x3f, 0x82,
	0x41, 0x3c, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x0b,
	0x61, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x08, 0x61,
	0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50,
	0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x52, 0x07, 0x61, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x1a, 0x90, 0x0c,
	0x0a, 0x0b, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x86, 0x01,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xc0, 0xee, 0x9c, 0x24, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42,
	0x67, 0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x32, 0x82, 0x41, 0x2f, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f,
	0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x79,
	0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x82, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0xb9, 0xac, 0xde, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x31, 0x82, 0x41, 0x2e, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xf9, 0x04, 0x0a, 0x06,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xb4, 0x01, 0x0a, 0x15, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x18, 0xd0, 0xe8, 0x40, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x42, 0x48,
	0x82, 0x41, 0x45, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2d, 0x65, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x13, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0xb5, 0x01,
	0x0a, 0x15, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0xbb, 0xe7, 0x97, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x42, 0x48, 0x82, 0x41, 0x45, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x2d, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x2d, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x13, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x7f, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x9c, 0x8a, 0x8c, 0x4b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x2d, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x7f, 0x0a, 0x0d, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0xa7, 0xb8, 0x85, 0x37, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0c, 0x69, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x1a, 0xf6, 0x04, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0xb5, 0x01, 0x0a, 0x15, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x65, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0xed, 0xa6, 0xb2, 0xfe,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x42, 0x47, 0x82, 0x41, 0x44,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x70, 0x70, 0x6c,
	0x79, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2d, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x13, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0xb4, 0x01, 0x0a, 0x15, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x18, 0xf2, 0xf3, 0xd2, 0x6d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x47, 0x82, 0x41, 0x44, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2d, 0x69, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x13, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x7e, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x18, 0xc5, 0xc2, 0x90, 0x25, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x7e, 0x0a, 0x0d, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x18, 0xba, 0x89, 0xb4, 0x70, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x0c, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x1a, 0x80, 0x09, 0x0a, 0x0d, 0x41, 0x73, 0x50, 0x61, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x8c, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xa6, 0xb4,
	0xbe, 0xd9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x41, 0x73,
	0x50, 0x61, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2f, 0x61, 0x73, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x87, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x93, 0xaf, 0xbe, 0x56,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x41, 0x73, 0x50, 0x61, 0x74,
	0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x34,
	0x82, 0x41, 0x31, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61,
	0x73, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xaa, 0x03, 0x0a, 0x06,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x7c, 0x0a, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f,
	0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x73, 0x18, 0xd4, 0xca, 0xfd, 0x56, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65,
	0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x73, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x2d, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x73, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4f,
	0x77, 0x6e, 0x41, 0x73, 0x12, 0x99, 0x01, 0x0a, 0x16, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0xec, 0xdc, 0xf6, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4c, 0x82,
	0x41, 0x49, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x73,
	0x2d, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x70, 0x65, 0x65,
	0x72, 0x2d, 0x61, 0x73, 0x2d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x13, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x50, 0x65, 0x65, 0x72, 0x41, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x85, 0x01, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x65,
	0x72, 0x5f, 0x61, 0x73, 0x18, 0xd9, 0x93, 0xb4, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2f, 0x61, 0x73, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x2d, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x61, 0x73, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x50, 0x65, 0x65, 0x72, 0x41, 0x73, 0x1a, 0xa8, 0x03, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x7c, 0x0a, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6f, 0x77, 0x6e, 0x5f,
	0x61, 0x73, 0x18, 0xeb, 0xd8, 0xc8, 0xd0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2f, 0x61, 0x73, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x2d, 0x6f, 0x77,
	0x6e, 0x2d, 0x61, 0x73, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4f, 0x77, 0x6e, 0x41, 0x73,
	0x12, 0x99, 0x01, 0x0a, 0x16, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x65, 0x65,
	0x72, 0x5f, 0x61, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0xef, 0x92, 0xe1, 0xbd,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4b, 0x82, 0x41, 0x48, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f,
	0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61, 0x73, 0x2d, 0x70, 0x61,
	0x74, 0x68, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x61, 0x73,
	0x2d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x13, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x50, 0x65, 0x65, 0x72, 0x41, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x84, 0x01, 0x0a,
	0x0f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x61, 0x73,
	0x18, 0xb0, 0x88, 0xce, 0x76, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x44,
	0x82, 0x41, 0x41, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x61,
	0x73, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2d, 0x70, 0x65, 0x65,
	0x72, 0x2d, 0x61, 0x73, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x50, 0x65, 0x65,
	0x72, 0x41, 0x73, 0x1a, 0xc2, 0x08, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x72,
	0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0xa3, 0xd1, 0x8c, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x33, 0x82, 0x41, 0x30, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x6d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0xad, 0x9c, 0xde, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x31, 0x82, 0x41, 0x2e, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x62, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x73, 0x18, 0xf7, 0xa1,
	0x89, 0x96, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2e, 0x82, 0x41,
	0x2b, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x73, 0x52, 0x07, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x41, 0x73, 0x12, 0x5f, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x61, 0x73,
	0x18, 0xf2, 0xeb, 0x89, 0xb7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x2d, 0x82, 0x41, 0x2a, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x61, 0x73, 0x52, 0x06,
	0x70, 0x65, 0x65, 0x72, 0x41, 0x73, 0x12, 0x78, 0x0a, 0x0f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x91, 0x98, 0x98, 0xb1, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x35, 0x82, 0x41, 0x32, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f,
	0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x6e, 0x61, 0x6d,
	0x65, 0x52, 0x0d, 0x70, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x73, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x9e, 0xec,
	0xc5, 0xa9, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x2f, 0x82, 0x41, 0x2c, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f,
	0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x70, 0x65, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x96, 0x01, 0x0a, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x73, 0x18, 0xa8, 0xfb, 0xe4, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x67, 0x70, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x73, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x37, 0x82, 0x41, 0x34, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65,
	0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x72, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x2d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2d, 0x61, 0x73, 0x52, 0x0f, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x73, 0x12, 0x7f,
	0x0a, 0x12, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x70, 0x5f, 0x64, 0x61, 0x6d,
	0x70, 0x69, 0x6e, 0x67, 0x18, 0x9d, 0xff, 0xad, 0x9e, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x38, 0x82, 0x41, 0x35, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x2d, 0x66, 0x6c, 0x61, 0x70, 0x2d, 0x64, 0x61, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x10, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x70, 0x44, 0x61, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x12,
	0x86, 0x01, 0x0a, 0x0e, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x18, 0x8f, 0xef, 0xad, 0x56, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x67, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x34, 0x82, 0x41, 0x31, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x65, 0x6e, 0x64, 0x2d,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x1a, 0x8e, 0x06, 0x0a, 0x0c, 0x45, 0x62, 0x67,
	0x70, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x68, 0x6f, 0x70, 0x12, 0x88, 0x01, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0xda, 0xdc, 0xc4, 0x43, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50,
	0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x2e, 0x45, 0x62, 0x67, 0x70, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x68, 0x6f, 0x70,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x33, 0x82, 0x41, 0x30, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x65, 0x62, 0x67, 0x70, 0x2d, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x68, 0x6f, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x84, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xf7,
	0x8b, 0x89, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x45, 0x62,
	0x67, 0x70, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x68, 0x6f, 0x70, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x32, 0x82, 0x41, 0x2f, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2f, 0x65, 0x62, 0x67, 0x70, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x68, 0x6f, 0x70, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xf5, 0x01, 0x0a, 0x06,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6d, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0xb8, 0xec, 0xab, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x3b, 0x82, 0x41, 0x38, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f,
	0x65, 0x62, 0x67, 0x70, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x68, 0x6f, 0x70, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x7c, 0x0a, 0x0c, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x68, 0x6f,
	0x70, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0xe6, 0xed, 0x8a, 0xe8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65,
	0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x2f, 0x65, 0x62, 0x67, 0x70, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x68,
	0x6f, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x68,
	0x6f, 0x70, 0x2d, 0x74, 0x74, 0x6c, 0x52, 0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x68, 0x6f, 0x70,
	0x54, 0x74, 0x6c, 0x1a, 0xf3, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x6d, 0x0a,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x89, 0xc3, 0x9c, 0xb1, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3a, 0x82, 0x41, 0x37, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x65, 0x62, 0x67, 0x70, 0x2d, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x68, 0x6f, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x7b, 0x0a, 0x0c,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x68, 0x6f, 0x70, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0xa1, 0x84, 0xa1,
	0xa6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3f, 0x82, 0x41, 0x3c,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x65, 0x62, 0x67, 0x70,
	0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x68, 0x6f, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x68, 0x6f, 0x70, 0x2d, 0x74, 0x74, 0x6c, 0x52, 0x0b, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x68, 0x6f, 0x70, 0x54, 0x74, 0x6c, 0x1a, 0xd5, 0x04, 0x0a, 0x0d, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x8a, 0x01, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x8d, 0xa7, 0xd8, 0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x39, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70,
	0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x34, 0x82, 0x41, 0x31, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f,
	0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x2d, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x86, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0xc2, 0x87, 0x9f, 0x58, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50, 0x65, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x33, 0x82, 0x41, 0x30, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70,
	0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x1a, 0x96, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x8b, 0x01, 0x0a,
	0x11, 0x74, 0x72, 0x65, 0x61, 0x74, 0x5f, 0x61, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x18, 0xc8, 0xab, 0xa4, 0xef, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x74, 0x72, 0x65, 0x61, 0x74, 0x2d, 0x61, 0x73,
	0x2d, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x0f, 0x74, 0x72, 0x65, 0x61, 0x74,
	0x41, 0x73, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x1a, 0x94, 0x01, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x11, 0x74, 0x72, 0x65, 0x61, 0x74, 0x5f, 0x61,
	0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0xbf, 0xc8, 0xb1, 0x99, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70,
	0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74,
	0x72, 0x65, 0x61, 0x74, 0x2d, 0x61, 0x73, 0x2d, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x52, 0x0f, 0x74, 0x72, 0x65, 0x61, 0x74, 0x41, 0x73, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x1a, 0xcd, 0x0a, 0x0a, 0x0f, 0x47, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x52, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x8e, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0xe0, 0x8c, 0xc4, 0x5e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e,
	0x47, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x2d,
	0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x8b, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0xd9, 0xeb, 0x89, 0xbf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50, 0x65, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x2e, 0x47, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x2d,
	0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x1a, 0x8f, 0x04, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x71, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xa2, 0xe9, 0xde, 0xc1, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70,
	0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66,
	0x75, 0x6c, 0x2d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x7c, 0x0a, 0x0b, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x5f, 0x6f, 0x6e, 0x6c,
	0x79, 0x18, 0x8e, 0xf3, 0xa2, 0x9d, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x2d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x2d,
	0x6f, 0x6e, 0x6c, 0x79, 0x52, 0x0a, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x79,
	0x12, 0x7f, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0xe6, 0xa8, 0xf5, 0x9f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x43, 0x82, 0x41, 0x40, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f,
	0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x2d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2d,
	0x74, 0x69, 0x6d, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x92, 0x01, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xb9, 0x97, 0x97, 0xd7, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x48, 0x82, 0x41, 0x45,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x67, 0x72, 0x61, 0x63,
	0x65, 0x66, 0x75, 0x6c, 0x2d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x88, 0x04, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x70, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x9f, 0xf6, 0xdf, 0xfc,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3d, 0x82, 0x41, 0x3a, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f,
	0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x67, 0x72, 0x61, 0x63, 0x65,
	0x66, 0x75, 0x6c, 0x2d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x7a, 0x0a, 0x0b, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x5f, 0x6f, 0x6e, 0x6c,
	0x79, 0x18, 0x97, 0x8a, 0xbc, 0x61, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x41, 0x82, 0x41, 0x3e, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f,
	0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x2d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x2d, 0x6f, 0x6e,
	0x6c, 0x79, 0x52, 0x0a, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x7e,
	0x0a, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xcd,
	0xc7, 0xed, 0xb0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x42, 0x82,
	0x41, 0x3f, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x67, 0x72,
	0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x2d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2d, 0x74, 0x69, 0x6d,
	0x65, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x90,
	0x01, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0xb8, 0x96, 0x8c, 0x6f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x47, 0x82, 0x41, 0x44, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c,
	0x2d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73,
	0x74, 0x61, 0x6c, 0x65, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2d, 0x74, 0x69, 0x6d, 0x65,
	0x52, 0x0f, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x54, 0x69, 0x6d,
	0x65, 0x1a, 0x90, 0x05, 0x0a, 0x0e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x8d, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0xa7, 0xf2, 0x92, 0xcf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e,
	0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70,
	0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2d, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x88, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x98,
	0x9c, 0x96, 0x77, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x4c, 0x6f,
	0x67, 0x67, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x34, 0x82, 0x41, 0x31, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a,
	0xb1, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xa6, 0x01, 0x0a, 0x1a, 0x6c,
	0x6f, 0x67, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x8b, 0xd1, 0x84, 0xd4, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x50, 0x82, 0x41, 0x4d, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65,
	0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67,
	0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x6c, 0x6f, 0x67, 0x2d, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2d, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x17, 0x6c, 0x6f, 0x67, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x1a, 0xae, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xa4, 0x01,
	0x0a, 0x1a, 0x6c, 0x6f, 0x67, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0xde, 0x97, 0xba,
	0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f,
	0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69,
	0x6e, 0x67, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x6c, 0x6f, 0x67, 0x2d, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2d, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x17, 0x6c, 0x6f, 0x67,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x1a, 0xf4, 0x07, 0x0a, 0x0e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65,
	0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x8d, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0xc1, 0xb5, 0xd3, 0xd3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50, 0x65,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65,
	0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2d, 0x72,
	0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x89, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0xb6, 0xbc, 0xdc, 0x89, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50, 0x65, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x34, 0x82, 0x41, 0x31, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2d, 0x72, 0x65, 0x66,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x1a, 0xe2, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x9b,
	0x01, 0x0a, 0x16, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0xf0, 0xf4, 0xd0, 0xd2, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4c, 0x82, 0x41, 0x49, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65,
	0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2d, 0x72,
	0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x2d, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2d,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x14, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x66,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x21,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0xff, 0xe6, 0xbe, 0x3b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x1d, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x52, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x4d, 0x0a, 0x21, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x18, 0xd2, 0xc5, 0xc9, 0x7c, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x1d, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x52, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x1c, 0x0a, 0x1a, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x1a, 0xe0, 0x02, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x9a, 0x01, 0x0a, 0x16, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0xd5, 0xb6,
	0x8e, 0xc4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4b, 0x82, 0x41,
	0x48, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x2d, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2d, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x14, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12,
	0x4d, 0x0a, 0x21, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0xd8, 0xdb, 0xee, 0x40, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x1d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x4d,
	0x0a, 0x21, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x75, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x18, 0xd1, 0xb1, 0xde, 0x74, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x1d,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x1c, 0x0a,
	0x1a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x1a, 0x9a, 0x0a, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x72, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x9e, 0xcc, 0xaf, 0xd9, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x32, 0x82, 0x41, 0x2f, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x75,
	0x74, 0x68, 0x2d, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x0c, 0x61, 0x75, 0x74,
	0x68, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x6d, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xa0, 0xf2, 0xcb, 0x94, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x30, 0x82, 0x41, 0x2d, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70,
	0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x5f, 0x61, 0x73, 0x18, 0xe8, 0xb6, 0xa5, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x2d, 0x82, 0x41, 0x2a, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2d,
	0x61, 0x73, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x73, 0x12, 0x5e, 0x0a, 0x07, 0x70,
	0x65, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x18, 0xbb, 0x94, 0xb3, 0xd2, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2c, 0x82, 0x41, 0x29, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70,
	0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x65, 0x65, 0x72,
	0x2d, 0x61, 0x73, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x41, 0x73, 0x12, 0x76, 0x0a, 0x0f, 0x70,
	0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x8c,
	0x92, 0x81, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x34,
	0x82, 0x41, 0x31, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d,
	0x6e, 0x61, 0x6d, 0x65, 0x52, 0x0d, 0x70, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x71, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0xeb, 0x9d, 0xa0, 0x5c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x2e, 0x82, 0x41,
	0x2b, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x70, 0x65,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x96, 0x01, 0x0a, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x73, 0x18, 0xd5, 0xaf, 0xc6,
	0xd7, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x67,
	0x70, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x73,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x2d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2d, 0x61, 0x73, 0x52, 0x0f,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x73, 0x12,
	0x7e, 0x0a, 0x12, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x70, 0x5f, 0x64, 0x61,
	0x6d, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x9a, 0x95, 0xb9, 0x89, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x37, 0x82, 0x41, 0x34, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65,
	0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x2d, 0x66, 0x6c, 0x61, 0x70, 0x2d, 0x64, 0x61, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x10, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x70, 0x44, 0x61, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x12,
	0x86, 0x01, 0x0a, 0x0e, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x18, 0xc4, 0xf8, 0xd3, 0x8e, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x42, 0x67, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x33, 0x82, 0x41, 0x30, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65,
	0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x65, 0x6e, 0x64, 0x2d,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x6a, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0xe3, 0xf9, 0x88, 0xa6, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x30, 0x82, 0x41, 0x2d, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50,
	0x61, 0x74, 0x68, 0x73, 0x12, 0x72, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0xc9, 0xd2, 0xee, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x33, 0x82, 0x41, 0x30, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65,
	0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x2d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x1a, 0xf1, 0x0a, 0x0a, 0x06, 0x54, 0x69, 0x6d,
	0x65, 0x72, 0x73, 0x12, 0x7c, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x93, 0xf9,
	0xc3, 0xf7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x72, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x2c, 0x82, 0x41, 0x29,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x72, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x77, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xf4, 0xc2, 0xdc, 0x28, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e,
	0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x2b, 0x82, 0x41, 0x28, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xb8, 0x04, 0x0a, 0x06, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x7c, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x18, 0xfd, 0xbc, 0xf6, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3a, 0x82, 0x41, 0x37, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70,
	0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x73,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2d,
	0x72, 0x65, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x74, 0x72, 0x79, 0x12, 0x70, 0x0a, 0x09, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0xa1, 0xfe, 0x99, 0x49, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x08, 0x68, 0x6f, 0x6c,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x8c, 0x01, 0x0a, 0x12, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c,
	0x69, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0xda, 0xd2, 0xf8,
	0xf9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6b,
	0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x52, 0x11, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0xae, 0x01, 0x0a, 0x1e, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d,
	0x5f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0xf8, 0xd9, 0xed, 0x69, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4b, 0x82, 0x41, 0x48, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f,
	0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x72,
	0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d,
	0x2d, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x1c, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d,
	0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x1a, 0xb4, 0x04, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x7b, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79,
	0x18, 0x86, 0xd3, 0xaa, 0x5e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2d, 0x72, 0x65, 0x74, 0x72, 0x79, 0x52, 0x0c,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x74, 0x72, 0x79, 0x12, 0x70, 0x0a, 0x09,
	0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xb6, 0xad, 0xea, 0x84, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x35, 0x82,
	0x41, 0x32, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x68, 0x6f, 0x6c, 0x64, 0x2d,
	0x74, 0x69, 0x6d, 0x65, 0x52, 0x08, 0x68, 0x6f, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x8a,
	0x01, 0x0a, 0x12, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x93, 0x97, 0xaf, 0x5c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65,
	0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x2d,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x11, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c,
	0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0xae, 0x01, 0x0a, 0x1e,
	0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0xd9,
	0xf8, 0x99, 0xdb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x4a, 0x82, 0x41, 0x47, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x2d, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x1c,
	0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x1a, 0xdf, 0x09, 0x0a,
	0x09, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x82, 0x01, 0x0a, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xd8, 0xe0, 0x8a, 0xd9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70,
	0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x2f, 0x82, 0x41, 0x2c, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x7d, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xf1, 0xaf, 0xb1, 0x7e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42,
	0x67, 0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x2e, 0x82, 0x41, 0x2b, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xe8,
	0x03, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x7d, 0x0a, 0x0d, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x8f, 0x81, 0x9f, 0x80, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3d, 0x82, 0x41, 0x3a,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x7b, 0x0a, 0x0d, 0x6d, 0x74, 0x75, 0x5f,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x18, 0xc4, 0xa2, 0xde, 0xfa, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3d, 0x82, 0x41, 0x3a, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65,
	0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x74, 0x75, 0x2d, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x0c, 0x6d, 0x74, 0x75, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x12, 0x77, 0x0a, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0xe2, 0xe9, 0xfe, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x3c, 0x82, 0x41, 0x39, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x2d, 0x6d, 0x6f, 0x64,
	0x65, 0x52, 0x0b, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x69,
	0x0a, 0x07, 0x74, 0x63, 0x70, 0x5f, 0x6d, 0x73, 0x73, 0x18, 0x84, 0xfd, 0x99, 0x8f, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x37, 0x82, 0x41, 0x34, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65,
	0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x74, 0x63, 0x70, 0x2d, 0x6d, 0x73,
	0x73, 0x52, 0x06, 0x74, 0x63, 0x70, 0x4d, 0x73, 0x73, 0x1a, 0xe2, 0x03, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x7b, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x9a, 0xd1, 0xe7, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x3c, 0x82, 0x41, 0x39, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65,
	0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x79, 0x0a, 0x0d, 0x6d, 0x74, 0x75, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x18, 0x95, 0xad, 0xf5, 0x61, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x3c, 0x82, 0x41, 0x39, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x6d, 0x74, 0x75, 0x2d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x0c, 0x6d,
	0x74, 0x75, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x12, 0x77, 0x0a, 0x0c, 0x70,
	0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x9d, 0xd4, 0x88, 0x9e,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3b, 0x82, 0x41, 0x38, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f,
	0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x61, 0x73, 0x73, 0x69,
	0x76, 0x65, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x68, 0x0a, 0x07, 0x74, 0x63, 0x70, 0x5f, 0x6d, 0x73, 0x73, 0x18,
	0xf9, 0xcd, 0xc9, 0x87, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x36,
	0x82, 0x41, 0x33, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74,
	0x63, 0x70, 0x2d, 0x6d, 0x73, 0x73, 0x52, 0x06, 0x74, 0x63, 0x70, 0x4d, 0x73, 0x73, 0x1a, 0xd3,
	0x12, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x73, 0x12, 0x92, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x8e,
	0xc5, 0xe9, 0xb5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x55,
	0x73, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x38, 0x82, 0x41, 0x35, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x75, 0x73, 0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x65, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x8a, 0x01, 0x0a, 0x04, 0x65, 0x62, 0x67,
	0x70, 0x18, 0xa4, 0xc4, 0xcf, 0xae, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50, 0x65, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x2e, 0x55, 0x73, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x73, 0x2e, 0x45, 0x62, 0x67, 0x70, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x75, 0x73, 0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x65, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x65, 0x62, 0x67, 0x70, 0x52,
	0x04, 0x65, 0x62, 0x67, 0x70, 0x12, 0x8a, 0x01, 0x0a, 0x04, 0x69, 0x62, 0x67, 0x70, 0x18, 0xa0,
	0xc3, 0xda, 0x9b, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x55,
	0x73, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x2e,
	0x49, 0x62, 0x67, 0x70, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65,
	0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x2f, 0x75, 0x73, 0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x65, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x69, 0x62, 0x67, 0x70, 0x52, 0x04, 0x69, 0x62,
	0x67, 0x70, 0x12, 0x8e, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xbb, 0x8c, 0xc3,
	0xaa, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x55, 0x73, 0x65,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x37, 0x82, 0x41, 0x34, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2f, 0x75, 0x73, 0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65,
	0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x1a, 0x7d, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x73, 0x0a,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xac, 0xe5, 0xf7, 0xca, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x75, 0x73, 0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x65, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x1a, 0x96, 0x07, 0x0a, 0x04, 0x45, 0x62, 0x67, 0x70, 0x12, 0x9c, 0x01, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xc9, 0xfd, 0xde, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x41, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67,
	0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x55, 0x73, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x2e, 0x45, 0x62, 0x67, 0x70, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x3d, 0x82, 0x41, 0x3a, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2f, 0x75, 0x73, 0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65,
	0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x65, 0x62, 0x67, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x97, 0x01, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x9e, 0xac, 0xaa, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50,
	0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x2e, 0x55, 0x73, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x73, 0x2e, 0x45, 0x62, 0x67, 0x70, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42,
	0x3c, 0x82, 0x41, 0x39, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f,
	0x75, 0x73, 0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x2d, 0x70, 0x61, 0x74,
	0x68, 0x73, 0x2f, 0x65, 0x62, 0x67, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x1a, 0xaa, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x93, 0x01, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x65, 0x5f, 0x61, 0x73, 0x18, 0x8d, 0x98, 0xed, 0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2f, 0x75, 0x73, 0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65,
	0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x65, 0x62, 0x67, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x65, 0x2d, 0x61, 0x73, 0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x65, 0x41, 0x73, 0x12, 0x89, 0x01, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75,
	0x6d, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0xfd, 0x8e, 0x99, 0x9f, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4b, 0x82, 0x41, 0x48, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x75, 0x73, 0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x65, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x65, 0x62, 0x67, 0x70, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x2d, 0x70, 0x61,
	0x74, 0x68, 0x73, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x61, 0x74, 0x68,
	0x73, 0x1a, 0xa7, 0x02, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x93, 0x01, 0x0a, 0x11,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x61,
	0x73, 0x18, 0xaa, 0xa9, 0xea, 0x9b, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2f, 0x75, 0x73, 0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x2d, 0x70, 0x61,
	0x74, 0x68, 0x73, 0x2f, 0x65, 0x62, 0x67, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x2d, 0x61, 0x73,
	0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x41,
	0x73, 0x12, 0x87, 0x01, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x73, 0x18, 0xe6, 0xd6, 0xb7, 0x72, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x4a, 0x82, 0x41, 0x47, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2f, 0x75, 0x73, 0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x2d, 0x70,
	0x61, 0x74, 0x68, 0x73, 0x2f, 0x65, 0x62, 0x67, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x52, 0x0c, 0x6d,
	0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x61, 0x74, 0x68, 0x73, 0x1a, 0xea, 0x04, 0x0a, 0x04,
	0x49, 0x62, 0x67, 0x70, 0x12, 0x9b, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x95, 0xb0, 0xdb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x55,
	0x73, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x2e,
	0x49, 0x62, 0x67, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x3d, 0x82, 0x41, 0x3a,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x75, 0x73, 0x65, 0x2d,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x69,
	0x62, 0x67, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x98, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x8a, 0xed, 0xb6,
	0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x55, 0x73, 0x65,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x2e, 0x49, 0x62,
	0x67, 0x70, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x3c, 0x82, 0x41, 0x39, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65,
	0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x75, 0x73, 0x65, 0x2d, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x65, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x69, 0x62, 0x67, 0x70,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x93, 0x01,
	0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x88, 0x01, 0x0a, 0x0d, 0x6d, 0x61, 0x78,
	0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x91, 0xb2, 0x8f, 0x29, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4b, 0x82, 0x41, 0x48, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x70, 0x65,
	0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x75, 0x73, 0x65, 0x2d, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x65, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x69, 0x62, 0x67, 0x70,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x2d,
	0x70, 0x61, 0x74, 0x68, 0x73, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x61,
	0x74, 0x68, 0x73, 0x1a, 0x92, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x88, 0x01,
	0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18,
	0xda, 0xb3, 0xa8, 0xdf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4a,
	0x82, 0x41, 0x47, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x75,
	0x73, 0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x2d, 0x70, 0x61, 0x74, 0x68,
	0x73, 0x2f, 0x69, 0x62, 0x67, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x61, 0x78,
	0x69, 0x6d, 0x75, 0x6d, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x69,
	0x6d, 0x75, 0x6d, 0x50, 0x61, 0x74, 0x68, 0x73, 0x1a, 0x7a, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x71, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xfd, 0xbd, 0x99,
	0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f,
	0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x75, 0x73, 0x65, 0x2d, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x1a, 0xab, 0x01, 0x0a, 0x0c, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x56, 0x0a, 0x0f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e,
	0x82, 0x41, 0x2b, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x70,
	0x65, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x0d,
	0x70, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a,
	0x0a, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42,
	0x67, 0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x65,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x09, 0x70, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x1a, 0xf2, 0x8c, 0x08, 0x0a, 0x03, 0x52, 0x69, 0x62, 0x12, 0x53, 0x0a, 0x09, 0x61,
	0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x73, 0x18, 0xb0, 0xc3, 0xfd, 0x36, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42,
	0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x42,
	0x15, 0x82, 0x41, 0x12, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x52, 0x08, 0x61, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73,
	0x12, 0x54, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x73, 0x18, 0xda, 0xb6,
	0x85, 0xa1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x74, 0x74,
	0x72, 0x53, 0x65, 0x74, 0x73, 0x42, 0x15, 0x82, 0x41, 0x12, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72,
	0x69, 0x62, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x52, 0x08, 0x61, 0x74,
	0x74, 0x72, 0x53, 0x65, 0x74, 0x73, 0x12, 0x5d, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0xd8, 0xeb, 0xdb, 0x75, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e,
	0x52, 0x69, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x42,
	0x17, 0x82, 0x41, 0x14, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x6b, 0x0a, 0x0f, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0xe6, 0xf6, 0xb9, 0x1b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42,
	0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x45, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x42, 0x1b, 0x82, 0x41, 0x18, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72,
	0x69, 0x62, 0x2f, 0x65, 0x78, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x52, 0x0e, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x1a, 0xba, 0x8e, 0x07, 0x0a, 0x08, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73,
	0x12, 0x66, 0x0a, 0x08, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x18, 0xa3, 0xc6, 0x85,
	0xd8, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x4b, 0x65, 0x79, 0x42,
	0x1e, 0x82, 0x41, 0x1b, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x52,
	0x07, 0x61, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x1a, 0xf7, 0x8b, 0x07, 0x0a, 0x07, 0x41, 0x66,
	0x69, 0x53, 0x61, 0x66, 0x69, 0x12, 0x92, 0x01, 0x0a, 0x10, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x73,
	0x72, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0xad, 0x96, 0x81, 0xa1, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66,
	0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x53,
	0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x2f, 0x82, 0x41, 0x2c, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73,
	0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0e, 0x69, 0x70, 0x76, 0x34,
	0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x83, 0x01, 0x0a, 0x0c, 0x69,
	0x70, 0x76, 0x34, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x18, 0x83, 0xe2, 0x8f, 0x57,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66,
	0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x42, 0x2b, 0x82, 0x41, 0x28, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x12, 0x92, 0x01, 0x0a, 0x10, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x73, 0x72, 0x74, 0x65, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0xd3, 0xcf, 0x9e, 0xfb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70,
	0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66,
	0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x42, 0x2f, 0x82, 0x41, 0x2c, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69,
	0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0e, 0x69, 0x70, 0x76, 0x36, 0x53, 0x72, 0x74, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x83, 0x01, 0x0a, 0x0c, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x18, 0x8d, 0x8a, 0xce, 0x5a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70,
	0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66,
	0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x42, 0x2b, 0x82, 0x41, 0x28, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x52, 0x0b,
	0x69, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0x6a, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0xbd, 0xad, 0xc5, 0xbc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e,
	0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x24, 0x82, 0x41, 0x21, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xcc, 0xe5, 0x01, 0x0a, 0x0e, 0x49, 0x70, 0x76,
	0x34, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x8f, 0x01, 0x0a, 0x07,
	0x6c, 0x6f, 0x63, 0x5f, 0x72, 0x69, 0x62, 0x18, 0xaa, 0x91, 0xe5, 0x19, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67,
	0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41,
	0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x53, 0x72, 0x74, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4c, 0x6f, 0x63, 0x52, 0x69, 0x62, 0x42, 0x37, 0x82, 0x41,
	0x34, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76,
	0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6c, 0x6f,
	0x63, 0x2d, 0x72, 0x69, 0x62, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x52, 0x69, 0x62, 0x12, 0x99, 0x01,
	0x0a, 0x09, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x18, 0xf1, 0xf9, 0x97, 0x65,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66,
	0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x53,
	0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x52, 0x09,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x1a, 0xdc, 0x24, 0x0a, 0x06, 0x4c, 0x6f,
	0x63, 0x52, 0x69, 0x62, 0x12, 0x9d, 0x01, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18,
	0x83, 0xd6, 0xb6, 0x86, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41,
	0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e,
	0x49, 0x70, 0x76, 0x34, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4c,
	0x6f, 0x63, 0x52, 0x69, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x42, 0x3e, 0x82, 0x41,
	0x3b, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76,
	0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6c, 0x6f,
	0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x06, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x1a, 0xb1, 0x23, 0x0a, 0x06, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12,
	0xaa, 0x01, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0xb1, 0x99, 0xb1, 0x8f, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69,
	0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x53, 0x72,
	0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4c, 0x6f, 0x63, 0x52, 0x69, 0x62, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x42,
	0x44, 0x82, 0x41, 0x41, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x1a, 0xd9, 0x1e, 0x0a,
	0x05, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0xb2, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x83, 0xce, 0x8a, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41,
	0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e,
	0x49, 0x70, 0x76, 0x34, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4c,
	0x6f, 0x63, 0x52, 0x69, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x4a, 0x82, 0x41, 0x47, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72,
	0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69,
	0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0xe4, 0x01, 0x0a, 0x12,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x98, 0xaa, 0xbb, 0x7d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62,
	0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66,
	0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x4c, 0x6f, 0x63, 0x52, 0x69, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x42, 0x57, 0x82, 0x41, 0x54, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65,
	0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52,
	0x11, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x1a, 0xd7, 0x0a, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x8c, 0x01, 0x0a,
	0x0a, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x90, 0xc1, 0xe9, 0x71,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x55, 0x82, 0x41, 0x52, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73,
	0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72,
	0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x7e, 0x0a, 0x05, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x97, 0xb9, 0xd7, 0x4a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x50, 0x82, 0x41, 0x4d, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x9b, 0x01, 0x0a, 0x0f,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0xf6, 0xc1, 0xa1, 0x52, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5a, 0x82,
	0x41, 0x57, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70,
	0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6c,
	0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x8a, 0x01, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0xfd, 0xa1, 0x87, 0x88, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x53, 0x82, 0x41, 0x50, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74,
	0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0xa6, 0x01, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0xd8,
	0xe1, 0xd1, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5e, 0x82, 0x41,
	0x5b, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76,
	0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6c, 0x6f,
	0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x78, 0x74, 0x2d, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x11, 0x65, 0x78,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0xb9, 0x01, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0xc0, 0xf0, 0xaa, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x69, 0x62, 0x42, 0x67, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x42, 0x59, 0x82, 0x41, 0x56, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0d, 0x69, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x95, 0x01, 0x0a, 0x0d,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0xfa, 0xd6,
	0xb2, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x58, 0x82, 0x41, 0x55,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34,
	0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6c, 0x6f, 0x63,
	0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x61, 0x73, 0x74, 0x2d, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x12, 0x83, 0x01, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18,
	0xb3, 0xaf, 0xa6, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x52, 0x82,
	0x41, 0x4f, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70,
	0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6c,
	0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x69,
	0x64, 0x52, 0x06, 0x70, 0x61, 0x74, 0x68, 0x49, 0x64, 0x12, 0x90, 0x01, 0x0a, 0x0b, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0xc8, 0x8a, 0xbb, 0xf5, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x56, 0x82, 0x41, 0x53, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72,
	0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69,
	0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x1a, 0xd9, 0x10, 0x0a,
	0x11, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x12, 0x89, 0x02, 0x0a, 0x11, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x94, 0xd1, 0xfc, 0xef, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73,
	0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x53, 0x72, 0x74,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4c, 0x6f, 0x63, 0x52, 0x69, 0x62, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4b, 0x65,
	0x79, 0x42, 0x69, 0x82, 0x41, 0x66, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x10, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x1a, 0xf2,
	0x0b, 0x0a, 0x10, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x12, 0xfb, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xee, 0xbd,
	0xfc, 0x80, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x70, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70,
	0x76, 0x34, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4c, 0x6f, 0x63,
	0x52, 0x69, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x82, 0x41, 0x6c, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73,
	0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72,
	0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x1a, 0xdf, 0x09, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xac, 0x01, 0x0a, 0x08,
	0x61, 0x74, 0x74, 0x72, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0xba, 0xbb, 0xaf, 0xa1, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x78, 0x82, 0x41, 0x75, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74,
	0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x6c, 0x65,
	0x6e, 0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x4c, 0x65, 0x6e, 0x12, 0xae, 0x01, 0x0a, 0x09, 0x61,
	0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0xad, 0xe0, 0xfa, 0x1b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x79, 0x82, 0x41, 0x76, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65,
	0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0xb3, 0x01, 0x0a, 0x0a,
	0x61, 0x74, 0x74, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0xec, 0xe2, 0xd9, 0xa3, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x7a, 0x82, 0x41, 0x77, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d,
	0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6c, 0x6f, 0x63, 0x2d,
	0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72,
	0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0xad, 0x01, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0xda,
	0xfe, 0xd4, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x78, 0x82,
	0x41, 0x75, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70,
	0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6c,
	0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x52, 0x08, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x12, 0xad, 0x01, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x9d,
	0xf8, 0xca, 0xdf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x78, 0x82,
	0x41, 0x75, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70,
	0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6c,
	0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x12, 0xaa, 0x01, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x18, 0xac, 0xb9,
	0xde, 0x85, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x77, 0x82, 0x41,
	0x74, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76,
	0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6c, 0x6f,
	0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x12, 0xb2,
	0x01, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0xec, 0xe2,
	0xfd, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x7a, 0x82, 0x41, 0x77,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34,
	0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6c, 0x6f, 0x63,
	0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74,
	0x69, 0x76, 0x65, 0x1a, 0xc2, 0x02, 0x0a, 0x13, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x90, 0x01, 0x0a, 0x09,
	0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x73, 0x82, 0x41, 0x70, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x97,
	0x01, 0x0a, 0x11, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6a, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e,
	0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69,
	0x2e, 0x49, 0x70, 0x76, 0x34, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x4c, 0x6f, 0x63, 0x52, 0x69, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x10, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x1a, 0x9d, 0x03, 0x0a, 0x08, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x65, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x4c, 0x82, 0x41, 0x49, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65,
	0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x70, 0x61, 0x74,
	0x68, 0x2d, 0x69, 0x64, 0x52, 0x06, 0x70, 0x61, 0x74, 0x68, 0x49, 0x64, 0x12, 0x69, 0x0a, 0x08,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4d,
	0x82, 0x41, 0x4a, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69,
	0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f,
	0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x60, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x4a, 0x82, 0x41, 0x47, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65,
	0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x5d, 0x0a, 0x05, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66,
	0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49,
	0x70, 0x76, 0x34, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4c, 0x6f,
	0x63, 0x52, 0x69, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x1a, 0xab, 0xbe, 0x01, 0x0a, 0x09, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x12, 0xad, 0x01, 0x0a, 0x08, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x18, 0xaa, 0xd2, 0xfe, 0xb8, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x49,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e,
	0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73,
	0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x52, 0x08, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x1a, 0xf8, 0xba, 0x01, 0x0a, 0x08, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x12, 0xd2, 0x01, 0x0a, 0x0f, 0x61, 0x64, 0x6a, 0x5f, 0x72, 0x69,
	0x62, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x18, 0xf3, 0xb1, 0xf8, 0xd8, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69,
	0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x53, 0x72,
	0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52,
	0x69, 0x62, 0x49, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x42, 0x52, 0x82, 0x41, 0x4f, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72,
	0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a,
	0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x52, 0x0c, 0x61, 0x64,
	0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x12, 0xce, 0x01, 0x0a, 0x0e, 0x61,
	0x64, 0x6a, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x18, 0x80, 0xaf,
	0x82, 0xe0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70,
	0x76, 0x34, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e,
	0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x72, 0x65, 0x42, 0x51, 0x82, 0x41, 0x4e,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34,
	0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x52, 0x0b,
	0x61, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x72, 0x65, 0x12, 0xd4, 0x01, 0x0a, 0x10,
	0x61, 0x64, 0x6a, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x74,
	0x18, 0xf6, 0xc6, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66,
	0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49,
	0x70, 0x76, 0x34, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x42, 0x53,
	0x82, 0x41, 0x50, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69,
	0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70,
	0x6f, 0x73, 0x74, 0x52, 0x0d, 0x61, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x6f,
	0x73, 0x74, 0x12, 0xd2, 0x01, 0x0a, 0x0f, 0x61, 0x64, 0x6a, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x6f,
	0x75, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x18, 0xcb, 0xb0, 0xce, 0xb1, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x53, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67,
	0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41,
	0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x53, 0x72, 0x74, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f,
	0x75, 0x74, 0x50, 0x72, 0x65, 0x42, 0x52, 0x82, 0x41, 0x4f, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72,
	0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69,
	0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x52, 0x0c, 0x61, 0x64, 0x6a, 0x52, 0x69,
	0x62, 0x4f, 0x75, 0x74, 0x50, 0x72, 0x65, 0x12, 0xaf, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0xfc, 0xe2, 0x96, 0x5c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e,
	0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69,
	0x2e, 0x49, 0x70, 0x76, 0x34, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x48, 0x82, 0x41, 0x45, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72,
	0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xa9, 0x2d, 0x0a, 0x0c, 0x41, 0x64,
	0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x12, 0xd1, 0x01, 0x0a, 0x06, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0xa0, 0xdb, 0x88, 0xd0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x5a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70,
	0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66,
	0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e,
	0x50, 0x6f, 0x73, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x42, 0x59, 0x82, 0x41, 0x56,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34,
	0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x1a, 0xc4,
	0x2b, 0x0a, 0x06, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0xdd, 0x01, 0x0a, 0x05, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x18, 0xf2, 0xb1, 0xa7, 0x52, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x63, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69,
	0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x6f, 0x73,
	0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65,
	0x79, 0x42, 0x5f, 0x82, 0x41, 0x5c, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e,
	0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x1a, 0xcd, 0x25, 0x0a, 0x05, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x12, 0xe7, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x94, 0xb2,
	0xce, 0xd9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x66, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70,
	0x76, 0x34, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e,
	0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42,
	0x65, 0x82, 0x41, 0x62, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70,
	0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x98, 0x02,
	0x0a, 0x12, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x9d, 0xe3, 0xab, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x72, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52,
	0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x6f,
	0x73, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x42, 0x72, 0x82, 0x41, 0x6f, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e,
	0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x11, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0xf4, 0x0d, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0xa8, 0x01, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0xdd, 0xb8, 0xa6, 0xbb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x70, 0x82, 0x41, 0x6d, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d,
	0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0xa4, 0x01,
	0x0a, 0x09, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x8b, 0x96, 0x8a, 0x5f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6f, 0x82, 0x41, 0x6c, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73,
	0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64,
	0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x62, 0x65, 0x73, 0x74, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x52, 0x08, 0x62, 0x65, 0x73, 0x74,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x9a, 0x01, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0xa4,
	0x87, 0x8d, 0xd8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6b, 0x82,
	0x41, 0x68, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70,
	0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73,
	0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x12, 0xb6, 0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0xf9, 0xe6, 0xca, 0x7a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x75, 0x82, 0x41, 0x72, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d,
	0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0xa5, 0x01, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x80, 0x89, 0x8c, 0xe8, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6e, 0x82, 0x41, 0x6b, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72,
	0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a,
	0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0xc2, 0x01, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0xdf, 0xf3, 0x85, 0xbb, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x79, 0x82, 0x41, 0x76, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73,
	0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64,
	0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x65, 0x78, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x52, 0x11, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0xd3, 0x01, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0xbd, 0xdb, 0xb1, 0x79, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x69, 0x62, 0x42, 0x67,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x52, 0x4f, 0x55,
	0x54, 0x45, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x42, 0x74, 0x82, 0x41, 0x71, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72,
	0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a,
	0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0d,
	0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0xb0, 0x01,
	0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18,
	0x85, 0xa6, 0xf3, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x73, 0x82,
	0x41, 0x70, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70,
	0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73,
	0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x61, 0x73, 0x74, 0x2d, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x12, 0x9e, 0x01, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0xe8, 0x92, 0xdd,
	0x4f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6d, 0x82, 0x41, 0x6a, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d,
	0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61,
	0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x69, 0x64, 0x52, 0x06, 0x70, 0x61, 0x74, 0x68, 0x49,
	0x64, 0x12, 0xab, 0x01, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x18, 0xc7, 0xef, 0xc6, 0xe1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x71, 0x82, 0x41, 0x6e, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d,
	0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x1a,
	0xc7, 0x13, 0x0a, 0x11, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0xbf, 0x02, 0x0a, 0x11, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0xed, 0x9c, 0xfa, 0x3a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x86, 0x01, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34,
	0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64,
	0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x42, 0x85, 0x01,
	0x82, 0x41, 0x81, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70,
	0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x10, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x1a, 0xf3, 0x0d, 0x0a, 0x10, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0xb1, 0x02, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xbf, 0xe1, 0xd5, 0x59, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x89, 0x01, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67,
	0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41,
	0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x53, 0x72, 0x74, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49,
	0x6e, 0x50, 0x6f, 0x73, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x8b, 0x01, 0x82, 0x41,
	0x87, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70,
	0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73,
	0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x1a, 0xaa, 0x0b, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xc8, 0x01, 0x0a, 0x08, 0x61,
	0x74, 0x74, 0x72, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0xb5, 0xf0, 0xe5, 0x53, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x94, 0x01, 0x82, 0x41, 0x90, 0x01, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74,
	0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d,
	0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x6c, 0x65, 0x6e, 0x52, 0x07, 0x61, 0x74,
	0x74, 0x72, 0x4c, 0x65, 0x6e, 0x12, 0xcc, 0x01, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x90, 0x97, 0xa2, 0xca, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x95, 0x01, 0x82, 0x41, 0x91, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69,
	0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62,
	0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0xd0, 0x01, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0xf3, 0xbf, 0xae, 0xdd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x96, 0x01, 0x82, 0x41, 0x92, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72,
	0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69,
	0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x61, 0x74,
	0x74, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0xca, 0x01, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x18, 0xd9, 0x9e, 0xdf, 0xb3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x94, 0x01, 0x82, 0x41, 0x90, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72,
	0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69,
	0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x52, 0x08, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x12, 0xca, 0x01, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x18, 0x92, 0x9b, 0xc8, 0xe8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x94, 0x01, 0x82, 0x41, 0x90, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69,
	0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x12, 0xc6, 0x01, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x95, 0xd6,
	0xe3, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x93, 0x01, 0x82, 0x41,
	0x8f, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70,
	0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73,
	0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x12, 0xd0, 0x01, 0x0a, 0x0a, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x83, 0xef, 0xd3, 0xa2, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x96, 0x01, 0x82, 0x41, 0x92, 0x01, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d,
	0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61,
	0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76,
	0x65, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x1a, 0xf9, 0x02,
	0x0a, 0x13, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0xad, 0x01, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x8f, 0x01, 0x82, 0x41, 0x8b, 0x01,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34,
	0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x61, 0x74, 0x74,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0xb1, 0x01, 0x0a, 0x11, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x83, 0x01, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73,
	0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x53, 0x72, 0x74,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69,
	0x62, 0x49, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x10, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x1a, 0x89, 0x04, 0x0a, 0x08, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x80, 0x01, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x68, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x67, 0x82, 0x41, 0x64, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72,
	0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a,
	0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x69,
	0x64, 0x52, 0x06, 0x70, 0x61, 0x74, 0x68, 0x49, 0x64, 0x12, 0x84, 0x01, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x68, 0x82, 0x41,
	0x65, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76,
	0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x7b, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x65, 0x82, 0x41, 0x62, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70,
	0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x2f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x76, 0x0a,
	0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x60, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69,
	0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x6f, 0x73,
	0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x05,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x1a, 0xde, 0x2b, 0x0a, 0x0b, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62,
	0x49, 0x6e, 0x50, 0x72, 0x65, 0x12, 0xce, 0x01, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x18, 0xe5, 0xb8, 0xb9, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41,
	0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e,
	0x49, 0x70, 0x76, 0x34, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x72, 0x65, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x42, 0x58, 0x82, 0x41, 0x55, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69,
	0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62,
	0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x06,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x1a, 0xfd, 0x29, 0x0a, 0x06, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x12, 0xdc, 0x01, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0xaf, 0xb8, 0xe3, 0x8a,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x62, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34,
	0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64,
	0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x42, 0x5e, 0x82, 0x41, 0x5b, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73,
	0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64,
	0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x1a, 0x8c, 0x24, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0xe4, 0x01, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x89, 0xd3, 0xb9, 0x41, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x65, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52,
	0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x72,
	0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x64, 0x82, 0x41, 0x61, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69,
	0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62,
	0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x97, 0x02, 0x0a, 0x12, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0xba, 0x9e, 0xcc, 0xac, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x71, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73,
	0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x53, 0x72, 0x74,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69,
	0x62, 0x49, 0x6e, 0x50, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x42, 0x71, 0x82, 0x41, 0x6e, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72,
	0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69,
	0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x11, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0xc4, 0x0c, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xa7, 0x01, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0xde, 0xd8, 0xa9, 0xe8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x6f, 0x82, 0x41, 0x6c, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d,
	0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x98, 0x01, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x81, 0xcd, 0x8c, 0x5a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6a, 0x82, 0x41, 0x67, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74,
	0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d,
	0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0xb6, 0x01, 0x0a, 0x0f, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0xb8,
	0x9e, 0xac, 0x91, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x74, 0x82,
	0x41, 0x71, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70,
	0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0xa4, 0x01, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0xaf, 0xb2, 0xe5, 0x81, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x6d, 0x82, 0x41, 0x6a, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e,
	0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0xc0, 0x01, 0x0a, 0x13, 0x65,
	0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0xa2, 0x8b, 0xe4, 0x56, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x78, 0x82, 0x41, 0x75, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d,
	0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x78, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x11, 0x65, 0x78, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0xd3, 0x01,
	0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0xc6, 0xbf, 0xd4, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x69, 0x62, 0x42, 0x67, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x42,
	0x73, 0x82, 0x41, 0x70, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70,
	0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0xb0, 0x01, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0xa0, 0xba, 0xe9, 0x86, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x72, 0x82, 0x41, 0x6f, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69,
	0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62,
	0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x61, 0x73, 0x74, 0x2d,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x9d, 0x01, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x68, 0x5f,
	0x69, 0x64, 0x18, 0xa5, 0xa9, 0xd5, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x6c, 0x82, 0x41, 0x69, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d,
	0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x69, 0x64, 0x52, 0x06,
	0x70, 0x61, 0x74, 0x68, 0x49, 0x64, 0x12, 0xa9, 0x01, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0xee, 0xc8, 0xc8, 0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x70, 0x82, 0x41, 0x6d, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69,
	0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62,
	0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x1a, 0xba, 0x13, 0x0a, 0x11, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0xbd, 0x02, 0x0a, 0x11, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x82,
	0xbe, 0xa4, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x85, 0x01, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66,
	0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49,
	0x70, 0x76, 0x34, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x42,
	0x84, 0x01, 0x82, 0x41, 0x80, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e,
	0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x10, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x1a, 0xea, 0x0d, 0x0a, 0x10, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0xb0, 0x02,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x84, 0xe3, 0x8b, 0xe1, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x88, 0x01, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73,
	0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x53, 0x72, 0x74,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69,
	0x62, 0x49, 0x6e, 0x50, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x8a, 0x01, 0x82,
	0x41, 0x86, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69,
	0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72,
	0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x1a, 0xa2, 0x0b, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xc8, 0x01, 0x0a, 0x08, 0x61,
	0x74, 0x74, 0x72, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0xf8, 0x84, 0xca, 0xa7, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x93, 0x01, 0x82, 0x41, 0x8f, 0x01, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72,
	0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a,
	0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x6c, 0x65, 0x6e, 0x52, 0x07, 0x61, 0x74,
	0x74, 0x72, 0x4c, 0x65, 0x6e, 0x12, 0xcb, 0x01, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x93, 0xeb, 0xe0, 0xf3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x94, 0x01, 0x82, 0x41, 0x90, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69,
	0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62,
	0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x61, 0x74, 0x74, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0xce, 0x01, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0xfa, 0xe4, 0xc7, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x95, 0x01, 0x82, 0x41, 0x91, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d,
	0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61,
	0x74, 0x74, 0x72, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0xc9, 0x01, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x18, 0x94, 0x9a, 0xfc, 0xd5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x93, 0x01, 0x82, 0x41, 0x8f, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69,
	0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x52, 0x08, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x12, 0xc8, 0x01, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0xa7, 0xca,
	0xf3, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x93, 0x01, 0x82, 0x41,
	0x8f, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70,
	0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0xc5, 0x01, 0x0a, 0x07,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x82, 0xc8, 0xfb, 0x70, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x92, 0x01, 0x82, 0x41, 0x8e, 0x01, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74,
	0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d,
	0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x12, 0xcf, 0x01, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x18, 0xca, 0xde, 0x88, 0xe6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x95, 0x01, 0x82, 0x41, 0x91, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d,
	0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x1a, 0xf7, 0x02, 0x0a, 0x13, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0xac, 0x01,
	0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x8e, 0x01, 0x82, 0x41, 0x8a, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d,
	0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0xb0, 0x01, 0x0a,
	0x11, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x82, 0x01, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41,
	0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e,
	0x49, 0x70, 0x76, 0x34, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x72, 0x65, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x10, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x1a,
	0x84, 0x04, 0x0a, 0x08, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x7f, 0x0a, 0x07,
	0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x66, 0x82,
	0x41, 0x63, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70,
	0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x70, 0x61,
	0x74, 0x68, 0x2d, 0x69, 0x64, 0x52, 0x06, 0x70, 0x61, 0x74, 0x68, 0x49, 0x64, 0x12, 0x83, 0x01,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x67, 0x82, 0x41, 0x64, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d,
	0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x2f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x7a, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x64, 0x82, 0x41, 0x61, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69,
	0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12,
	0x75, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5f,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e,
	0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50,
	0x72, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52,
	0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x1a, 0xa8, 0x2c, 0x0a, 0x0d, 0x41, 0x64, 0x6a, 0x52, 0x69,
	0x62, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x12, 0xd2, 0x01, 0x0a, 0x06, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x18, 0x8f, 0xa4, 0x8a, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69,
	0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x6f,
	0x73, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x42, 0x5a, 0x82, 0x41, 0x57, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73,
	0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64,
	0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x1a, 0xc1, 0x2a,
	0x0a, 0x06, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0xe0, 0x01, 0x0a, 0x05, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x18, 0xf5, 0xd4, 0x8c, 0xf4, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x64, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69,
	0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x6f,
	0x73, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x42, 0x60, 0x82, 0x41, 0x5d, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f,
	0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x1a, 0xc3, 0x24, 0x0a, 0x05,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0xe9, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0xb7, 0x8f, 0x96, 0xce, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41,
	0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e,
	0x49, 0x70, 0x76, 0x34, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x66, 0x82, 0x41, 0x63, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f,
	0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x9a, 0x02, 0x0a, 0x12, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0xac, 0xd0, 0xc8, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42,
	0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e,
	0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x53, 0x72, 0x74, 0x65,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62,
	0x4f, 0x75, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x42, 0x73, 0x82, 0x41, 0x70, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65,
	0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72,
	0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x11, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0xd9,
	0x0c, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xa9, 0x01, 0x0a, 0x0a, 0x61, 0x74, 0x74,
	0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x94, 0xb5, 0xdb, 0xf4, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x71, 0x82, 0x41, 0x6e, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65,
	0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72,
	0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61,
	0x74, 0x74, 0x72, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x9b, 0x01, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0xab,
	0x8c, 0x94, 0xe5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6c, 0x82,
	0x41, 0x69, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70,
	0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f,
	0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0xb8, 0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0xd2, 0x8e, 0xe1, 0xb3, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x76, 0x82, 0x41, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72,
	0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69,
	0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x0e, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0xa6, 0x01,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0xe1, 0xf7, 0x92, 0xf8, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6f, 0x82, 0x41, 0x6c,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34,
	0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0xc3, 0x01, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0xdc,
	0xc4, 0xa9, 0xe2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x7a, 0x82,
	0x41, 0x77, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70,
	0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f,
	0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x78, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x11, 0x65, 0x78, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0xd4, 0x01, 0x0a,
	0x0e, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x84, 0xbc, 0xc9, 0x49, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x69, 0x62, 0x42, 0x67, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x42, 0x75, 0x82,
	0x41, 0x72, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70,
	0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f,
	0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0xb2, 0x01, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0xce, 0x9c, 0xcc, 0xd5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x74, 0x82, 0x41, 0x71, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69,
	0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62,
	0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x61, 0x73,
	0x74, 0x2d, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0xa0, 0x01, 0x0a, 0x07, 0x70, 0x61, 0x74,
	0x68, 0x5f, 0x69, 0x64, 0x18, 0xc7, 0xf3, 0xb0, 0xb9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x6e, 0x82, 0x41, 0x6b, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d,
	0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x61, 0x74, 0x68,
	0x2d, 0x69, 0x64, 0x52, 0x06, 0x70, 0x61, 0x74, 0x68, 0x49, 0x64, 0x12, 0xac, 0x01, 0x0a, 0x0b,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0xb4, 0xde, 0xe5, 0xe8,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x72, 0x82, 0x41, 0x6f, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d,
	0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61,
	0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x0a,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x1a, 0xd4, 0x13, 0x0a, 0x11, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x12, 0xc2, 0x02, 0x0a, 0x11, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0xc0, 0x9b, 0xcb, 0xf2, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x87, 0x01, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42,
	0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e,
	0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x53, 0x72, 0x74, 0x65,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62,
	0x4f, 0x75, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x42, 0x86, 0x01, 0x82, 0x41, 0x82,
	0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76,
	0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73,
	0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x52, 0x10, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x1a, 0xfb, 0x0d, 0x0a, 0x10, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0xb3, 0x02, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0xaa, 0x91, 0xd4, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x8a, 0x01,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e,
	0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74,
	0x50, 0x6f, 0x73, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x8c, 0x01, 0x82, 0x41, 0x88,
	0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76,
	0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73,
	0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x1a, 0xb0, 0x0b, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xca, 0x01, 0x0a, 0x08, 0x61,
	0x74, 0x74, 0x72, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0xc6, 0xf0, 0x8e, 0x84, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x95, 0x01, 0x82, 0x41, 0x91, 0x01, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72,
	0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a,
	0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x6c, 0x65, 0x6e, 0x52, 0x07,
	0x61, 0x74, 0x74, 0x72, 0x4c, 0x65, 0x6e, 0x12, 0xcd, 0x01, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x99, 0xfe, 0x9d, 0xaf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x96, 0x01, 0x82, 0x41, 0x92, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65,
	0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72,
	0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x61,
	0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0xd0, 0x01, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0xe0, 0xcd, 0x95, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x97, 0x01, 0x82, 0x41, 0x93, 0x01, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74,
	0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d,
	0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x09, 0x61, 0x74, 0x74, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0xcb, 0x01, 0x0a, 0x08, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0xfe, 0x8a, 0x87, 0xfe, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x95, 0x01, 0x82, 0x41, 0x91, 0x01, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72,
	0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a,
	0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x52, 0x08,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0xca, 0x01, 0x0a, 0x08, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0xa1, 0xf4, 0xd4, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x95, 0x01, 0x82, 0x41, 0x91, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72,
	0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69,
	0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x08, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0xc7, 0x01, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x18, 0xf0, 0xbd, 0xdc, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x94, 0x01, 0x82, 0x41, 0x90, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75,
	0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x12,
	0xd1, 0x01, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0xd0,
	0xd6, 0xb3, 0x8b, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x97, 0x01,
	0x82, 0x41, 0x93, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d,
	0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74,
	0x69, 0x76, 0x65, 0x1a, 0xfb, 0x02, 0x0a, 0x13, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0xae, 0x01, 0x0a, 0x09,
	0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x90, 0x01, 0x82, 0x41, 0x8c, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75,
	0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0xb2, 0x01, 0x0a,
	0x11, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x84, 0x01, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41,
	0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e,
	0x49, 0x70, 0x76, 0x34, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52,
	0x10, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x1a, 0x8d, 0x04, 0x0a, 0x08, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x81,
	0x01, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x68, 0x82, 0x41, 0x65, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74,
	0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x2f, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x69, 0x64, 0x52, 0x06, 0x70, 0x61, 0x74, 0x68,
	0x49, 0x64, 0x12, 0x85, 0x01, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x69, 0x82, 0x41, 0x66, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72,
	0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69,
	0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x7c, 0x0a, 0x05, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x66, 0x82, 0x41, 0x63, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73,
	0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64,
	0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x77, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70,
	0x76, 0x34, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e,
	0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x1a, 0x83, 0x2c, 0x0a, 0x0c, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50,
	0x72, 0x65, 0x12, 0xd0, 0x01, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x88, 0xea,
	0xe1, 0x52, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76,
	0x34, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41,
	0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x42, 0x59, 0x82, 0x41, 0x56, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f,
	0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x06, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x9f, 0x2a, 0x0a, 0x06, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x12, 0xde, 0x01, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0xda, 0xb0, 0x94, 0xca, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x63, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66,
	0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x53,
	0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a,
	0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x42, 0x5f, 0x82, 0x41, 0x5c, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73,
	0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64,
	0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x1a, 0xa7, 0x24, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0xe7, 0x01, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x8c, 0x9d, 0xaa, 0xbd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x66, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70,
	0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66,
	0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75,
	0x74, 0x50, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x65, 0x82, 0x41, 0x62, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74,
	0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d,
	0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x98, 0x02, 0x0a, 0x12, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0xf5, 0xac, 0xda,
	0x5a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x72, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34,
	0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64,
	0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x42, 0x72, 0x82, 0x41, 0x6f, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73,
	0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64,
	0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x11, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x1a, 0xcc, 0x0c, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xa7, 0x01, 0x0a, 0x0a, 0x61,
	0x74, 0x74, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0xd5, 0xdb, 0xd9, 0x46, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x70, 0x82, 0x41, 0x6d, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74,
	0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d,
	0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61,
	0x74, 0x74, 0x72, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x99, 0x01, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0xfc,
	0xc7, 0xbf, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6b, 0x82, 0x41,
	0x68, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76,
	0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x12, 0xb7, 0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0xe1, 0x8f, 0x86, 0xad, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x75, 0x82, 0x41, 0x72, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d,
	0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0xa4, 0x01, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0xf8, 0xc0, 0xfc, 0x17, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6e, 0x82, 0x41, 0x6b, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74,
	0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d,
	0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0xc2, 0x01, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0xc7, 0xd3, 0xe9, 0xe4, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x79, 0x82, 0x41, 0x76, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72,
	0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a,
	0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x65, 0x78, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x11, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0xd4, 0x01, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0xe5, 0xd6, 0xdb, 0xf8, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x69, 0x62, 0x42, 0x67,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x52, 0x4f, 0x55,
	0x54, 0x45, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x42, 0x74, 0x82, 0x41, 0x71, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72,
	0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a,
	0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0d,
	0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0xb0, 0x01,
	0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18,
	0xcd, 0xe7, 0xeb, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x73, 0x82,
	0x41, 0x70, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70,
	0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72,
	0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x61, 0x73, 0x74, 0x2d, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x12, 0x9f, 0x01, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0xa0, 0xe8, 0x89,
	0xff, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6d, 0x82, 0x41, 0x6a,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34,
	0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x69, 0x64, 0x52, 0x06, 0x70, 0x61, 0x74, 0x68,
	0x49, 0x64, 0x12, 0xaa, 0x01, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x18, 0x8f, 0xf6, 0xfc, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x71, 0x82, 0x41, 0x6e, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74,
	0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x1a,
	0xc9, 0x13, 0x0a, 0x11, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0xc0, 0x02, 0x0a, 0x11, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x85, 0xf3, 0xd7, 0xa0,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x86, 0x01, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76,
	0x34, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41,
	0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x42, 0x85,
	0x01, 0x82, 0x41, 0x81, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74,
	0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x10, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x1a, 0xf4, 0x0d, 0x0a, 0x10, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0xb1, 0x02,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xe7, 0xc4, 0xeb, 0x71, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x89, 0x01, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42,
	0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e,
	0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x53, 0x72, 0x74, 0x65,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62,
	0x4f, 0x75, 0x74, 0x50, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x8b, 0x01, 0x82,
	0x41, 0x87, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69,
	0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70,
	0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x1a, 0xab, 0x0b, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xc9, 0x01, 0x0a, 0x08,
	0x61, 0x74, 0x74, 0x72, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0xcd, 0xe9, 0x8f, 0x81, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x94, 0x01, 0x82, 0x41, 0x90, 0x01, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73,
	0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64,
	0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x6c, 0x65, 0x6e, 0x52, 0x07,
	0x61, 0x74, 0x74, 0x72, 0x4c, 0x65, 0x6e, 0x12, 0xcc, 0x01, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0xe8, 0x95, 0xd2, 0xfa, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x95, 0x01, 0x82, 0x41, 0x91, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65,
	0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72,
	0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x61, 0x74,
	0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0xcf, 0x01, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0xbb, 0xa5, 0xec, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x96, 0x01, 0x82, 0x41, 0x92, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65,
	0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72,
	0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x61,
	0x74, 0x74, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0xca, 0x01, 0x0a, 0x08, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0xe1, 0xa0, 0xbc, 0xe3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x94, 0x01, 0x82, 0x41, 0x90, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65,
	0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72,
	0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x52, 0x08, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0xca, 0x01, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x18, 0x8a, 0xa7, 0xed, 0xba, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x94, 0x01, 0x82, 0x41, 0x90, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d,
	0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x12, 0xc7, 0x01, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x18, 0xad,
	0xb3, 0xaf, 0xcd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x93, 0x01,
	0x82, 0x41, 0x8f, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d,
	0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x12, 0xd0, 0x01, 0x0a,
	0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0xdb, 0xda, 0xd8, 0xac,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x96, 0x01, 0x82, 0x41, 0x92,
	0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76,
	0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74,
	0x69, 0x76, 0x65, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x1a,
	0xf9, 0x02, 0x0a, 0x13, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0xad, 0x01, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x8f, 0x01, 0x82, 0x41,
	0x8b, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70,
	0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72,
	0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x61,
	0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0xb1, 0x01, 0x0a, 0x11, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x83, 0x01, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66,
	0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x53,
	0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a,
	0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x10, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x1a, 0x89, 0x04, 0x0a, 0x08,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x80, 0x01, 0x0a, 0x07, 0x70, 0x61, 0x74,
	0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x67, 0x82, 0x41, 0x64, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d,
	0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61,
	0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x70, 0x61, 0x74, 0x68,
	0x2d, 0x69, 0x64, 0x52, 0x06, 0x70, 0x61, 0x74, 0x68, 0x49, 0x64, 0x12, 0x84, 0x01, 0x0a, 0x08,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x68,
	0x82, 0x41, 0x65, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69,
	0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70,
	0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x7b, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x65, 0x82, 0x41, 0x62, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75,
	0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12,
	0x76, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x60,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e,
	0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74,
	0x50, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x1a, 0xa9, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x9f, 0x01, 0x0a, 0x10, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xd2, 0xba, 0xa2, 0xd8, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x59, 0x82, 0x41, 0x56, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x72, 0x74,
	0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x0f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x1a, 0xf1, 0x01, 0x0a, 0x0b, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x4b, 0x65, 0x79, 0x12, 0x7e, 0x0a, 0x10, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x53, 0x82,
	0x41, 0x50, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70,
	0x76, 0x34, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x0f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x62, 0x0a, 0x08, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34,
	0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x52, 0x08, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x1a, 0xaf, 0xe0, 0x01, 0x0a, 0x0b, 0x49, 0x70, 0x76,
	0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0x89, 0x01, 0x0a, 0x07, 0x6c, 0x6f, 0x63,
	0x5f, 0x72, 0x69, 0x62, 0x18, 0x84, 0xcf, 0x8d, 0xf1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e,
	0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2e, 0x4c, 0x6f, 0x63, 0x52, 0x69, 0x62, 0x42, 0x33, 0x82, 0x41, 0x30, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x52, 0x06, 0x6c, 0x6f,
	0x63, 0x52, 0x69, 0x62, 0x12, 0x92, 0x01, 0x0a, 0x09, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x18, 0x9b, 0x91, 0xc4, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62,
	0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66,
	0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x52, 0x09,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x1a, 0xc7, 0x26, 0x0a, 0x06, 0x4c, 0x6f,
	0x63, 0x52, 0x69, 0x62, 0x12, 0x95, 0x01, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18,
	0x99, 0xbf, 0xfa, 0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66,
	0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49,
	0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4c, 0x6f, 0x63, 0x52, 0x69,
	0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x42, 0x3a, 0x82, 0x41, 0x37, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x91, 0x01, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xfe, 0xad, 0xf2, 0x39, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70,
	0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66,
	0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2e, 0x4c, 0x6f, 0x63, 0x52, 0x69, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x39,
	0x82, 0x41, 0x36, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69,
	0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x2d,
	0x72, 0x69, 0x62, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x1a, 0x87, 0x24, 0x0a, 0x06, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0xa3, 0x01, 0x0a, 0x05,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0xfb, 0x88, 0x8e, 0xac, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x47, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70,
	0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66,
	0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2e, 0x4c, 0x6f, 0x63, 0x52, 0x69, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x1a, 0xcf, 0x1e, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0xab, 0x01, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xa5, 0xd3, 0xc9, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e,
	0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2e, 0x4c, 0x6f, 0x63, 0x52, 0x69, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x46, 0x82, 0x41, 0x43, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0xde, 0x01, 0x0a, 0x12, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x18, 0x86, 0xb8, 0xeb, 0xe2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e,
	0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69,
	0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4c, 0x6f, 0x63,
	0x52, 0x69, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x42, 0x53, 0x82, 0x41, 0x50, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f,
	0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x11, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x8d, 0x0b, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x89, 0x01, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0xfa, 0xb7, 0xee, 0xf1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x51, 0x82, 0x41, 0x4e, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f,
	0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x98, 0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0xec, 0x80, 0xc8, 0xe9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x56, 0x82, 0x41, 0x53, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x0e, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0xa2, 0x01, 0x0a, 0x13,
	0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x8e, 0xa0, 0x96, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x5a, 0x82, 0x41, 0x57, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6c,
	0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x78, 0x74, 0x2d, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x11, 0x65,
	0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0xb5, 0x01, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0xd2, 0xdc, 0xc2, 0x81, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x69, 0x62, 0x42, 0x67, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x42, 0x55, 0x82, 0x41, 0x52, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f,
	0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x2d, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x91, 0x01, 0x0a, 0x0d, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0xbc, 0xa0, 0xfa, 0x45, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x54, 0x82, 0x41, 0x51, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x6c, 0x61, 0x73, 0x74, 0x2d, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x52, 0x0c,
	0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0xa2, 0x01, 0x0a,
	0x2f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x74, 0x79, 0x70, 0x65, 0x73, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x74, 0x79, 0x70, 0x65,
	0x18, 0xad, 0xaf, 0xaa, 0x46, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x49, 0x4e, 0x53, 0x54,
	0x41, 0x4c, 0x4c, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x48,
	0x00, 0x52, 0x2e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x74, 0x79, 0x70, 0x65, 0x73, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x29, 0x0a, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x96, 0x8e, 0xc4, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x80, 0x01, 0x0a,
	0x07, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x81, 0xa0, 0xbd, 0x96, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x70, 0x61, 0x74, 0x68, 0x2d, 0x69, 0x64, 0x52, 0x06, 0x70, 0x61, 0x74, 0x68, 0x49, 0x64, 0x12,
	0x80, 0x01, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0xa4, 0xbb, 0xba, 0xf9, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4d, 0x82, 0x41, 0x4a,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34,
	0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x12, 0x8b, 0x01, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x18, 0xa2, 0x91, 0x99, 0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x52, 0x82, 0x41, 0x4f, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6c, 0x6f,
	0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x42, 0x08, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x1a, 0xa6, 0x10, 0x0a, 0x11, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x12, 0x81, 0x02, 0x0a, 0x11, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0xe6, 0xa7, 0x8e, 0x70, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x6a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70,
	0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66,
	0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2e, 0x4c, 0x6f, 0x63, 0x52, 0x69, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x42, 0x65, 0x82, 0x41, 0x62,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34,
	0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x52, 0x10, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x1a, 0xce, 0x0b, 0x0a, 0x10, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0xf3, 0x01, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0xd8, 0xe5, 0xac, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6d, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69,
	0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4c,
	0x6f, 0x63, 0x52, 0x69, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x6b, 0x82, 0x41, 0x68,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34,
	0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a,
	0xc3, 0x09, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xa8, 0x01, 0x0a, 0x08, 0x61, 0x74,
	0x74, 0x72, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0xac, 0xcf, 0x9f, 0x84, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x74, 0x82, 0x41, 0x71, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72,
	0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x6c, 0x65, 0x6e, 0x52, 0x07, 0x61, 0x74, 0x74,
	0x72, 0x4c, 0x65, 0x6e, 0x12, 0xab, 0x01, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0xa7, 0xfb, 0xc2, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x75, 0x82, 0x41, 0x72, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6c,
	0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61,
	0x74, 0x74, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0xae, 0x01, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0xe6, 0xdc, 0x95, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x76, 0x82, 0x41, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6c, 0x6f,
	0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74,
	0x74, 0x72, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0xa9, 0x01, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x18, 0x80, 0xa4, 0xf5, 0x94, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x74, 0x82, 0x41, 0x71, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x63,
	0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x52, 0x08, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12,
	0xa9, 0x01, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0xa3, 0x9f, 0xd7,
	0x9b, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x74, 0x82, 0x41, 0x71,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34,
	0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0xa6, 0x01, 0x0a, 0x07,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x9e, 0xe1, 0xd6, 0xf6, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x73, 0x82, 0x41, 0x70, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x07, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x12, 0xae, 0x01, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74,
	0x69, 0x76, 0x65, 0x18, 0xe6, 0xdc, 0xa0, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x76, 0x82, 0x41, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6c,
	0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x1a, 0xbb, 0x02, 0x0a, 0x13, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x8c, 0x01,
	0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x6f, 0x82, 0x41, 0x6c, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6c,
	0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x94, 0x01, 0x0a,
	0x11, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66,
	0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49,
	0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4c, 0x6f, 0x63, 0x52, 0x69,
	0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x52, 0x10, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x1a, 0x84, 0x04, 0x0a, 0x08, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79,
	0x12, 0x5f, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x47, 0x82, 0x41, 0x44, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6c, 0x6f,
	0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x12, 0xa2, 0x01, 0x0a, 0x2f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x74, 0x79, 0x70, 0x65, 0x18, 0xad, 0xaf, 0xaa, 0x46, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c,
	0x54, 0x59, 0x50, 0x45, 0x48, 0x00, 0x52, 0x2e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x4f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x96, 0x8e, 0xc4, 0xc9, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0x61, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x48, 0x82, 0x41, 0x45, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f,
	0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x2f, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x69, 0x64, 0x52, 0x06, 0x70, 0x61,
	0x74, 0x68, 0x49, 0x64, 0x12, 0x5a, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69,
	0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4c, 0x6f, 0x63, 0x52, 0x69, 0x62, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x42, 0x08, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x1a, 0x07, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x1a, 0xb3, 0xb7, 0x01, 0x0a, 0x09, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x12, 0xa5, 0x01, 0x0a, 0x08, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x18,
	0xf0, 0xf4, 0xa9, 0x2a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66,
	0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49,
	0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4b, 0x65, 0x79,
	0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x52, 0x08, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x1a, 0x8f, 0xb4, 0x01, 0x0a, 0x08,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x12, 0xca, 0x01, 0x0a, 0x0f, 0x61, 0x64, 0x6a,
	0x5f, 0x72, 0x69, 0x62, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x18, 0xcd, 0xd0, 0xb0,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34,
	0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69,
	0x62, 0x49, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x42, 0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d,
	0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x52, 0x0c, 0x61, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49,
	0x6e, 0x50, 0x6f, 0x73, 0x74, 0x12, 0xc6, 0x01, 0x0a, 0x0e, 0x61, 0x64, 0x6a, 0x5f, 0x72, 0x69,
	0x62, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x18, 0xd2, 0xf4, 0x9d, 0x18, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x4f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42,
	0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e,
	0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50,
	0x72, 0x65, 0x42, 0x4d, 0x82, 0x41, 0x4a, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72,
	0x65, 0x52, 0x0b, 0x61, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x72, 0x65, 0x12, 0xcf,
	0x01, 0x0a, 0x10, 0x61, 0x64, 0x6a, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x70,
	0x6f, 0x73, 0x74, 0x18, 0xa4, 0x81, 0xdf, 0x83, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52,
	0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x73, 0x74,
	0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73,
	0x74, 0x52, 0x0d, 0x61, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x73, 0x74,
	0x12, 0xcb, 0x01, 0x0a, 0x0f, 0x61, 0x64, 0x6a, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x6f, 0x75, 0x74,
	0x5f, 0x70, 0x72, 0x65, 0x18, 0xc1, 0xeb, 0xe3, 0x8b, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e,
	0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x72, 0x65,
	0x42, 0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65,
	0x52, 0x0c, 0x61, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x72, 0x65, 0x12, 0xa8,
	0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xfa, 0xd8, 0xac, 0x3c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x49, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42,
	0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e,
	0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x44, 0x82, 0x41,
	0x41, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76,
	0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xd6, 0x2b, 0x0a, 0x0c, 0x41, 0x64,
	0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x12, 0xca, 0x01, 0x0a, 0x06, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0xc6, 0xb6, 0xee, 0xe4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x57, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70,
	0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66,
	0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x6f, 0x73,
	0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x42, 0x55, 0x82, 0x41, 0x52, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62,
	0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52,
	0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0xc6, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x9f, 0xbb, 0xd0, 0x87, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62,
	0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66,
	0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x54, 0x82, 0x41, 0x51, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70,
	0x6f, 0x73, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x1a, 0xa6, 0x28, 0x0a, 0x06, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0xd6, 0x01, 0x0a, 0x05,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0xc4, 0xcb, 0xbb, 0x2c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x60,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e,
	0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x6f, 0x73, 0x74,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79,
	0x42, 0x5b, 0x82, 0x41, 0x58, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x05, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x1a, 0xc6, 0x23, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0xdf,
	0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xbe, 0xe1, 0xf1, 0x26, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x63, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42,
	0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e,
	0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50,
	0x6f, 0x73, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x61, 0x82, 0x41, 0x5e, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69,
	0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x92, 0x02, 0x0a, 0x12, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0xfb, 0xfa, 0xf8, 0xf4, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42,
	0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e,
	0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50,
	0x6f, 0x73, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x42, 0x6e, 0x82, 0x41, 0x6b, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f,
	0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x52, 0x11, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0xaf, 0x0c, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0xa4, 0x01, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0xc7,
	0x83, 0xdf, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6c, 0x82,
	0x41, 0x69, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70,
	0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64,
	0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x09, 0x61, 0x74, 0x74,
	0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0xa1, 0x01, 0x0a, 0x09, 0x62, 0x65, 0x73, 0x74, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0xf1, 0x85, 0x96, 0xf9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x6b, 0x82, 0x41, 0x68, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70,
	0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x62, 0x65, 0x73, 0x74, 0x2d, 0x70, 0x61, 0x74, 0x68,
	0x52, 0x08, 0x62, 0x65, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0xb3, 0x01, 0x0a, 0x0f, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0xf7,
	0xea, 0x83, 0xe5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x71, 0x82,
	0x41, 0x6e, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70,
	0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64,
	0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0xbe, 0x01, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0xfd, 0xb5, 0x93, 0xc7, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x75, 0x82, 0x41, 0x72, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d,
	0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x78, 0x74, 0x2d, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x11,
	0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0xd0, 0x01, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0xef, 0xbd, 0xe2, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x69, 0x62, 0x42, 0x67, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x42, 0x70, 0x82, 0x41, 0x6d, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70,
	0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0xad, 0x01, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0xdf, 0xa5, 0x98, 0xc6, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6f, 0x82, 0x41, 0x6c, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72,
	0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e,
	0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x61, 0x73, 0x74, 0x2d, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x12, 0x9a, 0x01, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x64,
	0x18, 0xa6, 0xa1, 0xff, 0x4d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x69,
	0x82, 0x41, 0x66, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69,
	0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61,
	0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x69, 0x64, 0x52, 0x06, 0x70, 0x61, 0x74, 0x68, 0x49,
	0x64, 0x12, 0x9a, 0x01, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0xf1, 0xc0, 0xc4,
	0x49, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x68, 0x82, 0x41,
	0x65, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76,
	0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a,
	0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0xa6,
	0x01, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0xd1,
	0x83, 0xa9, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6d, 0x82, 0x41,
	0x6a, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76,
	0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a,
	0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x1a, 0x93, 0x13, 0x0a, 0x11, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0xb8, 0x02,
	0x0a, 0x11, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x18, 0xd7, 0xdf, 0xe2, 0xd9, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x83, 0x01,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e,
	0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x6f, 0x73, 0x74,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x4b, 0x65, 0x79, 0x42, 0x80, 0x01, 0x82, 0x41, 0x7d, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69,
	0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d,
	0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x10, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x1a, 0xcd, 0x0d, 0x0a, 0x10, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0xa9, 0x02,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xe1, 0x93, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x86, 0x01, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67,
	0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41,
	0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x6f,
	0x73, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x87, 0x01, 0x82, 0x41, 0x83, 0x01, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72,
	0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x8c, 0x0b, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0xc4, 0x01, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x6c, 0x65, 0x6e,
	0x18, 0xe7, 0xe2, 0xb7, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x90,
	0x01, 0x82, 0x41, 0x8c, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x6c, 0x65,
	0x6e, 0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x4c, 0x65, 0x6e, 0x12, 0xc7, 0x01, 0x0a, 0x09, 0x61,
	0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0xca, 0xd0, 0xc0, 0x59, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x91, 0x01, 0x82, 0x41, 0x8d, 0x01, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62,
	0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0xcc, 0x01, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0xe5, 0x86, 0xce, 0xe7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x92, 0x01, 0x82, 0x41, 0x8e, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72,
	0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e,
	0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74,
	0x74, 0x72, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0xc6, 0x01, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x18, 0xff, 0xc6, 0x9d, 0x9f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x90, 0x01, 0x82, 0x41, 0x8c, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73,
	0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x52, 0x08, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0xc5, 0x01, 0x0a,
	0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0xb8, 0x99, 0xc2, 0x31, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x90, 0x01, 0x82, 0x41, 0x8c, 0x01, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69,
	0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x12, 0xc2, 0x01, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x18, 0xa7, 0x89, 0xeb, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x8f,
	0x01, 0x82, 0x41, 0x8b, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x12, 0xcc, 0x01, 0x0a, 0x0a, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0xe5, 0xab, 0xcd, 0xd1, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x92, 0x01, 0x82, 0x41, 0x8e, 0x01, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69,
	0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x52, 0x0a, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x1a, 0xf2, 0x02, 0x0a, 0x13, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79,
	0x12, 0xa9, 0x01, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x8b, 0x01, 0x82, 0x41, 0x87, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69,
	0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0xae, 0x01, 0x0a,
	0x11, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x80, 0x01, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41,
	0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e,
	0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41,
	0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x10, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x1a, 0xf9, 0x02,
	0x0a, 0x08, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x7a, 0x0a, 0x06, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x62, 0x82, 0x41, 0x5f, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72,
	0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x06,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x7c, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x63, 0x82, 0x41, 0x60, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d,
	0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x2f, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x69, 0x64, 0x52, 0x06, 0x70, 0x61,
	0x74, 0x68, 0x49, 0x64, 0x12, 0x73, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69,
	0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49,
	0x6e, 0x50, 0x6f, 0x73, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x1a, 0x07, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x1a, 0x8f, 0x2a, 0x0a, 0x0b, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50,
	0x72, 0x65, 0x12, 0xc8, 0x01, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0xdb, 0xc3,
	0xbf, 0x85, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70,
	0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a,
	0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x42,
	0x54, 0x82, 0x41, 0x51, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0xc4, 0x01,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xf4, 0x95, 0xbe, 0xdd, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x55, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42,
	0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e,
	0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x53, 0x82, 0x41, 0x50, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62,
	0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x1a, 0xe4, 0x26, 0x0a, 0x06, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12,
	0xd4, 0x01, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0xa9, 0xb7, 0xd5, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x5f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73,
	0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e,
	0x50, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x4b, 0x65, 0x79, 0x42, 0x5a, 0x82, 0x41, 0x57, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70,
	0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52,
	0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x1a, 0x89, 0x22, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x12, 0xdd, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x8b, 0x8c, 0xf2, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x62, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69,
	0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49,
	0x6e, 0x50, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x60, 0x82, 0x41, 0x5d, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d,
	0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x90, 0x02, 0x0a, 0x12, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x80, 0xe4, 0x9c, 0xd8, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x6e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42,
	0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e,
	0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50,
	0x72, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x42, 0x6d, 0x82, 0x41, 0x6a, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x52, 0x11, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x1a, 0x82, 0x0b, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xa2, 0x01,
	0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0xb8, 0x97, 0x98,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6b, 0x82, 0x41, 0x68, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72,
	0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74,
	0x72, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0xb1, 0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0xee, 0xd2, 0xc4, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x70, 0x82, 0x41, 0x6d, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69,
	0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d,
	0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0xbc, 0x01, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0xd0,
	0xe2, 0x95, 0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x74, 0x82, 0x41,
	0x71, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76,
	0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a,
	0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65,
	0x78, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x52, 0x11, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0xce, 0x01, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0xd8, 0xda, 0xce, 0x78, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x69, 0x62, 0x42, 0x67, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x52, 0x4f, 0x55, 0x54, 0x45,
	0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x42, 0x6f, 0x82, 0x41, 0x6c, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69,
	0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x2d, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0xac, 0x01, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x92, 0x9e, 0xda, 0xce, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6e, 0x82, 0x41, 0x6b, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d,
	0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x61, 0x73, 0x74, 0x2d, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x9a, 0x01, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69,
	0x64, 0x18, 0xbb, 0xf0, 0xb3, 0xea, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x68, 0x82, 0x41, 0x65, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x69, 0x64, 0x52, 0x06, 0x70, 0x61, 0x74, 0x68,
	0x49, 0x64, 0x12, 0x9a, 0x01, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0xaa, 0xbb,
	0x9f, 0xbb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x67,
	0x82, 0x41, 0x64, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69,
	0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61,
	0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12,
	0xa6, 0x01, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18,
	0xe0, 0xad, 0xeb, 0xdb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6c,
	0x82, 0x41, 0x69, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69,
	0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61,
	0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x1a, 0x87, 0x13, 0x0a, 0x11, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0xb5,
	0x02, 0x0a, 0x11, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x18, 0xdc, 0x87, 0xfd, 0xb2, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x82,
	0x01, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70,
	0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66,
	0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x72, 0x65,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x4b, 0x65, 0x79, 0x42, 0x7f, 0x82, 0x41, 0x7c, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70,
	0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x52, 0x10, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x1a, 0xc7, 0x0d, 0x0a, 0x10, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0xa9, 0x02, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xa6, 0xd2, 0xc8, 0xfa, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x85, 0x01, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67,
	0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41,
	0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x72,
	0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x86, 0x01, 0x82, 0x41, 0x82, 0x01, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69,
	0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x86, 0x0b, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0xc3, 0x01, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0xc2,
	0x84, 0xc8, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x8f, 0x01, 0x82,
	0x41, 0x8b, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69,
	0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61,
	0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x6c, 0x65, 0x6e, 0x52, 0x07,
	0x61, 0x74, 0x74, 0x72, 0x4c, 0x65, 0x6e, 0x12, 0xc7, 0x01, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0xb5, 0x9d, 0xd5, 0xe3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x90, 0x01, 0x82, 0x41, 0x8c, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69,
	0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74,
	0x74, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0xcb, 0x01, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0xa4, 0xc9, 0x90, 0xff, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x91, 0x01, 0x82, 0x41, 0x8d, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72,
	0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0xc4, 0x01, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x92, 0xe1, 0xe0,
	0x56, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x8f, 0x01, 0x82, 0x41, 0x8b,
	0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76,
	0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a,
	0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x52, 0x08, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0xc4, 0x01, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x18, 0x85, 0xe3, 0xc6, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x8f, 0x01, 0x82, 0x41, 0x8b, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70,
	0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0xc2, 0x01,
	0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x18, 0xf4, 0xdb, 0xd7, 0x92, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x8e, 0x01, 0x82, 0x41, 0x8a, 0x01, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72,
	0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x12, 0xcb, 0x01, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76,
	0x65, 0x18, 0xd4, 0xf0, 0xf3, 0x85, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x91, 0x01, 0x82, 0x41, 0x8d, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72,
	0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65,
	0x1a, 0xef, 0x02, 0x0a, 0x13, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0xa8, 0x01, 0x0a, 0x09, 0x61, 0x74, 0x74,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x8a, 0x01, 0x82,
	0x41, 0x86, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69,
	0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61,
	0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f,
	0x61, 0x74, 0x74, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0xac, 0x01, 0x0a, 0x11, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x7f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70,
	0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66,
	0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x72, 0x65,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x10, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x1a, 0xf6, 0x02, 0x0a, 0x08, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12,
	0x79, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x61, 0x82, 0x41, 0x5e, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x7b, 0x0a, 0x07, 0x70, 0x61,
	0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x62, 0x82, 0x41, 0x5f,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34,
	0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d,
	0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x69, 0x64, 0x52,
	0x06, 0x70, 0x61, 0x74, 0x68, 0x49, 0x64, 0x12, 0x72, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76,
	0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52,
	0x69, 0x62, 0x49, 0x6e, 0x50, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x1a, 0x07, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x1a, 0xd6, 0x2a, 0x0a, 0x0d, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f,
	0x75, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x12, 0xcc, 0x01, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x18, 0xb9, 0xc3, 0xba, 0xf8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62,
	0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66,
	0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x42, 0x56, 0x82, 0x41, 0x53, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72,
	0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75,
	0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x06, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0xc7, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x9e, 0x81, 0xee, 0x4d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66,
	0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49,
	0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64,
	0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x55, 0x82, 0x41, 0x52, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f,
	0x73, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a,
	0xa2, 0x27, 0x0a, 0x06, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0xd9, 0x01, 0x0a, 0x05, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x18, 0x9b, 0xc0, 0xca, 0xa0, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x61,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e,
	0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x73,
	0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65,
	0x79, 0x42, 0x5c, 0x82, 0x41, 0x59, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f,
	0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52,
	0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x1a, 0xbc, 0x22, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x12, 0xe2, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xc5, 0xea, 0xfe, 0xf2, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x64, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66,
	0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62,
	0x4f, 0x75, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x62, 0x82, 0x41, 0x5f, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72,
	0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x94, 0x02, 0x0a, 0x12, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0xa6, 0xef, 0xf3,
	0x99, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x70, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76,
	0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52,
	0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x42, 0x6f, 0x82, 0x41, 0x6c, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62,
	0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x11, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x92, 0x0b, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xa5, 0x01, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x9a, 0x97, 0xcf, 0xd7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x6d, 0x82, 0x41, 0x6a, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69,
	0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74,
	0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0xb3,
	0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x8c, 0xa0, 0x87, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x72, 0x82, 0x41, 0x6f, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73,
	0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0xbe, 0x01, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0xae, 0xa5, 0xe6,
	0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x76, 0x82, 0x41, 0x73, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72,
	0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65,
	0x78, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x52, 0x11, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0xd1, 0x01, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0xf2, 0xcd, 0xc4, 0xac, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x69, 0x62, 0x42, 0x67, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x52, 0x4f, 0x55, 0x54,
	0x45, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x42, 0x71, 0x82, 0x41, 0x6e, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d,
	0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x2d, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0xad, 0x01, 0x0a, 0x0d, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0xdc, 0xcf, 0x84, 0x50,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x70, 0x82, 0x41, 0x6d, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69,
	0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x61,
	0x73, 0x74, 0x2d, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x52, 0x0c, 0x6c, 0x61, 0x73,
	0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x9b, 0x01, 0x0a, 0x07, 0x70, 0x61,
	0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0xa1, 0xe8, 0xa2, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x6a, 0x82, 0x41, 0x67, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d,
	0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x69, 0x64, 0x52,
	0x06, 0x70, 0x61, 0x74, 0x68, 0x49, 0x64, 0x12, 0x9c, 0x01, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x18, 0xc4, 0x91, 0xc3, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x69, 0x82, 0x41, 0x66, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d,
	0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x06,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0xa8, 0x01, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0xc2, 0xff, 0x86, 0xcd, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6e, 0x82, 0x41, 0x6b, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72,
	0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75,
	0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x1a, 0xa1, 0x13, 0x0a, 0x11, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0xba, 0x02, 0x0a, 0x11, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x86, 0xdd,
	0xef, 0xed, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x84, 0x01, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66,
	0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49,
	0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64,
	0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x42, 0x81,
	0x01, 0x82, 0x41, 0x7e, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x52, 0x10, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x1a, 0xd7, 0x0d, 0x0a, 0x10, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0xac, 0x02, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0xf8, 0xdd, 0x85, 0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x87, 0x01, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52,
	0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x73, 0x74,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x88, 0x01, 0x82, 0x41, 0x84, 0x01, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62,
	0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x93, 0x0b, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0xc6, 0x01, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x6c, 0x65, 0x6e, 0x18,
	0xcc, 0xfa, 0xaa, 0x81, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x91,
	0x01, 0x82, 0x41, 0x8d, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73,
	0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x6c,
	0x65, 0x6e, 0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x4c, 0x65, 0x6e, 0x12, 0xc8, 0x01, 0x0a, 0x09,
	0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0xc7, 0xbd, 0xff, 0x1e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x92, 0x01, 0x82, 0x41, 0x8e, 0x01, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69,
	0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x61, 0x74,
	0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0xcc, 0x01, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x86, 0xe2, 0xf6, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x93, 0x01, 0x82, 0x41, 0x8f, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f,
	0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x61, 0x74, 0x74, 0x72, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0xc6, 0x01, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x18, 0xa0, 0xac, 0x91, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x91, 0x01, 0x82, 0x41, 0x8d, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70,
	0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x52, 0x08, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0xc7,
	0x01, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0xc3, 0xb1, 0x9c, 0x88,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x91, 0x01, 0x82, 0x41, 0x8d,
	0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76,
	0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a,
	0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x08,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0xc3, 0x01, 0x0a, 0x07, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x18, 0xbe, 0x92, 0xf2, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x90, 0x01, 0x82, 0x41, 0x8c, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69,
	0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74,
	0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x12, 0xcd,
	0x01, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x86, 0xb5,
	0xbf, 0x99, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x93, 0x01, 0x82,
	0x41, 0x8f, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69,
	0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61,
	0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x1a, 0xf4,
	0x02, 0x0a, 0x13, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0xaa, 0x01, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x8c, 0x01, 0x82, 0x41, 0x88,
	0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76,
	0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a,
	0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f,
	0x61, 0x74, 0x74, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0xaf, 0x01, 0x0a, 0x11, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x81, 0x01, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67,
	0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41,
	0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50,
	0x6f, 0x73, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x52, 0x10, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x1a, 0xfc, 0x02, 0x0a, 0x08, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x12, 0x7b, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x63, 0x82, 0x41, 0x60, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70,
	0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12,
	0x7d, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x64, 0x82, 0x41, 0x61, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73,
	0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x70,
	0x61, 0x74, 0x68, 0x2d, 0x69, 0x64, 0x52, 0x06, 0x70, 0x61, 0x74, 0x68, 0x49, 0x64, 0x12, 0x74,
	0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5e, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52,
	0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x73, 0x74,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x05, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x1a, 0x07, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xb6, 0x2a,
	0x0a, 0x0c, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x72, 0x65, 0x12, 0xc9,
	0x01, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0xaa, 0xaf, 0xef, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x57, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73,
	0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75,
	0x74, 0x50, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x42, 0x55, 0x82, 0x41, 0x52,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34,
	0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d,
	0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0xc5, 0x01, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0xb3, 0xf1, 0xca, 0x49, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x56, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52,
	0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x54, 0x82, 0x41, 0x51, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72,
	0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75,
	0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x1a, 0x88, 0x27, 0x0a, 0x06, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0xd7, 0x01,
	0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0xd0, 0xc7, 0x9a, 0xab, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x60, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42,
	0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e,
	0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74,
	0x50, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x4b, 0x65, 0x79, 0x42, 0x5b, 0x82, 0x41, 0x58, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d,
	0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x1a, 0xa7, 0x22, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x12, 0xe0, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xda, 0xa9, 0xb2, 0xc6,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x63, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34,
	0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69,
	0x62, 0x4f, 0x75, 0x74, 0x50, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x61, 0x82, 0x41, 0x5e, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72,
	0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x92, 0x02, 0x0a, 0x12, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0xd7, 0xbe, 0xdb, 0xaa,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34,
	0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69,
	0x62, 0x4f, 0x75, 0x74, 0x50, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x42, 0x6e, 0x82, 0x41, 0x6b, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f,
	0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x11, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x8a, 0x0b, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0xa3, 0x01, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0xf3, 0x9e, 0x9a, 0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x6c, 0x82, 0x41, 0x69, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x09,
	0x61, 0x74, 0x74, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0xb3, 0x01, 0x0a, 0x0f, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0xdb, 0x9b,
	0xa3, 0x99, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x71, 0x82, 0x41,
	0x6e, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76,
	0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a,
	0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0xbd, 0x01, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0xe9, 0xaa, 0xa4, 0x49, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x75, 0x82, 0x41, 0x72, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72,
	0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75,
	0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x78, 0x74, 0x2d, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x11, 0x65, 0x78,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0xcf, 0x01, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0xcb, 0xae, 0xf9, 0x7a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x69, 0x62, 0x42, 0x67, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x42, 0x70, 0x82, 0x41, 0x6d, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0xad, 0x01, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x18, 0xfb, 0xcd, 0x85, 0xd2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x6f, 0x82, 0x41, 0x6c, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70,
	0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x61, 0x73, 0x74, 0x2d, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x12, 0x9b, 0x01, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x92, 0xb7,
	0xee, 0xd4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x69, 0x82, 0x41,
	0x66, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76,
	0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a,
	0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x70, 0x61, 0x74, 0x68, 0x2d, 0x69, 0x64, 0x52, 0x06, 0x70, 0x61, 0x74, 0x68, 0x49, 0x64, 0x12,
	0x9a, 0x01, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0xbd, 0x9b, 0x87, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x68, 0x82, 0x41, 0x65, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72,
	0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0xa7, 0x01, 0x0a,
	0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0xc5, 0x92, 0xe9,
	0x94, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6d, 0x82, 0x41, 0x6a,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34,
	0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d,
	0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x1a, 0x98, 0x13, 0x0a, 0x11, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0xb7, 0x02, 0x0a,
	0x11, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x18, 0xfb, 0xa7, 0xa9, 0x43, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x83, 0x01, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69,
	0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x72, 0x65, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4b, 0x65,
	0x79, 0x42, 0x80, 0x01, 0x82, 0x41, 0x7d, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70,
	0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x52, 0x10, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x1a, 0xd3, 0x0d, 0x0a, 0x10, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0xab, 0x02, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xa5, 0xfa, 0x9a, 0xf9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x86, 0x01, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67,
	0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41,
	0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50,
	0x72, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x87, 0x01, 0x82, 0x41, 0x83, 0x01, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72,
	0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x90, 0x0b, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0xc5, 0x01, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x6c, 0x65, 0x6e,
	0x18, 0x8b, 0xe7, 0xcd, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x90, 0x01, 0x82, 0x41, 0x8c, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72,
	0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x6c,
	0x65, 0x6e, 0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x4c, 0x65, 0x6e, 0x12, 0xc8, 0x01, 0x0a, 0x09,
	0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0xfe, 0xcd, 0xca, 0x80, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x91, 0x01, 0x82, 0x41, 0x8d, 0x01, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72,
	0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x61, 0x74,
	0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0xcc, 0x01, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0xf1, 0xde, 0xdf, 0x9f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x92, 0x01, 0x82, 0x41, 0x8e, 0x01, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d,
	0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x61, 0x74, 0x74, 0x72, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0xc6, 0x01, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x18, 0x9b, 0x87, 0xba, 0xa5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x90, 0x01, 0x82, 0x41, 0x8c, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d,
	0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x52, 0x08, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0xc6,
	0x01, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0xd4, 0xce, 0x82, 0xa1,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x90, 0x01, 0x82, 0x41, 0x8c,
	0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76,
	0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a,
	0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x08, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0xc3, 0x01, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x18, 0xf3, 0xe5, 0x95, 0xb8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x8f, 0x01, 0x82, 0x41, 0x8b, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69,
	0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74,
	0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x12, 0xcc, 0x01,
	0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0xc1, 0xf1, 0xbe,
	0x9d, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x92, 0x01, 0x82, 0x41,
	0x8e, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70,
	0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64,
	0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65,
	0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x1a, 0xf2, 0x02, 0x0a,
	0x13, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x4b, 0x65, 0x79, 0x12, 0xa9, 0x01, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x8b, 0x01, 0x82, 0x41, 0x87, 0x01, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72,
	0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74,
	0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0xae, 0x01, 0x0a, 0x11, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x80, 0x01, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52,
	0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x72, 0x65, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52,
	0x10, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x1a, 0xf9, 0x02, 0x0a, 0x08, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x7a,
	0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x62,
	0x82, 0x41, 0x5f, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69,
	0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61,
	0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x7c, 0x0a, 0x07, 0x70, 0x61,
	0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x63, 0x82, 0x41, 0x60,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34,
	0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d,
	0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x69, 0x64,
	0x52, 0x06, 0x70, 0x61, 0x74, 0x68, 0x49, 0x64, 0x12, 0x73, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70,
	0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a,
	0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x1a, 0x07, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xa4, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x9a, 0x01, 0x0a, 0x10, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xc0, 0x88, 0x8f, 0x7f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x55, 0x82, 0x41, 0x52, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72,
	0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0xea, 0x01,
	0x0a, 0x0b, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x7a, 0x0a,
	0x10, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x5f, 0x0a, 0x08, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62,
	0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66,
	0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x52, 0x08, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x1a, 0xcc, 0xe5, 0x01, 0x0a, 0x0e,
	0x49, 0x70, 0x76, 0x36, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x8f,
	0x01, 0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x5f, 0x72, 0x69, 0x62, 0x18, 0xf4, 0x80, 0xe5, 0x6b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69,
	0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x53, 0x72,
	0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4c, 0x6f, 0x63, 0x52, 0x69, 0x62, 0x42,
	0x37, 0x82, 0x41, 0x34, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x52, 0x69, 0x62,
	0x12, 0x9a, 0x01, 0x0a, 0x09, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x18, 0xab,
	0xda, 0x83, 0xa9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66,
	0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49,
	0x70, 0x76, 0x36, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74,
	0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x52, 0x09, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x1a, 0xda, 0x24,
	0x0a, 0x06, 0x4c, 0x6f, 0x63, 0x52, 0x69, 0x62, 0x12, 0x9d, 0x01, 0x0a, 0x06, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x18, 0xe9, 0xc6, 0xa9, 0xcb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52,
	0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x4c, 0x6f, 0x63, 0x52, 0x69, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x1a, 0xaf, 0x23, 0x0a, 0x06, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x12, 0xa9, 0x01, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0xab, 0x93,
	0xf6, 0x29, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76,
	0x36, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4c, 0x6f, 0x63, 0x52,
	0x69, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x1a,
	0xd8, 0x1e, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0xb2, 0x01, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0xf5, 0xc3, 0xd0, 0x7e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69,
	0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x4c, 0x6f, 0x63, 0x52, 0x69, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x4a, 0x82, 0x41, 0x47,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36,
	0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6c, 0x6f, 0x63,
	0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0xe5,
	0x01, 0x0a, 0x12, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0xd6, 0xc1, 0xa8, 0xf5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x59, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70,
	0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66,
	0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4c, 0x6f, 0x63, 0x52, 0x69, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x42, 0x57, 0x82, 0x41, 0x54, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d,
	0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6c, 0x6f, 0x63, 0x2d,
	0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x52, 0x11, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0xd8, 0x0a, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x8c, 0x01, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0xaa, 0xc0, 0xfb, 0x53, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x55, 0x82,
	0x41, 0x52, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70,
	0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6c,
	0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x7f, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0xed, 0xd9, 0xe3, 0xba, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x50, 0x82, 0x41, 0x4d, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74,
	0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x12, 0x9b, 0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0xfc, 0xb4, 0xb0, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x5a, 0x82, 0x41, 0x57, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x0e,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x89,
	0x01, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0xab, 0x99, 0xf3, 0x26,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x53, 0x82, 0x41, 0x50,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36,
	0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6c, 0x6f, 0x63,
	0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0xa6, 0x01, 0x0a, 0x13, 0x65,
	0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0xde, 0xb2, 0xb0, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x5e, 0x82, 0x41, 0x5b, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x78, 0x74,
	0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x52, 0x11, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0xb8, 0x01, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0xa2, 0xc2, 0xf3, 0x53, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x69, 0x62, 0x42, 0x67, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x45,
	0x41, 0x53, 0x4f, 0x4e, 0x42, 0x59, 0x82, 0x41, 0x56, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69,
	0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52,
	0x0d, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x96,
	0x01, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x18, 0xcc, 0xec, 0x91, 0x81, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x58, 0x82, 0x41, 0x55, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x61, 0x73, 0x74,
	0x2d, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x84, 0x01, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x68,
	0x5f, 0x69, 0x64, 0x18, 0x91, 0xf9, 0xf5, 0x8e, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x52, 0x82, 0x41, 0x4f, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70,
	0x61, 0x74, 0x68, 0x2d, 0x69, 0x64, 0x52, 0x06, 0x70, 0x61, 0x74, 0x68, 0x49, 0x64, 0x12, 0x90,
	0x01, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0xf2,
	0xf2, 0xbe, 0x99, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x56, 0x82,
	0x41, 0x53, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70,
	0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6c,
	0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x1a, 0xd6, 0x10, 0x0a, 0x11, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x88, 0x02, 0x0a, 0x11, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0xd6, 0x97,
	0xf9, 0x7b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76,
	0x36, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4c, 0x6f, 0x63, 0x52,
	0x69, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x4b, 0x65, 0x79, 0x42, 0x69, 0x82, 0x41, 0x66, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72,
	0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x10, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x1a, 0xf0, 0x0b, 0x0a, 0x10, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0xfa, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0xe8, 0xad, 0x80, 0x60, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x70, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e,
	0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69,
	0x2e, 0x49, 0x70, 0x76, 0x36, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x4c, 0x6f, 0x63, 0x52, 0x69, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x82, 0x41,
	0x6c, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76,
	0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6c, 0x6f,
	0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x1a, 0xde, 0x09, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xac,
	0x01, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0xbc, 0x8d, 0xa9, 0x85,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x78, 0x82, 0x41, 0x75, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d,
	0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6c, 0x6f, 0x63, 0x2d,
	0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72,
	0x2d, 0x6c, 0x65, 0x6e, 0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x4c, 0x65, 0x6e, 0x12, 0xaf, 0x01,
	0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0xf7, 0xc8, 0x83, 0xfc,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x79, 0x82, 0x41, 0x76, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d,
	0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6c, 0x6f, 0x63, 0x2d,
	0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0xb2, 0x01, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0xb6,
	0xa2, 0x8a, 0x75, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x7a, 0x82,
	0x41, 0x77, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70,
	0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6c,
	0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61,
	0x74, 0x74, 0x72, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0xad, 0x01, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x18, 0xb0, 0xa3, 0x8b, 0x8f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x78, 0x82, 0x41, 0x75, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x52, 0x08, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x12, 0xad, 0x01, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x18, 0x93, 0xaa, 0xdf, 0xd5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x78, 0x82, 0x41, 0x75, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x12, 0xa9, 0x01, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x18, 0xce, 0x92, 0xb4, 0x58, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x77,
	0x82, 0x41, 0x74, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69,
	0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f,
	0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x12, 0xb2, 0x01, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18,
	0xf6, 0xfc, 0xb9, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x7a, 0x82,
	0x41, 0x77, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70,
	0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6c,
	0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x1a, 0xc2, 0x02, 0x0a, 0x13, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x90, 0x01,
	0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x73, 0x82, 0x41, 0x70, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74,
	0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x97, 0x01, 0x0a, 0x11, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6a, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69,
	0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x4c, 0x6f, 0x63, 0x52, 0x69, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x10, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x1a, 0x9d, 0x03, 0x0a, 0x08, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x65, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x68, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x4c, 0x82, 0x41, 0x49, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72,
	0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69,
	0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x70,
	0x61, 0x74, 0x68, 0x2d, 0x69, 0x64, 0x52, 0x06, 0x70, 0x61, 0x74, 0x68, 0x49, 0x64, 0x12, 0x69,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x4d, 0x82, 0x41, 0x4a, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52,
	0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x60, 0x0a, 0x05, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x4a, 0x82, 0x41, 0x47, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72,
	0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69,
	0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x5d, 0x0a, 0x05, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e,
	0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69,
	0x2e, 0x49, 0x70, 0x76, 0x36, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x4c, 0x6f, 0x63, 0x52, 0x69, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x1a, 0xac, 0xbe, 0x01, 0x0a, 0x09,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x12, 0xad, 0x01, 0x0a, 0x08, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x18, 0xc0, 0xf6, 0xff, 0xe3, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x49, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67,
	0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41,
	0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x53, 0x72, 0x74, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x42, 0x42, 0x82, 0x41, 0x3f,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36,
	0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x52,
	0x08, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x1a, 0xf9, 0xba, 0x01, 0x0a, 0x08, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x12, 0xd1, 0x01, 0x0a, 0x0f, 0x61, 0x64, 0x6a, 0x5f,
	0x72, 0x69, 0x62, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x18, 0xdd, 0xc4, 0xb3, 0x54,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66,
	0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x53,
	0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a,
	0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x42, 0x52, 0x82, 0x41, 0x4f, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73,
	0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64,
	0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x52, 0x0c, 0x61,
	0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x12, 0xce, 0x01, 0x0a, 0x0e,
	0x61, 0x64, 0x6a, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x18, 0xa2,
	0x80, 0xf0, 0xd2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66,
	0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49,
	0x70, 0x76, 0x36, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x72, 0x65, 0x42, 0x51, 0x82, 0x41,
	0x4e, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76,
	0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x52,
	0x0b, 0x61, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x72, 0x65, 0x12, 0xd6, 0x01, 0x0a,
	0x10, 0x61, 0x64, 0x6a, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x73,
	0x74, 0x18, 0x94, 0xc2, 0xff, 0xb1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62,
	0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66,
	0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x73,
	0x74, 0x42, 0x53, 0x82, 0x41, 0x50, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75,
	0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x52, 0x0d, 0x61, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75,
	0x74, 0x50, 0x6f, 0x73, 0x74, 0x12, 0xd1, 0x01, 0x0a, 0x0f, 0x61, 0x64, 0x6a, 0x5f, 0x72, 0x69,
	0x62, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x18, 0xb1, 0xbf, 0xac, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x53, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73,
	0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x53, 0x72, 0x74,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69,
	0x62, 0x4f, 0x75, 0x74, 0x50, 0x72, 0x65, 0x42, 0x52, 0x82, 0x41, 0x4f, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74,
	0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d,
	0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x52, 0x0c, 0x61, 0x64, 0x6a,
	0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x72, 0x65, 0x12, 0xb0, 0x01, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0xaa, 0x94, 0xb3, 0x9f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52,
	0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x48, 0x82, 0x41, 0x45,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36,
	0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xaa, 0x2d, 0x0a,
	0x0c, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x12, 0xd1, 0x01,
	0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0xf6, 0x88, 0xe5, 0xb2, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73,
	0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x53, 0x72, 0x74,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69,
	0x62, 0x49, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x42, 0x59,
	0x82, 0x41, 0x56, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69,
	0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f,
	0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x1a, 0xc5, 0x2b, 0x0a, 0x06, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0xde, 0x01, 0x0a,
	0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x94, 0xf4, 0xc1, 0x86, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x63, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67,
	0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41,
	0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x53, 0x72, 0x74, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49,
	0x6e, 0x50, 0x6f, 0x73, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x4b, 0x65, 0x79, 0x42, 0x5f, 0x82, 0x41, 0x5c, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72,
	0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69,
	0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x1a, 0xcd, 0x25,
	0x0a, 0x05, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0xe6, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0xee, 0xc8, 0xe7, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x66, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e,
	0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69,
	0x2e, 0x49, 0x70, 0x76, 0x36, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x65, 0x82, 0x41, 0x62, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69,
	0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x98, 0x02, 0x0a, 0x12, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0xab, 0xb1, 0xfb, 0x57, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x72, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67,
	0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41,
	0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x53, 0x72, 0x74, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49,
	0x6e, 0x50, 0x6f, 0x73, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x42, 0x72, 0x82, 0x41, 0x6f, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69,
	0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62,
	0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x11, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0xf5, 0x0d, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xa7, 0x01, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x97, 0x84, 0xa9, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x70, 0x82, 0x41, 0x6d, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69,
	0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0xa5, 0x01, 0x0a, 0x09, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0xe1, 0xc3,
	0xaa, 0x91, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6f, 0x82, 0x41,
	0x6c, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76,
	0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x62, 0x65, 0x73, 0x74, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x52, 0x08, 0x62,
	0x65, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x99, 0x01, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x18, 0x9a, 0xf4, 0xe4, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x6b, 0x82, 0x41, 0x68, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70,
	0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x12, 0xb7, 0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0xe7, 0xa4, 0xb7, 0xdf, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x75, 0x82, 0x41, 0x72, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65,
	0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72,
	0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x0e, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0xa4, 0x01,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x96, 0xe9, 0x8f, 0x51, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6e, 0x82, 0x41, 0x6b, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d,
	0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61,
	0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0xc2, 0x01, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0xed, 0xa3, 0xbd,
	0x8a, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x79, 0x82, 0x41, 0x76,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36,
	0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x65, 0x78, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x11, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0xd3, 0x01, 0x0a, 0x0e, 0x69, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x9f, 0xc5, 0xb5,
	0x6e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x69, 0x62,
	0x42, 0x67, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x52,
	0x4f, 0x55, 0x54, 0x45, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x42, 0x74, 0x82, 0x41, 0x71, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d,
	0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61,
	0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x52, 0x0d, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0xb1, 0x01, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x18, 0x8f, 0xa2, 0x8c, 0xac, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x73, 0x82, 0x41, 0x70, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d,
	0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x61, 0x73, 0x74, 0x2d, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x12, 0x9f, 0x01, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18,
	0xd6, 0xc6, 0xa3, 0xf1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6d,
	0x82, 0x41, 0x6a, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69,
	0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f,
	0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x69, 0x64, 0x52, 0x06, 0x70,
	0x61, 0x74, 0x68, 0x49, 0x64, 0x12, 0xab, 0x01, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x81, 0xdc, 0x8a, 0x93, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x71, 0x82, 0x41, 0x6e, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69,
	0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62,
	0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x1a, 0xc7, 0x13, 0x0a, 0x11, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0xc0, 0x02, 0x0a, 0x11, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18,
	0xe7, 0xfd, 0xc2, 0xa2, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x86, 0x01, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e,
	0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69,
	0x2e, 0x49, 0x70, 0x76, 0x36, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x42, 0x85, 0x01, 0x82, 0x41, 0x81, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69,
	0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62,
	0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x10, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x1a, 0xf2, 0x0d, 0x0a,
	0x10, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x12, 0xb2, 0x02, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x91, 0xc5, 0x82, 0x82,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x89, 0x01, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76,
	0x36, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41,
	0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x8b, 0x01, 0x82, 0x41, 0x87, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d,
	0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xa8, 0x0b, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0xc9, 0x01, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x97, 0x82,
	0xa2, 0xa4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x94, 0x01, 0x82,
	0x41, 0x90, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69,
	0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f,
	0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d,
	0x6c, 0x65, 0x6e, 0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x4c, 0x65, 0x6e, 0x12, 0xcb, 0x01, 0x0a,
	0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0xfa, 0x84, 0x95, 0x43, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x95, 0x01, 0x82, 0x41, 0x91, 0x01, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d,
	0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61,
	0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65,
	0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0xcf, 0x01, 0x0a, 0x0a, 0x61,
	0x74, 0x74, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x95, 0xd7, 0x89, 0x62, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x96, 0x01, 0x82, 0x41, 0x92, 0x01, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d,
	0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61,
	0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0xc9, 0x01, 0x0a,
	0x08, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0xcf, 0xcf, 0xf8, 0x67, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x94, 0x01, 0x82, 0x41, 0x90, 0x01, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73,
	0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64,
	0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x52, 0x08,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0xca, 0x01, 0x0a, 0x08, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x88, 0xe0, 0xe6, 0xe9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x94, 0x01, 0x82, 0x41, 0x90, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65,
	0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72,
	0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x08, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0xc6, 0x01, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x18, 0xf7, 0x8c, 0xd2, 0x63, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x93, 0x01, 0x82, 0x41, 0x8f, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e,
	0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x12, 0xd0,
	0x01, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0xd5, 0xf1,
	0xd4, 0x94, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x96, 0x01, 0x82,
	0x41, 0x92, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69,
	0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f,
	0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76,
	0x65, 0x1a, 0xf9, 0x02, 0x0a, 0x13, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0xad, 0x01, 0x0a, 0x09, 0x61, 0x74,
	0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x8f, 0x01,
	0x82, 0x41, 0x8b, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70,
	0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0xb1, 0x01, 0x0a, 0x11, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x83, 0x01, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76,
	0x36, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41,
	0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x10, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x1a, 0x89, 0x04,
	0x0a, 0x08, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x80, 0x01, 0x0a, 0x07, 0x70,
	0x61, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x67, 0x82, 0x41,
	0x64, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76,
	0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x70, 0x61,
	0x74, 0x68, 0x2d, 0x69, 0x64, 0x52, 0x06, 0x70, 0x61, 0x74, 0x68, 0x49, 0x64, 0x12, 0x84, 0x01,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x68, 0x82, 0x41, 0x65, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d,
	0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x2f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x7b, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x65, 0x82, 0x41, 0x62, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d,
	0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x12, 0x76, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x60, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67,
	0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41,
	0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x53, 0x72, 0x74, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49,
	0x6e, 0x50, 0x6f, 0x73, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x1a, 0xdd, 0x2b, 0x0a, 0x0b, 0x41, 0x64,
	0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x72, 0x65, 0x12, 0xce, 0x01, 0x0a, 0x06, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x18, 0xcb, 0xb0, 0xf6, 0x39, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x59, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52,
	0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x72,
	0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x42, 0x58, 0x82, 0x41, 0x55, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72,
	0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a,
	0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x1a, 0xfc, 0x29, 0x0a, 0x06, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0xdb, 0x01, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18,
	0xf9, 0x9a, 0xc7, 0x4b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x62, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66,
	0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49,
	0x70, 0x76, 0x36, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x42, 0x5e, 0x82, 0x41,
	0x5b, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76,
	0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x05, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x1a, 0x8c, 0x24, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0xe4, 0x01,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xfb, 0x92, 0xe4, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67,
	0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41,
	0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x53, 0x72, 0x74, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49,
	0x6e, 0x50, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x64, 0x82, 0x41, 0x61, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74,
	0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d,
	0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x97, 0x02, 0x0a, 0x12, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0xf0, 0xae, 0xab, 0x92,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x71, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36,
	0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64,
	0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x42, 0x71, 0x82, 0x41, 0x6e, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72,
	0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a,
	0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x11, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0xc4,
	0x0c, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xa6, 0x01, 0x0a, 0x0a, 0x61, 0x74, 0x74,
	0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x88, 0x82, 0x85, 0x76, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6f, 0x82, 0x41, 0x6c, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72,
	0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69,
	0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72,
	0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x98, 0x01, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x8f, 0xbc, 0x90, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6a, 0x82, 0x41, 0x67, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73,
	0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64,
	0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0xb6, 0x01, 0x0a,
	0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x9e, 0x9f, 0xc3, 0xaf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x74, 0x82, 0x41, 0x71, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70,
	0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0xa4, 0x01, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x95, 0xe7, 0x82, 0xfe, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x6d, 0x82, 0x41, 0x6a, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d,
	0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0xc1, 0x01, 0x0a,
	0x13, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0xc0, 0x97, 0xed, 0x83, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x78, 0x82, 0x41, 0x75, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d,
	0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x78, 0x74, 0x2d, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x11, 0x65,
	0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0xd2, 0x01, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0xc8, 0x99, 0xba, 0x1e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x69, 0x62, 0x42, 0x67, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x42, 0x73, 0x82, 0x41, 0x70, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e,
	0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0xb0, 0x01, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x82, 0xd0, 0xdf, 0xab, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x72, 0x82, 0x41, 0x6f, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65,
	0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72,
	0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x61, 0x73,
	0x74, 0x2d, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x9d, 0x01, 0x0a, 0x07, 0x70, 0x61, 0x74,
	0x68, 0x5f, 0x69, 0x64, 0x18, 0xeb, 0xe0, 0x81, 0x4f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x6c, 0x82, 0x41, 0x69, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69,
	0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x69, 0x64,
	0x52, 0x06, 0x70, 0x61, 0x74, 0x68, 0x49, 0x64, 0x12, 0xaa, 0x01, 0x0a, 0x0b, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x90, 0xb2, 0xa5, 0xc2, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x70, 0x82, 0x41, 0x6d, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74,
	0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d,
	0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x1a, 0xba, 0x13, 0x0a, 0x11, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0xbe, 0x02, 0x0a, 0x11,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x18, 0xec, 0xf4, 0xff, 0xb0, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x85, 0x01, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69,
	0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x72, 0x65,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x4b, 0x65, 0x79, 0x42, 0x84, 0x01, 0x82, 0x41, 0x80, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72,
	0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69,
	0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x10, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x1a, 0xe9, 0x0d, 0x0a,
	0x10, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x12, 0xb0, 0x02, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xd6, 0xec, 0x86, 0xd0,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x88, 0x01, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76,
	0x36, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41,
	0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x8a, 0x01, 0x82, 0x41, 0x86, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69,
	0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x1a, 0xa1, 0x0b, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xc8,
	0x01, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0xf2, 0x9d, 0xb5, 0xb3,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x93, 0x01, 0x82, 0x41, 0x8f,
	0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76,
	0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x6c, 0x65, 0x6e,
	0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x4c, 0x65, 0x6e, 0x12, 0xca, 0x01, 0x0a, 0x09, 0x61, 0x74,
	0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0xe5, 0xf2, 0xcb, 0x45, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x94, 0x01, 0x82, 0x41, 0x90, 0x01, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74,
	0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d,
	0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x61, 0x74,
	0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0xcf, 0x01, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x94, 0xb1, 0xb5, 0xcd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x95, 0x01, 0x82, 0x41, 0x91, 0x01, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74,
	0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d,
	0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x61,
	0x74, 0x74, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0xc8, 0x01, 0x0a, 0x08, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0xe2, 0xce, 0x80, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x93, 0x01, 0x82, 0x41, 0x8f, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72,
	0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69,
	0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x52, 0x08, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x12, 0xc9, 0x01, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x18, 0x95, 0xe1, 0xad, 0x86, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x93, 0x01, 0x82, 0x41, 0x8f, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e,
	0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12,
	0xc5, 0x01, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x18, 0xc4, 0xa4, 0xd0, 0x2b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x92, 0x01, 0x82, 0x41, 0x8e, 0x01,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36,
	0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x07,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x12, 0xce, 0x01, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0xc4, 0xa9, 0xbf, 0x45, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x95, 0x01, 0x82, 0x41, 0x91, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65,
	0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72,
	0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x52, 0x0a, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x1a, 0xf7, 0x02, 0x0a, 0x13, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79,
	0x12, 0xac, 0x01, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x8e, 0x01, 0x82, 0x41, 0x8a, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65,
	0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72,
	0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0xb0, 0x01, 0x0a, 0x11, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x82, 0x01, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69,
	0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x72, 0x65,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x10, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x1a, 0x84, 0x04, 0x0a, 0x08, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12,
	0x7f, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x66, 0x82, 0x41, 0x63, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d,
	0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x2f, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x69, 0x64, 0x52, 0x06, 0x70, 0x61, 0x74, 0x68, 0x49, 0x64,
	0x12, 0x83, 0x01, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x67, 0x82, 0x41, 0x64, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d,
	0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x7a, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x64, 0x82, 0x41, 0x61, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72,
	0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69,
	0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0x75, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x5f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42,
	0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e,
	0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x53, 0x72, 0x74, 0x65,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62,
	0x49, 0x6e, 0x50, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x1a, 0xa8, 0x2c, 0x0a, 0x0d, 0x41, 0x64,
	0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x12, 0xd3, 0x01, 0x0a, 0x06,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x89, 0xba, 0xfe, 0xef, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x5b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67,
	0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41,
	0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x53, 0x72, 0x74, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f,
	0x75, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x42, 0x5a, 0x82,
	0x41, 0x57, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70,
	0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f,
	0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x1a, 0xc0, 0x2a, 0x0a, 0x06, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0xe0, 0x01, 0x0a,
	0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0xcb, 0xb7, 0x96, 0x95, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x64, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67,
	0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41,
	0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x53, 0x72, 0x74, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f,
	0x75, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x42, 0x60, 0x82, 0x41, 0x5d, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65,
	0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72,
	0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x1a,
	0xc2, 0x24, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0xe9, 0x01, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x95, 0xd2, 0xe0, 0xba, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x67, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52,
	0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50,
	0x6f, 0x73, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x66, 0x82, 0x41, 0x63, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65,
	0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72,
	0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x9b, 0x02, 0x0a, 0x12, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0xf6, 0x8b, 0xbb,
	0xe3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76,
	0x36, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41,
	0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x42, 0x73, 0x82, 0x41, 0x70,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36,
	0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x52, 0x11, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x1a, 0xd5, 0x0c, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xa8, 0x01,
	0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0xca, 0xb2, 0xe9,
	0x53, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x71, 0x82, 0x41, 0x6e, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d,
	0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61,
	0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x09, 0x61,
	0x74, 0x74, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x9a, 0x01, 0x0a, 0x05, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x8d, 0x8e, 0xdf, 0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x6c, 0x82, 0x41, 0x69, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74,
	0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0xb7, 0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x9c, 0xfc, 0xa2, 0x30, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x76, 0x82, 0x41, 0x73, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74,
	0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d,
	0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0xa5, 0x01, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0xcb, 0xac, 0xc7,
	0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6f, 0x82, 0x41,
	0x6c, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76,
	0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73,
	0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0xc3, 0x01, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0xfe, 0xae, 0xf2, 0xfb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x7a,
	0x82, 0x41, 0x77, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69,
	0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70,
	0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x78, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x11, 0x65, 0x78, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0xd4, 0x01,
	0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0xc2, 0xcb, 0xb3, 0x7c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x69, 0x62, 0x42, 0x67, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x42, 0x75,
	0x82, 0x41, 0x72, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69,
	0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70,
	0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0xb2, 0x01, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0xec, 0xee, 0xfc, 0xbc, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x74, 0x82, 0x41, 0x71, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72,
	0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69,
	0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x61,
	0x73, 0x74, 0x2d, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x52, 0x0c, 0x6c, 0x61, 0x73,
	0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0xa0, 0x01, 0x0a, 0x07, 0x70, 0x61,
	0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0xb1, 0xa5, 0xc8, 0xfd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x6e, 0x82, 0x41, 0x6b, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69,
	0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62,
	0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x61, 0x74,
	0x68, 0x2d, 0x69, 0x64, 0x52, 0x06, 0x70, 0x61, 0x74, 0x68, 0x49, 0x64, 0x12, 0xac, 0x01, 0x0a,
	0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x92, 0xdd, 0xaa,
	0xad, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x72, 0x82, 0x41, 0x6f,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36,
	0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52,
	0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x1a, 0xd6, 0x13, 0x0a, 0x11,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x12, 0xc2, 0x02, 0x0a, 0x11, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0xf6, 0xdc, 0xbc, 0xa9, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x87, 0x01, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73,
	0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x53, 0x72, 0x74,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69,
	0x62, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x42, 0x86, 0x01, 0x82, 0x41,
	0x82, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70,
	0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f,
	0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x52, 0x10, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x1a, 0xfd, 0x0d, 0x0a, 0x10, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0xb3, 0x02, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x88, 0xbf, 0xbc, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x8a,
	0x01, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70,
	0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66,
	0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75,
	0x74, 0x50, 0x6f, 0x73, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x8c, 0x01, 0x82, 0x41,
	0x88, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70,
	0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f,
	0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x1a, 0xb2, 0x0b, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xc9, 0x01, 0x0a, 0x08,
	0x61, 0x74, 0x74, 0x72, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0xdc, 0xba, 0xa1, 0x79, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x95, 0x01, 0x82, 0x41, 0x91, 0x01, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72,
	0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a,
	0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x6c, 0x65, 0x6e, 0x52, 0x07,
	0x61, 0x74, 0x74, 0x72, 0x4c, 0x65, 0x6e, 0x12, 0xcd, 0x01, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x97, 0xdd, 0xf3, 0xff, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x96, 0x01, 0x82, 0x41, 0x92, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65,
	0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72,
	0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x61,
	0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0xd1, 0x01, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0xd6, 0xa9, 0xa0, 0x8f, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x97, 0x01, 0x82, 0x41, 0x93, 0x01, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72,
	0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a,
	0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0xcb, 0x01, 0x0a, 0x08,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0xd0, 0xf3, 0xce, 0x81, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x95, 0x01, 0x82, 0x41, 0x91, 0x01, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73,
	0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64,
	0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x52,
	0x08, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0xcb, 0x01, 0x0a, 0x08, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0xb3, 0x88, 0xd2, 0xee, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x95, 0x01, 0x82, 0x41, 0x91, 0x01, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74,
	0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d,
	0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x08, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0xc8, 0x01, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x18, 0xee, 0x8d, 0xae, 0xde, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x94, 0x01, 0x82, 0x41, 0x90, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69,
	0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62,
	0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x12, 0xd1, 0x01, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x96, 0x97, 0xc9, 0xce, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x97, 0x01, 0x82, 0x41, 0x93, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f,
	0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x1a, 0xfb, 0x02, 0x0a, 0x13, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0xae,
	0x01, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x90, 0x01, 0x82, 0x41, 0x8c, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69,
	0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62,
	0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0xb2, 0x01, 0x0a, 0x11, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x84, 0x01, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69,
	0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x6f,
	0x73, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x52, 0x10, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x1a, 0x8d, 0x04, 0x0a, 0x08, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65,
	0x79, 0x12, 0x81, 0x01, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x68, 0x82, 0x41, 0x65, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d,
	0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x69, 0x64, 0x52, 0x06, 0x70,
	0x61, 0x74, 0x68, 0x49, 0x64, 0x12, 0x85, 0x01, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x69, 0x82, 0x41, 0x66, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72,
	0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a,
	0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x7c, 0x0a,
	0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x66, 0x82, 0x41,
	0x63, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76,
	0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73,
	0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x77, 0x0a, 0x05, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x61, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e,
	0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69,
	0x2e, 0x49, 0x70, 0x76, 0x36, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x73, 0x74,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x05, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x1a, 0x84, 0x2c, 0x0a, 0x0c, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f,
	0x75, 0x74, 0x50, 0x72, 0x65, 0x12, 0xd1, 0x01, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x18, 0xba, 0xe8, 0x9d, 0xb7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e,
	0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69,
	0x2e, 0x49, 0x70, 0x76, 0x36, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x72, 0x65, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x42, 0x59, 0x82, 0x41, 0x56, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65,
	0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72,
	0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x9f, 0x2a, 0x0a, 0x06, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x12, 0xdd, 0x01, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0xc0,
	0xe8, 0x94, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x63, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70,
	0x76, 0x36, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e,
	0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x42, 0x5f, 0x82, 0x41,
	0x5c, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76,
	0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x05, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x1a, 0xa8, 0x24, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0xe6,
	0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xaa, 0xf6, 0x80, 0x30, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x66, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42,
	0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e,
	0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x53, 0x72, 0x74, 0x65,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62,
	0x4f, 0x75, 0x74, 0x50, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x65, 0x82, 0x41, 0x62, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73,
	0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64,
	0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x99, 0x02, 0x0a, 0x12, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0xe7,
	0x98, 0x8c, 0xa1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x72, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66,
	0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49,
	0x70, 0x76, 0x36, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x72, 0x65, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x42, 0x72, 0x82, 0x41,
	0x6f, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76,
	0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x52, 0x11, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x1a, 0xcf, 0x0c, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xa8, 0x01,
	0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0xe3, 0xb9, 0xc7,
	0xa7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x70, 0x82, 0x41, 0x6d,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36,
	0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x09, 0x61,
	0x74, 0x74, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x9a, 0x01, 0x0a, 0x05, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0xb6, 0xb3, 0xc3, 0x92, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x6b, 0x82, 0x41, 0x68, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75,
	0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0xb6, 0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0xeb, 0x9e, 0x82, 0x58, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x75, 0x82, 0x41, 0x72, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74,
	0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d,
	0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x0e,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0xa5,
	0x01, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0xc2, 0x92, 0xab, 0x95,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6e, 0x82, 0x41,
	0x6b, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76,
	0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0xc1, 0x01, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0xb9,
	0xe4, 0xe7, 0x57, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x79, 0x82, 0x41,
	0x76, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76,
	0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x65, 0x78, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x11, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0xd4, 0x01, 0x0a, 0x0e, 0x69,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0xdb, 0xb0,
	0x87, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x69, 0x62, 0x42, 0x67, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x42, 0x74, 0x82, 0x41,
	0x71, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76,
	0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0xb1, 0x01, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x18, 0x8b, 0xf7, 0xe0, 0xf7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x73, 0x82, 0x41, 0x70, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f,
	0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x61, 0x73, 0x74, 0x2d, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x9f, 0x01, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69,
	0x64, 0x18, 0xe2, 0xae, 0xf0, 0x8d, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x6d, 0x82, 0x41, 0x6a, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74,
	0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x69, 0x64, 0x52,
	0x06, 0x70, 0x61, 0x74, 0x68, 0x49, 0x64, 0x12, 0xab, 0x01, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x95, 0x80, 0xda, 0xd2, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x71, 0x82, 0x41, 0x6e, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65,
	0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72,
	0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x1a, 0xc7, 0x13, 0x0a, 0x11, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0xbf, 0x02, 0x0a, 0x11,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x18, 0xab, 0xb9, 0xab, 0x71, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x86, 0x01, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62,
	0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66,
	0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x72, 0x65,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x4b, 0x65, 0x79, 0x42, 0x85, 0x01, 0x82, 0x41, 0x81, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72,
	0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69,
	0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x10, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x1a, 0xf3, 0x0d,
	0x0a, 0x10, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x12, 0xb1, 0x02, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xf5, 0xb9, 0xfb,
	0x45, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x89, 0x01, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76,
	0x36, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41,
	0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x8b, 0x01, 0x82, 0x41, 0x87, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d,
	0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xaa, 0x0b, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0xc9, 0x01, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0xdb, 0xae,
	0x90, 0x95, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x94, 0x01, 0x82,
	0x41, 0x90, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69,
	0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70,
	0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d,
	0x6c, 0x65, 0x6e, 0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x4c, 0x65, 0x6e, 0x12, 0xcc, 0x01, 0x0a,
	0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0xce, 0xf0, 0xa1, 0xdf, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x95, 0x01, 0x82, 0x41, 0x91, 0x01,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36,
	0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0xcf, 0x01, 0x0a, 0x0a,
	0x61, 0x74, 0x74, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x81, 0x83, 0xc3, 0x29, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x96, 0x01, 0x82, 0x41, 0x92, 0x01,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36,
	0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0xc9, 0x01,
	0x0a, 0x08, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x8b, 0xd9, 0xbd, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x94, 0x01, 0x82, 0x41, 0x90, 0x01, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d,
	0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61,
	0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x52,
	0x08, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0xca, 0x01, 0x0a, 0x08, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0xc4, 0xd6, 0xbc, 0xe1, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x94, 0x01, 0x82, 0x41, 0x90, 0x01, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74,
	0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d,
	0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x08, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0xc7, 0x01, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x18, 0xe3, 0xd4, 0xec, 0xea, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x93, 0x01, 0x82, 0x41, 0x8f, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d,
	0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x12, 0xd0, 0x01, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18,
	0xd1, 0x8a, 0xc5, 0xee, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x96,
	0x01, 0x82, 0x41, 0x92, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74,
	0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74,
	0x69, 0x76, 0x65, 0x1a, 0xf9, 0x02, 0x0a, 0x13, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0xad, 0x01, 0x0a, 0x09,
	0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x8f, 0x01, 0x82, 0x41, 0x8b, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75,
	0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0xb1, 0x01, 0x0a, 0x11,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x83, 0x01, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66,
	0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49,
	0x70, 0x76, 0x36, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x72, 0x65, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x10, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x1a,
	0x89, 0x04, 0x0a, 0x08, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x80, 0x01, 0x0a,
	0x07, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x67,
	0x82, 0x41, 0x64, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69,
	0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70,
	0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f,
	0x70, 0x61, 0x74, 0x68, 0x2d, 0x69, 0x64, 0x52, 0x06, 0x70, 0x61, 0x74, 0x68, 0x49, 0x64, 0x12,
	0x84, 0x01, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x68, 0x82, 0x41, 0x65, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f,
	0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x7b, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x65, 0x82, 0x41, 0x62, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72,
	0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69,
	0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x12, 0x76, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x60, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73,
	0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x53, 0x72, 0x74,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69,
	0x62, 0x4f, 0x75, 0x74, 0x50, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x1a, 0xa8, 0x01, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x9e, 0x01, 0x0a, 0x10, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xd0, 0xe5, 0x94, 0x67, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x59, 0x82, 0x41, 0x56, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d,
	0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2d, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0xf1, 0x01, 0x0a, 0x0b, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x7e, 0x0a, 0x10, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x53, 0x82, 0x41, 0x50, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x72, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2d, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x62, 0x0a, 0x08, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66,
	0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49,
	0x70, 0x76, 0x36, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x52, 0x08, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x1a, 0xe3, 0xd9, 0x01, 0x0a, 0x0b,
	0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0x88, 0x01, 0x0a, 0x07,
	0x6c, 0x6f, 0x63, 0x5f, 0x72, 0x69, 0x62, 0x18, 0x8a, 0xcd, 0x92, 0x69, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67,
	0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41,
	0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2e, 0x4c, 0x6f, 0x63, 0x52, 0x69, 0x62, 0x42, 0x33, 0x82, 0x41, 0x30, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x52, 0x06,
	0x6c, 0x6f, 0x63, 0x52, 0x69, 0x62, 0x12, 0x93, 0x01, 0x0a, 0x09, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x18, 0xd1, 0xa7, 0xa3, 0xd0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e,
	0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x42, 0x35, 0x82, 0x41, 0x32, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x52, 0x09, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x1a, 0xc7, 0x26, 0x0a,
	0x06, 0x4c, 0x6f, 0x63, 0x52, 0x69, 0x62, 0x12, 0x95, 0x01, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x18, 0xe3, 0xb4, 0xf8, 0x4b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62,
	0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66,
	0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4c, 0x6f,
	0x63, 0x52, 0x69, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x42, 0x3a, 0x82, 0x41, 0x37,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36,
	0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12,
	0x92, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xdc, 0x8f, 0xf6, 0xf9, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69,
	0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4c, 0x6f, 0x63, 0x52, 0x69, 0x62, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f,
	0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x1a, 0x86, 0x24, 0x0a, 0x06, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12,
	0xa3, 0x01, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x91, 0xcd, 0x9f, 0xb8, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69,
	0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4c, 0x6f, 0x63, 0x52, 0x69, 0x62, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x42, 0x40, 0x82, 0x41,
	0x3d, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76,
	0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69,
	0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x05,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x1a, 0xcf, 0x1e, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12,
	0xab, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xe3, 0xbc, 0x9f, 0x19, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73,
	0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x2e, 0x4c, 0x6f, 0x63, 0x52, 0x69, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x46,
	0x82, 0x41, 0x43, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69,
	0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x2d,
	0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0xde, 0x01,
	0x0a, 0x12, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x18, 0xf8, 0xf4, 0xcd, 0xd7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x56,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e,
	0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2e, 0x4c, 0x6f, 0x63, 0x52, 0x69, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x42, 0x53, 0x82, 0x41, 0x50, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x11, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x8c,
	0x0b, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x89, 0x01, 0x0a, 0x0a, 0x61, 0x74, 0x74,
	0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0xf0, 0xdb, 0xc8, 0xd6, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x51, 0x82, 0x41, 0x4e, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61,
	0x74, 0x74, 0x72, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x98, 0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0xd6, 0xcf, 0x80, 0xbc, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x56, 0x82, 0x41, 0x53, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0xa2, 0x01, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0xb8, 0xcb, 0xcb, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5a, 0x82, 0x41, 0x57, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72,
	0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x78,
	0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x52, 0x11, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0xb5, 0x01, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0xa0, 0xfc, 0x85, 0xc2, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x69, 0x62, 0x42, 0x67, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x52, 0x4f, 0x55, 0x54, 0x45,
	0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x42, 0x55, 0x82, 0x41, 0x52, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0d, 0x69,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x91, 0x01, 0x0a,
	0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0xda,
	0xda, 0xe6, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x54, 0x82, 0x41,
	0x51, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76,
	0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69,
	0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x61, 0x73, 0x74, 0x2d, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x12, 0xa2, 0x01, 0x0a, 0x2f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x74, 0x79, 0x70, 0x65, 0x18, 0xef, 0x90, 0xdc, 0x47, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x54,
	0x59, 0x50, 0x45, 0x48, 0x00, 0x52, 0x2e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x4f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x74, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0xd4, 0xb3, 0x92, 0x4b, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x80, 0x01, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x93, 0xbf, 0x85, 0xb4,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4e, 0x82, 0x41, 0x4b, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x69, 0x64, 0x52, 0x06, 0x70, 0x61, 0x74, 0x68,
	0x49, 0x64, 0x12, 0x80, 0x01, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0xe2, 0x9f,
	0xe9, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4d,
	0x82, 0x41, 0x4a, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69,
	0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x2d,
	0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x06, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x8b, 0x01, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0xa8, 0xc1, 0xb5, 0x74, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x52, 0x82, 0x41, 0x4f, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x1a, 0xa7, 0x10,
	0x0a, 0x11, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x12, 0x81, 0x02, 0x0a, 0x11, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0xf4, 0x95, 0xf1, 0x5c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x6a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73,
	0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x2e, 0x4c, 0x6f, 0x63, 0x52, 0x69, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x42, 0x65,
	0x82, 0x41, 0x62, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69,
	0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x2d,
	0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x10, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x1a, 0xcf, 0x0b, 0x0a, 0x10, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0xf4, 0x01, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xce, 0x91, 0xda, 0xc3, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67,
	0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41,
	0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2e, 0x4c, 0x6f, 0x63, 0x52, 0x69, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42,
	0x6b, 0x82, 0x41, 0x68, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x63,
	0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x1a, 0xc3, 0x09, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xa7, 0x01,
	0x0a, 0x08, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x9a, 0xb7, 0xef, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x74, 0x82, 0x41, 0x71, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x6c, 0x65, 0x6e, 0x52, 0x07,
	0x61, 0x74, 0x74, 0x72, 0x4c, 0x65, 0x6e, 0x12, 0xab, 0x01, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x8d, 0xd5, 0xb3, 0xee, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x75, 0x82, 0x41, 0x72, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69,
	0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x61, 0x74, 0x74,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0xaf, 0x01, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0xcc, 0xda, 0x87, 0xd9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x76, 0x82, 0x41, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69,
	0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x61, 0x74,
	0x74, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0xa9, 0x01, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x18, 0xba, 0xc2, 0x82, 0xcb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x74, 0x82, 0x41, 0x71, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x52, 0x08, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x12, 0xa9, 0x01, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x18, 0xfd, 0xd3, 0x8e, 0xf1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x74, 0x82, 0x41, 0x71, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x63,
	0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12,
	0xa5, 0x01, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x8c, 0xbe, 0xe7, 0x50,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x73, 0x82, 0x41, 0x70, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x07,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x12, 0xaf, 0x01, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0xcc, 0xc6, 0xf6, 0xe2, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x76, 0x82, 0x41, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72,
	0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x52, 0x0a, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x1a, 0xbb, 0x02, 0x0a, 0x13, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4b, 0x65,
	0x79, 0x12, 0x8c, 0x01, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x6f, 0x82, 0x41, 0x6c, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72,
	0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74,
	0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x94, 0x01, 0x0a, 0x11, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x67, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69,
	0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4c,
	0x6f, 0x63, 0x52, 0x69, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x10, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x1a, 0x83, 0x04, 0x0a, 0x08, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x4b, 0x65, 0x79, 0x12, 0x5f, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x47, 0x82, 0x41, 0x44, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69,
	0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x06, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0xa2, 0x01, 0x0a, 0x2f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x74, 0x79, 0x70, 0x65, 0x73, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x18, 0xef, 0x90, 0xdc, 0x47, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4f, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x48, 0x00, 0x52, 0x2e, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x74, 0x79, 0x70, 0x65, 0x73, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0d, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0xd4, 0xb3, 0x92, 0x4b,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x61, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x48, 0x82, 0x41, 0x45, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72,
	0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x69, 0x64, 0x52,
	0x06, 0x70, 0x61, 0x74, 0x68, 0x49, 0x64, 0x12, 0x5a, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76,
	0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4c, 0x6f, 0x63, 0x52, 0x69, 0x62, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x05, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x1a, 0x07, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xe7, 0xb0, 0x01, 0x0a, 0x09, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x12, 0xa6, 0x01, 0x0a, 0x08, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x18, 0x8a, 0x8c, 0x84, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69,
	0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x4b, 0x65, 0x79, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69,
	0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x52, 0x08, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x1a, 0xc2,
	0xad, 0x01, 0x0a, 0x08, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x12, 0xcb, 0x01, 0x0a,
	0x0f, 0x61, 0x64, 0x6a, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x74,
	0x18, 0xd3, 0xf9, 0xa7, 0xb0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e,
	0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69,
	0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e,
	0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x42, 0x4e, 0x82, 0x41,
	0x4b, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76,
	0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a,
	0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x52, 0x0c, 0x61, 0x64,
	0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x12, 0xc7, 0x01, 0x0a, 0x0e, 0x61,
	0x64, 0x6a, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x18, 0xe0, 0xef,
	0xb0, 0xa7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70,
	0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a,
	0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x72, 0x65, 0x42, 0x4d, 0x82, 0x41, 0x4a, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62,
	0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x52, 0x0b, 0x61, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49,
	0x6e, 0x50, 0x72, 0x65, 0x12, 0xcf, 0x01, 0x0a, 0x10, 0x61, 0x64, 0x6a, 0x5f, 0x72, 0x69, 0x62,
	0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x18, 0xd6, 0xd0, 0xa1, 0xf6, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69,
	0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f,
	0x75, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f,
	0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x52, 0x0d, 0x61, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f,
	0x75, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x12, 0xcb, 0x01, 0x0a, 0x0f, 0x61, 0x64, 0x6a, 0x5f, 0x72,
	0x69, 0x62, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x18, 0xab, 0xe5, 0xe0, 0x85, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66,
	0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62,
	0x4f, 0x75, 0x74, 0x50, 0x72, 0x65, 0x42, 0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f,
	0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x52, 0x0c, 0x61, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75,
	0x74, 0x50, 0x72, 0x65, 0x12, 0xa8, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xdc,
	0xd6, 0xeb, 0x48, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70,
	0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a,
	0x81, 0x2a, 0x0a, 0x0c, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x6f, 0x73, 0x74,
	0x12, 0xca, 0x01, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x80, 0xcc, 0x8a, 0xb1,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36,
	0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69,
	0x62, 0x49, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x42, 0x55,
	0x82, 0x41, 0x52, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69,
	0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61,
	0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x1a, 0xa3, 0x28,
	0x0a, 0x06, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0xd7, 0x01, 0x0a, 0x05, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x18, 0xd2, 0xe7, 0xb4, 0xe8, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x60, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69,
	0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x42, 0x5b,
	0x82, 0x41, 0x58, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69,
	0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61,
	0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x1a, 0xc2, 0x23, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0xdf, 0x01, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xf4, 0xf0, 0xed, 0x45, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x63, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70,
	0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66,
	0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x6f, 0x73,
	0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x61, 0x82, 0x41, 0x5e, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69,
	0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d,
	0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x91,
	0x02, 0x0a, 0x12, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0xfd, 0xb7, 0xa1, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6f,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e,
	0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x6f, 0x73, 0x74,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x42,
	0x6e, 0x82, 0x41, 0x6b, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52,
	0x11, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x1a, 0xad, 0x0c, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xa3, 0x01, 0x0a,
	0x0a, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0xbd, 0xb7, 0xe4, 0x30,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6c, 0x82, 0x41, 0x69, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69,
	0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74,
	0x72, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0xa0, 0x01, 0x0a, 0x09, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0xeb, 0xf0, 0xc7, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6b,
	0x82, 0x41, 0x68, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69,
	0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61,
	0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x62, 0x65, 0x73, 0x74, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x52, 0x08, 0x62, 0x65, 0x73,
	0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0xb3, 0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0xd9, 0xe2, 0xa0, 0xd3, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x71, 0x82, 0x41, 0x6e, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62,
	0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x0e, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0xbd, 0x01, 0x0a, 0x13,
	0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0xbf, 0xfc, 0xb4, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x75, 0x82, 0x41, 0x72, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73,
	0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x78, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x11, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0xd0, 0x01, 0x0a, 0x0e,
	0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x9d,
	0xb1, 0xb9, 0xfa, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x69, 0x62, 0x42, 0x67, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x42, 0x70, 0x82,
	0x41, 0x6d, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70,
	0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64,
	0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52,
	0x0d, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0xad,
	0x01, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x18, 0xe5, 0xb6, 0xab, 0x9c, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x6f, 0x82, 0x41, 0x6c, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x6c, 0x61, 0x73, 0x74, 0x2d, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x9a,
	0x01, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0xc8, 0xdc, 0xad, 0x43, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x69, 0x82, 0x41, 0x66, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62,
	0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x61, 0x74, 0x68,
	0x2d, 0x69, 0x64, 0x52, 0x06, 0x70, 0x61, 0x74, 0x68, 0x49, 0x64, 0x12, 0x9b, 0x01, 0x0a, 0x06,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0xef, 0xce, 0xc5, 0xeb, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x68, 0x82, 0x41, 0x65, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d,
	0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0xa6, 0x01, 0x0a, 0x0b, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0xa7, 0xda, 0xd3, 0x36, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6d, 0x82, 0x41, 0x6a, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d,
	0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x1a, 0x92, 0x13, 0x0a, 0x11, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0xb8, 0x02, 0x0a, 0x11, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0xcd,
	0xd9, 0xd0, 0x86, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x83, 0x01, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41,
	0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e,
	0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41,
	0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x42, 0x80,
	0x01, 0x82, 0x41, 0x7d, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x52, 0x10, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x1a, 0xcc, 0x0d, 0x0a, 0x10, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0xaa, 0x02, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x9f, 0xfc, 0xdf, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x86, 0x01, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69,
	0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x87, 0x01, 0x82, 0x41, 0x83, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69,
	0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x8a, 0x0b, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0xc4, 0x01, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x95, 0xf7, 0xf6,
	0x50, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x90, 0x01, 0x82, 0x41, 0x8c,
	0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76,
	0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a,
	0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x6c, 0x65, 0x6e, 0x52, 0x07, 0x61,
	0x74, 0x74, 0x72, 0x4c, 0x65, 0x6e, 0x12, 0xc7, 0x01, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0xf0, 0xb8, 0xfa, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x91, 0x01, 0x82, 0x41, 0x8d, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69,
	0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d,
	0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74,
	0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0xcb, 0x01, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0xd3, 0xf6, 0xb6, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x92,
	0x01, 0x82, 0x41, 0x8e, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0xc6,
	0x01, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0xb9, 0xcf, 0xcd, 0xfe,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x90, 0x01, 0x82, 0x41, 0x8c,
	0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76,
	0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a,
	0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x52, 0x08, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0xc5, 0x01, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x18, 0xf2, 0xcd, 0xb6, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x90, 0x01, 0x82, 0x41, 0x8c, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69,
	0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d,
	0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12,
	0xc2, 0x01, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x18, 0xf5, 0xd5, 0xc6, 0x1c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x8f, 0x01, 0x82, 0x41, 0x8b, 0x01,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36,
	0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d,
	0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x07, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x12, 0xcb, 0x01, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74,
	0x69, 0x76, 0x65, 0x18, 0xe3, 0xcb, 0xe6, 0x61, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x92, 0x01, 0x82, 0x41, 0x8e, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70,
	0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x1a, 0xf2, 0x02, 0x0a, 0x13, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0xa9, 0x01, 0x0a, 0x09, 0x61,
	0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x8b,
	0x01, 0x82, 0x41, 0x87, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x61, 0x74,
	0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0xae, 0x01, 0x0a, 0x11, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x80, 0x01, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69,
	0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49,
	0x6e, 0x50, 0x6f, 0x73, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x10, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x1a, 0xf9, 0x02, 0x0a, 0x08, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x4b, 0x65, 0x79, 0x12, 0x7a, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x62, 0x82, 0x41, 0x5f, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69,
	0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d,
	0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x12, 0x7c, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x63, 0x82, 0x41, 0x60, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73,
	0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x70,
	0x61, 0x74, 0x68, 0x2d, 0x69, 0x64, 0x52, 0x06, 0x70, 0x61, 0x74, 0x68, 0x49, 0x64, 0x12, 0x73,
	0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5d, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52,
	0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x05, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x1a, 0xbf, 0x28, 0x0a, 0x0b, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e,
	0x50, 0x72, 0x65, 0x12, 0xc7, 0x01, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0xc5,
	0xc6, 0x9a, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70,
	0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a,
	0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x42,
	0x54, 0x82, 0x41, 0x51, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x1a, 0xe5, 0x26,
	0x0a, 0x06, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0xd4, 0x01, 0x0a, 0x05, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x18, 0x8f, 0x81, 0x9f, 0x45, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5f, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62,
	0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66,
	0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x42, 0x5a, 0x82, 0x41,
	0x57, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76,
	0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a,
	0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x1a,
	0x8a, 0x22, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0xde, 0x01, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0xe9, 0xa2, 0xb3, 0x8a, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x62, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52,
	0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x72, 0x65, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x60, 0x82, 0x41, 0x5d, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x90, 0x02, 0x0a, 0x12, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x9a, 0xcd, 0xdb, 0xae, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6e, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62,
	0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66,
	0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x42, 0x6d, 0x82, 0x41, 0x6a,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36,
	0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d,
	0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x11, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x83, 0x0b,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xa3, 0x01, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0xbe, 0x8f, 0x85, 0xaf, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6b, 0x82, 0x41, 0x68, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72,
	0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e,
	0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0xb2, 0x01,
	0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x98, 0x9a, 0xac, 0x85, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x70, 0x82, 0x41, 0x6d, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0xbc, 0x01, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x82, 0xb5, 0xd7, 0x5f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x74, 0x82, 0x41, 0x71, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62,
	0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x78, 0x74, 0x2d, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x11,
	0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0xcf, 0x01, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0xa6, 0x8b, 0xa8, 0x9f, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x69, 0x62, 0x42, 0x67, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x42, 0x6f, 0x82, 0x41, 0x6c, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70,
	0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0xac, 0x01, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x80, 0xdc, 0x8d, 0xde, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x6e, 0x82, 0x41, 0x6b, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69,
	0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d,
	0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x61, 0x73, 0x74, 0x2d, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x12, 0x99, 0x01, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x85,
	0x93, 0xf6, 0x73, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x68, 0x82, 0x41,
	0x65, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76,
	0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a,
	0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70,
	0x61, 0x74, 0x68, 0x2d, 0x69, 0x64, 0x52, 0x06, 0x70, 0x61, 0x74, 0x68, 0x49, 0x64, 0x12, 0x99,
	0x01, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x98, 0x8b, 0xad, 0x3b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x67, 0x82, 0x41, 0x64, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69,
	0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0xa6, 0x01, 0x0a, 0x0b, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0xce, 0xe3, 0xa9, 0x80, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6c, 0x82, 0x41, 0x69, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69,
	0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x1a, 0x86, 0x13, 0x0a, 0x11, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0xb5, 0x02, 0x0a, 0x11, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18,
	0xe2, 0xef, 0x9f, 0xd7, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x82, 0x01, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e,
	0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69,
	0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e,
	0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x42, 0x7f,
	0x82, 0x41, 0x7c, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69,
	0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61,
	0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52,
	0x10, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x1a, 0xc6, 0x0d, 0x0a, 0x10, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0xa8, 0x02, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0xe4, 0xbd, 0xe9, 0x7f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x85, 0x01, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e,
	0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69,
	0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e,
	0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x86, 0x01, 0x82, 0x41, 0x82, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70,
	0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x1a, 0x86, 0x0b, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xc4, 0x01, 0x0a, 0x08,
	0x61, 0x74, 0x74, 0x72, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0xd8, 0xb2, 0xef, 0xca, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x8f, 0x01, 0x82, 0x41, 0x8b, 0x01, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69,
	0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x6c, 0x65, 0x6e, 0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x4c,
	0x65, 0x6e, 0x12, 0xc7, 0x01, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0xf3, 0xf1, 0xaf, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x90, 0x01, 0x82, 0x41, 0x8c, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0xca, 0x01, 0x0a,
	0x0a, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0xda, 0xc6, 0xea, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x91, 0x01, 0x82, 0x41, 0x8d,
	0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76,
	0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a,
	0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09,
	0x61, 0x74, 0x74, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0xc5, 0x01, 0x0a, 0x08, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0xf4, 0xf1, 0x8d, 0x95, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x8f, 0x01, 0x82, 0x41, 0x8b, 0x01, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d,
	0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x52, 0x08, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x12, 0xc4, 0x01, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x87,
	0xdc, 0xbb, 0x63, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x8f, 0x01, 0x82,
	0x41, 0x8b, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69,
	0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61,
	0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x08,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0xc1, 0x01, 0x0a, 0x07, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x18, 0xe2, 0xda, 0xe5, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x8e, 0x01, 0x82, 0x41, 0x8a, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69,
	0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d,
	0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x12, 0xcb, 0x01, 0x0a,
	0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0xaa, 0xde, 0x93, 0xa3,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x91, 0x01, 0x82, 0x41, 0x8d,
	0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76,
	0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a,
	0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x52, 0x0a,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x1a, 0xef, 0x02, 0x0a, 0x13, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x12, 0xa8, 0x01, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x8a, 0x01, 0x82, 0x41, 0x86, 0x01, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62,
	0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x74,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0xac, 0x01,
	0x0a, 0x11, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7f, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41,
	0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e,
	0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41,
	0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x10, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x1a, 0xf6, 0x02, 0x0a,
	0x08, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x79, 0x0a, 0x06, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x61, 0x82, 0x41, 0x5e, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69,
	0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x06, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x12, 0x7b, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x62, 0x82, 0x41, 0x5f, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72,
	0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e,
	0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x2f, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x69, 0x64, 0x52, 0x06, 0x70, 0x61, 0x74, 0x68, 0x49,
	0x64, 0x12, 0x72, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x5c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67,
	0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41,
	0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x72,
	0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x05,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x1a, 0x84, 0x29, 0x0a, 0x0d, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62,
	0x4f, 0x75, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x12, 0xcc, 0x01, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x18, 0xef, 0xf2, 0x87, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69,
	0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x42, 0x56, 0x82, 0x41, 0x53, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f,
	0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x06,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x1a, 0xa3, 0x27, 0x0a, 0x06, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x12, 0xd9, 0x01, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0xd5, 0x9f, 0xfb, 0xba,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36,
	0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69,
	0x62, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x42, 0x5c, 0x82, 0x41, 0x59, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62,
	0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x1a, 0xbd, 0x22,
	0x0a, 0x05, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0xe1, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x97, 0xb9, 0xbd, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x64, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e,
	0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69,
	0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e,
	0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x62, 0x82, 0x41, 0x5f, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73,
	0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x94, 0x02, 0x0a, 0x12,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x8c, 0xba, 0xd7, 0xb1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x70, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69,
	0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x42, 0x6f,
	0x82, 0x41, 0x6c, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69,
	0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61,
	0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52,
	0x11, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x1a, 0x93, 0x0b, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xa5, 0x01, 0x0a,
	0x0a, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0xf4, 0xda, 0xc7, 0xa0,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6d, 0x82, 0x41, 0x6a, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72,
	0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61,
	0x74, 0x74, 0x72, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0xb4, 0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0xb2, 0x82, 0xa0, 0xd7, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x72, 0x82, 0x41, 0x6f, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d,
	0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x0e, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0xbf, 0x01, 0x0a, 0x13,
	0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0xbc, 0xf7, 0x83, 0xb0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x76, 0x82, 0x41, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70,
	0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x78, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x11, 0x65, 0x78, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0xd0, 0x01,
	0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0xe4, 0xa8, 0xf8, 0x35, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x69, 0x62, 0x42, 0x67, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x42, 0x71,
	0x82, 0x41, 0x6e, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69,
	0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61,
	0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0xae, 0x01, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x18, 0xae, 0x83, 0xa2, 0xf5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x70, 0x82, 0x41, 0x6d, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f,
	0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x61, 0x73, 0x74, 0x2d, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x12, 0x9b, 0x01, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0xa7, 0xf6,
	0xa8, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6a, 0x82, 0x41, 0x67,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36,
	0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d,
	0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x70, 0x61, 0x74, 0x68, 0x2d, 0x69, 0x64, 0x52, 0x06, 0x70, 0x61, 0x74, 0x68, 0x49, 0x64, 0x12,
	0x9b, 0x01, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0xd6, 0x90, 0xdd, 0x56, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x69, 0x82, 0x41, 0x66, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72,
	0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0xa8, 0x01,
	0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x94, 0xfd,
	0xa7, 0xa5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6e, 0x82, 0x41,
	0x6b, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76,
	0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a,
	0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x1a, 0xa2, 0x13, 0x0a, 0x11, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0xb9,
	0x02, 0x0a, 0x11, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x18, 0xa0, 0x90, 0xdf, 0x7f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x84, 0x01,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e,
	0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x73,
	0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x4b, 0x65, 0x79, 0x42, 0x81, 0x01, 0x82, 0x41, 0x7e, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72,
	0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75,
	0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x10, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x1a, 0xd9, 0x0d, 0x0a, 0x10, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12,
	0xad, 0x02, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x8a, 0xd2, 0xc6, 0x8a, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x87, 0x01, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66,
	0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62,
	0x4f, 0x75, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x88, 0x01,
	0x82, 0x41, 0x84, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a,
	0x94, 0x0b, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xc5, 0x01, 0x0a, 0x08, 0x61, 0x74,
	0x74, 0x72, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0xa6, 0xc0, 0xd5, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x91, 0x01, 0x82, 0x41, 0x8d, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f,
	0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x61, 0x74, 0x74, 0x72, 0x2d, 0x6c, 0x65, 0x6e, 0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x4c, 0x65,
	0x6e, 0x12, 0xc9, 0x01, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0xf9, 0x82, 0xbb, 0x86, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x92,
	0x01, 0x82, 0x41, 0x8e, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73,
	0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x74,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0xcd, 0x01,
	0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0xc0, 0xb1, 0xfe,
	0xc0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x93, 0x01, 0x82,
	0x41, 0x8f, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69,
	0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61,
	0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0xc6, 0x01,
	0x0a, 0x08, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0xde, 0xc0, 0xf6, 0x43, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x91, 0x01, 0x82, 0x41, 0x8d, 0x01, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72,
	0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x52, 0x08, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0xc6, 0x01, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x18, 0x81, 0xf8, 0xc1, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x91, 0x01, 0x82, 0x41, 0x8d, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d,
	0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12,
	0xc4, 0x01, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x18, 0xd0, 0xce, 0xa2, 0xbf,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x90, 0x01, 0x82, 0x41, 0x8c,
	0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76,
	0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a,
	0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x07, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x12, 0xcd, 0x01, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0xb0, 0xda, 0x92, 0xc2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x93, 0x01, 0x82, 0x41, 0x8f, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f,
	0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x1a, 0xf4, 0x02, 0x0a, 0x13, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0xaa,
	0x01, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x8c, 0x01, 0x82, 0x41, 0x88, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69,
	0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74,
	0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0xaf, 0x01, 0x0a, 0x11,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x81, 0x01, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66,
	0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49,
	0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64,
	0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x10, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x1a, 0xfc, 0x02,
	0x0a, 0x08, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x7b, 0x0a, 0x06, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x63, 0x82, 0x41, 0x60, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72,
	0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52,
	0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x7d, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x68, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x64, 0x82, 0x41, 0x61, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62,
	0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x69, 0x64, 0x52, 0x06,
	0x70, 0x61, 0x74, 0x68, 0x49, 0x64, 0x12, 0x74, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36,
	0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69,
	0x62, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x1a, 0xde, 0x28, 0x0a,
	0x0c, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x72, 0x65, 0x12, 0xca, 0x01,
	0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0xe8, 0xaf, 0xf8, 0xad, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x57, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73,
	0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75,
	0x74, 0x50, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x42, 0x55, 0x82, 0x41, 0x52,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36,
	0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d,
	0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x80, 0x27, 0x0a, 0x06, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0xd6, 0x01, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18,
	0xba, 0x8c, 0xce, 0x37, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x60, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66,
	0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49,
	0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64,
	0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x42, 0x5b, 0x82, 0x41, 0x58, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72,
	0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x1a, 0xa0,
	0x22, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0xe0, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0xec, 0xf7, 0xb9, 0x91, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x63, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69,
	0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x72, 0x65, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x61, 0x82, 0x41, 0x5e, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72,
	0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x91, 0x02, 0x0a, 0x12,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0xd5, 0xda, 0x93, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6f, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62,
	0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66,
	0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x72, 0x65, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x42, 0x6e, 0x82, 0x41,
	0x6b, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76,
	0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a,
	0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x11, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a,
	0x89, 0x0b, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xa3, 0x01, 0x0a, 0x0a, 0x61, 0x74,
	0x74, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0xb5, 0xec, 0xc8, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6c, 0x82, 0x41, 0x69, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f,
	0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0xb3, 0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0xc1, 0xc3, 0xed, 0xb3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x71, 0x82, 0x41, 0x6e, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70,
	0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0xbe, 0x01, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0xa7, 0xfb,
	0xf3, 0xc2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x75, 0x82, 0x41,
	0x72, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76,
	0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a,
	0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x65, 0x78, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x11, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0xcf, 0x01, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0xc5, 0x82, 0xc0, 0x68, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x69, 0x62, 0x42, 0x67, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x52, 0x4f, 0x55, 0x54,
	0x45, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x42, 0x70, 0x82, 0x41, 0x6d, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d,
	0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x2d, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0xab, 0x01, 0x0a, 0x0d, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0xad, 0x83, 0x30, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6f, 0x82, 0x41, 0x6c, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d,
	0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x61, 0x73, 0x74, 0x2d,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x9a, 0x01, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x68, 0x5f,
	0x69, 0x64, 0x18, 0x80, 0xb7, 0x8e, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x69, 0x82, 0x41, 0x66, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x69, 0x64, 0x52, 0x06, 0x70, 0x61, 0x74,
	0x68, 0x49, 0x64, 0x12, 0x9b, 0x01, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x87,
	0xdb, 0x9b, 0xdf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x68, 0x82, 0x41, 0x65, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x12, 0xa7, 0x01, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x18, 0xef, 0xc7, 0xce, 0xf2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x6d, 0x82, 0x41, 0x6a, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52,
	0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x1a, 0x93, 0x13, 0x0a, 0x11,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x12, 0xb8, 0x02, 0x0a, 0x11, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0xe5, 0xa2, 0x85, 0xee, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x83, 0x01, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73,
	0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75,
	0x74, 0x50, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x42, 0x80, 0x01, 0x82, 0x41, 0x7d, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62,
	0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x10, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x1a, 0xcd, 0x0d, 0x0a,
	0x10, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x12, 0xaa, 0x02, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xc7, 0xe8, 0xfb, 0x2e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x86, 0x01, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36,
	0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69,
	0x62, 0x4f, 0x75, 0x74, 0x50, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x87, 0x01,
	0x82, 0x41, 0x83, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x8b,
	0x0b, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xc4, 0x01, 0x0a, 0x08, 0x61, 0x74, 0x74,
	0x72, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0xad, 0xb2, 0xfd, 0x71, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x90, 0x01, 0x82, 0x41, 0x8c, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72,
	0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75,
	0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74,
	0x74, 0x72, 0x2d, 0x6c, 0x65, 0x6e, 0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x4c, 0x65, 0x6e, 0x12,
	0xc7, 0x01, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0xc8, 0x9b,
	0xce, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x91, 0x01, 0x82, 0x41,
	0x8d, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70,
	0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64,
	0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0xcc, 0x01, 0x0a, 0x0a, 0x61, 0x74,
	0x74, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x9b, 0xb2, 0xb2, 0x89, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x92, 0x01, 0x82, 0x41, 0x8e, 0x01, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72,
	0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x61,
	0x74, 0x74, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0xc6, 0x01, 0x0a, 0x08, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0xc1, 0xbe, 0xaa, 0xff, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x90, 0x01, 0x82, 0x41, 0x8c, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f,
	0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x52, 0x08, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x12, 0xc5, 0x01, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0xea,
	0xb6, 0xa2, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x90, 0x01, 0x82,
	0x41, 0x8c, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69,
	0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61,
	0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52,
	0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0xc2, 0x01, 0x0a, 0x07, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x8d, 0xea, 0xb6, 0x41, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x8f, 0x01, 0x82, 0x41, 0x8b, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72,
	0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75,
	0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x12, 0xcb,
	0x01, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0xbb, 0x80,
	0xf8, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x92, 0x01, 0x82, 0x41,
	0x8e, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70,
	0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64,
	0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65,
	0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x1a, 0xf2, 0x02, 0x0a,
	0x13, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x4b, 0x65, 0x79, 0x12, 0xa9, 0x01, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x8b, 0x01, 0x82, 0x41, 0x87, 0x01, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72,
	0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74,
	0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0xae, 0x01, 0x0a, 0x11, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x80, 0x01, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52,
	0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x72, 0x65, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52,
	0x10, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x1a, 0xf9, 0x02, 0x0a, 0x08, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x7a,
	0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x62,
	0x82, 0x41, 0x5f, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69,
	0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61,
	0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x7c, 0x0a, 0x07, 0x70, 0x61,
	0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x63, 0x82, 0x41, 0x60,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36,
	0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d,
	0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x69, 0x64,
	0x52, 0x06, 0x70, 0x61, 0x74, 0x68, 0x49, 0x64, 0x12, 0x73, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70,
	0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a,
	0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x1a, 0xa4, 0x01,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x9a, 0x01, 0x0a, 0x10, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xb2, 0xda, 0x9d,
	0x41, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x55, 0x82, 0x41,
	0x52, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76,
	0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2d, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x0f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x1a, 0xea, 0x01, 0x0a, 0x0b, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x4b, 0x65, 0x79, 0x12, 0x7a, 0x0a, 0x10, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4f,
	0x82, 0x41, 0x4c, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69,
	0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x0f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x5f, 0x0a, 0x08, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x43, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73,
	0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x52, 0x08, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x1a, 0x8f, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x0d,
	0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xa8, 0xfe,
	0xf8, 0xc1, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x67, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x41, 0x46, 0x49, 0x53, 0x41, 0x46, 0x49, 0x54, 0x59,
	0x50, 0x45, 0x42, 0x32, 0x82, 0x41, 0x2f, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x0b, 0x61, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x4e,
	0x61, 0x6d, 0x65, 0x1a, 0xca, 0x01, 0x0a, 0x0a, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x4b,
	0x65, 0x79, 0x12, 0x7b, 0x0a, 0x0d, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x67, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x41, 0x46, 0x49, 0x53, 0x41, 0x46, 0x49,
	0x54, 0x59, 0x50, 0x45, 0x42, 0x2c, 0x82, 0x41, 0x29, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69,
	0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2d, 0x6e, 0x61,
	0x6d, 0x65, 0x52, 0x0b, 0x61, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x3f, 0x0a, 0x08, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42,
	0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e,
	0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x52, 0x07, 0x61, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69,
	0x1a, 0xfe, 0x6c, 0x0a, 0x08, 0x41, 0x74, 0x74, 0x72, 0x53, 0x65, 0x74, 0x73, 0x12, 0x65, 0x0a,
	0x08, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x18, 0xab, 0xbd, 0xd4, 0x50, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x53, 0x65, 0x74, 0x73,
	0x2e, 0x41, 0x74, 0x74, 0x72, 0x53, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x42, 0x1e, 0x82, 0x41, 0x1b,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65,
	0x74, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x52, 0x07, 0x61, 0x74, 0x74,
	0x72, 0x53, 0x65, 0x74, 0x1a, 0xfe, 0x6a, 0x0a, 0x07, 0x41, 0x74, 0x74, 0x72, 0x53, 0x65, 0x74,
	0x12, 0x7d, 0x0a, 0x0a, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x99,
	0xd7, 0xac, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x74, 0x74,
	0x72, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x53, 0x65, 0x74, 0x2e, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x29, 0x82, 0x41, 0x26, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f,
	0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x6f, 0x72, 0x52, 0x0a, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x70, 0x0a, 0x07, 0x61, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0xfe, 0xe5, 0xab, 0xb9, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x53, 0x65,
	0x74, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x53, 0x65, 0x74, 0x2e, 0x41, 0x73, 0x50, 0x61, 0x74,
	0x68, 0x42, 0x26, 0x82, 0x41, 0x23, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61,
	0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65,
	0x74, 0x2f, 0x61, 0x73, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x52, 0x06, 0x61, 0x73, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x73, 0x0a, 0x08, 0x61, 0x73, 0x34, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0xee, 0xeb,
	0xa8, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x74, 0x74, 0x72,
	0x53, 0x65, 0x74, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x53, 0x65, 0x74, 0x2e, 0x41, 0x73, 0x34,
	0x50, 0x61, 0x74, 0x68, 0x42, 0x27, 0x82, 0x41, 0x24, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69,
	0x62, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x72,
	0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x73, 0x34, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x52, 0x07, 0x61,
	0x73, 0x34, 0x50, 0x61, 0x74, 0x68, 0x12, 0x6a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0xf5, 0x9d, 0x9c, 0xfa, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41,
	0x74, 0x74, 0x72, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x53, 0x65, 0x74, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x24, 0x82, 0x41, 0x21, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72,
	0x69, 0x62, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x74, 0x74,
	0x72, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0xa3, 0x01, 0x0a, 0x14, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x65, 0x6e,
	0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xf3, 0xa9, 0x80, 0x1a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x53, 0x65,
	0x74, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x53, 0x65, 0x74, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x33,
	0x82, 0x41, 0x30, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x74, 0x74, 0x72,
	0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x13, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x63, 0x61, 0x70,
	0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xc2, 0x03, 0x0a, 0x0a, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x80, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x9b, 0xa7, 0xa6, 0x9a, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62,
	0x2e, 0x41, 0x74, 0x74, 0x72, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x53, 0x65,
	0x74, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x2f, 0x82, 0x41, 0x2c, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f,
	0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73,
	0x65, 0x74, 0x2f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xb0, 0x02, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x6b, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0xb6, 0xbf, 0x92, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x37, 0x82, 0x41, 0x34, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x74, 0x74,
	0x72, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x2f,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x5a, 0x0a, 0x02, 0x61, 0x73, 0x18, 0xa2, 0x9c, 0xd2, 0x7b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x32, 0x82, 0x41, 0x2f, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72,
	0x69, 0x62, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x74, 0x74,
	0x72, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x73, 0x52, 0x02, 0x61, 0x73, 0x12, 0x5e, 0x0a,
	0x03, 0x61, 0x73, 0x34, 0x18, 0xb2, 0xff, 0xee, 0xb3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x33, 0x82, 0x41, 0x30, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62,
	0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d,
	0x73, 0x65, 0x74, 0x2f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x73, 0x34, 0x52, 0x03, 0x61, 0x73, 0x34, 0x1a, 0xc5, 0x04,
	0x0a, 0x07, 0x41, 0x73, 0x34, 0x50, 0x61, 0x74, 0x68, 0x12, 0x91, 0x01, 0x0a, 0x0b, 0x61, 0x73,
	0x34, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0xfb, 0xe8, 0xf8, 0xfd, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x53, 0x65, 0x74,
	0x73, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x53, 0x65, 0x74, 0x2e, 0x41, 0x73, 0x34, 0x50, 0x61, 0x74,
	0x68, 0x2e, 0x41, 0x73, 0x34, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x33, 0x82, 0x41,
	0x30, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73,
	0x65, 0x74, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x73, 0x34,
	0x2d, 0x70, 0x61, 0x74, 0x68, 0x2f, 0x61, 0x73, 0x34, 0x2d, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x0a, 0x61, 0x73, 0x34, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0xa5, 0x03,
	0x0a, 0x0a, 0x41, 0x73, 0x34, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x91, 0x01, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xa5, 0xb3, 0xde, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70,
	0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x41, 0x74,
	0x74, 0x72, 0x53, 0x65, 0x74, 0x2e, 0x41, 0x73, 0x34, 0x50, 0x61, 0x74, 0x68, 0x2e, 0x41, 0x73,
	0x34, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x39,
	0x82, 0x41, 0x36, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x74, 0x74, 0x72,
	0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61,
	0x73, 0x34, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x2f, 0x61, 0x73, 0x34, 0x2d, 0x73, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x1a, 0x82, 0x02, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x71, 0x0a, 0x06, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0xf6, 0x8f, 0xe6, 0x86, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62,
	0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d,
	0x73, 0x65, 0x74, 0x2f, 0x61, 0x73, 0x34, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x2f, 0x61, 0x73, 0x34,
	0x2d, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x85, 0x01,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0xe8, 0xf4, 0x92, 0xb3, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x69, 0x62, 0x42, 0x67, 0x70, 0x41, 0x73,
	0x50, 0x61, 0x74, 0x68, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x74, 0x74,
	0x72, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x2f,
	0x61, 0x73, 0x34, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x2f, 0x61, 0x73, 0x34, 0x2d, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0xb3, 0x04, 0x0a, 0x06, 0x41, 0x73, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x8a, 0x01, 0x0a, 0x0a, 0x61, 0x73, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x81, 0xe7, 0x8f, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x74,
	0x74, 0x72, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x53, 0x65, 0x74, 0x2e, 0x41,
	0x73, 0x50, 0x61, 0x74, 0x68, 0x2e, 0x41, 0x73, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x42,
	0x31, 0x82, 0x41, 0x2e, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x74, 0x74,
	0x72, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x2f,
	0x61, 0x73, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x2f, 0x61, 0x73, 0x2d, 0x73, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x09, 0x61, 0x73, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x9b, 0x03,
	0x0a, 0x09, 0x41, 0x73, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x8e, 0x01, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xf3, 0xf5, 0xd5, 0x80, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70,
	0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x41, 0x74,
	0x74, 0x72, 0x53, 0x65, 0x74, 0x2e, 0x41, 0x73, 0x50, 0x61, 0x74, 0x68, 0x2e, 0x41, 0x73, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x37, 0x82, 0x41,
	0x34, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73,
	0x65, 0x74, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x73, 0x2d,
	0x70, 0x61, 0x74, 0x68, 0x2f, 0x61, 0x73, 0x2d, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xfc, 0x01, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x6e, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0xa4, 0x98, 0xb5, 0x63, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3e,
	0x82, 0x41, 0x3b, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x74, 0x74, 0x72,
	0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61,
	0x73, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x2f, 0x61, 0x73, 0x2d, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x06,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x82, 0x01, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0xb6, 0xa6, 0xdb, 0x37, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x69, 0x62, 0x42, 0x67, 0x70, 0x41, 0x73, 0x50, 0x61, 0x74, 0x68, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x3c, 0x82, 0x41, 0x39, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61,
	0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x73, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x2f,
	0x61, 0x73, 0x2d, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0xb2, 0x07, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x55, 0x0a, 0x04, 0x61, 0x69, 0x67, 0x70, 0x18, 0x9b, 0x86,
	0x92, 0x56, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x29, 0x82, 0x41, 0x26,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65,
	0x74, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x61, 0x69, 0x67, 0x70, 0x52, 0x04, 0x61, 0x69, 0x67, 0x70, 0x12, 0x79, 0x0a, 0x10,
	0x61, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x18, 0xfd, 0xb6, 0xf1, 0xfd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x35, 0x82, 0x41, 0x32, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x74, 0x74,
	0x72, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x2d, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x61, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x6f, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x83, 0x9c, 0x9e, 0xf1, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x31, 0x82, 0x41, 0x2e, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f,
	0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x0b, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x59, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0xd4, 0xf2, 0xec, 0xea, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x2a, 0x82, 0x41, 0x27, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x74,
	0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x67, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x65,
	0x66, 0x18, 0x8d, 0xe8, 0xdb, 0xe9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x2f, 0x82, 0x41, 0x2c, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x74,
	0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2d, 0x70, 0x72, 0x65,
	0x66, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x66, 0x12, 0x53, 0x0a, 0x03,
	0x6d, 0x65, 0x64, 0x18, 0x92, 0x98, 0xd8, 0x81, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x28, 0x82, 0x41, 0x25, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f,
	0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73,
	0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x65, 0x64, 0x52, 0x03, 0x6d, 0x65,
	0x64, 0x12, 0x62, 0x0a, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x18, 0xd1, 0xe8,
	0xbc, 0x51, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2d, 0x82,
	0x41, 0x2a, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d,
	0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x52, 0x07, 0x6e, 0x65,
	0x78, 0x74, 0x48, 0x6f, 0x70, 0x12, 0x75, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18,
	0xf6, 0xe3, 0xee, 0x77, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x69, 0x62, 0x42, 0x67, 0x70, 0x42, 0x67, 0x70, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x2b, 0x82, 0x41, 0x28, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61,
	0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x72, 0x0a, 0x0d,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0xd4, 0xf1,
	0xc9, 0xf7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x32,
	0x82, 0x41, 0x2f, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x74, 0x74, 0x72,
	0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x2d,
	0x69, 0x64, 0x52, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x1a, 0x82, 0x52, 0x0a, 0x13, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x63, 0x61, 0x70,
	0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x9b, 0x01, 0x0a, 0x07, 0x74, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x18, 0xaf, 0xca, 0x8e, 0xeb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e,
	0x52, 0x69, 0x62, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x41, 0x74, 0x74,
	0x72, 0x53, 0x65, 0x74, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x63, 0x61, 0x70,
	0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x42, 0x3b, 0x82, 0x41, 0x38, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x74,
	0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74,
	0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x07, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x1a, 0xcc, 0x50, 0x0a, 0x07, 0x54, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x12, 0xaa, 0x01, 0x0a, 0x06, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0xb0, 0x96,
	0xdf, 0xa0, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x74, 0x74,
	0x72, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x53, 0x65, 0x74, 0x2e, 0x54, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x4b, 0x65, 0x79, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62,
	0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d,
	0x73, 0x65, 0x74, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x65, 0x6e, 0x63, 0x61, 0x70,
	0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x06, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x1a,
	0x8c, 0x4d, 0x0a, 0x06, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0xb1, 0x01, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0xba, 0x89, 0xa9, 0xcf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e,
	0x52, 0x69, 0x62, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x41, 0x74, 0x74,
	0x72, 0x53, 0x65, 0x74, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x63, 0x61, 0x70,
	0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x48, 0x82,
	0x41, 0x45, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d,
	0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x74, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0xb9,
	0x01, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x18, 0xaa, 0xbe, 0x88, 0xde, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x53, 0x65,
	0x74, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x53, 0x65, 0x74, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x75,
	0x62, 0x74, 0x6c, 0x76, 0x73, 0x42, 0x4a, 0x82, 0x41, 0x47, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72,
	0x69, 0x62, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x74, 0x74,
	0x72, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x65, 0x6e, 0x63,
	0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76,
	0x73, 0x52, 0x07, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x1a, 0xa9, 0x01, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x9f, 0x01, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0xa9, 0xc3,
	0xbe, 0xf8, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x69, 0x62, 0x42, 0x67, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c,
	0x45, 0x4e, 0x43, 0x41, 0x50, 0x53, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x54, 0x59, 0x50,
	0x45, 0x42, 0x4d, 0x82, 0x41, 0x4a, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61,
	0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65,
	0x74, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0xe5, 0x48, 0x0a, 0x07, 0x53, 0x75, 0x62, 0x74, 0x6c,
	0x76, 0x73, 0x12, 0xc7, 0x01, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x18, 0x89, 0xe7,
	0xb2, 0x49, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x74, 0x74, 0x72,
	0x53, 0x65, 0x74, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x53, 0x65, 0x74, 0x2e, 0x54, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e,
	0x53, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x4b, 0x65,
	0x79, 0x42, 0x51, 0x82, 0x41, 0x4e, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61,
	0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65,
	0x74, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x2f, 0x73, 0x75,
	0x62, 0x74, 0x6c, 0x76, 0x52, 0x06, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x1a, 0xe4, 0x44, 0x0a,
	0x06, 0x53, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x12, 0xf9, 0x01, 0x0a, 0x10, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0xef, 0x99, 0xcd,
	0xcc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x66, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x74, 0x74, 0x72,
	0x53, 0x65, 0x74, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x53, 0x65, 0x74, 0x2e, 0x54, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e,
	0x53, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x2e, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x42, 0x62,
	0x82, 0x41, 0x5f, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x74, 0x74, 0x72,
	0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x74, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x2f, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x74, 0x6c,
	0x76, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x52, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x12, 0xed, 0x01, 0x0a, 0x0d, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x83, 0xbc, 0xfa, 0xdc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x63, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70,
	0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x41, 0x74,
	0x74, 0x72, 0x53, 0x65, 0x74, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x63, 0x61,
	0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73,
	0x2e, 0x53, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x73, 0x42, 0x5f, 0x82, 0x41, 0x5c, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69,
	0x62, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x72,
	0x2d, 0x73, 0x65, 0x74, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x65, 0x6e, 0x63, 0x61,
	0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73,
	0x2f, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x2f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2d,
	0x6c, 0x69, 0x73, 0x74, 0x73, 0x52, 0x0c, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x73, 0x12, 0xce, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xeb, 0xa9,
	0xa2, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x74, 0x74, 0x72,
	0x53, 0x65, 0x74, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x53, 0x65, 0x74, 0x2e, 0x54, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e,
	0x53, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x57, 0x82, 0x41, 0x54, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69,
	0x62, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x72,
	0x2d, 0x73, 0x65, 0x74, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x65, 0x6e, 0x63, 0x61,
	0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73,
	0x2f, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x1a, 0x8e, 0x0a, 0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x99, 0x02, 0x0a, 0x0f, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0xba, 0x95, 0xbb,
	0xb4, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x78, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x74, 0x74, 0x72,
	0x53, 0x65, 0x74, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x53, 0x65, 0x74, 0x2e, 0x54, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e,
	0x53, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x2e, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4b, 0x65, 0x79,
	0x42, 0x72, 0x82, 0x41, 0x6f, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x74,
	0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74,
	0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x74, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x2f, 0x73, 0x75, 0x62,
	0x74, 0x6c, 0x76, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x1a, 0x8d, 0x05, 0x0a, 0x0e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x8e, 0x02, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0xec, 0xb8, 0xae, 0x6e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7b, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e,
	0x41, 0x74, 0x74, 0x72, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x53, 0x65, 0x74,
	0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x54, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x74,
	0x6c, 0x76, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x78, 0x82, 0x41, 0x75, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61,
	0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x65,
	0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x74, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x75, 0x62, 0x74,
	0x6c, 0x76, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2d, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x2d, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xe9, 0x02, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0xa3, 0x01, 0x0a, 0x02, 0x61, 0x73, 0x18, 0x83, 0xdc, 0xbc, 0x1b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x7b, 0x82, 0x41, 0x78, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61,
	0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x65,
	0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x74, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x75, 0x62, 0x74,
	0x6c, 0x76, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2d, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x2d, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x61, 0x73, 0x52, 0x02, 0x61, 0x73, 0x12, 0xb9, 0x01, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0xd8, 0xa6, 0x90, 0xdb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x81, 0x01, 0x82, 0x41, 0x7e, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61,
	0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x65,
	0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x74, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x75, 0x62, 0x74,
	0x6c, 0x76, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2d, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x2d, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x1a, 0xce, 0x02, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x97, 0x01, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x7b, 0x82,
	0x41, 0x78, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d,
	0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x74, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x2f, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76,
	0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x9e, 0x01, 0x0a, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x75,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e,
	0x52, 0x69, 0x62, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x41, 0x74, 0x74,
	0x72, 0x53, 0x65, 0x74, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x63, 0x61, 0x70,
	0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x2e,
	0x53, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x1a, 0xa0, 0x2c, 0x0a, 0x0c, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x86, 0x02, 0x0a, 0x0c, 0x73, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x92, 0x9a, 0xe6, 0x6a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x72, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67,
	0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x41,
	0x74, 0x74, 0x72, 0x53, 0x65, 0x74, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x63,
	0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x75, 0x62, 0x74, 0x6c, 0x76,
	0x73, 0x2e, 0x53, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x73, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x4b, 0x65, 0x79, 0x42, 0x6c, 0x82, 0x41, 0x69, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69,
	0x62, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x72,
	0x2d, 0x73, 0x65, 0x74, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x65, 0x6e, 0x63, 0x61,
	0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73,
	0x2f, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x2f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2d,
	0x6c, 0x69, 0x73, 0x74, 0x73, 0x2f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x69,
	0x73, 0x74, 0x52, 0x0b, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x1a,
	0xc2, 0x27, 0x0a, 0x0b, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x8f, 0x02, 0x0a, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0xa7, 0xab, 0xf5,
	0x8c, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x78, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x74, 0x74, 0x72,
	0x53, 0x65, 0x74, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x53, 0x65, 0x74, 0x2e, 0x54, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e,
	0x53, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x2e, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x2e, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x42, 0x75, 0x82, 0x41, 0x72, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x74,
	0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74,
	0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x74, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x2f, 0x73, 0x75, 0x62,
	0x74, 0x6c, 0x76, 0x2f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x69, 0x73, 0x74,
	0x73, 0x2f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x73,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x82, 0x02, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xb4, 0x9e, 0xc6, 0x6e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x75, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x53, 0x65,
	0x74, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x53, 0x65, 0x74, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x75,
	0x62, 0x74, 0x6c, 0x76, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x2e, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x72, 0x82, 0x41, 0x6f,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65,
	0x74, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x74, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x2d, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f,
	0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x2f, 0x73,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x2f, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xab, 0x20, 0x0a, 0x08, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0xa0, 0x02, 0x0a, 0x07, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x9d, 0xc0, 0xf3, 0x73, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x83, 0x01, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41,
	0x74, 0x74, 0x72, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x53, 0x65, 0x74, 0x2e,
	0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x54, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x2e, 0x53, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x74, 0x6c,
	0x76, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x2e, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x42, 0x7d,
	0x82, 0x41, 0x7a, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x74, 0x74, 0x72,
	0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x74, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x2f, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x74, 0x6c,
	0x76, 0x2f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x2f,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x73,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0xb0, 0x1b, 0x0a, 0x07, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0xa8, 0x02, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xcf, 0xa4, 0x93,
	0xee, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x86, 0x01, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x74, 0x74,
	0x72, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x53, 0x65, 0x74, 0x2e, 0x54, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x2e, 0x53, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x2e,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x2e, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42,
	0x84, 0x01, 0x82, 0x41, 0x80, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61,
	0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65,
	0x74, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x2f, 0x73, 0x75,
	0x62, 0x74, 0x6c, 0x76, 0x2f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x69, 0x73,
	0x74, 0x73, 0x2f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xf9, 0x18,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xb9, 0x01, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0xfe, 0xd1, 0x8d, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x8a, 0x01, 0x82, 0x41, 0x86, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61,
	0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65,
	0x74, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x2f, 0x73, 0x75,
	0x62, 0x74, 0x6c, 0x76, 0x2f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x69, 0x73,
	0x74, 0x73, 0x2f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0xde, 0x01, 0x0a, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x8d, 0x9c, 0x9c, 0x51, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x97, 0x01, 0x82, 0x41, 0x93, 0x01, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74,
	0x73, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x2d, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73,
	0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x2f, 0x73, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x2f, 0x73, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d,
	0x69, 0x64, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x49, 0x64, 0x12, 0xe1, 0x01, 0x0a, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69,
	0x70, 0x76, 0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xf6, 0x83, 0xcb, 0xa7,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x97, 0x01, 0x82,
	0x41, 0x93, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x74, 0x74, 0x72,
	0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x74, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x2f, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x74, 0x6c,
	0x76, 0x2f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x2f,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x70, 0x76,
	0x34, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0xe1, 0x01, 0x0a, 0x12, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0xd4, 0xbf, 0xc3, 0x8b, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x97, 0x01, 0x82, 0x41, 0x93, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f,
	0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73,
	0x65, 0x74, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x73,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f,
	0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x2f, 0x73,
	0x75, 0x62, 0x74, 0x6c, 0x76, 0x2f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x69,
	0x73, 0x74, 0x73, 0x2f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x69, 0x73, 0x74,
	0x2f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2d, 0x69, 0x70,
	0x76, 0x36, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x49, 0x70, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0xc2, 0x01, 0x0a,
	0x08, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x62, 0x6f, 0x73, 0x18, 0x8d, 0xb3, 0xb4, 0x84, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x8d, 0x01, 0x82, 0x41, 0x89, 0x01, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74,
	0x73, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x2d, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73,
	0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x2f, 0x73, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x2f, 0x73, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x6d, 0x70, 0x6c, 0x73, 0x2d, 0x62, 0x6f, 0x73, 0x52, 0x07, 0x6d, 0x70, 0x6c, 0x73, 0x42, 0x6f,
	0x73, 0x12, 0xbf, 0x01, 0x0a, 0x07, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x63, 0x18, 0x80, 0x88,
	0xf9, 0xb8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x8c, 0x01, 0x82,
	0x41, 0x88, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x74, 0x74, 0x72,
	0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x74, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x2f, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x74, 0x6c,
	0x76, 0x2f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x2f,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x6d, 0x70, 0x6c, 0x73, 0x2d, 0x74, 0x63, 0x52, 0x06, 0x6d, 0x70, 0x6c,
	0x73, 0x54, 0x63, 0x12, 0xc2, 0x01, 0x0a, 0x08, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x74, 0x6c,
	0x18, 0xd9, 0xe0, 0x94, 0xdd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x8d, 0x01, 0x82, 0x41, 0x89, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61,
	0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65,
	0x74, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x2f, 0x73, 0x75,
	0x62, 0x74, 0x6c, 0x76, 0x2f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x69, 0x73,
	0x74, 0x73, 0x2f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x70, 0x6c, 0x73, 0x2d, 0x74, 0x74, 0x6c, 0x52,
	0x07, 0x6d, 0x70, 0x6c, 0x73, 0x54, 0x74, 0x6c, 0x12, 0xe3, 0x01, 0x0a, 0x13, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0xdf, 0xa7, 0xce, 0x50, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x98, 0x01, 0x82, 0x41, 0x94, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f,
	0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73,
	0x65, 0x74, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x73,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f,
	0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x2f, 0x73,
	0x75, 0x62, 0x74, 0x6c, 0x76, 0x2f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x69,
	0x73, 0x74, 0x73, 0x2f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x69, 0x73, 0x74,
	0x2f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x69,
	0x70, 0x76, 0x34, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x11, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x49, 0x70, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0xe4,
	0x01, 0x0a, 0x13, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xad, 0x91, 0xe2, 0xae, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x98, 0x01, 0x82, 0x41, 0x94, 0x01, 0x2f, 0x62,
	0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x73,
	0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x2d, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x75,
	0x62, 0x74, 0x6c, 0x76, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x2f, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x2f, 0x73, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x70, 0x76, 0x36, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0xaa, 0x01, 0x0a, 0x07, 0x73, 0x69, 0x64, 0x5f, 0x73, 0x69,
	0x64, 0x18, 0x9b, 0xa5, 0xc7, 0x99, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x8a, 0x01, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69,
	0x62, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x53,
	0x65, 0x74, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x2e, 0x53, 0x75,
	0x62, 0x74, 0x6c, 0x76, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x73, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x69, 0x64, 0x48, 0x00, 0x52, 0x06, 0x73, 0x69, 0x64, 0x53,
	0x69, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x96, 0x96, 0xea, 0x69, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x73, 0x69, 0x64,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x69, 0x64, 0x5f, 0x75, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x18, 0xd7, 0xce, 0x84, 0x11, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52,
	0x09, 0x73, 0x69, 0x64, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0xaf, 0x02, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0xa2, 0xf6, 0xbb, 0x43, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x8b, 0x01, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52,
	0x69, 0x62, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x72,
	0x53, 0x65, 0x74, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e,
	0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x2e, 0x53,
	0x75, 0x62, 0x74, 0x6c, 0x76, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x73, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x89, 0x01, 0x82, 0x41, 0x85,
	0x01, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73,
	0x65, 0x74, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x74, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x2d, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x2f, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x2f,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x2f, 0x73, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x73, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xa6, 0x02, 0x0a,
	0x03, 0x53, 0x69, 0x64, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x45,
	0x54, 0x10, 0x00, 0x12, 0x31, 0x0a, 0x16, 0x53, 0x49, 0x44, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f,
	0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x01, 0x1a,
	0x15, 0x82, 0x41, 0x12, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49,
	0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x12, 0x25, 0x0a, 0x10, 0x53, 0x49, 0x44, 0x5f, 0x52, 0x4f,
	0x55, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x10, 0x02, 0x1a, 0x0f, 0x82, 0x41,
	0x0c, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x12, 0x31, 0x0a,
	0x16, 0x53, 0x49, 0x44, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43,
	0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x03, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x49, 0x50,
	0x56, 0x36, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c,
	0x12, 0x27, 0x0a, 0x11, 0x53, 0x49, 0x44, 0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54,
	0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x04, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x49, 0x4d, 0x50, 0x4c,
	0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x12, 0x3b, 0x0a, 0x1b, 0x53, 0x49, 0x44,
	0x5f, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x50, 0x59, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x49,
	0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x08, 0x1a, 0x1a, 0x82, 0x41, 0x17, 0x45,
	0x4e, 0x54, 0x52, 0x4f, 0x50, 0x59, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x44,
	0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x12, 0x1d, 0x0a, 0x0c, 0x53, 0x49, 0x44, 0x5f, 0x4e, 0x4f,
	0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x10, 0x09, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x4e, 0x4f, 0x5f,
	0x4c, 0x41, 0x42, 0x45, 0x4c, 0x22, 0x9a, 0x03, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e,
	0x0a, 0x0a, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x1e,
	0x0a, 0x0d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x53, 0x49, 0x44, 0x10,
	0x02, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x53, 0x49, 0x44, 0x12, 0x1e,
	0x0a, 0x0d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x53, 0x49, 0x44, 0x10,
	0x03, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x53, 0x49, 0x44, 0x12, 0x30,
	0x0a, 0x16, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x4e, 0x4f, 0x44, 0x45,
	0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x04, 0x1a, 0x14, 0x82, 0x41, 0x11, 0x49,
	0x50, 0x56, 0x34, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53,
	0x12, 0x30, 0x0a, 0x16, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x4e, 0x4f,
	0x44, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x05, 0x1a, 0x14, 0x82, 0x41,
	0x11, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45,
	0x53, 0x53, 0x12, 0x32, 0x0a, 0x17, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f,
	0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x49, 0x4e, 0x54, 0x46, 0x5f, 0x49, 0x44, 0x10, 0x06, 0x1a,
	0x15, 0x82, 0x41, 0x12, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x49,
	0x4e, 0x54, 0x46, 0x5f, 0x49, 0x44, 0x12, 0x3a, 0x0a, 0x1b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x50, 0x56, 0x34, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45,
	0x5f, 0x41, 0x44, 0x44, 0x52, 0x10, 0x07, 0x1a, 0x19, 0x82, 0x41, 0x16, 0x49, 0x50, 0x56, 0x34,
	0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x41, 0x44,
	0x44, 0x52, 0x12, 0x32, 0x0a, 0x17, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f,
	0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x49, 0x4e, 0x54, 0x46, 0x5f, 0x49, 0x44, 0x10, 0x08, 0x1a,
	0x15, 0x82, 0x41, 0x12, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x49,
	0x4e, 0x54, 0x46, 0x5f, 0x49, 0x44, 0x12, 0x3a, 0x0a, 0x1b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x50, 0x56, 0x36, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45,
	0x5f, 0x41, 0x44, 0x44, 0x52, 0x10, 0x09, 0x1a, 0x19, 0x82, 0x41, 0x16, 0x49, 0x50, 0x56, 0x36,
	0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x41, 0x44,
	0x44, 0x52, 0x42, 0x05, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x1a, 0xc8, 0x02, 0x0a, 0x0a, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x9b, 0x01, 0x0a, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x84, 0x01, 0x82, 0x41, 0x80, 0x01, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74,
	0x73, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x2d, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73,
	0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x2f, 0x73, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x2f, 0x73, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x9b, 0x01, 0x0a, 0x07, 0x73, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x80, 0x01, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41,
	0x74, 0x74, 0x72, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x53, 0x65, 0x74, 0x2e,
	0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x54, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x2e, 0x53, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x74, 0x6c,
	0x76, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x2e, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x1a, 0xed, 0x02, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xb7,
	0x01, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0xbc,
	0xb1, 0xc1, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x7e, 0x82, 0x41,
	0x7b, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73,
	0x65, 0x74, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x74, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x2d, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x2f, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x2f,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x2f, 0x73, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2d, 0x69, 0x64, 0x52, 0x0a, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0xa9, 0x01, 0x0a, 0x06, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0xaf, 0x85, 0xe6, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x79, 0x82, 0x41, 0x76, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61,
	0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65,
	0x74, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x2f, 0x73, 0x75,
	0x62, 0x74, 0x6c, 0x76, 0x2f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x69, 0x73,
	0x74, 0x73, 0x2f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x06, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x1a, 0xc1, 0x02, 0x0a, 0x0e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x99, 0x01, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x78, 0x82,
	0x41, 0x75, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d,
	0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x74, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x2f, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76,
	0x2f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x2f, 0x73,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x2d, 0x69, 0x64, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x92, 0x01, 0x0a, 0x0c, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6f, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e,
	0x41, 0x74, 0x74, 0x72, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x53, 0x65, 0x74,
	0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x54, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x74,
	0x6c, 0x76, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x2e,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0b, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0xe8, 0x08, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0xa3, 0x01, 0x0a, 0x16, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x69, 0x64, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x69, 0x64, 0x18, 0x94, 0x86,
	0x99, 0xb3, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x74, 0x74,
	0x72, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x53, 0x65, 0x74, 0x2e, 0x54, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x2e, 0x53, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x64,
	0x48, 0x00, 0x52, 0x14, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x64, 0x42, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x12, 0x62, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x73, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0xee,
	0xf5, 0xf5, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x10, 0x62, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x53, 0x69, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x31, 0x0a, 0x12, 0x62,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x69, 0x64, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x18, 0xef, 0x91, 0xa2, 0x33, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x10, 0x62, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x64, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x8e,
	0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x18, 0xbe, 0x94, 0x80, 0x7f, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5e, 0x82, 0x41, 0x5b, 0x2f, 0x62, 0x67, 0x70,
	0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61,
	0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x65,
	0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x74, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x75, 0x62, 0x74,
	0x6c, 0x76, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x12,
	0x9b, 0x01, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x89,
	0xa4, 0xe5, 0xd6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x62, 0x82,
	0x41, 0x5f, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d,
	0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x74, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x2f, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0xb3, 0x01,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x9e, 0xde, 0xb0, 0x74, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x69, 0x62, 0x42, 0x67, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x53, 0x55, 0x4c,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x42,
	0x5c, 0x82, 0x41, 0x59, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x74, 0x74,
	0x72, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x2f,
	0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x74, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x74,
	0x6c, 0x76, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0xde, 0x02, 0x0a, 0x0a, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x38, 0x0a, 0x1d, 0x42, 0x49, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x53, 0x49, 0x44, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x45, 0x58, 0x50, 0x4c,
	0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x01, 0x1a, 0x15, 0x82, 0x41, 0x12,
	0x49, 0x50, 0x56, 0x34, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55,
	0x4c, 0x4c, 0x12, 0x2c, 0x0a, 0x17, 0x42, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x49, 0x44,
	0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x10, 0x02, 0x1a,
	0x0f, 0x82, 0x41, 0x0c, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54,
	0x12, 0x38, 0x0a, 0x1d, 0x42, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x49, 0x44, 0x5f, 0x49,
	0x50, 0x56, 0x36, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c,
	0x4c, 0x10, 0x03, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x45, 0x58, 0x50,
	0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x12, 0x2e, 0x0a, 0x18, 0x42, 0x49,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x49, 0x44, 0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x49, 0x43, 0x49,
	0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x04, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x49, 0x4d, 0x50,
	0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x12, 0x42, 0x0a, 0x22, 0x42, 0x49,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x50, 0x59,
	0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52,
	0x10, 0x08, 0x1a, 0x1a, 0x82, 0x41, 0x17, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x50, 0x59, 0x5f, 0x4c,
	0x41, 0x42, 0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x12, 0x24,
	0x0a, 0x13, 0x42, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x5f,
	0x4c, 0x41, 0x42, 0x45, 0x4c, 0x10, 0x09, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x4e, 0x4f, 0x5f, 0x4c,
	0x41, 0x42, 0x45, 0x4c, 0x42, 0x0d, 0x0a, 0x0b, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x69, 0x64, 0x1a, 0xa8, 0x02, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x4b, 0x65,
	0x79, 0x12, 0xaa, 0x01, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x69, 0x62, 0x42, 0x67, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x53, 0x55,
	0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45,
	0x42, 0x56, 0x82, 0x41, 0x53, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x74,
	0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74,
	0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x74, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x2f, 0x73, 0x75, 0x62,
	0x74, 0x6c, 0x76, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x6e,
	0x0a, 0x06, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x56,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e,
	0x52, 0x69, 0x62, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x41, 0x74, 0x74,
	0x72, 0x53, 0x65, 0x74, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x63, 0x61, 0x70,
	0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x73, 0x2e,
	0x53, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x52, 0x06, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x1a, 0x84,
	0x02, 0x0a, 0x09, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4b, 0x65, 0x79, 0x12, 0x95, 0x01, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x69, 0x62, 0x42, 0x67, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x54, 0x55,
	0x4e, 0x4e, 0x45, 0x4c, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x53, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x54, 0x59, 0x50, 0x45, 0x42, 0x47, 0x82, 0x41, 0x44, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72,
	0x69, 0x62, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x74, 0x74,
	0x72, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x65, 0x6e, 0x63,
	0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x5f, 0x0a, 0x06, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x53, 0x65,
	0x74, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x53, 0x65, 0x74, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x06, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x1a, 0x89, 0x01, 0x0a, 0x0a, 0x41, 0x74, 0x74, 0x72, 0x53, 0x65,
	0x74, 0x4b, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x24, 0x82, 0x41, 0x21, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62,
	0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d,
	0x73, 0x65, 0x74, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x3f, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x53, 0x65, 0x74, 0x73,
	0x2e, 0x41, 0x74, 0x74, 0x72, 0x53, 0x65, 0x74, 0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x53, 0x65,
	0x74, 0x1a, 0xb7, 0x07, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x71, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x18, 0xfa,
	0x8b, 0xb1, 0xe7, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x42, 0x21, 0x82, 0x41, 0x1e, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x72, 0x69, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x1a, 0x9b, 0x05, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x12, 0x72, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xac, 0x8a, 0xe7, 0xda,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x27, 0x82, 0x41, 0x24, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x72, 0x69, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x99, 0x04, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x93, 0x01, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x18, 0xc6,
	0xf9, 0xe4, 0xa6, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x31, 0x82, 0x41, 0x2e, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x5b, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0xdd, 0xd2, 0xee, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2d, 0x82,
	0x41, 0x2a, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x1a, 0x9c, 0x02, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0xad, 0x01, 0x0a, 0x34, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x62,
	0x67, 0x70, 0x74, 0x79, 0x70, 0x65, 0x73, 0x62, 0x67, 0x70, 0x77, 0x65, 0x6c, 0x6c, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x73, 0x74, 0x64, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x18,
	0xf3, 0x9c, 0xe5, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x67, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x42, 0x47, 0x50, 0x57, 0x45, 0x4c, 0x4c,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x53, 0x54, 0x44, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54,
	0x59, 0x52, 0x33, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x62, 0x67, 0x70, 0x74, 0x79, 0x70, 0x65, 0x73, 0x62, 0x67,
	0x70, 0x77, 0x65, 0x6c, 0x6c, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x64, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0xb6, 0x8d, 0xc3, 0x69, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xf7, 0x92, 0xa6, 0x29, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x55, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x1a, 0x96, 0x01, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x4b, 0x65, 0x79, 0x12, 0x3d, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x27, 0x82, 0x41, 0x24, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x47, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x1a, 0xfa, 0x06, 0x0a, 0x0e,
	0x45, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x85,
	0x01, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x18, 0xda, 0x92, 0xef, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x45,
	0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x45, 0x78,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x42, 0x29, 0x82,
	0x41, 0x26, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x65, 0x78, 0x74, 0x2d, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x65, 0x78, 0x74, 0x2d, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x1a, 0xae, 0x04, 0x0a, 0x0c, 0x45, 0x78, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x7f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x8c, 0xef, 0x8e, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x45,
	0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x45, 0x78,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x2f, 0x82, 0x41, 0x2c, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x65, 0x78,
	0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x65, 0x78,
	0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x9c, 0x03, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0xae, 0x01, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x18, 0x98, 0xca, 0xd5, 0x62, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52,
	0x69, 0x62, 0x2e, 0x45, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x2e, 0x45, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x3d, 0x82, 0x41, 0x3a, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x72, 0x69, 0x62, 0x2f, 0x65, 0x78, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x2f, 0x65, 0x78, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x78, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x12, 0x64, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0xbd, 0xa5, 0xd2,
	0xad, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x35, 0x82, 0x41, 0x32,
	0x2f, 0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x65, 0x78, 0x74, 0x2d, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x65, 0x78, 0x74, 0x2d, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x1a, 0x7c, 0x0a, 0x11, 0x45, 0x78, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x32,
	0x0a, 0x13, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0xbc, 0xcc, 0xf6, 0x9f, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x11, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x33, 0x0a, 0x14, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x98, 0xaa, 0xa1, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0xae, 0x01, 0x0a, 0x0f, 0x45, 0x78, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x45, 0x0a, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x2f, 0x82, 0x41, 0x2c, 0x2f,
	0x62, 0x67, 0x70, 0x2f, 0x72, 0x69, 0x62, 0x2f, 0x65, 0x78, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x65, 0x78, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x54, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x2e, 0x52, 0x69, 0x62, 0x2e, 0x45,
	0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x45, 0x78,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x42, 0x17, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x2e,
	0x6e, 0x6f, 0x63, 0x73, 0x79, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_openconfig_bgp_proto_rawDescOnce sync.Once
	file_openconfig_bgp_proto_rawDescData = file_openconfig_bgp_proto_rawDesc
)

func file_openconfig_bgp_proto_rawDescGZIP() []byte {
	file_openconfig_bgp_proto_rawDescOnce.Do(func() {
		file_openconfig_bgp_proto_rawDescData = protoimpl.X.CompressGZIP(file_openconfig_bgp_proto_rawDescData)
	})
	return file_openconfig_bgp_proto_rawDescData
}

var file_openconfig_bgp_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_openconfig_bgp_proto_msgTypes = make([]protoimpl.MessageInfo, 590)
var file_openconfig_bgp_proto_goTypes = []interface{}{
	(Bgp_Neighbors_Neighbor_GracefulRestart_State_Mode)(0), // 0: openconfig.Bgp.Neighbors.Neighbor.GracefulRestart.State.Mode
	(Bgp_Neighbors_Neighbor_State_SessionState)(0),         // 1: openconfig.Bgp.Neighbors.Neighbor.State.SessionState
	(Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Sid)(0),  // 2: openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.Subtlvs.Subtlv.SegmentLists.SegmentList.Segments.Segment.State.Sid
	(Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Type)(0), // 3: openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.Subtlvs.Subtlv.SegmentLists.SegmentList.Segments.Segment.State.Type
	(Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State_BindingSid)(0),                                     // 4: openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.Subtlvs.Subtlv.State.BindingSid
	(*Bgp)(nil),                                                                                                                            // 5: openconfig.Bgp
	(*Bgp_Global)(nil),                                                                                                                     // 6: openconfig.Bgp.Global
	(*Bgp_Neighbors)(nil),                                                                                                                  // 7: openconfig.Bgp.Neighbors
	(*Bgp_PeerGroups)(nil),                                                                                                                 // 8: openconfig.Bgp.PeerGroups
	(*Bgp_Rib)(nil),                                                                                                                        // 9: openconfig.Bgp.Rib
	(*Bgp_Global_AfiSafis)(nil),                                                                                                            // 10: openconfig.Bgp.Global.AfiSafis
	(*Bgp_Global_Confederation)(nil),                                                                                                       // 11: openconfig.Bgp.Global.Confederation
	(*Bgp_Global_Config)(nil),                                                                                                              // 12: openconfig.Bgp.Global.Config
	(*Bgp_Global_DefaultRouteDistance)(nil),                                                                                                // 13: openconfig.Bgp.Global.DefaultRouteDistance
	(*Bgp_Global_DynamicNeighborPrefixes)(nil),                                                                                             // 14: openconfig.Bgp.Global.DynamicNeighborPrefixes
	(*Bgp_Global_GracefulRestart)(nil),                                                                                                     // 15: openconfig.Bgp.Global.GracefulRestart
	(*Bgp_Global_RouteSelectionOptions)(nil),                                                                                               // 16: openconfig.Bgp.Global.RouteSelectionOptions
	(*Bgp_Global_State)(nil),                                                                                                               // 17: openconfig.Bgp.Global.State
	(*Bgp_Global_UseMultiplePaths)(nil),                                                                                                    // 18: openconfig.Bgp.Global.UseMultiplePaths
	(*Bgp_Global_AfiSafis_AfiSafi)(nil),                                                                                                    // 19: openconfig.Bgp.Global.AfiSafis.AfiSafi
	(*Bgp_Global_AfiSafis_AfiSafiKey)(nil),                                                                                                 // 20: openconfig.Bgp.Global.AfiSafis.AfiSafiKey
	(*Bgp_Global_AfiSafis_AfiSafi_AddPaths)(nil),                                                                                           // 21: openconfig.Bgp.Global.AfiSafis.AfiSafi.AddPaths
	(*Bgp_Global_AfiSafis_AfiSafi_Config)(nil),                                                                                             // 22: openconfig.Bgp.Global.AfiSafis.AfiSafi.Config
	(*Bgp_Global_AfiSafis_AfiSafi_GracefulRestart)(nil),                                                                                    // 23: openconfig.Bgp.Global.AfiSafis.AfiSafi.GracefulRestart
	(*Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast)(nil),                                                                                 // 24: openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv4LabeledUnicast
	(*Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast)(nil),                                                                                        // 25: openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv4Unicast
	(*Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast)(nil),                                                                                 // 26: openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv6LabeledUnicast
	(*Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast)(nil),                                                                                        // 27: openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv6Unicast
	(*Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn)(nil),                                                                                          // 28: openconfig.Bgp.Global.AfiSafis.AfiSafi.L2VpnEvpn
	(*Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls)(nil),                                                                                          // 29: openconfig.Bgp.Global.AfiSafis.AfiSafi.L2VpnVpls
	(*Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast)(nil),                                                                                 // 30: openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv4Multicast
	(*Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast)(nil),                                                                                   // 31: openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv4Unicast
	(*Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast)(nil),                                                                                 // 32: openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv6Multicast
	(*Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast)(nil),                                                                                   // 33: openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv6Unicast
	(*Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions)(nil),                                                                              // 34: openconfig.Bgp.Global.AfiSafis.AfiSafi.RouteSelectionOptions
	(*Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv4)(nil),                                                                                     // 35: openconfig.Bgp.Global.AfiSafis.AfiSafi.SrtePolicyIpv4
	(*Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv6)(nil),                                                                                     // 36: openconfig.Bgp.Global.AfiSafis.AfiSafi.SrtePolicyIpv6
	(*Bgp_Global_AfiSafis_AfiSafi_State)(nil),                                                                                              // 37: openconfig.Bgp.Global.AfiSafis.AfiSafi.State
	(*Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths)(nil),                                                                                   // 38: openconfig.Bgp.Global.AfiSafis.AfiSafi.UseMultiplePaths
	(*Bgp_Global_AfiSafis_AfiSafi_AddPaths_Config)(nil),                                                                                    // 39: openconfig.Bgp.Global.AfiSafis.AfiSafi.AddPaths.Config
	(*Bgp_Global_AfiSafis_AfiSafi_AddPaths_State)(nil),                                                                                     // 40: openconfig.Bgp.Global.AfiSafis.AfiSafi.AddPaths.State
	(*Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_Config)(nil),                                                                             // 41: openconfig.Bgp.Global.AfiSafis.AfiSafi.GracefulRestart.Config
	(*Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_State)(nil),                                                                              // 42: openconfig.Bgp.Global.AfiSafis.AfiSafi.GracefulRestart.State
	(*Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit)(nil),                                                                     // 43: openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv4LabeledUnicast.PrefixLimit
	(*Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config)(nil),                                                              // 44: openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv4LabeledUnicast.PrefixLimit.Config
	(*Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State)(nil),                                                               // 45: openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv4LabeledUnicast.PrefixLimit.State
	(*Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_Config)(nil),                                                                                 // 46: openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv4Unicast.Config
	(*Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit)(nil),                                                                            // 47: openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv4Unicast.PrefixLimit
	(*Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_State)(nil),                                                                                  // 48: openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv4Unicast.State
	(*Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config)(nil),                                                                     // 49: openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv4Unicast.PrefixLimit.Config
	(*Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State)(nil),                                                                      // 50: openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv4Unicast.PrefixLimit.State
	(*Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit)(nil),                                                                     // 51: openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv6LabeledUnicast.PrefixLimit
	(*Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config)(nil),                                                              // 52: openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv6LabeledUnicast.PrefixLimit.Config
	(*Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State)(nil),                                                               // 53: openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv6LabeledUnicast.PrefixLimit.State
	(*Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_Config)(nil),                                                                                 // 54: openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv6Unicast.Config
	(*Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit)(nil),                                                                            // 55: openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv6Unicast.PrefixLimit
	(*Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_State)(nil),                                                                                  // 56: openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv6Unicast.State
	(*Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config)(nil),                                                                     // 57: openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv6Unicast.PrefixLimit.Config
	(*Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State)(nil),                                                                      // 58: openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv6Unicast.PrefixLimit.State
	(*Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit)(nil),                                                                              // 59: openconfig.Bgp.Global.AfiSafis.AfiSafi.L2VpnEvpn.PrefixLimit
	(*Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config)(nil),                                                                       // 60: openconfig.Bgp.Global.AfiSafis.AfiSafi.L2VpnEvpn.PrefixLimit.Config
	(*Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State)(nil),                                                                        // 61: openconfig.Bgp.Global.AfiSafis.AfiSafi.L2VpnEvpn.PrefixLimit.State
	(*Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit)(nil),                                                                              // 62: openconfig.Bgp.Global.AfiSafis.AfiSafi.L2VpnVpls.PrefixLimit
	(*Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config)(nil),                                                                       // 63: openconfig.Bgp.Global.AfiSafis.AfiSafi.L2VpnVpls.PrefixLimit.Config
	(*Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State)(nil),                                                                        // 64: openconfig.Bgp.Global.AfiSafis.AfiSafi.L2VpnVpls.PrefixLimit.State
	(*Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit)(nil),                                                                     // 65: openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv4Multicast.PrefixLimit
	(*Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config)(nil),                                                              // 66: openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv4Multicast.PrefixLimit.Config
	(*Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State)(nil),                                                               // 67: openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv4Multicast.PrefixLimit.State
	(*Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit)(nil),                                                                       // 68: openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv4Unicast.PrefixLimit
	(*Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config)(nil),                                                                // 69: openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv4Unicast.PrefixLimit.Config
	(*Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State)(nil),                                                                 // 70: openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv4Unicast.PrefixLimit.State
	(*Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit)(nil),                                                                     // 71: openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv6Multicast.PrefixLimit
	(*Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config)(nil),                                                              // 72: openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv6Multicast.PrefixLimit.Config
	(*Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State)(nil),                                                               // 73: openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv6Multicast.PrefixLimit.State
	(*Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit)(nil),                                                                       // 74: openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv6Unicast.PrefixLimit
	(*Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config)(nil),                                                                // 75: openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv6Unicast.PrefixLimit.Config
	(*Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State)(nil),                                                                 // 76: openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv6Unicast.PrefixLimit.State
	(*Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_Config)(nil),                                                                       // 77: openconfig.Bgp.Global.AfiSafis.AfiSafi.RouteSelectionOptions.Config
	(*Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_State)(nil),                                                                        // 78: openconfig.Bgp.Global.AfiSafis.AfiSafi.RouteSelectionOptions.State
	(*Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit)(nil),                                                                         // 79: openconfig.Bgp.Global.AfiSafis.AfiSafi.SrtePolicyIpv4.PrefixLimit
	(*Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_Config)(nil),                                                                  // 80: openconfig.Bgp.Global.AfiSafis.AfiSafi.SrtePolicyIpv4.PrefixLimit.Config
	(*Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_State)(nil),                                                                   // 81: openconfig.Bgp.Global.AfiSafis.AfiSafi.SrtePolicyIpv4.PrefixLimit.State
	(*Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit)(nil),                                                                         // 82: openconfig.Bgp.Global.AfiSafis.AfiSafi.SrtePolicyIpv6.PrefixLimit
	(*Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_Config)(nil),                                                                  // 83: openconfig.Bgp.Global.AfiSafis.AfiSafi.SrtePolicyIpv6.PrefixLimit.Config
	(*Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_State)(nil),                                                                   // 84: openconfig.Bgp.Global.AfiSafis.AfiSafi.SrtePolicyIpv6.PrefixLimit.State
	(*Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Config)(nil),                                                                            // 85: openconfig.Bgp.Global.AfiSafis.AfiSafi.UseMultiplePaths.Config
	(*Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp)(nil),                                                                              // 86: openconfig.Bgp.Global.AfiSafis.AfiSafi.UseMultiplePaths.Ebgp
	(*Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp)(nil),                                                                              // 87: openconfig.Bgp.Global.AfiSafis.AfiSafi.UseMultiplePaths.Ibgp
	(*Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_State)(nil),                                                                             // 88: openconfig.Bgp.Global.AfiSafis.AfiSafi.UseMultiplePaths.State
	(*Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config)(nil),                                                                       // 89: openconfig.Bgp.Global.AfiSafis.AfiSafi.UseMultiplePaths.Ebgp.Config
	(*Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State)(nil),                                                                        // 90: openconfig.Bgp.Global.AfiSafis.AfiSafi.UseMultiplePaths.Ebgp.State
	(*Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config)(nil),                                                                       // 91: openconfig.Bgp.Global.AfiSafis.AfiSafi.UseMultiplePaths.Ibgp.Config
	(*Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State)(nil),                                                                        // 92: openconfig.Bgp.Global.AfiSafis.AfiSafi.UseMultiplePaths.Ibgp.State
	(*Bgp_Global_Confederation_Config)(nil),                                                                                                // 93: openconfig.Bgp.Global.Confederation.Config
	(*Bgp_Global_Confederation_State)(nil),                                                                                                 // 94: openconfig.Bgp.Global.Confederation.State
	(*Bgp_Global_DefaultRouteDistance_Config)(nil),                                                                                         // 95: openconfig.Bgp.Global.DefaultRouteDistance.Config
	(*Bgp_Global_DefaultRouteDistance_State)(nil),                                                                                          // 96: openconfig.Bgp.Global.DefaultRouteDistance.State
	(*Bgp_Global_DynamicNeighborPrefixes_DynamicNeighborPrefix)(nil),                                                                       // 97: openconfig.Bgp.Global.DynamicNeighborPrefixes.DynamicNeighborPrefix
	(*Bgp_Global_DynamicNeighborPrefixes_DynamicNeighborPrefixKey)(nil),                                                                    // 98: openconfig.Bgp.Global.DynamicNeighborPrefixes.DynamicNeighborPrefixKey
	(*Bgp_Global_DynamicNeighborPrefixes_DynamicNeighborPrefix_Config)(nil),                                                                // 99: openconfig.Bgp.Global.DynamicNeighborPrefixes.DynamicNeighborPrefix.Config
	(*Bgp_Global_DynamicNeighborPrefixes_DynamicNeighborPrefix_State)(nil),                                                                 // 100: openconfig.Bgp.Global.DynamicNeighborPrefixes.DynamicNeighborPrefix.State
	(*Bgp_Global_GracefulRestart_Config)(nil),                                                                                              // 101: openconfig.Bgp.Global.GracefulRestart.Config
	(*Bgp_Global_GracefulRestart_State)(nil),                                                                                               // 102: openconfig.Bgp.Global.GracefulRestart.State
	(*Bgp_Global_RouteSelectionOptions_Config)(nil),                                                                                        // 103: openconfig.Bgp.Global.RouteSelectionOptions.Config
	(*Bgp_Global_RouteSelectionOptions_State)(nil),                                                                                         // 104: openconfig.Bgp.Global.RouteSelectionOptions.State
	(*Bgp_Global_UseMultiplePaths_Config)(nil),                                                                                             // 105: openconfig.Bgp.Global.UseMultiplePaths.Config
	(*Bgp_Global_UseMultiplePaths_Ebgp)(nil),                                                                                               // 106: openconfig.Bgp.Global.UseMultiplePaths.Ebgp
	(*Bgp_Global_UseMultiplePaths_Ibgp)(nil),                                                                                               // 107: openconfig.Bgp.Global.UseMultiplePaths.Ibgp
	(*Bgp_Global_UseMultiplePaths_State)(nil),                                                                                              // 108: openconfig.Bgp.Global.UseMultiplePaths.State
	(*Bgp_Global_UseMultiplePaths_Ebgp_Config)(nil),                                                                                        // 109: openconfig.Bgp.Global.UseMultiplePaths.Ebgp.Config
	(*Bgp_Global_UseMultiplePaths_Ebgp_State)(nil),                                                                                         // 110: openconfig.Bgp.Global.UseMultiplePaths.Ebgp.State
	(*Bgp_Global_UseMultiplePaths_Ibgp_Config)(nil),                                                                                        // 111: openconfig.Bgp.Global.UseMultiplePaths.Ibgp.Config
	(*Bgp_Global_UseMultiplePaths_Ibgp_State)(nil),                                                                                         // 112: openconfig.Bgp.Global.UseMultiplePaths.Ibgp.State
	(*Bgp_Neighbors_Neighbor)(nil),                                                                                                         // 113: openconfig.Bgp.Neighbors.Neighbor
	(*Bgp_Neighbors_NeighborKey)(nil),                                                                                                      // 114: openconfig.Bgp.Neighbors.NeighborKey
	(*Bgp_Neighbors_Neighbor_AfiSafis)(nil),                                                                                                // 115: openconfig.Bgp.Neighbors.Neighbor.AfiSafis
	(*Bgp_Neighbors_Neighbor_ApplyPolicy)(nil),                                                                                             // 116: openconfig.Bgp.Neighbors.Neighbor.ApplyPolicy
	(*Bgp_Neighbors_Neighbor_AsPathOptions)(nil),                                                                                           // 117: openconfig.Bgp.Neighbors.Neighbor.AsPathOptions
	(*Bgp_Neighbors_Neighbor_Config)(nil),                                                                                                  // 118: openconfig.Bgp.Neighbors.Neighbor.Config
	(*Bgp_Neighbors_Neighbor_EbgpMultihop)(nil),                                                                                            // 119: openconfig.Bgp.Neighbors.Neighbor.EbgpMultihop
	(*Bgp_Neighbors_Neighbor_ErrorHandling)(nil),                                                                                           // 120: openconfig.Bgp.Neighbors.Neighbor.ErrorHandling
	(*Bgp_Neighbors_Neighbor_GracefulRestart)(nil),                                                                                         // 121: openconfig.Bgp.Neighbors.Neighbor.GracefulRestart
	(*Bgp_Neighbors_Neighbor_LoggingOptions)(nil),                                                                                          // 122: openconfig.Bgp.Neighbors.Neighbor.LoggingOptions
	(*Bgp_Neighbors_Neighbor_RouteReflector)(nil),                                                                                          // 123: openconfig.Bgp.Neighbors.Neighbor.RouteReflector
	(*Bgp_Neighbors_Neighbor_State)(nil),                                                                                                   // 124: openconfig.Bgp.Neighbors.Neighbor.State
	(*Bgp_Neighbors_Neighbor_Timers)(nil),                                                                                                  // 125: openconfig.Bgp.Neighbors.Neighbor.Timers
	(*Bgp_Neighbors_Neighbor_Transport)(nil),                                                                                               // 126: openconfig.Bgp.Neighbors.Neighbor.Transport
	(*Bgp_Neighbors_Neighbor_UseMultiplePaths)(nil),                                                                                        // 127: openconfig.Bgp.Neighbors.Neighbor.UseMultiplePaths
	(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi)(nil),                                                                                        // 128: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi
	(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafiKey)(nil),                                                                                     // 129: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafiKey
	(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_AddPaths)(nil),                                                                               // 130: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.AddPaths
	(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy)(nil),                                                                            // 131: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.ApplyPolicy
	(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Config)(nil),                                                                                 // 132: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Config
	(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart)(nil),                                                                        // 133: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.GracefulRestart
	(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast)(nil),                                                                     // 134: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv4LabeledUnicast
	(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast)(nil),                                                                            // 135: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv4Unicast
	(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast)(nil),                                                                     // 136: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv6LabeledUnicast
	(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast)(nil),                                                                            // 137: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv6Unicast
	(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn)(nil),                                                                              // 138: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L2VpnEvpn
	(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls)(nil),                                                                              // 139: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L2VpnVpls
	(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast)(nil),                                                                     // 140: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv4Multicast
	(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast)(nil),                                                                       // 141: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv4Unicast
	(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast)(nil),                                                                     // 142: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv6Multicast
	(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast)(nil),                                                                       // 143: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv6Unicast
	(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv4)(nil),                                                                         // 144: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.SrtePolicyIpv4
	(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv6)(nil),                                                                         // 145: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.SrtePolicyIpv6
	(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State)(nil),                                                                                  // 146: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.State
	(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths)(nil),                                                                       // 147: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.UseMultiplePaths
	(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_AddPaths_Config)(nil),                                                                        // 148: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.AddPaths.Config
	(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_AddPaths_State)(nil),                                                                         // 149: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.AddPaths.State
	(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_Config)(nil),                                                                     // 150: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.ApplyPolicy.Config
	(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_State)(nil),                                                                      // 151: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.ApplyPolicy.State
	(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_Config)(nil),                                                                 // 152: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.GracefulRestart.Config
	(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_State)(nil),                                                                  // 153: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.GracefulRestart.State
	(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit)(nil),                                                         // 154: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv4LabeledUnicast.PrefixLimit
	(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config)(nil),                                                  // 155: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv4LabeledUnicast.PrefixLimit.Config
	(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State)(nil),                                                   // 156: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv4LabeledUnicast.PrefixLimit.State
	(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_Config)(nil),                                                                     // 157: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv4Unicast.Config
	(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit)(nil),                                                                // 158: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv4Unicast.PrefixLimit
	(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_State)(nil),                                                                      // 159: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv4Unicast.State
	(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config)(nil),                                                         // 160: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv4Unicast.PrefixLimit.Config
	(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State)(nil),                                                          // 161: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv4Unicast.PrefixLimit.State
	(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit)(nil),                                                         // 162: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv6LabeledUnicast.PrefixLimit
	(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config)(nil),                                                  // 163: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv6LabeledUnicast.PrefixLimit.Config
	(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State)(nil),                                                   // 164: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv6LabeledUnicast.PrefixLimit.State
	(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_Config)(nil),                                                                     // 165: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv6Unicast.Config
	(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit)(nil),                                                                // 166: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv6Unicast.PrefixLimit
	(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_State)(nil),                                                                      // 167: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv6Unicast.State
	(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config)(nil),                                                         // 168: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv6Unicast.PrefixLimit.Config
	(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State)(nil),                                                          // 169: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv6Unicast.PrefixLimit.State
	(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit)(nil),                                                                  // 170: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L2VpnEvpn.PrefixLimit
	(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config)(nil),                                                           // 171: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L2VpnEvpn.PrefixLimit.Config
	(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State)(nil),                                                            // 172: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L2VpnEvpn.PrefixLimit.State
	(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit)(nil),                                                                  // 173: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L2VpnVpls.PrefixLimit
	(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config)(nil),                                                           // 174: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L2VpnVpls.PrefixLimit.Config
	(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State)(nil),                                                            // 175: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L2VpnVpls.PrefixLimit.State
	(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit)(nil),                                                         // 176: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv4Multicast.PrefixLimit
	(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config)(nil),                                                  // 177: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv4Multicast.PrefixLimit.Config
	(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State)(nil),                                                   // 178: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv4Multicast.PrefixLimit.State
	(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit)(nil),                                                           // 179: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv4Unicast.PrefixLimit
	(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config)(nil),                                                    // 180: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv4Unicast.PrefixLimit.Config
	(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State)(nil),                                                     // 181: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv4Unicast.PrefixLimit.State
	(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit)(nil),                                                         // 182: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv6Multicast.PrefixLimit
	(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config)(nil),                                                  // 183: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv6Multicast.PrefixLimit.Config
	(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State)(nil),                                                   // 184: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv6Multicast.PrefixLimit.State
	(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit)(nil),                                                           // 185: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv6Unicast.PrefixLimit
	(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config)(nil),                                                    // 186: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv6Unicast.PrefixLimit.Config
	(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State)(nil),                                                     // 187: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv6Unicast.PrefixLimit.State
	(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit)(nil),                                                             // 188: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.SrtePolicyIpv4.PrefixLimit
	(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_Config)(nil),                                                      // 189: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.SrtePolicyIpv4.PrefixLimit.Config
	(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_State)(nil),                                                       // 190: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.SrtePolicyIpv4.PrefixLimit.State
	(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit)(nil),                                                             // 191: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.SrtePolicyIpv6.PrefixLimit
	(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_Config)(nil),                                                      // 192: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.SrtePolicyIpv6.PrefixLimit.Config
	(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_State)(nil),                                                       // 193: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.SrtePolicyIpv6.PrefixLimit.State
	(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State_Prefixes)(nil),                                                                         // 194: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.State.Prefixes
	(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Config)(nil),                                                                // 195: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.UseMultiplePaths.Config
	(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp)(nil),                                                                  // 196: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.UseMultiplePaths.Ebgp
	(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_State)(nil),                                                                 // 197: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.UseMultiplePaths.State
	(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config)(nil),                                                           // 198: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.UseMultiplePaths.Ebgp.Config
	(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State)(nil),                                                            // 199: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.UseMultiplePaths.Ebgp.State
	(*Bgp_Neighbors_Neighbor_ApplyPolicy_Config)(nil),                                                                                      // 200: openconfig.Bgp.Neighbors.Neighbor.ApplyPolicy.Config
	(*Bgp_Neighbors_Neighbor_ApplyPolicy_State)(nil),                                                                                       // 201: openconfig.Bgp.Neighbors.Neighbor.ApplyPolicy.State
	(*Bgp_Neighbors_Neighbor_AsPathOptions_Config)(nil),                                                                                    // 202: openconfig.Bgp.Neighbors.Neighbor.AsPathOptions.Config
	(*Bgp_Neighbors_Neighbor_AsPathOptions_State)(nil),                                                                                     // 203: openconfig.Bgp.Neighbors.Neighbor.AsPathOptions.State
	(*Bgp_Neighbors_Neighbor_EbgpMultihop_Config)(nil),                                                                                     // 204: openconfig.Bgp.Neighbors.Neighbor.EbgpMultihop.Config
	(*Bgp_Neighbors_Neighbor_EbgpMultihop_State)(nil),                                                                                      // 205: openconfig.Bgp.Neighbors.Neighbor.EbgpMultihop.State
	(*Bgp_Neighbors_Neighbor_ErrorHandling_Config)(nil),                                                                                    // 206: openconfig.Bgp.Neighbors.Neighbor.ErrorHandling.Config
	(*Bgp_Neighbors_Neighbor_ErrorHandling_State)(nil),                                                                                     // 207: openconfig.Bgp.Neighbors.Neighbor.ErrorHandling.State
	(*Bgp_Neighbors_Neighbor_GracefulRestart_Config)(nil),                                                                                  // 208: openconfig.Bgp.Neighbors.Neighbor.GracefulRestart.Config
	(*Bgp_Neighbors_Neighbor_GracefulRestart_State)(nil),                                                                                   // 209: openconfig.Bgp.Neighbors.Neighbor.GracefulRestart.State
	(*Bgp_Neighbors_Neighbor_LoggingOptions_Config)(nil),                                                                                   // 210: openconfig.Bgp.Neighbors.Neighbor.LoggingOptions.Config
	(*Bgp_Neighbors_Neighbor_LoggingOptions_State)(nil),                                                                                    // 211: openconfig.Bgp.Neighbors.Neighbor.LoggingOptions.State
	(*Bgp_Neighbors_Neighbor_RouteReflector_Config)(nil),                                                                                   // 212: openconfig.Bgp.Neighbors.Neighbor.RouteReflector.Config
	(*Bgp_Neighbors_Neighbor_RouteReflector_State)(nil),                                                                                    // 213: openconfig.Bgp.Neighbors.Neighbor.RouteReflector.State
	(*Bgp_Neighbors_Neighbor_State_Messages)(nil),                                                                                          // 214: openconfig.Bgp.Neighbors.Neighbor.State.Messages
	(*Bgp_Neighbors_Neighbor_State_Queues)(nil),                                                                                            // 215: openconfig.Bgp.Neighbors.Neighbor.State.Queues
	(*Bgp_Neighbors_Neighbor_State_Messages_Received)(nil),                                                                                 // 216: openconfig.Bgp.Neighbors.Neighbor.State.Messages.Received
	(*Bgp_Neighbors_Neighbor_State_Messages_Sent)(nil),                                                                                     // 217: openconfig.Bgp.Neighbors.Neighbor.State.Messages.Sent
	(*Bgp_Neighbors_Neighbor_Timers_Config)(nil),                                                                                           // 218: openconfig.Bgp.Neighbors.Neighbor.Timers.Config
	(*Bgp_Neighbors_Neighbor_Timers_State)(nil),                                                                                            // 219: openconfig.Bgp.Neighbors.Neighbor.Timers.State
	(*Bgp_Neighbors_Neighbor_Transport_Config)(nil),                                                                                        // 220: openconfig.Bgp.Neighbors.Neighbor.Transport.Config
	(*Bgp_Neighbors_Neighbor_Transport_State)(nil),                                                                                         // 221: openconfig.Bgp.Neighbors.Neighbor.Transport.State
	(*Bgp_Neighbors_Neighbor_UseMultiplePaths_Config)(nil),                                                                                 // 222: openconfig.Bgp.Neighbors.Neighbor.UseMultiplePaths.Config
	(*Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp)(nil),                                                                                   // 223: openconfig.Bgp.Neighbors.Neighbor.UseMultiplePaths.Ebgp
	(*Bgp_Neighbors_Neighbor_UseMultiplePaths_State)(nil),                                                                                  // 224: openconfig.Bgp.Neighbors.Neighbor.UseMultiplePaths.State
	(*Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_Config)(nil),                                                                            // 225: openconfig.Bgp.Neighbors.Neighbor.UseMultiplePaths.Ebgp.Config
	(*Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_State)(nil),                                                                             // 226: openconfig.Bgp.Neighbors.Neighbor.UseMultiplePaths.Ebgp.State
	(*Bgp_PeerGroups_PeerGroup)(nil),                                                                                                       // 227: openconfig.Bgp.PeerGroups.PeerGroup
	(*Bgp_PeerGroups_PeerGroupKey)(nil),                                                                                                    // 228: openconfig.Bgp.PeerGroups.PeerGroupKey
	(*Bgp_PeerGroups_PeerGroup_AfiSafis)(nil),                                                                                              // 229: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis
	(*Bgp_PeerGroups_PeerGroup_ApplyPolicy)(nil),                                                                                           // 230: openconfig.Bgp.PeerGroups.PeerGroup.ApplyPolicy
	(*Bgp_PeerGroups_PeerGroup_AsPathOptions)(nil),                                                                                         // 231: openconfig.Bgp.PeerGroups.PeerGroup.AsPathOptions
	(*Bgp_PeerGroups_PeerGroup_Config)(nil),                                                                                                // 232: openconfig.Bgp.PeerGroups.PeerGroup.Config
	(*Bgp_PeerGroups_PeerGroup_EbgpMultihop)(nil),                                                                                          // 233: openconfig.Bgp.PeerGroups.PeerGroup.EbgpMultihop
	(*Bgp_PeerGroups_PeerGroup_ErrorHandling)(nil),                                                                                         // 234: openconfig.Bgp.PeerGroups.PeerGroup.ErrorHandling
	(*Bgp_PeerGroups_PeerGroup_GracefulRestart)(nil),                                                                                       // 235: openconfig.Bgp.PeerGroups.PeerGroup.GracefulRestart
	(*Bgp_PeerGroups_PeerGroup_LoggingOptions)(nil),                                                                                        // 236: openconfig.Bgp.PeerGroups.PeerGroup.LoggingOptions
	(*Bgp_PeerGroups_PeerGroup_RouteReflector)(nil),                                                                                        // 237: openconfig.Bgp.PeerGroups.PeerGroup.RouteReflector
	(*Bgp_PeerGroups_PeerGroup_State)(nil),                                                                                                 // 238: openconfig.Bgp.PeerGroups.PeerGroup.State
	(*Bgp_PeerGroups_PeerGroup_Timers)(nil),                                                                                                // 239: openconfig.Bgp.PeerGroups.PeerGroup.Timers
	(*Bgp_PeerGroups_PeerGroup_Transport)(nil),                                                                                             // 240: openconfig.Bgp.PeerGroups.PeerGroup.Transport
	(*Bgp_PeerGroups_PeerGroup_UseMultiplePaths)(nil),                                                                                      // 241: openconfig.Bgp.PeerGroups.PeerGroup.UseMultiplePaths
	(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi)(nil),                                                                                      // 242: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi
	(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafiKey)(nil),                                                                                   // 243: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafiKey
	(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_AddPaths)(nil),                                                                             // 244: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.AddPaths
	(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy)(nil),                                                                          // 245: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.ApplyPolicy
	(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Config)(nil),                                                                               // 246: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Config
	(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart)(nil),                                                                      // 247: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.GracefulRestart
	(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast)(nil),                                                                   // 248: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv4LabeledUnicast
	(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast)(nil),                                                                          // 249: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv4Unicast
	(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast)(nil),                                                                   // 250: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv6LabeledUnicast
	(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast)(nil),                                                                          // 251: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv6Unicast
	(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn)(nil),                                                                            // 252: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L2VpnEvpn
	(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls)(nil),                                                                            // 253: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L2VpnVpls
	(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast)(nil),                                                                   // 254: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv4Multicast
	(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast)(nil),                                                                     // 255: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv4Unicast
	(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast)(nil),                                                                   // 256: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv6Multicast
	(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast)(nil),                                                                     // 257: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv6Unicast
	(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv4)(nil),                                                                       // 258: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.SrtePolicyIpv4
	(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv6)(nil),                                                                       // 259: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.SrtePolicyIpv6
	(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_State)(nil),                                                                                // 260: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.State
	(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths)(nil),                                                                     // 261: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.UseMultiplePaths
	(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_AddPaths_Config)(nil),                                                                      // 262: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.AddPaths.Config
	(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_AddPaths_State)(nil),                                                                       // 263: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.AddPaths.State
	(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_Config)(nil),                                                                   // 264: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.ApplyPolicy.Config
	(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_State)(nil),                                                                    // 265: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.ApplyPolicy.State
	(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_Config)(nil),                                                               // 266: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.GracefulRestart.Config
	(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_State)(nil),                                                                // 267: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.GracefulRestart.State
	(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit)(nil),                                                       // 268: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv4LabeledUnicast.PrefixLimit
	(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config)(nil),                                                // 269: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv4LabeledUnicast.PrefixLimit.Config
	(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State)(nil),                                                 // 270: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv4LabeledUnicast.PrefixLimit.State
	(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_Config)(nil),                                                                   // 271: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv4Unicast.Config
	(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit)(nil),                                                              // 272: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv4Unicast.PrefixLimit
	(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_State)(nil),                                                                    // 273: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv4Unicast.State
	(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config)(nil),                                                       // 274: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv4Unicast.PrefixLimit.Config
	(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State)(nil),                                                        // 275: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv4Unicast.PrefixLimit.State
	(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit)(nil),                                                       // 276: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv6LabeledUnicast.PrefixLimit
	(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config)(nil),                                                // 277: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv6LabeledUnicast.PrefixLimit.Config
	(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State)(nil),                                                 // 278: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv6LabeledUnicast.PrefixLimit.State
	(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_Config)(nil),                                                                   // 279: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv6Unicast.Config
	(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit)(nil),                                                              // 280: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv6Unicast.PrefixLimit
	(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_State)(nil),                                                                    // 281: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv6Unicast.State
	(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config)(nil),                                                       // 282: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv6Unicast.PrefixLimit.Config
	(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State)(nil),                                                        // 283: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv6Unicast.PrefixLimit.State
	(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit)(nil),                                                                // 284: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L2VpnEvpn.PrefixLimit
	(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config)(nil),                                                         // 285: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L2VpnEvpn.PrefixLimit.Config
	(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State)(nil),                                                          // 286: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L2VpnEvpn.PrefixLimit.State
	(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit)(nil),                                                                // 287: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L2VpnVpls.PrefixLimit
	(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config)(nil),                                                         // 288: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L2VpnVpls.PrefixLimit.Config
	(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State)(nil),                                                          // 289: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L2VpnVpls.PrefixLimit.State
	(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit)(nil),                                                       // 290: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv4Multicast.PrefixLimit
	(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config)(nil),                                                // 291: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv4Multicast.PrefixLimit.Config
	(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State)(nil),                                                 // 292: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv4Multicast.PrefixLimit.State
	(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit)(nil),                                                         // 293: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv4Unicast.PrefixLimit
	(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config)(nil),                                                  // 294: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv4Unicast.PrefixLimit.Config
	(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State)(nil),                                                   // 295: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv4Unicast.PrefixLimit.State
	(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit)(nil),                                                       // 296: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv6Multicast.PrefixLimit
	(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config)(nil),                                                // 297: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv6Multicast.PrefixLimit.Config
	(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State)(nil),                                                 // 298: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv6Multicast.PrefixLimit.State
	(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit)(nil),                                                         // 299: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv6Unicast.PrefixLimit
	(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config)(nil),                                                  // 300: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv6Unicast.PrefixLimit.Config
	(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State)(nil),                                                   // 301: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv6Unicast.PrefixLimit.State
	(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit)(nil),                                                           // 302: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.SrtePolicyIpv4.PrefixLimit
	(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_Config)(nil),                                                    // 303: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.SrtePolicyIpv4.PrefixLimit.Config
	(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_State)(nil),                                                     // 304: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.SrtePolicyIpv4.PrefixLimit.State
	(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit)(nil),                                                           // 305: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.SrtePolicyIpv6.PrefixLimit
	(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_Config)(nil),                                                    // 306: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.SrtePolicyIpv6.PrefixLimit.Config
	(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_State)(nil),                                                     // 307: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.SrtePolicyIpv6.PrefixLimit.State
	(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Config)(nil),                                                              // 308: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.UseMultiplePaths.Config
	(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp)(nil),                                                                // 309: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.UseMultiplePaths.Ebgp
	(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp)(nil),                                                                // 310: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.UseMultiplePaths.Ibgp
	(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_State)(nil),                                                               // 311: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.UseMultiplePaths.State
	(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config)(nil),                                                         // 312: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.UseMultiplePaths.Ebgp.Config
	(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State)(nil),                                                          // 313: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.UseMultiplePaths.Ebgp.State
	(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config)(nil),                                                         // 314: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.UseMultiplePaths.Ibgp.Config
	(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State)(nil),                                                          // 315: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.UseMultiplePaths.Ibgp.State
	(*Bgp_PeerGroups_PeerGroup_ApplyPolicy_Config)(nil),                                                                                    // 316: openconfig.Bgp.PeerGroups.PeerGroup.ApplyPolicy.Config
	(*Bgp_PeerGroups_PeerGroup_ApplyPolicy_State)(nil),                                                                                     // 317: openconfig.Bgp.PeerGroups.PeerGroup.ApplyPolicy.State
	(*Bgp_PeerGroups_PeerGroup_AsPathOptions_Config)(nil),                                                                                  // 318: openconfig.Bgp.PeerGroups.PeerGroup.AsPathOptions.Config
	(*Bgp_PeerGroups_PeerGroup_AsPathOptions_State)(nil),                                                                                   // 319: openconfig.Bgp.PeerGroups.PeerGroup.AsPathOptions.State
	(*Bgp_PeerGroups_PeerGroup_EbgpMultihop_Config)(nil),                                                                                   // 320: openconfig.Bgp.PeerGroups.PeerGroup.EbgpMultihop.Config
	(*Bgp_PeerGroups_PeerGroup_EbgpMultihop_State)(nil),                                                                                    // 321: openconfig.Bgp.PeerGroups.PeerGroup.EbgpMultihop.State
	(*Bgp_PeerGroups_PeerGroup_ErrorHandling_Config)(nil),                                                                                  // 322: openconfig.Bgp.PeerGroups.PeerGroup.ErrorHandling.Config
	(*Bgp_PeerGroups_PeerGroup_ErrorHandling_State)(nil),                                                                                   // 323: openconfig.Bgp.PeerGroups.PeerGroup.ErrorHandling.State
	(*Bgp_PeerGroups_PeerGroup_GracefulRestart_Config)(nil),                                                                                // 324: openconfig.Bgp.PeerGroups.PeerGroup.GracefulRestart.Config
	(*Bgp_PeerGroups_PeerGroup_GracefulRestart_State)(nil),                                                                                 // 325: openconfig.Bgp.PeerGroups.PeerGroup.GracefulRestart.State
	(*Bgp_PeerGroups_PeerGroup_LoggingOptions_Config)(nil),                                                                                 // 326: openconfig.Bgp.PeerGroups.PeerGroup.LoggingOptions.Config
	(*Bgp_PeerGroups_PeerGroup_LoggingOptions_State)(nil),                                                                                  // 327: openconfig.Bgp.PeerGroups.PeerGroup.LoggingOptions.State
	(*Bgp_PeerGroups_PeerGroup_RouteReflector_Config)(nil),                                                                                 // 328: openconfig.Bgp.PeerGroups.PeerGroup.RouteReflector.Config
	(*Bgp_PeerGroups_PeerGroup_RouteReflector_State)(nil),                                                                                  // 329: openconfig.Bgp.PeerGroups.PeerGroup.RouteReflector.State
	(*Bgp_PeerGroups_PeerGroup_Timers_Config)(nil),                                                                                         // 330: openconfig.Bgp.PeerGroups.PeerGroup.Timers.Config
	(*Bgp_PeerGroups_PeerGroup_Timers_State)(nil),                                                                                          // 331: openconfig.Bgp.PeerGroups.PeerGroup.Timers.State
	(*Bgp_PeerGroups_PeerGroup_Transport_Config)(nil),                                                                                      // 332: openconfig.Bgp.PeerGroups.PeerGroup.Transport.Config
	(*Bgp_PeerGroups_PeerGroup_Transport_State)(nil),                                                                                       // 333: openconfig.Bgp.PeerGroups.PeerGroup.Transport.State
	(*Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Config)(nil),                                                                               // 334: openconfig.Bgp.PeerGroups.PeerGroup.UseMultiplePaths.Config
	(*Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp)(nil),                                                                                 // 335: openconfig.Bgp.PeerGroups.PeerGroup.UseMultiplePaths.Ebgp
	(*Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp)(nil),                                                                                 // 336: openconfig.Bgp.PeerGroups.PeerGroup.UseMultiplePaths.Ibgp
	(*Bgp_PeerGroups_PeerGroup_UseMultiplePaths_State)(nil),                                                                                // 337: openconfig.Bgp.PeerGroups.PeerGroup.UseMultiplePaths.State
	(*Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_Config)(nil),                                                                          // 338: openconfig.Bgp.PeerGroups.PeerGroup.UseMultiplePaths.Ebgp.Config
	(*Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_State)(nil),                                                                           // 339: openconfig.Bgp.PeerGroups.PeerGroup.UseMultiplePaths.Ebgp.State
	(*Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_Config)(nil),                                                                          // 340: openconfig.Bgp.PeerGroups.PeerGroup.UseMultiplePaths.Ibgp.Config
	(*Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_State)(nil),                                                                           // 341: openconfig.Bgp.PeerGroups.PeerGroup.UseMultiplePaths.Ibgp.State
	(*Bgp_Rib_AfiSafis)(nil),                                                                                                               // 342: openconfig.Bgp.Rib.AfiSafis
	(*Bgp_Rib_AttrSets)(nil),                                                                                                               // 343: openconfig.Bgp.Rib.AttrSets
	(*Bgp_Rib_Communities)(nil),                                                                                                            // 344: openconfig.Bgp.Rib.Communities
	(*Bgp_Rib_ExtCommunities)(nil),                                                                                                         // 345: openconfig.Bgp.Rib.ExtCommunities
	(*Bgp_Rib_AfiSafis_AfiSafi)(nil),                                                                                                       // 346: openconfig.Bgp.Rib.AfiSafis.AfiSafi
	(*Bgp_Rib_AfiSafis_AfiSafiKey)(nil),                                                                                                    // 347: openconfig.Bgp.Rib.AfiSafis.AfiSafiKey
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy)(nil),                                                                                        // 348: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast)(nil),                                                                                           // 349: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy)(nil),                                                                                        // 350: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast)(nil),                                                                                           // 351: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast
	(*Bgp_Rib_AfiSafis_AfiSafi_State)(nil),                                                                                                 // 352: openconfig.Bgp.Rib.AfiSafis.AfiSafi.State
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib)(nil),                                                                                 // 353: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.LocRib
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors)(nil),                                                                              // 354: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes)(nil),                                                                          // 355: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.LocRib.Routes
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route)(nil),                                                                    // 356: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.LocRib.Routes.Route
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_RouteKey)(nil),                                                                 // 357: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.LocRib.Routes.RouteKey
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_State)(nil),                                                              // 358: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.LocRib.Routes.Route.State
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_UnknownAttributes)(nil),                                                  // 359: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.LocRib.Routes.Route.UnknownAttributes
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute)(nil),                                 // 360: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.LocRib.Routes.Route.UnknownAttributes.UnknownAttribute
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey)(nil),                              // 361: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.LocRib.Routes.Route.UnknownAttributes.UnknownAttributeKey
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State)(nil),                           // 362: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.LocRib.Routes.Route.UnknownAttributes.UnknownAttribute.State
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor)(nil),                                                                     // 363: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_NeighborKey)(nil),                                                                  // 364: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.NeighborKey
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost)(nil),                                                        // 365: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPost
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre)(nil),                                                         // 366: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPre
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost)(nil),                                                       // 367: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPost
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre)(nil),                                                        // 368: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPre
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_State)(nil),                                                               // 369: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.State
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes)(nil),                                                 // 370: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route)(nil),                                           // 371: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.Route
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey)(nil),                                        // 372: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.RouteKey
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State)(nil),                                     // 373: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.Route.State
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes)(nil),                         // 374: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute)(nil),        // 375: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttribute
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey)(nil),     // 376: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttributeKey
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State)(nil),  // 377: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttribute.State
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes)(nil),                                                  // 378: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route)(nil),                                            // 379: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes.Route
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey)(nil),                                         // 380: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes.RouteKey
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State)(nil),                                      // 381: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes.Route.State
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes)(nil),                          // 382: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute)(nil),         // 383: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttribute
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey)(nil),      // 384: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttributeKey
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State)(nil),   // 385: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttribute.State
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes)(nil),                                                // 386: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route)(nil),                                          // 387: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes.Route
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey)(nil),                                       // 388: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes.RouteKey
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State)(nil),                                    // 389: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.State
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes)(nil),                        // 390: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute)(nil),       // 391: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttribute
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey)(nil),    // 392: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttributeKey
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State)(nil), // 393: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttribute.State
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes)(nil),                                                 // 394: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route)(nil),                                           // 395: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes.Route
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey)(nil),                                        // 396: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes.RouteKey
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State)(nil),                                     // 397: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.State
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes)(nil),                         // 398: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute)(nil),        // 399: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttribute
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey)(nil),     // 400: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttributeKey
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State)(nil),  // 401: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttribute.State
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib)(nil),                                                                                    // 402: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors)(nil),                                                                                 // 403: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes)(nil),                                                                             // 404: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_State)(nil),                                                                              // 405: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.State
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route)(nil),                                                                       // 406: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.Route
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_RouteKey)(nil),                                                                    // 407: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.RouteKey
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State)(nil),                                                                 // 408: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.Route.State
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes)(nil),                                                     // 409: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.Route.UnknownAttributes
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute)(nil),                                    // 410: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.Route.UnknownAttributes.UnknownAttribute
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey)(nil),                                 // 411: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.Route.UnknownAttributes.UnknownAttributeKey
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State)(nil),                              // 412: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.Route.UnknownAttributes.UnknownAttribute.State
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor)(nil),                                                                        // 413: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_NeighborKey)(nil),                                                                     // 414: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.NeighborKey
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost)(nil),                                                           // 415: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre)(nil),                                                            // 416: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost)(nil),                                                          // 417: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre)(nil),                                                           // 418: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_State)(nil),                                                                  // 419: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.State
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes)(nil),                                                    // 420: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_State)(nil),                                                     // 421: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.State
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route)(nil),                                              // 422: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey)(nil),                                           // 423: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.RouteKey
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State)(nil),                                        // 424: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.State
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes)(nil),                            // 425: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute)(nil),           // 426: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttribute
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey)(nil),        // 427: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttributeKey
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State)(nil),     // 428: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttribute.State
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes)(nil),                                                     // 429: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_State)(nil),                                                      // 430: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.State
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route)(nil),                                               // 431: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey)(nil),                                            // 432: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.RouteKey
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State)(nil),                                         // 433: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.State
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes)(nil),                             // 434: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute)(nil),            // 435: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttribute
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey)(nil),         // 436: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttributeKey
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State)(nil),      // 437: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttribute.State
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes)(nil),                                                   // 438: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_State)(nil),                                                    // 439: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.State
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route)(nil),                                             // 440: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey)(nil),                                          // 441: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.RouteKey
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State)(nil),                                       // 442: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.State
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes)(nil),                           // 443: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute)(nil),          // 444: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttribute
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey)(nil),       // 445: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttributeKey
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State)(nil),    // 446: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttribute.State
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes)(nil),                                                    // 447: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_State)(nil),                                                     // 448: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.State
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route)(nil),                                              // 449: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey)(nil),                                           // 450: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.RouteKey
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State)(nil),                                        // 451: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.State
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes)(nil),                            // 452: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute)(nil),           // 453: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttribute
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey)(nil),        // 454: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttributeKey
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State)(nil),     // 455: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttribute.State
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib)(nil),                                                                                 // 456: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.LocRib
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors)(nil),                                                                              // 457: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes)(nil),                                                                          // 458: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.LocRib.Routes
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route)(nil),                                                                    // 459: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.LocRib.Routes.Route
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_RouteKey)(nil),                                                                 // 460: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.LocRib.Routes.RouteKey
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_State)(nil),                                                              // 461: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.LocRib.Routes.Route.State
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_UnknownAttributes)(nil),                                                  // 462: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.LocRib.Routes.Route.UnknownAttributes
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute)(nil),                                 // 463: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.LocRib.Routes.Route.UnknownAttributes.UnknownAttribute
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey)(nil),                              // 464: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.LocRib.Routes.Route.UnknownAttributes.UnknownAttributeKey
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State)(nil),                           // 465: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.LocRib.Routes.Route.UnknownAttributes.UnknownAttribute.State
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor)(nil),                                                                     // 466: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_NeighborKey)(nil),                                                                  // 467: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.NeighborKey
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost)(nil),                                                        // 468: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPost
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre)(nil),                                                         // 469: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPre
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost)(nil),                                                       // 470: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPost
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre)(nil),                                                        // 471: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPre
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_State)(nil),                                                               // 472: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.State
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes)(nil),                                                 // 473: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route)(nil),                                           // 474: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.Route
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey)(nil),                                        // 475: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.RouteKey
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State)(nil),                                     // 476: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.Route.State
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes)(nil),                         // 477: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute)(nil),        // 478: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttribute
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey)(nil),     // 479: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttributeKey
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State)(nil),  // 480: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttribute.State
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes)(nil),                                                  // 481: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route)(nil),                                            // 482: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes.Route
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey)(nil),                                         // 483: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes.RouteKey
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State)(nil),                                      // 484: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes.Route.State
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes)(nil),                          // 485: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute)(nil),         // 486: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttribute
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey)(nil),      // 487: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttributeKey
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State)(nil),   // 488: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttribute.State
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes)(nil),                                                // 489: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route)(nil),                                          // 490: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes.Route
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey)(nil),                                       // 491: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes.RouteKey
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State)(nil),                                    // 492: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.State
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes)(nil),                        // 493: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute)(nil),       // 494: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttribute
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey)(nil),    // 495: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttributeKey
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State)(nil), // 496: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttribute.State
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes)(nil),                                                 // 497: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route)(nil),                                           // 498: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes.Route
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey)(nil),                                        // 499: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes.RouteKey
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State)(nil),                                     // 500: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.State
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes)(nil),                         // 501: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute)(nil),        // 502: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttribute
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey)(nil),     // 503: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttributeKey
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State)(nil),  // 504: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttribute.State
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib)(nil),                                                                                    // 505: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors)(nil),                                                                                 // 506: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes)(nil),                                                                             // 507: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_State)(nil),                                                                              // 508: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.State
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route)(nil),                                                                       // 509: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.Route
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_RouteKey)(nil),                                                                    // 510: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.RouteKey
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State)(nil),                                                                 // 511: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.Route.State
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes)(nil),                                                     // 512: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.Route.UnknownAttributes
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute)(nil),                                    // 513: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.Route.UnknownAttributes.UnknownAttribute
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey)(nil),                                 // 514: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.Route.UnknownAttributes.UnknownAttributeKey
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State)(nil),                              // 515: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.Route.UnknownAttributes.UnknownAttribute.State
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor)(nil),                                                                        // 516: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_NeighborKey)(nil),                                                                     // 517: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.NeighborKey
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost)(nil),                                                           // 518: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre)(nil),                                                            // 519: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost)(nil),                                                          // 520: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre)(nil),                                                           // 521: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_State)(nil),                                                                  // 522: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.State
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes)(nil),                                                    // 523: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route)(nil),                                              // 524: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey)(nil),                                           // 525: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.RouteKey
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State)(nil),                                        // 526: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.State
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes)(nil),                            // 527: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute)(nil),           // 528: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttribute
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey)(nil),        // 529: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttributeKey
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State)(nil),     // 530: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttribute.State
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes)(nil),                                                     // 531: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route)(nil),                                               // 532: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey)(nil),                                            // 533: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.RouteKey
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State)(nil),                                         // 534: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.State
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes)(nil),                             // 535: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute)(nil),            // 536: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttribute
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey)(nil),         // 537: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttributeKey
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State)(nil),      // 538: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttribute.State
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes)(nil),                                                   // 539: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route)(nil),                                             // 540: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey)(nil),                                          // 541: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.RouteKey
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State)(nil),                                       // 542: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.State
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes)(nil),                           // 543: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute)(nil),          // 544: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttribute
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey)(nil),       // 545: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttributeKey
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State)(nil),    // 546: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttribute.State
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes)(nil),                                                    // 547: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route)(nil),                                              // 548: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey)(nil),                                           // 549: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.RouteKey
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State)(nil),                                        // 550: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.State
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes)(nil),                            // 551: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute)(nil),           // 552: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttribute
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey)(nil),        // 553: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttributeKey
	(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State)(nil),     // 554: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttribute.State
	(*Bgp_Rib_AttrSets_AttrSet)(nil),                                                                                                       // 555: openconfig.Bgp.Rib.AttrSets.AttrSet
	(*Bgp_Rib_AttrSets_AttrSetKey)(nil),                                                                                                    // 556: openconfig.Bgp.Rib.AttrSets.AttrSetKey
	(*Bgp_Rib_AttrSets_AttrSet_Aggregator)(nil),                                                                                            // 557: openconfig.Bgp.Rib.AttrSets.AttrSet.Aggregator
	(*Bgp_Rib_AttrSets_AttrSet_As4Path)(nil),                                                                                               // 558: openconfig.Bgp.Rib.AttrSets.AttrSet.As4Path
	(*Bgp_Rib_AttrSets_AttrSet_AsPath)(nil),                                                                                                // 559: openconfig.Bgp.Rib.AttrSets.AttrSet.AsPath
	(*Bgp_Rib_AttrSets_AttrSet_State)(nil),                                                                                                 // 560: openconfig.Bgp.Rib.AttrSets.AttrSet.State
	(*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation)(nil),                                                                                   // 561: openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation
	(*Bgp_Rib_AttrSets_AttrSet_Aggregator_State)(nil),                                                                                      // 562: openconfig.Bgp.Rib.AttrSets.AttrSet.Aggregator.State
	(*Bgp_Rib_AttrSets_AttrSet_As4Path_As4Segment)(nil),                                                                                    // 563: openconfig.Bgp.Rib.AttrSets.AttrSet.As4Path.As4Segment
	(*Bgp_Rib_AttrSets_AttrSet_As4Path_As4Segment_State)(nil),                                                                              // 564: openconfig.Bgp.Rib.AttrSets.AttrSet.As4Path.As4Segment.State
	(*Bgp_Rib_AttrSets_AttrSet_AsPath_AsSegment)(nil),                                                                                      // 565: openconfig.Bgp.Rib.AttrSets.AttrSet.AsPath.AsSegment
	(*Bgp_Rib_AttrSets_AttrSet_AsPath_AsSegment_State)(nil),                                                                                // 566: openconfig.Bgp.Rib.AttrSets.AttrSet.AsPath.AsSegment.State
	(*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels)(nil),                                                                           // 567: openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels
	(*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel)(nil),                                                                    // 568: openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel
	(*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_TunnelKey)(nil),                                                                 // 569: openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.TunnelKey
	(*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_State)(nil),                                                              // 570: openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.State
	(*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs)(nil),                                                            // 571: openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.Subtlvs
	(*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv)(nil),                                                     // 572: openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.Subtlvs.Subtlv
	(*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_SubtlvKey)(nil),                                                  // 573: openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.Subtlvs.SubtlvKey
	(*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_RemoteEndpoints)(nil),                                     // 574: openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.Subtlvs.Subtlv.RemoteEndpoints
	(*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists)(nil),                                        // 575: openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.Subtlvs.Subtlv.SegmentLists
	(*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State)(nil),                                               // 576: openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.Subtlvs.Subtlv.State
	(*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_RemoteEndpoints_RemoteEndpoint)(nil),                      // 577: openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.Subtlvs.Subtlv.RemoteEndpoints.RemoteEndpoint
	(*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_RemoteEndpoints_RemoteEndpointKey)(nil),                   // 578: openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.Subtlvs.Subtlv.RemoteEndpoints.RemoteEndpointKey
	(*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_RemoteEndpoints_RemoteEndpoint_State)(nil),                // 579: openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.Subtlvs.Subtlv.RemoteEndpoints.RemoteEndpoint.State
	(*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList)(nil),                            // 580: openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.Subtlvs.Subtlv.SegmentLists.SegmentList
	(*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentListKey)(nil),                         // 581: openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.Subtlvs.Subtlv.SegmentLists.SegmentListKey
	(*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments)(nil),                   // 582: openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.Subtlvs.Subtlv.SegmentLists.SegmentList.Segments
	(*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_State)(nil),                      // 583: openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.Subtlvs.Subtlv.SegmentLists.SegmentList.State
	(*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment)(nil),           // 584: openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.Subtlvs.Subtlv.SegmentLists.SegmentList.Segments.Segment
	(*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_SegmentKey)(nil),        // 585: openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.Subtlvs.Subtlv.SegmentLists.SegmentList.Segments.SegmentKey
	(*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State)(nil),     // 586: openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.Subtlvs.Subtlv.SegmentLists.SegmentList.Segments.Segment.State
	(*Bgp_Rib_Communities_Community)(nil),                                                                                                  // 587: openconfig.Bgp.Rib.Communities.Community
	(*Bgp_Rib_Communities_CommunityKey)(nil),                                                                                               // 588: openconfig.Bgp.Rib.Communities.CommunityKey
	(*Bgp_Rib_Communities_Community_State)(nil),                                                                                            // 589: openconfig.Bgp.Rib.Communities.Community.State
	(*Bgp_Rib_Communities_Community_State_CommunityUnion)(nil),                                                                             // 590: openconfig.Bgp.Rib.Communities.Community.State.CommunityUnion
	(*Bgp_Rib_ExtCommunities_ExtCommunity)(nil),                                                                                            // 591: openconfig.Bgp.Rib.ExtCommunities.ExtCommunity
	(*Bgp_Rib_ExtCommunities_ExtCommunityKey)(nil),                                                                                         // 592: openconfig.Bgp.Rib.ExtCommunities.ExtCommunityKey
	(*Bgp_Rib_ExtCommunities_ExtCommunity_State)(nil),                                                                                      // 593: openconfig.Bgp.Rib.ExtCommunities.ExtCommunity.State
	(*Bgp_Rib_ExtCommunities_ExtCommunity_State_ExtCommunityUnion)(nil),                                                                    // 594: openconfig.Bgp.Rib.ExtCommunities.ExtCommunity.State.ExtCommunityUnion
	(*ywrapper.UintValue)(nil),                              // 595: ywrapper.UintValue
	(*ywrapper.StringValue)(nil),                            // 596: ywrapper.StringValue
	(OpenconfigBgpTypesAFISAFITYPE)(0),                      // 597: openconfig.OpenconfigBgpTypesAFISAFITYPE
	(*ywrapper.BoolValue)(nil),                              // 598: ywrapper.BoolValue
	(*ywrapper.Decimal64Value)(nil),                         // 599: ywrapper.Decimal64Value
	(OpenconfigBgpPeerType)(0),                              // 600: openconfig.OpenconfigBgpPeerType
	(OpenconfigBgpRemovePrivateAsOption)(0),                 // 601: openconfig.OpenconfigBgpRemovePrivateAsOption
	(OpenconfigBgpCommunityType)(0),                         // 602: openconfig.OpenconfigBgpCommunityType
	(OpenconfigBgpTypesBGPCAPABILITY)(0),                    // 603: openconfig.OpenconfigBgpTypesBGPCAPABILITY
	(OpenconfigRoutingPolicyDefaultPolicyType)(0),           // 604: openconfig.OpenconfigRoutingPolicyDefaultPolicyType
	(OpenconfigBgpTypesBGPERRORCODE)(0),                     // 605: openconfig.OpenconfigBgpTypesBGPERRORCODE
	(OpenconfigBgpTypesBGPERRORSUBCODE)(0),                  // 606: openconfig.OpenconfigBgpTypesBGPERRORSUBCODE
	(OpenconfigRibBgpTypesINVALIDROUTEREASON)(0),            // 607: openconfig.OpenconfigRibBgpTypesINVALIDROUTEREASON
	(*ywrapper.BytesValue)(nil),                             // 608: ywrapper.BytesValue
	(OpenconfigPolicyTypesINSTALLPROTOCOLTYPE)(0),           // 609: openconfig.OpenconfigPolicyTypesINSTALLPROTOCOLTYPE
	(OpenconfigRibBgpBgpOriginAttrType)(0),                  // 610: openconfig.OpenconfigRibBgpBgpOriginAttrType
	(OpenconfigRibBgpAsPathSegmentType)(0),                  // 611: openconfig.OpenconfigRibBgpAsPathSegmentType
	(OpenconfigRibBgpTypesTUNNELENCAPSULATIONTYPE)(0),       // 612: openconfig.OpenconfigRibBgpTypesTUNNELENCAPSULATIONTYPE
	(OpenconfigRibBgpTypesTUNNELENCAPSULATIONSUBTLVTYPE)(0), // 613: openconfig.OpenconfigRibBgpTypesTUNNELENCAPSULATIONSUBTLVTYPE
	(OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY)(0),         // 614: openconfig.OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY
}
var file_openconfig_bgp_proto_depIdxs = []int32{
	6,    // 0: openconfig.Bgp.global:type_name -> openconfig.Bgp.Global
	7,    // 1: openconfig.Bgp.neighbors:type_name -> openconfig.Bgp.Neighbors
	8,    // 2: openconfig.Bgp.peer_groups:type_name -> openconfig.Bgp.PeerGroups
	9,    // 3: openconfig.Bgp.rib:type_name -> openconfig.Bgp.Rib
	10,   // 4: openconfig.Bgp.Global.afi_safis:type_name -> openconfig.Bgp.Global.AfiSafis
	11,   // 5: openconfig.Bgp.Global.confederation:type_name -> openconfig.Bgp.Global.Confederation
	12,   // 6: openconfig.Bgp.Global.config:type_name -> openconfig.Bgp.Global.Config
	13,   // 7: openconfig.Bgp.Global.default_route_distance:type_name -> openconfig.Bgp.Global.DefaultRouteDistance
	14,   // 8: openconfig.Bgp.Global.dynamic_neighbor_prefixes:type_name -> openconfig.Bgp.Global.DynamicNeighborPrefixes
	15,   // 9: openconfig.Bgp.Global.graceful_restart:type_name -> openconfig.Bgp.Global.GracefulRestart
	16,   // 10: openconfig.Bgp.Global.route_selection_options:type_name -> openconfig.Bgp.Global.RouteSelectionOptions
	17,   // 11: openconfig.Bgp.Global.state:type_name -> openconfig.Bgp.Global.State
	18,   // 12: openconfig.Bgp.Global.use_multiple_paths:type_name -> openconfig.Bgp.Global.UseMultiplePaths
	114,  // 13: openconfig.Bgp.Neighbors.neighbor:type_name -> openconfig.Bgp.Neighbors.NeighborKey
	228,  // 14: openconfig.Bgp.PeerGroups.peer_group:type_name -> openconfig.Bgp.PeerGroups.PeerGroupKey
	342,  // 15: openconfig.Bgp.Rib.afi_safis:type_name -> openconfig.Bgp.Rib.AfiSafis
	343,  // 16: openconfig.Bgp.Rib.attr_sets:type_name -> openconfig.Bgp.Rib.AttrSets
	344,  // 17: openconfig.Bgp.Rib.communities:type_name -> openconfig.Bgp.Rib.Communities
	345,  // 18: openconfig.Bgp.Rib.ext_communities:type_name -> openconfig.Bgp.Rib.ExtCommunities
	20,   // 19: openconfig.Bgp.Global.AfiSafis.afi_safi:type_name -> openconfig.Bgp.Global.AfiSafis.AfiSafiKey
	93,   // 20: openconfig.Bgp.Global.Confederation.config:type_name -> openconfig.Bgp.Global.Confederation.Config
	94,   // 21: openconfig.Bgp.Global.Confederation.state:type_name -> openconfig.Bgp.Global.Confederation.State
	595,  // 22: openconfig.Bgp.Global.Config.as:type_name -> ywrapper.UintValue
	596,  // 23: openconfig.Bgp.Global.Config.router_id:type_name -> ywrapper.StringValue
	95,   // 24: openconfig.Bgp.Global.DefaultRouteDistance.config:type_name -> openconfig.Bgp.Global.DefaultRouteDistance.Config
	96,   // 25: openconfig.Bgp.Global.DefaultRouteDistance.state:type_name -> openconfig.Bgp.Global.DefaultRouteDistance.State
	98,   // 26: openconfig.Bgp.Global.DynamicNeighborPrefixes.dynamic_neighbor_prefix:type_name -> openconfig.Bgp.Global.DynamicNeighborPrefixes.DynamicNeighborPrefixKey
	101,  // 27: openconfig.Bgp.Global.GracefulRestart.config:type_name -> openconfig.Bgp.Global.GracefulRestart.Config
	102,  // 28: openconfig.Bgp.Global.GracefulRestart.state:type_name -> openconfig.Bgp.Global.GracefulRestart.State
	103,  // 29: openconfig.Bgp.Global.RouteSelectionOptions.config:type_name -> openconfig.Bgp.Global.RouteSelectionOptions.Config
	104,  // 30: openconfig.Bgp.Global.RouteSelectionOptions.state:type_name -> openconfig.Bgp.Global.RouteSelectionOptions.State
	595,  // 31: openconfig.Bgp.Global.State.as:type_name -> ywrapper.UintValue
	596,  // 32: openconfig.Bgp.Global.State.router_id:type_name -> ywrapper.StringValue
	595,  // 33: openconfig.Bgp.Global.State.total_paths:type_name -> ywrapper.UintValue
	595,  // 34: openconfig.Bgp.Global.State.total_prefixes:type_name -> ywrapper.UintValue
	105,  // 35: openconfig.Bgp.Global.UseMultiplePaths.config:type_name -> openconfig.Bgp.Global.UseMultiplePaths.Config
	106,  // 36: openconfig.Bgp.Global.UseMultiplePaths.ebgp:type_name -> openconfig.Bgp.Global.UseMultiplePaths.Ebgp
	107,  // 37: openconfig.Bgp.Global.UseMultiplePaths.ibgp:type_name -> openconfig.Bgp.Global.UseMultiplePaths.Ibgp
	108,  // 38: openconfig.Bgp.Global.UseMultiplePaths.state:type_name -> openconfig.Bgp.Global.UseMultiplePaths.State
	21,   // 39: openconfig.Bgp.Global.AfiSafis.AfiSafi.add_paths:type_name -> openconfig.Bgp.Global.AfiSafis.AfiSafi.AddPaths
	22,   // 40: openconfig.Bgp.Global.AfiSafis.AfiSafi.config:type_name -> openconfig.Bgp.Global.AfiSafis.AfiSafi.Config
	23,   // 41: openconfig.Bgp.Global.AfiSafis.AfiSafi.graceful_restart:type_name -> openconfig.Bgp.Global.AfiSafis.AfiSafi.GracefulRestart
	24,   // 42: openconfig.Bgp.Global.AfiSafis.AfiSafi.ipv4_labeled_unicast:type_name -> openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv4LabeledUnicast
	25,   // 43: openconfig.Bgp.Global.AfiSafis.AfiSafi.ipv4_unicast:type_name -> openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv4Unicast
	26,   // 44: openconfig.Bgp.Global.AfiSafis.AfiSafi.ipv6_labeled_unicast:type_name -> openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv6LabeledUnicast
	27,   // 45: openconfig.Bgp.Global.AfiSafis.AfiSafi.ipv6_unicast:type_name -> openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv6Unicast
	28,   // 46: openconfig.Bgp.Global.AfiSafis.AfiSafi.l2vpn_evpn:type_name -> openconfig.Bgp.Global.AfiSafis.AfiSafi.L2VpnEvpn
	29,   // 47: openconfig.Bgp.Global.AfiSafis.AfiSafi.l2vpn_vpls:type_name -> openconfig.Bgp.Global.AfiSafis.AfiSafi.L2VpnVpls
	30,   // 48: openconfig.Bgp.Global.AfiSafis.AfiSafi.l3vpn_ipv4_multicast:type_name -> openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv4Multicast
	31,   // 49: openconfig.Bgp.Global.AfiSafis.AfiSafi.l3vpn_ipv4_unicast:type_name -> openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv4Unicast
	32,   // 50: openconfig.Bgp.Global.AfiSafis.AfiSafi.l3vpn_ipv6_multicast:type_name -> openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv6Multicast
	33,   // 51: openconfig.Bgp.Global.AfiSafis.AfiSafi.l3vpn_ipv6_unicast:type_name -> openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv6Unicast
	34,   // 52: openconfig.Bgp.Global.AfiSafis.AfiSafi.route_selection_options:type_name -> openconfig.Bgp.Global.AfiSafis.AfiSafi.RouteSelectionOptions
	35,   // 53: openconfig.Bgp.Global.AfiSafis.AfiSafi.srte_policy_ipv4:type_name -> openconfig.Bgp.Global.AfiSafis.AfiSafi.SrtePolicyIpv4
	36,   // 54: openconfig.Bgp.Global.AfiSafis.AfiSafi.srte_policy_ipv6:type_name -> openconfig.Bgp.Global.AfiSafis.AfiSafi.SrtePolicyIpv6
	37,   // 55: openconfig.Bgp.Global.AfiSafis.AfiSafi.state:type_name -> openconfig.Bgp.Global.AfiSafis.AfiSafi.State
	38,   // 56: openconfig.Bgp.Global.AfiSafis.AfiSafi.use_multiple_paths:type_name -> openconfig.Bgp.Global.AfiSafis.AfiSafi.UseMultiplePaths
	597,  // 57: openconfig.Bgp.Global.AfiSafis.AfiSafiKey.afi_safi_name:type_name -> openconfig.OpenconfigBgpTypesAFISAFITYPE
	19,   // 58: openconfig.Bgp.Global.AfiSafis.AfiSafiKey.afi_safi:type_name -> openconfig.Bgp.Global.AfiSafis.AfiSafi
	39,   // 59: openconfig.Bgp.Global.AfiSafis.AfiSafi.AddPaths.config:type_name -> openconfig.Bgp.Global.AfiSafis.AfiSafi.AddPaths.Config
	40,   // 60: openconfig.Bgp.Global.AfiSafis.AfiSafi.AddPaths.state:type_name -> openconfig.Bgp.Global.AfiSafis.AfiSafi.AddPaths.State
	597,  // 61: openconfig.Bgp.Global.AfiSafis.AfiSafi.Config.afi_safi_name:type_name -> openconfig.OpenconfigBgpTypesAFISAFITYPE
	598,  // 62: openconfig.Bgp.Global.AfiSafis.AfiSafi.Config.enabled:type_name -> ywrapper.BoolValue
	41,   // 63: openconfig.Bgp.Global.AfiSafis.AfiSafi.GracefulRestart.config:type_name -> openconfig.Bgp.Global.AfiSafis.AfiSafi.GracefulRestart.Config
	42,   // 64: openconfig.Bgp.Global.AfiSafis.AfiSafi.GracefulRestart.state:type_name -> openconfig.Bgp.Global.AfiSafis.AfiSafi.GracefulRestart.State
	43,   // 65: openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv4LabeledUnicast.prefix_limit:type_name -> openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv4LabeledUnicast.PrefixLimit
	46,   // 66: openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv4Unicast.config:type_name -> openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv4Unicast.Config
	47,   // 67: openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv4Unicast.prefix_limit:type_name -> openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv4Unicast.PrefixLimit
	48,   // 68: openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv4Unicast.state:type_name -> openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv4Unicast.State
	51,   // 69: openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv6LabeledUnicast.prefix_limit:type_name -> openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv6LabeledUnicast.PrefixLimit
	54,   // 70: openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv6Unicast.config:type_name -> openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv6Unicast.Config
	55,   // 71: openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv6Unicast.prefix_limit:type_name -> openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv6Unicast.PrefixLimit
	56,   // 72: openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv6Unicast.state:type_name -> openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv6Unicast.State
	59,   // 73: openconfig.Bgp.Global.AfiSafis.AfiSafi.L2VpnEvpn.prefix_limit:type_name -> openconfig.Bgp.Global.AfiSafis.AfiSafi.L2VpnEvpn.PrefixLimit
	62,   // 74: openconfig.Bgp.Global.AfiSafis.AfiSafi.L2VpnVpls.prefix_limit:type_name -> openconfig.Bgp.Global.AfiSafis.AfiSafi.L2VpnVpls.PrefixLimit
	65,   // 75: openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv4Multicast.prefix_limit:type_name -> openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv4Multicast.PrefixLimit
	68,   // 76: openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv4Unicast.prefix_limit:type_name -> openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv4Unicast.PrefixLimit
	71,   // 77: openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv6Multicast.prefix_limit:type_name -> openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv6Multicast.PrefixLimit
	74,   // 78: openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv6Unicast.prefix_limit:type_name -> openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv6Unicast.PrefixLimit
	77,   // 79: openconfig.Bgp.Global.AfiSafis.AfiSafi.RouteSelectionOptions.config:type_name -> openconfig.Bgp.Global.AfiSafis.AfiSafi.RouteSelectionOptions.Config
	78,   // 80: openconfig.Bgp.Global.AfiSafis.AfiSafi.RouteSelectionOptions.state:type_name -> openconfig.Bgp.Global.AfiSafis.AfiSafi.RouteSelectionOptions.State
	79,   // 81: openconfig.Bgp.Global.AfiSafis.AfiSafi.SrtePolicyIpv4.prefix_limit:type_name -> openconfig.Bgp.Global.AfiSafis.AfiSafi.SrtePolicyIpv4.PrefixLimit
	82,   // 82: openconfig.Bgp.Global.AfiSafis.AfiSafi.SrtePolicyIpv6.prefix_limit:type_name -> openconfig.Bgp.Global.AfiSafis.AfiSafi.SrtePolicyIpv6.PrefixLimit
	597,  // 83: openconfig.Bgp.Global.AfiSafis.AfiSafi.State.afi_safi_name:type_name -> openconfig.OpenconfigBgpTypesAFISAFITYPE
	598,  // 84: openconfig.Bgp.Global.AfiSafis.AfiSafi.State.enabled:type_name -> ywrapper.BoolValue
	595,  // 85: openconfig.Bgp.Global.AfiSafis.AfiSafi.State.total_paths:type_name -> ywrapper.UintValue
	595,  // 86: openconfig.Bgp.Global.AfiSafis.AfiSafi.State.total_prefixes:type_name -> ywrapper.UintValue
	85,   // 87: openconfig.Bgp.Global.AfiSafis.AfiSafi.UseMultiplePaths.config:type_name -> openconfig.Bgp.Global.AfiSafis.AfiSafi.UseMultiplePaths.Config
	86,   // 88: openconfig.Bgp.Global.AfiSafis.AfiSafi.UseMultiplePaths.ebgp:type_name -> openconfig.Bgp.Global.AfiSafis.AfiSafi.UseMultiplePaths.Ebgp
	87,   // 89: openconfig.Bgp.Global.AfiSafis.AfiSafi.UseMultiplePaths.ibgp:type_name -> openconfig.Bgp.Global.AfiSafis.AfiSafi.UseMultiplePaths.Ibgp
	88,   // 90: openconfig.Bgp.Global.AfiSafis.AfiSafi.UseMultiplePaths.state:type_name -> openconfig.Bgp.Global.AfiSafis.AfiSafi.UseMultiplePaths.State
	596,  // 91: openconfig.Bgp.Global.AfiSafis.AfiSafi.AddPaths.Config.eligible_prefix_policy:type_name -> ywrapper.StringValue
	598,  // 92: openconfig.Bgp.Global.AfiSafis.AfiSafi.AddPaths.Config.receive:type_name -> ywrapper.BoolValue
	598,  // 93: openconfig.Bgp.Global.AfiSafis.AfiSafi.AddPaths.Config.send:type_name -> ywrapper.BoolValue
	595,  // 94: openconfig.Bgp.Global.AfiSafis.AfiSafi.AddPaths.Config.send_max:type_name -> ywrapper.UintValue
	596,  // 95: openconfig.Bgp.Global.AfiSafis.AfiSafi.AddPaths.State.eligible_prefix_policy:type_name -> ywrapper.StringValue
	598,  // 96: openconfig.Bgp.Global.AfiSafis.AfiSafi.AddPaths.State.receive:type_name -> ywrapper.BoolValue
	598,  // 97: openconfig.Bgp.Global.AfiSafis.AfiSafi.AddPaths.State.send:type_name -> ywrapper.BoolValue
	595,  // 98: openconfig.Bgp.Global.AfiSafis.AfiSafi.AddPaths.State.send_max:type_name -> ywrapper.UintValue
	598,  // 99: openconfig.Bgp.Global.AfiSafis.AfiSafi.GracefulRestart.Config.enabled:type_name -> ywrapper.BoolValue
	598,  // 100: openconfig.Bgp.Global.AfiSafis.AfiSafi.GracefulRestart.State.enabled:type_name -> ywrapper.BoolValue
	44,   // 101: openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv4LabeledUnicast.PrefixLimit.config:type_name -> openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv4LabeledUnicast.PrefixLimit.Config
	45,   // 102: openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv4LabeledUnicast.PrefixLimit.state:type_name -> openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv4LabeledUnicast.PrefixLimit.State
	595,  // 103: openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv4LabeledUnicast.PrefixLimit.Config.max_prefixes:type_name -> ywrapper.UintValue
	598,  // 104: openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv4LabeledUnicast.PrefixLimit.Config.prevent_teardown:type_name -> ywrapper.BoolValue
	599,  // 105: openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv4LabeledUnicast.PrefixLimit.Config.restart_timer:type_name -> ywrapper.Decimal64Value
	595,  // 106: openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv4LabeledUnicast.PrefixLimit.Config.warning_threshold_pct:type_name -> ywrapper.UintValue
	595,  // 107: openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv4LabeledUnicast.PrefixLimit.State.max_prefixes:type_name -> ywrapper.UintValue
	598,  // 108: openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv4LabeledUnicast.PrefixLimit.State.prevent_teardown:type_name -> ywrapper.BoolValue
	599,  // 109: openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv4LabeledUnicast.PrefixLimit.State.restart_timer:type_name -> ywrapper.Decimal64Value
	595,  // 110: openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv4LabeledUnicast.PrefixLimit.State.warning_threshold_pct:type_name -> ywrapper.UintValue
	598,  // 111: openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv4Unicast.Config.send_default_route:type_name -> ywrapper.BoolValue
	49,   // 112: openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv4Unicast.PrefixLimit.config:type_name -> openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv4Unicast.PrefixLimit.Config
	50,   // 113: openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv4Unicast.PrefixLimit.state:type_name -> openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv4Unicast.PrefixLimit.State
	598,  // 114: openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv4Unicast.State.send_default_route:type_name -> ywrapper.BoolValue
	595,  // 115: openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv4Unicast.PrefixLimit.Config.max_prefixes:type_name -> ywrapper.UintValue
	598,  // 116: openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv4Unicast.PrefixLimit.Config.prevent_teardown:type_name -> ywrapper.BoolValue
	599,  // 117: openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv4Unicast.PrefixLimit.Config.restart_timer:type_name -> ywrapper.Decimal64Value
	595,  // 118: openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv4Unicast.PrefixLimit.Config.warning_threshold_pct:type_name -> ywrapper.UintValue
	595,  // 119: openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv4Unicast.PrefixLimit.State.max_prefixes:type_name -> ywrapper.UintValue
	598,  // 120: openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv4Unicast.PrefixLimit.State.prevent_teardown:type_name -> ywrapper.BoolValue
	599,  // 121: openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv4Unicast.PrefixLimit.State.restart_timer:type_name -> ywrapper.Decimal64Value
	595,  // 122: openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv4Unicast.PrefixLimit.State.warning_threshold_pct:type_name -> ywrapper.UintValue
	52,   // 123: openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv6LabeledUnicast.PrefixLimit.config:type_name -> openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv6LabeledUnicast.PrefixLimit.Config
	53,   // 124: openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv6LabeledUnicast.PrefixLimit.state:type_name -> openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv6LabeledUnicast.PrefixLimit.State
	595,  // 125: openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv6LabeledUnicast.PrefixLimit.Config.max_prefixes:type_name -> ywrapper.UintValue
	598,  // 126: openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv6LabeledUnicast.PrefixLimit.Config.prevent_teardown:type_name -> ywrapper.BoolValue
	599,  // 127: openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv6LabeledUnicast.PrefixLimit.Config.restart_timer:type_name -> ywrapper.Decimal64Value
	595,  // 128: openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv6LabeledUnicast.PrefixLimit.Config.warning_threshold_pct:type_name -> ywrapper.UintValue
	595,  // 129: openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv6LabeledUnicast.PrefixLimit.State.max_prefixes:type_name -> ywrapper.UintValue
	598,  // 130: openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv6LabeledUnicast.PrefixLimit.State.prevent_teardown:type_name -> ywrapper.BoolValue
	599,  // 131: openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv6LabeledUnicast.PrefixLimit.State.restart_timer:type_name -> ywrapper.Decimal64Value
	595,  // 132: openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv6LabeledUnicast.PrefixLimit.State.warning_threshold_pct:type_name -> ywrapper.UintValue
	598,  // 133: openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv6Unicast.Config.send_default_route:type_name -> ywrapper.BoolValue
	57,   // 134: openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv6Unicast.PrefixLimit.config:type_name -> openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv6Unicast.PrefixLimit.Config
	58,   // 135: openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv6Unicast.PrefixLimit.state:type_name -> openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv6Unicast.PrefixLimit.State
	598,  // 136: openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv6Unicast.State.send_default_route:type_name -> ywrapper.BoolValue
	595,  // 137: openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv6Unicast.PrefixLimit.Config.max_prefixes:type_name -> ywrapper.UintValue
	598,  // 138: openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv6Unicast.PrefixLimit.Config.prevent_teardown:type_name -> ywrapper.BoolValue
	599,  // 139: openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv6Unicast.PrefixLimit.Config.restart_timer:type_name -> ywrapper.Decimal64Value
	595,  // 140: openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv6Unicast.PrefixLimit.Config.warning_threshold_pct:type_name -> ywrapper.UintValue
	595,  // 141: openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv6Unicast.PrefixLimit.State.max_prefixes:type_name -> ywrapper.UintValue
	598,  // 142: openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv6Unicast.PrefixLimit.State.prevent_teardown:type_name -> ywrapper.BoolValue
	599,  // 143: openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv6Unicast.PrefixLimit.State.restart_timer:type_name -> ywrapper.Decimal64Value
	595,  // 144: openconfig.Bgp.Global.AfiSafis.AfiSafi.Ipv6Unicast.PrefixLimit.State.warning_threshold_pct:type_name -> ywrapper.UintValue
	60,   // 145: openconfig.Bgp.Global.AfiSafis.AfiSafi.L2VpnEvpn.PrefixLimit.config:type_name -> openconfig.Bgp.Global.AfiSafis.AfiSafi.L2VpnEvpn.PrefixLimit.Config
	61,   // 146: openconfig.Bgp.Global.AfiSafis.AfiSafi.L2VpnEvpn.PrefixLimit.state:type_name -> openconfig.Bgp.Global.AfiSafis.AfiSafi.L2VpnEvpn.PrefixLimit.State
	595,  // 147: openconfig.Bgp.Global.AfiSafis.AfiSafi.L2VpnEvpn.PrefixLimit.Config.max_prefixes:type_name -> ywrapper.UintValue
	598,  // 148: openconfig.Bgp.Global.AfiSafis.AfiSafi.L2VpnEvpn.PrefixLimit.Config.prevent_teardown:type_name -> ywrapper.BoolValue
	599,  // 149: openconfig.Bgp.Global.AfiSafis.AfiSafi.L2VpnEvpn.PrefixLimit.Config.restart_timer:type_name -> ywrapper.Decimal64Value
	595,  // 150: openconfig.Bgp.Global.AfiSafis.AfiSafi.L2VpnEvpn.PrefixLimit.Config.warning_threshold_pct:type_name -> ywrapper.UintValue
	595,  // 151: openconfig.Bgp.Global.AfiSafis.AfiSafi.L2VpnEvpn.PrefixLimit.State.max_prefixes:type_name -> ywrapper.UintValue
	598,  // 152: openconfig.Bgp.Global.AfiSafis.AfiSafi.L2VpnEvpn.PrefixLimit.State.prevent_teardown:type_name -> ywrapper.BoolValue
	599,  // 153: openconfig.Bgp.Global.AfiSafis.AfiSafi.L2VpnEvpn.PrefixLimit.State.restart_timer:type_name -> ywrapper.Decimal64Value
	595,  // 154: openconfig.Bgp.Global.AfiSafis.AfiSafi.L2VpnEvpn.PrefixLimit.State.warning_threshold_pct:type_name -> ywrapper.UintValue
	63,   // 155: openconfig.Bgp.Global.AfiSafis.AfiSafi.L2VpnVpls.PrefixLimit.config:type_name -> openconfig.Bgp.Global.AfiSafis.AfiSafi.L2VpnVpls.PrefixLimit.Config
	64,   // 156: openconfig.Bgp.Global.AfiSafis.AfiSafi.L2VpnVpls.PrefixLimit.state:type_name -> openconfig.Bgp.Global.AfiSafis.AfiSafi.L2VpnVpls.PrefixLimit.State
	595,  // 157: openconfig.Bgp.Global.AfiSafis.AfiSafi.L2VpnVpls.PrefixLimit.Config.max_prefixes:type_name -> ywrapper.UintValue
	598,  // 158: openconfig.Bgp.Global.AfiSafis.AfiSafi.L2VpnVpls.PrefixLimit.Config.prevent_teardown:type_name -> ywrapper.BoolValue
	599,  // 159: openconfig.Bgp.Global.AfiSafis.AfiSafi.L2VpnVpls.PrefixLimit.Config.restart_timer:type_name -> ywrapper.Decimal64Value
	595,  // 160: openconfig.Bgp.Global.AfiSafis.AfiSafi.L2VpnVpls.PrefixLimit.Config.warning_threshold_pct:type_name -> ywrapper.UintValue
	595,  // 161: openconfig.Bgp.Global.AfiSafis.AfiSafi.L2VpnVpls.PrefixLimit.State.max_prefixes:type_name -> ywrapper.UintValue
	598,  // 162: openconfig.Bgp.Global.AfiSafis.AfiSafi.L2VpnVpls.PrefixLimit.State.prevent_teardown:type_name -> ywrapper.BoolValue
	599,  // 163: openconfig.Bgp.Global.AfiSafis.AfiSafi.L2VpnVpls.PrefixLimit.State.restart_timer:type_name -> ywrapper.Decimal64Value
	595,  // 164: openconfig.Bgp.Global.AfiSafis.AfiSafi.L2VpnVpls.PrefixLimit.State.warning_threshold_pct:type_name -> ywrapper.UintValue
	66,   // 165: openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv4Multicast.PrefixLimit.config:type_name -> openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv4Multicast.PrefixLimit.Config
	67,   // 166: openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv4Multicast.PrefixLimit.state:type_name -> openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv4Multicast.PrefixLimit.State
	595,  // 167: openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv4Multicast.PrefixLimit.Config.max_prefixes:type_name -> ywrapper.UintValue
	598,  // 168: openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv4Multicast.PrefixLimit.Config.prevent_teardown:type_name -> ywrapper.BoolValue
	599,  // 169: openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv4Multicast.PrefixLimit.Config.restart_timer:type_name -> ywrapper.Decimal64Value
	595,  // 170: openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv4Multicast.PrefixLimit.Config.warning_threshold_pct:type_name -> ywrapper.UintValue
	595,  // 171: openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv4Multicast.PrefixLimit.State.max_prefixes:type_name -> ywrapper.UintValue
	598,  // 172: openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv4Multicast.PrefixLimit.State.prevent_teardown:type_name -> ywrapper.BoolValue
	599,  // 173: openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv4Multicast.PrefixLimit.State.restart_timer:type_name -> ywrapper.Decimal64Value
	595,  // 174: openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv4Multicast.PrefixLimit.State.warning_threshold_pct:type_name -> ywrapper.UintValue
	69,   // 175: openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv4Unicast.PrefixLimit.config:type_name -> openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv4Unicast.PrefixLimit.Config
	70,   // 176: openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv4Unicast.PrefixLimit.state:type_name -> openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv4Unicast.PrefixLimit.State
	595,  // 177: openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv4Unicast.PrefixLimit.Config.max_prefixes:type_name -> ywrapper.UintValue
	598,  // 178: openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv4Unicast.PrefixLimit.Config.prevent_teardown:type_name -> ywrapper.BoolValue
	599,  // 179: openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv4Unicast.PrefixLimit.Config.restart_timer:type_name -> ywrapper.Decimal64Value
	595,  // 180: openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv4Unicast.PrefixLimit.Config.warning_threshold_pct:type_name -> ywrapper.UintValue
	595,  // 181: openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv4Unicast.PrefixLimit.State.max_prefixes:type_name -> ywrapper.UintValue
	598,  // 182: openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv4Unicast.PrefixLimit.State.prevent_teardown:type_name -> ywrapper.BoolValue
	599,  // 183: openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv4Unicast.PrefixLimit.State.restart_timer:type_name -> ywrapper.Decimal64Value
	595,  // 184: openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv4Unicast.PrefixLimit.State.warning_threshold_pct:type_name -> ywrapper.UintValue
	72,   // 185: openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv6Multicast.PrefixLimit.config:type_name -> openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv6Multicast.PrefixLimit.Config
	73,   // 186: openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv6Multicast.PrefixLimit.state:type_name -> openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv6Multicast.PrefixLimit.State
	595,  // 187: openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv6Multicast.PrefixLimit.Config.max_prefixes:type_name -> ywrapper.UintValue
	598,  // 188: openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv6Multicast.PrefixLimit.Config.prevent_teardown:type_name -> ywrapper.BoolValue
	599,  // 189: openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv6Multicast.PrefixLimit.Config.restart_timer:type_name -> ywrapper.Decimal64Value
	595,  // 190: openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv6Multicast.PrefixLimit.Config.warning_threshold_pct:type_name -> ywrapper.UintValue
	595,  // 191: openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv6Multicast.PrefixLimit.State.max_prefixes:type_name -> ywrapper.UintValue
	598,  // 192: openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv6Multicast.PrefixLimit.State.prevent_teardown:type_name -> ywrapper.BoolValue
	599,  // 193: openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv6Multicast.PrefixLimit.State.restart_timer:type_name -> ywrapper.Decimal64Value
	595,  // 194: openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv6Multicast.PrefixLimit.State.warning_threshold_pct:type_name -> ywrapper.UintValue
	75,   // 195: openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv6Unicast.PrefixLimit.config:type_name -> openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv6Unicast.PrefixLimit.Config
	76,   // 196: openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv6Unicast.PrefixLimit.state:type_name -> openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv6Unicast.PrefixLimit.State
	595,  // 197: openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv6Unicast.PrefixLimit.Config.max_prefixes:type_name -> ywrapper.UintValue
	598,  // 198: openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv6Unicast.PrefixLimit.Config.prevent_teardown:type_name -> ywrapper.BoolValue
	599,  // 199: openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv6Unicast.PrefixLimit.Config.restart_timer:type_name -> ywrapper.Decimal64Value
	595,  // 200: openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv6Unicast.PrefixLimit.Config.warning_threshold_pct:type_name -> ywrapper.UintValue
	595,  // 201: openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv6Unicast.PrefixLimit.State.max_prefixes:type_name -> ywrapper.UintValue
	598,  // 202: openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv6Unicast.PrefixLimit.State.prevent_teardown:type_name -> ywrapper.BoolValue
	599,  // 203: openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv6Unicast.PrefixLimit.State.restart_timer:type_name -> ywrapper.Decimal64Value
	595,  // 204: openconfig.Bgp.Global.AfiSafis.AfiSafi.L3VpnIpv6Unicast.PrefixLimit.State.warning_threshold_pct:type_name -> ywrapper.UintValue
	598,  // 205: openconfig.Bgp.Global.AfiSafis.AfiSafi.RouteSelectionOptions.Config.advertise_inactive_routes:type_name -> ywrapper.BoolValue
	598,  // 206: openconfig.Bgp.Global.AfiSafis.AfiSafi.RouteSelectionOptions.Config.always_compare_med:type_name -> ywrapper.BoolValue
	598,  // 207: openconfig.Bgp.Global.AfiSafis.AfiSafi.RouteSelectionOptions.Config.enable_aigp:type_name -> ywrapper.BoolValue
	598,  // 208: openconfig.Bgp.Global.AfiSafis.AfiSafi.RouteSelectionOptions.Config.external_compare_router_id:type_name -> ywrapper.BoolValue
	598,  // 209: openconfig.Bgp.Global.AfiSafis.AfiSafi.RouteSelectionOptions.Config.ignore_as_path_length:type_name -> ywrapper.BoolValue
	598,  // 210: openconfig.Bgp.Global.AfiSafis.AfiSafi.RouteSelectionOptions.Config.ignore_next_hop_igp_metric:type_name -> ywrapper.BoolValue
	598,  // 211: openconfig.Bgp.Global.AfiSafis.AfiSafi.RouteSelectionOptions.State.advertise_inactive_routes:type_name -> ywrapper.BoolValue
	598,  // 212: openconfig.Bgp.Global.AfiSafis.AfiSafi.RouteSelectionOptions.State.always_compare_med:type_name -> ywrapper.BoolValue
	598,  // 213: openconfig.Bgp.Global.AfiSafis.AfiSafi.RouteSelectionOptions.State.enable_aigp:type_name -> ywrapper.BoolValue
	598,  // 214: openconfig.Bgp.Global.AfiSafis.AfiSafi.RouteSelectionOptions.State.external_compare_router_id:type_name -> ywrapper.BoolValue
	598,  // 215: openconfig.Bgp.Global.AfiSafis.AfiSafi.RouteSelectionOptions.State.ignore_as_path_length:type_name -> ywrapper.BoolValue
	598,  // 216: openconfig.Bgp.Global.AfiSafis.AfiSafi.RouteSelectionOptions.State.ignore_next_hop_igp_metric:type_name -> ywrapper.BoolValue
	80,   // 217: openconfig.Bgp.Global.AfiSafis.AfiSafi.SrtePolicyIpv4.PrefixLimit.config:type_name -> openconfig.Bgp.Global.AfiSafis.AfiSafi.SrtePolicyIpv4.PrefixLimit.Config
	81,   // 218: openconfig.Bgp.Global.AfiSafis.AfiSafi.SrtePolicyIpv4.PrefixLimit.state:type_name -> openconfig.Bgp.Global.AfiSafis.AfiSafi.SrtePolicyIpv4.PrefixLimit.State
	595,  // 219: openconfig.Bgp.Global.AfiSafis.AfiSafi.SrtePolicyIpv4.PrefixLimit.Config.max_prefixes:type_name -> ywrapper.UintValue
	598,  // 220: openconfig.Bgp.Global.AfiSafis.AfiSafi.SrtePolicyIpv4.PrefixLimit.Config.prevent_teardown:type_name -> ywrapper.BoolValue
	599,  // 221: openconfig.Bgp.Global.AfiSafis.AfiSafi.SrtePolicyIpv4.PrefixLimit.Config.restart_timer:type_name -> ywrapper.Decimal64Value
	595,  // 222: openconfig.Bgp.Global.AfiSafis.AfiSafi.SrtePolicyIpv4.PrefixLimit.Config.warning_threshold_pct:type_name -> ywrapper.UintValue
	595,  // 223: openconfig.Bgp.Global.AfiSafis.AfiSafi.SrtePolicyIpv4.PrefixLimit.State.max_prefixes:type_name -> ywrapper.UintValue
	598,  // 224: openconfig.Bgp.Global.AfiSafis.AfiSafi.SrtePolicyIpv4.PrefixLimit.State.prevent_teardown:type_name -> ywrapper.BoolValue
	599,  // 225: openconfig.Bgp.Global.AfiSafis.AfiSafi.SrtePolicyIpv4.PrefixLimit.State.restart_timer:type_name -> ywrapper.Decimal64Value
	595,  // 226: openconfig.Bgp.Global.AfiSafis.AfiSafi.SrtePolicyIpv4.PrefixLimit.State.warning_threshold_pct:type_name -> ywrapper.UintValue
	83,   // 227: openconfig.Bgp.Global.AfiSafis.AfiSafi.SrtePolicyIpv6.PrefixLimit.config:type_name -> openconfig.Bgp.Global.AfiSafis.AfiSafi.SrtePolicyIpv6.PrefixLimit.Config
	84,   // 228: openconfig.Bgp.Global.AfiSafis.AfiSafi.SrtePolicyIpv6.PrefixLimit.state:type_name -> openconfig.Bgp.Global.AfiSafis.AfiSafi.SrtePolicyIpv6.PrefixLimit.State
	595,  // 229: openconfig.Bgp.Global.AfiSafis.AfiSafi.SrtePolicyIpv6.PrefixLimit.Config.max_prefixes:type_name -> ywrapper.UintValue
	598,  // 230: openconfig.Bgp.Global.AfiSafis.AfiSafi.SrtePolicyIpv6.PrefixLimit.Config.prevent_teardown:type_name -> ywrapper.BoolValue
	599,  // 231: openconfig.Bgp.Global.AfiSafis.AfiSafi.SrtePolicyIpv6.PrefixLimit.Config.restart_timer:type_name -> ywrapper.Decimal64Value
	595,  // 232: openconfig.Bgp.Global.AfiSafis.AfiSafi.SrtePolicyIpv6.PrefixLimit.Config.warning_threshold_pct:type_name -> ywrapper.UintValue
	595,  // 233: openconfig.Bgp.Global.AfiSafis.AfiSafi.SrtePolicyIpv6.PrefixLimit.State.max_prefixes:type_name -> ywrapper.UintValue
	598,  // 234: openconfig.Bgp.Global.AfiSafis.AfiSafi.SrtePolicyIpv6.PrefixLimit.State.prevent_teardown:type_name -> ywrapper.BoolValue
	599,  // 235: openconfig.Bgp.Global.AfiSafis.AfiSafi.SrtePolicyIpv6.PrefixLimit.State.restart_timer:type_name -> ywrapper.Decimal64Value
	595,  // 236: openconfig.Bgp.Global.AfiSafis.AfiSafi.SrtePolicyIpv6.PrefixLimit.State.warning_threshold_pct:type_name -> ywrapper.UintValue
	598,  // 237: openconfig.Bgp.Global.AfiSafis.AfiSafi.UseMultiplePaths.Config.enabled:type_name -> ywrapper.BoolValue
	89,   // 238: openconfig.Bgp.Global.AfiSafis.AfiSafi.UseMultiplePaths.Ebgp.config:type_name -> openconfig.Bgp.Global.AfiSafis.AfiSafi.UseMultiplePaths.Ebgp.Config
	90,   // 239: openconfig.Bgp.Global.AfiSafis.AfiSafi.UseMultiplePaths.Ebgp.state:type_name -> openconfig.Bgp.Global.AfiSafis.AfiSafi.UseMultiplePaths.Ebgp.State
	91,   // 240: openconfig.Bgp.Global.AfiSafis.AfiSafi.UseMultiplePaths.Ibgp.config:type_name -> openconfig.Bgp.Global.AfiSafis.AfiSafi.UseMultiplePaths.Ibgp.Config
	92,   // 241: openconfig.Bgp.Global.AfiSafis.AfiSafi.UseMultiplePaths.Ibgp.state:type_name -> openconfig.Bgp.Global.AfiSafis.AfiSafi.UseMultiplePaths.Ibgp.State
	598,  // 242: openconfig.Bgp.Global.AfiSafis.AfiSafi.UseMultiplePaths.State.enabled:type_name -> ywrapper.BoolValue
	598,  // 243: openconfig.Bgp.Global.AfiSafis.AfiSafi.UseMultiplePaths.Ebgp.Config.allow_multiple_as:type_name -> ywrapper.BoolValue
	595,  // 244: openconfig.Bgp.Global.AfiSafis.AfiSafi.UseMultiplePaths.Ebgp.Config.maximum_paths:type_name -> ywrapper.UintValue
	598,  // 245: openconfig.Bgp.Global.AfiSafis.AfiSafi.UseMultiplePaths.Ebgp.State.allow_multiple_as:type_name -> ywrapper.BoolValue
	595,  // 246: openconfig.Bgp.Global.AfiSafis.AfiSafi.UseMultiplePaths.Ebgp.State.maximum_paths:type_name -> ywrapper.UintValue
	595,  // 247: openconfig.Bgp.Global.AfiSafis.AfiSafi.UseMultiplePaths.Ibgp.Config.maximum_paths:type_name -> ywrapper.UintValue
	595,  // 248: openconfig.Bgp.Global.AfiSafis.AfiSafi.UseMultiplePaths.Ibgp.State.maximum_paths:type_name -> ywrapper.UintValue
	595,  // 249: openconfig.Bgp.Global.Confederation.Config.identifier:type_name -> ywrapper.UintValue
	595,  // 250: openconfig.Bgp.Global.Confederation.Config.member_as:type_name -> ywrapper.UintValue
	595,  // 251: openconfig.Bgp.Global.Confederation.State.identifier:type_name -> ywrapper.UintValue
	595,  // 252: openconfig.Bgp.Global.Confederation.State.member_as:type_name -> ywrapper.UintValue
	595,  // 253: openconfig.Bgp.Global.DefaultRouteDistance.Config.external_route_distance:type_name -> ywrapper.UintValue
	595,  // 254: openconfig.Bgp.Global.DefaultRouteDistance.Config.internal_route_distance:type_name -> ywrapper.UintValue
	595,  // 255: openconfig.Bgp.Global.DefaultRouteDistance.State.external_route_distance:type_name -> ywrapper.UintValue
	595,  // 256: openconfig.Bgp.Global.DefaultRouteDistance.State.internal_route_distance:type_name -> ywrapper.UintValue
	99,   // 257: openconfig.Bgp.Global.DynamicNeighborPrefixes.DynamicNeighborPrefix.config:type_name -> openconfig.Bgp.Global.DynamicNeighborPrefixes.DynamicNeighborPrefix.Config
	100,  // 258: openconfig.Bgp.Global.DynamicNeighborPrefixes.DynamicNeighborPrefix.state:type_name -> openconfig.Bgp.Global.DynamicNeighborPrefixes.DynamicNeighborPrefix.State
	97,   // 259: openconfig.Bgp.Global.DynamicNeighborPrefixes.DynamicNeighborPrefixKey.dynamic_neighbor_prefix:type_name -> openconfig.Bgp.Global.DynamicNeighborPrefixes.DynamicNeighborPrefix
	596,  // 260: openconfig.Bgp.Global.DynamicNeighborPrefixes.DynamicNeighborPrefix.Config.peer_group:type_name -> ywrapper.StringValue
	596,  // 261: openconfig.Bgp.Global.DynamicNeighborPrefixes.DynamicNeighborPrefix.Config.prefix:type_name -> ywrapper.StringValue
	596,  // 262: openconfig.Bgp.Global.DynamicNeighborPrefixes.DynamicNeighborPrefix.State.peer_group:type_name -> ywrapper.StringValue
	596,  // 263: openconfig.Bgp.Global.DynamicNeighborPrefixes.DynamicNeighborPrefix.State.prefix:type_name -> ywrapper.StringValue
	598,  // 264: openconfig.Bgp.Global.GracefulRestart.Config.enabled:type_name -> ywrapper.BoolValue
	598,  // 265: openconfig.Bgp.Global.GracefulRestart.Config.helper_only:type_name -> ywrapper.BoolValue
	595,  // 266: openconfig.Bgp.Global.GracefulRestart.Config.restart_time:type_name -> ywrapper.UintValue
	599,  // 267: openconfig.Bgp.Global.GracefulRestart.Config.stale_routes_time:type_name -> ywrapper.Decimal64Value
	598,  // 268: openconfig.Bgp.Global.GracefulRestart.State.enabled:type_name -> ywrapper.BoolValue
	598,  // 269: openconfig.Bgp.Global.GracefulRestart.State.helper_only:type_name -> ywrapper.BoolValue
	595,  // 270: openconfig.Bgp.Global.GracefulRestart.State.restart_time:type_name -> ywrapper.UintValue
	599,  // 271: openconfig.Bgp.Global.GracefulRestart.State.stale_routes_time:type_name -> ywrapper.Decimal64Value
	598,  // 272: openconfig.Bgp.Global.RouteSelectionOptions.Config.advertise_inactive_routes:type_name -> ywrapper.BoolValue
	598,  // 273: openconfig.Bgp.Global.RouteSelectionOptions.Config.always_compare_med:type_name -> ywrapper.BoolValue
	598,  // 274: openconfig.Bgp.Global.RouteSelectionOptions.Config.enable_aigp:type_name -> ywrapper.BoolValue
	598,  // 275: openconfig.Bgp.Global.RouteSelectionOptions.Config.external_compare_router_id:type_name -> ywrapper.BoolValue
	598,  // 276: openconfig.Bgp.Global.RouteSelectionOptions.Config.ignore_as_path_length:type_name -> ywrapper.BoolValue
	598,  // 277: openconfig.Bgp.Global.RouteSelectionOptions.Config.ignore_next_hop_igp_metric:type_name -> ywrapper.BoolValue
	598,  // 278: openconfig.Bgp.Global.RouteSelectionOptions.State.advertise_inactive_routes:type_name -> ywrapper.BoolValue
	598,  // 279: openconfig.Bgp.Global.RouteSelectionOptions.State.always_compare_med:type_name -> ywrapper.BoolValue
	598,  // 280: openconfig.Bgp.Global.RouteSelectionOptions.State.enable_aigp:type_name -> ywrapper.BoolValue
	598,  // 281: openconfig.Bgp.Global.RouteSelectionOptions.State.external_compare_router_id:type_name -> ywrapper.BoolValue
	598,  // 282: openconfig.Bgp.Global.RouteSelectionOptions.State.ignore_as_path_length:type_name -> ywrapper.BoolValue
	598,  // 283: openconfig.Bgp.Global.RouteSelectionOptions.State.ignore_next_hop_igp_metric:type_name -> ywrapper.BoolValue
	598,  // 284: openconfig.Bgp.Global.UseMultiplePaths.Config.enabled:type_name -> ywrapper.BoolValue
	109,  // 285: openconfig.Bgp.Global.UseMultiplePaths.Ebgp.config:type_name -> openconfig.Bgp.Global.UseMultiplePaths.Ebgp.Config
	110,  // 286: openconfig.Bgp.Global.UseMultiplePaths.Ebgp.state:type_name -> openconfig.Bgp.Global.UseMultiplePaths.Ebgp.State
	111,  // 287: openconfig.Bgp.Global.UseMultiplePaths.Ibgp.config:type_name -> openconfig.Bgp.Global.UseMultiplePaths.Ibgp.Config
	112,  // 288: openconfig.Bgp.Global.UseMultiplePaths.Ibgp.state:type_name -> openconfig.Bgp.Global.UseMultiplePaths.Ibgp.State
	598,  // 289: openconfig.Bgp.Global.UseMultiplePaths.State.enabled:type_name -> ywrapper.BoolValue
	598,  // 290: openconfig.Bgp.Global.UseMultiplePaths.Ebgp.Config.allow_multiple_as:type_name -> ywrapper.BoolValue
	595,  // 291: openconfig.Bgp.Global.UseMultiplePaths.Ebgp.Config.maximum_paths:type_name -> ywrapper.UintValue
	598,  // 292: openconfig.Bgp.Global.UseMultiplePaths.Ebgp.State.allow_multiple_as:type_name -> ywrapper.BoolValue
	595,  // 293: openconfig.Bgp.Global.UseMultiplePaths.Ebgp.State.maximum_paths:type_name -> ywrapper.UintValue
	595,  // 294: openconfig.Bgp.Global.UseMultiplePaths.Ibgp.Config.maximum_paths:type_name -> ywrapper.UintValue
	595,  // 295: openconfig.Bgp.Global.UseMultiplePaths.Ibgp.State.maximum_paths:type_name -> ywrapper.UintValue
	115,  // 296: openconfig.Bgp.Neighbors.Neighbor.afi_safis:type_name -> openconfig.Bgp.Neighbors.Neighbor.AfiSafis
	116,  // 297: openconfig.Bgp.Neighbors.Neighbor.apply_policy:type_name -> openconfig.Bgp.Neighbors.Neighbor.ApplyPolicy
	117,  // 298: openconfig.Bgp.Neighbors.Neighbor.as_path_options:type_name -> openconfig.Bgp.Neighbors.Neighbor.AsPathOptions
	118,  // 299: openconfig.Bgp.Neighbors.Neighbor.config:type_name -> openconfig.Bgp.Neighbors.Neighbor.Config
	119,  // 300: openconfig.Bgp.Neighbors.Neighbor.ebgp_multihop:type_name -> openconfig.Bgp.Neighbors.Neighbor.EbgpMultihop
	120,  // 301: openconfig.Bgp.Neighbors.Neighbor.error_handling:type_name -> openconfig.Bgp.Neighbors.Neighbor.ErrorHandling
	121,  // 302: openconfig.Bgp.Neighbors.Neighbor.graceful_restart:type_name -> openconfig.Bgp.Neighbors.Neighbor.GracefulRestart
	122,  // 303: openconfig.Bgp.Neighbors.Neighbor.logging_options:type_name -> openconfig.Bgp.Neighbors.Neighbor.LoggingOptions
	123,  // 304: openconfig.Bgp.Neighbors.Neighbor.route_reflector:type_name -> openconfig.Bgp.Neighbors.Neighbor.RouteReflector
	124,  // 305: openconfig.Bgp.Neighbors.Neighbor.state:type_name -> openconfig.Bgp.Neighbors.Neighbor.State
	125,  // 306: openconfig.Bgp.Neighbors.Neighbor.timers:type_name -> openconfig.Bgp.Neighbors.Neighbor.Timers
	126,  // 307: openconfig.Bgp.Neighbors.Neighbor.transport:type_name -> openconfig.Bgp.Neighbors.Neighbor.Transport
	127,  // 308: openconfig.Bgp.Neighbors.Neighbor.use_multiple_paths:type_name -> openconfig.Bgp.Neighbors.Neighbor.UseMultiplePaths
	113,  // 309: openconfig.Bgp.Neighbors.NeighborKey.neighbor:type_name -> openconfig.Bgp.Neighbors.Neighbor
	129,  // 310: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.afi_safi:type_name -> openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafiKey
	200,  // 311: openconfig.Bgp.Neighbors.Neighbor.ApplyPolicy.config:type_name -> openconfig.Bgp.Neighbors.Neighbor.ApplyPolicy.Config
	201,  // 312: openconfig.Bgp.Neighbors.Neighbor.ApplyPolicy.state:type_name -> openconfig.Bgp.Neighbors.Neighbor.ApplyPolicy.State
	202,  // 313: openconfig.Bgp.Neighbors.Neighbor.AsPathOptions.config:type_name -> openconfig.Bgp.Neighbors.Neighbor.AsPathOptions.Config
	203,  // 314: openconfig.Bgp.Neighbors.Neighbor.AsPathOptions.state:type_name -> openconfig.Bgp.Neighbors.Neighbor.AsPathOptions.State
	596,  // 315: openconfig.Bgp.Neighbors.Neighbor.Config.auth_password:type_name -> ywrapper.StringValue
	596,  // 316: openconfig.Bgp.Neighbors.Neighbor.Config.description:type_name -> ywrapper.StringValue
	598,  // 317: openconfig.Bgp.Neighbors.Neighbor.Config.enabled:type_name -> ywrapper.BoolValue
	595,  // 318: openconfig.Bgp.Neighbors.Neighbor.Config.local_as:type_name -> ywrapper.UintValue
	596,  // 319: openconfig.Bgp.Neighbors.Neighbor.Config.neighbor_address:type_name -> ywrapper.StringValue
	595,  // 320: openconfig.Bgp.Neighbors.Neighbor.Config.peer_as:type_name -> ywrapper.UintValue
	596,  // 321: openconfig.Bgp.Neighbors.Neighbor.Config.peer_group:type_name -> ywrapper.StringValue
	600,  // 322: openconfig.Bgp.Neighbors.Neighbor.Config.peer_type:type_name -> openconfig.OpenconfigBgpPeerType
	601,  // 323: openconfig.Bgp.Neighbors.Neighbor.Config.remove_private_as:type_name -> openconfig.OpenconfigBgpRemovePrivateAsOption
	598,  // 324: openconfig.Bgp.Neighbors.Neighbor.Config.route_flap_damping:type_name -> ywrapper.BoolValue
	602,  // 325: openconfig.Bgp.Neighbors.Neighbor.Config.send_community:type_name -> openconfig.OpenconfigBgpCommunityType
	204,  // 326: openconfig.Bgp.Neighbors.Neighbor.EbgpMultihop.config:type_name -> openconfig.Bgp.Neighbors.Neighbor.EbgpMultihop.Config
	205,  // 327: openconfig.Bgp.Neighbors.Neighbor.EbgpMultihop.state:type_name -> openconfig.Bgp.Neighbors.Neighbor.EbgpMultihop.State
	206,  // 328: openconfig.Bgp.Neighbors.Neighbor.ErrorHandling.config:type_name -> openconfig.Bgp.Neighbors.Neighbor.ErrorHandling.Config
	207,  // 329: openconfig.Bgp.Neighbors.Neighbor.ErrorHandling.state:type_name -> openconfig.Bgp.Neighbors.Neighbor.ErrorHandling.State
	208,  // 330: openconfig.Bgp.Neighbors.Neighbor.GracefulRestart.config:type_name -> openconfig.Bgp.Neighbors.Neighbor.GracefulRestart.Config
	209,  // 331: openconfig.Bgp.Neighbors.Neighbor.GracefulRestart.state:type_name -> openconfig.Bgp.Neighbors.Neighbor.GracefulRestart.State
	210,  // 332: openconfig.Bgp.Neighbors.Neighbor.LoggingOptions.config:type_name -> openconfig.Bgp.Neighbors.Neighbor.LoggingOptions.Config
	211,  // 333: openconfig.Bgp.Neighbors.Neighbor.LoggingOptions.state:type_name -> openconfig.Bgp.Neighbors.Neighbor.LoggingOptions.State
	212,  // 334: openconfig.Bgp.Neighbors.Neighbor.RouteReflector.config:type_name -> openconfig.Bgp.Neighbors.Neighbor.RouteReflector.Config
	213,  // 335: openconfig.Bgp.Neighbors.Neighbor.RouteReflector.state:type_name -> openconfig.Bgp.Neighbors.Neighbor.RouteReflector.State
	596,  // 336: openconfig.Bgp.Neighbors.Neighbor.State.auth_password:type_name -> ywrapper.StringValue
	596,  // 337: openconfig.Bgp.Neighbors.Neighbor.State.description:type_name -> ywrapper.StringValue
	598,  // 338: openconfig.Bgp.Neighbors.Neighbor.State.dynamically_configured:type_name -> ywrapper.BoolValue
	598,  // 339: openconfig.Bgp.Neighbors.Neighbor.State.enabled:type_name -> ywrapper.BoolValue
	595,  // 340: openconfig.Bgp.Neighbors.Neighbor.State.established_transitions:type_name -> ywrapper.UintValue
	595,  // 341: openconfig.Bgp.Neighbors.Neighbor.State.last_established:type_name -> ywrapper.UintValue
	595,  // 342: openconfig.Bgp.Neighbors.Neighbor.State.local_as:type_name -> ywrapper.UintValue
	214,  // 343: openconfig.Bgp.Neighbors.Neighbor.State.messages:type_name -> openconfig.Bgp.Neighbors.Neighbor.State.Messages
	596,  // 344: openconfig.Bgp.Neighbors.Neighbor.State.neighbor_address:type_name -> ywrapper.StringValue
	595,  // 345: openconfig.Bgp.Neighbors.Neighbor.State.peer_as:type_name -> ywrapper.UintValue
	596,  // 346: openconfig.Bgp.Neighbors.Neighbor.State.peer_group:type_name -> ywrapper.StringValue
	600,  // 347: openconfig.Bgp.Neighbors.Neighbor.State.peer_type:type_name -> openconfig.OpenconfigBgpPeerType
	215,  // 348: openconfig.Bgp.Neighbors.Neighbor.State.queues:type_name -> openconfig.Bgp.Neighbors.Neighbor.State.Queues
	601,  // 349: openconfig.Bgp.Neighbors.Neighbor.State.remove_private_as:type_name -> openconfig.OpenconfigBgpRemovePrivateAsOption
	598,  // 350: openconfig.Bgp.Neighbors.Neighbor.State.route_flap_damping:type_name -> ywrapper.BoolValue
	602,  // 351: openconfig.Bgp.Neighbors.Neighbor.State.send_community:type_name -> openconfig.OpenconfigBgpCommunityType
	1,    // 352: openconfig.Bgp.Neighbors.Neighbor.State.session_state:type_name -> openconfig.Bgp.Neighbors.Neighbor.State.SessionState
	603,  // 353: openconfig.Bgp.Neighbors.Neighbor.State.supported_capabilities:type_name -> openconfig.OpenconfigBgpTypesBGPCAPABILITY
	218,  // 354: openconfig.Bgp.Neighbors.Neighbor.Timers.config:type_name -> openconfig.Bgp.Neighbors.Neighbor.Timers.Config
	219,  // 355: openconfig.Bgp.Neighbors.Neighbor.Timers.state:type_name -> openconfig.Bgp.Neighbors.Neighbor.Timers.State
	220,  // 356: openconfig.Bgp.Neighbors.Neighbor.Transport.config:type_name -> openconfig.Bgp.Neighbors.Neighbor.Transport.Config
	221,  // 357: openconfig.Bgp.Neighbors.Neighbor.Transport.state:type_name -> openconfig.Bgp.Neighbors.Neighbor.Transport.State
	222,  // 358: openconfig.Bgp.Neighbors.Neighbor.UseMultiplePaths.config:type_name -> openconfig.Bgp.Neighbors.Neighbor.UseMultiplePaths.Config
	223,  // 359: openconfig.Bgp.Neighbors.Neighbor.UseMultiplePaths.ebgp:type_name -> openconfig.Bgp.Neighbors.Neighbor.UseMultiplePaths.Ebgp
	224,  // 360: openconfig.Bgp.Neighbors.Neighbor.UseMultiplePaths.state:type_name -> openconfig.Bgp.Neighbors.Neighbor.UseMultiplePaths.State
	130,  // 361: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.add_paths:type_name -> openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.AddPaths
	131,  // 362: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.apply_policy:type_name -> openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.ApplyPolicy
	132,  // 363: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.config:type_name -> openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Config
	133,  // 364: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.graceful_restart:type_name -> openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.GracefulRestart
	134,  // 365: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.ipv4_labeled_unicast:type_name -> openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv4LabeledUnicast
	135,  // 366: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.ipv4_unicast:type_name -> openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv4Unicast
	136,  // 367: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.ipv6_labeled_unicast:type_name -> openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv6LabeledUnicast
	137,  // 368: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.ipv6_unicast:type_name -> openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv6Unicast
	138,  // 369: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.l2vpn_evpn:type_name -> openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L2VpnEvpn
	139,  // 370: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.l2vpn_vpls:type_name -> openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L2VpnVpls
	140,  // 371: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.l3vpn_ipv4_multicast:type_name -> openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv4Multicast
	141,  // 372: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.l3vpn_ipv4_unicast:type_name -> openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv4Unicast
	142,  // 373: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.l3vpn_ipv6_multicast:type_name -> openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv6Multicast
	143,  // 374: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.l3vpn_ipv6_unicast:type_name -> openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv6Unicast
	144,  // 375: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.srte_policy_ipv4:type_name -> openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.SrtePolicyIpv4
	145,  // 376: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.srte_policy_ipv6:type_name -> openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.SrtePolicyIpv6
	146,  // 377: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.state:type_name -> openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.State
	147,  // 378: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.use_multiple_paths:type_name -> openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.UseMultiplePaths
	597,  // 379: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafiKey.afi_safi_name:type_name -> openconfig.OpenconfigBgpTypesAFISAFITYPE
	128,  // 380: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafiKey.afi_safi:type_name -> openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi
	148,  // 381: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.AddPaths.config:type_name -> openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.AddPaths.Config
	149,  // 382: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.AddPaths.state:type_name -> openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.AddPaths.State
	150,  // 383: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.ApplyPolicy.config:type_name -> openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.ApplyPolicy.Config
	151,  // 384: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.ApplyPolicy.state:type_name -> openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.ApplyPolicy.State
	597,  // 385: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Config.afi_safi_name:type_name -> openconfig.OpenconfigBgpTypesAFISAFITYPE
	598,  // 386: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Config.enabled:type_name -> ywrapper.BoolValue
	152,  // 387: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.GracefulRestart.config:type_name -> openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.GracefulRestart.Config
	153,  // 388: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.GracefulRestart.state:type_name -> openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.GracefulRestart.State
	154,  // 389: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv4LabeledUnicast.prefix_limit:type_name -> openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv4LabeledUnicast.PrefixLimit
	157,  // 390: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv4Unicast.config:type_name -> openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv4Unicast.Config
	158,  // 391: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv4Unicast.prefix_limit:type_name -> openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv4Unicast.PrefixLimit
	159,  // 392: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv4Unicast.state:type_name -> openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv4Unicast.State
	162,  // 393: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv6LabeledUnicast.prefix_limit:type_name -> openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv6LabeledUnicast.PrefixLimit
	165,  // 394: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv6Unicast.config:type_name -> openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv6Unicast.Config
	166,  // 395: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv6Unicast.prefix_limit:type_name -> openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv6Unicast.PrefixLimit
	167,  // 396: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv6Unicast.state:type_name -> openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv6Unicast.State
	170,  // 397: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L2VpnEvpn.prefix_limit:type_name -> openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L2VpnEvpn.PrefixLimit
	173,  // 398: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L2VpnVpls.prefix_limit:type_name -> openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L2VpnVpls.PrefixLimit
	176,  // 399: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv4Multicast.prefix_limit:type_name -> openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv4Multicast.PrefixLimit
	179,  // 400: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv4Unicast.prefix_limit:type_name -> openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv4Unicast.PrefixLimit
	182,  // 401: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv6Multicast.prefix_limit:type_name -> openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv6Multicast.PrefixLimit
	185,  // 402: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv6Unicast.prefix_limit:type_name -> openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv6Unicast.PrefixLimit
	188,  // 403: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.SrtePolicyIpv4.prefix_limit:type_name -> openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.SrtePolicyIpv4.PrefixLimit
	191,  // 404: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.SrtePolicyIpv6.prefix_limit:type_name -> openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.SrtePolicyIpv6.PrefixLimit
	598,  // 405: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.State.active:type_name -> ywrapper.BoolValue
	597,  // 406: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.State.afi_safi_name:type_name -> openconfig.OpenconfigBgpTypesAFISAFITYPE
	598,  // 407: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.State.enabled:type_name -> ywrapper.BoolValue
	194,  // 408: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.State.prefixes:type_name -> openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.State.Prefixes
	195,  // 409: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.UseMultiplePaths.config:type_name -> openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.UseMultiplePaths.Config
	196,  // 410: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.UseMultiplePaths.ebgp:type_name -> openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.UseMultiplePaths.Ebgp
	197,  // 411: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.UseMultiplePaths.state:type_name -> openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.UseMultiplePaths.State
	596,  // 412: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.AddPaths.Config.eligible_prefix_policy:type_name -> ywrapper.StringValue
	598,  // 413: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.AddPaths.Config.receive:type_name -> ywrapper.BoolValue
	598,  // 414: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.AddPaths.Config.send:type_name -> ywrapper.BoolValue
	595,  // 415: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.AddPaths.Config.send_max:type_name -> ywrapper.UintValue
	596,  // 416: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.AddPaths.State.eligible_prefix_policy:type_name -> ywrapper.StringValue
	598,  // 417: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.AddPaths.State.receive:type_name -> ywrapper.BoolValue
	598,  // 418: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.AddPaths.State.send:type_name -> ywrapper.BoolValue
	595,  // 419: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.AddPaths.State.send_max:type_name -> ywrapper.UintValue
	604,  // 420: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.ApplyPolicy.Config.default_export_policy:type_name -> openconfig.OpenconfigRoutingPolicyDefaultPolicyType
	604,  // 421: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.ApplyPolicy.Config.default_import_policy:type_name -> openconfig.OpenconfigRoutingPolicyDefaultPolicyType
	596,  // 422: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.ApplyPolicy.Config.export_policy:type_name -> ywrapper.StringValue
	596,  // 423: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.ApplyPolicy.Config.import_policy:type_name -> ywrapper.StringValue
	604,  // 424: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.ApplyPolicy.State.default_export_policy:type_name -> openconfig.OpenconfigRoutingPolicyDefaultPolicyType
	604,  // 425: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.ApplyPolicy.State.default_import_policy:type_name -> openconfig.OpenconfigRoutingPolicyDefaultPolicyType
	596,  // 426: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.ApplyPolicy.State.export_policy:type_name -> ywrapper.StringValue
	596,  // 427: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.ApplyPolicy.State.import_policy:type_name -> ywrapper.StringValue
	598,  // 428: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.GracefulRestart.Config.enabled:type_name -> ywrapper.BoolValue
	598,  // 429: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.GracefulRestart.State.advertised:type_name -> ywrapper.BoolValue
	598,  // 430: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.GracefulRestart.State.enabled:type_name -> ywrapper.BoolValue
	598,  // 431: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.GracefulRestart.State.received:type_name -> ywrapper.BoolValue
	155,  // 432: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv4LabeledUnicast.PrefixLimit.config:type_name -> openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv4LabeledUnicast.PrefixLimit.Config
	156,  // 433: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv4LabeledUnicast.PrefixLimit.state:type_name -> openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv4LabeledUnicast.PrefixLimit.State
	595,  // 434: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv4LabeledUnicast.PrefixLimit.Config.max_prefixes:type_name -> ywrapper.UintValue
	598,  // 435: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv4LabeledUnicast.PrefixLimit.Config.prevent_teardown:type_name -> ywrapper.BoolValue
	599,  // 436: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv4LabeledUnicast.PrefixLimit.Config.restart_timer:type_name -> ywrapper.Decimal64Value
	595,  // 437: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv4LabeledUnicast.PrefixLimit.Config.warning_threshold_pct:type_name -> ywrapper.UintValue
	595,  // 438: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv4LabeledUnicast.PrefixLimit.State.max_prefixes:type_name -> ywrapper.UintValue
	598,  // 439: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv4LabeledUnicast.PrefixLimit.State.prevent_teardown:type_name -> ywrapper.BoolValue
	599,  // 440: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv4LabeledUnicast.PrefixLimit.State.restart_timer:type_name -> ywrapper.Decimal64Value
	595,  // 441: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv4LabeledUnicast.PrefixLimit.State.warning_threshold_pct:type_name -> ywrapper.UintValue
	598,  // 442: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv4Unicast.Config.send_default_route:type_name -> ywrapper.BoolValue
	160,  // 443: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv4Unicast.PrefixLimit.config:type_name -> openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv4Unicast.PrefixLimit.Config
	161,  // 444: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv4Unicast.PrefixLimit.state:type_name -> openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv4Unicast.PrefixLimit.State
	598,  // 445: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv4Unicast.State.send_default_route:type_name -> ywrapper.BoolValue
	595,  // 446: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv4Unicast.PrefixLimit.Config.max_prefixes:type_name -> ywrapper.UintValue
	598,  // 447: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv4Unicast.PrefixLimit.Config.prevent_teardown:type_name -> ywrapper.BoolValue
	599,  // 448: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv4Unicast.PrefixLimit.Config.restart_timer:type_name -> ywrapper.Decimal64Value
	595,  // 449: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv4Unicast.PrefixLimit.Config.warning_threshold_pct:type_name -> ywrapper.UintValue
	595,  // 450: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv4Unicast.PrefixLimit.State.max_prefixes:type_name -> ywrapper.UintValue
	598,  // 451: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv4Unicast.PrefixLimit.State.prevent_teardown:type_name -> ywrapper.BoolValue
	599,  // 452: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv4Unicast.PrefixLimit.State.restart_timer:type_name -> ywrapper.Decimal64Value
	595,  // 453: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv4Unicast.PrefixLimit.State.warning_threshold_pct:type_name -> ywrapper.UintValue
	163,  // 454: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv6LabeledUnicast.PrefixLimit.config:type_name -> openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv6LabeledUnicast.PrefixLimit.Config
	164,  // 455: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv6LabeledUnicast.PrefixLimit.state:type_name -> openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv6LabeledUnicast.PrefixLimit.State
	595,  // 456: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv6LabeledUnicast.PrefixLimit.Config.max_prefixes:type_name -> ywrapper.UintValue
	598,  // 457: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv6LabeledUnicast.PrefixLimit.Config.prevent_teardown:type_name -> ywrapper.BoolValue
	599,  // 458: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv6LabeledUnicast.PrefixLimit.Config.restart_timer:type_name -> ywrapper.Decimal64Value
	595,  // 459: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv6LabeledUnicast.PrefixLimit.Config.warning_threshold_pct:type_name -> ywrapper.UintValue
	595,  // 460: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv6LabeledUnicast.PrefixLimit.State.max_prefixes:type_name -> ywrapper.UintValue
	598,  // 461: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv6LabeledUnicast.PrefixLimit.State.prevent_teardown:type_name -> ywrapper.BoolValue
	599,  // 462: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv6LabeledUnicast.PrefixLimit.State.restart_timer:type_name -> ywrapper.Decimal64Value
	595,  // 463: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv6LabeledUnicast.PrefixLimit.State.warning_threshold_pct:type_name -> ywrapper.UintValue
	598,  // 464: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv6Unicast.Config.send_default_route:type_name -> ywrapper.BoolValue
	168,  // 465: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv6Unicast.PrefixLimit.config:type_name -> openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv6Unicast.PrefixLimit.Config
	169,  // 466: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv6Unicast.PrefixLimit.state:type_name -> openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv6Unicast.PrefixLimit.State
	598,  // 467: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv6Unicast.State.send_default_route:type_name -> ywrapper.BoolValue
	595,  // 468: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv6Unicast.PrefixLimit.Config.max_prefixes:type_name -> ywrapper.UintValue
	598,  // 469: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv6Unicast.PrefixLimit.Config.prevent_teardown:type_name -> ywrapper.BoolValue
	599,  // 470: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv6Unicast.PrefixLimit.Config.restart_timer:type_name -> ywrapper.Decimal64Value
	595,  // 471: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv6Unicast.PrefixLimit.Config.warning_threshold_pct:type_name -> ywrapper.UintValue
	595,  // 472: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv6Unicast.PrefixLimit.State.max_prefixes:type_name -> ywrapper.UintValue
	598,  // 473: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv6Unicast.PrefixLimit.State.prevent_teardown:type_name -> ywrapper.BoolValue
	599,  // 474: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv6Unicast.PrefixLimit.State.restart_timer:type_name -> ywrapper.Decimal64Value
	595,  // 475: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.Ipv6Unicast.PrefixLimit.State.warning_threshold_pct:type_name -> ywrapper.UintValue
	171,  // 476: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L2VpnEvpn.PrefixLimit.config:type_name -> openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L2VpnEvpn.PrefixLimit.Config
	172,  // 477: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L2VpnEvpn.PrefixLimit.state:type_name -> openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L2VpnEvpn.PrefixLimit.State
	595,  // 478: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L2VpnEvpn.PrefixLimit.Config.max_prefixes:type_name -> ywrapper.UintValue
	598,  // 479: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L2VpnEvpn.PrefixLimit.Config.prevent_teardown:type_name -> ywrapper.BoolValue
	599,  // 480: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L2VpnEvpn.PrefixLimit.Config.restart_timer:type_name -> ywrapper.Decimal64Value
	595,  // 481: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L2VpnEvpn.PrefixLimit.Config.warning_threshold_pct:type_name -> ywrapper.UintValue
	595,  // 482: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L2VpnEvpn.PrefixLimit.State.max_prefixes:type_name -> ywrapper.UintValue
	598,  // 483: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L2VpnEvpn.PrefixLimit.State.prevent_teardown:type_name -> ywrapper.BoolValue
	599,  // 484: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L2VpnEvpn.PrefixLimit.State.restart_timer:type_name -> ywrapper.Decimal64Value
	595,  // 485: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L2VpnEvpn.PrefixLimit.State.warning_threshold_pct:type_name -> ywrapper.UintValue
	174,  // 486: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L2VpnVpls.PrefixLimit.config:type_name -> openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L2VpnVpls.PrefixLimit.Config
	175,  // 487: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L2VpnVpls.PrefixLimit.state:type_name -> openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L2VpnVpls.PrefixLimit.State
	595,  // 488: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L2VpnVpls.PrefixLimit.Config.max_prefixes:type_name -> ywrapper.UintValue
	598,  // 489: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L2VpnVpls.PrefixLimit.Config.prevent_teardown:type_name -> ywrapper.BoolValue
	599,  // 490: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L2VpnVpls.PrefixLimit.Config.restart_timer:type_name -> ywrapper.Decimal64Value
	595,  // 491: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L2VpnVpls.PrefixLimit.Config.warning_threshold_pct:type_name -> ywrapper.UintValue
	595,  // 492: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L2VpnVpls.PrefixLimit.State.max_prefixes:type_name -> ywrapper.UintValue
	598,  // 493: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L2VpnVpls.PrefixLimit.State.prevent_teardown:type_name -> ywrapper.BoolValue
	599,  // 494: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L2VpnVpls.PrefixLimit.State.restart_timer:type_name -> ywrapper.Decimal64Value
	595,  // 495: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L2VpnVpls.PrefixLimit.State.warning_threshold_pct:type_name -> ywrapper.UintValue
	177,  // 496: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv4Multicast.PrefixLimit.config:type_name -> openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv4Multicast.PrefixLimit.Config
	178,  // 497: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv4Multicast.PrefixLimit.state:type_name -> openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv4Multicast.PrefixLimit.State
	595,  // 498: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv4Multicast.PrefixLimit.Config.max_prefixes:type_name -> ywrapper.UintValue
	598,  // 499: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv4Multicast.PrefixLimit.Config.prevent_teardown:type_name -> ywrapper.BoolValue
	599,  // 500: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv4Multicast.PrefixLimit.Config.restart_timer:type_name -> ywrapper.Decimal64Value
	595,  // 501: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv4Multicast.PrefixLimit.Config.warning_threshold_pct:type_name -> ywrapper.UintValue
	595,  // 502: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv4Multicast.PrefixLimit.State.max_prefixes:type_name -> ywrapper.UintValue
	598,  // 503: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv4Multicast.PrefixLimit.State.prevent_teardown:type_name -> ywrapper.BoolValue
	599,  // 504: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv4Multicast.PrefixLimit.State.restart_timer:type_name -> ywrapper.Decimal64Value
	595,  // 505: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv4Multicast.PrefixLimit.State.warning_threshold_pct:type_name -> ywrapper.UintValue
	180,  // 506: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv4Unicast.PrefixLimit.config:type_name -> openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv4Unicast.PrefixLimit.Config
	181,  // 507: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv4Unicast.PrefixLimit.state:type_name -> openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv4Unicast.PrefixLimit.State
	595,  // 508: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv4Unicast.PrefixLimit.Config.max_prefixes:type_name -> ywrapper.UintValue
	598,  // 509: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv4Unicast.PrefixLimit.Config.prevent_teardown:type_name -> ywrapper.BoolValue
	599,  // 510: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv4Unicast.PrefixLimit.Config.restart_timer:type_name -> ywrapper.Decimal64Value
	595,  // 511: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv4Unicast.PrefixLimit.Config.warning_threshold_pct:type_name -> ywrapper.UintValue
	595,  // 512: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv4Unicast.PrefixLimit.State.max_prefixes:type_name -> ywrapper.UintValue
	598,  // 513: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv4Unicast.PrefixLimit.State.prevent_teardown:type_name -> ywrapper.BoolValue
	599,  // 514: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv4Unicast.PrefixLimit.State.restart_timer:type_name -> ywrapper.Decimal64Value
	595,  // 515: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv4Unicast.PrefixLimit.State.warning_threshold_pct:type_name -> ywrapper.UintValue
	183,  // 516: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv6Multicast.PrefixLimit.config:type_name -> openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv6Multicast.PrefixLimit.Config
	184,  // 517: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv6Multicast.PrefixLimit.state:type_name -> openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv6Multicast.PrefixLimit.State
	595,  // 518: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv6Multicast.PrefixLimit.Config.max_prefixes:type_name -> ywrapper.UintValue
	598,  // 519: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv6Multicast.PrefixLimit.Config.prevent_teardown:type_name -> ywrapper.BoolValue
	599,  // 520: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv6Multicast.PrefixLimit.Config.restart_timer:type_name -> ywrapper.Decimal64Value
	595,  // 521: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv6Multicast.PrefixLimit.Config.warning_threshold_pct:type_name -> ywrapper.UintValue
	595,  // 522: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv6Multicast.PrefixLimit.State.max_prefixes:type_name -> ywrapper.UintValue
	598,  // 523: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv6Multicast.PrefixLimit.State.prevent_teardown:type_name -> ywrapper.BoolValue
	599,  // 524: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv6Multicast.PrefixLimit.State.restart_timer:type_name -> ywrapper.Decimal64Value
	595,  // 525: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv6Multicast.PrefixLimit.State.warning_threshold_pct:type_name -> ywrapper.UintValue
	186,  // 526: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv6Unicast.PrefixLimit.config:type_name -> openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv6Unicast.PrefixLimit.Config
	187,  // 527: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv6Unicast.PrefixLimit.state:type_name -> openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv6Unicast.PrefixLimit.State
	595,  // 528: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv6Unicast.PrefixLimit.Config.max_prefixes:type_name -> ywrapper.UintValue
	598,  // 529: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv6Unicast.PrefixLimit.Config.prevent_teardown:type_name -> ywrapper.BoolValue
	599,  // 530: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv6Unicast.PrefixLimit.Config.restart_timer:type_name -> ywrapper.Decimal64Value
	595,  // 531: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv6Unicast.PrefixLimit.Config.warning_threshold_pct:type_name -> ywrapper.UintValue
	595,  // 532: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv6Unicast.PrefixLimit.State.max_prefixes:type_name -> ywrapper.UintValue
	598,  // 533: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv6Unicast.PrefixLimit.State.prevent_teardown:type_name -> ywrapper.BoolValue
	599,  // 534: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv6Unicast.PrefixLimit.State.restart_timer:type_name -> ywrapper.Decimal64Value
	595,  // 535: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.L3VpnIpv6Unicast.PrefixLimit.State.warning_threshold_pct:type_name -> ywrapper.UintValue
	189,  // 536: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.SrtePolicyIpv4.PrefixLimit.config:type_name -> openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.SrtePolicyIpv4.PrefixLimit.Config
	190,  // 537: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.SrtePolicyIpv4.PrefixLimit.state:type_name -> openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.SrtePolicyIpv4.PrefixLimit.State
	595,  // 538: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.SrtePolicyIpv4.PrefixLimit.Config.max_prefixes:type_name -> ywrapper.UintValue
	598,  // 539: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.SrtePolicyIpv4.PrefixLimit.Config.prevent_teardown:type_name -> ywrapper.BoolValue
	599,  // 540: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.SrtePolicyIpv4.PrefixLimit.Config.restart_timer:type_name -> ywrapper.Decimal64Value
	595,  // 541: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.SrtePolicyIpv4.PrefixLimit.Config.warning_threshold_pct:type_name -> ywrapper.UintValue
	595,  // 542: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.SrtePolicyIpv4.PrefixLimit.State.max_prefixes:type_name -> ywrapper.UintValue
	598,  // 543: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.SrtePolicyIpv4.PrefixLimit.State.prevent_teardown:type_name -> ywrapper.BoolValue
	599,  // 544: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.SrtePolicyIpv4.PrefixLimit.State.restart_timer:type_name -> ywrapper.Decimal64Value
	595,  // 545: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.SrtePolicyIpv4.PrefixLimit.State.warning_threshold_pct:type_name -> ywrapper.UintValue
	192,  // 546: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.SrtePolicyIpv6.PrefixLimit.config:type_name -> openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.SrtePolicyIpv6.PrefixLimit.Config
	193,  // 547: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.SrtePolicyIpv6.PrefixLimit.state:type_name -> openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.SrtePolicyIpv6.PrefixLimit.State
	595,  // 548: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.SrtePolicyIpv6.PrefixLimit.Config.max_prefixes:type_name -> ywrapper.UintValue
	598,  // 549: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.SrtePolicyIpv6.PrefixLimit.Config.prevent_teardown:type_name -> ywrapper.BoolValue
	599,  // 550: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.SrtePolicyIpv6.PrefixLimit.Config.restart_timer:type_name -> ywrapper.Decimal64Value
	595,  // 551: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.SrtePolicyIpv6.PrefixLimit.Config.warning_threshold_pct:type_name -> ywrapper.UintValue
	595,  // 552: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.SrtePolicyIpv6.PrefixLimit.State.max_prefixes:type_name -> ywrapper.UintValue
	598,  // 553: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.SrtePolicyIpv6.PrefixLimit.State.prevent_teardown:type_name -> ywrapper.BoolValue
	599,  // 554: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.SrtePolicyIpv6.PrefixLimit.State.restart_timer:type_name -> ywrapper.Decimal64Value
	595,  // 555: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.SrtePolicyIpv6.PrefixLimit.State.warning_threshold_pct:type_name -> ywrapper.UintValue
	595,  // 556: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.State.Prefixes.installed:type_name -> ywrapper.UintValue
	595,  // 557: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.State.Prefixes.received:type_name -> ywrapper.UintValue
	595,  // 558: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.State.Prefixes.received_pre_policy:type_name -> ywrapper.UintValue
	595,  // 559: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.State.Prefixes.sent:type_name -> ywrapper.UintValue
	598,  // 560: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.UseMultiplePaths.Config.enabled:type_name -> ywrapper.BoolValue
	198,  // 561: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.UseMultiplePaths.Ebgp.config:type_name -> openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.UseMultiplePaths.Ebgp.Config
	199,  // 562: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.UseMultiplePaths.Ebgp.state:type_name -> openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.UseMultiplePaths.Ebgp.State
	598,  // 563: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.UseMultiplePaths.State.enabled:type_name -> ywrapper.BoolValue
	598,  // 564: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.UseMultiplePaths.Ebgp.Config.allow_multiple_as:type_name -> ywrapper.BoolValue
	598,  // 565: openconfig.Bgp.Neighbors.Neighbor.AfiSafis.AfiSafi.UseMultiplePaths.Ebgp.State.allow_multiple_as:type_name -> ywrapper.BoolValue
	604,  // 566: openconfig.Bgp.Neighbors.Neighbor.ApplyPolicy.Config.default_export_policy:type_name -> openconfig.OpenconfigRoutingPolicyDefaultPolicyType
	604,  // 567: openconfig.Bgp.Neighbors.Neighbor.ApplyPolicy.Config.default_import_policy:type_name -> openconfig.OpenconfigRoutingPolicyDefaultPolicyType
	596,  // 568: openconfig.Bgp.Neighbors.Neighbor.ApplyPolicy.Config.export_policy:type_name -> ywrapper.StringValue
	596,  // 569: openconfig.Bgp.Neighbors.Neighbor.ApplyPolicy.Config.import_policy:type_name -> ywrapper.StringValue
	604,  // 570: openconfig.Bgp.Neighbors.Neighbor.ApplyPolicy.State.default_export_policy:type_name -> openconfig.OpenconfigRoutingPolicyDefaultPolicyType
	604,  // 571: openconfig.Bgp.Neighbors.Neighbor.ApplyPolicy.State.default_import_policy:type_name -> openconfig.OpenconfigRoutingPolicyDefaultPolicyType
	596,  // 572: openconfig.Bgp.Neighbors.Neighbor.ApplyPolicy.State.export_policy:type_name -> ywrapper.StringValue
	596,  // 573: openconfig.Bgp.Neighbors.Neighbor.ApplyPolicy.State.import_policy:type_name -> ywrapper.StringValue
	595,  // 574: openconfig.Bgp.Neighbors.Neighbor.AsPathOptions.Config.allow_own_as:type_name -> ywrapper.UintValue
	598,  // 575: openconfig.Bgp.Neighbors.Neighbor.AsPathOptions.Config.disable_peer_as_filter:type_name -> ywrapper.BoolValue
	598,  // 576: openconfig.Bgp.Neighbors.Neighbor.AsPathOptions.Config.replace_peer_as:type_name -> ywrapper.BoolValue
	595,  // 577: openconfig.Bgp.Neighbors.Neighbor.AsPathOptions.State.allow_own_as:type_name -> ywrapper.UintValue
	598,  // 578: openconfig.Bgp.Neighbors.Neighbor.AsPathOptions.State.disable_peer_as_filter:type_name -> ywrapper.BoolValue
	598,  // 579: openconfig.Bgp.Neighbors.Neighbor.AsPathOptions.State.replace_peer_as:type_name -> ywrapper.BoolValue
	598,  // 580: openconfig.Bgp.Neighbors.Neighbor.EbgpMultihop.Config.enabled:type_name -> ywrapper.BoolValue
	595,  // 581: openconfig.Bgp.Neighbors.Neighbor.EbgpMultihop.Config.multihop_ttl:type_name -> ywrapper.UintValue
	598,  // 582: openconfig.Bgp.Neighbors.Neighbor.EbgpMultihop.State.enabled:type_name -> ywrapper.BoolValue
	595,  // 583: openconfig.Bgp.Neighbors.Neighbor.EbgpMultihop.State.multihop_ttl:type_name -> ywrapper.UintValue
	598,  // 584: openconfig.Bgp.Neighbors.Neighbor.ErrorHandling.Config.treat_as_withdraw:type_name -> ywrapper.BoolValue
	595,  // 585: openconfig.Bgp.Neighbors.Neighbor.ErrorHandling.State.erroneous_update_messages:type_name -> ywrapper.UintValue
	598,  // 586: openconfig.Bgp.Neighbors.Neighbor.ErrorHandling.State.treat_as_withdraw:type_name -> ywrapper.BoolValue
	598,  // 587: openconfig.Bgp.Neighbors.Neighbor.GracefulRestart.Config.enabled:type_name -> ywrapper.BoolValue
	598,  // 588: openconfig.Bgp.Neighbors.Neighbor.GracefulRestart.Config.helper_only:type_name -> ywrapper.BoolValue
	595,  // 589: openconfig.Bgp.Neighbors.Neighbor.GracefulRestart.Config.restart_time:type_name -> ywrapper.UintValue
	599,  // 590: openconfig.Bgp.Neighbors.Neighbor.GracefulRestart.Config.stale_routes_time:type_name -> ywrapper.Decimal64Value
	598,  // 591: openconfig.Bgp.Neighbors.Neighbor.GracefulRestart.State.enabled:type_name -> ywrapper.BoolValue
	598,  // 592: openconfig.Bgp.Neighbors.Neighbor.GracefulRestart.State.helper_only:type_name -> ywrapper.BoolValue
	598,  // 593: openconfig.Bgp.Neighbors.Neighbor.GracefulRestart.State.local_restarting:type_name -> ywrapper.BoolValue
	0,    // 594: openconfig.Bgp.Neighbors.Neighbor.GracefulRestart.State.mode:type_name -> openconfig.Bgp.Neighbors.Neighbor.GracefulRestart.State.Mode
	595,  // 595: openconfig.Bgp.Neighbors.Neighbor.GracefulRestart.State.peer_restart_time:type_name -> ywrapper.UintValue
	598,  // 596: openconfig.Bgp.Neighbors.Neighbor.GracefulRestart.State.peer_restarting:type_name -> ywrapper.BoolValue
	595,  // 597: openconfig.Bgp.Neighbors.Neighbor.GracefulRestart.State.restart_time:type_name -> ywrapper.UintValue
	599,  // 598: openconfig.Bgp.Neighbors.Neighbor.GracefulRestart.State.stale_routes_time:type_name -> ywrapper.Decimal64Value
	598,  // 599: openconfig.Bgp.Neighbors.Neighbor.LoggingOptions.Config.log_neighbor_state_changes:type_name -> ywrapper.BoolValue
	598,  // 600: openconfig.Bgp.Neighbors.Neighbor.LoggingOptions.State.log_neighbor_state_changes:type_name -> ywrapper.BoolValue
	598,  // 601: openconfig.Bgp.Neighbors.Neighbor.RouteReflector.Config.route_reflector_client:type_name -> ywrapper.BoolValue
	598,  // 602: openconfig.Bgp.Neighbors.Neighbor.RouteReflector.State.route_reflector_client:type_name -> ywrapper.BoolValue
	216,  // 603: openconfig.Bgp.Neighbors.Neighbor.State.Messages.received:type_name -> openconfig.Bgp.Neighbors.Neighbor.State.Messages.Received
	217,  // 604: openconfig.Bgp.Neighbors.Neighbor.State.Messages.sent:type_name -> openconfig.Bgp.Neighbors.Neighbor.State.Messages.Sent
	595,  // 605: openconfig.Bgp.Neighbors.Neighbor.State.Queues.input:type_name -> ywrapper.UintValue
	595,  // 606: openconfig.Bgp.Neighbors.Neighbor.State.Queues.output:type_name -> ywrapper.UintValue
	595,  // 607: openconfig.Bgp.Neighbors.Neighbor.State.Messages.Received.NOTIFICATION:type_name -> ywrapper.UintValue
	595,  // 608: openconfig.Bgp.Neighbors.Neighbor.State.Messages.Received.UPDATE:type_name -> ywrapper.UintValue
	605,  // 609: openconfig.Bgp.Neighbors.Neighbor.State.Messages.Received.last_notification_error_code:type_name -> openconfig.OpenconfigBgpTypesBGPERRORCODE
	606,  // 610: openconfig.Bgp.Neighbors.Neighbor.State.Messages.Received.last_notification_error_subcode:type_name -> openconfig.OpenconfigBgpTypesBGPERRORSUBCODE
	595,  // 611: openconfig.Bgp.Neighbors.Neighbor.State.Messages.Received.last_notification_time:type_name -> ywrapper.UintValue
	595,  // 612: openconfig.Bgp.Neighbors.Neighbor.State.Messages.Sent.NOTIFICATION:type_name -> ywrapper.UintValue
	595,  // 613: openconfig.Bgp.Neighbors.Neighbor.State.Messages.Sent.UPDATE:type_name -> ywrapper.UintValue
	605,  // 614: openconfig.Bgp.Neighbors.Neighbor.State.Messages.Sent.last_notification_error_code:type_name -> openconfig.OpenconfigBgpTypesBGPERRORCODE
	606,  // 615: openconfig.Bgp.Neighbors.Neighbor.State.Messages.Sent.last_notification_error_subcode:type_name -> openconfig.OpenconfigBgpTypesBGPERRORSUBCODE
	595,  // 616: openconfig.Bgp.Neighbors.Neighbor.State.Messages.Sent.last_notification_time:type_name -> ywrapper.UintValue
	599,  // 617: openconfig.Bgp.Neighbors.Neighbor.Timers.Config.connect_retry:type_name -> ywrapper.Decimal64Value
	599,  // 618: openconfig.Bgp.Neighbors.Neighbor.Timers.Config.hold_time:type_name -> ywrapper.Decimal64Value
	599,  // 619: openconfig.Bgp.Neighbors.Neighbor.Timers.Config.keepalive_interval:type_name -> ywrapper.Decimal64Value
	599,  // 620: openconfig.Bgp.Neighbors.Neighbor.Timers.Config.minimum_advertisement_interval:type_name -> ywrapper.Decimal64Value
	599,  // 621: openconfig.Bgp.Neighbors.Neighbor.Timers.State.connect_retry:type_name -> ywrapper.Decimal64Value
	599,  // 622: openconfig.Bgp.Neighbors.Neighbor.Timers.State.hold_time:type_name -> ywrapper.Decimal64Value
	599,  // 623: openconfig.Bgp.Neighbors.Neighbor.Timers.State.keepalive_interval:type_name -> ywrapper.Decimal64Value
	599,  // 624: openconfig.Bgp.Neighbors.Neighbor.Timers.State.minimum_advertisement_interval:type_name -> ywrapper.Decimal64Value
	599,  // 625: openconfig.Bgp.Neighbors.Neighbor.Timers.State.negotiated_hold_time:type_name -> ywrapper.Decimal64Value
	596,  // 626: openconfig.Bgp.Neighbors.Neighbor.Transport.Config.local_address:type_name -> ywrapper.StringValue
	598,  // 627: openconfig.Bgp.Neighbors.Neighbor.Transport.Config.mtu_discovery:type_name -> ywrapper.BoolValue
	598,  // 628: openconfig.Bgp.Neighbors.Neighbor.Transport.Config.passive_mode:type_name -> ywrapper.BoolValue
	595,  // 629: openconfig.Bgp.Neighbors.Neighbor.Transport.Config.tcp_mss:type_name -> ywrapper.UintValue
	596,  // 630: openconfig.Bgp.Neighbors.Neighbor.Transport.State.local_address:type_name -> ywrapper.StringValue
	595,  // 631: openconfig.Bgp.Neighbors.Neighbor.Transport.State.local_port:type_name -> ywrapper.UintValue
	598,  // 632: openconfig.Bgp.Neighbors.Neighbor.Transport.State.mtu_discovery:type_name -> ywrapper.BoolValue
	598,  // 633: openconfig.Bgp.Neighbors.Neighbor.Transport.State.passive_mode:type_name -> ywrapper.BoolValue
	596,  // 634: openconfig.Bgp.Neighbors.Neighbor.Transport.State.remote_address:type_name -> ywrapper.StringValue
	595,  // 635: openconfig.Bgp.Neighbors.Neighbor.Transport.State.remote_port:type_name -> ywrapper.UintValue
	595,  // 636: openconfig.Bgp.Neighbors.Neighbor.Transport.State.tcp_mss:type_name -> ywrapper.UintValue
	598,  // 637: openconfig.Bgp.Neighbors.Neighbor.UseMultiplePaths.Config.enabled:type_name -> ywrapper.BoolValue
	225,  // 638: openconfig.Bgp.Neighbors.Neighbor.UseMultiplePaths.Ebgp.config:type_name -> openconfig.Bgp.Neighbors.Neighbor.UseMultiplePaths.Ebgp.Config
	226,  // 639: openconfig.Bgp.Neighbors.Neighbor.UseMultiplePaths.Ebgp.state:type_name -> openconfig.Bgp.Neighbors.Neighbor.UseMultiplePaths.Ebgp.State
	598,  // 640: openconfig.Bgp.Neighbors.Neighbor.UseMultiplePaths.State.enabled:type_name -> ywrapper.BoolValue
	598,  // 641: openconfig.Bgp.Neighbors.Neighbor.UseMultiplePaths.Ebgp.Config.allow_multiple_as:type_name -> ywrapper.BoolValue
	598,  // 642: openconfig.Bgp.Neighbors.Neighbor.UseMultiplePaths.Ebgp.State.allow_multiple_as:type_name -> ywrapper.BoolValue
	229,  // 643: openconfig.Bgp.PeerGroups.PeerGroup.afi_safis:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis
	230,  // 644: openconfig.Bgp.PeerGroups.PeerGroup.apply_policy:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.ApplyPolicy
	231,  // 645: openconfig.Bgp.PeerGroups.PeerGroup.as_path_options:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AsPathOptions
	232,  // 646: openconfig.Bgp.PeerGroups.PeerGroup.config:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.Config
	233,  // 647: openconfig.Bgp.PeerGroups.PeerGroup.ebgp_multihop:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.EbgpMultihop
	234,  // 648: openconfig.Bgp.PeerGroups.PeerGroup.error_handling:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.ErrorHandling
	235,  // 649: openconfig.Bgp.PeerGroups.PeerGroup.graceful_restart:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.GracefulRestart
	236,  // 650: openconfig.Bgp.PeerGroups.PeerGroup.logging_options:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.LoggingOptions
	237,  // 651: openconfig.Bgp.PeerGroups.PeerGroup.route_reflector:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.RouteReflector
	238,  // 652: openconfig.Bgp.PeerGroups.PeerGroup.state:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.State
	239,  // 653: openconfig.Bgp.PeerGroups.PeerGroup.timers:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.Timers
	240,  // 654: openconfig.Bgp.PeerGroups.PeerGroup.transport:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.Transport
	241,  // 655: openconfig.Bgp.PeerGroups.PeerGroup.use_multiple_paths:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.UseMultiplePaths
	227,  // 656: openconfig.Bgp.PeerGroups.PeerGroupKey.peer_group:type_name -> openconfig.Bgp.PeerGroups.PeerGroup
	243,  // 657: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.afi_safi:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafiKey
	316,  // 658: openconfig.Bgp.PeerGroups.PeerGroup.ApplyPolicy.config:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.ApplyPolicy.Config
	317,  // 659: openconfig.Bgp.PeerGroups.PeerGroup.ApplyPolicy.state:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.ApplyPolicy.State
	318,  // 660: openconfig.Bgp.PeerGroups.PeerGroup.AsPathOptions.config:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AsPathOptions.Config
	319,  // 661: openconfig.Bgp.PeerGroups.PeerGroup.AsPathOptions.state:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AsPathOptions.State
	596,  // 662: openconfig.Bgp.PeerGroups.PeerGroup.Config.auth_password:type_name -> ywrapper.StringValue
	596,  // 663: openconfig.Bgp.PeerGroups.PeerGroup.Config.description:type_name -> ywrapper.StringValue
	595,  // 664: openconfig.Bgp.PeerGroups.PeerGroup.Config.local_as:type_name -> ywrapper.UintValue
	595,  // 665: openconfig.Bgp.PeerGroups.PeerGroup.Config.peer_as:type_name -> ywrapper.UintValue
	596,  // 666: openconfig.Bgp.PeerGroups.PeerGroup.Config.peer_group_name:type_name -> ywrapper.StringValue
	600,  // 667: openconfig.Bgp.PeerGroups.PeerGroup.Config.peer_type:type_name -> openconfig.OpenconfigBgpPeerType
	601,  // 668: openconfig.Bgp.PeerGroups.PeerGroup.Config.remove_private_as:type_name -> openconfig.OpenconfigBgpRemovePrivateAsOption
	598,  // 669: openconfig.Bgp.PeerGroups.PeerGroup.Config.route_flap_damping:type_name -> ywrapper.BoolValue
	602,  // 670: openconfig.Bgp.PeerGroups.PeerGroup.Config.send_community:type_name -> openconfig.OpenconfigBgpCommunityType
	320,  // 671: openconfig.Bgp.PeerGroups.PeerGroup.EbgpMultihop.config:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.EbgpMultihop.Config
	321,  // 672: openconfig.Bgp.PeerGroups.PeerGroup.EbgpMultihop.state:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.EbgpMultihop.State
	322,  // 673: openconfig.Bgp.PeerGroups.PeerGroup.ErrorHandling.config:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.ErrorHandling.Config
	323,  // 674: openconfig.Bgp.PeerGroups.PeerGroup.ErrorHandling.state:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.ErrorHandling.State
	324,  // 675: openconfig.Bgp.PeerGroups.PeerGroup.GracefulRestart.config:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.GracefulRestart.Config
	325,  // 676: openconfig.Bgp.PeerGroups.PeerGroup.GracefulRestart.state:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.GracefulRestart.State
	326,  // 677: openconfig.Bgp.PeerGroups.PeerGroup.LoggingOptions.config:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.LoggingOptions.Config
	327,  // 678: openconfig.Bgp.PeerGroups.PeerGroup.LoggingOptions.state:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.LoggingOptions.State
	328,  // 679: openconfig.Bgp.PeerGroups.PeerGroup.RouteReflector.config:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.RouteReflector.Config
	329,  // 680: openconfig.Bgp.PeerGroups.PeerGroup.RouteReflector.state:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.RouteReflector.State
	596,  // 681: openconfig.Bgp.PeerGroups.PeerGroup.State.auth_password:type_name -> ywrapper.StringValue
	596,  // 682: openconfig.Bgp.PeerGroups.PeerGroup.State.description:type_name -> ywrapper.StringValue
	595,  // 683: openconfig.Bgp.PeerGroups.PeerGroup.State.local_as:type_name -> ywrapper.UintValue
	595,  // 684: openconfig.Bgp.PeerGroups.PeerGroup.State.peer_as:type_name -> ywrapper.UintValue
	596,  // 685: openconfig.Bgp.PeerGroups.PeerGroup.State.peer_group_name:type_name -> ywrapper.StringValue
	600,  // 686: openconfig.Bgp.PeerGroups.PeerGroup.State.peer_type:type_name -> openconfig.OpenconfigBgpPeerType
	601,  // 687: openconfig.Bgp.PeerGroups.PeerGroup.State.remove_private_as:type_name -> openconfig.OpenconfigBgpRemovePrivateAsOption
	598,  // 688: openconfig.Bgp.PeerGroups.PeerGroup.State.route_flap_damping:type_name -> ywrapper.BoolValue
	602,  // 689: openconfig.Bgp.PeerGroups.PeerGroup.State.send_community:type_name -> openconfig.OpenconfigBgpCommunityType
	595,  // 690: openconfig.Bgp.PeerGroups.PeerGroup.State.total_paths:type_name -> ywrapper.UintValue
	595,  // 691: openconfig.Bgp.PeerGroups.PeerGroup.State.total_prefixes:type_name -> ywrapper.UintValue
	330,  // 692: openconfig.Bgp.PeerGroups.PeerGroup.Timers.config:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.Timers.Config
	331,  // 693: openconfig.Bgp.PeerGroups.PeerGroup.Timers.state:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.Timers.State
	332,  // 694: openconfig.Bgp.PeerGroups.PeerGroup.Transport.config:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.Transport.Config
	333,  // 695: openconfig.Bgp.PeerGroups.PeerGroup.Transport.state:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.Transport.State
	334,  // 696: openconfig.Bgp.PeerGroups.PeerGroup.UseMultiplePaths.config:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.UseMultiplePaths.Config
	335,  // 697: openconfig.Bgp.PeerGroups.PeerGroup.UseMultiplePaths.ebgp:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.UseMultiplePaths.Ebgp
	336,  // 698: openconfig.Bgp.PeerGroups.PeerGroup.UseMultiplePaths.ibgp:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.UseMultiplePaths.Ibgp
	337,  // 699: openconfig.Bgp.PeerGroups.PeerGroup.UseMultiplePaths.state:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.UseMultiplePaths.State
	244,  // 700: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.add_paths:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.AddPaths
	245,  // 701: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.apply_policy:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.ApplyPolicy
	246,  // 702: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.config:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Config
	247,  // 703: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.graceful_restart:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.GracefulRestart
	248,  // 704: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.ipv4_labeled_unicast:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv4LabeledUnicast
	249,  // 705: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.ipv4_unicast:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv4Unicast
	250,  // 706: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.ipv6_labeled_unicast:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv6LabeledUnicast
	251,  // 707: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.ipv6_unicast:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv6Unicast
	252,  // 708: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.l2vpn_evpn:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L2VpnEvpn
	253,  // 709: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.l2vpn_vpls:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L2VpnVpls
	254,  // 710: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.l3vpn_ipv4_multicast:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv4Multicast
	255,  // 711: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.l3vpn_ipv4_unicast:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv4Unicast
	256,  // 712: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.l3vpn_ipv6_multicast:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv6Multicast
	257,  // 713: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.l3vpn_ipv6_unicast:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv6Unicast
	258,  // 714: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.srte_policy_ipv4:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.SrtePolicyIpv4
	259,  // 715: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.srte_policy_ipv6:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.SrtePolicyIpv6
	260,  // 716: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.state:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.State
	261,  // 717: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.use_multiple_paths:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.UseMultiplePaths
	597,  // 718: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafiKey.afi_safi_name:type_name -> openconfig.OpenconfigBgpTypesAFISAFITYPE
	242,  // 719: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafiKey.afi_safi:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi
	262,  // 720: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.AddPaths.config:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.AddPaths.Config
	263,  // 721: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.AddPaths.state:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.AddPaths.State
	264,  // 722: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.ApplyPolicy.config:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.ApplyPolicy.Config
	265,  // 723: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.ApplyPolicy.state:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.ApplyPolicy.State
	597,  // 724: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Config.afi_safi_name:type_name -> openconfig.OpenconfigBgpTypesAFISAFITYPE
	598,  // 725: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Config.enabled:type_name -> ywrapper.BoolValue
	266,  // 726: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.GracefulRestart.config:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.GracefulRestart.Config
	267,  // 727: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.GracefulRestart.state:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.GracefulRestart.State
	268,  // 728: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv4LabeledUnicast.prefix_limit:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv4LabeledUnicast.PrefixLimit
	271,  // 729: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv4Unicast.config:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv4Unicast.Config
	272,  // 730: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv4Unicast.prefix_limit:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv4Unicast.PrefixLimit
	273,  // 731: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv4Unicast.state:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv4Unicast.State
	276,  // 732: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv6LabeledUnicast.prefix_limit:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv6LabeledUnicast.PrefixLimit
	279,  // 733: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv6Unicast.config:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv6Unicast.Config
	280,  // 734: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv6Unicast.prefix_limit:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv6Unicast.PrefixLimit
	281,  // 735: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv6Unicast.state:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv6Unicast.State
	284,  // 736: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L2VpnEvpn.prefix_limit:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L2VpnEvpn.PrefixLimit
	287,  // 737: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L2VpnVpls.prefix_limit:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L2VpnVpls.PrefixLimit
	290,  // 738: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv4Multicast.prefix_limit:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv4Multicast.PrefixLimit
	293,  // 739: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv4Unicast.prefix_limit:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv4Unicast.PrefixLimit
	296,  // 740: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv6Multicast.prefix_limit:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv6Multicast.PrefixLimit
	299,  // 741: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv6Unicast.prefix_limit:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv6Unicast.PrefixLimit
	302,  // 742: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.SrtePolicyIpv4.prefix_limit:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.SrtePolicyIpv4.PrefixLimit
	305,  // 743: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.SrtePolicyIpv6.prefix_limit:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.SrtePolicyIpv6.PrefixLimit
	597,  // 744: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.State.afi_safi_name:type_name -> openconfig.OpenconfigBgpTypesAFISAFITYPE
	598,  // 745: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.State.enabled:type_name -> ywrapper.BoolValue
	308,  // 746: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.UseMultiplePaths.config:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.UseMultiplePaths.Config
	309,  // 747: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.UseMultiplePaths.ebgp:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.UseMultiplePaths.Ebgp
	310,  // 748: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.UseMultiplePaths.ibgp:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.UseMultiplePaths.Ibgp
	311,  // 749: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.UseMultiplePaths.state:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.UseMultiplePaths.State
	596,  // 750: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.AddPaths.Config.eligible_prefix_policy:type_name -> ywrapper.StringValue
	598,  // 751: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.AddPaths.Config.receive:type_name -> ywrapper.BoolValue
	598,  // 752: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.AddPaths.Config.send:type_name -> ywrapper.BoolValue
	595,  // 753: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.AddPaths.Config.send_max:type_name -> ywrapper.UintValue
	596,  // 754: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.AddPaths.State.eligible_prefix_policy:type_name -> ywrapper.StringValue
	598,  // 755: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.AddPaths.State.receive:type_name -> ywrapper.BoolValue
	598,  // 756: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.AddPaths.State.send:type_name -> ywrapper.BoolValue
	595,  // 757: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.AddPaths.State.send_max:type_name -> ywrapper.UintValue
	604,  // 758: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.ApplyPolicy.Config.default_export_policy:type_name -> openconfig.OpenconfigRoutingPolicyDefaultPolicyType
	604,  // 759: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.ApplyPolicy.Config.default_import_policy:type_name -> openconfig.OpenconfigRoutingPolicyDefaultPolicyType
	596,  // 760: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.ApplyPolicy.Config.export_policy:type_name -> ywrapper.StringValue
	596,  // 761: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.ApplyPolicy.Config.import_policy:type_name -> ywrapper.StringValue
	604,  // 762: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.ApplyPolicy.State.default_export_policy:type_name -> openconfig.OpenconfigRoutingPolicyDefaultPolicyType
	604,  // 763: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.ApplyPolicy.State.default_import_policy:type_name -> openconfig.OpenconfigRoutingPolicyDefaultPolicyType
	596,  // 764: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.ApplyPolicy.State.export_policy:type_name -> ywrapper.StringValue
	596,  // 765: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.ApplyPolicy.State.import_policy:type_name -> ywrapper.StringValue
	598,  // 766: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.GracefulRestart.Config.enabled:type_name -> ywrapper.BoolValue
	598,  // 767: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.GracefulRestart.State.enabled:type_name -> ywrapper.BoolValue
	269,  // 768: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv4LabeledUnicast.PrefixLimit.config:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv4LabeledUnicast.PrefixLimit.Config
	270,  // 769: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv4LabeledUnicast.PrefixLimit.state:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv4LabeledUnicast.PrefixLimit.State
	595,  // 770: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv4LabeledUnicast.PrefixLimit.Config.max_prefixes:type_name -> ywrapper.UintValue
	598,  // 771: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv4LabeledUnicast.PrefixLimit.Config.prevent_teardown:type_name -> ywrapper.BoolValue
	599,  // 772: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv4LabeledUnicast.PrefixLimit.Config.restart_timer:type_name -> ywrapper.Decimal64Value
	595,  // 773: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv4LabeledUnicast.PrefixLimit.Config.warning_threshold_pct:type_name -> ywrapper.UintValue
	595,  // 774: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv4LabeledUnicast.PrefixLimit.State.max_prefixes:type_name -> ywrapper.UintValue
	598,  // 775: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv4LabeledUnicast.PrefixLimit.State.prevent_teardown:type_name -> ywrapper.BoolValue
	599,  // 776: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv4LabeledUnicast.PrefixLimit.State.restart_timer:type_name -> ywrapper.Decimal64Value
	595,  // 777: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv4LabeledUnicast.PrefixLimit.State.warning_threshold_pct:type_name -> ywrapper.UintValue
	598,  // 778: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv4Unicast.Config.send_default_route:type_name -> ywrapper.BoolValue
	274,  // 779: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv4Unicast.PrefixLimit.config:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv4Unicast.PrefixLimit.Config
	275,  // 780: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv4Unicast.PrefixLimit.state:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv4Unicast.PrefixLimit.State
	598,  // 781: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv4Unicast.State.send_default_route:type_name -> ywrapper.BoolValue
	595,  // 782: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv4Unicast.PrefixLimit.Config.max_prefixes:type_name -> ywrapper.UintValue
	598,  // 783: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv4Unicast.PrefixLimit.Config.prevent_teardown:type_name -> ywrapper.BoolValue
	599,  // 784: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv4Unicast.PrefixLimit.Config.restart_timer:type_name -> ywrapper.Decimal64Value
	595,  // 785: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv4Unicast.PrefixLimit.Config.warning_threshold_pct:type_name -> ywrapper.UintValue
	595,  // 786: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv4Unicast.PrefixLimit.State.max_prefixes:type_name -> ywrapper.UintValue
	598,  // 787: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv4Unicast.PrefixLimit.State.prevent_teardown:type_name -> ywrapper.BoolValue
	599,  // 788: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv4Unicast.PrefixLimit.State.restart_timer:type_name -> ywrapper.Decimal64Value
	595,  // 789: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv4Unicast.PrefixLimit.State.warning_threshold_pct:type_name -> ywrapper.UintValue
	277,  // 790: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv6LabeledUnicast.PrefixLimit.config:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv6LabeledUnicast.PrefixLimit.Config
	278,  // 791: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv6LabeledUnicast.PrefixLimit.state:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv6LabeledUnicast.PrefixLimit.State
	595,  // 792: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv6LabeledUnicast.PrefixLimit.Config.max_prefixes:type_name -> ywrapper.UintValue
	598,  // 793: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv6LabeledUnicast.PrefixLimit.Config.prevent_teardown:type_name -> ywrapper.BoolValue
	599,  // 794: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv6LabeledUnicast.PrefixLimit.Config.restart_timer:type_name -> ywrapper.Decimal64Value
	595,  // 795: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv6LabeledUnicast.PrefixLimit.Config.warning_threshold_pct:type_name -> ywrapper.UintValue
	595,  // 796: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv6LabeledUnicast.PrefixLimit.State.max_prefixes:type_name -> ywrapper.UintValue
	598,  // 797: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv6LabeledUnicast.PrefixLimit.State.prevent_teardown:type_name -> ywrapper.BoolValue
	599,  // 798: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv6LabeledUnicast.PrefixLimit.State.restart_timer:type_name -> ywrapper.Decimal64Value
	595,  // 799: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv6LabeledUnicast.PrefixLimit.State.warning_threshold_pct:type_name -> ywrapper.UintValue
	598,  // 800: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv6Unicast.Config.send_default_route:type_name -> ywrapper.BoolValue
	282,  // 801: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv6Unicast.PrefixLimit.config:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv6Unicast.PrefixLimit.Config
	283,  // 802: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv6Unicast.PrefixLimit.state:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv6Unicast.PrefixLimit.State
	598,  // 803: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv6Unicast.State.send_default_route:type_name -> ywrapper.BoolValue
	595,  // 804: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv6Unicast.PrefixLimit.Config.max_prefixes:type_name -> ywrapper.UintValue
	598,  // 805: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv6Unicast.PrefixLimit.Config.prevent_teardown:type_name -> ywrapper.BoolValue
	599,  // 806: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv6Unicast.PrefixLimit.Config.restart_timer:type_name -> ywrapper.Decimal64Value
	595,  // 807: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv6Unicast.PrefixLimit.Config.warning_threshold_pct:type_name -> ywrapper.UintValue
	595,  // 808: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv6Unicast.PrefixLimit.State.max_prefixes:type_name -> ywrapper.UintValue
	598,  // 809: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv6Unicast.PrefixLimit.State.prevent_teardown:type_name -> ywrapper.BoolValue
	599,  // 810: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv6Unicast.PrefixLimit.State.restart_timer:type_name -> ywrapper.Decimal64Value
	595,  // 811: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.Ipv6Unicast.PrefixLimit.State.warning_threshold_pct:type_name -> ywrapper.UintValue
	285,  // 812: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L2VpnEvpn.PrefixLimit.config:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L2VpnEvpn.PrefixLimit.Config
	286,  // 813: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L2VpnEvpn.PrefixLimit.state:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L2VpnEvpn.PrefixLimit.State
	595,  // 814: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L2VpnEvpn.PrefixLimit.Config.max_prefixes:type_name -> ywrapper.UintValue
	598,  // 815: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L2VpnEvpn.PrefixLimit.Config.prevent_teardown:type_name -> ywrapper.BoolValue
	599,  // 816: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L2VpnEvpn.PrefixLimit.Config.restart_timer:type_name -> ywrapper.Decimal64Value
	595,  // 817: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L2VpnEvpn.PrefixLimit.Config.warning_threshold_pct:type_name -> ywrapper.UintValue
	595,  // 818: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L2VpnEvpn.PrefixLimit.State.max_prefixes:type_name -> ywrapper.UintValue
	598,  // 819: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L2VpnEvpn.PrefixLimit.State.prevent_teardown:type_name -> ywrapper.BoolValue
	599,  // 820: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L2VpnEvpn.PrefixLimit.State.restart_timer:type_name -> ywrapper.Decimal64Value
	595,  // 821: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L2VpnEvpn.PrefixLimit.State.warning_threshold_pct:type_name -> ywrapper.UintValue
	288,  // 822: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L2VpnVpls.PrefixLimit.config:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L2VpnVpls.PrefixLimit.Config
	289,  // 823: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L2VpnVpls.PrefixLimit.state:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L2VpnVpls.PrefixLimit.State
	595,  // 824: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L2VpnVpls.PrefixLimit.Config.max_prefixes:type_name -> ywrapper.UintValue
	598,  // 825: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L2VpnVpls.PrefixLimit.Config.prevent_teardown:type_name -> ywrapper.BoolValue
	599,  // 826: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L2VpnVpls.PrefixLimit.Config.restart_timer:type_name -> ywrapper.Decimal64Value
	595,  // 827: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L2VpnVpls.PrefixLimit.Config.warning_threshold_pct:type_name -> ywrapper.UintValue
	595,  // 828: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L2VpnVpls.PrefixLimit.State.max_prefixes:type_name -> ywrapper.UintValue
	598,  // 829: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L2VpnVpls.PrefixLimit.State.prevent_teardown:type_name -> ywrapper.BoolValue
	599,  // 830: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L2VpnVpls.PrefixLimit.State.restart_timer:type_name -> ywrapper.Decimal64Value
	595,  // 831: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L2VpnVpls.PrefixLimit.State.warning_threshold_pct:type_name -> ywrapper.UintValue
	291,  // 832: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv4Multicast.PrefixLimit.config:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv4Multicast.PrefixLimit.Config
	292,  // 833: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv4Multicast.PrefixLimit.state:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv4Multicast.PrefixLimit.State
	595,  // 834: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv4Multicast.PrefixLimit.Config.max_prefixes:type_name -> ywrapper.UintValue
	598,  // 835: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv4Multicast.PrefixLimit.Config.prevent_teardown:type_name -> ywrapper.BoolValue
	599,  // 836: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv4Multicast.PrefixLimit.Config.restart_timer:type_name -> ywrapper.Decimal64Value
	595,  // 837: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv4Multicast.PrefixLimit.Config.warning_threshold_pct:type_name -> ywrapper.UintValue
	595,  // 838: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv4Multicast.PrefixLimit.State.max_prefixes:type_name -> ywrapper.UintValue
	598,  // 839: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv4Multicast.PrefixLimit.State.prevent_teardown:type_name -> ywrapper.BoolValue
	599,  // 840: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv4Multicast.PrefixLimit.State.restart_timer:type_name -> ywrapper.Decimal64Value
	595,  // 841: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv4Multicast.PrefixLimit.State.warning_threshold_pct:type_name -> ywrapper.UintValue
	294,  // 842: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv4Unicast.PrefixLimit.config:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv4Unicast.PrefixLimit.Config
	295,  // 843: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv4Unicast.PrefixLimit.state:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv4Unicast.PrefixLimit.State
	595,  // 844: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv4Unicast.PrefixLimit.Config.max_prefixes:type_name -> ywrapper.UintValue
	598,  // 845: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv4Unicast.PrefixLimit.Config.prevent_teardown:type_name -> ywrapper.BoolValue
	599,  // 846: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv4Unicast.PrefixLimit.Config.restart_timer:type_name -> ywrapper.Decimal64Value
	595,  // 847: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv4Unicast.PrefixLimit.Config.warning_threshold_pct:type_name -> ywrapper.UintValue
	595,  // 848: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv4Unicast.PrefixLimit.State.max_prefixes:type_name -> ywrapper.UintValue
	598,  // 849: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv4Unicast.PrefixLimit.State.prevent_teardown:type_name -> ywrapper.BoolValue
	599,  // 850: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv4Unicast.PrefixLimit.State.restart_timer:type_name -> ywrapper.Decimal64Value
	595,  // 851: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv4Unicast.PrefixLimit.State.warning_threshold_pct:type_name -> ywrapper.UintValue
	297,  // 852: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv6Multicast.PrefixLimit.config:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv6Multicast.PrefixLimit.Config
	298,  // 853: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv6Multicast.PrefixLimit.state:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv6Multicast.PrefixLimit.State
	595,  // 854: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv6Multicast.PrefixLimit.Config.max_prefixes:type_name -> ywrapper.UintValue
	598,  // 855: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv6Multicast.PrefixLimit.Config.prevent_teardown:type_name -> ywrapper.BoolValue
	599,  // 856: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv6Multicast.PrefixLimit.Config.restart_timer:type_name -> ywrapper.Decimal64Value
	595,  // 857: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv6Multicast.PrefixLimit.Config.warning_threshold_pct:type_name -> ywrapper.UintValue
	595,  // 858: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv6Multicast.PrefixLimit.State.max_prefixes:type_name -> ywrapper.UintValue
	598,  // 859: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv6Multicast.PrefixLimit.State.prevent_teardown:type_name -> ywrapper.BoolValue
	599,  // 860: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv6Multicast.PrefixLimit.State.restart_timer:type_name -> ywrapper.Decimal64Value
	595,  // 861: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv6Multicast.PrefixLimit.State.warning_threshold_pct:type_name -> ywrapper.UintValue
	300,  // 862: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv6Unicast.PrefixLimit.config:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv6Unicast.PrefixLimit.Config
	301,  // 863: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv6Unicast.PrefixLimit.state:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv6Unicast.PrefixLimit.State
	595,  // 864: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv6Unicast.PrefixLimit.Config.max_prefixes:type_name -> ywrapper.UintValue
	598,  // 865: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv6Unicast.PrefixLimit.Config.prevent_teardown:type_name -> ywrapper.BoolValue
	599,  // 866: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv6Unicast.PrefixLimit.Config.restart_timer:type_name -> ywrapper.Decimal64Value
	595,  // 867: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv6Unicast.PrefixLimit.Config.warning_threshold_pct:type_name -> ywrapper.UintValue
	595,  // 868: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv6Unicast.PrefixLimit.State.max_prefixes:type_name -> ywrapper.UintValue
	598,  // 869: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv6Unicast.PrefixLimit.State.prevent_teardown:type_name -> ywrapper.BoolValue
	599,  // 870: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv6Unicast.PrefixLimit.State.restart_timer:type_name -> ywrapper.Decimal64Value
	595,  // 871: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.L3VpnIpv6Unicast.PrefixLimit.State.warning_threshold_pct:type_name -> ywrapper.UintValue
	303,  // 872: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.SrtePolicyIpv4.PrefixLimit.config:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.SrtePolicyIpv4.PrefixLimit.Config
	304,  // 873: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.SrtePolicyIpv4.PrefixLimit.state:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.SrtePolicyIpv4.PrefixLimit.State
	595,  // 874: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.SrtePolicyIpv4.PrefixLimit.Config.max_prefixes:type_name -> ywrapper.UintValue
	598,  // 875: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.SrtePolicyIpv4.PrefixLimit.Config.prevent_teardown:type_name -> ywrapper.BoolValue
	599,  // 876: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.SrtePolicyIpv4.PrefixLimit.Config.restart_timer:type_name -> ywrapper.Decimal64Value
	595,  // 877: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.SrtePolicyIpv4.PrefixLimit.Config.warning_threshold_pct:type_name -> ywrapper.UintValue
	595,  // 878: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.SrtePolicyIpv4.PrefixLimit.State.max_prefixes:type_name -> ywrapper.UintValue
	598,  // 879: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.SrtePolicyIpv4.PrefixLimit.State.prevent_teardown:type_name -> ywrapper.BoolValue
	599,  // 880: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.SrtePolicyIpv4.PrefixLimit.State.restart_timer:type_name -> ywrapper.Decimal64Value
	595,  // 881: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.SrtePolicyIpv4.PrefixLimit.State.warning_threshold_pct:type_name -> ywrapper.UintValue
	306,  // 882: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.SrtePolicyIpv6.PrefixLimit.config:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.SrtePolicyIpv6.PrefixLimit.Config
	307,  // 883: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.SrtePolicyIpv6.PrefixLimit.state:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.SrtePolicyIpv6.PrefixLimit.State
	595,  // 884: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.SrtePolicyIpv6.PrefixLimit.Config.max_prefixes:type_name -> ywrapper.UintValue
	598,  // 885: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.SrtePolicyIpv6.PrefixLimit.Config.prevent_teardown:type_name -> ywrapper.BoolValue
	599,  // 886: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.SrtePolicyIpv6.PrefixLimit.Config.restart_timer:type_name -> ywrapper.Decimal64Value
	595,  // 887: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.SrtePolicyIpv6.PrefixLimit.Config.warning_threshold_pct:type_name -> ywrapper.UintValue
	595,  // 888: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.SrtePolicyIpv6.PrefixLimit.State.max_prefixes:type_name -> ywrapper.UintValue
	598,  // 889: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.SrtePolicyIpv6.PrefixLimit.State.prevent_teardown:type_name -> ywrapper.BoolValue
	599,  // 890: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.SrtePolicyIpv6.PrefixLimit.State.restart_timer:type_name -> ywrapper.Decimal64Value
	595,  // 891: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.SrtePolicyIpv6.PrefixLimit.State.warning_threshold_pct:type_name -> ywrapper.UintValue
	598,  // 892: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.UseMultiplePaths.Config.enabled:type_name -> ywrapper.BoolValue
	312,  // 893: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.UseMultiplePaths.Ebgp.config:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.UseMultiplePaths.Ebgp.Config
	313,  // 894: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.UseMultiplePaths.Ebgp.state:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.UseMultiplePaths.Ebgp.State
	314,  // 895: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.UseMultiplePaths.Ibgp.config:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.UseMultiplePaths.Ibgp.Config
	315,  // 896: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.UseMultiplePaths.Ibgp.state:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.UseMultiplePaths.Ibgp.State
	598,  // 897: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.UseMultiplePaths.State.enabled:type_name -> ywrapper.BoolValue
	598,  // 898: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.UseMultiplePaths.Ebgp.Config.allow_multiple_as:type_name -> ywrapper.BoolValue
	595,  // 899: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.UseMultiplePaths.Ebgp.Config.maximum_paths:type_name -> ywrapper.UintValue
	598,  // 900: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.UseMultiplePaths.Ebgp.State.allow_multiple_as:type_name -> ywrapper.BoolValue
	595,  // 901: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.UseMultiplePaths.Ebgp.State.maximum_paths:type_name -> ywrapper.UintValue
	595,  // 902: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.UseMultiplePaths.Ibgp.Config.maximum_paths:type_name -> ywrapper.UintValue
	595,  // 903: openconfig.Bgp.PeerGroups.PeerGroup.AfiSafis.AfiSafi.UseMultiplePaths.Ibgp.State.maximum_paths:type_name -> ywrapper.UintValue
	604,  // 904: openconfig.Bgp.PeerGroups.PeerGroup.ApplyPolicy.Config.default_export_policy:type_name -> openconfig.OpenconfigRoutingPolicyDefaultPolicyType
	604,  // 905: openconfig.Bgp.PeerGroups.PeerGroup.ApplyPolicy.Config.default_import_policy:type_name -> openconfig.OpenconfigRoutingPolicyDefaultPolicyType
	596,  // 906: openconfig.Bgp.PeerGroups.PeerGroup.ApplyPolicy.Config.export_policy:type_name -> ywrapper.StringValue
	596,  // 907: openconfig.Bgp.PeerGroups.PeerGroup.ApplyPolicy.Config.import_policy:type_name -> ywrapper.StringValue
	604,  // 908: openconfig.Bgp.PeerGroups.PeerGroup.ApplyPolicy.State.default_export_policy:type_name -> openconfig.OpenconfigRoutingPolicyDefaultPolicyType
	604,  // 909: openconfig.Bgp.PeerGroups.PeerGroup.ApplyPolicy.State.default_import_policy:type_name -> openconfig.OpenconfigRoutingPolicyDefaultPolicyType
	596,  // 910: openconfig.Bgp.PeerGroups.PeerGroup.ApplyPolicy.State.export_policy:type_name -> ywrapper.StringValue
	596,  // 911: openconfig.Bgp.PeerGroups.PeerGroup.ApplyPolicy.State.import_policy:type_name -> ywrapper.StringValue
	595,  // 912: openconfig.Bgp.PeerGroups.PeerGroup.AsPathOptions.Config.allow_own_as:type_name -> ywrapper.UintValue
	598,  // 913: openconfig.Bgp.PeerGroups.PeerGroup.AsPathOptions.Config.disable_peer_as_filter:type_name -> ywrapper.BoolValue
	598,  // 914: openconfig.Bgp.PeerGroups.PeerGroup.AsPathOptions.Config.replace_peer_as:type_name -> ywrapper.BoolValue
	595,  // 915: openconfig.Bgp.PeerGroups.PeerGroup.AsPathOptions.State.allow_own_as:type_name -> ywrapper.UintValue
	598,  // 916: openconfig.Bgp.PeerGroups.PeerGroup.AsPathOptions.State.disable_peer_as_filter:type_name -> ywrapper.BoolValue
	598,  // 917: openconfig.Bgp.PeerGroups.PeerGroup.AsPathOptions.State.replace_peer_as:type_name -> ywrapper.BoolValue
	598,  // 918: openconfig.Bgp.PeerGroups.PeerGroup.EbgpMultihop.Config.enabled:type_name -> ywrapper.BoolValue
	595,  // 919: openconfig.Bgp.PeerGroups.PeerGroup.EbgpMultihop.Config.multihop_ttl:type_name -> ywrapper.UintValue
	598,  // 920: openconfig.Bgp.PeerGroups.PeerGroup.EbgpMultihop.State.enabled:type_name -> ywrapper.BoolValue
	595,  // 921: openconfig.Bgp.PeerGroups.PeerGroup.EbgpMultihop.State.multihop_ttl:type_name -> ywrapper.UintValue
	598,  // 922: openconfig.Bgp.PeerGroups.PeerGroup.ErrorHandling.Config.treat_as_withdraw:type_name -> ywrapper.BoolValue
	598,  // 923: openconfig.Bgp.PeerGroups.PeerGroup.ErrorHandling.State.treat_as_withdraw:type_name -> ywrapper.BoolValue
	598,  // 924: openconfig.Bgp.PeerGroups.PeerGroup.GracefulRestart.Config.enabled:type_name -> ywrapper.BoolValue
	598,  // 925: openconfig.Bgp.PeerGroups.PeerGroup.GracefulRestart.Config.helper_only:type_name -> ywrapper.BoolValue
	595,  // 926: openconfig.Bgp.PeerGroups.PeerGroup.GracefulRestart.Config.restart_time:type_name -> ywrapper.UintValue
	599,  // 927: openconfig.Bgp.PeerGroups.PeerGroup.GracefulRestart.Config.stale_routes_time:type_name -> ywrapper.Decimal64Value
	598,  // 928: openconfig.Bgp.PeerGroups.PeerGroup.GracefulRestart.State.enabled:type_name -> ywrapper.BoolValue
	598,  // 929: openconfig.Bgp.PeerGroups.PeerGroup.GracefulRestart.State.helper_only:type_name -> ywrapper.BoolValue
	595,  // 930: openconfig.Bgp.PeerGroups.PeerGroup.GracefulRestart.State.restart_time:type_name -> ywrapper.UintValue
	599,  // 931: openconfig.Bgp.PeerGroups.PeerGroup.GracefulRestart.State.stale_routes_time:type_name -> ywrapper.Decimal64Value
	598,  // 932: openconfig.Bgp.PeerGroups.PeerGroup.LoggingOptions.Config.log_neighbor_state_changes:type_name -> ywrapper.BoolValue
	598,  // 933: openconfig.Bgp.PeerGroups.PeerGroup.LoggingOptions.State.log_neighbor_state_changes:type_name -> ywrapper.BoolValue
	598,  // 934: openconfig.Bgp.PeerGroups.PeerGroup.RouteReflector.Config.route_reflector_client:type_name -> ywrapper.BoolValue
	598,  // 935: openconfig.Bgp.PeerGroups.PeerGroup.RouteReflector.State.route_reflector_client:type_name -> ywrapper.BoolValue
	599,  // 936: openconfig.Bgp.PeerGroups.PeerGroup.Timers.Config.connect_retry:type_name -> ywrapper.Decimal64Value
	599,  // 937: openconfig.Bgp.PeerGroups.PeerGroup.Timers.Config.hold_time:type_name -> ywrapper.Decimal64Value
	599,  // 938: openconfig.Bgp.PeerGroups.PeerGroup.Timers.Config.keepalive_interval:type_name -> ywrapper.Decimal64Value
	599,  // 939: openconfig.Bgp.PeerGroups.PeerGroup.Timers.Config.minimum_advertisement_interval:type_name -> ywrapper.Decimal64Value
	599,  // 940: openconfig.Bgp.PeerGroups.PeerGroup.Timers.State.connect_retry:type_name -> ywrapper.Decimal64Value
	599,  // 941: openconfig.Bgp.PeerGroups.PeerGroup.Timers.State.hold_time:type_name -> ywrapper.Decimal64Value
	599,  // 942: openconfig.Bgp.PeerGroups.PeerGroup.Timers.State.keepalive_interval:type_name -> ywrapper.Decimal64Value
	599,  // 943: openconfig.Bgp.PeerGroups.PeerGroup.Timers.State.minimum_advertisement_interval:type_name -> ywrapper.Decimal64Value
	596,  // 944: openconfig.Bgp.PeerGroups.PeerGroup.Transport.Config.local_address:type_name -> ywrapper.StringValue
	598,  // 945: openconfig.Bgp.PeerGroups.PeerGroup.Transport.Config.mtu_discovery:type_name -> ywrapper.BoolValue
	598,  // 946: openconfig.Bgp.PeerGroups.PeerGroup.Transport.Config.passive_mode:type_name -> ywrapper.BoolValue
	595,  // 947: openconfig.Bgp.PeerGroups.PeerGroup.Transport.Config.tcp_mss:type_name -> ywrapper.UintValue
	596,  // 948: openconfig.Bgp.PeerGroups.PeerGroup.Transport.State.local_address:type_name -> ywrapper.StringValue
	598,  // 949: openconfig.Bgp.PeerGroups.PeerGroup.Transport.State.mtu_discovery:type_name -> ywrapper.BoolValue
	598,  // 950: openconfig.Bgp.PeerGroups.PeerGroup.Transport.State.passive_mode:type_name -> ywrapper.BoolValue
	595,  // 951: openconfig.Bgp.PeerGroups.PeerGroup.Transport.State.tcp_mss:type_name -> ywrapper.UintValue
	598,  // 952: openconfig.Bgp.PeerGroups.PeerGroup.UseMultiplePaths.Config.enabled:type_name -> ywrapper.BoolValue
	338,  // 953: openconfig.Bgp.PeerGroups.PeerGroup.UseMultiplePaths.Ebgp.config:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.UseMultiplePaths.Ebgp.Config
	339,  // 954: openconfig.Bgp.PeerGroups.PeerGroup.UseMultiplePaths.Ebgp.state:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.UseMultiplePaths.Ebgp.State
	340,  // 955: openconfig.Bgp.PeerGroups.PeerGroup.UseMultiplePaths.Ibgp.config:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.UseMultiplePaths.Ibgp.Config
	341,  // 956: openconfig.Bgp.PeerGroups.PeerGroup.UseMultiplePaths.Ibgp.state:type_name -> openconfig.Bgp.PeerGroups.PeerGroup.UseMultiplePaths.Ibgp.State
	598,  // 957: openconfig.Bgp.PeerGroups.PeerGroup.UseMultiplePaths.State.enabled:type_name -> ywrapper.BoolValue
	598,  // 958: openconfig.Bgp.PeerGroups.PeerGroup.UseMultiplePaths.Ebgp.Config.allow_multiple_as:type_name -> ywrapper.BoolValue
	595,  // 959: openconfig.Bgp.PeerGroups.PeerGroup.UseMultiplePaths.Ebgp.Config.maximum_paths:type_name -> ywrapper.UintValue
	598,  // 960: openconfig.Bgp.PeerGroups.PeerGroup.UseMultiplePaths.Ebgp.State.allow_multiple_as:type_name -> ywrapper.BoolValue
	595,  // 961: openconfig.Bgp.PeerGroups.PeerGroup.UseMultiplePaths.Ebgp.State.maximum_paths:type_name -> ywrapper.UintValue
	595,  // 962: openconfig.Bgp.PeerGroups.PeerGroup.UseMultiplePaths.Ibgp.Config.maximum_paths:type_name -> ywrapper.UintValue
	595,  // 963: openconfig.Bgp.PeerGroups.PeerGroup.UseMultiplePaths.Ibgp.State.maximum_paths:type_name -> ywrapper.UintValue
	347,  // 964: openconfig.Bgp.Rib.AfiSafis.afi_safi:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafiKey
	556,  // 965: openconfig.Bgp.Rib.AttrSets.attr_set:type_name -> openconfig.Bgp.Rib.AttrSets.AttrSetKey
	588,  // 966: openconfig.Bgp.Rib.Communities.community:type_name -> openconfig.Bgp.Rib.Communities.CommunityKey
	592,  // 967: openconfig.Bgp.Rib.ExtCommunities.ext_community:type_name -> openconfig.Bgp.Rib.ExtCommunities.ExtCommunityKey
	348,  // 968: openconfig.Bgp.Rib.AfiSafis.AfiSafi.ipv4_srte_policy:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy
	349,  // 969: openconfig.Bgp.Rib.AfiSafis.AfiSafi.ipv4_unicast:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast
	350,  // 970: openconfig.Bgp.Rib.AfiSafis.AfiSafi.ipv6_srte_policy:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy
	351,  // 971: openconfig.Bgp.Rib.AfiSafis.AfiSafi.ipv6_unicast:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast
	352,  // 972: openconfig.Bgp.Rib.AfiSafis.AfiSafi.state:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.State
	597,  // 973: openconfig.Bgp.Rib.AfiSafis.AfiSafiKey.afi_safi_name:type_name -> openconfig.OpenconfigBgpTypesAFISAFITYPE
	346,  // 974: openconfig.Bgp.Rib.AfiSafis.AfiSafiKey.afi_safi:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi
	353,  // 975: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.loc_rib:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.LocRib
	354,  // 976: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.neighbors:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors
	402,  // 977: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.loc_rib:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib
	403,  // 978: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.neighbors:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors
	456,  // 979: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.loc_rib:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.LocRib
	457,  // 980: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.neighbors:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors
	505,  // 981: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.loc_rib:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib
	506,  // 982: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.neighbors:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors
	597,  // 983: openconfig.Bgp.Rib.AfiSafis.AfiSafi.State.afi_safi_name:type_name -> openconfig.OpenconfigBgpTypesAFISAFITYPE
	355,  // 984: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.LocRib.routes:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.LocRib.Routes
	364,  // 985: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.neighbor:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.NeighborKey
	357,  // 986: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.LocRib.Routes.route:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.LocRib.Routes.RouteKey
	358,  // 987: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.LocRib.Routes.Route.state:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.LocRib.Routes.Route.State
	359,  // 988: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.LocRib.Routes.Route.unknown_attributes:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.LocRib.Routes.Route.UnknownAttributes
	356,  // 989: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.LocRib.Routes.RouteKey.route:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.LocRib.Routes.Route
	595,  // 990: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.LocRib.Routes.Route.State.attr_index:type_name -> ywrapper.UintValue
	595,  // 991: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.LocRib.Routes.Route.State.color:type_name -> ywrapper.UintValue
	595,  // 992: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.LocRib.Routes.Route.State.community_index:type_name -> ywrapper.UintValue
	596,  // 993: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.LocRib.Routes.Route.State.endpoint:type_name -> ywrapper.StringValue
	595,  // 994: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.LocRib.Routes.Route.State.ext_community_index:type_name -> ywrapper.UintValue
	607,  // 995: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.LocRib.Routes.Route.State.invalid_reason:type_name -> openconfig.OpenconfigRibBgpTypesINVALIDROUTEREASON
	595,  // 996: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.LocRib.Routes.Route.State.last_modified:type_name -> ywrapper.UintValue
	595,  // 997: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.LocRib.Routes.Route.State.path_id:type_name -> ywrapper.UintValue
	598,  // 998: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.LocRib.Routes.Route.State.valid_route:type_name -> ywrapper.BoolValue
	361,  // 999: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.LocRib.Routes.Route.UnknownAttributes.unknown_attribute:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.LocRib.Routes.Route.UnknownAttributes.UnknownAttributeKey
	362,  // 1000: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.LocRib.Routes.Route.UnknownAttributes.UnknownAttribute.state:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.LocRib.Routes.Route.UnknownAttributes.UnknownAttribute.State
	360,  // 1001: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.LocRib.Routes.Route.UnknownAttributes.UnknownAttributeKey.unknown_attribute:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.LocRib.Routes.Route.UnknownAttributes.UnknownAttribute
	595,  // 1002: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.LocRib.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_len:type_name -> ywrapper.UintValue
	595,  // 1003: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.LocRib.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_type:type_name -> ywrapper.UintValue
	608,  // 1004: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.LocRib.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_value:type_name -> ywrapper.BytesValue
	598,  // 1005: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.LocRib.Routes.Route.UnknownAttributes.UnknownAttribute.State.extended:type_name -> ywrapper.BoolValue
	598,  // 1006: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.LocRib.Routes.Route.UnknownAttributes.UnknownAttribute.State.optional:type_name -> ywrapper.BoolValue
	598,  // 1007: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.LocRib.Routes.Route.UnknownAttributes.UnknownAttribute.State.partial:type_name -> ywrapper.BoolValue
	598,  // 1008: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.LocRib.Routes.Route.UnknownAttributes.UnknownAttribute.State.transitive:type_name -> ywrapper.BoolValue
	365,  // 1009: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.adj_rib_in_post:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPost
	366,  // 1010: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.adj_rib_in_pre:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPre
	367,  // 1011: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.adj_rib_out_post:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPost
	368,  // 1012: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.adj_rib_out_pre:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPre
	369,  // 1013: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.state:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.State
	363,  // 1014: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.NeighborKey.neighbor:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor
	370,  // 1015: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPost.routes:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes
	378,  // 1016: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPre.routes:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes
	386,  // 1017: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.routes:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes
	394,  // 1018: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.routes:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes
	596,  // 1019: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.State.neighbor_address:type_name -> ywrapper.StringValue
	372,  // 1020: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.route:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.RouteKey
	373,  // 1021: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.Route.state:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.Route.State
	374,  // 1022: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.Route.unknown_attributes:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes
	371,  // 1023: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.RouteKey.route:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.Route
	595,  // 1024: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.Route.State.attr_index:type_name -> ywrapper.UintValue
	598,  // 1025: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.Route.State.best_path:type_name -> ywrapper.BoolValue
	595,  // 1026: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.Route.State.color:type_name -> ywrapper.UintValue
	595,  // 1027: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.Route.State.community_index:type_name -> ywrapper.UintValue
	596,  // 1028: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.Route.State.endpoint:type_name -> ywrapper.StringValue
	595,  // 1029: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.Route.State.ext_community_index:type_name -> ywrapper.UintValue
	607,  // 1030: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.Route.State.invalid_reason:type_name -> openconfig.OpenconfigRibBgpTypesINVALIDROUTEREASON
	595,  // 1031: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.Route.State.last_modified:type_name -> ywrapper.UintValue
	595,  // 1032: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.Route.State.path_id:type_name -> ywrapper.UintValue
	598,  // 1033: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.Route.State.valid_route:type_name -> ywrapper.BoolValue
	376,  // 1034: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.unknown_attribute:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttributeKey
	377,  // 1035: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttribute.state:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttribute.State
	375,  // 1036: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttributeKey.unknown_attribute:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttribute
	595,  // 1037: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_len:type_name -> ywrapper.UintValue
	595,  // 1038: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_type:type_name -> ywrapper.UintValue
	608,  // 1039: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_value:type_name -> ywrapper.BytesValue
	598,  // 1040: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.extended:type_name -> ywrapper.BoolValue
	598,  // 1041: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.optional:type_name -> ywrapper.BoolValue
	598,  // 1042: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.partial:type_name -> ywrapper.BoolValue
	598,  // 1043: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.transitive:type_name -> ywrapper.BoolValue
	380,  // 1044: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes.route:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes.RouteKey
	381,  // 1045: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes.Route.state:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes.Route.State
	382,  // 1046: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes.Route.unknown_attributes:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes
	379,  // 1047: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes.RouteKey.route:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes.Route
	595,  // 1048: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes.Route.State.attr_index:type_name -> ywrapper.UintValue
	595,  // 1049: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes.Route.State.color:type_name -> ywrapper.UintValue
	595,  // 1050: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes.Route.State.community_index:type_name -> ywrapper.UintValue
	596,  // 1051: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes.Route.State.endpoint:type_name -> ywrapper.StringValue
	595,  // 1052: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes.Route.State.ext_community_index:type_name -> ywrapper.UintValue
	607,  // 1053: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes.Route.State.invalid_reason:type_name -> openconfig.OpenconfigRibBgpTypesINVALIDROUTEREASON
	595,  // 1054: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes.Route.State.last_modified:type_name -> ywrapper.UintValue
	595,  // 1055: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes.Route.State.path_id:type_name -> ywrapper.UintValue
	598,  // 1056: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes.Route.State.valid_route:type_name -> ywrapper.BoolValue
	384,  // 1057: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.unknown_attribute:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttributeKey
	385,  // 1058: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttribute.state:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttribute.State
	383,  // 1059: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttributeKey.unknown_attribute:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttribute
	595,  // 1060: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_len:type_name -> ywrapper.UintValue
	595,  // 1061: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_type:type_name -> ywrapper.UintValue
	608,  // 1062: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_value:type_name -> ywrapper.BytesValue
	598,  // 1063: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.extended:type_name -> ywrapper.BoolValue
	598,  // 1064: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.optional:type_name -> ywrapper.BoolValue
	598,  // 1065: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.partial:type_name -> ywrapper.BoolValue
	598,  // 1066: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.transitive:type_name -> ywrapper.BoolValue
	388,  // 1067: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes.route:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes.RouteKey
	389,  // 1068: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.state:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.State
	390,  // 1069: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.unknown_attributes:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes
	387,  // 1070: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes.RouteKey.route:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes.Route
	595,  // 1071: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.State.attr_index:type_name -> ywrapper.UintValue
	595,  // 1072: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.State.color:type_name -> ywrapper.UintValue
	595,  // 1073: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.State.community_index:type_name -> ywrapper.UintValue
	596,  // 1074: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.State.endpoint:type_name -> ywrapper.StringValue
	595,  // 1075: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.State.ext_community_index:type_name -> ywrapper.UintValue
	607,  // 1076: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.State.invalid_reason:type_name -> openconfig.OpenconfigRibBgpTypesINVALIDROUTEREASON
	595,  // 1077: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.State.last_modified:type_name -> ywrapper.UintValue
	595,  // 1078: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.State.path_id:type_name -> ywrapper.UintValue
	598,  // 1079: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.State.valid_route:type_name -> ywrapper.BoolValue
	392,  // 1080: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.unknown_attribute:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttributeKey
	393,  // 1081: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttribute.state:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttribute.State
	391,  // 1082: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttributeKey.unknown_attribute:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttribute
	595,  // 1083: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_len:type_name -> ywrapper.UintValue
	595,  // 1084: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_type:type_name -> ywrapper.UintValue
	608,  // 1085: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_value:type_name -> ywrapper.BytesValue
	598,  // 1086: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.extended:type_name -> ywrapper.BoolValue
	598,  // 1087: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.optional:type_name -> ywrapper.BoolValue
	598,  // 1088: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.partial:type_name -> ywrapper.BoolValue
	598,  // 1089: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.transitive:type_name -> ywrapper.BoolValue
	396,  // 1090: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes.route:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes.RouteKey
	397,  // 1091: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.state:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.State
	398,  // 1092: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.unknown_attributes:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes
	395,  // 1093: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes.RouteKey.route:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes.Route
	595,  // 1094: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.State.attr_index:type_name -> ywrapper.UintValue
	595,  // 1095: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.State.color:type_name -> ywrapper.UintValue
	595,  // 1096: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.State.community_index:type_name -> ywrapper.UintValue
	596,  // 1097: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.State.endpoint:type_name -> ywrapper.StringValue
	595,  // 1098: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.State.ext_community_index:type_name -> ywrapper.UintValue
	607,  // 1099: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.State.invalid_reason:type_name -> openconfig.OpenconfigRibBgpTypesINVALIDROUTEREASON
	595,  // 1100: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.State.last_modified:type_name -> ywrapper.UintValue
	595,  // 1101: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.State.path_id:type_name -> ywrapper.UintValue
	598,  // 1102: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.State.valid_route:type_name -> ywrapper.BoolValue
	400,  // 1103: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.unknown_attribute:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttributeKey
	401,  // 1104: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttribute.state:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttribute.State
	399,  // 1105: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttributeKey.unknown_attribute:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttribute
	595,  // 1106: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_len:type_name -> ywrapper.UintValue
	595,  // 1107: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_type:type_name -> ywrapper.UintValue
	608,  // 1108: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_value:type_name -> ywrapper.BytesValue
	598,  // 1109: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.extended:type_name -> ywrapper.BoolValue
	598,  // 1110: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.optional:type_name -> ywrapper.BoolValue
	598,  // 1111: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.partial:type_name -> ywrapper.BoolValue
	598,  // 1112: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.transitive:type_name -> ywrapper.BoolValue
	404,  // 1113: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.routes:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes
	405,  // 1114: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.state:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.State
	414,  // 1115: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.neighbor:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.NeighborKey
	407,  // 1116: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.route:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.RouteKey
	408,  // 1117: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.Route.state:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.Route.State
	409,  // 1118: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.Route.unknown_attributes:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.Route.UnknownAttributes
	609,  // 1119: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.RouteKey.origin_openconfigpolicytypesinstallprotocoltype:type_name -> openconfig.OpenconfigPolicyTypesINSTALLPROTOCOLTYPE
	406,  // 1120: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.RouteKey.route:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.Route
	595,  // 1121: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.Route.State.attr_index:type_name -> ywrapper.UintValue
	595,  // 1122: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.Route.State.community_index:type_name -> ywrapper.UintValue
	595,  // 1123: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.Route.State.ext_community_index:type_name -> ywrapper.UintValue
	607,  // 1124: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.Route.State.invalid_reason:type_name -> openconfig.OpenconfigRibBgpTypesINVALIDROUTEREASON
	595,  // 1125: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.Route.State.last_modified:type_name -> ywrapper.UintValue
	609,  // 1126: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.Route.State.origin_openconfigpolicytypesinstallprotocoltype:type_name -> openconfig.OpenconfigPolicyTypesINSTALLPROTOCOLTYPE
	595,  // 1127: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.Route.State.path_id:type_name -> ywrapper.UintValue
	596,  // 1128: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.Route.State.prefix:type_name -> ywrapper.StringValue
	598,  // 1129: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.Route.State.valid_route:type_name -> ywrapper.BoolValue
	411,  // 1130: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.Route.UnknownAttributes.unknown_attribute:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.Route.UnknownAttributes.UnknownAttributeKey
	412,  // 1131: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.Route.UnknownAttributes.UnknownAttribute.state:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.Route.UnknownAttributes.UnknownAttribute.State
	410,  // 1132: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.Route.UnknownAttributes.UnknownAttributeKey.unknown_attribute:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.Route.UnknownAttributes.UnknownAttribute
	595,  // 1133: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_len:type_name -> ywrapper.UintValue
	595,  // 1134: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_type:type_name -> ywrapper.UintValue
	608,  // 1135: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_value:type_name -> ywrapper.BytesValue
	598,  // 1136: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.Route.UnknownAttributes.UnknownAttribute.State.extended:type_name -> ywrapper.BoolValue
	598,  // 1137: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.Route.UnknownAttributes.UnknownAttribute.State.optional:type_name -> ywrapper.BoolValue
	598,  // 1138: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.Route.UnknownAttributes.UnknownAttribute.State.partial:type_name -> ywrapper.BoolValue
	598,  // 1139: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.Route.UnknownAttributes.UnknownAttribute.State.transitive:type_name -> ywrapper.BoolValue
	415,  // 1140: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.adj_rib_in_post:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost
	416,  // 1141: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.adj_rib_in_pre:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre
	417,  // 1142: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.adj_rib_out_post:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost
	418,  // 1143: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.adj_rib_out_pre:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre
	419,  // 1144: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.state:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.State
	413,  // 1145: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.NeighborKey.neighbor:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor
	420,  // 1146: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.routes:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes
	421,  // 1147: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.state:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.State
	429,  // 1148: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.routes:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes
	430,  // 1149: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.state:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.State
	438,  // 1150: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.routes:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes
	439,  // 1151: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.state:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.State
	447,  // 1152: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.routes:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes
	448,  // 1153: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.state:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.State
	596,  // 1154: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.State.neighbor_address:type_name -> ywrapper.StringValue
	423,  // 1155: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.route:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.RouteKey
	424,  // 1156: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.state:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.State
	425,  // 1157: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.unknown_attributes:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes
	422,  // 1158: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.RouteKey.route:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route
	595,  // 1159: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.State.attr_index:type_name -> ywrapper.UintValue
	598,  // 1160: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.State.best_path:type_name -> ywrapper.BoolValue
	595,  // 1161: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.State.community_index:type_name -> ywrapper.UintValue
	595,  // 1162: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.State.ext_community_index:type_name -> ywrapper.UintValue
	607,  // 1163: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.State.invalid_reason:type_name -> openconfig.OpenconfigRibBgpTypesINVALIDROUTEREASON
	595,  // 1164: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.State.last_modified:type_name -> ywrapper.UintValue
	595,  // 1165: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.State.path_id:type_name -> ywrapper.UintValue
	596,  // 1166: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.State.prefix:type_name -> ywrapper.StringValue
	598,  // 1167: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.State.valid_route:type_name -> ywrapper.BoolValue
	427,  // 1168: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.unknown_attribute:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttributeKey
	428,  // 1169: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttribute.state:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttribute.State
	426,  // 1170: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttributeKey.unknown_attribute:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttribute
	595,  // 1171: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_len:type_name -> ywrapper.UintValue
	595,  // 1172: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_type:type_name -> ywrapper.UintValue
	608,  // 1173: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_value:type_name -> ywrapper.BytesValue
	598,  // 1174: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.extended:type_name -> ywrapper.BoolValue
	598,  // 1175: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.optional:type_name -> ywrapper.BoolValue
	598,  // 1176: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.partial:type_name -> ywrapper.BoolValue
	598,  // 1177: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.transitive:type_name -> ywrapper.BoolValue
	432,  // 1178: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.route:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.RouteKey
	433,  // 1179: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.state:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.State
	434,  // 1180: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.unknown_attributes:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes
	431,  // 1181: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.RouteKey.route:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route
	595,  // 1182: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.State.attr_index:type_name -> ywrapper.UintValue
	595,  // 1183: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.State.community_index:type_name -> ywrapper.UintValue
	595,  // 1184: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.State.ext_community_index:type_name -> ywrapper.UintValue
	607,  // 1185: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.State.invalid_reason:type_name -> openconfig.OpenconfigRibBgpTypesINVALIDROUTEREASON
	595,  // 1186: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.State.last_modified:type_name -> ywrapper.UintValue
	595,  // 1187: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.State.path_id:type_name -> ywrapper.UintValue
	596,  // 1188: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.State.prefix:type_name -> ywrapper.StringValue
	598,  // 1189: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.State.valid_route:type_name -> ywrapper.BoolValue
	436,  // 1190: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.unknown_attribute:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttributeKey
	437,  // 1191: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttribute.state:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttribute.State
	435,  // 1192: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttributeKey.unknown_attribute:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttribute
	595,  // 1193: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_len:type_name -> ywrapper.UintValue
	595,  // 1194: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_type:type_name -> ywrapper.UintValue
	608,  // 1195: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_value:type_name -> ywrapper.BytesValue
	598,  // 1196: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.extended:type_name -> ywrapper.BoolValue
	598,  // 1197: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.optional:type_name -> ywrapper.BoolValue
	598,  // 1198: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.partial:type_name -> ywrapper.BoolValue
	598,  // 1199: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.transitive:type_name -> ywrapper.BoolValue
	441,  // 1200: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.route:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.RouteKey
	442,  // 1201: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.state:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.State
	443,  // 1202: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.unknown_attributes:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes
	440,  // 1203: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.RouteKey.route:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route
	595,  // 1204: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.State.attr_index:type_name -> ywrapper.UintValue
	595,  // 1205: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.State.community_index:type_name -> ywrapper.UintValue
	595,  // 1206: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.State.ext_community_index:type_name -> ywrapper.UintValue
	607,  // 1207: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.State.invalid_reason:type_name -> openconfig.OpenconfigRibBgpTypesINVALIDROUTEREASON
	595,  // 1208: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.State.last_modified:type_name -> ywrapper.UintValue
	595,  // 1209: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.State.path_id:type_name -> ywrapper.UintValue
	596,  // 1210: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.State.prefix:type_name -> ywrapper.StringValue
	598,  // 1211: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.State.valid_route:type_name -> ywrapper.BoolValue
	445,  // 1212: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.unknown_attribute:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttributeKey
	446,  // 1213: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttribute.state:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttribute.State
	444,  // 1214: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttributeKey.unknown_attribute:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttribute
	595,  // 1215: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_len:type_name -> ywrapper.UintValue
	595,  // 1216: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_type:type_name -> ywrapper.UintValue
	608,  // 1217: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_value:type_name -> ywrapper.BytesValue
	598,  // 1218: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.extended:type_name -> ywrapper.BoolValue
	598,  // 1219: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.optional:type_name -> ywrapper.BoolValue
	598,  // 1220: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.partial:type_name -> ywrapper.BoolValue
	598,  // 1221: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.transitive:type_name -> ywrapper.BoolValue
	450,  // 1222: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.route:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.RouteKey
	451,  // 1223: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.state:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.State
	452,  // 1224: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.unknown_attributes:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes
	449,  // 1225: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.RouteKey.route:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route
	595,  // 1226: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.State.attr_index:type_name -> ywrapper.UintValue
	595,  // 1227: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.State.community_index:type_name -> ywrapper.UintValue
	595,  // 1228: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.State.ext_community_index:type_name -> ywrapper.UintValue
	607,  // 1229: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.State.invalid_reason:type_name -> openconfig.OpenconfigRibBgpTypesINVALIDROUTEREASON
	595,  // 1230: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.State.last_modified:type_name -> ywrapper.UintValue
	595,  // 1231: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.State.path_id:type_name -> ywrapper.UintValue
	596,  // 1232: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.State.prefix:type_name -> ywrapper.StringValue
	598,  // 1233: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.State.valid_route:type_name -> ywrapper.BoolValue
	454,  // 1234: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.unknown_attribute:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttributeKey
	455,  // 1235: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttribute.state:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttribute.State
	453,  // 1236: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttributeKey.unknown_attribute:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttribute
	595,  // 1237: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_len:type_name -> ywrapper.UintValue
	595,  // 1238: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_type:type_name -> ywrapper.UintValue
	608,  // 1239: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_value:type_name -> ywrapper.BytesValue
	598,  // 1240: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.extended:type_name -> ywrapper.BoolValue
	598,  // 1241: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.optional:type_name -> ywrapper.BoolValue
	598,  // 1242: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.partial:type_name -> ywrapper.BoolValue
	598,  // 1243: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.transitive:type_name -> ywrapper.BoolValue
	458,  // 1244: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.LocRib.routes:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.LocRib.Routes
	467,  // 1245: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.neighbor:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.NeighborKey
	460,  // 1246: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.LocRib.Routes.route:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.LocRib.Routes.RouteKey
	461,  // 1247: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.LocRib.Routes.Route.state:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.LocRib.Routes.Route.State
	462,  // 1248: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.LocRib.Routes.Route.unknown_attributes:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.LocRib.Routes.Route.UnknownAttributes
	459,  // 1249: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.LocRib.Routes.RouteKey.route:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.LocRib.Routes.Route
	595,  // 1250: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.LocRib.Routes.Route.State.attr_index:type_name -> ywrapper.UintValue
	595,  // 1251: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.LocRib.Routes.Route.State.color:type_name -> ywrapper.UintValue
	595,  // 1252: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.LocRib.Routes.Route.State.community_index:type_name -> ywrapper.UintValue
	596,  // 1253: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.LocRib.Routes.Route.State.endpoint:type_name -> ywrapper.StringValue
	595,  // 1254: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.LocRib.Routes.Route.State.ext_community_index:type_name -> ywrapper.UintValue
	607,  // 1255: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.LocRib.Routes.Route.State.invalid_reason:type_name -> openconfig.OpenconfigRibBgpTypesINVALIDROUTEREASON
	595,  // 1256: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.LocRib.Routes.Route.State.last_modified:type_name -> ywrapper.UintValue
	595,  // 1257: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.LocRib.Routes.Route.State.path_id:type_name -> ywrapper.UintValue
	598,  // 1258: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.LocRib.Routes.Route.State.valid_route:type_name -> ywrapper.BoolValue
	464,  // 1259: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.LocRib.Routes.Route.UnknownAttributes.unknown_attribute:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.LocRib.Routes.Route.UnknownAttributes.UnknownAttributeKey
	465,  // 1260: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.LocRib.Routes.Route.UnknownAttributes.UnknownAttribute.state:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.LocRib.Routes.Route.UnknownAttributes.UnknownAttribute.State
	463,  // 1261: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.LocRib.Routes.Route.UnknownAttributes.UnknownAttributeKey.unknown_attribute:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.LocRib.Routes.Route.UnknownAttributes.UnknownAttribute
	595,  // 1262: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.LocRib.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_len:type_name -> ywrapper.UintValue
	595,  // 1263: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.LocRib.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_type:type_name -> ywrapper.UintValue
	608,  // 1264: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.LocRib.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_value:type_name -> ywrapper.BytesValue
	598,  // 1265: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.LocRib.Routes.Route.UnknownAttributes.UnknownAttribute.State.extended:type_name -> ywrapper.BoolValue
	598,  // 1266: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.LocRib.Routes.Route.UnknownAttributes.UnknownAttribute.State.optional:type_name -> ywrapper.BoolValue
	598,  // 1267: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.LocRib.Routes.Route.UnknownAttributes.UnknownAttribute.State.partial:type_name -> ywrapper.BoolValue
	598,  // 1268: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.LocRib.Routes.Route.UnknownAttributes.UnknownAttribute.State.transitive:type_name -> ywrapper.BoolValue
	468,  // 1269: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.adj_rib_in_post:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPost
	469,  // 1270: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.adj_rib_in_pre:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPre
	470,  // 1271: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.adj_rib_out_post:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPost
	471,  // 1272: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.adj_rib_out_pre:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPre
	472,  // 1273: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.state:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.State
	466,  // 1274: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.NeighborKey.neighbor:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor
	473,  // 1275: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPost.routes:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes
	481,  // 1276: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPre.routes:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes
	489,  // 1277: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.routes:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes
	497,  // 1278: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.routes:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes
	596,  // 1279: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.State.neighbor_address:type_name -> ywrapper.StringValue
	475,  // 1280: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.route:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.RouteKey
	476,  // 1281: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.Route.state:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.Route.State
	477,  // 1282: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.Route.unknown_attributes:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes
	474,  // 1283: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.RouteKey.route:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.Route
	595,  // 1284: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.Route.State.attr_index:type_name -> ywrapper.UintValue
	598,  // 1285: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.Route.State.best_path:type_name -> ywrapper.BoolValue
	595,  // 1286: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.Route.State.color:type_name -> ywrapper.UintValue
	595,  // 1287: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.Route.State.community_index:type_name -> ywrapper.UintValue
	596,  // 1288: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.Route.State.endpoint:type_name -> ywrapper.StringValue
	595,  // 1289: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.Route.State.ext_community_index:type_name -> ywrapper.UintValue
	607,  // 1290: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.Route.State.invalid_reason:type_name -> openconfig.OpenconfigRibBgpTypesINVALIDROUTEREASON
	595,  // 1291: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.Route.State.last_modified:type_name -> ywrapper.UintValue
	595,  // 1292: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.Route.State.path_id:type_name -> ywrapper.UintValue
	598,  // 1293: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.Route.State.valid_route:type_name -> ywrapper.BoolValue
	479,  // 1294: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.unknown_attribute:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttributeKey
	480,  // 1295: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttribute.state:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttribute.State
	478,  // 1296: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttributeKey.unknown_attribute:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttribute
	595,  // 1297: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_len:type_name -> ywrapper.UintValue
	595,  // 1298: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_type:type_name -> ywrapper.UintValue
	608,  // 1299: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_value:type_name -> ywrapper.BytesValue
	598,  // 1300: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.extended:type_name -> ywrapper.BoolValue
	598,  // 1301: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.optional:type_name -> ywrapper.BoolValue
	598,  // 1302: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.partial:type_name -> ywrapper.BoolValue
	598,  // 1303: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.transitive:type_name -> ywrapper.BoolValue
	483,  // 1304: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes.route:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes.RouteKey
	484,  // 1305: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes.Route.state:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes.Route.State
	485,  // 1306: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes.Route.unknown_attributes:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes
	482,  // 1307: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes.RouteKey.route:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes.Route
	595,  // 1308: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes.Route.State.attr_index:type_name -> ywrapper.UintValue
	595,  // 1309: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes.Route.State.color:type_name -> ywrapper.UintValue
	595,  // 1310: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes.Route.State.community_index:type_name -> ywrapper.UintValue
	596,  // 1311: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes.Route.State.endpoint:type_name -> ywrapper.StringValue
	595,  // 1312: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes.Route.State.ext_community_index:type_name -> ywrapper.UintValue
	607,  // 1313: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes.Route.State.invalid_reason:type_name -> openconfig.OpenconfigRibBgpTypesINVALIDROUTEREASON
	595,  // 1314: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes.Route.State.last_modified:type_name -> ywrapper.UintValue
	595,  // 1315: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes.Route.State.path_id:type_name -> ywrapper.UintValue
	598,  // 1316: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes.Route.State.valid_route:type_name -> ywrapper.BoolValue
	487,  // 1317: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.unknown_attribute:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttributeKey
	488,  // 1318: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttribute.state:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttribute.State
	486,  // 1319: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttributeKey.unknown_attribute:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttribute
	595,  // 1320: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_len:type_name -> ywrapper.UintValue
	595,  // 1321: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_type:type_name -> ywrapper.UintValue
	608,  // 1322: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_value:type_name -> ywrapper.BytesValue
	598,  // 1323: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.extended:type_name -> ywrapper.BoolValue
	598,  // 1324: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.optional:type_name -> ywrapper.BoolValue
	598,  // 1325: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.partial:type_name -> ywrapper.BoolValue
	598,  // 1326: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.transitive:type_name -> ywrapper.BoolValue
	491,  // 1327: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes.route:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes.RouteKey
	492,  // 1328: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.state:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.State
	493,  // 1329: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.unknown_attributes:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes
	490,  // 1330: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes.RouteKey.route:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes.Route
	595,  // 1331: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.State.attr_index:type_name -> ywrapper.UintValue
	595,  // 1332: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.State.color:type_name -> ywrapper.UintValue
	595,  // 1333: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.State.community_index:type_name -> ywrapper.UintValue
	596,  // 1334: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.State.endpoint:type_name -> ywrapper.StringValue
	595,  // 1335: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.State.ext_community_index:type_name -> ywrapper.UintValue
	607,  // 1336: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.State.invalid_reason:type_name -> openconfig.OpenconfigRibBgpTypesINVALIDROUTEREASON
	595,  // 1337: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.State.last_modified:type_name -> ywrapper.UintValue
	595,  // 1338: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.State.path_id:type_name -> ywrapper.UintValue
	598,  // 1339: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.State.valid_route:type_name -> ywrapper.BoolValue
	495,  // 1340: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.unknown_attribute:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttributeKey
	496,  // 1341: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttribute.state:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttribute.State
	494,  // 1342: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttributeKey.unknown_attribute:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttribute
	595,  // 1343: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_len:type_name -> ywrapper.UintValue
	595,  // 1344: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_type:type_name -> ywrapper.UintValue
	608,  // 1345: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_value:type_name -> ywrapper.BytesValue
	598,  // 1346: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.extended:type_name -> ywrapper.BoolValue
	598,  // 1347: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.optional:type_name -> ywrapper.BoolValue
	598,  // 1348: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.partial:type_name -> ywrapper.BoolValue
	598,  // 1349: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.transitive:type_name -> ywrapper.BoolValue
	499,  // 1350: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes.route:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes.RouteKey
	500,  // 1351: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.state:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.State
	501,  // 1352: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.unknown_attributes:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes
	498,  // 1353: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes.RouteKey.route:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes.Route
	595,  // 1354: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.State.attr_index:type_name -> ywrapper.UintValue
	595,  // 1355: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.State.color:type_name -> ywrapper.UintValue
	595,  // 1356: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.State.community_index:type_name -> ywrapper.UintValue
	596,  // 1357: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.State.endpoint:type_name -> ywrapper.StringValue
	595,  // 1358: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.State.ext_community_index:type_name -> ywrapper.UintValue
	607,  // 1359: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.State.invalid_reason:type_name -> openconfig.OpenconfigRibBgpTypesINVALIDROUTEREASON
	595,  // 1360: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.State.last_modified:type_name -> ywrapper.UintValue
	595,  // 1361: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.State.path_id:type_name -> ywrapper.UintValue
	598,  // 1362: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.State.valid_route:type_name -> ywrapper.BoolValue
	503,  // 1363: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.unknown_attribute:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttributeKey
	504,  // 1364: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttribute.state:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttribute.State
	502,  // 1365: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttributeKey.unknown_attribute:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttribute
	595,  // 1366: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_len:type_name -> ywrapper.UintValue
	595,  // 1367: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_type:type_name -> ywrapper.UintValue
	608,  // 1368: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_value:type_name -> ywrapper.BytesValue
	598,  // 1369: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.extended:type_name -> ywrapper.BoolValue
	598,  // 1370: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.optional:type_name -> ywrapper.BoolValue
	598,  // 1371: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.partial:type_name -> ywrapper.BoolValue
	598,  // 1372: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6SrtePolicy.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.transitive:type_name -> ywrapper.BoolValue
	507,  // 1373: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.routes:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes
	508,  // 1374: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.state:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.State
	517,  // 1375: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.neighbor:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.NeighborKey
	510,  // 1376: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.route:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.RouteKey
	511,  // 1377: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.Route.state:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.Route.State
	512,  // 1378: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.Route.unknown_attributes:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.Route.UnknownAttributes
	609,  // 1379: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.RouteKey.origin_openconfigpolicytypesinstallprotocoltype:type_name -> openconfig.OpenconfigPolicyTypesINSTALLPROTOCOLTYPE
	509,  // 1380: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.RouteKey.route:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.Route
	595,  // 1381: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.Route.State.attr_index:type_name -> ywrapper.UintValue
	595,  // 1382: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.Route.State.community_index:type_name -> ywrapper.UintValue
	595,  // 1383: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.Route.State.ext_community_index:type_name -> ywrapper.UintValue
	607,  // 1384: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.Route.State.invalid_reason:type_name -> openconfig.OpenconfigRibBgpTypesINVALIDROUTEREASON
	595,  // 1385: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.Route.State.last_modified:type_name -> ywrapper.UintValue
	609,  // 1386: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.Route.State.origin_openconfigpolicytypesinstallprotocoltype:type_name -> openconfig.OpenconfigPolicyTypesINSTALLPROTOCOLTYPE
	595,  // 1387: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.Route.State.path_id:type_name -> ywrapper.UintValue
	596,  // 1388: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.Route.State.prefix:type_name -> ywrapper.StringValue
	598,  // 1389: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.Route.State.valid_route:type_name -> ywrapper.BoolValue
	514,  // 1390: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.Route.UnknownAttributes.unknown_attribute:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.Route.UnknownAttributes.UnknownAttributeKey
	515,  // 1391: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.Route.UnknownAttributes.UnknownAttribute.state:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.Route.UnknownAttributes.UnknownAttribute.State
	513,  // 1392: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.Route.UnknownAttributes.UnknownAttributeKey.unknown_attribute:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.Route.UnknownAttributes.UnknownAttribute
	595,  // 1393: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_len:type_name -> ywrapper.UintValue
	595,  // 1394: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_type:type_name -> ywrapper.UintValue
	608,  // 1395: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_value:type_name -> ywrapper.BytesValue
	598,  // 1396: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.Route.UnknownAttributes.UnknownAttribute.State.extended:type_name -> ywrapper.BoolValue
	598,  // 1397: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.Route.UnknownAttributes.UnknownAttribute.State.optional:type_name -> ywrapper.BoolValue
	598,  // 1398: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.Route.UnknownAttributes.UnknownAttribute.State.partial:type_name -> ywrapper.BoolValue
	598,  // 1399: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.Route.UnknownAttributes.UnknownAttribute.State.transitive:type_name -> ywrapper.BoolValue
	518,  // 1400: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.adj_rib_in_post:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost
	519,  // 1401: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.adj_rib_in_pre:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre
	520,  // 1402: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.adj_rib_out_post:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost
	521,  // 1403: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.adj_rib_out_pre:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre
	522,  // 1404: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.state:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.State
	516,  // 1405: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.NeighborKey.neighbor:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor
	523,  // 1406: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.routes:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes
	531,  // 1407: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.routes:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes
	539,  // 1408: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.routes:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes
	547,  // 1409: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.routes:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes
	596,  // 1410: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.State.neighbor_address:type_name -> ywrapper.StringValue
	525,  // 1411: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.route:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.RouteKey
	526,  // 1412: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.state:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.State
	527,  // 1413: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.unknown_attributes:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes
	524,  // 1414: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.RouteKey.route:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route
	595,  // 1415: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.State.attr_index:type_name -> ywrapper.UintValue
	598,  // 1416: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.State.best_path:type_name -> ywrapper.BoolValue
	595,  // 1417: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.State.community_index:type_name -> ywrapper.UintValue
	595,  // 1418: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.State.ext_community_index:type_name -> ywrapper.UintValue
	607,  // 1419: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.State.invalid_reason:type_name -> openconfig.OpenconfigRibBgpTypesINVALIDROUTEREASON
	595,  // 1420: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.State.last_modified:type_name -> ywrapper.UintValue
	595,  // 1421: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.State.path_id:type_name -> ywrapper.UintValue
	596,  // 1422: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.State.prefix:type_name -> ywrapper.StringValue
	598,  // 1423: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.State.valid_route:type_name -> ywrapper.BoolValue
	529,  // 1424: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.unknown_attribute:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttributeKey
	530,  // 1425: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttribute.state:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttribute.State
	528,  // 1426: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttributeKey.unknown_attribute:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttribute
	595,  // 1427: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_len:type_name -> ywrapper.UintValue
	595,  // 1428: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_type:type_name -> ywrapper.UintValue
	608,  // 1429: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_value:type_name -> ywrapper.BytesValue
	598,  // 1430: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.extended:type_name -> ywrapper.BoolValue
	598,  // 1431: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.optional:type_name -> ywrapper.BoolValue
	598,  // 1432: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.partial:type_name -> ywrapper.BoolValue
	598,  // 1433: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.transitive:type_name -> ywrapper.BoolValue
	533,  // 1434: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.route:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.RouteKey
	534,  // 1435: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.state:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.State
	535,  // 1436: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.unknown_attributes:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes
	532,  // 1437: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.RouteKey.route:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route
	595,  // 1438: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.State.attr_index:type_name -> ywrapper.UintValue
	595,  // 1439: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.State.community_index:type_name -> ywrapper.UintValue
	595,  // 1440: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.State.ext_community_index:type_name -> ywrapper.UintValue
	607,  // 1441: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.State.invalid_reason:type_name -> openconfig.OpenconfigRibBgpTypesINVALIDROUTEREASON
	595,  // 1442: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.State.last_modified:type_name -> ywrapper.UintValue
	595,  // 1443: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.State.path_id:type_name -> ywrapper.UintValue
	596,  // 1444: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.State.prefix:type_name -> ywrapper.StringValue
	598,  // 1445: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.State.valid_route:type_name -> ywrapper.BoolValue
	537,  // 1446: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.unknown_attribute:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttributeKey
	538,  // 1447: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttribute.state:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttribute.State
	536,  // 1448: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttributeKey.unknown_attribute:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttribute
	595,  // 1449: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_len:type_name -> ywrapper.UintValue
	595,  // 1450: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_type:type_name -> ywrapper.UintValue
	608,  // 1451: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_value:type_name -> ywrapper.BytesValue
	598,  // 1452: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.extended:type_name -> ywrapper.BoolValue
	598,  // 1453: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.optional:type_name -> ywrapper.BoolValue
	598,  // 1454: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.partial:type_name -> ywrapper.BoolValue
	598,  // 1455: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.transitive:type_name -> ywrapper.BoolValue
	541,  // 1456: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.route:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.RouteKey
	542,  // 1457: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.state:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.State
	543,  // 1458: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.unknown_attributes:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes
	540,  // 1459: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.RouteKey.route:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route
	595,  // 1460: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.State.attr_index:type_name -> ywrapper.UintValue
	595,  // 1461: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.State.community_index:type_name -> ywrapper.UintValue
	595,  // 1462: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.State.ext_community_index:type_name -> ywrapper.UintValue
	607,  // 1463: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.State.invalid_reason:type_name -> openconfig.OpenconfigRibBgpTypesINVALIDROUTEREASON
	595,  // 1464: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.State.last_modified:type_name -> ywrapper.UintValue
	595,  // 1465: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.State.path_id:type_name -> ywrapper.UintValue
	596,  // 1466: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.State.prefix:type_name -> ywrapper.StringValue
	598,  // 1467: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.State.valid_route:type_name -> ywrapper.BoolValue
	545,  // 1468: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.unknown_attribute:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttributeKey
	546,  // 1469: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttribute.state:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttribute.State
	544,  // 1470: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttributeKey.unknown_attribute:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttribute
	595,  // 1471: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_len:type_name -> ywrapper.UintValue
	595,  // 1472: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_type:type_name -> ywrapper.UintValue
	608,  // 1473: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_value:type_name -> ywrapper.BytesValue
	598,  // 1474: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.extended:type_name -> ywrapper.BoolValue
	598,  // 1475: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.optional:type_name -> ywrapper.BoolValue
	598,  // 1476: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.partial:type_name -> ywrapper.BoolValue
	598,  // 1477: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.transitive:type_name -> ywrapper.BoolValue
	549,  // 1478: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.route:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.RouteKey
	550,  // 1479: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.state:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.State
	551,  // 1480: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.unknown_attributes:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes
	548,  // 1481: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.RouteKey.route:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route
	595,  // 1482: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.State.attr_index:type_name -> ywrapper.UintValue
	595,  // 1483: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.State.community_index:type_name -> ywrapper.UintValue
	595,  // 1484: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.State.ext_community_index:type_name -> ywrapper.UintValue
	607,  // 1485: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.State.invalid_reason:type_name -> openconfig.OpenconfigRibBgpTypesINVALIDROUTEREASON
	595,  // 1486: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.State.last_modified:type_name -> ywrapper.UintValue
	595,  // 1487: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.State.path_id:type_name -> ywrapper.UintValue
	596,  // 1488: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.State.prefix:type_name -> ywrapper.StringValue
	598,  // 1489: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.State.valid_route:type_name -> ywrapper.BoolValue
	553,  // 1490: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.unknown_attribute:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttributeKey
	554,  // 1491: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttribute.state:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttribute.State
	552,  // 1492: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttributeKey.unknown_attribute:type_name -> openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttribute
	595,  // 1493: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_len:type_name -> ywrapper.UintValue
	595,  // 1494: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_type:type_name -> ywrapper.UintValue
	608,  // 1495: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_value:type_name -> ywrapper.BytesValue
	598,  // 1496: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.extended:type_name -> ywrapper.BoolValue
	598,  // 1497: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.optional:type_name -> ywrapper.BoolValue
	598,  // 1498: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.partial:type_name -> ywrapper.BoolValue
	598,  // 1499: openconfig.Bgp.Rib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.transitive:type_name -> ywrapper.BoolValue
	557,  // 1500: openconfig.Bgp.Rib.AttrSets.AttrSet.aggregator:type_name -> openconfig.Bgp.Rib.AttrSets.AttrSet.Aggregator
	559,  // 1501: openconfig.Bgp.Rib.AttrSets.AttrSet.as_path:type_name -> openconfig.Bgp.Rib.AttrSets.AttrSet.AsPath
	558,  // 1502: openconfig.Bgp.Rib.AttrSets.AttrSet.as4_path:type_name -> openconfig.Bgp.Rib.AttrSets.AttrSet.As4Path
	560,  // 1503: openconfig.Bgp.Rib.AttrSets.AttrSet.state:type_name -> openconfig.Bgp.Rib.AttrSets.AttrSet.State
	561,  // 1504: openconfig.Bgp.Rib.AttrSets.AttrSet.tunnel_encapsulation:type_name -> openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation
	555,  // 1505: openconfig.Bgp.Rib.AttrSets.AttrSetKey.attr_set:type_name -> openconfig.Bgp.Rib.AttrSets.AttrSet
	562,  // 1506: openconfig.Bgp.Rib.AttrSets.AttrSet.Aggregator.state:type_name -> openconfig.Bgp.Rib.AttrSets.AttrSet.Aggregator.State
	563,  // 1507: openconfig.Bgp.Rib.AttrSets.AttrSet.As4Path.as4_segment:type_name -> openconfig.Bgp.Rib.AttrSets.AttrSet.As4Path.As4Segment
	565,  // 1508: openconfig.Bgp.Rib.AttrSets.AttrSet.AsPath.as_segment:type_name -> openconfig.Bgp.Rib.AttrSets.AttrSet.AsPath.AsSegment
	595,  // 1509: openconfig.Bgp.Rib.AttrSets.AttrSet.State.aigp:type_name -> ywrapper.UintValue
	598,  // 1510: openconfig.Bgp.Rib.AttrSets.AttrSet.State.atomic_aggregate:type_name -> ywrapper.BoolValue
	596,  // 1511: openconfig.Bgp.Rib.AttrSets.AttrSet.State.cluster_list:type_name -> ywrapper.StringValue
	595,  // 1512: openconfig.Bgp.Rib.AttrSets.AttrSet.State.index:type_name -> ywrapper.UintValue
	595,  // 1513: openconfig.Bgp.Rib.AttrSets.AttrSet.State.local_pref:type_name -> ywrapper.UintValue
	595,  // 1514: openconfig.Bgp.Rib.AttrSets.AttrSet.State.med:type_name -> ywrapper.UintValue
	596,  // 1515: openconfig.Bgp.Rib.AttrSets.AttrSet.State.next_hop:type_name -> ywrapper.StringValue
	610,  // 1516: openconfig.Bgp.Rib.AttrSets.AttrSet.State.origin:type_name -> openconfig.OpenconfigRibBgpBgpOriginAttrType
	596,  // 1517: openconfig.Bgp.Rib.AttrSets.AttrSet.State.originator_id:type_name -> ywrapper.StringValue
	567,  // 1518: openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.tunnels:type_name -> openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels
	596,  // 1519: openconfig.Bgp.Rib.AttrSets.AttrSet.Aggregator.State.address:type_name -> ywrapper.StringValue
	595,  // 1520: openconfig.Bgp.Rib.AttrSets.AttrSet.Aggregator.State.as:type_name -> ywrapper.UintValue
	595,  // 1521: openconfig.Bgp.Rib.AttrSets.AttrSet.Aggregator.State.as4:type_name -> ywrapper.UintValue
	564,  // 1522: openconfig.Bgp.Rib.AttrSets.AttrSet.As4Path.As4Segment.state:type_name -> openconfig.Bgp.Rib.AttrSets.AttrSet.As4Path.As4Segment.State
	595,  // 1523: openconfig.Bgp.Rib.AttrSets.AttrSet.As4Path.As4Segment.State.member:type_name -> ywrapper.UintValue
	611,  // 1524: openconfig.Bgp.Rib.AttrSets.AttrSet.As4Path.As4Segment.State.type:type_name -> openconfig.OpenconfigRibBgpAsPathSegmentType
	566,  // 1525: openconfig.Bgp.Rib.AttrSets.AttrSet.AsPath.AsSegment.state:type_name -> openconfig.Bgp.Rib.AttrSets.AttrSet.AsPath.AsSegment.State
	595,  // 1526: openconfig.Bgp.Rib.AttrSets.AttrSet.AsPath.AsSegment.State.member:type_name -> ywrapper.UintValue
	611,  // 1527: openconfig.Bgp.Rib.AttrSets.AttrSet.AsPath.AsSegment.State.type:type_name -> openconfig.OpenconfigRibBgpAsPathSegmentType
	569,  // 1528: openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.tunnel:type_name -> openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.TunnelKey
	570,  // 1529: openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.state:type_name -> openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.State
	571,  // 1530: openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.subtlvs:type_name -> openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.Subtlvs
	612,  // 1531: openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.TunnelKey.type:type_name -> openconfig.OpenconfigRibBgpTypesTUNNELENCAPSULATIONTYPE
	568,  // 1532: openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.TunnelKey.tunnel:type_name -> openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel
	612,  // 1533: openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.State.type:type_name -> openconfig.OpenconfigRibBgpTypesTUNNELENCAPSULATIONTYPE
	573,  // 1534: openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.Subtlvs.subtlv:type_name -> openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.Subtlvs.SubtlvKey
	574,  // 1535: openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.Subtlvs.Subtlv.remote_endpoints:type_name -> openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.Subtlvs.Subtlv.RemoteEndpoints
	575,  // 1536: openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.Subtlvs.Subtlv.segment_lists:type_name -> openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.Subtlvs.Subtlv.SegmentLists
	576,  // 1537: openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.Subtlvs.Subtlv.state:type_name -> openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.Subtlvs.Subtlv.State
	613,  // 1538: openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.Subtlvs.SubtlvKey.type:type_name -> openconfig.OpenconfigRibBgpTypesTUNNELENCAPSULATIONSUBTLVTYPE
	572,  // 1539: openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.Subtlvs.SubtlvKey.subtlv:type_name -> openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.Subtlvs.Subtlv
	578,  // 1540: openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.Subtlvs.Subtlv.RemoteEndpoints.remote_endpoint:type_name -> openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.Subtlvs.Subtlv.RemoteEndpoints.RemoteEndpointKey
	581,  // 1541: openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.Subtlvs.Subtlv.SegmentLists.segment_list:type_name -> openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.Subtlvs.Subtlv.SegmentLists.SegmentListKey
	4,    // 1542: openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.Subtlvs.Subtlv.State.binding_sid_bindingsid:type_name -> openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.Subtlvs.Subtlv.State.BindingSid
	595,  // 1543: openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.Subtlvs.Subtlv.State.colors:type_name -> ywrapper.UintValue
	595,  // 1544: openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.Subtlvs.Subtlv.State.preference:type_name -> ywrapper.UintValue
	613,  // 1545: openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.Subtlvs.Subtlv.State.type:type_name -> openconfig.OpenconfigRibBgpTypesTUNNELENCAPSULATIONSUBTLVTYPE
	579,  // 1546: openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.Subtlvs.Subtlv.RemoteEndpoints.RemoteEndpoint.state:type_name -> openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.Subtlvs.Subtlv.RemoteEndpoints.RemoteEndpoint.State
	577,  // 1547: openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.Subtlvs.Subtlv.RemoteEndpoints.RemoteEndpointKey.remote_endpoint:type_name -> openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.Subtlvs.Subtlv.RemoteEndpoints.RemoteEndpoint
	595,  // 1548: openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.Subtlvs.Subtlv.RemoteEndpoints.RemoteEndpoint.State.as:type_name -> ywrapper.UintValue
	596,  // 1549: openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.Subtlvs.Subtlv.RemoteEndpoints.RemoteEndpoint.State.endpoint:type_name -> ywrapper.StringValue
	582,  // 1550: openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.Subtlvs.Subtlv.SegmentLists.SegmentList.segments:type_name -> openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.Subtlvs.Subtlv.SegmentLists.SegmentList.Segments
	583,  // 1551: openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.Subtlvs.Subtlv.SegmentLists.SegmentList.state:type_name -> openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.Subtlvs.Subtlv.SegmentLists.SegmentList.State
	580,  // 1552: openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.Subtlvs.Subtlv.SegmentLists.SegmentListKey.segment_list:type_name -> openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.Subtlvs.Subtlv.SegmentLists.SegmentList
	585,  // 1553: openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.Subtlvs.Subtlv.SegmentLists.SegmentList.Segments.segment:type_name -> openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.Subtlvs.Subtlv.SegmentLists.SegmentList.Segments.SegmentKey
	595,  // 1554: openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.Subtlvs.Subtlv.SegmentLists.SegmentList.State.instance_id:type_name -> ywrapper.UintValue
	595,  // 1555: openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.Subtlvs.Subtlv.SegmentLists.SegmentList.State.weight:type_name -> ywrapper.UintValue
	586,  // 1556: openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.Subtlvs.Subtlv.SegmentLists.SegmentList.Segments.Segment.state:type_name -> openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.Subtlvs.Subtlv.SegmentLists.SegmentList.Segments.Segment.State
	584,  // 1557: openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.Subtlvs.Subtlv.SegmentLists.SegmentList.Segments.SegmentKey.segment:type_name -> openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.Subtlvs.Subtlv.SegmentLists.SegmentList.Segments.Segment
	595,  // 1558: openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.Subtlvs.Subtlv.SegmentLists.SegmentList.Segments.Segment.State.index:type_name -> ywrapper.UintValue
	595,  // 1559: openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.Subtlvs.Subtlv.SegmentLists.SegmentList.Segments.Segment.State.local_interface_id:type_name -> ywrapper.UintValue
	596,  // 1560: openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.Subtlvs.Subtlv.SegmentLists.SegmentList.Segments.Segment.State.local_ipv4_address:type_name -> ywrapper.StringValue
	596,  // 1561: openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.Subtlvs.Subtlv.SegmentLists.SegmentList.Segments.Segment.State.local_ipv6_address:type_name -> ywrapper.StringValue
	598,  // 1562: openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.Subtlvs.Subtlv.SegmentLists.SegmentList.Segments.Segment.State.mpls_bos:type_name -> ywrapper.BoolValue
	595,  // 1563: openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.Subtlvs.Subtlv.SegmentLists.SegmentList.Segments.Segment.State.mpls_tc:type_name -> ywrapper.UintValue
	595,  // 1564: openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.Subtlvs.Subtlv.SegmentLists.SegmentList.Segments.Segment.State.mpls_ttl:type_name -> ywrapper.UintValue
	596,  // 1565: openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.Subtlvs.Subtlv.SegmentLists.SegmentList.Segments.Segment.State.remote_ipv4_address:type_name -> ywrapper.StringValue
	596,  // 1566: openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.Subtlvs.Subtlv.SegmentLists.SegmentList.Segments.Segment.State.remote_ipv6_address:type_name -> ywrapper.StringValue
	2,    // 1567: openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.Subtlvs.Subtlv.SegmentLists.SegmentList.Segments.Segment.State.sid_sid:type_name -> openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.Subtlvs.Subtlv.SegmentLists.SegmentList.Segments.Segment.State.Sid
	3,    // 1568: openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.Subtlvs.Subtlv.SegmentLists.SegmentList.Segments.Segment.State.type:type_name -> openconfig.Bgp.Rib.AttrSets.AttrSet.TunnelEncapsulation.Tunnels.Tunnel.Subtlvs.Subtlv.SegmentLists.SegmentList.Segments.Segment.State.Type
	589,  // 1569: openconfig.Bgp.Rib.Communities.Community.state:type_name -> openconfig.Bgp.Rib.Communities.Community.State
	587,  // 1570: openconfig.Bgp.Rib.Communities.CommunityKey.community:type_name -> openconfig.Bgp.Rib.Communities.Community
	590,  // 1571: openconfig.Bgp.Rib.Communities.Community.State.community:type_name -> openconfig.Bgp.Rib.Communities.Community.State.CommunityUnion
	595,  // 1572: openconfig.Bgp.Rib.Communities.Community.State.index:type_name -> ywrapper.UintValue
	614,  // 1573: openconfig.Bgp.Rib.Communities.Community.State.CommunityUnion.community_openconfigbgptypesbgpwellknownstdcommunity:type_name -> openconfig.OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY
	593,  // 1574: openconfig.Bgp.Rib.ExtCommunities.ExtCommunity.state:type_name -> openconfig.Bgp.Rib.ExtCommunities.ExtCommunity.State
	591,  // 1575: openconfig.Bgp.Rib.ExtCommunities.ExtCommunityKey.ext_community:type_name -> openconfig.Bgp.Rib.ExtCommunities.ExtCommunity
	594,  // 1576: openconfig.Bgp.Rib.ExtCommunities.ExtCommunity.State.ext_community:type_name -> openconfig.Bgp.Rib.ExtCommunities.ExtCommunity.State.ExtCommunityUnion
	595,  // 1577: openconfig.Bgp.Rib.ExtCommunities.ExtCommunity.State.index:type_name -> ywrapper.UintValue
	1578, // [1578:1578] is the sub-list for method output_type
	1578, // [1578:1578] is the sub-list for method input_type
	1578, // [1578:1578] is the sub-list for extension type_name
	1578, // [1578:1578] is the sub-list for extension extendee
	0,    // [0:1578] is the sub-list for field type_name
}

func init() { file_openconfig_bgp_proto_init() }
func file_openconfig_bgp_proto_init() {
	if File_openconfig_bgp_proto != nil {
		return
	}
	file_openconfig_enums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_openconfig_bgp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_Confederation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_DefaultRouteDistance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_DynamicNeighborPrefixes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_GracefulRestart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_RouteSelectionOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_UseMultiplePaths); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis_AfiSafi); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis_AfiSafiKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis_AfiSafi_AddPaths); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis_AfiSafi_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis_AfiSafi_GracefulRestart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv4); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv6); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis_AfiSafi_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis_AfiSafi_AddPaths_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis_AfiSafi_AddPaths_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_Confederation_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_Confederation_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_DefaultRouteDistance_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_DefaultRouteDistance_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_DynamicNeighborPrefixes_DynamicNeighborPrefix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_DynamicNeighborPrefixes_DynamicNeighborPrefixKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_DynamicNeighborPrefixes_DynamicNeighborPrefix_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_DynamicNeighborPrefixes_DynamicNeighborPrefix_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_GracefulRestart_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_GracefulRestart_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_RouteSelectionOptions_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_RouteSelectionOptions_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_UseMultiplePaths_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_UseMultiplePaths_Ebgp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_UseMultiplePaths_Ibgp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_UseMultiplePaths_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_UseMultiplePaths_Ebgp_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_UseMultiplePaths_Ebgp_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_UseMultiplePaths_Ibgp_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Global_UseMultiplePaths_Ibgp_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_NeighborKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AfiSafis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_ApplyPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AsPathOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_EbgpMultihop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_ErrorHandling); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_GracefulRestart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_LoggingOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_RouteReflector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_Timers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_Transport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_UseMultiplePaths); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafiKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_AddPaths); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv4); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv6); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_AddPaths_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_AddPaths_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State_Prefixes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[193].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[194].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[195].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_ApplyPolicy_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[196].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_ApplyPolicy_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[197].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AsPathOptions_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[198].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_AsPathOptions_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[199].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_EbgpMultihop_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[200].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_EbgpMultihop_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[201].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_ErrorHandling_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[202].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_ErrorHandling_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[203].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_GracefulRestart_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[204].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_GracefulRestart_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[205].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_LoggingOptions_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[206].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_LoggingOptions_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[207].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_RouteReflector_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[208].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_RouteReflector_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[209].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_State_Messages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[210].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_State_Queues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[211].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_State_Messages_Received); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[212].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_State_Messages_Sent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[213].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_Timers_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[214].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_Timers_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[215].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_Transport_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[216].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_Transport_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[217].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_UseMultiplePaths_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[218].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[219].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_UseMultiplePaths_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[220].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[221].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[222].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[223].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroupKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[224].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[225].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_ApplyPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[226].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AsPathOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[227].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[228].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_EbgpMultihop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[229].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_ErrorHandling); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[230].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_GracefulRestart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[231].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_LoggingOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[232].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_RouteReflector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[233].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[234].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_Timers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[235].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_Transport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[236].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_UseMultiplePaths); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[237].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[238].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafiKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[239].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_AddPaths); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[240].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[241].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[242].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[243].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[244].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[245].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[246].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[247].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[248].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[249].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[250].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[251].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[252].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[253].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv4); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[254].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv6); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[255].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[256].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[257].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_AddPaths_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[258].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_AddPaths_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[259].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[260].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[261].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[262].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[263].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[264].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[265].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[266].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[267].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[268].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[269].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[270].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[271].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[272].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[273].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[274].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[275].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[276].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[277].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[278].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[279].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[280].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[281].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[282].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[283].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[284].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[285].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[286].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[287].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[288].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[289].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[290].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[291].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[292].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[293].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[294].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[295].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[296].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[297].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[298].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[299].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv4_PrefixLimit_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[300].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[301].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[302].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_SrtePolicyIpv6_PrefixLimit_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[303].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[304].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[305].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[306].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[307].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[308].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[309].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[310].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[311].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_ApplyPolicy_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[312].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_ApplyPolicy_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[313].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AsPathOptions_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[314].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_AsPathOptions_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[315].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_EbgpMultihop_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[316].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_EbgpMultihop_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[317].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_ErrorHandling_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[318].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_ErrorHandling_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[319].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_GracefulRestart_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[320].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_GracefulRestart_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[321].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_LoggingOptions_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[322].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_LoggingOptions_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[323].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_RouteReflector_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[324].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_RouteReflector_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[325].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_Timers_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[326].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_Timers_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[327].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_Transport_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[328].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_Transport_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[329].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[330].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[331].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[332].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_UseMultiplePaths_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[333].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[334].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[335].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[336].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[337].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[338].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AttrSets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[339].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_Communities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[340].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_ExtCommunities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[341].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[342].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafiKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[343].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[344].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[345].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[346].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[347].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[348].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[349].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[350].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[351].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[352].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_RouteKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[353].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[354].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_UnknownAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[355].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[356].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[357].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[358].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[359].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_NeighborKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[360].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[361].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[362].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[363].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[364].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[365].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[366].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[367].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[368].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[369].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[370].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[371].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[372].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[373].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[374].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[375].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[376].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[377].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[378].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[379].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[380].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[381].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[382].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[383].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[384].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[385].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[386].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[387].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[388].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[389].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[390].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[391].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[392].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[393].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[394].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[395].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[396].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[397].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[398].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[399].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[400].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[401].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[402].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_RouteKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[403].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[404].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[405].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[406].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[407].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[408].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[409].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_NeighborKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[410].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[411].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[412].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[413].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[414].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[415].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[416].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[417].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[418].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[419].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[420].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[421].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[422].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[423].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[424].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[425].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[426].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[427].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[428].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[429].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[430].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[431].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[432].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[433].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[434].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[435].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[436].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[437].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[438].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[439].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[440].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[441].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[442].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[443].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[444].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[445].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[446].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[447].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[448].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[449].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[450].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[451].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[452].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[453].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[454].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[455].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_RouteKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[456].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[457].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_UnknownAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[458].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[459].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[460].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[461].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[462].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_NeighborKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[463].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[464].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[465].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[466].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[467].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[468].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[469].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[470].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[471].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[472].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[473].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[474].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[475].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[476].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[477].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[478].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[479].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[480].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[481].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[482].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[483].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[484].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[485].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[486].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[487].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[488].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[489].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[490].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[491].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[492].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[493].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[494].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[495].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[496].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[497].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[498].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[499].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6SrtePolicy_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[500].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[501].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[502].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[503].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[504].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[505].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_RouteKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[506].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[507].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[508].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[509].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[510].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[511].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[512].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_NeighborKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[513].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[514].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[515].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[516].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[517].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[518].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[519].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[520].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[521].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[522].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[523].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[524].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[525].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[526].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[527].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[528].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[529].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[530].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[531].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[532].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[533].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[534].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[535].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[536].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[537].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[538].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[539].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[540].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[541].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[542].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[543].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[544].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[545].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[546].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[547].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[548].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[549].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[550].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AttrSets_AttrSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[551].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AttrSets_AttrSetKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[552].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AttrSets_AttrSet_Aggregator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[553].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AttrSets_AttrSet_As4Path); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[554].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AttrSets_AttrSet_AsPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[555].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AttrSets_AttrSet_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[556].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[557].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AttrSets_AttrSet_Aggregator_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[558].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AttrSets_AttrSet_As4Path_As4Segment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[559].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AttrSets_AttrSet_As4Path_As4Segment_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[560].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AttrSets_AttrSet_AsPath_AsSegment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[561].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AttrSets_AttrSet_AsPath_AsSegment_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[562].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[563].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[564].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_TunnelKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[565].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[566].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[567].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[568].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_SubtlvKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[569].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_RemoteEndpoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[570].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[571].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[572].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_RemoteEndpoints_RemoteEndpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[573].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_RemoteEndpoints_RemoteEndpointKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[574].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_RemoteEndpoints_RemoteEndpoint_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[575].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[576].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentListKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[577].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[578].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[579].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[580].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_SegmentKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[581].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[582].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_Communities_Community); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[583].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_Communities_CommunityKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[584].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_Communities_Community_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[585].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_Communities_Community_State_CommunityUnion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[586].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_ExtCommunities_ExtCommunity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[587].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_ExtCommunities_ExtCommunityKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[588].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_ExtCommunities_ExtCommunity_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_bgp_proto_msgTypes[589].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp_Rib_ExtCommunities_ExtCommunity_State_ExtCommunityUnion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_openconfig_bgp_proto_msgTypes[207].OneofWrappers = []interface{}{
		(*Bgp_Neighbors_Neighbor_RouteReflector_Config_RouteReflectorClusterIdString)(nil),
		(*Bgp_Neighbors_Neighbor_RouteReflector_Config_RouteReflectorClusterIdUint64)(nil),
	}
	file_openconfig_bgp_proto_msgTypes[208].OneofWrappers = []interface{}{
		(*Bgp_Neighbors_Neighbor_RouteReflector_State_RouteReflectorClusterIdString)(nil),
		(*Bgp_Neighbors_Neighbor_RouteReflector_State_RouteReflectorClusterIdUint64)(nil),
	}
	file_openconfig_bgp_proto_msgTypes[323].OneofWrappers = []interface{}{
		(*Bgp_PeerGroups_PeerGroup_RouteReflector_Config_RouteReflectorClusterIdString)(nil),
		(*Bgp_PeerGroups_PeerGroup_RouteReflector_Config_RouteReflectorClusterIdUint64)(nil),
	}
	file_openconfig_bgp_proto_msgTypes[324].OneofWrappers = []interface{}{
		(*Bgp_PeerGroups_PeerGroup_RouteReflector_State_RouteReflectorClusterIdString)(nil),
		(*Bgp_PeerGroups_PeerGroup_RouteReflector_State_RouteReflectorClusterIdUint64)(nil),
	}
	file_openconfig_bgp_proto_msgTypes[402].OneofWrappers = []interface{}{
		(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_RouteKey_OriginOpenconfigpolicytypesinstallprotocoltype)(nil),
		(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_RouteKey_OriginString)(nil),
	}
	file_openconfig_bgp_proto_msgTypes[403].OneofWrappers = []interface{}{
		(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State_OriginOpenconfigpolicytypesinstallprotocoltype)(nil),
		(*Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State_OriginString)(nil),
	}
	file_openconfig_bgp_proto_msgTypes[505].OneofWrappers = []interface{}{
		(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_RouteKey_OriginOpenconfigpolicytypesinstallprotocoltype)(nil),
		(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_RouteKey_OriginString)(nil),
	}
	file_openconfig_bgp_proto_msgTypes[506].OneofWrappers = []interface{}{
		(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State_OriginOpenconfigpolicytypesinstallprotocoltype)(nil),
		(*Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State_OriginString)(nil),
	}
	file_openconfig_bgp_proto_msgTypes[571].OneofWrappers = []interface{}{
		(*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State_BindingSidBindingsid)(nil),
		(*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State_BindingSidString)(nil),
		(*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State_BindingSidUint64)(nil),
	}
	file_openconfig_bgp_proto_msgTypes[581].OneofWrappers = []interface{}{
		(*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_SidSid)(nil),
		(*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_SidString)(nil),
		(*Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_SidUint64)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_openconfig_bgp_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   590,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_openconfig_bgp_proto_goTypes,
		DependencyIndexes: file_openconfig_bgp_proto_depIdxs,
		EnumInfos:         file_openconfig_bgp_proto_enumTypes,
		MessageInfos:      file_openconfig_bgp_proto_msgTypes,
	}.Build()
	File_openconfig_bgp_proto = out.File
	file_openconfig_bgp_proto_rawDesc = nil
	file_openconfig_bgp_proto_goTypes = nil
	file_openconfig_bgp_proto_depIdxs = nil
}
