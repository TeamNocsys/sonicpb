// openconfig.openconfig_telemetry is generated by proto_generator as a protobuf
// representation of a YANG schema.
//
// Input schema modules:
//  - ../api/yang/public/doc/openconfig-example.yang
//  - ../api/yang/public/third_party/ietf/iana-if-type.yang
//  - ../api/yang/public/third_party/ietf/ietf-interfaces.yang
//  - ../api/yang/public/third_party/ietf/ietf-yang-types.yang
//  - ../api/yang/public/third_party/ietf/ietf-inet-types.yang
//  - ../api/yang/public/release/models/bfd/openconfig-bfd.yang
//  - ../api/yang/public/release/models/vlan/openconfig-vlan.yang
//  - ../api/yang/public/release/models/vlan/openconfig-vlan-types.yang
//  - ../api/yang/public/release/models/wifi/openconfig-access-points.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-mac.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-types.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-phy.yang
//  - ../api/yang/public/release/models/wifi/openconfig-ap-interfaces.yang
//  - ../api/yang/public/release/models/wifi/openconfig-ap-manager.yang
//  - ../api/yang/public/release/models/macsec/openconfig-macsec.yang
//  - ../api/yang/public/release/models/macsec/openconfig-macsec-types.yang
//  - ../api/yang/public/release/models/stp/openconfig-spanning-tree-types.yang
//  - ../api/yang/public/release/models/stp/openconfig-spanning-tree.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-errors.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-peer-group.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-types.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-global.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-neighbor.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common-structure.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-policy.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common-multiprotocol.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-types.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-port.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-fan.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-linecard.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-ext.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-cpu.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-psu.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-transceiver.yang
//  - ../api/yang/public/release/models/multicast/openconfig-pim-types.yang
//  - ../api/yang/public/release/models/multicast/openconfig-igmp-types.yang
//  - ../api/yang/public/release/models/multicast/openconfig-igmp.yang
//  - ../api/yang/public/release/models/multicast/openconfig-pim.yang
//  - ../api/yang/public/release/models/catalog/openconfig-module-catalog.yang
//  - ../api/yang/public/release/models/catalog/openconfig-catalog-types.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-interfaces.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-8021x.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-types.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-aggregate.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-poe.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-tunnel.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ip.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ethernet.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ethernet-ext.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ip-ext.yang
//  - ../api/yang/public/release/models/acl/openconfig-packet-match-types.yang
//  - ../api/yang/public/release/models/acl/openconfig-packet-match.yang
//  - ../api/yang/public/release/models/acl/openconfig-acl.yang
//  - ../api/yang/public/release/models/system/openconfig-license.yang
//  - ../api/yang/public/release/models/system/openconfig-system.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-radius.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa.yang
//  - ../api/yang/public/release/models/system/openconfig-system-management.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-types.yang
//  - ../api/yang/public/release/models/system/openconfig-procmon.yang
//  - ../api/yang/public/release/models/system/openconfig-messages.yang
//  - ../api/yang/public/release/models/system/openconfig-system-terminal.yang
//  - ../api/yang/public/release/models/system/openconfig-system-logging.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-tacacs.yang
//  - ../api/yang/public/release/models/system/openconfig-alarms.yang
//  - ../api/yang/public/release/models/system/openconfig-alarm-types.yang
//  - ../api/yang/public/release/models/policy/openconfig-policy-types.yang
//  - ../api/yang/public/release/models/policy/openconfig-routing-policy.yang
//  - ../api/yang/public/release/models/lacp/openconfig-lacp.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-wavelength-router.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-optical-amplifier.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-protection.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-channel-monitor.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-connectivity.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-optical-attenuator.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-common.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-types.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-terminal-device.yang
//  - ../api/yang/public/release/models/telemetry/openconfig-telemetry-types.yang
//  - ../api/yang/public/release/models/telemetry/openconfig-telemetry.yang
//  - ../api/yang/public/release/models/openflow/openconfig-openflow.yang
//  - ../api/yang/public/release/models/openflow/openconfig-openflow-types.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-tables.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-ext.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-table-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-shared-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-types.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-types.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-elements.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-interfaces.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-srte.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-forwarding-policies.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-interfaces.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-path-groups.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
//  - ../api/yang/public/release/models/relay-agent/openconfig-relay-agent.yang
//  - ../api/yang/public/release/models/lldp/openconfig-lldp.yang
//  - ../api/yang/public/release/models/lldp/openconfig-lldp-types.yang
//  - ../api/yang/public/release/models/openconfig-extensions.yang
//  - ../api/yang/public/release/models/types/openconfig-yang-types.yang
//  - ../api/yang/public/release/models/types/openconfig-inet-types.yang
//  - ../api/yang/public/release/models/types/openconfig-types.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-srte-policy.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-rsvp-sr-ext.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-segment-routing-types.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-segment-routing.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-types.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-igp.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-te.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-rsvp.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-static.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-sr.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-ldp.yang
//  - ../api/yang/public/release/models/probes/openconfig-probes-types.yang
//  - ../api/yang/public/release/models/probes/openconfig-probes.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-lsp.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-lsdb-types.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-policy.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-types.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-routing.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-area.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospf-policy.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-common.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-global.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-area-interface.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-lsdb.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospf-types.yang
//  - ../api/yang/public/release/models/local-routing/openconfig-local-routing.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-l3.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-l2.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-policy.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-types.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-mpls.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-common.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-types.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ipv6.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-pf.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-network-instance.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ipv4.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ethernet.yang

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        (unknown)
// source: openconfig_telemetry.proto

package openconfig

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/openconfig/ygot/proto/yext"
	ywrapper "github.com/openconfig/ygot/proto/ywrapper"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type TelemetrySystem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinationGroups *TelemetrySystem_DestinationGroups `protobuf:"bytes,247030560,opt,name=destination_groups,json=destinationGroups,proto3" json:"destination_groups,omitempty"`
	SensorGroups      *TelemetrySystem_SensorGroups      `protobuf:"bytes,14511052,opt,name=sensor_groups,json=sensorGroups,proto3" json:"sensor_groups,omitempty"`
	Subscriptions     *TelemetrySystem_Subscriptions     `protobuf:"bytes,114704761,opt,name=subscriptions,proto3" json:"subscriptions,omitempty"`
}

func (x *TelemetrySystem) Reset() {
	*x = TelemetrySystem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_telemetry_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetrySystem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetrySystem) ProtoMessage() {}

func (x *TelemetrySystem) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_telemetry_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetrySystem.ProtoReflect.Descriptor instead.
func (*TelemetrySystem) Descriptor() ([]byte, []int) {
	return file_openconfig_telemetry_proto_rawDescGZIP(), []int{0}
}

func (x *TelemetrySystem) GetDestinationGroups() *TelemetrySystem_DestinationGroups {
	if x != nil {
		return x.DestinationGroups
	}
	return nil
}

func (x *TelemetrySystem) GetSensorGroups() *TelemetrySystem_SensorGroups {
	if x != nil {
		return x.SensorGroups
	}
	return nil
}

func (x *TelemetrySystem) GetSubscriptions() *TelemetrySystem_Subscriptions {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

type TelemetrySystem_DestinationGroups struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinationGroup []*TelemetrySystem_DestinationGroups_DestinationGroupKey `protobuf:"bytes,57789211,rep,name=destination_group,json=destinationGroup,proto3" json:"destination_group,omitempty"`
}

func (x *TelemetrySystem_DestinationGroups) Reset() {
	*x = TelemetrySystem_DestinationGroups{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_telemetry_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetrySystem_DestinationGroups) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetrySystem_DestinationGroups) ProtoMessage() {}

func (x *TelemetrySystem_DestinationGroups) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_telemetry_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetrySystem_DestinationGroups.ProtoReflect.Descriptor instead.
func (*TelemetrySystem_DestinationGroups) Descriptor() ([]byte, []int) {
	return file_openconfig_telemetry_proto_rawDescGZIP(), []int{0, 0}
}

func (x *TelemetrySystem_DestinationGroups) GetDestinationGroup() []*TelemetrySystem_DestinationGroups_DestinationGroupKey {
	if x != nil {
		return x.DestinationGroup
	}
	return nil
}

type TelemetrySystem_SensorGroups struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SensorGroup []*TelemetrySystem_SensorGroups_SensorGroupKey `protobuf:"bytes,302649347,rep,name=sensor_group,json=sensorGroup,proto3" json:"sensor_group,omitempty"`
}

func (x *TelemetrySystem_SensorGroups) Reset() {
	*x = TelemetrySystem_SensorGroups{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_telemetry_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetrySystem_SensorGroups) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetrySystem_SensorGroups) ProtoMessage() {}

func (x *TelemetrySystem_SensorGroups) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_telemetry_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetrySystem_SensorGroups.ProtoReflect.Descriptor instead.
func (*TelemetrySystem_SensorGroups) Descriptor() ([]byte, []int) {
	return file_openconfig_telemetry_proto_rawDescGZIP(), []int{0, 1}
}

func (x *TelemetrySystem_SensorGroups) GetSensorGroup() []*TelemetrySystem_SensorGroups_SensorGroupKey {
	if x != nil {
		return x.SensorGroup
	}
	return nil
}

type TelemetrySystem_Subscriptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DynamicSubscriptions    *TelemetrySystem_Subscriptions_DynamicSubscriptions    `protobuf:"bytes,118846042,opt,name=dynamic_subscriptions,json=dynamicSubscriptions,proto3" json:"dynamic_subscriptions,omitempty"`
	PersistentSubscriptions *TelemetrySystem_Subscriptions_PersistentSubscriptions `protobuf:"bytes,399200022,opt,name=persistent_subscriptions,json=persistentSubscriptions,proto3" json:"persistent_subscriptions,omitempty"`
}

func (x *TelemetrySystem_Subscriptions) Reset() {
	*x = TelemetrySystem_Subscriptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_telemetry_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetrySystem_Subscriptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetrySystem_Subscriptions) ProtoMessage() {}

func (x *TelemetrySystem_Subscriptions) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_telemetry_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetrySystem_Subscriptions.ProtoReflect.Descriptor instead.
func (*TelemetrySystem_Subscriptions) Descriptor() ([]byte, []int) {
	return file_openconfig_telemetry_proto_rawDescGZIP(), []int{0, 2}
}

func (x *TelemetrySystem_Subscriptions) GetDynamicSubscriptions() *TelemetrySystem_Subscriptions_DynamicSubscriptions {
	if x != nil {
		return x.DynamicSubscriptions
	}
	return nil
}

func (x *TelemetrySystem_Subscriptions) GetPersistentSubscriptions() *TelemetrySystem_Subscriptions_PersistentSubscriptions {
	if x != nil {
		return x.PersistentSubscriptions
	}
	return nil
}

type TelemetrySystem_DestinationGroups_DestinationGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config       *TelemetrySystem_DestinationGroups_DestinationGroup_Config       `protobuf:"bytes,28634316,opt,name=config,proto3" json:"config,omitempty"`
	Destinations *TelemetrySystem_DestinationGroups_DestinationGroup_Destinations `protobuf:"bytes,8565725,opt,name=destinations,proto3" json:"destinations,omitempty"`
	State        *TelemetrySystem_DestinationGroups_DestinationGroup_State        `protobuf:"bytes,191727685,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *TelemetrySystem_DestinationGroups_DestinationGroup) Reset() {
	*x = TelemetrySystem_DestinationGroups_DestinationGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_telemetry_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetrySystem_DestinationGroups_DestinationGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetrySystem_DestinationGroups_DestinationGroup) ProtoMessage() {}

func (x *TelemetrySystem_DestinationGroups_DestinationGroup) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_telemetry_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetrySystem_DestinationGroups_DestinationGroup.ProtoReflect.Descriptor instead.
func (*TelemetrySystem_DestinationGroups_DestinationGroup) Descriptor() ([]byte, []int) {
	return file_openconfig_telemetry_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *TelemetrySystem_DestinationGroups_DestinationGroup) GetConfig() *TelemetrySystem_DestinationGroups_DestinationGroup_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *TelemetrySystem_DestinationGroups_DestinationGroup) GetDestinations() *TelemetrySystem_DestinationGroups_DestinationGroup_Destinations {
	if x != nil {
		return x.Destinations
	}
	return nil
}

func (x *TelemetrySystem_DestinationGroups_DestinationGroup) GetState() *TelemetrySystem_DestinationGroups_DestinationGroup_State {
	if x != nil {
		return x.State
	}
	return nil
}

type TelemetrySystem_DestinationGroups_DestinationGroupKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId          string                                              `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	DestinationGroup *TelemetrySystem_DestinationGroups_DestinationGroup `protobuf:"bytes,2,opt,name=destination_group,json=destinationGroup,proto3" json:"destination_group,omitempty"`
}

func (x *TelemetrySystem_DestinationGroups_DestinationGroupKey) Reset() {
	*x = TelemetrySystem_DestinationGroups_DestinationGroupKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_telemetry_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetrySystem_DestinationGroups_DestinationGroupKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetrySystem_DestinationGroups_DestinationGroupKey) ProtoMessage() {}

func (x *TelemetrySystem_DestinationGroups_DestinationGroupKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_telemetry_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetrySystem_DestinationGroups_DestinationGroupKey.ProtoReflect.Descriptor instead.
func (*TelemetrySystem_DestinationGroups_DestinationGroupKey) Descriptor() ([]byte, []int) {
	return file_openconfig_telemetry_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *TelemetrySystem_DestinationGroups_DestinationGroupKey) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *TelemetrySystem_DestinationGroups_DestinationGroupKey) GetDestinationGroup() *TelemetrySystem_DestinationGroups_DestinationGroup {
	if x != nil {
		return x.DestinationGroup
	}
	return nil
}

type TelemetrySystem_DestinationGroups_DestinationGroup_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId *ywrapper.StringValue `protobuf:"bytes,252594982,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *TelemetrySystem_DestinationGroups_DestinationGroup_Config) Reset() {
	*x = TelemetrySystem_DestinationGroups_DestinationGroup_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_telemetry_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetrySystem_DestinationGroups_DestinationGroup_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetrySystem_DestinationGroups_DestinationGroup_Config) ProtoMessage() {}

func (x *TelemetrySystem_DestinationGroups_DestinationGroup_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_telemetry_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetrySystem_DestinationGroups_DestinationGroup_Config.ProtoReflect.Descriptor instead.
func (*TelemetrySystem_DestinationGroups_DestinationGroup_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_telemetry_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (x *TelemetrySystem_DestinationGroups_DestinationGroup_Config) GetGroupId() *ywrapper.StringValue {
	if x != nil {
		return x.GroupId
	}
	return nil
}

type TelemetrySystem_DestinationGroups_DestinationGroup_Destinations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Destination []*TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationKey `protobuf:"bytes,263920904,rep,name=destination,proto3" json:"destination,omitempty"`
}

func (x *TelemetrySystem_DestinationGroups_DestinationGroup_Destinations) Reset() {
	*x = TelemetrySystem_DestinationGroups_DestinationGroup_Destinations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_telemetry_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetrySystem_DestinationGroups_DestinationGroup_Destinations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetrySystem_DestinationGroups_DestinationGroup_Destinations) ProtoMessage() {}

func (x *TelemetrySystem_DestinationGroups_DestinationGroup_Destinations) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_telemetry_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetrySystem_DestinationGroups_DestinationGroup_Destinations.ProtoReflect.Descriptor instead.
func (*TelemetrySystem_DestinationGroups_DestinationGroup_Destinations) Descriptor() ([]byte, []int) {
	return file_openconfig_telemetry_proto_rawDescGZIP(), []int{0, 0, 0, 1}
}

func (x *TelemetrySystem_DestinationGroups_DestinationGroup_Destinations) GetDestination() []*TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationKey {
	if x != nil {
		return x.Destination
	}
	return nil
}

type TelemetrySystem_DestinationGroups_DestinationGroup_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId *ywrapper.StringValue `protobuf:"bytes,429791949,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *TelemetrySystem_DestinationGroups_DestinationGroup_State) Reset() {
	*x = TelemetrySystem_DestinationGroups_DestinationGroup_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_telemetry_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetrySystem_DestinationGroups_DestinationGroup_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetrySystem_DestinationGroups_DestinationGroup_State) ProtoMessage() {}

func (x *TelemetrySystem_DestinationGroups_DestinationGroup_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_telemetry_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetrySystem_DestinationGroups_DestinationGroup_State.ProtoReflect.Descriptor instead.
func (*TelemetrySystem_DestinationGroups_DestinationGroup_State) Descriptor() ([]byte, []int) {
	return file_openconfig_telemetry_proto_rawDescGZIP(), []int{0, 0, 0, 2}
}

func (x *TelemetrySystem_DestinationGroups_DestinationGroup_State) GetGroupId() *ywrapper.StringValue {
	if x != nil {
		return x.GroupId
	}
	return nil
}

type TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config `protobuf:"bytes,50402797,opt,name=config,proto3" json:"config,omitempty"`
	State  *TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State  `protobuf:"bytes,76514978,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination) Reset() {
	*x = TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_telemetry_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination) ProtoMessage() {}

func (x *TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_telemetry_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination.ProtoReflect.Descriptor instead.
func (*TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination) Descriptor() ([]byte, []int) {
	return file_openconfig_telemetry_proto_rawDescGZIP(), []int{0, 0, 0, 1, 0}
}

func (x *TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination) GetConfig() *TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination) GetState() *TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State {
	if x != nil {
		return x.State
	}
	return nil
}

type TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinationAddress string                                                                       `protobuf:"bytes,1,opt,name=destination_address,json=destinationAddress,proto3" json:"destination_address,omitempty"`
	DestinationPort    uint64                                                                       `protobuf:"varint,2,opt,name=destination_port,json=destinationPort,proto3" json:"destination_port,omitempty"`
	Destination        *TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination `protobuf:"bytes,3,opt,name=destination,proto3" json:"destination,omitempty"`
}

func (x *TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationKey) Reset() {
	*x = TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_telemetry_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationKey) ProtoMessage() {
}

func (x *TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_telemetry_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationKey.ProtoReflect.Descriptor instead.
func (*TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationKey) Descriptor() ([]byte, []int) {
	return file_openconfig_telemetry_proto_rawDescGZIP(), []int{0, 0, 0, 1, 1}
}

func (x *TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationKey) GetDestinationAddress() string {
	if x != nil {
		return x.DestinationAddress
	}
	return ""
}

func (x *TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationKey) GetDestinationPort() uint64 {
	if x != nil {
		return x.DestinationPort
	}
	return 0
}

func (x *TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationKey) GetDestination() *TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination {
	if x != nil {
		return x.Destination
	}
	return nil
}

type TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinationAddress *ywrapper.StringValue `protobuf:"bytes,403894671,opt,name=destination_address,json=destinationAddress,proto3" json:"destination_address,omitempty"`
	DestinationPort    *ywrapper.UintValue   `protobuf:"bytes,267782232,opt,name=destination_port,json=destinationPort,proto3" json:"destination_port,omitempty"`
}

func (x *TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config) Reset() {
	*x = TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_telemetry_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config) ProtoMessage() {
}

func (x *TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_telemetry_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config.ProtoReflect.Descriptor instead.
func (*TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_telemetry_proto_rawDescGZIP(), []int{0, 0, 0, 1, 0, 0}
}

func (x *TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config) GetDestinationAddress() *ywrapper.StringValue {
	if x != nil {
		return x.DestinationAddress
	}
	return nil
}

func (x *TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config) GetDestinationPort() *ywrapper.UintValue {
	if x != nil {
		return x.DestinationPort
	}
	return nil
}

type TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinationAddress *ywrapper.StringValue `protobuf:"bytes,427282796,opt,name=destination_address,json=destinationAddress,proto3" json:"destination_address,omitempty"`
	DestinationPort    *ywrapper.UintValue   `protobuf:"bytes,158645621,opt,name=destination_port,json=destinationPort,proto3" json:"destination_port,omitempty"`
}

func (x *TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State) Reset() {
	*x = TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_telemetry_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State) ProtoMessage() {
}

func (x *TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_telemetry_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State.ProtoReflect.Descriptor instead.
func (*TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State) Descriptor() ([]byte, []int) {
	return file_openconfig_telemetry_proto_rawDescGZIP(), []int{0, 0, 0, 1, 0, 1}
}

func (x *TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State) GetDestinationAddress() *ywrapper.StringValue {
	if x != nil {
		return x.DestinationAddress
	}
	return nil
}

func (x *TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State) GetDestinationPort() *ywrapper.UintValue {
	if x != nil {
		return x.DestinationPort
	}
	return nil
}

type TelemetrySystem_SensorGroups_SensorGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config      *TelemetrySystem_SensorGroups_SensorGroup_Config      `protobuf:"bytes,202220420,opt,name=config,proto3" json:"config,omitempty"`
	SensorPaths *TelemetrySystem_SensorGroups_SensorGroup_SensorPaths `protobuf:"bytes,505094703,opt,name=sensor_paths,json=sensorPaths,proto3" json:"sensor_paths,omitempty"`
	State       *TelemetrySystem_SensorGroups_SensorGroup_State       `protobuf:"bytes,464740509,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *TelemetrySystem_SensorGroups_SensorGroup) Reset() {
	*x = TelemetrySystem_SensorGroups_SensorGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_telemetry_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetrySystem_SensorGroups_SensorGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetrySystem_SensorGroups_SensorGroup) ProtoMessage() {}

func (x *TelemetrySystem_SensorGroups_SensorGroup) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_telemetry_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetrySystem_SensorGroups_SensorGroup.ProtoReflect.Descriptor instead.
func (*TelemetrySystem_SensorGroups_SensorGroup) Descriptor() ([]byte, []int) {
	return file_openconfig_telemetry_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *TelemetrySystem_SensorGroups_SensorGroup) GetConfig() *TelemetrySystem_SensorGroups_SensorGroup_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *TelemetrySystem_SensorGroups_SensorGroup) GetSensorPaths() *TelemetrySystem_SensorGroups_SensorGroup_SensorPaths {
	if x != nil {
		return x.SensorPaths
	}
	return nil
}

func (x *TelemetrySystem_SensorGroups_SensorGroup) GetState() *TelemetrySystem_SensorGroups_SensorGroup_State {
	if x != nil {
		return x.State
	}
	return nil
}

type TelemetrySystem_SensorGroups_SensorGroupKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SensorGroupId string                                    `protobuf:"bytes,1,opt,name=sensor_group_id,json=sensorGroupId,proto3" json:"sensor_group_id,omitempty"`
	SensorGroup   *TelemetrySystem_SensorGroups_SensorGroup `protobuf:"bytes,2,opt,name=sensor_group,json=sensorGroup,proto3" json:"sensor_group,omitempty"`
}

func (x *TelemetrySystem_SensorGroups_SensorGroupKey) Reset() {
	*x = TelemetrySystem_SensorGroups_SensorGroupKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_telemetry_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetrySystem_SensorGroups_SensorGroupKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetrySystem_SensorGroups_SensorGroupKey) ProtoMessage() {}

func (x *TelemetrySystem_SensorGroups_SensorGroupKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_telemetry_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetrySystem_SensorGroups_SensorGroupKey.ProtoReflect.Descriptor instead.
func (*TelemetrySystem_SensorGroups_SensorGroupKey) Descriptor() ([]byte, []int) {
	return file_openconfig_telemetry_proto_rawDescGZIP(), []int{0, 1, 1}
}

func (x *TelemetrySystem_SensorGroups_SensorGroupKey) GetSensorGroupId() string {
	if x != nil {
		return x.SensorGroupId
	}
	return ""
}

func (x *TelemetrySystem_SensorGroups_SensorGroupKey) GetSensorGroup() *TelemetrySystem_SensorGroups_SensorGroup {
	if x != nil {
		return x.SensorGroup
	}
	return nil
}

type TelemetrySystem_SensorGroups_SensorGroup_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SensorGroupId *ywrapper.StringValue `protobuf:"bytes,291013299,opt,name=sensor_group_id,json=sensorGroupId,proto3" json:"sensor_group_id,omitempty"`
}

func (x *TelemetrySystem_SensorGroups_SensorGroup_Config) Reset() {
	*x = TelemetrySystem_SensorGroups_SensorGroup_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_telemetry_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetrySystem_SensorGroups_SensorGroup_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetrySystem_SensorGroups_SensorGroup_Config) ProtoMessage() {}

func (x *TelemetrySystem_SensorGroups_SensorGroup_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_telemetry_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetrySystem_SensorGroups_SensorGroup_Config.ProtoReflect.Descriptor instead.
func (*TelemetrySystem_SensorGroups_SensorGroup_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_telemetry_proto_rawDescGZIP(), []int{0, 1, 0, 0}
}

func (x *TelemetrySystem_SensorGroups_SensorGroup_Config) GetSensorGroupId() *ywrapper.StringValue {
	if x != nil {
		return x.SensorGroupId
	}
	return nil
}

type TelemetrySystem_SensorGroups_SensorGroup_SensorPaths struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SensorPath []*TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPathKey `protobuf:"bytes,79286432,rep,name=sensor_path,json=sensorPath,proto3" json:"sensor_path,omitempty"`
}

func (x *TelemetrySystem_SensorGroups_SensorGroup_SensorPaths) Reset() {
	*x = TelemetrySystem_SensorGroups_SensorGroup_SensorPaths{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_telemetry_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetrySystem_SensorGroups_SensorGroup_SensorPaths) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetrySystem_SensorGroups_SensorGroup_SensorPaths) ProtoMessage() {}

func (x *TelemetrySystem_SensorGroups_SensorGroup_SensorPaths) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_telemetry_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetrySystem_SensorGroups_SensorGroup_SensorPaths.ProtoReflect.Descriptor instead.
func (*TelemetrySystem_SensorGroups_SensorGroup_SensorPaths) Descriptor() ([]byte, []int) {
	return file_openconfig_telemetry_proto_rawDescGZIP(), []int{0, 1, 0, 1}
}

func (x *TelemetrySystem_SensorGroups_SensorGroup_SensorPaths) GetSensorPath() []*TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPathKey {
	if x != nil {
		return x.SensorPath
	}
	return nil
}

type TelemetrySystem_SensorGroups_SensorGroup_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SensorGroupId *ywrapper.StringValue `protobuf:"bytes,463434790,opt,name=sensor_group_id,json=sensorGroupId,proto3" json:"sensor_group_id,omitempty"`
}

func (x *TelemetrySystem_SensorGroups_SensorGroup_State) Reset() {
	*x = TelemetrySystem_SensorGroups_SensorGroup_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_telemetry_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetrySystem_SensorGroups_SensorGroup_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetrySystem_SensorGroups_SensorGroup_State) ProtoMessage() {}

func (x *TelemetrySystem_SensorGroups_SensorGroup_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_telemetry_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetrySystem_SensorGroups_SensorGroup_State.ProtoReflect.Descriptor instead.
func (*TelemetrySystem_SensorGroups_SensorGroup_State) Descriptor() ([]byte, []int) {
	return file_openconfig_telemetry_proto_rawDescGZIP(), []int{0, 1, 0, 2}
}

func (x *TelemetrySystem_SensorGroups_SensorGroup_State) GetSensorGroupId() *ywrapper.StringValue {
	if x != nil {
		return x.SensorGroupId
	}
	return nil
}

type TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config `protobuf:"bytes,217705749,opt,name=config,proto3" json:"config,omitempty"`
	State  *TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State  `protobuf:"bytes,180317578,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath) Reset() {
	*x = TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_telemetry_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath) ProtoMessage() {}

func (x *TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_telemetry_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath.ProtoReflect.Descriptor instead.
func (*TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath) Descriptor() ([]byte, []int) {
	return file_openconfig_telemetry_proto_rawDescGZIP(), []int{0, 1, 0, 1, 0}
}

func (x *TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath) GetConfig() *TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath) GetState() *TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State {
	if x != nil {
		return x.State
	}
	return nil
}

type TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPathKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path       string                                                           `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	SensorPath *TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath `protobuf:"bytes,2,opt,name=sensor_path,json=sensorPath,proto3" json:"sensor_path,omitempty"`
}

func (x *TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPathKey) Reset() {
	*x = TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPathKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_telemetry_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPathKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPathKey) ProtoMessage() {}

func (x *TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPathKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_telemetry_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPathKey.ProtoReflect.Descriptor instead.
func (*TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPathKey) Descriptor() ([]byte, []int) {
	return file_openconfig_telemetry_proto_rawDescGZIP(), []int{0, 1, 0, 1, 1}
}

func (x *TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPathKey) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPathKey) GetSensorPath() *TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath {
	if x != nil {
		return x.SensorPath
	}
	return nil
}

type TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExcludeFilter *ywrapper.StringValue `protobuf:"bytes,252816029,opt,name=exclude_filter,json=excludeFilter,proto3" json:"exclude_filter,omitempty"`
	Path          *ywrapper.StringValue `protobuf:"bytes,519966909,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config) Reset() {
	*x = TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_telemetry_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config) ProtoMessage() {}

func (x *TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_telemetry_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config.ProtoReflect.Descriptor instead.
func (*TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_telemetry_proto_rawDescGZIP(), []int{0, 1, 0, 1, 0, 0}
}

func (x *TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config) GetExcludeFilter() *ywrapper.StringValue {
	if x != nil {
		return x.ExcludeFilter
	}
	return nil
}

func (x *TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config) GetPath() *ywrapper.StringValue {
	if x != nil {
		return x.Path
	}
	return nil
}

type TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExcludeFilter *ywrapper.StringValue `protobuf:"bytes,163851272,opt,name=exclude_filter,json=excludeFilter,proto3" json:"exclude_filter,omitempty"`
	Path          *ywrapper.StringValue `protobuf:"bytes,531822988,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State) Reset() {
	*x = TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_telemetry_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State) ProtoMessage() {}

func (x *TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_telemetry_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State.ProtoReflect.Descriptor instead.
func (*TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State) Descriptor() ([]byte, []int) {
	return file_openconfig_telemetry_proto_rawDescGZIP(), []int{0, 1, 0, 1, 0, 1}
}

func (x *TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State) GetExcludeFilter() *ywrapper.StringValue {
	if x != nil {
		return x.ExcludeFilter
	}
	return nil
}

func (x *TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State) GetPath() *ywrapper.StringValue {
	if x != nil {
		return x.Path
	}
	return nil
}

type TelemetrySystem_Subscriptions_DynamicSubscriptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DynamicSubscription []*TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscriptionKey `protobuf:"bytes,412358662,rep,name=dynamic_subscription,json=dynamicSubscription,proto3" json:"dynamic_subscription,omitempty"`
}

func (x *TelemetrySystem_Subscriptions_DynamicSubscriptions) Reset() {
	*x = TelemetrySystem_Subscriptions_DynamicSubscriptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_telemetry_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetrySystem_Subscriptions_DynamicSubscriptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetrySystem_Subscriptions_DynamicSubscriptions) ProtoMessage() {}

func (x *TelemetrySystem_Subscriptions_DynamicSubscriptions) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_telemetry_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetrySystem_Subscriptions_DynamicSubscriptions.ProtoReflect.Descriptor instead.
func (*TelemetrySystem_Subscriptions_DynamicSubscriptions) Descriptor() ([]byte, []int) {
	return file_openconfig_telemetry_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *TelemetrySystem_Subscriptions_DynamicSubscriptions) GetDynamicSubscription() []*TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscriptionKey {
	if x != nil {
		return x.DynamicSubscription
	}
	return nil
}

type TelemetrySystem_Subscriptions_PersistentSubscriptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PersistentSubscription []*TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscriptionKey `protobuf:"bytes,134138140,rep,name=persistent_subscription,json=persistentSubscription,proto3" json:"persistent_subscription,omitempty"`
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions) Reset() {
	*x = TelemetrySystem_Subscriptions_PersistentSubscriptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_telemetry_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetrySystem_Subscriptions_PersistentSubscriptions) ProtoMessage() {}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_telemetry_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetrySystem_Subscriptions_PersistentSubscriptions.ProtoReflect.Descriptor instead.
func (*TelemetrySystem_Subscriptions_PersistentSubscriptions) Descriptor() ([]byte, []int) {
	return file_openconfig_telemetry_proto_rawDescGZIP(), []int{0, 2, 1}
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions) GetPersistentSubscription() []*TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscriptionKey {
	if x != nil {
		return x.PersistentSubscription
	}
	return nil
}

type TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SensorPaths *TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths `protobuf:"bytes,391323416,opt,name=sensor_paths,json=sensorPaths,proto3" json:"sensor_paths,omitempty"`
	State       *TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_State       `protobuf:"bytes,495733880,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription) Reset() {
	*x = TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_telemetry_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription) ProtoMessage() {}

func (x *TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_telemetry_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription.ProtoReflect.Descriptor instead.
func (*TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription) Descriptor() ([]byte, []int) {
	return file_openconfig_telemetry_proto_rawDescGZIP(), []int{0, 2, 0, 0}
}

func (x *TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription) GetSensorPaths() *TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths {
	if x != nil {
		return x.SensorPaths
	}
	return nil
}

func (x *TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription) GetState() *TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_State {
	if x != nil {
		return x.State
	}
	return nil
}

type TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscriptionKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  uint64                                                                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	DynamicSubscription *TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription `protobuf:"bytes,2,opt,name=dynamic_subscription,json=dynamicSubscription,proto3" json:"dynamic_subscription,omitempty"`
}

func (x *TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscriptionKey) Reset() {
	*x = TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscriptionKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_telemetry_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscriptionKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscriptionKey) ProtoMessage() {}

func (x *TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscriptionKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_telemetry_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscriptionKey.ProtoReflect.Descriptor instead.
func (*TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscriptionKey) Descriptor() ([]byte, []int) {
	return file_openconfig_telemetry_proto_rawDescGZIP(), []int{0, 2, 0, 1}
}

func (x *TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscriptionKey) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscriptionKey) GetDynamicSubscription() *TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription {
	if x != nil {
		return x.DynamicSubscription
	}
	return nil
}

type TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SensorPath []*TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths_SensorPathKey `protobuf:"bytes,78945659,rep,name=sensor_path,json=sensorPath,proto3" json:"sensor_path,omitempty"`
}

func (x *TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths) Reset() {
	*x = TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_telemetry_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths) ProtoMessage() {
}

func (x *TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_telemetry_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths.ProtoReflect.Descriptor instead.
func (*TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths) Descriptor() ([]byte, []int) {
	return file_openconfig_telemetry_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0}
}

func (x *TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths) GetSensorPath() []*TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths_SensorPathKey {
	if x != nil {
		return x.SensorPath
	}
	return nil
}

type TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinationAddress   *ywrapper.StringValue                      `protobuf:"bytes,171023402,opt,name=destination_address,json=destinationAddress,proto3" json:"destination_address,omitempty"`
	DestinationPort      *ywrapper.UintValue                        `protobuf:"bytes,313181915,opt,name=destination_port,json=destinationPort,proto3" json:"destination_port,omitempty"`
	Encoding             OpenconfigTelemetryTypesDATAENCODINGMETHOD `protobuf:"varint,336245456,opt,name=encoding,proto3,enum=openconfig.OpenconfigTelemetryTypesDATAENCODINGMETHOD" json:"encoding,omitempty"`
	HeartbeatInterval    *ywrapper.UintValue                        `protobuf:"bytes,427752777,opt,name=heartbeat_interval,json=heartbeatInterval,proto3" json:"heartbeat_interval,omitempty"`
	Id                   *ywrapper.UintValue                        `protobuf:"bytes,101736480,opt,name=id,proto3" json:"id,omitempty"`
	OriginatedQosMarking *ywrapper.UintValue                        `protobuf:"bytes,62438423,opt,name=originated_qos_marking,json=originatedQosMarking,proto3" json:"originated_qos_marking,omitempty"`
	Protocol             OpenconfigTelemetryTypesSTREAMPROTOCOL     `protobuf:"varint,362438423,opt,name=protocol,proto3,enum=openconfig.OpenconfigTelemetryTypesSTREAMPROTOCOL" json:"protocol,omitempty"`
	SampleInterval       *ywrapper.UintValue                        `protobuf:"bytes,398339577,opt,name=sample_interval,json=sampleInterval,proto3" json:"sample_interval,omitempty"`
	SuppressRedundant    *ywrapper.BoolValue                        `protobuf:"bytes,193800514,opt,name=suppress_redundant,json=suppressRedundant,proto3" json:"suppress_redundant,omitempty"`
}

func (x *TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_State) Reset() {
	*x = TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_telemetry_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_State) ProtoMessage() {}

func (x *TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_telemetry_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_State.ProtoReflect.Descriptor instead.
func (*TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_State) Descriptor() ([]byte, []int) {
	return file_openconfig_telemetry_proto_rawDescGZIP(), []int{0, 2, 0, 0, 1}
}

func (x *TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_State) GetDestinationAddress() *ywrapper.StringValue {
	if x != nil {
		return x.DestinationAddress
	}
	return nil
}

func (x *TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_State) GetDestinationPort() *ywrapper.UintValue {
	if x != nil {
		return x.DestinationPort
	}
	return nil
}

func (x *TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_State) GetEncoding() OpenconfigTelemetryTypesDATAENCODINGMETHOD {
	if x != nil {
		return x.Encoding
	}
	return OpenconfigTelemetryTypesDATAENCODINGMETHOD_OPENCONFIGTELEMETRYTYPESDATAENCODINGMETHOD_UNSET
}

func (x *TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_State) GetHeartbeatInterval() *ywrapper.UintValue {
	if x != nil {
		return x.HeartbeatInterval
	}
	return nil
}

func (x *TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_State) GetId() *ywrapper.UintValue {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_State) GetOriginatedQosMarking() *ywrapper.UintValue {
	if x != nil {
		return x.OriginatedQosMarking
	}
	return nil
}

func (x *TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_State) GetProtocol() OpenconfigTelemetryTypesSTREAMPROTOCOL {
	if x != nil {
		return x.Protocol
	}
	return OpenconfigTelemetryTypesSTREAMPROTOCOL_OPENCONFIGTELEMETRYTYPESSTREAMPROTOCOL_UNSET
}

func (x *TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_State) GetSampleInterval() *ywrapper.UintValue {
	if x != nil {
		return x.SampleInterval
	}
	return nil
}

func (x *TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_State) GetSuppressRedundant() *ywrapper.BoolValue {
	if x != nil {
		return x.SuppressRedundant
	}
	return nil
}

type TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths_SensorPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths_SensorPath_State `protobuf:"bytes,399686309,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths_SensorPath) Reset() {
	*x = TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths_SensorPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_telemetry_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths_SensorPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths_SensorPath) ProtoMessage() {
}

func (x *TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths_SensorPath) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_telemetry_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths_SensorPath.ProtoReflect.Descriptor instead.
func (*TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths_SensorPath) Descriptor() ([]byte, []int) {
	return file_openconfig_telemetry_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 0}
}

func (x *TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths_SensorPath) GetState() *TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths_SensorPath_State {
	if x != nil {
		return x.State
	}
	return nil
}

type TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths_SensorPathKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path       string                                                                                         `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	SensorPath *TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths_SensorPath `protobuf:"bytes,2,opt,name=sensor_path,json=sensorPath,proto3" json:"sensor_path,omitempty"`
}

func (x *TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths_SensorPathKey) Reset() {
	*x = TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths_SensorPathKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_telemetry_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths_SensorPathKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths_SensorPathKey) ProtoMessage() {
}

func (x *TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths_SensorPathKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_telemetry_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths_SensorPathKey.ProtoReflect.Descriptor instead.
func (*TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths_SensorPathKey) Descriptor() ([]byte, []int) {
	return file_openconfig_telemetry_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 1}
}

func (x *TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths_SensorPathKey) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths_SensorPathKey) GetSensorPath() *TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths_SensorPath {
	if x != nil {
		return x.SensorPath
	}
	return nil
}

type TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths_SensorPath_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExcludeFilter *ywrapper.StringValue `protobuf:"bytes,356701133,opt,name=exclude_filter,json=excludeFilter,proto3" json:"exclude_filter,omitempty"`
	Path          *ywrapper.StringValue `protobuf:"bytes,115938029,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths_SensorPath_State) Reset() {
	*x = TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths_SensorPath_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_telemetry_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths_SensorPath_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths_SensorPath_State) ProtoMessage() {
}

func (x *TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths_SensorPath_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_telemetry_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths_SensorPath_State.ProtoReflect.Descriptor instead.
func (*TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths_SensorPath_State) Descriptor() ([]byte, []int) {
	return file_openconfig_telemetry_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 0, 0}
}

func (x *TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths_SensorPath_State) GetExcludeFilter() *ywrapper.StringValue {
	if x != nil {
		return x.ExcludeFilter
	}
	return nil
}

func (x *TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths_SensorPath_State) GetPath() *ywrapper.StringValue {
	if x != nil {
		return x.Path
	}
	return nil
}

type TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config            *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_Config            `protobuf:"bytes,254381169,opt,name=config,proto3" json:"config,omitempty"`
	DestinationGroups *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups `protobuf:"bytes,479538694,opt,name=destination_groups,json=destinationGroups,proto3" json:"destination_groups,omitempty"`
	SensorProfiles    *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles    `protobuf:"bytes,253699688,opt,name=sensor_profiles,json=sensorProfiles,proto3" json:"sensor_profiles,omitempty"`
	State             *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_State             `protobuf:"bytes,51401958,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription) Reset() {
	*x = TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_telemetry_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription) ProtoMessage() {}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_telemetry_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription.ProtoReflect.Descriptor instead.
func (*TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription) Descriptor() ([]byte, []int) {
	return file_openconfig_telemetry_proto_rawDescGZIP(), []int{0, 2, 1, 0}
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription) GetConfig() *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription) GetDestinationGroups() *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups {
	if x != nil {
		return x.DestinationGroups
	}
	return nil
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription) GetSensorProfiles() *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles {
	if x != nil {
		return x.SensorProfiles
	}
	return nil
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription) GetState() *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_State {
	if x != nil {
		return x.State
	}
	return nil
}

type TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscriptionKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                   string                                                                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	PersistentSubscription *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription `protobuf:"bytes,2,opt,name=persistent_subscription,json=persistentSubscription,proto3" json:"persistent_subscription,omitempty"`
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscriptionKey) Reset() {
	*x = TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscriptionKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_telemetry_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscriptionKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscriptionKey) ProtoMessage() {
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscriptionKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_telemetry_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscriptionKey.ProtoReflect.Descriptor instead.
func (*TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscriptionKey) Descriptor() ([]byte, []int) {
	return file_openconfig_telemetry_proto_rawDescGZIP(), []int{0, 2, 1, 1}
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscriptionKey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscriptionKey) GetPersistentSubscription() *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription {
	if x != nil {
		return x.PersistentSubscription
	}
	return nil
}

type TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Encoding             OpenconfigTelemetryTypesDATAENCODINGMETHOD `protobuf:"varint,491398539,opt,name=encoding,proto3,enum=openconfig.OpenconfigTelemetryTypesDATAENCODINGMETHOD" json:"encoding,omitempty"`
	LocalSourceAddress   *ywrapper.StringValue                      `protobuf:"bytes,145171070,opt,name=local_source_address,json=localSourceAddress,proto3" json:"local_source_address,omitempty"`
	Name                 *ywrapper.StringValue                      `protobuf:"bytes,279547781,opt,name=name,proto3" json:"name,omitempty"`
	OriginatedQosMarking *ywrapper.UintValue                        `protobuf:"bytes,258811268,opt,name=originated_qos_marking,json=originatedQosMarking,proto3" json:"originated_qos_marking,omitempty"`
	Protocol             OpenconfigTelemetryTypesSTREAMPROTOCOL     `protobuf:"varint,262712912,opt,name=protocol,proto3,enum=openconfig.OpenconfigTelemetryTypesSTREAMPROTOCOL" json:"protocol,omitempty"`
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_Config) Reset() {
	*x = TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_telemetry_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_Config) ProtoMessage() {
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_telemetry_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_Config.ProtoReflect.Descriptor instead.
func (*TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_telemetry_proto_rawDescGZIP(), []int{0, 2, 1, 0, 0}
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_Config) GetEncoding() OpenconfigTelemetryTypesDATAENCODINGMETHOD {
	if x != nil {
		return x.Encoding
	}
	return OpenconfigTelemetryTypesDATAENCODINGMETHOD_OPENCONFIGTELEMETRYTYPESDATAENCODINGMETHOD_UNSET
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_Config) GetLocalSourceAddress() *ywrapper.StringValue {
	if x != nil {
		return x.LocalSourceAddress
	}
	return nil
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_Config) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_Config) GetOriginatedQosMarking() *ywrapper.UintValue {
	if x != nil {
		return x.OriginatedQosMarking
	}
	return nil
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_Config) GetProtocol() OpenconfigTelemetryTypesSTREAMPROTOCOL {
	if x != nil {
		return x.Protocol
	}
	return OpenconfigTelemetryTypesSTREAMPROTOCOL_OPENCONFIGTELEMETRYTYPESSTREAMPROTOCOL_UNSET
}

type TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinationGroup []*TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroupKey `protobuf:"bytes,144794657,rep,name=destination_group,json=destinationGroup,proto3" json:"destination_group,omitempty"`
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups) Reset() {
	*x = TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_telemetry_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups) ProtoMessage() {
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_telemetry_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups.ProtoReflect.Descriptor instead.
func (*TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups) Descriptor() ([]byte, []int) {
	return file_openconfig_telemetry_proto_rawDescGZIP(), []int{0, 2, 1, 0, 1}
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups) GetDestinationGroup() []*TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroupKey {
	if x != nil {
		return x.DestinationGroup
	}
	return nil
}

type TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SensorProfile []*TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfileKey `protobuf:"bytes,432942741,rep,name=sensor_profile,json=sensorProfile,proto3" json:"sensor_profile,omitempty"`
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles) Reset() {
	*x = TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_telemetry_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles) ProtoMessage() {
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_telemetry_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles.ProtoReflect.Descriptor instead.
func (*TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles) Descriptor() ([]byte, []int) {
	return file_openconfig_telemetry_proto_rawDescGZIP(), []int{0, 2, 1, 0, 2}
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles) GetSensorProfile() []*TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfileKey {
	if x != nil {
		return x.SensorProfile
	}
	return nil
}

type TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Encoding             OpenconfigTelemetryTypesDATAENCODINGMETHOD `protobuf:"varint,178256818,opt,name=encoding,proto3,enum=openconfig.OpenconfigTelemetryTypesDATAENCODINGMETHOD" json:"encoding,omitempty"`
	Id                   *ywrapper.UintValue                        `protobuf:"bytes,355787598,opt,name=id,proto3" json:"id,omitempty"`
	LocalSourceAddress   *ywrapper.StringValue                      `protobuf:"bytes,16883771,opt,name=local_source_address,json=localSourceAddress,proto3" json:"local_source_address,omitempty"`
	Name                 *ywrapper.StringValue                      `protobuf:"bytes,494169708,opt,name=name,proto3" json:"name,omitempty"`
	OriginatedQosMarking *ywrapper.UintValue                        `protobuf:"bytes,503079941,opt,name=originated_qos_marking,json=originatedQosMarking,proto3" json:"originated_qos_marking,omitempty"`
	Protocol             OpenconfigTelemetryTypesSTREAMPROTOCOL     `protobuf:"varint,86577137,opt,name=protocol,proto3,enum=openconfig.OpenconfigTelemetryTypesSTREAMPROTOCOL" json:"protocol,omitempty"`
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_State) Reset() {
	*x = TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_telemetry_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_State) ProtoMessage() {
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_telemetry_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_State.ProtoReflect.Descriptor instead.
func (*TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_State) Descriptor() ([]byte, []int) {
	return file_openconfig_telemetry_proto_rawDescGZIP(), []int{0, 2, 1, 0, 3}
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_State) GetEncoding() OpenconfigTelemetryTypesDATAENCODINGMETHOD {
	if x != nil {
		return x.Encoding
	}
	return OpenconfigTelemetryTypesDATAENCODINGMETHOD_OPENCONFIGTELEMETRYTYPESDATAENCODINGMETHOD_UNSET
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_State) GetId() *ywrapper.UintValue {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_State) GetLocalSourceAddress() *ywrapper.StringValue {
	if x != nil {
		return x.LocalSourceAddress
	}
	return nil
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_State) GetName() *ywrapper.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_State) GetOriginatedQosMarking() *ywrapper.UintValue {
	if x != nil {
		return x.OriginatedQosMarking
	}
	return nil
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_State) GetProtocol() OpenconfigTelemetryTypesSTREAMPROTOCOL {
	if x != nil {
		return x.Protocol
	}
	return OpenconfigTelemetryTypesSTREAMPROTOCOL_OPENCONFIGTELEMETRYTYPESSTREAMPROTOCOL_UNSET
}

type TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroup_Config `protobuf:"bytes,289037222,opt,name=config,proto3" json:"config,omitempty"`
	State  *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroup_State  `protobuf:"bytes,146325523,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroup) Reset() {
	*x = TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_telemetry_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroup) ProtoMessage() {
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroup) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_telemetry_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroup.ProtoReflect.Descriptor instead.
func (*TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroup) Descriptor() ([]byte, []int) {
	return file_openconfig_telemetry_proto_rawDescGZIP(), []int{0, 2, 1, 0, 1, 0}
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroup) GetConfig() *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroup_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroup) GetState() *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroup_State {
	if x != nil {
		return x.State
	}
	return nil
}

type TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroupKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId          string                                                                                                           `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	DestinationGroup *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroup `protobuf:"bytes,2,opt,name=destination_group,json=destinationGroup,proto3" json:"destination_group,omitempty"`
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroupKey) Reset() {
	*x = TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroupKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_telemetry_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroupKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroupKey) ProtoMessage() {
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroupKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_telemetry_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroupKey.ProtoReflect.Descriptor instead.
func (*TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroupKey) Descriptor() ([]byte, []int) {
	return file_openconfig_telemetry_proto_rawDescGZIP(), []int{0, 2, 1, 0, 1, 1}
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroupKey) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroupKey) GetDestinationGroup() *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroup {
	if x != nil {
		return x.DestinationGroup
	}
	return nil
}

type TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroup_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId *ywrapper.StringValue `protobuf:"bytes,420996084,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroup_Config) Reset() {
	*x = TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroup_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_telemetry_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroup_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroup_Config) ProtoMessage() {
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroup_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_telemetry_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroup_Config.ProtoReflect.Descriptor instead.
func (*TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroup_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_telemetry_proto_rawDescGZIP(), []int{0, 2, 1, 0, 1, 0, 0}
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroup_Config) GetGroupId() *ywrapper.StringValue {
	if x != nil {
		return x.GroupId
	}
	return nil
}

type TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroup_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId *ywrapper.StringValue `protobuf:"bytes,131747175,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroup_State) Reset() {
	*x = TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroup_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_telemetry_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroup_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroup_State) ProtoMessage() {
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroup_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_telemetry_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroup_State.ProtoReflect.Descriptor instead.
func (*TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroup_State) Descriptor() ([]byte, []int) {
	return file_openconfig_telemetry_proto_rawDescGZIP(), []int{0, 2, 1, 0, 1, 0, 1}
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroup_State) GetGroupId() *ywrapper.StringValue {
	if x != nil {
		return x.GroupId
	}
	return nil
}

type TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile_Config `protobuf:"bytes,132049850,opt,name=config,proto3" json:"config,omitempty"`
	State  *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile_State  `protobuf:"bytes,26383831,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile) Reset() {
	*x = TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_telemetry_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile) ProtoMessage() {
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_telemetry_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile.ProtoReflect.Descriptor instead.
func (*TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile) Descriptor() ([]byte, []int) {
	return file_openconfig_telemetry_proto_rawDescGZIP(), []int{0, 2, 1, 0, 2, 0}
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile) GetConfig() *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile) GetState() *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile_State {
	if x != nil {
		return x.State
	}
	return nil
}

type TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfileKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SensorGroup   string                                                                                                     `protobuf:"bytes,1,opt,name=sensor_group,json=sensorGroup,proto3" json:"sensor_group,omitempty"`
	SensorProfile *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile `protobuf:"bytes,2,opt,name=sensor_profile,json=sensorProfile,proto3" json:"sensor_profile,omitempty"`
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfileKey) Reset() {
	*x = TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfileKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_telemetry_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfileKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfileKey) ProtoMessage() {
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfileKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_telemetry_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfileKey.ProtoReflect.Descriptor instead.
func (*TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfileKey) Descriptor() ([]byte, []int) {
	return file_openconfig_telemetry_proto_rawDescGZIP(), []int{0, 2, 1, 0, 2, 1}
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfileKey) GetSensorGroup() string {
	if x != nil {
		return x.SensorGroup
	}
	return ""
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfileKey) GetSensorProfile() *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile {
	if x != nil {
		return x.SensorProfile
	}
	return nil
}

type TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeartbeatInterval *ywrapper.UintValue   `protobuf:"bytes,283469623,opt,name=heartbeat_interval,json=heartbeatInterval,proto3" json:"heartbeat_interval,omitempty"`
	SampleInterval    *ywrapper.UintValue   `protobuf:"bytes,34411119,opt,name=sample_interval,json=sampleInterval,proto3" json:"sample_interval,omitempty"`
	SensorGroup       *ywrapper.StringValue `protobuf:"bytes,333338641,opt,name=sensor_group,json=sensorGroup,proto3" json:"sensor_group,omitempty"`
	SuppressRedundant *ywrapper.BoolValue   `protobuf:"bytes,42013784,opt,name=suppress_redundant,json=suppressRedundant,proto3" json:"suppress_redundant,omitempty"`
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile_Config) Reset() {
	*x = TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_telemetry_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile_Config) ProtoMessage() {
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_telemetry_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile_Config.ProtoReflect.Descriptor instead.
func (*TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_telemetry_proto_rawDescGZIP(), []int{0, 2, 1, 0, 2, 0, 0}
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile_Config) GetHeartbeatInterval() *ywrapper.UintValue {
	if x != nil {
		return x.HeartbeatInterval
	}
	return nil
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile_Config) GetSampleInterval() *ywrapper.UintValue {
	if x != nil {
		return x.SampleInterval
	}
	return nil
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile_Config) GetSensorGroup() *ywrapper.StringValue {
	if x != nil {
		return x.SensorGroup
	}
	return nil
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile_Config) GetSuppressRedundant() *ywrapper.BoolValue {
	if x != nil {
		return x.SuppressRedundant
	}
	return nil
}

type TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeartbeatInterval *ywrapper.UintValue   `protobuf:"bytes,98127520,opt,name=heartbeat_interval,json=heartbeatInterval,proto3" json:"heartbeat_interval,omitempty"`
	SampleInterval    *ywrapper.UintValue   `protobuf:"bytes,203118254,opt,name=sample_interval,json=sampleInterval,proto3" json:"sample_interval,omitempty"`
	SensorGroup       *ywrapper.StringValue `protobuf:"bytes,532316690,opt,name=sensor_group,json=sensorGroup,proto3" json:"sensor_group,omitempty"`
	SuppressRedundant *ywrapper.BoolValue   `protobuf:"bytes,499622995,opt,name=suppress_redundant,json=suppressRedundant,proto3" json:"suppress_redundant,omitempty"`
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile_State) Reset() {
	*x = TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_telemetry_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile_State) ProtoMessage() {
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_telemetry_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile_State.ProtoReflect.Descriptor instead.
func (*TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile_State) Descriptor() ([]byte, []int) {
	return file_openconfig_telemetry_proto_rawDescGZIP(), []int{0, 2, 1, 0, 2, 0, 1}
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile_State) GetHeartbeatInterval() *ywrapper.UintValue {
	if x != nil {
		return x.HeartbeatInterval
	}
	return nil
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile_State) GetSampleInterval() *ywrapper.UintValue {
	if x != nil {
		return x.SampleInterval
	}
	return nil
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile_State) GetSensorGroup() *ywrapper.StringValue {
	if x != nil {
		return x.SensorGroup
	}
	return nil
}

func (x *TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile_State) GetSuppressRedundant() *ywrapper.BoolValue {
	if x != nil {
		return x.SuppressRedundant
	}
	return nil
}

var File_openconfig_telemetry_proto protoreflect.FileDescriptor

var file_openconfig_telemetry_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x74, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x0e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x79, 0x65, 0x78, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd4, 0x8e, 0x01,
	0x0a, 0x0f, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x12, 0x88, 0x01, 0x0a, 0x12, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0xa0, 0xc6, 0xe5, 0x75, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x44,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x42, 0x27, 0x82, 0x41, 0x24, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x11, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x74, 0x0a, 0x0d,
	0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0xcc, 0xd7,
	0xf5, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x42, 0x22, 0x82, 0x41, 0x1f, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x52, 0x0c, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x12, 0x76, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0xf9, 0x82, 0xd9, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x22, 0x82, 0x41, 0x1f, 0x2f, 0x74, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0d, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x98, 0x18, 0x0a, 0x11, 0x44,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x12, 0xac, 0x01, 0x0a, 0x11, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x9b, 0x96, 0xc7, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x41, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x44, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x44,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b,
	0x65, 0x79, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x10, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x1a,
	0xef, 0x14, 0x0a, 0x10, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0xa2, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0xcc, 0xd9, 0xd3, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x40, 0x82, 0x41, 0x3d, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xba, 0x01, 0x0a, 0x0c, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xdd, 0xe7, 0x8a, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x9e, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0xc5, 0x90, 0xb6, 0x5b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42,
	0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x88, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x7e, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0xa6,
	0x96, 0xb9, 0x78, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x49,
	0x82, 0x41, 0x46, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x69, 0x64, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x1a, 0xc2, 0x0e, 0x0a, 0x0c, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0xd3, 0x01, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x88, 0xba, 0xec, 0x7d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x44, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x44, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x42, 0x52, 0x82, 0x41, 0x4f, 0x2f, 0x74, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xa2, 0x09, 0x0a, 0x0b, 0x44, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xd4, 0x01, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0xed, 0xab, 0x84, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5e, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x44, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x44, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x59, 0x82,
	0x41, 0x56, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0xd0, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xa2, 0x8d, 0xbe, 0x24, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x58, 0x82, 0x41, 0x55, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x1a, 0xf4, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xb9,
	0x01, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x8f, 0xe3, 0xcb, 0xc0, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6d, 0x82, 0x41, 0x6a, 0x2f, 0x74, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x12, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0xad, 0x01, 0x0a, 0x10, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0xd8, 0x90, 0xd8, 0x7f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6a, 0x82,
	0x41, 0x67, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x1a, 0xf1, 0x02, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0xb8, 0x01, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xec, 0xa2, 0xdf,
	0xcb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6c, 0x82,
	0x41, 0x69, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x12, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0xac, 0x01, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0xf5, 0xfa, 0xd2, 0x4b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x69, 0x82, 0x41, 0x66, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0f, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x1a, 0xb6,
	0x03, 0x0a, 0x0e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65,
	0x79, 0x12, 0x97, 0x01, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x66, 0x82, 0x41, 0x63, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x12, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x8e, 0x01, 0x0a, 0x10,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x63, 0x82, 0x41, 0x60, 0x2f, 0x74, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0f, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x79, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x57, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x44,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x87, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x7e, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0xcd, 0xb5,
	0xf8, 0xcc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x48,
	0x82, 0x41, 0x45, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x69, 0x64, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x1a, 0xe1, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x5d, 0x0a, 0x08, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x42, 0x82, 0x41, 0x3f,
	0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x69, 0x64, 0x52,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x6b, 0x0a, 0x11, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0x9a, 0x14, 0x0a, 0x0c, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x8f, 0x01, 0x0a, 0x0c, 0x73, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x83, 0xa0, 0xa8, 0x90, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x53,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x53, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x42, 0x2f, 0x82, 0x41, 0x2c, 0x2f,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0b, 0x73, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0xa2, 0x11, 0x0a, 0x0b, 0x53, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x8e, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x84, 0xc7, 0xb6, 0x60, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x74,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xa5, 0x01, 0x0a, 0x0c, 0x73, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0xaf, 0xc4, 0xec, 0xf0, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x53,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x50, 0x61, 0x74, 0x68, 0x73, 0x42, 0x3c, 0x82, 0x41, 0x39, 0x2f, 0x74, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2d, 0x70,
	0x61, 0x74, 0x68, 0x73, 0x52, 0x0b, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x50, 0x61, 0x74, 0x68,
	0x73, 0x12, 0x8b, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x9d, 0xc1, 0xcd, 0xdd,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e,
	0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a,
	0x94, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x89, 0x01, 0x0a, 0x0f, 0x73,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0xb3,
	0x85, 0xe2, 0x8a, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x46, 0x82, 0x41, 0x43, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x2d, 0x69, 0x64, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x1a, 0x9f, 0x0b, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0xbc, 0x01, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0xa0, 0xa1, 0xe7, 0x25, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x4e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x50, 0x61, 0x74, 0x68,
	0x73, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x50, 0x61, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x42,
	0x48, 0x82, 0x41, 0x45, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x73, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x50, 0x61, 0x74, 0x68, 0x1a, 0xed, 0x07, 0x0a, 0x0a, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x50, 0x61, 0x74, 0x68, 0x12, 0xbe, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x95, 0xda, 0xe7, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x53,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x50, 0x61, 0x74, 0x68, 0x73, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x50, 0x61, 0x74, 0x68, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x4f, 0x82, 0x41,
	0x4c, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x73, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xba, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x8a, 0xdb, 0xfd, 0x55, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x53,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x50, 0x61, 0x74, 0x68, 0x73, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x50, 0x61, 0x74, 0x68, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x4e, 0x82, 0x41, 0x4b,
	0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f,
	0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x2d, 0x70, 0x61, 0x74, 0x68, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x1a, 0xb0, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x9f, 0x01,
	0x0a, 0x0e, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x9d, 0xd5, 0xc6, 0x78, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x5e, 0x82, 0x41, 0x5b, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x73,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x0d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x83, 0x01, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0xbd, 0xa1, 0xf8, 0xf7, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x54, 0x82, 0x41, 0x51, 0x2f, 0x74,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2d, 0x70,
	0x61, 0x74, 0x68, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x61, 0x74, 0x68, 0x52,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x1a, 0xad, 0x02, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x9e, 0x01, 0x0a, 0x0e, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x88, 0xd8, 0x90, 0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x5d, 0x82, 0x41, 0x5a, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73,
	0x2f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2d, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x0d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x82, 0x01, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x8c, 0xf3, 0xcb, 0xfd, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x53, 0x82, 0x41, 0x50, 0x2f,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2d,
	0x70, 0x61, 0x74, 0x68, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x61, 0x74, 0x68, 0x52,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x1a, 0xe0, 0x01, 0x0a, 0x0d, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x50, 0x61, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x61, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4d, 0x82, 0x41, 0x4a, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2d, 0x70, 0x61,
	0x74, 0x68, 0x73, 0x2f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x2f,
	0x70, 0x61, 0x74, 0x68, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x6c, 0x0a, 0x0b, 0x73, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x4b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x50, 0x61, 0x74, 0x68,
	0x73, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x50, 0x61, 0x74, 0x68, 0x52, 0x0a, 0x73, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x50, 0x61, 0x74, 0x68, 0x1a, 0x92, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x0f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0xa6, 0xe8, 0xfd, 0xdc, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x45, 0x82, 0x41, 0x42, 0x2f, 0x74, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x69, 0x64, 0x52, 0x0d,
	0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x1a, 0xd2, 0x01,
	0x0a, 0x0e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79,
	0x12, 0x67, 0x0a, 0x0f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x74,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x69, 0x64, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x57, 0x0a, 0x0c, 0x73, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0b, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x1a, 0x8f, 0x5f, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0xb0, 0x01, 0x0a, 0x15, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xda,
	0xe4, 0xd5, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x38, 0x82, 0x41, 0x35, 0x2f, 0x74, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x64, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x14, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xbd, 0x01, 0x0a, 0x18, 0x70, 0x65, 0x72, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x96, 0x9e, 0xad, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x42, 0x3b, 0x82, 0x41, 0x38, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74,
	0x2d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x17,
	0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xf7, 0x1c, 0x0a, 0x14, 0x44, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0xdb, 0x01, 0x0a, 0x14, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x86, 0xb0, 0xd0, 0xc4, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x42, 0x4d, 0x82, 0x41, 0x4a, 0x2f,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x64,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2d, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x64, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xfb,
	0x18, 0x0a, 0x13, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xe1, 0x01, 0x0a, 0x0c, 0x73, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x98, 0xbe, 0xcc, 0xba, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x5e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x50, 0x61, 0x74, 0x68,
	0x73, 0x42, 0x5a, 0x82, 0x41, 0x57, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2d, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x64, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x52, 0x0b, 0x73,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0xc7, 0x01, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0xf8, 0x98, 0xb1, 0xec, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x53, 0x82, 0x41, 0x50, 0x2f, 0x74, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x64, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x1a, 0x9d, 0x09, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x50,
	0x61, 0x74, 0x68, 0x73, 0x12, 0xf8, 0x01, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0xfb, 0xba, 0xd2, 0x25, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x6c, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x50, 0x61, 0x74, 0x68, 0x73, 0x2e, 0x53, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x50, 0x61, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x42, 0x66, 0x82, 0x41, 0x63,
	0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2d, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2d, 0x70,
	0x61, 0x74, 0x68, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x50, 0x61, 0x74, 0x68, 0x1a,
	0xf2, 0x04, 0x0a, 0x0a, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x50, 0x61, 0x74, 0x68, 0x12, 0xf7,
	0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xa5, 0xf5, 0xca, 0xbe, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x50, 0x61, 0x74,
	0x68, 0x73, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x50, 0x61, 0x74, 0x68, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x6c, 0x82, 0x41, 0x69, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2d,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x64, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f,
	0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xe9, 0x02, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0xbd, 0x01, 0x0a, 0x0e, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0xcd, 0xa7, 0x8b, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x7b, 0x82, 0x41, 0x78, 0x2f, 0x74, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2d, 0x70, 0x61, 0x74,
	0x68, 0x73, 0x2f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2d, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x0d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x9f, 0x01, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0xed, 0xa5, 0xa4, 0x37,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x71, 0x82, 0x41, 0x6e,
	0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2d, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2d, 0x70,
	0x61, 0x74, 0x68, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x61, 0x74, 0x68, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x1a, 0x9d, 0x02, 0x0a, 0x0d, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x50,
	0x61, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x7f, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x6b, 0x82, 0x41, 0x68, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x2d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x64,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x73,
	0x2f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x2f, 0x70, 0x61, 0x74,
	0x68, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x8a, 0x01, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x69, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x50, 0x61, 0x74, 0x68, 0x73, 0x2e, 0x53, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x50, 0x61, 0x74, 0x68, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x50, 0x61, 0x74, 0x68, 0x1a, 0x95, 0x0c, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xb2,
	0x01, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xaa, 0xb8, 0xc6, 0x51, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x67, 0x82, 0x41, 0x64, 0x2f, 0x74, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x12, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0xa8, 0x01, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0xdb, 0x8d, 0xab, 0x95, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x64, 0x82, 0x41, 0x61, 0x2f, 0x74, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x64, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0f, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x12, 0xb4,
	0x01, 0x0a, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0xd0, 0xe5, 0xaa, 0xa0,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x44, 0x41, 0x54, 0x41, 0x45,
	0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x42, 0x5c, 0x82,
	0x41, 0x59, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2d,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x65, 0x6e, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0xae, 0x01, 0x0a, 0x12, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62,
	0x65, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0xc9, 0xfa, 0xfb,
	0xcb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x66, 0x82, 0x41, 0x63,
	0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2d, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x52, 0x11, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x7e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0xa0, 0xc0, 0xc1,
	0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x56, 0x82, 0x41, 0x53, 0x2f,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x64,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2d, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0xb8, 0x01, 0x0a, 0x16, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x18, 0x97, 0xf8, 0xe2, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x6a, 0x82, 0x41, 0x67, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2d, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x2d,
	0x71, 0x6f, 0x73, 0x2d, 0x6d, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x14, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x51, 0x6f, 0x73, 0x4d, 0x61, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x12, 0xb0, 0x01, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x97,
	0xbe, 0xe9, 0xac, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x53, 0x54,
	0x52, 0x45, 0x41, 0x4d, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x42, 0x5c, 0x82, 0x41,
	0x59, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2d, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x12, 0xa5, 0x01, 0x0a, 0x0f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0xf9, 0xdb, 0xf8, 0xbd, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x63, 0x82, 0x41, 0x60, 0x2f, 0x74, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x64, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x0e, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0xad, 0x01, 0x0a,
	0x12, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64,
	0x61, 0x6e, 0x74, 0x18, 0xc2, 0xd2, 0xb4, 0x5c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x66, 0x82, 0x41, 0x63, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2d, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x64, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x2d,
	0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x52, 0x11, 0x73, 0x75, 0x70, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x1a, 0x82, 0x02, 0x0a,
	0x16, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x60, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x50, 0x82, 0x41, 0x4d, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2d,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x64, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x85, 0x01, 0x0a, 0x14, 0x64, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x64, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0x90, 0x3f, 0x0a, 0x17, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xec, 0x01,
	0x0a, 0x17, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x9c, 0x92, 0xfb, 0x3f, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x65,
	0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x42,
	0x53, 0x82, 0x41, 0x50, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x65, 0x72,
	0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xe5, 0x3a, 0x0a,
	0x16, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xd6, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0xf1, 0x98, 0xa6, 0x79, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5f, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50,
	0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x5a, 0x82, 0x41,
	0x57, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x85, 0x02, 0x0a, 0x12, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x86, 0xdc, 0xd4, 0xe4, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x6a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x65, 0x72,
	0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x42, 0x66, 0x82,
	0x41, 0x63, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x11, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0xf8, 0x01, 0x0a, 0x0f, 0x73, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0xe8, 0xcc, 0xfc,
	0x78, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x42, 0x63,
	0x82, 0x41, 0x60, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x52, 0x0e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x12, 0xd2, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xe6, 0xa9,
	0xc1, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x59, 0x82, 0x41, 0x56, 0x2f, 0x74, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x90, 0x07, 0x0a, 0x06, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0xbb, 0x01, 0x0a, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x18, 0x8b, 0xcb, 0xa8, 0xea, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x44, 0x41, 0x54, 0x41, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x4d, 0x45, 0x54, 0x48,
	0x4f, 0x44, 0x42, 0x63, 0x82, 0x41, 0x60, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x74, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65,
	0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x12, 0xbb, 0x01, 0x0a, 0x14, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xfe, 0xc4, 0x9c, 0x45, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6f, 0x82, 0x41, 0x6c, 0x2f,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70,
	0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x74, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2d, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x12, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x8e, 0x01, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x85, 0x9f, 0xa6, 0x85, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5f, 0x82, 0x41, 0x5c, 0x2f, 0x74,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x65,
	0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x74, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0xbf, 0x01, 0x0a, 0x16, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x71, 0x6f, 0x73, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x84, 0xcb, 0xb4, 0x7b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x71, 0x82, 0x41, 0x6e, 0x2f, 0x74,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x65,
	0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x74, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64,
	0x2d, 0x71, 0x6f, 0x73, 0x2d, 0x6d, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x14, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x51, 0x6f, 0x73, 0x4d, 0x61, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x12, 0xb6, 0x01, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18,
	0xd0, 0xdc, 0xa2, 0x7d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x53, 0x54,
	0x52, 0x45, 0x41, 0x4d, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x42, 0x63, 0x82, 0x41,
	0x60, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x1a, 0x90, 0x0d, 0x0a, 0x11,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x12, 0xa8, 0x02, 0x0a, 0x11, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0xa1, 0xc8, 0x85, 0x45, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x7e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x44, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79,
	0x42, 0x78, 0x82, 0x41, 0x75, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x2d,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x65,
	0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x10, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0xec, 0x07, 0x0a,
	0x10, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0xa0, 0x02, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xa6, 0xb7, 0xe9,
	0x89, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x82, 0x01, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x7f, 0x82, 0x41, 0x7c,
	0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x74, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x9b, 0x02, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x93,
	0x80, 0xe3, 0x45, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x81, 0x01, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x7e, 0x82, 0x41, 0x7b,
	0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x74, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x1a, 0xcb, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xc0, 0x01,
	0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0xf4, 0xc7, 0xdf, 0xc8, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x89, 0x01, 0x82, 0x41,
	0x85, 0x01, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x2d, 0x69, 0x64, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x1a, 0xc8, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xbe, 0x01, 0x0a, 0x08, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0xe7, 0x9a, 0xe9, 0x3e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x88, 0x01, 0x82, 0x41, 0x84, 0x01, 0x2f, 0x74,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x65,
	0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x74, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d,
	0x69, 0x64, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x1a, 0xe0, 0x02, 0x0a, 0x13,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4b, 0x65, 0x79, 0x12, 0x9d, 0x01, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x81, 0x01, 0x82, 0x41, 0x7e, 0x2f, 0x74, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x2d,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x69, 0x64, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0xa8, 0x01, 0x0a, 0x11, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x7b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x44, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x10, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0xde,
	0x16, 0x0a, 0x0e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x12, 0x97, 0x02, 0x0a, 0x0e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x18, 0x95, 0xdd, 0xb8, 0xce, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x78,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x42, 0x72, 0x82, 0x41, 0x6f, 0x2f, 0x74, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x65, 0x72,
	0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74,
	0x2d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x73, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x0d, 0x73, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x1a, 0xd8, 0x11, 0x0a, 0x0d,
	0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x92, 0x02,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xba, 0xd7, 0xfb, 0x3e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x7c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x65, 0x72,
	0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x79, 0x82, 0x41, 0x76, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x65, 0x72,
	0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x2f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x8e, 0x02, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xd7, 0xab, 0xca,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x53,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x78, 0x82, 0x41, 0x75, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x74, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2d, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2d, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x1a, 0xd1, 0x06, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xd6,
	0x01, 0x0a, 0x12, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0xb7, 0xce, 0x95, 0x87, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x8d, 0x01, 0x82, 0x41, 0x89, 0x01, 0x2f, 0x74, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x73, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x2d, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x52, 0x11, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0xcc, 0x01, 0x0a, 0x0f, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0xef, 0xa4, 0xb4, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x8a, 0x01, 0x82, 0x41, 0x86, 0x01,
	0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x74, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x2f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2d, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x0e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0xc6, 0x01, 0x0a, 0x0c, 0x73, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x91, 0xb0, 0xf9, 0x9e, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x87, 0x01, 0x82, 0x41, 0x83, 0x01, 0x2f,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70,
	0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x74, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f,
	0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x0b, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0xd5, 0x01, 0x0a, 0x12, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x64,
	0x75, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x18, 0xd8, 0xa8, 0x84, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x8d, 0x01, 0x82, 0x41, 0x89, 0x01, 0x2f, 0x74, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x73, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x72, 0x65, 0x64, 0x75, 0x6e,
	0x64, 0x61, 0x6e, 0x74, 0x52, 0x11, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x1a, 0xcc, 0x06, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0xd4, 0x01, 0x0a, 0x12, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0xa0, 0x9d, 0xe5, 0x2e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x8c, 0x01, 0x82, 0x41, 0x88, 0x01, 0x2f, 0x74, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x65, 0x72,
	0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74,
	0x2d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x73, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x2d, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x11, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0xcb, 0x01, 0x0a, 0x0f, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0xae, 0xad, 0xed,
	0x60, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x89, 0x01, 0x82, 0x41, 0x85,
	0x01, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x2f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2d, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x0e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0xc5, 0x01, 0x0a, 0x0c, 0x73, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x92, 0x84, 0xea, 0xfd, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x86, 0x01, 0x82, 0x41, 0x82, 0x01, 0x2f,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70,
	0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x74, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f,
	0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x0b, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0xd5,
	0x01, 0x0a, 0x12, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x64, 0x75,
	0x6e, 0x64, 0x61, 0x6e, 0x74, 0x18, 0xd3, 0xc8, 0x9e, 0xee, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x8c, 0x01, 0x82, 0x41, 0x88, 0x01, 0x2f, 0x74, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x73, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64,
	0x61, 0x6e, 0x74, 0x52, 0x11, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x64,
	0x75, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x1a, 0xd6, 0x02, 0x0a, 0x10, 0x53, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x12, 0xa2, 0x01, 0x0a, 0x0c,
	0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x7f, 0x82, 0x41, 0x7c, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x74, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2d, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2d, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x0b, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x9c, 0x01, 0x0a, 0x0e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x75, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x65, 0x72,
	0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x52, 0x0d, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x1a,
	0x92, 0x08, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xb9, 0x01, 0x0a, 0x08, 0x65, 0x6e,
	0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0xb2, 0xf7, 0xff, 0x54, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x36, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x44, 0x41, 0x54, 0x41, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e,
	0x47, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x42, 0x62, 0x82, 0x41, 0x5f, 0x2f, 0x74, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x2d,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x65, 0x6e, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x85, 0x01, 0x0a, 0x02, 0x69, 0x64, 0x18, 0xce, 0xc6, 0xd3,
	0xa9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5c, 0x82, 0x41, 0x59,
	0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x74, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0xba, 0x01,
	0x0a, 0x14, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xbb, 0xc0, 0x86, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6e, 0x82, 0x41, 0x6b, 0x2f, 0x74, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x8d, 0x01, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0xec, 0xdc, 0xd1, 0xeb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x5e, 0x82, 0x41, 0x5b, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x74, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0xbf, 0x01, 0x0a, 0x16, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x6d, 0x61,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x85, 0xc8, 0xf1, 0xef, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x70, 0x82, 0x41, 0x6d, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x74, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x71, 0x6f, 0x73, 0x2d, 0x6d,
	0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x14, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x64, 0x51, 0x6f, 0x73, 0x4d, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0xb5, 0x01, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0xf1, 0x9f, 0xa4, 0x29, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x42, 0x62, 0x82, 0x41, 0x5f, 0x2f, 0x74, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x1a, 0x9d, 0x02, 0x0a, 0x19, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b,
	0x65, 0x79, 0x12, 0x6c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x58, 0x82, 0x41, 0x55, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x2d,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x65,
	0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x91, 0x01, 0x0a, 0x17, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x58, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x65,
	0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x70, 0x65,
	0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x17, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x6f, 0x63, 0x73,
	0x79, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_openconfig_telemetry_proto_rawDescOnce sync.Once
	file_openconfig_telemetry_proto_rawDescData = file_openconfig_telemetry_proto_rawDesc
)

func file_openconfig_telemetry_proto_rawDescGZIP() []byte {
	file_openconfig_telemetry_proto_rawDescOnce.Do(func() {
		file_openconfig_telemetry_proto_rawDescData = protoimpl.X.CompressGZIP(file_openconfig_telemetry_proto_rawDescData)
	})
	return file_openconfig_telemetry_proto_rawDescData
}

var file_openconfig_telemetry_proto_msgTypes = make([]protoimpl.MessageInfo, 45)
var file_openconfig_telemetry_proto_goTypes = []interface{}{
	(*TelemetrySystem)(nil),                                                                                                        // 0: openconfig.TelemetrySystem
	(*TelemetrySystem_DestinationGroups)(nil),                                                                                      // 1: openconfig.TelemetrySystem.DestinationGroups
	(*TelemetrySystem_SensorGroups)(nil),                                                                                           // 2: openconfig.TelemetrySystem.SensorGroups
	(*TelemetrySystem_Subscriptions)(nil),                                                                                          // 3: openconfig.TelemetrySystem.Subscriptions
	(*TelemetrySystem_DestinationGroups_DestinationGroup)(nil),                                                                     // 4: openconfig.TelemetrySystem.DestinationGroups.DestinationGroup
	(*TelemetrySystem_DestinationGroups_DestinationGroupKey)(nil),                                                                  // 5: openconfig.TelemetrySystem.DestinationGroups.DestinationGroupKey
	(*TelemetrySystem_DestinationGroups_DestinationGroup_Config)(nil),                                                              // 6: openconfig.TelemetrySystem.DestinationGroups.DestinationGroup.Config
	(*TelemetrySystem_DestinationGroups_DestinationGroup_Destinations)(nil),                                                        // 7: openconfig.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations
	(*TelemetrySystem_DestinationGroups_DestinationGroup_State)(nil),                                                               // 8: openconfig.TelemetrySystem.DestinationGroups.DestinationGroup.State
	(*TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination)(nil),                                            // 9: openconfig.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination
	(*TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationKey)(nil),                                         // 10: openconfig.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.DestinationKey
	(*TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config)(nil),                                     // 11: openconfig.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination.Config
	(*TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State)(nil),                                      // 12: openconfig.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination.State
	(*TelemetrySystem_SensorGroups_SensorGroup)(nil),                                                                               // 13: openconfig.TelemetrySystem.SensorGroups.SensorGroup
	(*TelemetrySystem_SensorGroups_SensorGroupKey)(nil),                                                                            // 14: openconfig.TelemetrySystem.SensorGroups.SensorGroupKey
	(*TelemetrySystem_SensorGroups_SensorGroup_Config)(nil),                                                                        // 15: openconfig.TelemetrySystem.SensorGroups.SensorGroup.Config
	(*TelemetrySystem_SensorGroups_SensorGroup_SensorPaths)(nil),                                                                   // 16: openconfig.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths
	(*TelemetrySystem_SensorGroups_SensorGroup_State)(nil),                                                                         // 17: openconfig.TelemetrySystem.SensorGroups.SensorGroup.State
	(*TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath)(nil),                                                        // 18: openconfig.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath
	(*TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPathKey)(nil),                                                     // 19: openconfig.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPathKey
	(*TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config)(nil),                                                 // 20: openconfig.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.Config
	(*TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State)(nil),                                                  // 21: openconfig.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.State
	(*TelemetrySystem_Subscriptions_DynamicSubscriptions)(nil),                                                                     // 22: openconfig.TelemetrySystem.Subscriptions.DynamicSubscriptions
	(*TelemetrySystem_Subscriptions_PersistentSubscriptions)(nil),                                                                  // 23: openconfig.TelemetrySystem.Subscriptions.PersistentSubscriptions
	(*TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription)(nil),                                                 // 24: openconfig.TelemetrySystem.Subscriptions.DynamicSubscriptions.DynamicSubscription
	(*TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscriptionKey)(nil),                                              // 25: openconfig.TelemetrySystem.Subscriptions.DynamicSubscriptions.DynamicSubscriptionKey
	(*TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths)(nil),                                     // 26: openconfig.TelemetrySystem.Subscriptions.DynamicSubscriptions.DynamicSubscription.SensorPaths
	(*TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_State)(nil),                                           // 27: openconfig.TelemetrySystem.Subscriptions.DynamicSubscriptions.DynamicSubscription.State
	(*TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths_SensorPath)(nil),                          // 28: openconfig.TelemetrySystem.Subscriptions.DynamicSubscriptions.DynamicSubscription.SensorPaths.SensorPath
	(*TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths_SensorPathKey)(nil),                       // 29: openconfig.TelemetrySystem.Subscriptions.DynamicSubscriptions.DynamicSubscription.SensorPaths.SensorPathKey
	(*TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths_SensorPath_State)(nil),                    // 30: openconfig.TelemetrySystem.Subscriptions.DynamicSubscriptions.DynamicSubscription.SensorPaths.SensorPath.State
	(*TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription)(nil),                                           // 31: openconfig.TelemetrySystem.Subscriptions.PersistentSubscriptions.PersistentSubscription
	(*TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscriptionKey)(nil),                                        // 32: openconfig.TelemetrySystem.Subscriptions.PersistentSubscriptions.PersistentSubscriptionKey
	(*TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_Config)(nil),                                    // 33: openconfig.TelemetrySystem.Subscriptions.PersistentSubscriptions.PersistentSubscription.Config
	(*TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups)(nil),                         // 34: openconfig.TelemetrySystem.Subscriptions.PersistentSubscriptions.PersistentSubscription.DestinationGroups
	(*TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles)(nil),                            // 35: openconfig.TelemetrySystem.Subscriptions.PersistentSubscriptions.PersistentSubscription.SensorProfiles
	(*TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_State)(nil),                                     // 36: openconfig.TelemetrySystem.Subscriptions.PersistentSubscriptions.PersistentSubscription.State
	(*TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroup)(nil),        // 37: openconfig.TelemetrySystem.Subscriptions.PersistentSubscriptions.PersistentSubscription.DestinationGroups.DestinationGroup
	(*TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroupKey)(nil),     // 38: openconfig.TelemetrySystem.Subscriptions.PersistentSubscriptions.PersistentSubscription.DestinationGroups.DestinationGroupKey
	(*TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroup_Config)(nil), // 39: openconfig.TelemetrySystem.Subscriptions.PersistentSubscriptions.PersistentSubscription.DestinationGroups.DestinationGroup.Config
	(*TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroup_State)(nil),  // 40: openconfig.TelemetrySystem.Subscriptions.PersistentSubscriptions.PersistentSubscription.DestinationGroups.DestinationGroup.State
	(*TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile)(nil),              // 41: openconfig.TelemetrySystem.Subscriptions.PersistentSubscriptions.PersistentSubscription.SensorProfiles.SensorProfile
	(*TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfileKey)(nil),           // 42: openconfig.TelemetrySystem.Subscriptions.PersistentSubscriptions.PersistentSubscription.SensorProfiles.SensorProfileKey
	(*TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile_Config)(nil),       // 43: openconfig.TelemetrySystem.Subscriptions.PersistentSubscriptions.PersistentSubscription.SensorProfiles.SensorProfile.Config
	(*TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile_State)(nil),        // 44: openconfig.TelemetrySystem.Subscriptions.PersistentSubscriptions.PersistentSubscription.SensorProfiles.SensorProfile.State
	(*ywrapper.StringValue)(nil),                    // 45: ywrapper.StringValue
	(*ywrapper.UintValue)(nil),                      // 46: ywrapper.UintValue
	(OpenconfigTelemetryTypesDATAENCODINGMETHOD)(0), // 47: openconfig.OpenconfigTelemetryTypesDATAENCODINGMETHOD
	(OpenconfigTelemetryTypesSTREAMPROTOCOL)(0),     // 48: openconfig.OpenconfigTelemetryTypesSTREAMPROTOCOL
	(*ywrapper.BoolValue)(nil),                      // 49: ywrapper.BoolValue
}
var file_openconfig_telemetry_proto_depIdxs = []int32{
	1,  // 0: openconfig.TelemetrySystem.destination_groups:type_name -> openconfig.TelemetrySystem.DestinationGroups
	2,  // 1: openconfig.TelemetrySystem.sensor_groups:type_name -> openconfig.TelemetrySystem.SensorGroups
	3,  // 2: openconfig.TelemetrySystem.subscriptions:type_name -> openconfig.TelemetrySystem.Subscriptions
	5,  // 3: openconfig.TelemetrySystem.DestinationGroups.destination_group:type_name -> openconfig.TelemetrySystem.DestinationGroups.DestinationGroupKey
	14, // 4: openconfig.TelemetrySystem.SensorGroups.sensor_group:type_name -> openconfig.TelemetrySystem.SensorGroups.SensorGroupKey
	22, // 5: openconfig.TelemetrySystem.Subscriptions.dynamic_subscriptions:type_name -> openconfig.TelemetrySystem.Subscriptions.DynamicSubscriptions
	23, // 6: openconfig.TelemetrySystem.Subscriptions.persistent_subscriptions:type_name -> openconfig.TelemetrySystem.Subscriptions.PersistentSubscriptions
	6,  // 7: openconfig.TelemetrySystem.DestinationGroups.DestinationGroup.config:type_name -> openconfig.TelemetrySystem.DestinationGroups.DestinationGroup.Config
	7,  // 8: openconfig.TelemetrySystem.DestinationGroups.DestinationGroup.destinations:type_name -> openconfig.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations
	8,  // 9: openconfig.TelemetrySystem.DestinationGroups.DestinationGroup.state:type_name -> openconfig.TelemetrySystem.DestinationGroups.DestinationGroup.State
	4,  // 10: openconfig.TelemetrySystem.DestinationGroups.DestinationGroupKey.destination_group:type_name -> openconfig.TelemetrySystem.DestinationGroups.DestinationGroup
	45, // 11: openconfig.TelemetrySystem.DestinationGroups.DestinationGroup.Config.group_id:type_name -> ywrapper.StringValue
	10, // 12: openconfig.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.destination:type_name -> openconfig.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.DestinationKey
	45, // 13: openconfig.TelemetrySystem.DestinationGroups.DestinationGroup.State.group_id:type_name -> ywrapper.StringValue
	11, // 14: openconfig.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination.config:type_name -> openconfig.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination.Config
	12, // 15: openconfig.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination.state:type_name -> openconfig.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination.State
	9,  // 16: openconfig.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.DestinationKey.destination:type_name -> openconfig.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination
	45, // 17: openconfig.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination.Config.destination_address:type_name -> ywrapper.StringValue
	46, // 18: openconfig.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination.Config.destination_port:type_name -> ywrapper.UintValue
	45, // 19: openconfig.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination.State.destination_address:type_name -> ywrapper.StringValue
	46, // 20: openconfig.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination.State.destination_port:type_name -> ywrapper.UintValue
	15, // 21: openconfig.TelemetrySystem.SensorGroups.SensorGroup.config:type_name -> openconfig.TelemetrySystem.SensorGroups.SensorGroup.Config
	16, // 22: openconfig.TelemetrySystem.SensorGroups.SensorGroup.sensor_paths:type_name -> openconfig.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths
	17, // 23: openconfig.TelemetrySystem.SensorGroups.SensorGroup.state:type_name -> openconfig.TelemetrySystem.SensorGroups.SensorGroup.State
	13, // 24: openconfig.TelemetrySystem.SensorGroups.SensorGroupKey.sensor_group:type_name -> openconfig.TelemetrySystem.SensorGroups.SensorGroup
	45, // 25: openconfig.TelemetrySystem.SensorGroups.SensorGroup.Config.sensor_group_id:type_name -> ywrapper.StringValue
	19, // 26: openconfig.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.sensor_path:type_name -> openconfig.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPathKey
	45, // 27: openconfig.TelemetrySystem.SensorGroups.SensorGroup.State.sensor_group_id:type_name -> ywrapper.StringValue
	20, // 28: openconfig.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.config:type_name -> openconfig.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.Config
	21, // 29: openconfig.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.state:type_name -> openconfig.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.State
	18, // 30: openconfig.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPathKey.sensor_path:type_name -> openconfig.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath
	45, // 31: openconfig.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.Config.exclude_filter:type_name -> ywrapper.StringValue
	45, // 32: openconfig.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.Config.path:type_name -> ywrapper.StringValue
	45, // 33: openconfig.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.State.exclude_filter:type_name -> ywrapper.StringValue
	45, // 34: openconfig.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.State.path:type_name -> ywrapper.StringValue
	25, // 35: openconfig.TelemetrySystem.Subscriptions.DynamicSubscriptions.dynamic_subscription:type_name -> openconfig.TelemetrySystem.Subscriptions.DynamicSubscriptions.DynamicSubscriptionKey
	32, // 36: openconfig.TelemetrySystem.Subscriptions.PersistentSubscriptions.persistent_subscription:type_name -> openconfig.TelemetrySystem.Subscriptions.PersistentSubscriptions.PersistentSubscriptionKey
	26, // 37: openconfig.TelemetrySystem.Subscriptions.DynamicSubscriptions.DynamicSubscription.sensor_paths:type_name -> openconfig.TelemetrySystem.Subscriptions.DynamicSubscriptions.DynamicSubscription.SensorPaths
	27, // 38: openconfig.TelemetrySystem.Subscriptions.DynamicSubscriptions.DynamicSubscription.state:type_name -> openconfig.TelemetrySystem.Subscriptions.DynamicSubscriptions.DynamicSubscription.State
	24, // 39: openconfig.TelemetrySystem.Subscriptions.DynamicSubscriptions.DynamicSubscriptionKey.dynamic_subscription:type_name -> openconfig.TelemetrySystem.Subscriptions.DynamicSubscriptions.DynamicSubscription
	29, // 40: openconfig.TelemetrySystem.Subscriptions.DynamicSubscriptions.DynamicSubscription.SensorPaths.sensor_path:type_name -> openconfig.TelemetrySystem.Subscriptions.DynamicSubscriptions.DynamicSubscription.SensorPaths.SensorPathKey
	45, // 41: openconfig.TelemetrySystem.Subscriptions.DynamicSubscriptions.DynamicSubscription.State.destination_address:type_name -> ywrapper.StringValue
	46, // 42: openconfig.TelemetrySystem.Subscriptions.DynamicSubscriptions.DynamicSubscription.State.destination_port:type_name -> ywrapper.UintValue
	47, // 43: openconfig.TelemetrySystem.Subscriptions.DynamicSubscriptions.DynamicSubscription.State.encoding:type_name -> openconfig.OpenconfigTelemetryTypesDATAENCODINGMETHOD
	46, // 44: openconfig.TelemetrySystem.Subscriptions.DynamicSubscriptions.DynamicSubscription.State.heartbeat_interval:type_name -> ywrapper.UintValue
	46, // 45: openconfig.TelemetrySystem.Subscriptions.DynamicSubscriptions.DynamicSubscription.State.id:type_name -> ywrapper.UintValue
	46, // 46: openconfig.TelemetrySystem.Subscriptions.DynamicSubscriptions.DynamicSubscription.State.originated_qos_marking:type_name -> ywrapper.UintValue
	48, // 47: openconfig.TelemetrySystem.Subscriptions.DynamicSubscriptions.DynamicSubscription.State.protocol:type_name -> openconfig.OpenconfigTelemetryTypesSTREAMPROTOCOL
	46, // 48: openconfig.TelemetrySystem.Subscriptions.DynamicSubscriptions.DynamicSubscription.State.sample_interval:type_name -> ywrapper.UintValue
	49, // 49: openconfig.TelemetrySystem.Subscriptions.DynamicSubscriptions.DynamicSubscription.State.suppress_redundant:type_name -> ywrapper.BoolValue
	30, // 50: openconfig.TelemetrySystem.Subscriptions.DynamicSubscriptions.DynamicSubscription.SensorPaths.SensorPath.state:type_name -> openconfig.TelemetrySystem.Subscriptions.DynamicSubscriptions.DynamicSubscription.SensorPaths.SensorPath.State
	28, // 51: openconfig.TelemetrySystem.Subscriptions.DynamicSubscriptions.DynamicSubscription.SensorPaths.SensorPathKey.sensor_path:type_name -> openconfig.TelemetrySystem.Subscriptions.DynamicSubscriptions.DynamicSubscription.SensorPaths.SensorPath
	45, // 52: openconfig.TelemetrySystem.Subscriptions.DynamicSubscriptions.DynamicSubscription.SensorPaths.SensorPath.State.exclude_filter:type_name -> ywrapper.StringValue
	45, // 53: openconfig.TelemetrySystem.Subscriptions.DynamicSubscriptions.DynamicSubscription.SensorPaths.SensorPath.State.path:type_name -> ywrapper.StringValue
	33, // 54: openconfig.TelemetrySystem.Subscriptions.PersistentSubscriptions.PersistentSubscription.config:type_name -> openconfig.TelemetrySystem.Subscriptions.PersistentSubscriptions.PersistentSubscription.Config
	34, // 55: openconfig.TelemetrySystem.Subscriptions.PersistentSubscriptions.PersistentSubscription.destination_groups:type_name -> openconfig.TelemetrySystem.Subscriptions.PersistentSubscriptions.PersistentSubscription.DestinationGroups
	35, // 56: openconfig.TelemetrySystem.Subscriptions.PersistentSubscriptions.PersistentSubscription.sensor_profiles:type_name -> openconfig.TelemetrySystem.Subscriptions.PersistentSubscriptions.PersistentSubscription.SensorProfiles
	36, // 57: openconfig.TelemetrySystem.Subscriptions.PersistentSubscriptions.PersistentSubscription.state:type_name -> openconfig.TelemetrySystem.Subscriptions.PersistentSubscriptions.PersistentSubscription.State
	31, // 58: openconfig.TelemetrySystem.Subscriptions.PersistentSubscriptions.PersistentSubscriptionKey.persistent_subscription:type_name -> openconfig.TelemetrySystem.Subscriptions.PersistentSubscriptions.PersistentSubscription
	47, // 59: openconfig.TelemetrySystem.Subscriptions.PersistentSubscriptions.PersistentSubscription.Config.encoding:type_name -> openconfig.OpenconfigTelemetryTypesDATAENCODINGMETHOD
	45, // 60: openconfig.TelemetrySystem.Subscriptions.PersistentSubscriptions.PersistentSubscription.Config.local_source_address:type_name -> ywrapper.StringValue
	45, // 61: openconfig.TelemetrySystem.Subscriptions.PersistentSubscriptions.PersistentSubscription.Config.name:type_name -> ywrapper.StringValue
	46, // 62: openconfig.TelemetrySystem.Subscriptions.PersistentSubscriptions.PersistentSubscription.Config.originated_qos_marking:type_name -> ywrapper.UintValue
	48, // 63: openconfig.TelemetrySystem.Subscriptions.PersistentSubscriptions.PersistentSubscription.Config.protocol:type_name -> openconfig.OpenconfigTelemetryTypesSTREAMPROTOCOL
	38, // 64: openconfig.TelemetrySystem.Subscriptions.PersistentSubscriptions.PersistentSubscription.DestinationGroups.destination_group:type_name -> openconfig.TelemetrySystem.Subscriptions.PersistentSubscriptions.PersistentSubscription.DestinationGroups.DestinationGroupKey
	42, // 65: openconfig.TelemetrySystem.Subscriptions.PersistentSubscriptions.PersistentSubscription.SensorProfiles.sensor_profile:type_name -> openconfig.TelemetrySystem.Subscriptions.PersistentSubscriptions.PersistentSubscription.SensorProfiles.SensorProfileKey
	47, // 66: openconfig.TelemetrySystem.Subscriptions.PersistentSubscriptions.PersistentSubscription.State.encoding:type_name -> openconfig.OpenconfigTelemetryTypesDATAENCODINGMETHOD
	46, // 67: openconfig.TelemetrySystem.Subscriptions.PersistentSubscriptions.PersistentSubscription.State.id:type_name -> ywrapper.UintValue
	45, // 68: openconfig.TelemetrySystem.Subscriptions.PersistentSubscriptions.PersistentSubscription.State.local_source_address:type_name -> ywrapper.StringValue
	45, // 69: openconfig.TelemetrySystem.Subscriptions.PersistentSubscriptions.PersistentSubscription.State.name:type_name -> ywrapper.StringValue
	46, // 70: openconfig.TelemetrySystem.Subscriptions.PersistentSubscriptions.PersistentSubscription.State.originated_qos_marking:type_name -> ywrapper.UintValue
	48, // 71: openconfig.TelemetrySystem.Subscriptions.PersistentSubscriptions.PersistentSubscription.State.protocol:type_name -> openconfig.OpenconfigTelemetryTypesSTREAMPROTOCOL
	39, // 72: openconfig.TelemetrySystem.Subscriptions.PersistentSubscriptions.PersistentSubscription.DestinationGroups.DestinationGroup.config:type_name -> openconfig.TelemetrySystem.Subscriptions.PersistentSubscriptions.PersistentSubscription.DestinationGroups.DestinationGroup.Config
	40, // 73: openconfig.TelemetrySystem.Subscriptions.PersistentSubscriptions.PersistentSubscription.DestinationGroups.DestinationGroup.state:type_name -> openconfig.TelemetrySystem.Subscriptions.PersistentSubscriptions.PersistentSubscription.DestinationGroups.DestinationGroup.State
	37, // 74: openconfig.TelemetrySystem.Subscriptions.PersistentSubscriptions.PersistentSubscription.DestinationGroups.DestinationGroupKey.destination_group:type_name -> openconfig.TelemetrySystem.Subscriptions.PersistentSubscriptions.PersistentSubscription.DestinationGroups.DestinationGroup
	45, // 75: openconfig.TelemetrySystem.Subscriptions.PersistentSubscriptions.PersistentSubscription.DestinationGroups.DestinationGroup.Config.group_id:type_name -> ywrapper.StringValue
	45, // 76: openconfig.TelemetrySystem.Subscriptions.PersistentSubscriptions.PersistentSubscription.DestinationGroups.DestinationGroup.State.group_id:type_name -> ywrapper.StringValue
	43, // 77: openconfig.TelemetrySystem.Subscriptions.PersistentSubscriptions.PersistentSubscription.SensorProfiles.SensorProfile.config:type_name -> openconfig.TelemetrySystem.Subscriptions.PersistentSubscriptions.PersistentSubscription.SensorProfiles.SensorProfile.Config
	44, // 78: openconfig.TelemetrySystem.Subscriptions.PersistentSubscriptions.PersistentSubscription.SensorProfiles.SensorProfile.state:type_name -> openconfig.TelemetrySystem.Subscriptions.PersistentSubscriptions.PersistentSubscription.SensorProfiles.SensorProfile.State
	41, // 79: openconfig.TelemetrySystem.Subscriptions.PersistentSubscriptions.PersistentSubscription.SensorProfiles.SensorProfileKey.sensor_profile:type_name -> openconfig.TelemetrySystem.Subscriptions.PersistentSubscriptions.PersistentSubscription.SensorProfiles.SensorProfile
	46, // 80: openconfig.TelemetrySystem.Subscriptions.PersistentSubscriptions.PersistentSubscription.SensorProfiles.SensorProfile.Config.heartbeat_interval:type_name -> ywrapper.UintValue
	46, // 81: openconfig.TelemetrySystem.Subscriptions.PersistentSubscriptions.PersistentSubscription.SensorProfiles.SensorProfile.Config.sample_interval:type_name -> ywrapper.UintValue
	45, // 82: openconfig.TelemetrySystem.Subscriptions.PersistentSubscriptions.PersistentSubscription.SensorProfiles.SensorProfile.Config.sensor_group:type_name -> ywrapper.StringValue
	49, // 83: openconfig.TelemetrySystem.Subscriptions.PersistentSubscriptions.PersistentSubscription.SensorProfiles.SensorProfile.Config.suppress_redundant:type_name -> ywrapper.BoolValue
	46, // 84: openconfig.TelemetrySystem.Subscriptions.PersistentSubscriptions.PersistentSubscription.SensorProfiles.SensorProfile.State.heartbeat_interval:type_name -> ywrapper.UintValue
	46, // 85: openconfig.TelemetrySystem.Subscriptions.PersistentSubscriptions.PersistentSubscription.SensorProfiles.SensorProfile.State.sample_interval:type_name -> ywrapper.UintValue
	45, // 86: openconfig.TelemetrySystem.Subscriptions.PersistentSubscriptions.PersistentSubscription.SensorProfiles.SensorProfile.State.sensor_group:type_name -> ywrapper.StringValue
	49, // 87: openconfig.TelemetrySystem.Subscriptions.PersistentSubscriptions.PersistentSubscription.SensorProfiles.SensorProfile.State.suppress_redundant:type_name -> ywrapper.BoolValue
	88, // [88:88] is the sub-list for method output_type
	88, // [88:88] is the sub-list for method input_type
	88, // [88:88] is the sub-list for extension type_name
	88, // [88:88] is the sub-list for extension extendee
	0,  // [0:88] is the sub-list for field type_name
}

func init() { file_openconfig_telemetry_proto_init() }
func file_openconfig_telemetry_proto_init() {
	if File_openconfig_telemetry_proto != nil {
		return
	}
	file_openconfig_enums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_openconfig_telemetry_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetrySystem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_telemetry_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetrySystem_DestinationGroups); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_telemetry_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetrySystem_SensorGroups); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_telemetry_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetrySystem_Subscriptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_telemetry_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetrySystem_DestinationGroups_DestinationGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_telemetry_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetrySystem_DestinationGroups_DestinationGroupKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_telemetry_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetrySystem_DestinationGroups_DestinationGroup_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_telemetry_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetrySystem_DestinationGroups_DestinationGroup_Destinations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_telemetry_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetrySystem_DestinationGroups_DestinationGroup_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_telemetry_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_telemetry_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_telemetry_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_telemetry_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_telemetry_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetrySystem_SensorGroups_SensorGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_telemetry_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetrySystem_SensorGroups_SensorGroupKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_telemetry_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetrySystem_SensorGroups_SensorGroup_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_telemetry_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetrySystem_SensorGroups_SensorGroup_SensorPaths); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_telemetry_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetrySystem_SensorGroups_SensorGroup_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_telemetry_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_telemetry_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPathKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_telemetry_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_telemetry_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_telemetry_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetrySystem_Subscriptions_DynamicSubscriptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_telemetry_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetrySystem_Subscriptions_PersistentSubscriptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_telemetry_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_telemetry_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscriptionKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_telemetry_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_telemetry_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_telemetry_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths_SensorPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_telemetry_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths_SensorPathKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_telemetry_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths_SensorPath_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_telemetry_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_telemetry_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscriptionKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_telemetry_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_telemetry_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_telemetry_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_telemetry_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_telemetry_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_telemetry_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroupKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_telemetry_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroup_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_telemetry_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroup_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_telemetry_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_telemetry_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfileKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_telemetry_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_telemetry_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_openconfig_telemetry_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   45,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_openconfig_telemetry_proto_goTypes,
		DependencyIndexes: file_openconfig_telemetry_proto_depIdxs,
		MessageInfos:      file_openconfig_telemetry_proto_msgTypes,
	}.Build()
	File_openconfig_telemetry_proto = out.File
	file_openconfig_telemetry_proto_rawDesc = nil
	file_openconfig_telemetry_proto_goTypes = nil
	file_openconfig_telemetry_proto_depIdxs = nil
}
