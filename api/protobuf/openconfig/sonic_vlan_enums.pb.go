// openconfig.sonic_vlan_enums is generated by proto_generator as a protobuf
// representation of a YANG schema.
//
// Input schema modules:
//  - ../api/yang/sonic/sonic-vlan.yang
// Include paths:
//   - ../api/yang/sonic:../api/yang/public/third_party/...

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0
// 	protoc        v3.12.3
// source: sonic_vlan_enums.proto

package openconfig

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/openconfig/ygot/proto/yext"
	_ "github.com/openconfig/ygot/proto/ywrapper"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// SonicPortAdminStatus represents an enumerated type generated for the YANG enumerated type admin-status.
type SonicPortAdminStatus int32

const (
	SonicPortAdminStatus_SONICPORTADMINSTATUS_UNSET SonicPortAdminStatus = 0
	SonicPortAdminStatus_SONICPORTADMINSTATUS_up    SonicPortAdminStatus = 1
	SonicPortAdminStatus_SONICPORTADMINSTATUS_down  SonicPortAdminStatus = 2
)

// Enum value maps for SonicPortAdminStatus.
var (
	SonicPortAdminStatus_name = map[int32]string{
		0: "SONICPORTADMINSTATUS_UNSET",
		1: "SONICPORTADMINSTATUS_up",
		2: "SONICPORTADMINSTATUS_down",
	}
	SonicPortAdminStatus_value = map[string]int32{
		"SONICPORTADMINSTATUS_UNSET": 0,
		"SONICPORTADMINSTATUS_up":    1,
		"SONICPORTADMINSTATUS_down":  2,
	}
)

func (x SonicPortAdminStatus) Enum() *SonicPortAdminStatus {
	p := new(SonicPortAdminStatus)
	*p = x
	return p
}

func (x SonicPortAdminStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SonicPortAdminStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_sonic_vlan_enums_proto_enumTypes[0].Descriptor()
}

func (SonicPortAdminStatus) Type() protoreflect.EnumType {
	return &file_sonic_vlan_enums_proto_enumTypes[0]
}

func (x SonicPortAdminStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SonicPortAdminStatus.Descriptor instead.
func (SonicPortAdminStatus) EnumDescriptor() ([]byte, []int) {
	return file_sonic_vlan_enums_proto_rawDescGZIP(), []int{0}
}

// SonicVlanAdminStatus represents an enumerated type generated for the YANG enumerated type admin-status.
type SonicVlanAdminStatus int32

const (
	SonicVlanAdminStatus_SONICVLANADMINSTATUS_UNSET SonicVlanAdminStatus = 0
	SonicVlanAdminStatus_SONICVLANADMINSTATUS_up    SonicVlanAdminStatus = 1
	SonicVlanAdminStatus_SONICVLANADMINSTATUS_down  SonicVlanAdminStatus = 2
)

// Enum value maps for SonicVlanAdminStatus.
var (
	SonicVlanAdminStatus_name = map[int32]string{
		0: "SONICVLANADMINSTATUS_UNSET",
		1: "SONICVLANADMINSTATUS_up",
		2: "SONICVLANADMINSTATUS_down",
	}
	SonicVlanAdminStatus_value = map[string]int32{
		"SONICVLANADMINSTATUS_UNSET": 0,
		"SONICVLANADMINSTATUS_up":    1,
		"SONICVLANADMINSTATUS_down":  2,
	}
)

func (x SonicVlanAdminStatus) Enum() *SonicVlanAdminStatus {
	p := new(SonicVlanAdminStatus)
	*p = x
	return p
}

func (x SonicVlanAdminStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SonicVlanAdminStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_sonic_vlan_enums_proto_enumTypes[1].Descriptor()
}

func (SonicVlanAdminStatus) Type() protoreflect.EnumType {
	return &file_sonic_vlan_enums_proto_enumTypes[1]
}

func (x SonicVlanAdminStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SonicVlanAdminStatus.Descriptor instead.
func (SonicVlanAdminStatus) EnumDescriptor() ([]byte, []int) {
	return file_sonic_vlan_enums_proto_rawDescGZIP(), []int{1}
}

// SonicVlanIpFamily represents an enumerated type generated for the YANG enumerated type ip-family.
type SonicVlanIpFamily int32

const (
	SonicVlanIpFamily_SONICVLANIPFAMILY_UNSET SonicVlanIpFamily = 0
	SonicVlanIpFamily_SONICVLANIPFAMILY_IPv4  SonicVlanIpFamily = 1
	SonicVlanIpFamily_SONICVLANIPFAMILY_IPv6  SonicVlanIpFamily = 2
)

// Enum value maps for SonicVlanIpFamily.
var (
	SonicVlanIpFamily_name = map[int32]string{
		0: "SONICVLANIPFAMILY_UNSET",
		1: "SONICVLANIPFAMILY_IPv4",
		2: "SONICVLANIPFAMILY_IPv6",
	}
	SonicVlanIpFamily_value = map[string]int32{
		"SONICVLANIPFAMILY_UNSET": 0,
		"SONICVLANIPFAMILY_IPv4":  1,
		"SONICVLANIPFAMILY_IPv6":  2,
	}
)

func (x SonicVlanIpFamily) Enum() *SonicVlanIpFamily {
	p := new(SonicVlanIpFamily)
	*p = x
	return p
}

func (x SonicVlanIpFamily) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SonicVlanIpFamily) Descriptor() protoreflect.EnumDescriptor {
	return file_sonic_vlan_enums_proto_enumTypes[2].Descriptor()
}

func (SonicVlanIpFamily) Type() protoreflect.EnumType {
	return &file_sonic_vlan_enums_proto_enumTypes[2]
}

func (x SonicVlanIpFamily) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SonicVlanIpFamily.Descriptor instead.
func (SonicVlanIpFamily) EnumDescriptor() ([]byte, []int) {
	return file_sonic_vlan_enums_proto_rawDescGZIP(), []int{2}
}

// SonicVlanVlanTaggingMode represents an enumerated type generated for the YANG enumerated type vlan-tagging-mode.
type SonicVlanVlanTaggingMode int32

const (
	SonicVlanVlanTaggingMode_SONICVLANVLANTAGGINGMODE_UNSET           SonicVlanVlanTaggingMode = 0
	SonicVlanVlanTaggingMode_SONICVLANVLANTAGGINGMODE_tagged          SonicVlanVlanTaggingMode = 1
	SonicVlanVlanTaggingMode_SONICVLANVLANTAGGINGMODE_untagged        SonicVlanVlanTaggingMode = 2
	SonicVlanVlanTaggingMode_SONICVLANVLANTAGGINGMODE_priority_tagged SonicVlanVlanTaggingMode = 3
)

// Enum value maps for SonicVlanVlanTaggingMode.
var (
	SonicVlanVlanTaggingMode_name = map[int32]string{
		0: "SONICVLANVLANTAGGINGMODE_UNSET",
		1: "SONICVLANVLANTAGGINGMODE_tagged",
		2: "SONICVLANVLANTAGGINGMODE_untagged",
		3: "SONICVLANVLANTAGGINGMODE_priority_tagged",
	}
	SonicVlanVlanTaggingMode_value = map[string]int32{
		"SONICVLANVLANTAGGINGMODE_UNSET":           0,
		"SONICVLANVLANTAGGINGMODE_tagged":          1,
		"SONICVLANVLANTAGGINGMODE_untagged":        2,
		"SONICVLANVLANTAGGINGMODE_priority_tagged": 3,
	}
)

func (x SonicVlanVlanTaggingMode) Enum() *SonicVlanVlanTaggingMode {
	p := new(SonicVlanVlanTaggingMode)
	*p = x
	return p
}

func (x SonicVlanVlanTaggingMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SonicVlanVlanTaggingMode) Descriptor() protoreflect.EnumDescriptor {
	return file_sonic_vlan_enums_proto_enumTypes[3].Descriptor()
}

func (SonicVlanVlanTaggingMode) Type() protoreflect.EnumType {
	return &file_sonic_vlan_enums_proto_enumTypes[3]
}

func (x SonicVlanVlanTaggingMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SonicVlanVlanTaggingMode.Descriptor instead.
func (SonicVlanVlanTaggingMode) EnumDescriptor() ([]byte, []int) {
	return file_sonic_vlan_enums_proto_rawDescGZIP(), []int{3}
}

var File_sonic_vlan_enums_proto protoreflect.FileDescriptor

var file_sonic_vlan_enums_proto_rawDesc = []byte{
	0x0a, 0x16, 0x73, 0x6f, 0x6e, 0x69, 0x63, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x1a, 0x0e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x79, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2a, 0x82, 0x01, 0x0a, 0x14, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x4f, 0x4e,
	0x49, 0x43, 0x50, 0x4f, 0x52, 0x54, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x17, 0x53, 0x4f, 0x4e,
	0x49, 0x43, 0x50, 0x4f, 0x52, 0x54, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x75, 0x70, 0x10, 0x01, 0x1a, 0x05, 0x82, 0x41, 0x02, 0x75, 0x70, 0x12, 0x26, 0x0a,
	0x19, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x50, 0x4f, 0x52, 0x54, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x10, 0x02, 0x1a, 0x07, 0x82, 0x41,
	0x04, 0x64, 0x6f, 0x77, 0x6e, 0x2a, 0x82, 0x01, 0x0a, 0x14, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x56,
	0x6c, 0x61, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e,
	0x0a, 0x1a, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x56, 0x4c, 0x41, 0x4e, 0x41, 0x44, 0x4d, 0x49, 0x4e,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x22,
	0x0a, 0x17, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x56, 0x4c, 0x41, 0x4e, 0x41, 0x44, 0x4d, 0x49, 0x4e,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x75, 0x70, 0x10, 0x01, 0x1a, 0x05, 0x82, 0x41, 0x02,
	0x75, 0x70, 0x12, 0x26, 0x0a, 0x19, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x56, 0x4c, 0x41, 0x4e, 0x41,
	0x44, 0x4d, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x10,
	0x02, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x64, 0x6f, 0x77, 0x6e, 0x2a, 0x7a, 0x0a, 0x11, 0x53, 0x6f,
	0x6e, 0x69, 0x63, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x70, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12,
	0x1b, 0x0a, 0x17, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x56, 0x4c, 0x41, 0x4e, 0x49, 0x50, 0x46, 0x41,
	0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x16,
	0x53, 0x4f, 0x4e, 0x49, 0x43, 0x56, 0x4c, 0x41, 0x4e, 0x49, 0x50, 0x46, 0x41, 0x4d, 0x49, 0x4c,
	0x59, 0x5f, 0x49, 0x50, 0x76, 0x34, 0x10, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x49, 0x50, 0x76,
	0x34, 0x12, 0x23, 0x0a, 0x16, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x56, 0x4c, 0x41, 0x4e, 0x49, 0x50,
	0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x49, 0x50, 0x76, 0x36, 0x10, 0x02, 0x1a, 0x07, 0x82,
	0x41, 0x04, 0x49, 0x50, 0x76, 0x36, 0x2a, 0xe4, 0x01, 0x0a, 0x18, 0x53, 0x6f, 0x6e, 0x69, 0x63,
	0x56, 0x6c, 0x61, 0x6e, 0x56, 0x6c, 0x61, 0x6e, 0x54, 0x61, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x56, 0x4c, 0x41, 0x4e,
	0x56, 0x4c, 0x41, 0x4e, 0x54, 0x41, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x4d, 0x4f, 0x44, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x2e, 0x0a, 0x1f, 0x53, 0x4f, 0x4e, 0x49, 0x43,
	0x56, 0x4c, 0x41, 0x4e, 0x56, 0x4c, 0x41, 0x4e, 0x54, 0x41, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x10, 0x01, 0x1a, 0x09, 0x82, 0x41,
	0x06, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x21, 0x53, 0x4f, 0x4e, 0x49, 0x43,
	0x56, 0x4c, 0x41, 0x4e, 0x56, 0x4c, 0x41, 0x4e, 0x54, 0x41, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x75, 0x6e, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x10, 0x02, 0x1a, 0x0b,
	0x82, 0x41, 0x08, 0x75, 0x6e, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x28, 0x53,
	0x4f, 0x4e, 0x49, 0x43, 0x56, 0x4c, 0x41, 0x4e, 0x56, 0x4c, 0x41, 0x4e, 0x54, 0x41, 0x47, 0x47,
	0x49, 0x4e, 0x47, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x5f, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x10, 0x03, 0x1a, 0x12, 0x82, 0x41, 0x0f, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x42, 0x17, 0x0a,
	0x15, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x6f, 0x63, 0x73, 0x79, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sonic_vlan_enums_proto_rawDescOnce sync.Once
	file_sonic_vlan_enums_proto_rawDescData = file_sonic_vlan_enums_proto_rawDesc
)

func file_sonic_vlan_enums_proto_rawDescGZIP() []byte {
	file_sonic_vlan_enums_proto_rawDescOnce.Do(func() {
		file_sonic_vlan_enums_proto_rawDescData = protoimpl.X.CompressGZIP(file_sonic_vlan_enums_proto_rawDescData)
	})
	return file_sonic_vlan_enums_proto_rawDescData
}

var file_sonic_vlan_enums_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_sonic_vlan_enums_proto_goTypes = []interface{}{
	(SonicPortAdminStatus)(0),     // 0: openconfig.SonicPortAdminStatus
	(SonicVlanAdminStatus)(0),     // 1: openconfig.SonicVlanAdminStatus
	(SonicVlanIpFamily)(0),        // 2: openconfig.SonicVlanIpFamily
	(SonicVlanVlanTaggingMode)(0), // 3: openconfig.SonicVlanVlanTaggingMode
}
var file_sonic_vlan_enums_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_sonic_vlan_enums_proto_init() }
func file_sonic_vlan_enums_proto_init() {
	if File_sonic_vlan_enums_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sonic_vlan_enums_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sonic_vlan_enums_proto_goTypes,
		DependencyIndexes: file_sonic_vlan_enums_proto_depIdxs,
		EnumInfos:         file_sonic_vlan_enums_proto_enumTypes,
	}.Build()
	File_sonic_vlan_enums_proto = out.File
	file_sonic_vlan_enums_proto_rawDesc = nil
	file_sonic_vlan_enums_proto_goTypes = nil
	file_sonic_vlan_enums_proto_depIdxs = nil
}
