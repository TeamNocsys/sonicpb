// openconfig.openconfig_relay_agent is generated by proto_generator as a protobuf
// representation of a YANG schema.
//
// Input schema modules:
//  - ../api/yang/public/doc/openconfig-example.yang
//  - ../api/yang/public/third_party/ietf/iana-if-type.yang
//  - ../api/yang/public/third_party/ietf/ietf-interfaces.yang
//  - ../api/yang/public/third_party/ietf/ietf-yang-types.yang
//  - ../api/yang/public/third_party/ietf/ietf-inet-types.yang
//  - ../api/yang/public/release/models/bfd/openconfig-bfd.yang
//  - ../api/yang/public/release/models/vlan/openconfig-vlan.yang
//  - ../api/yang/public/release/models/vlan/openconfig-vlan-types.yang
//  - ../api/yang/public/release/models/wifi/openconfig-access-points.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-mac.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-types.yang
//  - ../api/yang/public/release/models/wifi/openconfig-wifi-phy.yang
//  - ../api/yang/public/release/models/wifi/openconfig-ap-interfaces.yang
//  - ../api/yang/public/release/models/wifi/openconfig-ap-manager.yang
//  - ../api/yang/public/release/models/macsec/openconfig-macsec.yang
//  - ../api/yang/public/release/models/macsec/openconfig-macsec-types.yang
//  - ../api/yang/public/release/models/stp/openconfig-spanning-tree-types.yang
//  - ../api/yang/public/release/models/stp/openconfig-spanning-tree.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-errors.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-peer-group.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-types.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-global.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-neighbor.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common-structure.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-policy.yang
//  - ../api/yang/public/release/models/bgp/openconfig-bgp-common-multiprotocol.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-types.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-port.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-fan.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-linecard.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-ext.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-cpu.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-psu.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform.yang
//  - ../api/yang/public/release/models/platform/openconfig-platform-transceiver.yang
//  - ../api/yang/public/release/models/multicast/openconfig-pim-types.yang
//  - ../api/yang/public/release/models/multicast/openconfig-igmp-types.yang
//  - ../api/yang/public/release/models/multicast/openconfig-igmp.yang
//  - ../api/yang/public/release/models/multicast/openconfig-pim.yang
//  - ../api/yang/public/release/models/catalog/openconfig-module-catalog.yang
//  - ../api/yang/public/release/models/catalog/openconfig-catalog-types.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-interfaces.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-8021x.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-types.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-aggregate.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-poe.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-tunnel.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ip.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ethernet.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ethernet-ext.yang
//  - ../api/yang/public/release/models/interfaces/openconfig-if-ip-ext.yang
//  - ../api/yang/public/release/models/acl/openconfig-packet-match-types.yang
//  - ../api/yang/public/release/models/acl/openconfig-packet-match.yang
//  - ../api/yang/public/release/models/acl/openconfig-acl.yang
//  - ../api/yang/public/release/models/system/openconfig-license.yang
//  - ../api/yang/public/release/models/system/openconfig-system.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-radius.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa.yang
//  - ../api/yang/public/release/models/system/openconfig-system-management.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-types.yang
//  - ../api/yang/public/release/models/system/openconfig-procmon.yang
//  - ../api/yang/public/release/models/system/openconfig-messages.yang
//  - ../api/yang/public/release/models/system/openconfig-system-terminal.yang
//  - ../api/yang/public/release/models/system/openconfig-system-logging.yang
//  - ../api/yang/public/release/models/system/openconfig-aaa-tacacs.yang
//  - ../api/yang/public/release/models/system/openconfig-alarms.yang
//  - ../api/yang/public/release/models/system/openconfig-alarm-types.yang
//  - ../api/yang/public/release/models/policy/openconfig-policy-types.yang
//  - ../api/yang/public/release/models/policy/openconfig-routing-policy.yang
//  - ../api/yang/public/release/models/lacp/openconfig-lacp.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-wavelength-router.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-optical-amplifier.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-protection.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-channel-monitor.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-connectivity.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-optical-attenuator.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-line-common.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-transport-types.yang
//  - ../api/yang/public/release/models/optical-transport/openconfig-terminal-device.yang
//  - ../api/yang/public/release/models/telemetry/openconfig-telemetry-types.yang
//  - ../api/yang/public/release/models/telemetry/openconfig-telemetry.yang
//  - ../api/yang/public/release/models/openflow/openconfig-openflow.yang
//  - ../api/yang/public/release/models/openflow/openconfig-openflow-types.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-tables.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-ext.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-table-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-shared-attributes.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp-types.yang
//  - ../api/yang/public/release/models/rib/openconfig-rib-bgp.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-types.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-elements.yang
//  - ../api/yang/public/release/models/qos/openconfig-qos-interfaces.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-srte.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-forwarding-policies.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-interfaces.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-pf-path-groups.yang
//  - ../api/yang/public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
//  - ../api/yang/public/release/models/relay-agent/openconfig-relay-agent.yang
//  - ../api/yang/public/release/models/lldp/openconfig-lldp.yang
//  - ../api/yang/public/release/models/lldp/openconfig-lldp-types.yang
//  - ../api/yang/public/release/models/openconfig-extensions.yang
//  - ../api/yang/public/release/models/types/openconfig-yang-types.yang
//  - ../api/yang/public/release/models/types/openconfig-inet-types.yang
//  - ../api/yang/public/release/models/types/openconfig-types.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-srte-policy.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-rsvp-sr-ext.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-segment-routing-types.yang
//  - ../api/yang/public/release/models/segment-routing/openconfig-segment-routing.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-types.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-igp.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-te.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-rsvp.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-static.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-sr.yang
//  - ../api/yang/public/release/models/mpls/openconfig-mpls-ldp.yang
//  - ../api/yang/public/release/models/probes/openconfig-probes-types.yang
//  - ../api/yang/public/release/models/probes/openconfig-probes.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-lsp.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-lsdb-types.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-policy.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-types.yang
//  - ../api/yang/public/release/models/isis/openconfig-isis-routing.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-area.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospf-policy.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-common.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-global.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-area-interface.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospfv2-lsdb.yang
//  - ../api/yang/public/release/models/ospf/openconfig-ospf-types.yang
//  - ../api/yang/public/release/models/local-routing/openconfig-local-routing.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-l3.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-l2.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-policy.yang
//  - ../api/yang/public/release/models/network-instance/openconfig-network-instance-types.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-mpls.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-common.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-types.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ipv6.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-pf.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-network-instance.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ipv4.yang
//  - ../api/yang/public/release/models/aft/openconfig-aft-ethernet.yang

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        (unknown)
// source: openconfig_relay_agent.proto

package openconfig

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/openconfig/ygot/proto/yext"
	ywrapper "github.com/openconfig/ygot/proto/ywrapper"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type RelayAgent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dhcp   *RelayAgent_Dhcp   `protobuf:"bytes,152016942,opt,name=dhcp,proto3" json:"dhcp,omitempty"`
	Dhcpv6 *RelayAgent_Dhcpv6 `protobuf:"bytes,474405922,opt,name=dhcpv6,proto3" json:"dhcpv6,omitempty"`
}

func (x *RelayAgent) Reset() {
	*x = RelayAgent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_relay_agent_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayAgent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayAgent) ProtoMessage() {}

func (x *RelayAgent) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_relay_agent_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayAgent.ProtoReflect.Descriptor instead.
func (*RelayAgent) Descriptor() ([]byte, []int) {
	return file_openconfig_relay_agent_proto_rawDescGZIP(), []int{0}
}

func (x *RelayAgent) GetDhcp() *RelayAgent_Dhcp {
	if x != nil {
		return x.Dhcp
	}
	return nil
}

func (x *RelayAgent) GetDhcpv6() *RelayAgent_Dhcpv6 {
	if x != nil {
		return x.Dhcpv6
	}
	return nil
}

type RelayAgent_Dhcp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentInformationOption *RelayAgent_Dhcp_AgentInformationOption `protobuf:"bytes,159241193,opt,name=agent_information_option,json=agentInformationOption,proto3" json:"agent_information_option,omitempty"`
	Config                 *RelayAgent_Dhcp_Config                 `protobuf:"bytes,321633887,opt,name=config,proto3" json:"config,omitempty"`
	Interfaces             *RelayAgent_Dhcp_Interfaces             `protobuf:"bytes,275045549,opt,name=interfaces,proto3" json:"interfaces,omitempty"`
	State                  *RelayAgent_Dhcp_State                  `protobuf:"bytes,359539216,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *RelayAgent_Dhcp) Reset() {
	*x = RelayAgent_Dhcp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_relay_agent_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayAgent_Dhcp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayAgent_Dhcp) ProtoMessage() {}

func (x *RelayAgent_Dhcp) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_relay_agent_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayAgent_Dhcp.ProtoReflect.Descriptor instead.
func (*RelayAgent_Dhcp) Descriptor() ([]byte, []int) {
	return file_openconfig_relay_agent_proto_rawDescGZIP(), []int{0, 0}
}

func (x *RelayAgent_Dhcp) GetAgentInformationOption() *RelayAgent_Dhcp_AgentInformationOption {
	if x != nil {
		return x.AgentInformationOption
	}
	return nil
}

func (x *RelayAgent_Dhcp) GetConfig() *RelayAgent_Dhcp_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *RelayAgent_Dhcp) GetInterfaces() *RelayAgent_Dhcp_Interfaces {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

func (x *RelayAgent_Dhcp) GetState() *RelayAgent_Dhcp_State {
	if x != nil {
		return x.State
	}
	return nil
}

type RelayAgent_Dhcpv6 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config     *RelayAgent_Dhcpv6_Config     `protobuf:"bytes,514040899,opt,name=config,proto3" json:"config,omitempty"`
	Interfaces *RelayAgent_Dhcpv6_Interfaces `protobuf:"bytes,414801209,opt,name=interfaces,proto3" json:"interfaces,omitempty"`
	Options    *RelayAgent_Dhcpv6_Options    `protobuf:"bytes,202599285,opt,name=options,proto3" json:"options,omitempty"`
	State      *RelayAgent_Dhcpv6_State      `protobuf:"bytes,12845476,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *RelayAgent_Dhcpv6) Reset() {
	*x = RelayAgent_Dhcpv6{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_relay_agent_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayAgent_Dhcpv6) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayAgent_Dhcpv6) ProtoMessage() {}

func (x *RelayAgent_Dhcpv6) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_relay_agent_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayAgent_Dhcpv6.ProtoReflect.Descriptor instead.
func (*RelayAgent_Dhcpv6) Descriptor() ([]byte, []int) {
	return file_openconfig_relay_agent_proto_rawDescGZIP(), []int{0, 1}
}

func (x *RelayAgent_Dhcpv6) GetConfig() *RelayAgent_Dhcpv6_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *RelayAgent_Dhcpv6) GetInterfaces() *RelayAgent_Dhcpv6_Interfaces {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

func (x *RelayAgent_Dhcpv6) GetOptions() *RelayAgent_Dhcpv6_Options {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *RelayAgent_Dhcpv6) GetState() *RelayAgent_Dhcpv6_State {
	if x != nil {
		return x.State
	}
	return nil
}

type RelayAgent_Dhcp_AgentInformationOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *RelayAgent_Dhcp_AgentInformationOption_Config `protobuf:"bytes,322810206,opt,name=config,proto3" json:"config,omitempty"`
	State  *RelayAgent_Dhcp_AgentInformationOption_State  `protobuf:"bytes,8654027,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *RelayAgent_Dhcp_AgentInformationOption) Reset() {
	*x = RelayAgent_Dhcp_AgentInformationOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_relay_agent_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayAgent_Dhcp_AgentInformationOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayAgent_Dhcp_AgentInformationOption) ProtoMessage() {}

func (x *RelayAgent_Dhcp_AgentInformationOption) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_relay_agent_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayAgent_Dhcp_AgentInformationOption.ProtoReflect.Descriptor instead.
func (*RelayAgent_Dhcp_AgentInformationOption) Descriptor() ([]byte, []int) {
	return file_openconfig_relay_agent_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *RelayAgent_Dhcp_AgentInformationOption) GetConfig() *RelayAgent_Dhcp_AgentInformationOption_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *RelayAgent_Dhcp_AgentInformationOption) GetState() *RelayAgent_Dhcp_AgentInformationOption_State {
	if x != nil {
		return x.State
	}
	return nil
}

type RelayAgent_Dhcp_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnableRelayAgent *ywrapper.BoolValue `protobuf:"bytes,101777103,opt,name=enable_relay_agent,json=enableRelayAgent,proto3" json:"enable_relay_agent,omitempty"`
}

func (x *RelayAgent_Dhcp_Config) Reset() {
	*x = RelayAgent_Dhcp_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_relay_agent_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayAgent_Dhcp_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayAgent_Dhcp_Config) ProtoMessage() {}

func (x *RelayAgent_Dhcp_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_relay_agent_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayAgent_Dhcp_Config.ProtoReflect.Descriptor instead.
func (*RelayAgent_Dhcp_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_relay_agent_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *RelayAgent_Dhcp_Config) GetEnableRelayAgent() *ywrapper.BoolValue {
	if x != nil {
		return x.EnableRelayAgent
	}
	return nil
}

type RelayAgent_Dhcp_Interfaces struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interface []*RelayAgent_Dhcp_Interfaces_InterfaceKey `protobuf:"bytes,416824729,rep,name=interface,proto3" json:"interface,omitempty"`
}

func (x *RelayAgent_Dhcp_Interfaces) Reset() {
	*x = RelayAgent_Dhcp_Interfaces{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_relay_agent_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayAgent_Dhcp_Interfaces) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayAgent_Dhcp_Interfaces) ProtoMessage() {}

func (x *RelayAgent_Dhcp_Interfaces) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_relay_agent_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayAgent_Dhcp_Interfaces.ProtoReflect.Descriptor instead.
func (*RelayAgent_Dhcp_Interfaces) Descriptor() ([]byte, []int) {
	return file_openconfig_relay_agent_proto_rawDescGZIP(), []int{0, 0, 2}
}

func (x *RelayAgent_Dhcp_Interfaces) GetInterface() []*RelayAgent_Dhcp_Interfaces_InterfaceKey {
	if x != nil {
		return x.Interface
	}
	return nil
}

type RelayAgent_Dhcp_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnableRelayAgent *ywrapper.BoolValue `protobuf:"bytes,390585934,opt,name=enable_relay_agent,json=enableRelayAgent,proto3" json:"enable_relay_agent,omitempty"`
}

func (x *RelayAgent_Dhcp_State) Reset() {
	*x = RelayAgent_Dhcp_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_relay_agent_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayAgent_Dhcp_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayAgent_Dhcp_State) ProtoMessage() {}

func (x *RelayAgent_Dhcp_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_relay_agent_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayAgent_Dhcp_State.ProtoReflect.Descriptor instead.
func (*RelayAgent_Dhcp_State) Descriptor() ([]byte, []int) {
	return file_openconfig_relay_agent_proto_rawDescGZIP(), []int{0, 0, 3}
}

func (x *RelayAgent_Dhcp_State) GetEnableRelayAgent() *ywrapper.BoolValue {
	if x != nil {
		return x.EnableRelayAgent
	}
	return nil
}

type RelayAgent_Dhcp_AgentInformationOption_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable *ywrapper.BoolValue `protobuf:"bytes,123547464,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *RelayAgent_Dhcp_AgentInformationOption_Config) Reset() {
	*x = RelayAgent_Dhcp_AgentInformationOption_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_relay_agent_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayAgent_Dhcp_AgentInformationOption_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayAgent_Dhcp_AgentInformationOption_Config) ProtoMessage() {}

func (x *RelayAgent_Dhcp_AgentInformationOption_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_relay_agent_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayAgent_Dhcp_AgentInformationOption_Config.ProtoReflect.Descriptor instead.
func (*RelayAgent_Dhcp_AgentInformationOption_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_relay_agent_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (x *RelayAgent_Dhcp_AgentInformationOption_Config) GetEnable() *ywrapper.BoolValue {
	if x != nil {
		return x.Enable
	}
	return nil
}

type RelayAgent_Dhcp_AgentInformationOption_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable *ywrapper.BoolValue `protobuf:"bytes,421828051,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *RelayAgent_Dhcp_AgentInformationOption_State) Reset() {
	*x = RelayAgent_Dhcp_AgentInformationOption_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_relay_agent_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayAgent_Dhcp_AgentInformationOption_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayAgent_Dhcp_AgentInformationOption_State) ProtoMessage() {}

func (x *RelayAgent_Dhcp_AgentInformationOption_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_relay_agent_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayAgent_Dhcp_AgentInformationOption_State.ProtoReflect.Descriptor instead.
func (*RelayAgent_Dhcp_AgentInformationOption_State) Descriptor() ([]byte, []int) {
	return file_openconfig_relay_agent_proto_rawDescGZIP(), []int{0, 0, 0, 1}
}

func (x *RelayAgent_Dhcp_AgentInformationOption_State) GetEnable() *ywrapper.BoolValue {
	if x != nil {
		return x.Enable
	}
	return nil
}

type RelayAgent_Dhcp_Interfaces_Interface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentInformationOption *RelayAgent_Dhcp_Interfaces_Interface_AgentInformationOption `protobuf:"bytes,356144528,opt,name=agent_information_option,json=agentInformationOption,proto3" json:"agent_information_option,omitempty"`
	Config                 *RelayAgent_Dhcp_Interfaces_Interface_Config                 `protobuf:"bytes,99609198,opt,name=config,proto3" json:"config,omitempty"`
	InterfaceRef           *RelayAgent_Dhcp_Interfaces_Interface_InterfaceRef           `protobuf:"bytes,59814829,opt,name=interface_ref,json=interfaceRef,proto3" json:"interface_ref,omitempty"`
	State                  *RelayAgent_Dhcp_Interfaces_Interface_State                  `protobuf:"bytes,438179227,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *RelayAgent_Dhcp_Interfaces_Interface) Reset() {
	*x = RelayAgent_Dhcp_Interfaces_Interface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_relay_agent_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayAgent_Dhcp_Interfaces_Interface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayAgent_Dhcp_Interfaces_Interface) ProtoMessage() {}

func (x *RelayAgent_Dhcp_Interfaces_Interface) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_relay_agent_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayAgent_Dhcp_Interfaces_Interface.ProtoReflect.Descriptor instead.
func (*RelayAgent_Dhcp_Interfaces_Interface) Descriptor() ([]byte, []int) {
	return file_openconfig_relay_agent_proto_rawDescGZIP(), []int{0, 0, 2, 0}
}

func (x *RelayAgent_Dhcp_Interfaces_Interface) GetAgentInformationOption() *RelayAgent_Dhcp_Interfaces_Interface_AgentInformationOption {
	if x != nil {
		return x.AgentInformationOption
	}
	return nil
}

func (x *RelayAgent_Dhcp_Interfaces_Interface) GetConfig() *RelayAgent_Dhcp_Interfaces_Interface_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *RelayAgent_Dhcp_Interfaces_Interface) GetInterfaceRef() *RelayAgent_Dhcp_Interfaces_Interface_InterfaceRef {
	if x != nil {
		return x.InterfaceRef
	}
	return nil
}

func (x *RelayAgent_Dhcp_Interfaces_Interface) GetState() *RelayAgent_Dhcp_Interfaces_Interface_State {
	if x != nil {
		return x.State
	}
	return nil
}

type RelayAgent_Dhcp_Interfaces_InterfaceKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string                                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Interface *RelayAgent_Dhcp_Interfaces_Interface `protobuf:"bytes,2,opt,name=interface,proto3" json:"interface,omitempty"`
}

func (x *RelayAgent_Dhcp_Interfaces_InterfaceKey) Reset() {
	*x = RelayAgent_Dhcp_Interfaces_InterfaceKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_relay_agent_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayAgent_Dhcp_Interfaces_InterfaceKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayAgent_Dhcp_Interfaces_InterfaceKey) ProtoMessage() {}

func (x *RelayAgent_Dhcp_Interfaces_InterfaceKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_relay_agent_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayAgent_Dhcp_Interfaces_InterfaceKey.ProtoReflect.Descriptor instead.
func (*RelayAgent_Dhcp_Interfaces_InterfaceKey) Descriptor() ([]byte, []int) {
	return file_openconfig_relay_agent_proto_rawDescGZIP(), []int{0, 0, 2, 1}
}

func (x *RelayAgent_Dhcp_Interfaces_InterfaceKey) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RelayAgent_Dhcp_Interfaces_InterfaceKey) GetInterface() *RelayAgent_Dhcp_Interfaces_Interface {
	if x != nil {
		return x.Interface
	}
	return nil
}

type RelayAgent_Dhcp_Interfaces_Interface_AgentInformationOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *RelayAgent_Dhcp_Interfaces_Interface_AgentInformationOption_Config `protobuf:"bytes,339094949,opt,name=config,proto3" json:"config,omitempty"`
	State  *RelayAgent_Dhcp_Interfaces_Interface_AgentInformationOption_State  `protobuf:"bytes,292344602,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *RelayAgent_Dhcp_Interfaces_Interface_AgentInformationOption) Reset() {
	*x = RelayAgent_Dhcp_Interfaces_Interface_AgentInformationOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_relay_agent_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayAgent_Dhcp_Interfaces_Interface_AgentInformationOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayAgent_Dhcp_Interfaces_Interface_AgentInformationOption) ProtoMessage() {}

func (x *RelayAgent_Dhcp_Interfaces_Interface_AgentInformationOption) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_relay_agent_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayAgent_Dhcp_Interfaces_Interface_AgentInformationOption.ProtoReflect.Descriptor instead.
func (*RelayAgent_Dhcp_Interfaces_Interface_AgentInformationOption) Descriptor() ([]byte, []int) {
	return file_openconfig_relay_agent_proto_rawDescGZIP(), []int{0, 0, 2, 0, 0}
}

func (x *RelayAgent_Dhcp_Interfaces_Interface_AgentInformationOption) GetConfig() *RelayAgent_Dhcp_Interfaces_Interface_AgentInformationOption_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *RelayAgent_Dhcp_Interfaces_Interface_AgentInformationOption) GetState() *RelayAgent_Dhcp_Interfaces_Interface_AgentInformationOption_State {
	if x != nil {
		return x.State
	}
	return nil
}

type RelayAgent_Dhcp_Interfaces_Interface_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable        *ywrapper.BoolValue     `protobuf:"bytes,197049464,opt,name=enable,proto3" json:"enable,omitempty"`
	HelperAddress []*ywrapper.StringValue `protobuf:"bytes,534377166,rep,name=helper_address,json=helperAddress,proto3" json:"helper_address,omitempty"`
	Id            *ywrapper.StringValue   `protobuf:"bytes,430745318,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RelayAgent_Dhcp_Interfaces_Interface_Config) Reset() {
	*x = RelayAgent_Dhcp_Interfaces_Interface_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_relay_agent_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayAgent_Dhcp_Interfaces_Interface_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayAgent_Dhcp_Interfaces_Interface_Config) ProtoMessage() {}

func (x *RelayAgent_Dhcp_Interfaces_Interface_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_relay_agent_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayAgent_Dhcp_Interfaces_Interface_Config.ProtoReflect.Descriptor instead.
func (*RelayAgent_Dhcp_Interfaces_Interface_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_relay_agent_proto_rawDescGZIP(), []int{0, 0, 2, 0, 1}
}

func (x *RelayAgent_Dhcp_Interfaces_Interface_Config) GetEnable() *ywrapper.BoolValue {
	if x != nil {
		return x.Enable
	}
	return nil
}

func (x *RelayAgent_Dhcp_Interfaces_Interface_Config) GetHelperAddress() []*ywrapper.StringValue {
	if x != nil {
		return x.HelperAddress
	}
	return nil
}

func (x *RelayAgent_Dhcp_Interfaces_Interface_Config) GetId() *ywrapper.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

type RelayAgent_Dhcp_Interfaces_Interface_InterfaceRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *RelayAgent_Dhcp_Interfaces_Interface_InterfaceRef_Config `protobuf:"bytes,535762114,opt,name=config,proto3" json:"config,omitempty"`
	State  *RelayAgent_Dhcp_Interfaces_Interface_InterfaceRef_State  `protobuf:"bytes,379778175,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *RelayAgent_Dhcp_Interfaces_Interface_InterfaceRef) Reset() {
	*x = RelayAgent_Dhcp_Interfaces_Interface_InterfaceRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_relay_agent_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayAgent_Dhcp_Interfaces_Interface_InterfaceRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayAgent_Dhcp_Interfaces_Interface_InterfaceRef) ProtoMessage() {}

func (x *RelayAgent_Dhcp_Interfaces_Interface_InterfaceRef) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_relay_agent_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayAgent_Dhcp_Interfaces_Interface_InterfaceRef.ProtoReflect.Descriptor instead.
func (*RelayAgent_Dhcp_Interfaces_Interface_InterfaceRef) Descriptor() ([]byte, []int) {
	return file_openconfig_relay_agent_proto_rawDescGZIP(), []int{0, 0, 2, 0, 2}
}

func (x *RelayAgent_Dhcp_Interfaces_Interface_InterfaceRef) GetConfig() *RelayAgent_Dhcp_Interfaces_Interface_InterfaceRef_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *RelayAgent_Dhcp_Interfaces_Interface_InterfaceRef) GetState() *RelayAgent_Dhcp_Interfaces_Interface_InterfaceRef_State {
	if x != nil {
		return x.State
	}
	return nil
}

type RelayAgent_Dhcp_Interfaces_Interface_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Counters      *RelayAgent_Dhcp_Interfaces_Interface_State_Counters `protobuf:"bytes,348714921,opt,name=counters,proto3" json:"counters,omitempty"`
	Enable        *ywrapper.BoolValue                                  `protobuf:"bytes,405672195,opt,name=enable,proto3" json:"enable,omitempty"`
	HelperAddress []*ywrapper.StringValue                              `protobuf:"bytes,14643373,rep,name=helper_address,json=helperAddress,proto3" json:"helper_address,omitempty"`
	Id            *ywrapper.StringValue                                `protobuf:"bytes,178034653,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RelayAgent_Dhcp_Interfaces_Interface_State) Reset() {
	*x = RelayAgent_Dhcp_Interfaces_Interface_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_relay_agent_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayAgent_Dhcp_Interfaces_Interface_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayAgent_Dhcp_Interfaces_Interface_State) ProtoMessage() {}

func (x *RelayAgent_Dhcp_Interfaces_Interface_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_relay_agent_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayAgent_Dhcp_Interfaces_Interface_State.ProtoReflect.Descriptor instead.
func (*RelayAgent_Dhcp_Interfaces_Interface_State) Descriptor() ([]byte, []int) {
	return file_openconfig_relay_agent_proto_rawDescGZIP(), []int{0, 0, 2, 0, 3}
}

func (x *RelayAgent_Dhcp_Interfaces_Interface_State) GetCounters() *RelayAgent_Dhcp_Interfaces_Interface_State_Counters {
	if x != nil {
		return x.Counters
	}
	return nil
}

func (x *RelayAgent_Dhcp_Interfaces_Interface_State) GetEnable() *ywrapper.BoolValue {
	if x != nil {
		return x.Enable
	}
	return nil
}

func (x *RelayAgent_Dhcp_Interfaces_Interface_State) GetHelperAddress() []*ywrapper.StringValue {
	if x != nil {
		return x.HelperAddress
	}
	return nil
}

func (x *RelayAgent_Dhcp_Interfaces_Interface_State) GetId() *ywrapper.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

type RelayAgent_Dhcp_Interfaces_Interface_AgentInformationOption_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CircuitId *ywrapper.StringValue `protobuf:"bytes,392042781,opt,name=circuit_id,json=circuitId,proto3" json:"circuit_id,omitempty"`
	Enable    *ywrapper.BoolValue   `protobuf:"bytes,33692149,opt,name=enable,proto3" json:"enable,omitempty"`
	RemoteId  *ywrapper.StringValue `protobuf:"bytes,455724620,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
}

func (x *RelayAgent_Dhcp_Interfaces_Interface_AgentInformationOption_Config) Reset() {
	*x = RelayAgent_Dhcp_Interfaces_Interface_AgentInformationOption_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_relay_agent_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayAgent_Dhcp_Interfaces_Interface_AgentInformationOption_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayAgent_Dhcp_Interfaces_Interface_AgentInformationOption_Config) ProtoMessage() {}

func (x *RelayAgent_Dhcp_Interfaces_Interface_AgentInformationOption_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_relay_agent_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayAgent_Dhcp_Interfaces_Interface_AgentInformationOption_Config.ProtoReflect.Descriptor instead.
func (*RelayAgent_Dhcp_Interfaces_Interface_AgentInformationOption_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_relay_agent_proto_rawDescGZIP(), []int{0, 0, 2, 0, 0, 0}
}

func (x *RelayAgent_Dhcp_Interfaces_Interface_AgentInformationOption_Config) GetCircuitId() *ywrapper.StringValue {
	if x != nil {
		return x.CircuitId
	}
	return nil
}

func (x *RelayAgent_Dhcp_Interfaces_Interface_AgentInformationOption_Config) GetEnable() *ywrapper.BoolValue {
	if x != nil {
		return x.Enable
	}
	return nil
}

func (x *RelayAgent_Dhcp_Interfaces_Interface_AgentInformationOption_Config) GetRemoteId() *ywrapper.StringValue {
	if x != nil {
		return x.RemoteId
	}
	return nil
}

type RelayAgent_Dhcp_Interfaces_Interface_AgentInformationOption_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CircuitId     *ywrapper.StringValue `protobuf:"bytes,303617376,opt,name=circuit_id,json=circuitId,proto3" json:"circuit_id,omitempty"`
	Enable        *ywrapper.BoolValue   `protobuf:"bytes,334234612,opt,name=enable,proto3" json:"enable,omitempty"`
	RemoteId      *ywrapper.StringValue `protobuf:"bytes,122803051,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	SentCircuitId *ywrapper.StringValue `protobuf:"bytes,167388837,opt,name=sent_circuit_id,json=sentCircuitId,proto3" json:"sent_circuit_id,omitempty"`
	SentRemoteId  *ywrapper.StringValue `protobuf:"bytes,437023492,opt,name=sent_remote_id,json=sentRemoteId,proto3" json:"sent_remote_id,omitempty"`
}

func (x *RelayAgent_Dhcp_Interfaces_Interface_AgentInformationOption_State) Reset() {
	*x = RelayAgent_Dhcp_Interfaces_Interface_AgentInformationOption_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_relay_agent_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayAgent_Dhcp_Interfaces_Interface_AgentInformationOption_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayAgent_Dhcp_Interfaces_Interface_AgentInformationOption_State) ProtoMessage() {}

func (x *RelayAgent_Dhcp_Interfaces_Interface_AgentInformationOption_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_relay_agent_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayAgent_Dhcp_Interfaces_Interface_AgentInformationOption_State.ProtoReflect.Descriptor instead.
func (*RelayAgent_Dhcp_Interfaces_Interface_AgentInformationOption_State) Descriptor() ([]byte, []int) {
	return file_openconfig_relay_agent_proto_rawDescGZIP(), []int{0, 0, 2, 0, 0, 1}
}

func (x *RelayAgent_Dhcp_Interfaces_Interface_AgentInformationOption_State) GetCircuitId() *ywrapper.StringValue {
	if x != nil {
		return x.CircuitId
	}
	return nil
}

func (x *RelayAgent_Dhcp_Interfaces_Interface_AgentInformationOption_State) GetEnable() *ywrapper.BoolValue {
	if x != nil {
		return x.Enable
	}
	return nil
}

func (x *RelayAgent_Dhcp_Interfaces_Interface_AgentInformationOption_State) GetRemoteId() *ywrapper.StringValue {
	if x != nil {
		return x.RemoteId
	}
	return nil
}

func (x *RelayAgent_Dhcp_Interfaces_Interface_AgentInformationOption_State) GetSentCircuitId() *ywrapper.StringValue {
	if x != nil {
		return x.SentCircuitId
	}
	return nil
}

func (x *RelayAgent_Dhcp_Interfaces_Interface_AgentInformationOption_State) GetSentRemoteId() *ywrapper.StringValue {
	if x != nil {
		return x.SentRemoteId
	}
	return nil
}

type RelayAgent_Dhcp_Interfaces_Interface_InterfaceRef_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interface    *ywrapper.StringValue `protobuf:"bytes,504647406,opt,name=interface,proto3" json:"interface,omitempty"`
	Subinterface *ywrapper.UintValue   `protobuf:"bytes,308455690,opt,name=subinterface,proto3" json:"subinterface,omitempty"`
}

func (x *RelayAgent_Dhcp_Interfaces_Interface_InterfaceRef_Config) Reset() {
	*x = RelayAgent_Dhcp_Interfaces_Interface_InterfaceRef_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_relay_agent_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayAgent_Dhcp_Interfaces_Interface_InterfaceRef_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayAgent_Dhcp_Interfaces_Interface_InterfaceRef_Config) ProtoMessage() {}

func (x *RelayAgent_Dhcp_Interfaces_Interface_InterfaceRef_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_relay_agent_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayAgent_Dhcp_Interfaces_Interface_InterfaceRef_Config.ProtoReflect.Descriptor instead.
func (*RelayAgent_Dhcp_Interfaces_Interface_InterfaceRef_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_relay_agent_proto_rawDescGZIP(), []int{0, 0, 2, 0, 2, 0}
}

func (x *RelayAgent_Dhcp_Interfaces_Interface_InterfaceRef_Config) GetInterface() *ywrapper.StringValue {
	if x != nil {
		return x.Interface
	}
	return nil
}

func (x *RelayAgent_Dhcp_Interfaces_Interface_InterfaceRef_Config) GetSubinterface() *ywrapper.UintValue {
	if x != nil {
		return x.Subinterface
	}
	return nil
}

type RelayAgent_Dhcp_Interfaces_Interface_InterfaceRef_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interface    *ywrapper.StringValue `protobuf:"bytes,460462879,opt,name=interface,proto3" json:"interface,omitempty"`
	Subinterface *ywrapper.UintValue   `protobuf:"bytes,56499757,opt,name=subinterface,proto3" json:"subinterface,omitempty"`
}

func (x *RelayAgent_Dhcp_Interfaces_Interface_InterfaceRef_State) Reset() {
	*x = RelayAgent_Dhcp_Interfaces_Interface_InterfaceRef_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_relay_agent_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayAgent_Dhcp_Interfaces_Interface_InterfaceRef_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayAgent_Dhcp_Interfaces_Interface_InterfaceRef_State) ProtoMessage() {}

func (x *RelayAgent_Dhcp_Interfaces_Interface_InterfaceRef_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_relay_agent_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayAgent_Dhcp_Interfaces_Interface_InterfaceRef_State.ProtoReflect.Descriptor instead.
func (*RelayAgent_Dhcp_Interfaces_Interface_InterfaceRef_State) Descriptor() ([]byte, []int) {
	return file_openconfig_relay_agent_proto_rawDescGZIP(), []int{0, 0, 2, 0, 2, 1}
}

func (x *RelayAgent_Dhcp_Interfaces_Interface_InterfaceRef_State) GetInterface() *ywrapper.StringValue {
	if x != nil {
		return x.Interface
	}
	return nil
}

func (x *RelayAgent_Dhcp_Interfaces_Interface_InterfaceRef_State) GetSubinterface() *ywrapper.UintValue {
	if x != nil {
		return x.Subinterface
	}
	return nil
}

type RelayAgent_Dhcp_Interfaces_Interface_State_Counters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BootreplySent        *ywrapper.UintValue `protobuf:"bytes,22790115,opt,name=bootreply_sent,json=bootreplySent,proto3" json:"bootreply_sent,omitempty"`
	BootrequestReceived  *ywrapper.UintValue `protobuf:"bytes,420437889,opt,name=bootrequest_received,json=bootrequestReceived,proto3" json:"bootrequest_received,omitempty"`
	BootrequestSent      *ywrapper.UintValue `protobuf:"bytes,197387026,opt,name=bootrequest_sent,json=bootrequestSent,proto3" json:"bootrequest_sent,omitempty"`
	DhcpAckSent          *ywrapper.UintValue `protobuf:"bytes,496209620,opt,name=dhcp_ack_sent,json=dhcpAckSent,proto3" json:"dhcp_ack_sent,omitempty"`
	DhcpDeclineReceived  *ywrapper.UintValue `protobuf:"bytes,381180888,opt,name=dhcp_decline_received,json=dhcpDeclineReceived,proto3" json:"dhcp_decline_received,omitempty"`
	DhcpDiscoverReceived *ywrapper.UintValue `protobuf:"bytes,107576897,opt,name=dhcp_discover_received,json=dhcpDiscoverReceived,proto3" json:"dhcp_discover_received,omitempty"`
	DhcpInformReceived   *ywrapper.UintValue `protobuf:"bytes,201255639,opt,name=dhcp_inform_received,json=dhcpInformReceived,proto3" json:"dhcp_inform_received,omitempty"`
	DhcpNackSent         *ywrapper.UintValue `protobuf:"bytes,97043850,opt,name=dhcp_nack_sent,json=dhcpNackSent,proto3" json:"dhcp_nack_sent,omitempty"`
	DhcpOfferSent        *ywrapper.UintValue `protobuf:"bytes,178136447,opt,name=dhcp_offer_sent,json=dhcpOfferSent,proto3" json:"dhcp_offer_sent,omitempty"`
	DhcpReleaseReceived  *ywrapper.UintValue `protobuf:"bytes,517219259,opt,name=dhcp_release_received,json=dhcpReleaseReceived,proto3" json:"dhcp_release_received,omitempty"`
	DhcpRequestReceived  *ywrapper.UintValue `protobuf:"bytes,68578967,opt,name=dhcp_request_received,json=dhcpRequestReceived,proto3" json:"dhcp_request_received,omitempty"`
	InvalidOpcode        *ywrapper.UintValue `protobuf:"bytes,472517960,opt,name=invalid_opcode,json=invalidOpcode,proto3" json:"invalid_opcode,omitempty"`
	InvalidOptions       *ywrapper.UintValue `protobuf:"bytes,181619560,opt,name=invalid_options,json=invalidOptions,proto3" json:"invalid_options,omitempty"`
	TotalDropped         *ywrapper.UintValue `protobuf:"bytes,402529931,opt,name=total_dropped,json=totalDropped,proto3" json:"total_dropped,omitempty"`
}

func (x *RelayAgent_Dhcp_Interfaces_Interface_State_Counters) Reset() {
	*x = RelayAgent_Dhcp_Interfaces_Interface_State_Counters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_relay_agent_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayAgent_Dhcp_Interfaces_Interface_State_Counters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayAgent_Dhcp_Interfaces_Interface_State_Counters) ProtoMessage() {}

func (x *RelayAgent_Dhcp_Interfaces_Interface_State_Counters) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_relay_agent_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayAgent_Dhcp_Interfaces_Interface_State_Counters.ProtoReflect.Descriptor instead.
func (*RelayAgent_Dhcp_Interfaces_Interface_State_Counters) Descriptor() ([]byte, []int) {
	return file_openconfig_relay_agent_proto_rawDescGZIP(), []int{0, 0, 2, 0, 3, 0}
}

func (x *RelayAgent_Dhcp_Interfaces_Interface_State_Counters) GetBootreplySent() *ywrapper.UintValue {
	if x != nil {
		return x.BootreplySent
	}
	return nil
}

func (x *RelayAgent_Dhcp_Interfaces_Interface_State_Counters) GetBootrequestReceived() *ywrapper.UintValue {
	if x != nil {
		return x.BootrequestReceived
	}
	return nil
}

func (x *RelayAgent_Dhcp_Interfaces_Interface_State_Counters) GetBootrequestSent() *ywrapper.UintValue {
	if x != nil {
		return x.BootrequestSent
	}
	return nil
}

func (x *RelayAgent_Dhcp_Interfaces_Interface_State_Counters) GetDhcpAckSent() *ywrapper.UintValue {
	if x != nil {
		return x.DhcpAckSent
	}
	return nil
}

func (x *RelayAgent_Dhcp_Interfaces_Interface_State_Counters) GetDhcpDeclineReceived() *ywrapper.UintValue {
	if x != nil {
		return x.DhcpDeclineReceived
	}
	return nil
}

func (x *RelayAgent_Dhcp_Interfaces_Interface_State_Counters) GetDhcpDiscoverReceived() *ywrapper.UintValue {
	if x != nil {
		return x.DhcpDiscoverReceived
	}
	return nil
}

func (x *RelayAgent_Dhcp_Interfaces_Interface_State_Counters) GetDhcpInformReceived() *ywrapper.UintValue {
	if x != nil {
		return x.DhcpInformReceived
	}
	return nil
}

func (x *RelayAgent_Dhcp_Interfaces_Interface_State_Counters) GetDhcpNackSent() *ywrapper.UintValue {
	if x != nil {
		return x.DhcpNackSent
	}
	return nil
}

func (x *RelayAgent_Dhcp_Interfaces_Interface_State_Counters) GetDhcpOfferSent() *ywrapper.UintValue {
	if x != nil {
		return x.DhcpOfferSent
	}
	return nil
}

func (x *RelayAgent_Dhcp_Interfaces_Interface_State_Counters) GetDhcpReleaseReceived() *ywrapper.UintValue {
	if x != nil {
		return x.DhcpReleaseReceived
	}
	return nil
}

func (x *RelayAgent_Dhcp_Interfaces_Interface_State_Counters) GetDhcpRequestReceived() *ywrapper.UintValue {
	if x != nil {
		return x.DhcpRequestReceived
	}
	return nil
}

func (x *RelayAgent_Dhcp_Interfaces_Interface_State_Counters) GetInvalidOpcode() *ywrapper.UintValue {
	if x != nil {
		return x.InvalidOpcode
	}
	return nil
}

func (x *RelayAgent_Dhcp_Interfaces_Interface_State_Counters) GetInvalidOptions() *ywrapper.UintValue {
	if x != nil {
		return x.InvalidOptions
	}
	return nil
}

func (x *RelayAgent_Dhcp_Interfaces_Interface_State_Counters) GetTotalDropped() *ywrapper.UintValue {
	if x != nil {
		return x.TotalDropped
	}
	return nil
}

type RelayAgent_Dhcpv6_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnableRelayAgent *ywrapper.BoolValue `protobuf:"bytes,103645587,opt,name=enable_relay_agent,json=enableRelayAgent,proto3" json:"enable_relay_agent,omitempty"`
}

func (x *RelayAgent_Dhcpv6_Config) Reset() {
	*x = RelayAgent_Dhcpv6_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_relay_agent_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayAgent_Dhcpv6_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayAgent_Dhcpv6_Config) ProtoMessage() {}

func (x *RelayAgent_Dhcpv6_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_relay_agent_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayAgent_Dhcpv6_Config.ProtoReflect.Descriptor instead.
func (*RelayAgent_Dhcpv6_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_relay_agent_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *RelayAgent_Dhcpv6_Config) GetEnableRelayAgent() *ywrapper.BoolValue {
	if x != nil {
		return x.EnableRelayAgent
	}
	return nil
}

type RelayAgent_Dhcpv6_Interfaces struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interface []*RelayAgent_Dhcpv6_Interfaces_InterfaceKey `protobuf:"bytes,256327909,rep,name=interface,proto3" json:"interface,omitempty"`
}

func (x *RelayAgent_Dhcpv6_Interfaces) Reset() {
	*x = RelayAgent_Dhcpv6_Interfaces{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_relay_agent_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayAgent_Dhcpv6_Interfaces) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayAgent_Dhcpv6_Interfaces) ProtoMessage() {}

func (x *RelayAgent_Dhcpv6_Interfaces) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_relay_agent_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayAgent_Dhcpv6_Interfaces.ProtoReflect.Descriptor instead.
func (*RelayAgent_Dhcpv6_Interfaces) Descriptor() ([]byte, []int) {
	return file_openconfig_relay_agent_proto_rawDescGZIP(), []int{0, 1, 1}
}

func (x *RelayAgent_Dhcpv6_Interfaces) GetInterface() []*RelayAgent_Dhcpv6_Interfaces_InterfaceKey {
	if x != nil {
		return x.Interface
	}
	return nil
}

type RelayAgent_Dhcpv6_Options struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *RelayAgent_Dhcpv6_Options_Config `protobuf:"bytes,365694234,opt,name=config,proto3" json:"config,omitempty"`
	State  *RelayAgent_Dhcpv6_Options_State  `protobuf:"bytes,248234167,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *RelayAgent_Dhcpv6_Options) Reset() {
	*x = RelayAgent_Dhcpv6_Options{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_relay_agent_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayAgent_Dhcpv6_Options) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayAgent_Dhcpv6_Options) ProtoMessage() {}

func (x *RelayAgent_Dhcpv6_Options) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_relay_agent_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayAgent_Dhcpv6_Options.ProtoReflect.Descriptor instead.
func (*RelayAgent_Dhcpv6_Options) Descriptor() ([]byte, []int) {
	return file_openconfig_relay_agent_proto_rawDescGZIP(), []int{0, 1, 2}
}

func (x *RelayAgent_Dhcpv6_Options) GetConfig() *RelayAgent_Dhcpv6_Options_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *RelayAgent_Dhcpv6_Options) GetState() *RelayAgent_Dhcpv6_Options_State {
	if x != nil {
		return x.State
	}
	return nil
}

type RelayAgent_Dhcpv6_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnableRelayAgent *ywrapper.BoolValue `protobuf:"bytes,90182754,opt,name=enable_relay_agent,json=enableRelayAgent,proto3" json:"enable_relay_agent,omitempty"`
}

func (x *RelayAgent_Dhcpv6_State) Reset() {
	*x = RelayAgent_Dhcpv6_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_relay_agent_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayAgent_Dhcpv6_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayAgent_Dhcpv6_State) ProtoMessage() {}

func (x *RelayAgent_Dhcpv6_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_relay_agent_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayAgent_Dhcpv6_State.ProtoReflect.Descriptor instead.
func (*RelayAgent_Dhcpv6_State) Descriptor() ([]byte, []int) {
	return file_openconfig_relay_agent_proto_rawDescGZIP(), []int{0, 1, 3}
}

func (x *RelayAgent_Dhcpv6_State) GetEnableRelayAgent() *ywrapper.BoolValue {
	if x != nil {
		return x.EnableRelayAgent
	}
	return nil
}

type RelayAgent_Dhcpv6_Interfaces_Interface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config       *RelayAgent_Dhcpv6_Interfaces_Interface_Config       `protobuf:"bytes,49684138,opt,name=config,proto3" json:"config,omitempty"`
	InterfaceRef *RelayAgent_Dhcpv6_Interfaces_Interface_InterfaceRef `protobuf:"bytes,24150401,opt,name=interface_ref,json=interfaceRef,proto3" json:"interface_ref,omitempty"`
	Options      *RelayAgent_Dhcpv6_Interfaces_Interface_Options      `protobuf:"bytes,389748026,opt,name=options,proto3" json:"options,omitempty"`
	State        *RelayAgent_Dhcpv6_Interfaces_Interface_State        `protobuf:"bytes,280586183,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *RelayAgent_Dhcpv6_Interfaces_Interface) Reset() {
	*x = RelayAgent_Dhcpv6_Interfaces_Interface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_relay_agent_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayAgent_Dhcpv6_Interfaces_Interface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayAgent_Dhcpv6_Interfaces_Interface) ProtoMessage() {}

func (x *RelayAgent_Dhcpv6_Interfaces_Interface) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_relay_agent_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayAgent_Dhcpv6_Interfaces_Interface.ProtoReflect.Descriptor instead.
func (*RelayAgent_Dhcpv6_Interfaces_Interface) Descriptor() ([]byte, []int) {
	return file_openconfig_relay_agent_proto_rawDescGZIP(), []int{0, 1, 1, 0}
}

func (x *RelayAgent_Dhcpv6_Interfaces_Interface) GetConfig() *RelayAgent_Dhcpv6_Interfaces_Interface_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *RelayAgent_Dhcpv6_Interfaces_Interface) GetInterfaceRef() *RelayAgent_Dhcpv6_Interfaces_Interface_InterfaceRef {
	if x != nil {
		return x.InterfaceRef
	}
	return nil
}

func (x *RelayAgent_Dhcpv6_Interfaces_Interface) GetOptions() *RelayAgent_Dhcpv6_Interfaces_Interface_Options {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *RelayAgent_Dhcpv6_Interfaces_Interface) GetState() *RelayAgent_Dhcpv6_Interfaces_Interface_State {
	if x != nil {
		return x.State
	}
	return nil
}

type RelayAgent_Dhcpv6_Interfaces_InterfaceKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string                                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Interface *RelayAgent_Dhcpv6_Interfaces_Interface `protobuf:"bytes,2,opt,name=interface,proto3" json:"interface,omitempty"`
}

func (x *RelayAgent_Dhcpv6_Interfaces_InterfaceKey) Reset() {
	*x = RelayAgent_Dhcpv6_Interfaces_InterfaceKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_relay_agent_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayAgent_Dhcpv6_Interfaces_InterfaceKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayAgent_Dhcpv6_Interfaces_InterfaceKey) ProtoMessage() {}

func (x *RelayAgent_Dhcpv6_Interfaces_InterfaceKey) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_relay_agent_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayAgent_Dhcpv6_Interfaces_InterfaceKey.ProtoReflect.Descriptor instead.
func (*RelayAgent_Dhcpv6_Interfaces_InterfaceKey) Descriptor() ([]byte, []int) {
	return file_openconfig_relay_agent_proto_rawDescGZIP(), []int{0, 1, 1, 1}
}

func (x *RelayAgent_Dhcpv6_Interfaces_InterfaceKey) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RelayAgent_Dhcpv6_Interfaces_InterfaceKey) GetInterface() *RelayAgent_Dhcpv6_Interfaces_Interface {
	if x != nil {
		return x.Interface
	}
	return nil
}

type RelayAgent_Dhcpv6_Interfaces_Interface_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable        *ywrapper.BoolValue     `protobuf:"bytes,342267364,opt,name=enable,proto3" json:"enable,omitempty"`
	HelperAddress []*ywrapper.StringValue `protobuf:"bytes,229723682,rep,name=helper_address,json=helperAddress,proto3" json:"helper_address,omitempty"`
	Id            *ywrapper.StringValue   `protobuf:"bytes,125250714,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RelayAgent_Dhcpv6_Interfaces_Interface_Config) Reset() {
	*x = RelayAgent_Dhcpv6_Interfaces_Interface_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_relay_agent_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayAgent_Dhcpv6_Interfaces_Interface_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayAgent_Dhcpv6_Interfaces_Interface_Config) ProtoMessage() {}

func (x *RelayAgent_Dhcpv6_Interfaces_Interface_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_relay_agent_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayAgent_Dhcpv6_Interfaces_Interface_Config.ProtoReflect.Descriptor instead.
func (*RelayAgent_Dhcpv6_Interfaces_Interface_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_relay_agent_proto_rawDescGZIP(), []int{0, 1, 1, 0, 0}
}

func (x *RelayAgent_Dhcpv6_Interfaces_Interface_Config) GetEnable() *ywrapper.BoolValue {
	if x != nil {
		return x.Enable
	}
	return nil
}

func (x *RelayAgent_Dhcpv6_Interfaces_Interface_Config) GetHelperAddress() []*ywrapper.StringValue {
	if x != nil {
		return x.HelperAddress
	}
	return nil
}

func (x *RelayAgent_Dhcpv6_Interfaces_Interface_Config) GetId() *ywrapper.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

type RelayAgent_Dhcpv6_Interfaces_Interface_InterfaceRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *RelayAgent_Dhcpv6_Interfaces_Interface_InterfaceRef_Config `protobuf:"bytes,436936710,opt,name=config,proto3" json:"config,omitempty"`
	State  *RelayAgent_Dhcpv6_Interfaces_Interface_InterfaceRef_State  `protobuf:"bytes,193829107,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *RelayAgent_Dhcpv6_Interfaces_Interface_InterfaceRef) Reset() {
	*x = RelayAgent_Dhcpv6_Interfaces_Interface_InterfaceRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_relay_agent_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayAgent_Dhcpv6_Interfaces_Interface_InterfaceRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayAgent_Dhcpv6_Interfaces_Interface_InterfaceRef) ProtoMessage() {}

func (x *RelayAgent_Dhcpv6_Interfaces_Interface_InterfaceRef) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_relay_agent_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayAgent_Dhcpv6_Interfaces_Interface_InterfaceRef.ProtoReflect.Descriptor instead.
func (*RelayAgent_Dhcpv6_Interfaces_Interface_InterfaceRef) Descriptor() ([]byte, []int) {
	return file_openconfig_relay_agent_proto_rawDescGZIP(), []int{0, 1, 1, 0, 1}
}

func (x *RelayAgent_Dhcpv6_Interfaces_Interface_InterfaceRef) GetConfig() *RelayAgent_Dhcpv6_Interfaces_Interface_InterfaceRef_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *RelayAgent_Dhcpv6_Interfaces_Interface_InterfaceRef) GetState() *RelayAgent_Dhcpv6_Interfaces_Interface_InterfaceRef_State {
	if x != nil {
		return x.State
	}
	return nil
}

type RelayAgent_Dhcpv6_Interfaces_Interface_Options struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *RelayAgent_Dhcpv6_Interfaces_Interface_Options_Config `protobuf:"bytes,508031531,opt,name=config,proto3" json:"config,omitempty"`
	State  *RelayAgent_Dhcpv6_Interfaces_Interface_Options_State  `protobuf:"bytes,230789868,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *RelayAgent_Dhcpv6_Interfaces_Interface_Options) Reset() {
	*x = RelayAgent_Dhcpv6_Interfaces_Interface_Options{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_relay_agent_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayAgent_Dhcpv6_Interfaces_Interface_Options) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayAgent_Dhcpv6_Interfaces_Interface_Options) ProtoMessage() {}

func (x *RelayAgent_Dhcpv6_Interfaces_Interface_Options) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_relay_agent_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayAgent_Dhcpv6_Interfaces_Interface_Options.ProtoReflect.Descriptor instead.
func (*RelayAgent_Dhcpv6_Interfaces_Interface_Options) Descriptor() ([]byte, []int) {
	return file_openconfig_relay_agent_proto_rawDescGZIP(), []int{0, 1, 1, 0, 2}
}

func (x *RelayAgent_Dhcpv6_Interfaces_Interface_Options) GetConfig() *RelayAgent_Dhcpv6_Interfaces_Interface_Options_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *RelayAgent_Dhcpv6_Interfaces_Interface_Options) GetState() *RelayAgent_Dhcpv6_Interfaces_Interface_Options_State {
	if x != nil {
		return x.State
	}
	return nil
}

type RelayAgent_Dhcpv6_Interfaces_Interface_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Counters      *RelayAgent_Dhcpv6_Interfaces_Interface_State_Counters `protobuf:"bytes,184495997,opt,name=counters,proto3" json:"counters,omitempty"`
	Enable        *ywrapper.BoolValue                                    `protobuf:"bytes,427384559,opt,name=enable,proto3" json:"enable,omitempty"`
	HelperAddress []*ywrapper.StringValue                                `protobuf:"bytes,283651153,rep,name=helper_address,json=helperAddress,proto3" json:"helper_address,omitempty"`
	Id            *ywrapper.StringValue                                  `protobuf:"bytes,268894321,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RelayAgent_Dhcpv6_Interfaces_Interface_State) Reset() {
	*x = RelayAgent_Dhcpv6_Interfaces_Interface_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_relay_agent_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayAgent_Dhcpv6_Interfaces_Interface_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayAgent_Dhcpv6_Interfaces_Interface_State) ProtoMessage() {}

func (x *RelayAgent_Dhcpv6_Interfaces_Interface_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_relay_agent_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayAgent_Dhcpv6_Interfaces_Interface_State.ProtoReflect.Descriptor instead.
func (*RelayAgent_Dhcpv6_Interfaces_Interface_State) Descriptor() ([]byte, []int) {
	return file_openconfig_relay_agent_proto_rawDescGZIP(), []int{0, 1, 1, 0, 3}
}

func (x *RelayAgent_Dhcpv6_Interfaces_Interface_State) GetCounters() *RelayAgent_Dhcpv6_Interfaces_Interface_State_Counters {
	if x != nil {
		return x.Counters
	}
	return nil
}

func (x *RelayAgent_Dhcpv6_Interfaces_Interface_State) GetEnable() *ywrapper.BoolValue {
	if x != nil {
		return x.Enable
	}
	return nil
}

func (x *RelayAgent_Dhcpv6_Interfaces_Interface_State) GetHelperAddress() []*ywrapper.StringValue {
	if x != nil {
		return x.HelperAddress
	}
	return nil
}

func (x *RelayAgent_Dhcpv6_Interfaces_Interface_State) GetId() *ywrapper.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

type RelayAgent_Dhcpv6_Interfaces_Interface_InterfaceRef_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interface    *ywrapper.StringValue `protobuf:"bytes,233789682,opt,name=interface,proto3" json:"interface,omitempty"`
	Subinterface *ywrapper.UintValue   `protobuf:"bytes,15964142,opt,name=subinterface,proto3" json:"subinterface,omitempty"`
}

func (x *RelayAgent_Dhcpv6_Interfaces_Interface_InterfaceRef_Config) Reset() {
	*x = RelayAgent_Dhcpv6_Interfaces_Interface_InterfaceRef_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_relay_agent_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayAgent_Dhcpv6_Interfaces_Interface_InterfaceRef_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayAgent_Dhcpv6_Interfaces_Interface_InterfaceRef_Config) ProtoMessage() {}

func (x *RelayAgent_Dhcpv6_Interfaces_Interface_InterfaceRef_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_relay_agent_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayAgent_Dhcpv6_Interfaces_Interface_InterfaceRef_Config.ProtoReflect.Descriptor instead.
func (*RelayAgent_Dhcpv6_Interfaces_Interface_InterfaceRef_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_relay_agent_proto_rawDescGZIP(), []int{0, 1, 1, 0, 1, 0}
}

func (x *RelayAgent_Dhcpv6_Interfaces_Interface_InterfaceRef_Config) GetInterface() *ywrapper.StringValue {
	if x != nil {
		return x.Interface
	}
	return nil
}

func (x *RelayAgent_Dhcpv6_Interfaces_Interface_InterfaceRef_Config) GetSubinterface() *ywrapper.UintValue {
	if x != nil {
		return x.Subinterface
	}
	return nil
}

type RelayAgent_Dhcpv6_Interfaces_Interface_InterfaceRef_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interface    *ywrapper.StringValue `protobuf:"bytes,295907667,opt,name=interface,proto3" json:"interface,omitempty"`
	Subinterface *ywrapper.UintValue   `protobuf:"bytes,517397569,opt,name=subinterface,proto3" json:"subinterface,omitempty"`
}

func (x *RelayAgent_Dhcpv6_Interfaces_Interface_InterfaceRef_State) Reset() {
	*x = RelayAgent_Dhcpv6_Interfaces_Interface_InterfaceRef_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_relay_agent_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayAgent_Dhcpv6_Interfaces_Interface_InterfaceRef_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayAgent_Dhcpv6_Interfaces_Interface_InterfaceRef_State) ProtoMessage() {}

func (x *RelayAgent_Dhcpv6_Interfaces_Interface_InterfaceRef_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_relay_agent_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayAgent_Dhcpv6_Interfaces_Interface_InterfaceRef_State.ProtoReflect.Descriptor instead.
func (*RelayAgent_Dhcpv6_Interfaces_Interface_InterfaceRef_State) Descriptor() ([]byte, []int) {
	return file_openconfig_relay_agent_proto_rawDescGZIP(), []int{0, 1, 1, 0, 1, 1}
}

func (x *RelayAgent_Dhcpv6_Interfaces_Interface_InterfaceRef_State) GetInterface() *ywrapper.StringValue {
	if x != nil {
		return x.Interface
	}
	return nil
}

func (x *RelayAgent_Dhcpv6_Interfaces_Interface_InterfaceRef_State) GetSubinterface() *ywrapper.UintValue {
	if x != nil {
		return x.Subinterface
	}
	return nil
}

type RelayAgent_Dhcpv6_Interfaces_Interface_Options_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnableInterfaceId *ywrapper.BoolValue   `protobuf:"bytes,81545561,opt,name=enable_interface_id,json=enableInterfaceId,proto3" json:"enable_interface_id,omitempty"`
	EnableRemoteId    *ywrapper.BoolValue   `protobuf:"bytes,256883936,opt,name=enable_remote_id,json=enableRemoteId,proto3" json:"enable_remote_id,omitempty"`
	InterfaceId       *ywrapper.StringValue `protobuf:"bytes,117974163,opt,name=interface_id,json=interfaceId,proto3" json:"interface_id,omitempty"`
	RemoteId          *ywrapper.StringValue `protobuf:"bytes,192288942,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
}

func (x *RelayAgent_Dhcpv6_Interfaces_Interface_Options_Config) Reset() {
	*x = RelayAgent_Dhcpv6_Interfaces_Interface_Options_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_relay_agent_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayAgent_Dhcpv6_Interfaces_Interface_Options_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayAgent_Dhcpv6_Interfaces_Interface_Options_Config) ProtoMessage() {}

func (x *RelayAgent_Dhcpv6_Interfaces_Interface_Options_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_relay_agent_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayAgent_Dhcpv6_Interfaces_Interface_Options_Config.ProtoReflect.Descriptor instead.
func (*RelayAgent_Dhcpv6_Interfaces_Interface_Options_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_relay_agent_proto_rawDescGZIP(), []int{0, 1, 1, 0, 2, 0}
}

func (x *RelayAgent_Dhcpv6_Interfaces_Interface_Options_Config) GetEnableInterfaceId() *ywrapper.BoolValue {
	if x != nil {
		return x.EnableInterfaceId
	}
	return nil
}

func (x *RelayAgent_Dhcpv6_Interfaces_Interface_Options_Config) GetEnableRemoteId() *ywrapper.BoolValue {
	if x != nil {
		return x.EnableRemoteId
	}
	return nil
}

func (x *RelayAgent_Dhcpv6_Interfaces_Interface_Options_Config) GetInterfaceId() *ywrapper.StringValue {
	if x != nil {
		return x.InterfaceId
	}
	return nil
}

func (x *RelayAgent_Dhcpv6_Interfaces_Interface_Options_Config) GetRemoteId() *ywrapper.StringValue {
	if x != nil {
		return x.RemoteId
	}
	return nil
}

type RelayAgent_Dhcpv6_Interfaces_Interface_Options_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnableInterfaceId *ywrapper.BoolValue   `protobuf:"bytes,430258302,opt,name=enable_interface_id,json=enableInterfaceId,proto3" json:"enable_interface_id,omitempty"`
	EnableRemoteId    *ywrapper.BoolValue   `protobuf:"bytes,315229981,opt,name=enable_remote_id,json=enableRemoteId,proto3" json:"enable_remote_id,omitempty"`
	InterfaceId       *ywrapper.StringValue `protobuf:"bytes,90368698,opt,name=interface_id,json=interfaceId,proto3" json:"interface_id,omitempty"`
	RemoteId          *ywrapper.StringValue `protobuf:"bytes,183350385,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	SentInterfaceId   *ywrapper.StringValue `protobuf:"bytes,503962163,opt,name=sent_interface_id,json=sentInterfaceId,proto3" json:"sent_interface_id,omitempty"`
	SentRemoteId      *ywrapper.StringValue `protobuf:"bytes,417720270,opt,name=sent_remote_id,json=sentRemoteId,proto3" json:"sent_remote_id,omitempty"`
}

func (x *RelayAgent_Dhcpv6_Interfaces_Interface_Options_State) Reset() {
	*x = RelayAgent_Dhcpv6_Interfaces_Interface_Options_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_relay_agent_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayAgent_Dhcpv6_Interfaces_Interface_Options_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayAgent_Dhcpv6_Interfaces_Interface_Options_State) ProtoMessage() {}

func (x *RelayAgent_Dhcpv6_Interfaces_Interface_Options_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_relay_agent_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayAgent_Dhcpv6_Interfaces_Interface_Options_State.ProtoReflect.Descriptor instead.
func (*RelayAgent_Dhcpv6_Interfaces_Interface_Options_State) Descriptor() ([]byte, []int) {
	return file_openconfig_relay_agent_proto_rawDescGZIP(), []int{0, 1, 1, 0, 2, 1}
}

func (x *RelayAgent_Dhcpv6_Interfaces_Interface_Options_State) GetEnableInterfaceId() *ywrapper.BoolValue {
	if x != nil {
		return x.EnableInterfaceId
	}
	return nil
}

func (x *RelayAgent_Dhcpv6_Interfaces_Interface_Options_State) GetEnableRemoteId() *ywrapper.BoolValue {
	if x != nil {
		return x.EnableRemoteId
	}
	return nil
}

func (x *RelayAgent_Dhcpv6_Interfaces_Interface_Options_State) GetInterfaceId() *ywrapper.StringValue {
	if x != nil {
		return x.InterfaceId
	}
	return nil
}

func (x *RelayAgent_Dhcpv6_Interfaces_Interface_Options_State) GetRemoteId() *ywrapper.StringValue {
	if x != nil {
		return x.RemoteId
	}
	return nil
}

func (x *RelayAgent_Dhcpv6_Interfaces_Interface_Options_State) GetSentInterfaceId() *ywrapper.StringValue {
	if x != nil {
		return x.SentInterfaceId
	}
	return nil
}

func (x *RelayAgent_Dhcpv6_Interfaces_Interface_Options_State) GetSentRemoteId() *ywrapper.StringValue {
	if x != nil {
		return x.SentRemoteId
	}
	return nil
}

type RelayAgent_Dhcpv6_Interfaces_Interface_State_Counters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dhcpv6AdverstiseSent      *ywrapper.UintValue `protobuf:"bytes,405970969,opt,name=dhcpv6_adverstise_sent,json=dhcpv6AdverstiseSent,proto3" json:"dhcpv6_adverstise_sent,omitempty"`
	Dhcpv6ConfirmReceived     *ywrapper.UintValue `protobuf:"bytes,45213754,opt,name=dhcpv6_confirm_received,json=dhcpv6ConfirmReceived,proto3" json:"dhcpv6_confirm_received,omitempty"`
	Dhcpv6DeclineReceived     *ywrapper.UintValue `protobuf:"bytes,69747700,opt,name=dhcpv6_decline_received,json=dhcpv6DeclineReceived,proto3" json:"dhcpv6_decline_received,omitempty"`
	Dhcpv6InfoRequestReceived *ywrapper.UintValue `protobuf:"bytes,211425274,opt,name=dhcpv6_info_request_received,json=dhcpv6InfoRequestReceived,proto3" json:"dhcpv6_info_request_received,omitempty"`
	Dhcpv6RebindReceived      *ywrapper.UintValue `protobuf:"bytes,246829492,opt,name=dhcpv6_rebind_received,json=dhcpv6RebindReceived,proto3" json:"dhcpv6_rebind_received,omitempty"`
	Dhcpv6ReconfigureSent     *ywrapper.UintValue `protobuf:"bytes,4148330,opt,name=dhcpv6_reconfigure_sent,json=dhcpv6ReconfigureSent,proto3" json:"dhcpv6_reconfigure_sent,omitempty"`
	Dhcpv6RelayForwSent       *ywrapper.UintValue `protobuf:"bytes,300846849,opt,name=dhcpv6_relay_forw_sent,json=dhcpv6RelayForwSent,proto3" json:"dhcpv6_relay_forw_sent,omitempty"`
	Dhcpv6RelayReplyReceived  *ywrapper.UintValue `protobuf:"bytes,82025534,opt,name=dhcpv6_relay_reply_received,json=dhcpv6RelayReplyReceived,proto3" json:"dhcpv6_relay_reply_received,omitempty"`
	Dhcpv6ReleaseReceived     *ywrapper.UintValue `protobuf:"bytes,69979695,opt,name=dhcpv6_release_received,json=dhcpv6ReleaseReceived,proto3" json:"dhcpv6_release_received,omitempty"`
	Dhcpv6ReplySent           *ywrapper.UintValue `protobuf:"bytes,209831261,opt,name=dhcpv6_reply_sent,json=dhcpv6ReplySent,proto3" json:"dhcpv6_reply_sent,omitempty"`
	Dhcpv6RequestReceived     *ywrapper.UintValue `protobuf:"bytes,17287627,opt,name=dhcpv6_request_received,json=dhcpv6RequestReceived,proto3" json:"dhcpv6_request_received,omitempty"`
	Dhcpv6SolicitReceived     *ywrapper.UintValue `protobuf:"bytes,436683333,opt,name=dhcpv6_solicit_received,json=dhcpv6SolicitReceived,proto3" json:"dhcpv6_solicit_received,omitempty"`
	InvalidOpcode             *ywrapper.UintValue `protobuf:"bytes,20827908,opt,name=invalid_opcode,json=invalidOpcode,proto3" json:"invalid_opcode,omitempty"`
	InvalidOptions            *ywrapper.UintValue `protobuf:"bytes,71364860,opt,name=invalid_options,json=invalidOptions,proto3" json:"invalid_options,omitempty"`
	TotalDropped              *ywrapper.UintValue `protobuf:"bytes,170065391,opt,name=total_dropped,json=totalDropped,proto3" json:"total_dropped,omitempty"`
}

func (x *RelayAgent_Dhcpv6_Interfaces_Interface_State_Counters) Reset() {
	*x = RelayAgent_Dhcpv6_Interfaces_Interface_State_Counters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_relay_agent_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayAgent_Dhcpv6_Interfaces_Interface_State_Counters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayAgent_Dhcpv6_Interfaces_Interface_State_Counters) ProtoMessage() {}

func (x *RelayAgent_Dhcpv6_Interfaces_Interface_State_Counters) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_relay_agent_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayAgent_Dhcpv6_Interfaces_Interface_State_Counters.ProtoReflect.Descriptor instead.
func (*RelayAgent_Dhcpv6_Interfaces_Interface_State_Counters) Descriptor() ([]byte, []int) {
	return file_openconfig_relay_agent_proto_rawDescGZIP(), []int{0, 1, 1, 0, 3, 0}
}

func (x *RelayAgent_Dhcpv6_Interfaces_Interface_State_Counters) GetDhcpv6AdverstiseSent() *ywrapper.UintValue {
	if x != nil {
		return x.Dhcpv6AdverstiseSent
	}
	return nil
}

func (x *RelayAgent_Dhcpv6_Interfaces_Interface_State_Counters) GetDhcpv6ConfirmReceived() *ywrapper.UintValue {
	if x != nil {
		return x.Dhcpv6ConfirmReceived
	}
	return nil
}

func (x *RelayAgent_Dhcpv6_Interfaces_Interface_State_Counters) GetDhcpv6DeclineReceived() *ywrapper.UintValue {
	if x != nil {
		return x.Dhcpv6DeclineReceived
	}
	return nil
}

func (x *RelayAgent_Dhcpv6_Interfaces_Interface_State_Counters) GetDhcpv6InfoRequestReceived() *ywrapper.UintValue {
	if x != nil {
		return x.Dhcpv6InfoRequestReceived
	}
	return nil
}

func (x *RelayAgent_Dhcpv6_Interfaces_Interface_State_Counters) GetDhcpv6RebindReceived() *ywrapper.UintValue {
	if x != nil {
		return x.Dhcpv6RebindReceived
	}
	return nil
}

func (x *RelayAgent_Dhcpv6_Interfaces_Interface_State_Counters) GetDhcpv6ReconfigureSent() *ywrapper.UintValue {
	if x != nil {
		return x.Dhcpv6ReconfigureSent
	}
	return nil
}

func (x *RelayAgent_Dhcpv6_Interfaces_Interface_State_Counters) GetDhcpv6RelayForwSent() *ywrapper.UintValue {
	if x != nil {
		return x.Dhcpv6RelayForwSent
	}
	return nil
}

func (x *RelayAgent_Dhcpv6_Interfaces_Interface_State_Counters) GetDhcpv6RelayReplyReceived() *ywrapper.UintValue {
	if x != nil {
		return x.Dhcpv6RelayReplyReceived
	}
	return nil
}

func (x *RelayAgent_Dhcpv6_Interfaces_Interface_State_Counters) GetDhcpv6ReleaseReceived() *ywrapper.UintValue {
	if x != nil {
		return x.Dhcpv6ReleaseReceived
	}
	return nil
}

func (x *RelayAgent_Dhcpv6_Interfaces_Interface_State_Counters) GetDhcpv6ReplySent() *ywrapper.UintValue {
	if x != nil {
		return x.Dhcpv6ReplySent
	}
	return nil
}

func (x *RelayAgent_Dhcpv6_Interfaces_Interface_State_Counters) GetDhcpv6RequestReceived() *ywrapper.UintValue {
	if x != nil {
		return x.Dhcpv6RequestReceived
	}
	return nil
}

func (x *RelayAgent_Dhcpv6_Interfaces_Interface_State_Counters) GetDhcpv6SolicitReceived() *ywrapper.UintValue {
	if x != nil {
		return x.Dhcpv6SolicitReceived
	}
	return nil
}

func (x *RelayAgent_Dhcpv6_Interfaces_Interface_State_Counters) GetInvalidOpcode() *ywrapper.UintValue {
	if x != nil {
		return x.InvalidOpcode
	}
	return nil
}

func (x *RelayAgent_Dhcpv6_Interfaces_Interface_State_Counters) GetInvalidOptions() *ywrapper.UintValue {
	if x != nil {
		return x.InvalidOptions
	}
	return nil
}

func (x *RelayAgent_Dhcpv6_Interfaces_Interface_State_Counters) GetTotalDropped() *ywrapper.UintValue {
	if x != nil {
		return x.TotalDropped
	}
	return nil
}

type RelayAgent_Dhcpv6_Options_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnableInterfaceId *ywrapper.BoolValue `protobuf:"bytes,386543400,opt,name=enable_interface_id,json=enableInterfaceId,proto3" json:"enable_interface_id,omitempty"`
	EnableRemoteId    *ywrapper.BoolValue `protobuf:"bytes,475497723,opt,name=enable_remote_id,json=enableRemoteId,proto3" json:"enable_remote_id,omitempty"`
}

func (x *RelayAgent_Dhcpv6_Options_Config) Reset() {
	*x = RelayAgent_Dhcpv6_Options_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_relay_agent_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayAgent_Dhcpv6_Options_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayAgent_Dhcpv6_Options_Config) ProtoMessage() {}

func (x *RelayAgent_Dhcpv6_Options_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_relay_agent_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayAgent_Dhcpv6_Options_Config.ProtoReflect.Descriptor instead.
func (*RelayAgent_Dhcpv6_Options_Config) Descriptor() ([]byte, []int) {
	return file_openconfig_relay_agent_proto_rawDescGZIP(), []int{0, 1, 2, 0}
}

func (x *RelayAgent_Dhcpv6_Options_Config) GetEnableInterfaceId() *ywrapper.BoolValue {
	if x != nil {
		return x.EnableInterfaceId
	}
	return nil
}

func (x *RelayAgent_Dhcpv6_Options_Config) GetEnableRemoteId() *ywrapper.BoolValue {
	if x != nil {
		return x.EnableRemoteId
	}
	return nil
}

type RelayAgent_Dhcpv6_Options_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnableInterfaceId *ywrapper.BoolValue `protobuf:"bytes,353629277,opt,name=enable_interface_id,json=enableInterfaceId,proto3" json:"enable_interface_id,omitempty"`
	EnableRemoteId    *ywrapper.BoolValue `protobuf:"bytes,74375196,opt,name=enable_remote_id,json=enableRemoteId,proto3" json:"enable_remote_id,omitempty"`
}

func (x *RelayAgent_Dhcpv6_Options_State) Reset() {
	*x = RelayAgent_Dhcpv6_Options_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_relay_agent_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayAgent_Dhcpv6_Options_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayAgent_Dhcpv6_Options_State) ProtoMessage() {}

func (x *RelayAgent_Dhcpv6_Options_State) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_relay_agent_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayAgent_Dhcpv6_Options_State.ProtoReflect.Descriptor instead.
func (*RelayAgent_Dhcpv6_Options_State) Descriptor() ([]byte, []int) {
	return file_openconfig_relay_agent_proto_rawDescGZIP(), []int{0, 1, 2, 1}
}

func (x *RelayAgent_Dhcpv6_Options_State) GetEnableInterfaceId() *ywrapper.BoolValue {
	if x != nil {
		return x.EnableInterfaceId
	}
	return nil
}

func (x *RelayAgent_Dhcpv6_Options_State) GetEnableRemoteId() *ywrapper.BoolValue {
	if x != nil {
		return x.EnableRemoteId
	}
	return nil
}

var File_openconfig_relay_agent_proto protoreflect.FileDescriptor

var file_openconfig_relay_agent_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x65, 0x6c,
	0x61, 0x79, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x0e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x79, 0x65, 0x78, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfb, 0x7c, 0x0a, 0x0a, 0x52, 0x65, 0x6c, 0x61, 0x79,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x04, 0x64, 0x68, 0x63, 0x70, 0x18, 0xae, 0xb0,
	0xbe, 0x48, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x44,
	0x68, 0x63, 0x70, 0x42, 0x14, 0x82, 0x41, 0x11, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x52, 0x04, 0x64, 0x68, 0x63, 0x70, 0x12,
	0x51, 0x0a, 0x06, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x18, 0xa2, 0xb8, 0x9b, 0xe2, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x68, 0x63, 0x70,
	0x76, 0x36, 0x42, 0x16, 0x82, 0x41, 0x13, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x52, 0x06, 0x64, 0x68, 0x63, 0x70,
	0x76, 0x36, 0x1a, 0x87, 0x3b, 0x0a, 0x04, 0x44, 0x68, 0x63, 0x70, 0x12, 0x9e, 0x01, 0x0a, 0x18,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xe9, 0xa7, 0xf7, 0x4b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52,
	0x65, 0x6c, 0x61, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x2e, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x2d, 0x82, 0x41, 0x2a, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79,
	0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x2f, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2d, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xdf, 0xfc, 0xae, 0x99, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65,
	0x6c, 0x61, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x42, 0x1b, 0x82, 0x41, 0x18, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6b, 0x0a, 0x0a, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0xad, 0xb9, 0x93, 0x83, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52,
	0x65, 0x6c, 0x61, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x42, 0x1f, 0x82, 0x41, 0x1c, 0x2f, 0x72,
	0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x90, 0xc4, 0xb8, 0xab, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x1a, 0x82, 0x41,
	0x17, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68,
	0x63, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a,
	0x9c, 0x04, 0x0a, 0x16, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x8b, 0x01, 0x0a, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xde, 0xe2, 0xf6, 0x99, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x39, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x6c,
	0x61, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x2e, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x34, 0x82, 0x41, 0x31, 0x2f,
	0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70,
	0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2d, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x86, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0xcb, 0x99, 0x90, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x33, 0x82, 0x41, 0x30, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79,
	0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x2f, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2d, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x1a, 0x75, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6b, 0x0a, 0x06, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0xc8, 0xde, 0xf4, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x3b, 0x82, 0x41, 0x38, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2d,
	0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x74, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x6b, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0xd3, 0xab, 0x92, 0xc9,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3a, 0x82, 0x41, 0x37, 0x2f,
	0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70,
	0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2d, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x7e,
	0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x74, 0x0a, 0x12, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0xcf,
	0xfd, 0xc3, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2e, 0x82, 0x41,
	0x2b, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68,
	0x63, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x2d, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x1a, 0x9c,
	0x31, 0x0a, 0x0a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x80, 0x01,
	0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x99, 0xfb, 0xe0, 0xc6,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x68,
	0x63, 0x70, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x42, 0x29, 0x82, 0x41, 0x26, 0x2f,
	0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x1a, 0xeb, 0x2e, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0xc9,
	0x01, 0x0a, 0x18, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x90, 0xab, 0xe9, 0xa9,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x68,
	0x63, 0x70, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x42,
	0x82, 0x41, 0x3f, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f,
	0x64, 0x68, 0x63, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2d,
	0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x16, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x84, 0x01, 0x0a, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xee, 0xd4, 0xbf, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x6c, 0x61,
	0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x30, 0x82, 0x41, 0x2d, 0x2f, 0x72, 0x65, 0x6c,
	0x61, 0x79, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x9e, 0x01, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x72, 0x65, 0x66, 0x18, 0xad, 0xe7, 0xc2, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x42, 0x37, 0x82, 0x41, 0x34,
	0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63,
	0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2d, 0x72, 0x65, 0x66, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52,
	0x65, 0x66, 0x12, 0x81, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x9b, 0xab, 0xf8,
	0xd0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x44,
	0x68, 0x63, 0x70, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x2f,
	0x82, 0x41, 0x2c, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f,
	0x64, 0x68, 0x63, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x92, 0x0c, 0x0a, 0x16, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0xb5, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xa5, 0xdb, 0xd8,
	0xa1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x44,
	0x68, 0x63, 0x70, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x49, 0x82, 0x41, 0x46, 0x2f, 0x72, 0x65, 0x6c, 0x61,
	0x79, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2d, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xb1, 0x01, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x9a, 0xa6, 0xb3, 0x8b, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x48, 0x82, 0x41,
	0x45, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68,
	0x63, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2d, 0x69, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xaa, 0x03,
	0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x8e, 0x01, 0x0a, 0x0a, 0x63, 0x69, 0x72,
	0x63, 0x75, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x9d, 0xb2, 0xf8, 0xba, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x54, 0x82, 0x41, 0x51, 0x2f, 0x72, 0x65,
	0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2d, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x2d, 0x69, 0x64, 0x52, 0x09,
	0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x49, 0x64, 0x12, 0x80, 0x01, 0x0a, 0x06, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0xf5, 0xb3, 0x88, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x50, 0x82, 0x41, 0x4d, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2d, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x8b, 0x01, 0x0a,
	0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0xcc, 0x9c, 0xa7, 0xd9, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x53, 0x82, 0x41, 0x50,
	0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63,
	0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2d, 0x69, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x69, 0x64,
	0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x1a, 0xde, 0x05, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x8d, 0x01, 0x0a, 0x0a, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0xe0, 0xaa, 0xe3, 0x90, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x53, 0x82, 0x41, 0x50, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2d, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63,
	0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x2d, 0x69, 0x64, 0x52, 0x09, 0x63, 0x69, 0x72, 0x63, 0x75,
	0x69, 0x74, 0x49, 0x64, 0x12, 0x80, 0x01, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0xf4, 0x87, 0xb0, 0x9f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4f,
	0x82, 0x41, 0x4c, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f,
	0x64, 0x68, 0x63, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2d,
	0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x89, 0x01, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0xeb, 0xa6, 0xc7, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x52, 0x82, 0x41, 0x4f, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79,
	0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2d, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x69, 0x64, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x49, 0x64, 0x12, 0x9a, 0x01, 0x0a, 0x0f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x69, 0x72,
	0x63, 0x75, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0xa5, 0xcd, 0xe8, 0x4f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x58, 0x82, 0x41, 0x55, 0x2f, 0x72, 0x65, 0x6c,
	0x61, 0x79, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2d, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x73, 0x65, 0x6e, 0x74, 0x2d, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x2d, 0x69,
	0x64, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x74, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x49, 0x64,
	0x12, 0x98, 0x01, 0x0a, 0x0e, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x84, 0xe6, 0xb1, 0xd0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x57, 0x82, 0x41, 0x54, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2d, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73,
	0x65, 0x6e, 0x74, 0x2d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x69, 0x64, 0x52, 0x0c, 0x73,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x1a, 0xd5, 0x02, 0x0a, 0x06,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x67, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0xf8, 0xf8, 0xfa, 0x5d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x37,
	0x82, 0x41, 0x34, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f,
	0x64, 0x68, 0x63, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x81, 0x01, 0x0a, 0x0e, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0xce, 0xe5, 0xe7, 0xfe, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x2d, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x0d, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x5e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0xe6, 0xcd, 0xb2, 0xcd, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x33, 0x82, 0x41, 0x30, 0x2f,
	0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x64, 0x52,
	0x02, 0x69, 0x64, 0x1a, 0x80, 0x07, 0x0a, 0x0c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x52, 0x65, 0x66, 0x12, 0xa0, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0xc2, 0xa9, 0xbc, 0xff, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x2f, 0x64, 0x68, 0x63, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x66, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x9c, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0xff, 0xe8, 0x8b, 0xb5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x3d, 0x82, 0x41, 0x3a, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x66, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x97, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x81, 0x01, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18,
	0xee, 0x9d, 0xd1, 0xf0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x48, 0x82, 0x41, 0x45, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x66, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x8a, 0xd2, 0x8a, 0x93, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4b, 0x82, 0x41, 0x48, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79,
	0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x66, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x1a, 0x93, 0x02, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x09, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x9f, 0xb6, 0xc8, 0xdb, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x47, 0x82, 0x41, 0x44, 0x2f, 0x72,
	0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x72,
	0x65, 0x66, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x86, 0x01,
	0x0a, 0x0c, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0xad,
	0xbc, 0xf8, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4a, 0x82, 0x41,
	0x47, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68,
	0x63, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2d, 0x72, 0x65, 0x66, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x1a, 0xf5, 0x13, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x99, 0x01, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0xa9, 0xef,
	0xa3, 0xa6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x44, 0x68, 0x63, 0x70, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x42, 0x38, 0x82, 0x41, 0x35, 0x2f, 0x72, 0x65,
	0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x67, 0x0a, 0x06,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x83, 0xa2, 0xb8, 0xc1, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79,
	0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x06, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x7f, 0x0a, 0x0e, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xad, 0xe1, 0xfd, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f, 0x72, 0x65, 0x6c,
	0x61, 0x79, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x2d,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0d, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x5c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0xdd, 0xaf, 0xf2,
	0x54, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x32, 0x82, 0x41,
	0x2f, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68,
	0x63, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x64,
	0x52, 0x02, 0x69, 0x64, 0x1a, 0x87, 0x10, 0x0a, 0x08, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x86, 0x01, 0x0a, 0x0e, 0x62, 0x6f, 0x6f, 0x74, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f,
	0x73, 0x65, 0x6e, 0x74, 0x18, 0xe3, 0xff, 0xee, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x47, 0x82, 0x41, 0x44, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x62, 0x6f, 0x6f,
	0x74, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x2d, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x62, 0x6f, 0x6f,
	0x74, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x99, 0x01, 0x0a, 0x14, 0x62,
	0x6f, 0x6f, 0x74, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x18, 0x81, 0xbf, 0xbd, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x4d, 0x82, 0x41, 0x4a, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x62, 0x6f, 0x6f,
	0x74, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x52, 0x13, 0x62, 0x6f, 0x6f, 0x74, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x8c, 0x01, 0x0a, 0x10, 0x62, 0x6f, 0x6f, 0x74, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x92, 0xc6, 0x8f, 0x5e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x49, 0x82, 0x41, 0x46, 0x2f, 0x72,
	0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x62, 0x6f, 0x6f, 0x74, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2d,
	0x73, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x62, 0x6f, 0x6f, 0x74, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x83, 0x01, 0x0a, 0x0d, 0x64, 0x68, 0x63, 0x70, 0x5f, 0x61,
	0x63, 0x6b, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0xd4, 0x9d, 0xce, 0xec, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x72, 0x65, 0x6c, 0x61,
	0x79, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x2f, 0x64, 0x68, 0x63, 0x70, 0x2d, 0x61, 0x63, 0x6b, 0x2d, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x0b,
	0x64, 0x68, 0x63, 0x70, 0x41, 0x63, 0x6b, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x9b, 0x01, 0x0a, 0x15,
	0x64, 0x68, 0x63, 0x70, 0x5f, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0xd8, 0xb7, 0xe1, 0xb5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x64,
	0x68, 0x63, 0x70, 0x2d, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x52, 0x13, 0x64, 0x68, 0x63, 0x70, 0x44, 0x65, 0x63, 0x6c, 0x69, 0x6e,
	0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x9d, 0x01, 0x0a, 0x16, 0x64, 0x68,
	0x63, 0x70, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x18, 0xc1, 0xfc, 0xa5, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x64, 0x68, 0x63,
	0x70, 0x2d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2d, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x52, 0x14, 0x64, 0x68, 0x63, 0x70, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x97, 0x01, 0x0a, 0x14, 0x64, 0x68,
	0x63, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x18, 0xd7, 0xd5, 0xfb, 0x5f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x4d, 0x82, 0x41, 0x4a, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x2d,
	0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x52,
	0x12, 0x64, 0x68, 0x63, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x12, 0x85, 0x01, 0x0a, 0x0e, 0x64, 0x68, 0x63, 0x70, 0x5f, 0x6e, 0x61, 0x63,
	0x6b, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x8a, 0x8b, 0xa3, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x47, 0x82, 0x41, 0x44, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x64,
	0x68, 0x63, 0x70, 0x2d, 0x6e, 0x61, 0x63, 0x6b, 0x2d, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x64,
	0x68, 0x63, 0x70, 0x4e, 0x61, 0x63, 0x6b, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x88, 0x01, 0x0a, 0x0f,
	0x64, 0x68, 0x63, 0x70, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18,
	0xff, 0xca, 0xf8, 0x54, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x48, 0x82,
	0x41, 0x45, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64,
	0x68, 0x63, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x2d, 0x6f, 0x66, 0x66,
	0x65, 0x72, 0x2d, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x64, 0x68, 0x63, 0x70, 0x4f, 0x66, 0x66,
	0x65, 0x72, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x9b, 0x01, 0x0a, 0x15, 0x64, 0x68, 0x63, 0x70, 0x5f,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x18, 0xbb, 0xc7, 0xd0, 0xf6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x2f, 0x64, 0x68, 0x63, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x2d, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x52,
	0x13, 0x64, 0x68, 0x63, 0x70, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x12, 0x9a, 0x01, 0x0a, 0x15, 0x64, 0x68, 0x63, 0x70, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x97,
	0xdd, 0xd9, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4e, 0x82, 0x41,
	0x4b, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68,
	0x63, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x2d, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x52, 0x13, 0x64, 0x68,
	0x63, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x12, 0x87, 0x01, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6f, 0x70,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0xc8, 0x9a, 0xa8, 0xe1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x47, 0x82, 0x41, 0x44, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d, 0x6f, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x0d, 0x69, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x4f, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x89, 0x01, 0x0a, 0x0f,
	0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0xe8, 0x96, 0xcd, 0x56, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x48, 0x82,
	0x41, 0x45, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64,
	0x68, 0x63, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x84, 0x01, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x18, 0x8b, 0xbd, 0xf8, 0xbf, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x72, 0x65,
	0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x2f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2d, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64,
	0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x1a, 0x9c,
	0x01, 0x0a, 0x0c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12,
	0x3c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0x82, 0x41, 0x29,
	0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63,
	0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4e, 0x0a,
	0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65,
	0x6c, 0x61, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x1a, 0x7d, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x74, 0x0a, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0xce, 0xbc, 0x9f,
	0xba, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2d, 0x82, 0x41, 0x2a,
	0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63,
	0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x72,
	0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x1a, 0xc5, 0x40, 0x0a,
	0x06, 0x44, 0x68, 0x63, 0x70, 0x76, 0x36, 0x12, 0x5f, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0xc3, 0xc8, 0x8e, 0xf5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x1d, 0x82, 0x41, 0x1a, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6f, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0xb9, 0xba, 0xe5, 0xc5, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65,
	0x6c, 0x61, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x42, 0x21, 0x82, 0x41, 0x1e, 0x2f,
	0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70,
	0x76, 0x36, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x52, 0x0a, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x62, 0x0a, 0x07, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0xf5, 0xd6, 0xcd, 0x60, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x42, 0x1e, 0x82, 0x41, 0x1b, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5a, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xa4, 0x83, 0x90, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x6c,
	0x61, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x1c, 0x82, 0x41, 0x19, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x80, 0x01, 0x0a, 0x06, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x76, 0x0a, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72,
	0x65, 0x6c, 0x61, 0x79, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x93, 0x83, 0xb6, 0x31, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x30, 0x82, 0x41, 0x2d, 0x2f, 0x72, 0x65,
	0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x72,
	0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x1a, 0xaa, 0x35, 0x0a,
	0x0a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x83, 0x01, 0x0a, 0x09,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0xe5, 0x81, 0x9d, 0x7a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x52, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x76,
	0x36, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x42, 0x2b, 0x82, 0x41, 0x28, 0x2f, 0x72,
	0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x76,
	0x36, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x1a, 0xf2, 0x32, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12,
	0x88, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xaa, 0xbd, 0xd8, 0x17, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x68, 0x63, 0x70,
	0x76, 0x36, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x32,
	0x82, 0x41, 0x2f, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f,
	0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xa2, 0x01, 0x0a, 0x0d, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x81, 0x83, 0xc2,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x68,
	0x63, 0x70, 0x76, 0x36, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x72, 0x65, 0x6c, 0x61,
	0x79, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65,
	0x66, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x12,
	0x8d, 0x01, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xba, 0xaa, 0xec, 0xb9,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x68,
	0x63, 0x70, 0x76, 0x36, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x42, 0x33, 0x82, 0x41, 0x30, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x85, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xc7, 0xcf, 0xe5, 0x85, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x68, 0x63, 0x70,
	0x76, 0x36, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x31, 0x82,
	0x41, 0x2e, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64,
	0x68, 0x63, 0x70, 0x76, 0x36, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xda, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x6a, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0xe4, 0xab, 0x9a,
	0xa3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x39, 0x82, 0x41, 0x36,
	0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63,
	0x70, 0x76, 0x36, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x82,
	0x01, 0x0a, 0x0e, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0xa2, 0x9c, 0xc5, 0x6d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x2d, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x0d, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x5f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x9a, 0xd9, 0xdc, 0x3b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x72,
	0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x76,
	0x36, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x64,
	0x52, 0x02, 0x69, 0x64, 0x1a, 0x8e, 0x07, 0x0a, 0x0c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x52, 0x65, 0x66, 0x12, 0xa4, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x86, 0xc0, 0xac, 0xd0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x66, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x9f, 0x01, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xf3, 0xb1, 0xb6, 0x5c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x45, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x6c,
	0x61, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x3f, 0x82, 0x41, 0x3c, 0x2f, 0x72, 0x65, 0x6c, 0x61,
	0x79, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65,
	0x66, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x99,
	0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x82, 0x01, 0x0a, 0x09, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0xf2, 0xb1, 0xbd, 0x6f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4a, 0x82, 0x41, 0x47, 0x2f, 0x72, 0x65, 0x6c,
	0x61, 0x79, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x72,
	0x65, 0x66, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x89,
	0x01, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18,
	0xee, 0xaf, 0xce, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4d, 0x82,
	0x41, 0x4a, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64,
	0x68, 0x63, 0x70, 0x76, 0x36, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x66, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x0c, 0x73, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x1a, 0x98, 0x02, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x18, 0xd3, 0xe2, 0x8c, 0x8d, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x49, 0x82, 0x41, 0x46, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x66, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x09,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x89, 0x01, 0x0a, 0x0c, 0x73, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0xc1, 0xb8, 0xdb, 0xf6, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4c, 0x82, 0x41, 0x49, 0x2f, 0x72,
	0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x76,
	0x36, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2d, 0x72, 0x65, 0x66, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x1a, 0xca, 0x0d, 0x0a, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x99, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xab, 0xe4, 0x9f,
	0xf2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x44,
	0x68, 0x63, 0x70, 0x76, 0x36, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x3a, 0x82, 0x41, 0x37, 0x2f, 0x72,
	0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x76,
	0x36, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x94, 0x01,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xec, 0xa5, 0x86, 0x6e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x40, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65,
	0x6c, 0x61, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x1a, 0xb5, 0x04, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x96, 0x01, 0x0a, 0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0xd9, 0x92, 0xf1, 0x26, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79,
	0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2d, 0x69, 0x64, 0x52, 0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x8d, 0x01, 0x0a, 0x10, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0xe0, 0xf9,
	0xbe, 0x7a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4b, 0x82, 0x41, 0x48,
	0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63,
	0x70, 0x76, 0x36, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x69, 0x64, 0x52, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x84, 0x01, 0x0a, 0x0c, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x93, 0xc9, 0xa0, 0x38, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x47, 0x82, 0x41, 0x44, 0x2f, 0x72,
	0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x76,
	0x36, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d,
	0x69, 0x64, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x7b, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0xae, 0xb1, 0xd8,
	0x5b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x44, 0x82, 0x41,
	0x41, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68,
	0x63, 0x70, 0x76, 0x36, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d,
	0x69, 0x64, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x1a, 0xd3, 0x06, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x96, 0x01, 0x0a, 0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0xfe,
	0xf0, 0x94, 0xcd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4d, 0x82,
	0x41, 0x4a, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64,
	0x68, 0x63, 0x70, 0x76, 0x36, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2d,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x69, 0x64, 0x52, 0x11, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x8d, 0x01, 0x0a, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x9d, 0x8e, 0xa8, 0x96, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x4a, 0x82, 0x41, 0x47, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x69, 0x64, 0x52,
	0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12,
	0x83, 0x01, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0xba, 0xd5, 0x8b, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x69, 0x64, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x7a, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0xf1, 0xe8, 0xb6, 0x57, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x43, 0x82, 0x41, 0x40, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x69, 0x64, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49,
	0x64, 0x12, 0x92, 0x01, 0x0a, 0x11, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0xb3, 0xb4, 0xa7, 0xf0, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4b, 0x82, 0x41, 0x48, 0x2f, 0x72, 0x65,
	0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x73, 0x65, 0x6e, 0x74, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2d, 0x69, 0x64, 0x52, 0x0f, 0x73, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x89, 0x01, 0x0a, 0x0e, 0x73, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0xce, 0xcf, 0x97, 0xc7, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x48, 0x82, 0x41, 0x45, 0x2f,
	0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70,
	0x76, 0x36, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x65, 0x6e, 0x74, 0x2d, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2d, 0x69, 0x64, 0x52, 0x0c, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x49, 0x64, 0x1a, 0xe1, 0x16, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x9c, 0x01, 0x0a,
	0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0xfd, 0xde, 0xfc, 0x57, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x52, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x76,
	0x36, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x42, 0x3a, 0x82, 0x41, 0x37, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79,
	0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x69, 0x0a, 0x06, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0xef, 0xbd, 0xe5, 0xcb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x38, 0x82, 0x41, 0x35, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x06,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x0e, 0x68, 0x65, 0x6c, 0x70, 0x65,
	0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xd1, 0xd8, 0xa0, 0x87, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f,
	0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70,
	0x76, 0x36, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x68, 0x65,
	0x6c, 0x70, 0x65, 0x72, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0d, 0x68, 0x65,
	0x6c, 0x70, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x5f, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0xf1, 0x80, 0x9c, 0x80, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x34, 0x82, 0x41, 0x31, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x1a, 0xe7, 0x12, 0x0a,
	0x08, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0xa0, 0x01, 0x0a, 0x16, 0x64, 0x68,
	0x63, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x73, 0x74, 0x69, 0x73, 0x65, 0x5f,
	0x73, 0x65, 0x6e, 0x74, 0x18, 0x99, 0xc0, 0xca, 0xc1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x51, 0x82, 0x41, 0x4e, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f,
	0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2d, 0x61, 0x64, 0x76, 0x65, 0x72, 0x73, 0x74, 0x69, 0x73,
	0x65, 0x2d, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x14, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x41, 0x64,
	0x76, 0x65, 0x72, 0x73, 0x74, 0x69, 0x73, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x12, 0xa2, 0x01, 0x0a,
	0x17, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0xba, 0xd0, 0xc7, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x52, 0x82, 0x41, 0x4f, 0x2f, 0x72, 0x65, 0x6c, 0x61,
	0x79, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x2d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x52, 0x15, 0x64, 0x68, 0x63, 0x70,
	0x76, 0x36, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x12, 0xa2, 0x01, 0x0a, 0x17, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x5f, 0x64, 0x65, 0x63,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0xf4, 0x87,
	0xa1, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x52, 0x82, 0x41, 0x4f,
	0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63,
	0x70, 0x76, 0x36, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2d, 0x64,
	0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x52,
	0x15, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x44, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0xb0, 0x01, 0x0a, 0x1c, 0x64, 0x68, 0x63, 0x70, 0x76,
	0x36, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0xfa, 0xaf, 0xe8, 0x64, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x57, 0x82, 0x41, 0x54, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79,
	0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2d, 0x69, 0x6e, 0x66, 0x6f, 0x2d, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x52, 0x19,
	0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x9f, 0x01, 0x0a, 0x16, 0x64, 0x68,
	0x63, 0x70, 0x76, 0x36, 0x5f, 0x72, 0x65, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x18, 0xb4, 0xa3, 0xd9, 0x75, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x51, 0x82, 0x41, 0x4e, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x64,
	0x68, 0x63, 0x70, 0x76, 0x36, 0x2d, 0x72, 0x65, 0x62, 0x69, 0x6e, 0x64, 0x2d, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x52, 0x14, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x52, 0x65, 0x62,
	0x69, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0xa2, 0x01, 0x0a, 0x17,
	0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0xea, 0x98, 0xfd, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x52, 0x82, 0x41, 0x4f, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79,
	0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2d, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x65, 0x2d, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x15, 0x64, 0x68, 0x63, 0x70, 0x76,
	0x36, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x53, 0x65, 0x6e, 0x74,
	0x12, 0x9f, 0x01, 0x0a, 0x16, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x5f, 0x72, 0x65, 0x6c, 0x61,
	0x79, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x81, 0x9e, 0xba, 0x8f,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x51, 0x82, 0x41, 0x4e, 0x2f,
	0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70,
	0x76, 0x36, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2d, 0x72, 0x65,
	0x6c, 0x61, 0x79, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x2d, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x13, 0x64,
	0x68, 0x63, 0x70, 0x76, 0x36, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x46, 0x6f, 0x72, 0x77, 0x53, 0x65,
	0x6e, 0x74, 0x12, 0xad, 0x01, 0x0a, 0x1b, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x5f, 0x72, 0x65,
	0x6c, 0x61, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x18, 0xbe, 0xb8, 0x8e, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x56, 0x82, 0x41, 0x53, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x64, 0x68, 0x63,
	0x70, 0x76, 0x36, 0x2d, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x2d,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x52, 0x18, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36,
	0x52, 0x65, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x12, 0xa2, 0x01, 0x0a, 0x17, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x5f, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0xaf,
	0x9c, 0xaf, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x52, 0x82, 0x41,
	0x4f, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68,
	0x63, 0x70, 0x76, 0x36, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2d,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x52, 0x15, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x90, 0x01, 0x0a, 0x11, 0x64, 0x68, 0x63, 0x70,
	0x76, 0x36, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0xdd, 0x8a,
	0x87, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4c, 0x82, 0x41, 0x49,
	0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63,
	0x70, 0x76, 0x36, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2d, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x2d, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x64, 0x68, 0x63, 0x70, 0x76,
	0x36, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x53, 0x65, 0x6e, 0x74, 0x12, 0xa2, 0x01, 0x0a, 0x17, 0x64,
	0x68, 0x63, 0x70, 0x76, 0x36, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0xcb, 0x93, 0x9f, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x52, 0x82, 0x41, 0x4f, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x2f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2d,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x52, 0x15, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12,
	0xa3, 0x01, 0x0a, 0x17, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x5f, 0x73, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0xc5, 0x84, 0x9d, 0xd0,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x52, 0x82, 0x41, 0x4f, 0x2f,
	0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70,
	0x76, 0x36, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x2d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x52, 0x15,
	0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x53, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x88, 0x01, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x5f, 0x6f, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x84, 0x9e, 0xf7, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x49, 0x82, 0x41, 0x46, 0x2f, 0x72, 0x65, 0x6c, 0x61,
	0x79, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x2f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d, 0x6f, 0x70, 0x63, 0x6f, 0x64,
	0x65, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4f, 0x70, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x8b, 0x01, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0xfc, 0xe1, 0x83, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x4a, 0x82, 0x41, 0x47, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0e,
	0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x85,
	0x01, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64,
	0x18, 0xef, 0xfb, 0x8b, 0x51, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x48,
	0x82, 0x41, 0x45, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f,
	0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x2d, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44,
	0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x1a, 0xa0, 0x01, 0x0a, 0x0c, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x3e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2e, 0x82, 0x41, 0x2b, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x50, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x09,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x1a, 0xf8, 0x05, 0x0a, 0x07, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x6f, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x9a, 0x9a, 0xb0, 0xae, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x25, 0x82, 0x41, 0x22, 0x2f, 0x72, 0x65, 0x6c,
	0x61, 0x79, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0xb7, 0x81, 0xaf, 0x76, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x44, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x24, 0x82, 0x41, 0x21, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79,
	0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x1a, 0x88, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x82, 0x01,
	0x0a, 0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0xa8, 0xde, 0xa8, 0xb8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x69, 0x64, 0x52,
	0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x79, 0x0a, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0xfb, 0x89, 0xde, 0xe2, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x36, 0x82, 0x41, 0x33, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79,
	0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x2d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x69, 0x64, 0x52, 0x0e, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x1a, 0x84, 0x02,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x13, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0xdd, 0xe8, 0xcf, 0xa8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x38,
	0x82, 0x41, 0x35, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f,
	0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x69, 0x64, 0x52, 0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x77, 0x0a, 0x10, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x9c, 0xc0, 0xbb, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x35, 0x82,
	0x41, 0x32, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64,
	0x68, 0x63, 0x70, 0x76, 0x36, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2d, 0x69, 0x64, 0x52, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x49, 0x64, 0x1a, 0x7e, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x75, 0x0a,
	0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x18, 0xe2, 0xa8, 0x80, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x2f, 0x82, 0x41, 0x2c, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x52, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x42, 0x17, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x6f, 0x63, 0x73,
	0x79, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_openconfig_relay_agent_proto_rawDescOnce sync.Once
	file_openconfig_relay_agent_proto_rawDescData = file_openconfig_relay_agent_proto_rawDesc
)

func file_openconfig_relay_agent_proto_rawDescGZIP() []byte {
	file_openconfig_relay_agent_proto_rawDescOnce.Do(func() {
		file_openconfig_relay_agent_proto_rawDescData = protoimpl.X.CompressGZIP(file_openconfig_relay_agent_proto_rawDescData)
	})
	return file_openconfig_relay_agent_proto_rawDescData
}

var file_openconfig_relay_agent_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_openconfig_relay_agent_proto_goTypes = []interface{}{
	(*RelayAgent)(nil),                                                         // 0: openconfig.RelayAgent
	(*RelayAgent_Dhcp)(nil),                                                    // 1: openconfig.RelayAgent.Dhcp
	(*RelayAgent_Dhcpv6)(nil),                                                  // 2: openconfig.RelayAgent.Dhcpv6
	(*RelayAgent_Dhcp_AgentInformationOption)(nil),                             // 3: openconfig.RelayAgent.Dhcp.AgentInformationOption
	(*RelayAgent_Dhcp_Config)(nil),                                             // 4: openconfig.RelayAgent.Dhcp.Config
	(*RelayAgent_Dhcp_Interfaces)(nil),                                         // 5: openconfig.RelayAgent.Dhcp.Interfaces
	(*RelayAgent_Dhcp_State)(nil),                                              // 6: openconfig.RelayAgent.Dhcp.State
	(*RelayAgent_Dhcp_AgentInformationOption_Config)(nil),                      // 7: openconfig.RelayAgent.Dhcp.AgentInformationOption.Config
	(*RelayAgent_Dhcp_AgentInformationOption_State)(nil),                       // 8: openconfig.RelayAgent.Dhcp.AgentInformationOption.State
	(*RelayAgent_Dhcp_Interfaces_Interface)(nil),                               // 9: openconfig.RelayAgent.Dhcp.Interfaces.Interface
	(*RelayAgent_Dhcp_Interfaces_InterfaceKey)(nil),                            // 10: openconfig.RelayAgent.Dhcp.Interfaces.InterfaceKey
	(*RelayAgent_Dhcp_Interfaces_Interface_AgentInformationOption)(nil),        // 11: openconfig.RelayAgent.Dhcp.Interfaces.Interface.AgentInformationOption
	(*RelayAgent_Dhcp_Interfaces_Interface_Config)(nil),                        // 12: openconfig.RelayAgent.Dhcp.Interfaces.Interface.Config
	(*RelayAgent_Dhcp_Interfaces_Interface_InterfaceRef)(nil),                  // 13: openconfig.RelayAgent.Dhcp.Interfaces.Interface.InterfaceRef
	(*RelayAgent_Dhcp_Interfaces_Interface_State)(nil),                         // 14: openconfig.RelayAgent.Dhcp.Interfaces.Interface.State
	(*RelayAgent_Dhcp_Interfaces_Interface_AgentInformationOption_Config)(nil), // 15: openconfig.RelayAgent.Dhcp.Interfaces.Interface.AgentInformationOption.Config
	(*RelayAgent_Dhcp_Interfaces_Interface_AgentInformationOption_State)(nil),  // 16: openconfig.RelayAgent.Dhcp.Interfaces.Interface.AgentInformationOption.State
	(*RelayAgent_Dhcp_Interfaces_Interface_InterfaceRef_Config)(nil),           // 17: openconfig.RelayAgent.Dhcp.Interfaces.Interface.InterfaceRef.Config
	(*RelayAgent_Dhcp_Interfaces_Interface_InterfaceRef_State)(nil),            // 18: openconfig.RelayAgent.Dhcp.Interfaces.Interface.InterfaceRef.State
	(*RelayAgent_Dhcp_Interfaces_Interface_State_Counters)(nil),                // 19: openconfig.RelayAgent.Dhcp.Interfaces.Interface.State.Counters
	(*RelayAgent_Dhcpv6_Config)(nil),                                           // 20: openconfig.RelayAgent.Dhcpv6.Config
	(*RelayAgent_Dhcpv6_Interfaces)(nil),                                       // 21: openconfig.RelayAgent.Dhcpv6.Interfaces
	(*RelayAgent_Dhcpv6_Options)(nil),                                          // 22: openconfig.RelayAgent.Dhcpv6.Options
	(*RelayAgent_Dhcpv6_State)(nil),                                            // 23: openconfig.RelayAgent.Dhcpv6.State
	(*RelayAgent_Dhcpv6_Interfaces_Interface)(nil),                             // 24: openconfig.RelayAgent.Dhcpv6.Interfaces.Interface
	(*RelayAgent_Dhcpv6_Interfaces_InterfaceKey)(nil),                          // 25: openconfig.RelayAgent.Dhcpv6.Interfaces.InterfaceKey
	(*RelayAgent_Dhcpv6_Interfaces_Interface_Config)(nil),                      // 26: openconfig.RelayAgent.Dhcpv6.Interfaces.Interface.Config
	(*RelayAgent_Dhcpv6_Interfaces_Interface_InterfaceRef)(nil),                // 27: openconfig.RelayAgent.Dhcpv6.Interfaces.Interface.InterfaceRef
	(*RelayAgent_Dhcpv6_Interfaces_Interface_Options)(nil),                     // 28: openconfig.RelayAgent.Dhcpv6.Interfaces.Interface.Options
	(*RelayAgent_Dhcpv6_Interfaces_Interface_State)(nil),                       // 29: openconfig.RelayAgent.Dhcpv6.Interfaces.Interface.State
	(*RelayAgent_Dhcpv6_Interfaces_Interface_InterfaceRef_Config)(nil),         // 30: openconfig.RelayAgent.Dhcpv6.Interfaces.Interface.InterfaceRef.Config
	(*RelayAgent_Dhcpv6_Interfaces_Interface_InterfaceRef_State)(nil),          // 31: openconfig.RelayAgent.Dhcpv6.Interfaces.Interface.InterfaceRef.State
	(*RelayAgent_Dhcpv6_Interfaces_Interface_Options_Config)(nil),              // 32: openconfig.RelayAgent.Dhcpv6.Interfaces.Interface.Options.Config
	(*RelayAgent_Dhcpv6_Interfaces_Interface_Options_State)(nil),               // 33: openconfig.RelayAgent.Dhcpv6.Interfaces.Interface.Options.State
	(*RelayAgent_Dhcpv6_Interfaces_Interface_State_Counters)(nil),              // 34: openconfig.RelayAgent.Dhcpv6.Interfaces.Interface.State.Counters
	(*RelayAgent_Dhcpv6_Options_Config)(nil),                                   // 35: openconfig.RelayAgent.Dhcpv6.Options.Config
	(*RelayAgent_Dhcpv6_Options_State)(nil),                                    // 36: openconfig.RelayAgent.Dhcpv6.Options.State
	(*ywrapper.BoolValue)(nil),                                                 // 37: ywrapper.BoolValue
	(*ywrapper.StringValue)(nil),                                               // 38: ywrapper.StringValue
	(*ywrapper.UintValue)(nil),                                                 // 39: ywrapper.UintValue
}
var file_openconfig_relay_agent_proto_depIdxs = []int32{
	1,   // 0: openconfig.RelayAgent.dhcp:type_name -> openconfig.RelayAgent.Dhcp
	2,   // 1: openconfig.RelayAgent.dhcpv6:type_name -> openconfig.RelayAgent.Dhcpv6
	3,   // 2: openconfig.RelayAgent.Dhcp.agent_information_option:type_name -> openconfig.RelayAgent.Dhcp.AgentInformationOption
	4,   // 3: openconfig.RelayAgent.Dhcp.config:type_name -> openconfig.RelayAgent.Dhcp.Config
	5,   // 4: openconfig.RelayAgent.Dhcp.interfaces:type_name -> openconfig.RelayAgent.Dhcp.Interfaces
	6,   // 5: openconfig.RelayAgent.Dhcp.state:type_name -> openconfig.RelayAgent.Dhcp.State
	20,  // 6: openconfig.RelayAgent.Dhcpv6.config:type_name -> openconfig.RelayAgent.Dhcpv6.Config
	21,  // 7: openconfig.RelayAgent.Dhcpv6.interfaces:type_name -> openconfig.RelayAgent.Dhcpv6.Interfaces
	22,  // 8: openconfig.RelayAgent.Dhcpv6.options:type_name -> openconfig.RelayAgent.Dhcpv6.Options
	23,  // 9: openconfig.RelayAgent.Dhcpv6.state:type_name -> openconfig.RelayAgent.Dhcpv6.State
	7,   // 10: openconfig.RelayAgent.Dhcp.AgentInformationOption.config:type_name -> openconfig.RelayAgent.Dhcp.AgentInformationOption.Config
	8,   // 11: openconfig.RelayAgent.Dhcp.AgentInformationOption.state:type_name -> openconfig.RelayAgent.Dhcp.AgentInformationOption.State
	37,  // 12: openconfig.RelayAgent.Dhcp.Config.enable_relay_agent:type_name -> ywrapper.BoolValue
	10,  // 13: openconfig.RelayAgent.Dhcp.Interfaces.interface:type_name -> openconfig.RelayAgent.Dhcp.Interfaces.InterfaceKey
	37,  // 14: openconfig.RelayAgent.Dhcp.State.enable_relay_agent:type_name -> ywrapper.BoolValue
	37,  // 15: openconfig.RelayAgent.Dhcp.AgentInformationOption.Config.enable:type_name -> ywrapper.BoolValue
	37,  // 16: openconfig.RelayAgent.Dhcp.AgentInformationOption.State.enable:type_name -> ywrapper.BoolValue
	11,  // 17: openconfig.RelayAgent.Dhcp.Interfaces.Interface.agent_information_option:type_name -> openconfig.RelayAgent.Dhcp.Interfaces.Interface.AgentInformationOption
	12,  // 18: openconfig.RelayAgent.Dhcp.Interfaces.Interface.config:type_name -> openconfig.RelayAgent.Dhcp.Interfaces.Interface.Config
	13,  // 19: openconfig.RelayAgent.Dhcp.Interfaces.Interface.interface_ref:type_name -> openconfig.RelayAgent.Dhcp.Interfaces.Interface.InterfaceRef
	14,  // 20: openconfig.RelayAgent.Dhcp.Interfaces.Interface.state:type_name -> openconfig.RelayAgent.Dhcp.Interfaces.Interface.State
	9,   // 21: openconfig.RelayAgent.Dhcp.Interfaces.InterfaceKey.interface:type_name -> openconfig.RelayAgent.Dhcp.Interfaces.Interface
	15,  // 22: openconfig.RelayAgent.Dhcp.Interfaces.Interface.AgentInformationOption.config:type_name -> openconfig.RelayAgent.Dhcp.Interfaces.Interface.AgentInformationOption.Config
	16,  // 23: openconfig.RelayAgent.Dhcp.Interfaces.Interface.AgentInformationOption.state:type_name -> openconfig.RelayAgent.Dhcp.Interfaces.Interface.AgentInformationOption.State
	37,  // 24: openconfig.RelayAgent.Dhcp.Interfaces.Interface.Config.enable:type_name -> ywrapper.BoolValue
	38,  // 25: openconfig.RelayAgent.Dhcp.Interfaces.Interface.Config.helper_address:type_name -> ywrapper.StringValue
	38,  // 26: openconfig.RelayAgent.Dhcp.Interfaces.Interface.Config.id:type_name -> ywrapper.StringValue
	17,  // 27: openconfig.RelayAgent.Dhcp.Interfaces.Interface.InterfaceRef.config:type_name -> openconfig.RelayAgent.Dhcp.Interfaces.Interface.InterfaceRef.Config
	18,  // 28: openconfig.RelayAgent.Dhcp.Interfaces.Interface.InterfaceRef.state:type_name -> openconfig.RelayAgent.Dhcp.Interfaces.Interface.InterfaceRef.State
	19,  // 29: openconfig.RelayAgent.Dhcp.Interfaces.Interface.State.counters:type_name -> openconfig.RelayAgent.Dhcp.Interfaces.Interface.State.Counters
	37,  // 30: openconfig.RelayAgent.Dhcp.Interfaces.Interface.State.enable:type_name -> ywrapper.BoolValue
	38,  // 31: openconfig.RelayAgent.Dhcp.Interfaces.Interface.State.helper_address:type_name -> ywrapper.StringValue
	38,  // 32: openconfig.RelayAgent.Dhcp.Interfaces.Interface.State.id:type_name -> ywrapper.StringValue
	38,  // 33: openconfig.RelayAgent.Dhcp.Interfaces.Interface.AgentInformationOption.Config.circuit_id:type_name -> ywrapper.StringValue
	37,  // 34: openconfig.RelayAgent.Dhcp.Interfaces.Interface.AgentInformationOption.Config.enable:type_name -> ywrapper.BoolValue
	38,  // 35: openconfig.RelayAgent.Dhcp.Interfaces.Interface.AgentInformationOption.Config.remote_id:type_name -> ywrapper.StringValue
	38,  // 36: openconfig.RelayAgent.Dhcp.Interfaces.Interface.AgentInformationOption.State.circuit_id:type_name -> ywrapper.StringValue
	37,  // 37: openconfig.RelayAgent.Dhcp.Interfaces.Interface.AgentInformationOption.State.enable:type_name -> ywrapper.BoolValue
	38,  // 38: openconfig.RelayAgent.Dhcp.Interfaces.Interface.AgentInformationOption.State.remote_id:type_name -> ywrapper.StringValue
	38,  // 39: openconfig.RelayAgent.Dhcp.Interfaces.Interface.AgentInformationOption.State.sent_circuit_id:type_name -> ywrapper.StringValue
	38,  // 40: openconfig.RelayAgent.Dhcp.Interfaces.Interface.AgentInformationOption.State.sent_remote_id:type_name -> ywrapper.StringValue
	38,  // 41: openconfig.RelayAgent.Dhcp.Interfaces.Interface.InterfaceRef.Config.interface:type_name -> ywrapper.StringValue
	39,  // 42: openconfig.RelayAgent.Dhcp.Interfaces.Interface.InterfaceRef.Config.subinterface:type_name -> ywrapper.UintValue
	38,  // 43: openconfig.RelayAgent.Dhcp.Interfaces.Interface.InterfaceRef.State.interface:type_name -> ywrapper.StringValue
	39,  // 44: openconfig.RelayAgent.Dhcp.Interfaces.Interface.InterfaceRef.State.subinterface:type_name -> ywrapper.UintValue
	39,  // 45: openconfig.RelayAgent.Dhcp.Interfaces.Interface.State.Counters.bootreply_sent:type_name -> ywrapper.UintValue
	39,  // 46: openconfig.RelayAgent.Dhcp.Interfaces.Interface.State.Counters.bootrequest_received:type_name -> ywrapper.UintValue
	39,  // 47: openconfig.RelayAgent.Dhcp.Interfaces.Interface.State.Counters.bootrequest_sent:type_name -> ywrapper.UintValue
	39,  // 48: openconfig.RelayAgent.Dhcp.Interfaces.Interface.State.Counters.dhcp_ack_sent:type_name -> ywrapper.UintValue
	39,  // 49: openconfig.RelayAgent.Dhcp.Interfaces.Interface.State.Counters.dhcp_decline_received:type_name -> ywrapper.UintValue
	39,  // 50: openconfig.RelayAgent.Dhcp.Interfaces.Interface.State.Counters.dhcp_discover_received:type_name -> ywrapper.UintValue
	39,  // 51: openconfig.RelayAgent.Dhcp.Interfaces.Interface.State.Counters.dhcp_inform_received:type_name -> ywrapper.UintValue
	39,  // 52: openconfig.RelayAgent.Dhcp.Interfaces.Interface.State.Counters.dhcp_nack_sent:type_name -> ywrapper.UintValue
	39,  // 53: openconfig.RelayAgent.Dhcp.Interfaces.Interface.State.Counters.dhcp_offer_sent:type_name -> ywrapper.UintValue
	39,  // 54: openconfig.RelayAgent.Dhcp.Interfaces.Interface.State.Counters.dhcp_release_received:type_name -> ywrapper.UintValue
	39,  // 55: openconfig.RelayAgent.Dhcp.Interfaces.Interface.State.Counters.dhcp_request_received:type_name -> ywrapper.UintValue
	39,  // 56: openconfig.RelayAgent.Dhcp.Interfaces.Interface.State.Counters.invalid_opcode:type_name -> ywrapper.UintValue
	39,  // 57: openconfig.RelayAgent.Dhcp.Interfaces.Interface.State.Counters.invalid_options:type_name -> ywrapper.UintValue
	39,  // 58: openconfig.RelayAgent.Dhcp.Interfaces.Interface.State.Counters.total_dropped:type_name -> ywrapper.UintValue
	37,  // 59: openconfig.RelayAgent.Dhcpv6.Config.enable_relay_agent:type_name -> ywrapper.BoolValue
	25,  // 60: openconfig.RelayAgent.Dhcpv6.Interfaces.interface:type_name -> openconfig.RelayAgent.Dhcpv6.Interfaces.InterfaceKey
	35,  // 61: openconfig.RelayAgent.Dhcpv6.Options.config:type_name -> openconfig.RelayAgent.Dhcpv6.Options.Config
	36,  // 62: openconfig.RelayAgent.Dhcpv6.Options.state:type_name -> openconfig.RelayAgent.Dhcpv6.Options.State
	37,  // 63: openconfig.RelayAgent.Dhcpv6.State.enable_relay_agent:type_name -> ywrapper.BoolValue
	26,  // 64: openconfig.RelayAgent.Dhcpv6.Interfaces.Interface.config:type_name -> openconfig.RelayAgent.Dhcpv6.Interfaces.Interface.Config
	27,  // 65: openconfig.RelayAgent.Dhcpv6.Interfaces.Interface.interface_ref:type_name -> openconfig.RelayAgent.Dhcpv6.Interfaces.Interface.InterfaceRef
	28,  // 66: openconfig.RelayAgent.Dhcpv6.Interfaces.Interface.options:type_name -> openconfig.RelayAgent.Dhcpv6.Interfaces.Interface.Options
	29,  // 67: openconfig.RelayAgent.Dhcpv6.Interfaces.Interface.state:type_name -> openconfig.RelayAgent.Dhcpv6.Interfaces.Interface.State
	24,  // 68: openconfig.RelayAgent.Dhcpv6.Interfaces.InterfaceKey.interface:type_name -> openconfig.RelayAgent.Dhcpv6.Interfaces.Interface
	37,  // 69: openconfig.RelayAgent.Dhcpv6.Interfaces.Interface.Config.enable:type_name -> ywrapper.BoolValue
	38,  // 70: openconfig.RelayAgent.Dhcpv6.Interfaces.Interface.Config.helper_address:type_name -> ywrapper.StringValue
	38,  // 71: openconfig.RelayAgent.Dhcpv6.Interfaces.Interface.Config.id:type_name -> ywrapper.StringValue
	30,  // 72: openconfig.RelayAgent.Dhcpv6.Interfaces.Interface.InterfaceRef.config:type_name -> openconfig.RelayAgent.Dhcpv6.Interfaces.Interface.InterfaceRef.Config
	31,  // 73: openconfig.RelayAgent.Dhcpv6.Interfaces.Interface.InterfaceRef.state:type_name -> openconfig.RelayAgent.Dhcpv6.Interfaces.Interface.InterfaceRef.State
	32,  // 74: openconfig.RelayAgent.Dhcpv6.Interfaces.Interface.Options.config:type_name -> openconfig.RelayAgent.Dhcpv6.Interfaces.Interface.Options.Config
	33,  // 75: openconfig.RelayAgent.Dhcpv6.Interfaces.Interface.Options.state:type_name -> openconfig.RelayAgent.Dhcpv6.Interfaces.Interface.Options.State
	34,  // 76: openconfig.RelayAgent.Dhcpv6.Interfaces.Interface.State.counters:type_name -> openconfig.RelayAgent.Dhcpv6.Interfaces.Interface.State.Counters
	37,  // 77: openconfig.RelayAgent.Dhcpv6.Interfaces.Interface.State.enable:type_name -> ywrapper.BoolValue
	38,  // 78: openconfig.RelayAgent.Dhcpv6.Interfaces.Interface.State.helper_address:type_name -> ywrapper.StringValue
	38,  // 79: openconfig.RelayAgent.Dhcpv6.Interfaces.Interface.State.id:type_name -> ywrapper.StringValue
	38,  // 80: openconfig.RelayAgent.Dhcpv6.Interfaces.Interface.InterfaceRef.Config.interface:type_name -> ywrapper.StringValue
	39,  // 81: openconfig.RelayAgent.Dhcpv6.Interfaces.Interface.InterfaceRef.Config.subinterface:type_name -> ywrapper.UintValue
	38,  // 82: openconfig.RelayAgent.Dhcpv6.Interfaces.Interface.InterfaceRef.State.interface:type_name -> ywrapper.StringValue
	39,  // 83: openconfig.RelayAgent.Dhcpv6.Interfaces.Interface.InterfaceRef.State.subinterface:type_name -> ywrapper.UintValue
	37,  // 84: openconfig.RelayAgent.Dhcpv6.Interfaces.Interface.Options.Config.enable_interface_id:type_name -> ywrapper.BoolValue
	37,  // 85: openconfig.RelayAgent.Dhcpv6.Interfaces.Interface.Options.Config.enable_remote_id:type_name -> ywrapper.BoolValue
	38,  // 86: openconfig.RelayAgent.Dhcpv6.Interfaces.Interface.Options.Config.interface_id:type_name -> ywrapper.StringValue
	38,  // 87: openconfig.RelayAgent.Dhcpv6.Interfaces.Interface.Options.Config.remote_id:type_name -> ywrapper.StringValue
	37,  // 88: openconfig.RelayAgent.Dhcpv6.Interfaces.Interface.Options.State.enable_interface_id:type_name -> ywrapper.BoolValue
	37,  // 89: openconfig.RelayAgent.Dhcpv6.Interfaces.Interface.Options.State.enable_remote_id:type_name -> ywrapper.BoolValue
	38,  // 90: openconfig.RelayAgent.Dhcpv6.Interfaces.Interface.Options.State.interface_id:type_name -> ywrapper.StringValue
	38,  // 91: openconfig.RelayAgent.Dhcpv6.Interfaces.Interface.Options.State.remote_id:type_name -> ywrapper.StringValue
	38,  // 92: openconfig.RelayAgent.Dhcpv6.Interfaces.Interface.Options.State.sent_interface_id:type_name -> ywrapper.StringValue
	38,  // 93: openconfig.RelayAgent.Dhcpv6.Interfaces.Interface.Options.State.sent_remote_id:type_name -> ywrapper.StringValue
	39,  // 94: openconfig.RelayAgent.Dhcpv6.Interfaces.Interface.State.Counters.dhcpv6_adverstise_sent:type_name -> ywrapper.UintValue
	39,  // 95: openconfig.RelayAgent.Dhcpv6.Interfaces.Interface.State.Counters.dhcpv6_confirm_received:type_name -> ywrapper.UintValue
	39,  // 96: openconfig.RelayAgent.Dhcpv6.Interfaces.Interface.State.Counters.dhcpv6_decline_received:type_name -> ywrapper.UintValue
	39,  // 97: openconfig.RelayAgent.Dhcpv6.Interfaces.Interface.State.Counters.dhcpv6_info_request_received:type_name -> ywrapper.UintValue
	39,  // 98: openconfig.RelayAgent.Dhcpv6.Interfaces.Interface.State.Counters.dhcpv6_rebind_received:type_name -> ywrapper.UintValue
	39,  // 99: openconfig.RelayAgent.Dhcpv6.Interfaces.Interface.State.Counters.dhcpv6_reconfigure_sent:type_name -> ywrapper.UintValue
	39,  // 100: openconfig.RelayAgent.Dhcpv6.Interfaces.Interface.State.Counters.dhcpv6_relay_forw_sent:type_name -> ywrapper.UintValue
	39,  // 101: openconfig.RelayAgent.Dhcpv6.Interfaces.Interface.State.Counters.dhcpv6_relay_reply_received:type_name -> ywrapper.UintValue
	39,  // 102: openconfig.RelayAgent.Dhcpv6.Interfaces.Interface.State.Counters.dhcpv6_release_received:type_name -> ywrapper.UintValue
	39,  // 103: openconfig.RelayAgent.Dhcpv6.Interfaces.Interface.State.Counters.dhcpv6_reply_sent:type_name -> ywrapper.UintValue
	39,  // 104: openconfig.RelayAgent.Dhcpv6.Interfaces.Interface.State.Counters.dhcpv6_request_received:type_name -> ywrapper.UintValue
	39,  // 105: openconfig.RelayAgent.Dhcpv6.Interfaces.Interface.State.Counters.dhcpv6_solicit_received:type_name -> ywrapper.UintValue
	39,  // 106: openconfig.RelayAgent.Dhcpv6.Interfaces.Interface.State.Counters.invalid_opcode:type_name -> ywrapper.UintValue
	39,  // 107: openconfig.RelayAgent.Dhcpv6.Interfaces.Interface.State.Counters.invalid_options:type_name -> ywrapper.UintValue
	39,  // 108: openconfig.RelayAgent.Dhcpv6.Interfaces.Interface.State.Counters.total_dropped:type_name -> ywrapper.UintValue
	37,  // 109: openconfig.RelayAgent.Dhcpv6.Options.Config.enable_interface_id:type_name -> ywrapper.BoolValue
	37,  // 110: openconfig.RelayAgent.Dhcpv6.Options.Config.enable_remote_id:type_name -> ywrapper.BoolValue
	37,  // 111: openconfig.RelayAgent.Dhcpv6.Options.State.enable_interface_id:type_name -> ywrapper.BoolValue
	37,  // 112: openconfig.RelayAgent.Dhcpv6.Options.State.enable_remote_id:type_name -> ywrapper.BoolValue
	113, // [113:113] is the sub-list for method output_type
	113, // [113:113] is the sub-list for method input_type
	113, // [113:113] is the sub-list for extension type_name
	113, // [113:113] is the sub-list for extension extendee
	0,   // [0:113] is the sub-list for field type_name
}

func init() { file_openconfig_relay_agent_proto_init() }
func file_openconfig_relay_agent_proto_init() {
	if File_openconfig_relay_agent_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_openconfig_relay_agent_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayAgent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_relay_agent_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayAgent_Dhcp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_relay_agent_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayAgent_Dhcpv6); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_relay_agent_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayAgent_Dhcp_AgentInformationOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_relay_agent_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayAgent_Dhcp_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_relay_agent_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayAgent_Dhcp_Interfaces); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_relay_agent_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayAgent_Dhcp_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_relay_agent_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayAgent_Dhcp_AgentInformationOption_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_relay_agent_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayAgent_Dhcp_AgentInformationOption_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_relay_agent_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayAgent_Dhcp_Interfaces_Interface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_relay_agent_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayAgent_Dhcp_Interfaces_InterfaceKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_relay_agent_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayAgent_Dhcp_Interfaces_Interface_AgentInformationOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_relay_agent_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayAgent_Dhcp_Interfaces_Interface_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_relay_agent_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayAgent_Dhcp_Interfaces_Interface_InterfaceRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_relay_agent_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayAgent_Dhcp_Interfaces_Interface_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_relay_agent_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayAgent_Dhcp_Interfaces_Interface_AgentInformationOption_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_relay_agent_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayAgent_Dhcp_Interfaces_Interface_AgentInformationOption_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_relay_agent_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayAgent_Dhcp_Interfaces_Interface_InterfaceRef_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_relay_agent_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayAgent_Dhcp_Interfaces_Interface_InterfaceRef_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_relay_agent_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayAgent_Dhcp_Interfaces_Interface_State_Counters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_relay_agent_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayAgent_Dhcpv6_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_relay_agent_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayAgent_Dhcpv6_Interfaces); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_relay_agent_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayAgent_Dhcpv6_Options); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_relay_agent_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayAgent_Dhcpv6_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_relay_agent_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayAgent_Dhcpv6_Interfaces_Interface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_relay_agent_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayAgent_Dhcpv6_Interfaces_InterfaceKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_relay_agent_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayAgent_Dhcpv6_Interfaces_Interface_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_relay_agent_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayAgent_Dhcpv6_Interfaces_Interface_InterfaceRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_relay_agent_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayAgent_Dhcpv6_Interfaces_Interface_Options); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_relay_agent_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayAgent_Dhcpv6_Interfaces_Interface_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_relay_agent_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayAgent_Dhcpv6_Interfaces_Interface_InterfaceRef_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_relay_agent_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayAgent_Dhcpv6_Interfaces_Interface_InterfaceRef_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_relay_agent_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayAgent_Dhcpv6_Interfaces_Interface_Options_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_relay_agent_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayAgent_Dhcpv6_Interfaces_Interface_Options_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_relay_agent_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayAgent_Dhcpv6_Interfaces_Interface_State_Counters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_relay_agent_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayAgent_Dhcpv6_Options_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_relay_agent_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayAgent_Dhcpv6_Options_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_openconfig_relay_agent_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_openconfig_relay_agent_proto_goTypes,
		DependencyIndexes: file_openconfig_relay_agent_proto_depIdxs,
		MessageInfos:      file_openconfig_relay_agent_proto_msgTypes,
	}.Build()
	File_openconfig_relay_agent_proto = out.File
	file_openconfig_relay_agent_proto_rawDesc = nil
	file_openconfig_relay_agent_proto_goTypes = nil
	file_openconfig_relay_agent_proto_depIdxs = nil
}
